<%args>
	$event
	$round      => undef
	$last       => undef
	$all        => undef
	$first_tb   => undef
	$type       => undef
	$post_level => 3
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();
	my $limit;

	if ($last && $round > 0) {
		$limit  = " and round.name = ".$round->name
	} elsif ($round > 0) {
		$limit .= " and round.name <= ".$round->name." ";
	}

	if ($all) {

	} elsif ($last) {

	} elsif ($type eq "prelim") {
		$limit .= " and round.type in ('prelim', 'highlow', 'highhigh') ";
	} elsif ($type) {
		$limit  .= " and round.type = '$type'";
	} else {
		$limit .= ' and round.type != "elim" and round.type != "final" ' unless $all;
	}

	$limit .= " and round.post_primary >= ".int($post_level) if $post_level;

	my $bye_limit .= " and panel.bye = 0"
		if $round
		&& $round->type ne "elim"
		&& $round->type ne "final";

	my %entry_points = ();
	my %entry_byes = ();

	my $sth = $dbh->prepare("
		select entry.id
			from entry
			where event = ?
			and active = 1
	");

	if ($event) {
		$sth->execute($event->id);
		while (
			my ($entry_id) = $sth->fetchrow_array()
		) {
			$entry_points{$entry_id} = 0;
		}
	}

	$sth->finish();

	if ($first_tb) {

		my ($entries_ref, $tbs_ref, $desc_ref, @whatever)
			= $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $round
			);

		my @keys = sort {$a <=> $b} keys %{$desc_ref};

		my $key = shift @keys if @keys;

		if ($key) {
			foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry_id (@{${$entries_ref}{$seed}}) {
					$entry_points{$entry_id} = ${$tbs_ref}{$entry_id}{$key};
				}
			}
			return %entry_points;
		}
	}

	$sth = $dbh->prepare('
	    select entry.id, panel.bye, score.value
        from (round, panel, entry)
			left join ballot on panel.id = ballot.panel and ballot.entry = entry.id
			left join score on ballot.score = score.id and score.tag = "rank"
        where entry.event = ?
			and round.event = entry.event
			and panel.round = round.id
			and not exists (
				select round_setting.id from round_setting
					where round_setting.tag = "ignore_results"
					and round_setting.round = round.id
			)

		'.$limit .'
		'.$bye_limit .'
	');

	$sth->execute($event->id);

	while( my ($entry_id, $panel_bye, $score) = $sth->fetchrow_array() ) {
		my $points = 4 - $score;
		$points = 3 if $panel_bye;
		$entry_points{$entry_id} += $points;
	}

	return %entry_points;

</%init>
