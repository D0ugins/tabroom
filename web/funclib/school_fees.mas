<%args>
	$school
	$ignore_judging => undef
	$tourn          => undef
	$tourn_settings => undef
	$all            => undef
	$names          => undef
	$entry_fees     => undef
	$concessions    => undef
	$payments       => undef
	$show_deleted   => undef
</%args>
<%init>

	use POSIX;

	my $total;
	my @felines;

	unless ($tourn) { 
		$tourn = $school->tourn;
		my %ts = $tourn->all_settings();
		$tourn_settings = \%ts;
	}

	my $symbol = $tourn_settings->{"currency"};
	my $individuals = $school->setting('individuals');

	$entry_fees++ if $all;
	$payments++ if $all;
	$concessions++ if $all;

	my $total_entry_fees;
	my $total_concessions;
	my $total_payments;

	my $alterna_state = $tourn_settings->{"fees_alternate_state"};

	undef $alterna_state 
		unless $school->chapter 
		&& $school->chapter->state eq $alterna_state;

	if ($entry_fees && $tourn_settings->{"per_person_fee"}) { 

		my %person_line = ();

		$person_line{"name"} = $individuals.' people at x '.$tourn_settings->{"per_person_fee"};

		$person_line{"fee"} = $individuals * $tourn_settings->{"per_person_fee"};

		$person_line{"quantity"} = $individuals;

		$person_line{"per_unit"} = $tourn_settings->{"per_person_fee"};

		$person_line{"short_name"} = "Individuals in Attendance";

		$total += $person_line{"fee"};
		$total_entry_fees += $person_line{"fee"};
		push (@felines, {%person_line});

	}

	if ($entry_fees && $tourn_settings->{"per_student_fee"}) { 

		my @students = $m->comp(
			"/funclib/school_students.mas", 
			school => $school
		);

		my %student_line = ();

		$student_line{"name"} = scalar @students.' individual students at x '.$tourn_settings->{"per_student_fee"};
		$student_line{"fee"} = scalar @students * $tourn_settings->{"per_student_fee"};

		$student_line{"quantity"} = scalar @students;
		$student_line{"per_unit"} = $tourn_settings->{"per_student_fee"};
		$student_line{"short_name"} = "Students in Attendance";

		$total += $student_line{"fee"};
		$total_entry_fees += $student_line{"fee"};
		push (@felines, {%student_line});

	}

	if ($entry_fees) { 

		my $hotel;
		my $hotel_multiplier; 

		if ($school->setting("hotel")) { 
			$hotel = Tab::Hotel->retrieve($school->setting("hotel"));
			$hotel_multiplier = $hotel->multiple;
		}

		if ($hotel && $hotel_multiplier > 1) { 

			my %hotel_warning = ();

			$hotel_warning{"name"} = "You are marked as staying at ".$hotel->name.".  Your entry fees are therefore increased by ".$hotel->multiple."x";

			$hotel_warning{"message"}++;
			push @felines, \%hotel_warning;

		}


		EVENT:
		foreach my $event ($m->comp("/funclib/school_events.mas", school => $school)) { 

			my @entries;

			if ($tourn_settings->{"invoice_waitlist"}) { 
				@entries = Tab::Entry->search( 
					school => $school->id,
					event  => $event->id
				);
			} else { 
				@entries = Tab::Entry->search( 
					school      => $school->id,
					event       => $event->id,
					waitlist    => 0,
					unconfirmed => 0
				);
			}

			my $fee_per = $event->fee;

			$fee_per = $event->setting("alt_state_fee") if $alterna_state;

			my $fee_total = $fee_per * scalar @entries;
			$fee_total = $fee_total * $hotel_multiplier if $hotel_multiplier > 1;

			next EVENT unless $fee_per;

			my $name = scalar @entries. " entries in ".$event->abbr.' x '.$fee_per;

			$fee_per = $fee_per * $hotel_multiplier if $hotel_multiplier > 1;

			$fee_per = sprintf("%.2f", $fee_per);

			my %line_hash= ();

			$line_hash{"quantity"} = scalar @entries;
			$line_hash{"per_unit"} = $fee_per;
			$line_hash{"short_name"} = "Entries in ".$event->name;
			$line_hash{"name"} = $name;
			$line_hash{"fee"} = $fee_total;

			push (@felines, {%line_hash});

			$total_entry_fees += $fee_total;
			$total += $fee_total;
		}


		unless ($ignore_judging) { 

			GROUP:
			foreach my $category (sort {$a->name cmp $b->name} $tourn->categories) { 
				
				my %category_settings = $category->all_settings();
			
				my $rounds_per = $category_settings{"rounds_per"};
				my $judge_per = $category_settings{"judge_per"};
				my $attending_judge_fee = $category_settings{"attending_judge_fee"}; 

				my ($uncovered, $extra ) = $m->comp(
					"/funclib/judgemath/uncovered_burden_by_category.mas", 
					category          => $category,
					category_settings => \%category_settings,
					school            => $school
				);

				if ($attending_judge_fee) { 

					my %judge_fee_hash;

					my @judges = Tab::Judge->search( 
						school   => $school->id,
						category => $category->id 
					);

 					if (@judges) { 
						$judge_fee_hash{"name"} = scalar @judges.' individual judges at x ';
						$judge_fee_hash{"name"} .= $attending_judge_fee;
					}

					$judge_fee_hash{"fee"} = scalar @judges * $attending_judge_fee if @judges;

					$judge_fee_hash{"quantity"} = scalar @judges;
					$judge_fee_hash{"per_unit"} = $attending_judge_fee;
					$judge_fee_hash{"short_name"} = "Judges in Attendance";

					$total += $judge_fee_hash{"fee"};
					$total_entry_fees += $judge_fee_hash{"fee"};
					push (@felines, {%judge_fee_hash});

				} elsif ($category_settings{"track_judge_hires"}) {

					my ($requests, $accepted) = $m->comp(
						'/funclib/school_hires.mas', 
						school   => $school,
						category => $category
					);

					my %hired_fee = ();

					if ($category_settings{"round_hire_fee"}) { 

						if ($accepted ) { 

							$hired_fee{"name"} = $accepted." rounds of judging in ";
							$hired_fee{"name"} .= $category->name.' at '.$category_settings{"round_hire_fee"}." each";

							$hired_fee{"fee"} = $accepted * $category_settings{"round_hire_fee"};

							$hired_fee{"quantity"} = $accepted;
							$hired_fee{"per_unit"} = $category_settings{"round_hire_fee"};
							$hired_fee{"short_name"} = "Rounds of ".$category->abbr." hired judging";

							$total += $accepted * $category_settings{"round_hire_fee"};
							$total_entry_fees += $accepted * $category_settings{"round_hire_fee"};
							push (@felines, {%hired_fee});
						}

					} elsif ($category_settings{"hired_fee"}) { 

						$accepted = ceil($accepted / $judge_per) if $judge_per;
			
						if ($accepted ) { 

							$hired_fee{"name"} = $accepted." hired judges for ".$category->name.' at '.$category_settings{"hired_fee"}." each";
							$hired_fee{"fee"} = $accepted * $category_settings{"hired_fee"};

							$hired_fee{"quantity"} = $accepted;
							$hired_fee{"per_unit"} = $category_settings{"hired_fee"};
							$hired_fee{"short_name"} = $category->abbr." hired judges";

							$total += $accepted * $category_settings{"hired_fee"};
							$total_entry_fees += $accepted * $category_settings{"hired_fee"};
							push (@felines, {%hired_fee});
						}
			
					} elsif ($category_settings{"uncovered_entry_fee"}) { 
					
						if ($accepted ) { 
							my $entry = "entries";
							$entry = "entry" if $accepted == 1;
							$hired_fee{"name"} = "$accepted $entry covered by hires in ".$category->name.' at '.$category_settings{"uncovered_entry_fee"}." each";
							$hired_fee{"fee"} = $accepted * $category_settings{"uncovered_entry_fee"};

							$hired_fee{"quantity"} = $accepted;
							$hired_fee{"per_unit"} = $category_settings{"uncovered_entry_fee"};
							$hired_fee{"short_name"} = $category->abbr." entries covered by hired judging";

							$total += $accepted * $category_settings{"uncovered_entry_fee"};
							$total_entry_fees += $accepted * $category_settings{"uncovered_entry_fee"};
							push (@felines, {%hired_fee});
						}
					}

					# If there are still missing judges despite the hires, warn the
					# user and invalidate the invoice if that's not OK

					if ($uncovered > 0) {

						my %judge_fee_hash = ();

						$uncovered = ceil($uncovered / $judge_per) if $judge_per;

						if ($category_settings{"missing_judge_fee"}) { 

							if ($rounds_per) { 

								my $round = "round";
								$round .= "s" if $uncovered != 1;

								$judge_fee_hash{"name"} = "Missing $uncovered $round in ".$category->name;
								$judge_fee_hash{"fee"} = $uncovered * $category_settings{"missing_judge_fee"};

								$judge_fee_hash{"quantity"} = $uncovered;
								$judge_fee_hash{"per_unit"} = $category_settings{"missing_judge_fee"};
								$judge_fee_hash{"short_name"} = $category->abbr." uncovered rounds of judging";

								$total += $judge_fee_hash{"fee"};
								$total_entry_fees += $judge_fee_hash{"fee"};

							} elsif ($judge_per) { 
						
								my $judge = "judge";
								$judge .= "s" if $uncovered != 1;
								$judge_fee_hash{"name"} = "Missing $uncovered $judge in ".$category->name;
								$judge_fee_hash{"fee"} = $uncovered * $category_settings{"missing_judge_fee"};

								$judge_fee_hash{"quantity"} = $uncovered;
								$judge_fee_hash{"per_unit"} = $category_settings{"missing_judge_fee"};
								$judge_fee_hash{"short_name"} = $category->abbr." judges under obligation";

								$total += $judge_fee_hash{"fee"};
								$total_entry_fees += $judge_fee_hash{"fee"};
							}

						} else { 

							$judge_fee_hash{"name"} = "WARNING: You are short $uncovered judges in ".$category->name.". Hire or register more judges to cover your obligation by the deadline, or the tournament may reject your entry." if $judge_per;

							$judge_fee_hash{"name"} = "WARNING: You are short $uncovered rounds in ".$category->name.". Hire or register more judges to cover your obligation by the deadline, or the tournament may reject your entry." if $rounds_per;

							$judge_fee_hash{"warn"}++;
						}

						push (@felines, {%judge_fee_hash});
				
					}

				} elsif ($uncovered > 0) {

					my %judge_fee_hash = ();

					$uncovered = ceil($uncovered / $judge_per) if $judge_per;

					$judge_fee_hash{"name"} = "WARNING: You are missing $uncovered judge(s) in ".$category->name.".  This tournament does not provide hired judging; register judges or reduce your entry." if $judge_per;

					$judge_fee_hash{"name"} = "WARNING: You are missing $uncovered round(s) in ".$category->name.".  This tournament does not provide hired judging; register judges or reduce your entry." if $rounds_per;

					$judge_fee_hash{"fee"} = $uncovered * $category_settings{'missing_judge_fee'};

					$judge_fee_hash{"warn"} = 1;

					push (@felines, {%judge_fee_hash});

					$total += $judge_fee_hash{"fee"};
					$total_entry_fees += $judge_fee_hash{"fee"};
				}

				my %stimes_under = $m->comp(
					"/funclib/judgemath/judge_partials_short.mas", 
					category          => $category,
					category_settings => \%category_settings,
					school            => $school
				);

				foreach my $key (keys %stimes_under) {

					my $stime = Tab::StrikeTimeslot->retrieve($key);

					next unless $stimes_under{$stime->id} > 0;

					if ($stime->no_hires) { 

						my %judge_fee_hash = ();
						$judge_fee_hash{"name"} .= "WARNING: You are under judge obligation by ";
						$judge_fee_hash{"name"} .= $stimes_under{$stime->id}." judge(s) in ";
						$judge_fee_hash{"name"} .= $category->name." ".$stime->name;

						$judge_fee_hash{"warn"} = 1;
						push (@felines, {%judge_fee_hash});

					} 
					
					if ($stime->fine) { 
					
						my %stime_fine = ();

						$stime_fine{"name"} = $stimes_under{$stime->id}." ".$category->name;
						$stime_fine{"name"} .= "judges under in ".$stime->name." at ".$stime->fine." each";
						$stime_fine{"fee"}  =  $stime->fine * $stimes_under{$stime->id};

						$stime_fine{"quantity"} = $stimes_under{$stime->id};
						$stime_fine{"per_unit"} = $stime->fine;
						$stime_fine{"short_name"} = "Judges under obligation in ".$stime->name;

						$total += $stime->fine * $stimes_under{$stime->id};
						$total_entry_fees += $stime->fine * $stimes_under{$stime->id};
								
						push (@felines, {%stime_fine});
					} 

				}	

			} #end of foreach group

		} 

	} 

	if ($concessions) { 

		foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) {

			my @orders = Tab::ConcessionPurchase->search( 
				school     => $school->id,
				concession => $concession->id 
			);

			my $quantity;

			foreach my $order (@orders) { 
				$quantity += $order->quantity;
			}
		
			next unless $quantity;

			my %line = ();

			$line{"name"} = $quantity." ".$concession->name." at ".$concession->price." each";
			$line{"fee"} = $quantity * $concession->price;

			$line{"quantity"} = $quantity;
			$line{"per_unit"} = $concession->price;
			$line{"short_name"} = $concession->name;


			$total += $quantity * $concession->price;;
			$total_concessions += $quantity * $concession->price;;

			push (@felines, {%line});

		}
	}

	if ($entry_fees || $payments) { 

		my @fines;

		if ($entry_fees) { 

			push @fines, Tab::Fine->search( 
				school  => $school->id,
				deleted => 0,
				payment => 0
			);

			push @fines, Tab::Fine->search( 
				school  => $school->id,
				deleted => 1,
				payment => 0 
			) if $show_deleted;
		}

		if ($payments) { 

			push @fines, Tab::Fine->search( 
				school => $school->id, 
				deleted => 0, 
				payment => 1 
			);

			push @fines, Tab::Fine->search( 
				school  => $school->id,
				deleted => 1,
				payment => 1 
			) if $show_deleted;
		}

		@fines = sort {$a->payment <=> $b->payment} @fines;

		FINE: 
		foreach my $fine (@fines) { 

			my %fine_hash;
			$fine_hash{"name"} .= $fine->reason;
			$fine_hash{"short_name"} .= $fine->reason;

		
			if ($fine->deleted) { 

				$fine_hash{"deleted"}++;

				$fine_hash{"name"} .= " deleted at "
					if $fine->deleted_at;
				$fine_hash{"name"} .= &Tab::niceshortdt($fine->deleted_at->set_time_zone($tourn->tz)) 
					if $fine->deleted_at;

				$fine_hash{"name"} .= " by ". $fine->deleted_by->first." ".$fine->deleted_by->last  
					if $fine->deleted_by && $names;

			} else { 

				$fine_hash{"name"} .= " recorded "
					if $fine->levied_at;

				$fine_hash{"name"} .= &Tab::eurodate($fine->levied_at->set_time_zone($tourn->tz)) 
					if $fine->levied_at;

				$fine_hash{"name"} .= " by ". $fine->levied_by->first." ".$fine->levied_by->last  
					if $fine->levied_by && $names;
			}

			$fine_hash{"fee"} = $fine->amount;
			$fine_hash{"fine_id"} = $fine->id;

			push (@felines, {%fine_hash});
			next if $fine->deleted;

			$total_entry_fees += $fine->amount unless $fine->payment;
			$total_payments += $fine->amount if $fine->payment;
			$total += $fine->amount;

		} # end of foreach fine

	} 

	my %totals = ();

	if ($all) { 
		$totals{"entry_fees"} = $total_entry_fees;
		$totals{"concessions"} = $total_concessions;
		$totals{"payments"} = $total_payments;
	}


	return ($total, \@felines, \%totals);

</%init>
