<%args>
	$school
	$ignore_judging    => undef
	$tourn             => undef
	$tourn_settings    => undef
	$all               => undef
	$names             => undef
	$entry_fees        => undef
	$concessions       => undef
	$payments          => undef
	$show_deleted      => undef
	$categories        => undef
	$category_settings => undef
	$events            => undef
	$concession_array  => undef
	$event_settings    => undef
	$bulk              => undef
	$entries           => undef
	$judges            => undef
	$fines             => undef
	$hires             => undef
</%args>
<%init>

	use POSIX;

	my $total;
	my @felines;

	unless ($tourn) { 
		$tourn = $school->tourn;
		my %ts = $tourn->all_settings();
		$tourn_settings = \%ts;
	}

	my $symbol = $tourn_settings->{"currency"};
	my $school_id = $school->id;

	$entry_fees++ if $all;
	$payments++ if $all;
	$concessions++ if $all;

	my $total_entry_fees;
	my $total_concessions;
	my $total_payments;

	my $alterna_state = $tourn_settings->{"fees_alternate_state"};

	if ($alterna_state) { 
		undef $alterna_state 
			unless $school->chapter 
			&& $school->chapter->state eq $alterna_state;
	}

	if ($entry_fees && $tourn_settings->{"per_person_fee"}) { 
	
		my $individuals = $school->setting('individuals');

		my %person_line = ();

		$person_line{"fee"} = $individuals * $tourn_settings->{"per_person_fee"};

		$total += $person_line{"fee"};

		$total_entry_fees += $person_line{"fee"};

		unless ($bulk) { 

			$person_line{"name"} = $individuals.' people at x '.$tourn_settings->{"per_person_fee"};

			$person_line{"quantity"} = $individuals;

			$person_line{"per_unit"} = $tourn_settings->{"per_person_fee"};

			$person_line{"short_name"} = "Individuals in Attendance";

			push (@felines, {%person_line});
		}
	}


	if ( $entry_fees && 
		(	$tourn_settings->{"per_student_fee"}
			|| $tourn_settings->{$tourn->id}{"hotels"}
		)
	) { 

		my $hotel;

		if ($bulk) { 
			$hotel = $tourn_settings->{$tourn->id}{"hotels"}{$school->setting("hotel")};
		} elsif (not defined $bulk) { 
			my $hotel_id = $school->setting("hotel");
			$hotel = Tab::Hotel->retrieve($hotel_id) if $hotel_id;
		}

		$hotel_surcharge = $hotel->surcharge if $hotel;

		if ($tourn_settings->{"per_student_fee"} || $hotel_surcharge ) { 

			my @students = $m->comp(
				"/funclib/school_students.mas", 
				school => $school
			);

			if ($tourn_settings->{"per_student_fee"}) { 

				my %student_line = ();

				$student_line{"fee"} = (scalar @students) * $tourn_settings->{"per_student_fee"};

				$total += $student_line{"fee"};
				
				$total_entry_fees += $student_line{"fee"};

				unless ($bulk) { 

					$student_line{"name"} = scalar @students.' individual students at x '.$tourn_settings->{"per_student_fee"};

					$student_line{"quantity"} = scalar @students;
					$student_line{"per_unit"} = $tourn_settings->{"per_student_fee"};
					$student_line{"short_name"} = "Students in Attendance";

					push (@felines, {%student_line});

				}
			}
			
			if ($hotel_surcharge) { 

				my %surcharge_line = ();

				$surcharge_line{"fee"} = (scalar @students) * $hotel_surcharge;

				$total += $surcharge_line{"fee"};
				$total_entry_fees += $surcharge_line{"fee"};

				unless ($bulk) { 

					$surcharge_line{"name"} = scalar @surcharges.' competitors in a non-block hotel x '.$hotel_surcharge; 
					$surcharge_line{"quantity"} = scalar @students;
					$surcharge_line{"per_unit"} = $hotel_surcharge;
					$surcharge_line{"short_name"} = "Non-block hotel surcharge";

					push (@felines, {%surcharge_line});

				}
			}
		}
	}

	if ($entry_fees) { 

		my @entries;

		@entries = @{$entries} if $entries;

		unless (@entries || $bulk) { 

			Tab::Entry->set_sql( with_event => "
				select entry.*, entry.event as eventid, event.category as categoryid
				from entry, event
				where entry.school = ? 
				and entry.unconfirmed = 0
				and entry.event = event.id
			");

			@entries = Tab::Entry->search_with_event($school_id);
		}


		my %entries_by_event;
		my %entries_by_category;

		foreach my $entry (@entries) { 
			if ($entry->waitlist) { 
				push @{$entries_by_event{$entry->eventid}{"waitlist"}}, $entry;
				push @{$entries_by_category{$entry->categoryid}{"waitlist"}}, $entry;
			} else { 
				push @{$entries_by_event{$entry->eventid}{"confirmed"}}, $entry;
				push @{$entries_by_category{$entry->categoryid}{"confirmed"}}, $entry;
			}
		}

		my $hotel_multiplier;
		my $hotel;

		if ($bulk && $tourn_settings->{$tourn->id}{"hotels"}) { 

			$hotel = $tourn_settings->{$tourn->id}{"hotels"}{$school->setting("hotel")};
			$hotel_multiplier = $hotel->multiple if $hotel;

		} elsif (not defined $bulk) { 

			my $hotel_id = $school->setting("hotel");
			$hotel = Tab::Hotel->retrieve($hotel_id) if $hotel_id;
			$hotel_multiplier = $hotel->multiple if $hotel;

		}

		unless ($bulk) { 

			if ($hotel && $hotel_multiplier > 1) { 

				my %hotel_warning = ();

				$hotel_warning{"name"} = "You are marked as staying at ".$hotel->name.".  Your entry fees are therefore increased by ".$hotel->multiple."x";

				$hotel_warning{"message"}++;
				push @felines, \%hotel_warning;

			}
		}

		my @events;

		@events = @{$events} if $events;
		@events = $tourn->events unless @events;

		EVENT:
		foreach my $event (@events) { 

			my $event_id = $event->id;

			my @entries;
			
			@entries = @{$entries_by_event{$event_id}{"confirmed"}}
				if $entries_by_event{$event_id}{"confirmed"};

			push @entries, @{$entries_by_event{$event_id}{"waitlist"}}
				if $tourn_settings->{"invoice_waitlist"}
				&& $entries_by_event{$event_id}{"waitlist"};

			next unless @entries;
		

			unless ($event_settings->{$event_id}) { 
				%{$event_settings->{$event_id}} = $event->all_settings();
				$event_settings->{$event_id}{"fee"} = $event->fee;
			}

			my $fee_per = $event_settings->{$event_id}{"fee"};

			$fee_per = $event_settings->{$event_id}{"alt_state_fee"} 
				if $alterna_state
				&& $event_settings;

			$fee_per = $event->setting("alt_state_fee") 
				if $alterna_state
				&! $event_settings;
				
			my $fee_total = $fee_per * scalar @entries;
			$fee_total = $fee_total * $hotel_multiplier if $hotel_multiplier > 1;

			next EVENT unless $fee_total;

			$total_entry_fees += $fee_total;
			$total += $fee_total;


			unless ($bulk) { 

				my $name = scalar @entries. " entries in ".$event->abbr.' x '.$fee_per;

				$fee_per = sprintf("%.2f", $fee_per);

				my %line_hash= ();

				$line_hash{"quantity"} = scalar @entries;
				$line_hash{"per_unit"} = $fee_per;
				$line_hash{"short_name"} = "Entries in ".$event->name;
				$line_hash{"name"} = $name;
				$line_hash{"fee"} = $fee_total;

				push (@felines, {%line_hash});

			}

		}

		unless ($ignore_judging) { 

			my @categories;
			@categories = @{$categories} if $categories;
			@categories = $tourn->categories unless @categories;

			GROUP:
			foreach my $category (@categories) { 

				my $category_id = $category->id;

				next unless $entries_by_category{$category_id}{"confirmed"}
					|| ($entries_by_category{$category_id}{"waitlist"}
					 	&& $tourn_settings->{"judges_waitlist"});

				unless ($category_settings->{$category_id}) { 
					%{$category_settings->{$category_id}} = $category->all_settings();
					@{$category_settings->{$category_id}{"shifts"}}
						= $category->shifts(type => "strike");
				}
			
				my $rounds_per = $category_settings->{$category_id}{"rounds_per"};
				my $judge_per = $category_settings->{$category_id}{"judge_per"};
				my $attending_judge_fee = $category_settings->{$category_id}{"attending_judge_fee"}; 

				if ($category_settings->{$category_id}{"drops_no_burden"}) { 
					my @undropped;
					foreach my $entry (@{$entries_by_category{$category_id}{"confirmed"}}) { 
						push @undropped, $entry unless $entry->dropped;
					}

					@{$entries_by_category{$category_id}{"confirmed"}} = @undropped;

				}


				my ($uncovered, $extra ) = $m->comp(
					"/funclib/judgemath/uncovered_burden_by_category.mas", 
					category          => $category,
					category_settings => $category_settings->{$category_id},
					event_settings    => $event_settings,
					judges            => $judges->{$category_id},
					hires             => $hires->{$category_id},
					school            => $school,
					confirmed         => $entries_by_category{$category_id}{"confirmed"},
					waitlist          => $entries_by_category{$category_id}{"waitlist"},
					bulk              => $bulk
				);

				if ($attending_judge_fee) { 

					my %judge_fee_hash;

					my @judges;
					
					if ($judges) { 

						foreach my $judge (@{$judges->{$all}}) { 
							push @judges, $judge if $judge->categoryid == $category_id;
						}
					
					} else {

						@judges = Tab::Judge->search( 
							school   => $school_id,
							category => $category_id 
						);
					}

					unless ($bulk) { 

						if (@judges) { 
							$judge_fee_hash{"name"} = scalar @judges.' individual judges at x ';
							$judge_fee_hash{"name"} .= $attending_judge_fee;
						}

						$judge_fee_hash{"fee"} = 
							scalar @judges * $attending_judge_fee 
							if @judges;

						$judge_fee_hash{"quantity"} = scalar @judges;
						$judge_fee_hash{"per_unit"} = $attending_judge_fee;
						$judge_fee_hash{"short_name"} = "Judges in Attendance";
					
						push (@felines, {%judge_fee_hash});

					}

					$total_entry_fees += $judge_fee_hash{"fee"};
					$total += $judge_fee_hash{"fee"};

				} elsif ($category_settings->{$category_id}{"track_judge_hires"}) {

					my ($requests, $total_accepted) = $m->comp(
						'/funclib/school_hires.mas', 
						school            => $school,
						category          => $category,
						category_settings => $category_settings->{$category_id},
						hires             => $hires->{$category_id},
						bulk              => $bulk
					);

					my %adjustments = $m->comp(
						"/funclib/judge_hire_adjustments.mas", 
						school            => $school,
						category          => $category,
						category_settings => $category_settings->{$category_id},
						hires             => $hires->{$category_id}
					);

					my %hired_fee = ();

					my @adjustments = sort {$b <=> $a} keys %adjustments;
					push @adjustments, 0; 

					my $adjustment_amount;

					foreach my $adjustment (@adjustments) { 

						my $accepted = $total_accepted; 

						if ($adjustment == 0) { 

							$accepted = $total_accepted; 
						
						} else { 

							$accepted = $adjustments{$adjustment};
							$accepted = $total_accepted if $accepted > $total_accepted;
							$total_accepted -= $accepted; 
						}

						if ($category_settings->{$category_id}{"round_hire_fee"}) { 

							my $fee = $category_settings->{$category_id}{"round_hire_fee"};
							$fee = $fee + ($fee * ($adjustment / 100));

							if ($accepted ) { 

								$hired_fee{"fee"} = $accepted * $fee;

								$total_entry_fees += $accepted * $fee;

								$total += $accepted * $fee;

								unless ($bulk) { 

									$hired_fee{"name"} = $accepted." rounds of judging in ";
									$hired_fee{"name"} .= $category->name.' at '. $fee." each";

									$hired_fee{"quantity"} = $accepted;
									$hired_fee{"per_unit"} = $fee;
									$hired_fee{"short_name"} = "Rounds of ".$category->abbr." hired judging";
									push (@felines, {%hired_fee});

								}

							}

						} elsif ($category_settings->{$category_id}{"hired_fee"}) { 

							$accepted = ceil($accepted / $judge_per) if $judge_per;

							my $fee = $category_settings->{$category_id}{"hired_fee"};
							$fee = $fee + ($fee * ($adjustment / 100));
				
							if ($accepted ) { 

								$hired_fee{"fee"} = $accepted * $fee;
								$total += $accepted * $fee;
								$total_entry_fees += $accepted * $fee;

								unless ($bulk) { 

									$hired_fee{"name"} = $accepted." hired judges for ".$category->name.' at '.$fee." each";

									$hired_fee{"quantity"} = $accepted;
									$hired_fee{"per_unit"} = $fee;
									$hired_fee{"short_name"} = $category->abbr." hired judges";
									push (@felines, {%hired_fee});
								}

							}
				
						} elsif ($category_settings->{$category_id}{"uncovered_entry_fee"}) { 
						
							my $fee = $category_settings->{$category_id}{"uncovered_entry_fee"};
							$fee = $fee + ($fee * ($adjustment / 100));

							if ($accepted ) { 

								my $entry = "entries";
								$entry = "entry" if $accepted == 1;

								$hired_fee{"fee"} = $accepted * $fee;
								$total += $accepted * $fee;
								$total_entry_fees += $accepted * $fee;

								unless ($bulk) { 

									$hired_fee{"name"} = "$accepted $entry covered by hires in ";
									$hired_fee{"name"} .= $category->name.' at ';
									$hired_fee{"name"} .= $fee." each";


									$hired_fee{"quantity"} = $accepted;
									$hired_fee{"per_unit"} = $fee;
									$hired_fee{"short_name"} = $category->abbr." entries covered by hired judging";
									push (@felines, {%hired_fee});

								}

							}
						}

					}

					# If there are still missing judges despite the hires, warn the
					# user and invalidate the invoice if that's not OK
				

					if ($uncovered > 0) {

						my %judge_fee_hash = ();

						$uncovered = ceil($uncovered / $judge_per) if $judge_per;

						if ($category_settings->{$category_id}{"missing_judge_fee"}) { 

							if ($rounds_per) { 

								$judge_fee_hash{"fee"} = 
									$uncovered 
									* $category_settings->{$category_id}{"missing_judge_fee"};

								$total += $judge_fee_hash{"fee"};
								$total_entry_fees += $judge_fee_hash{"fee"};

								unless ($bulk) { 

									my $round = "round";
									$round .= "s" if $uncovered != 1;

									$judge_fee_hash{"name"} = "Missing $uncovered $round in ".$category->name;

									$judge_fee_hash{"quantity"} = $uncovered;
									$judge_fee_hash{"per_unit"} = $category_settings->{$category_id}{"missing_judge_fee"};
									$judge_fee_hash{"short_name"} = $category->abbr." uncovered rounds of judging";
								}


							} elsif ($judge_per) { 
						

								$judge_fee_hash{"fee"} = 
									$uncovered * $category_settings->{$category_id}{"missing_judge_fee"};

								$total += $judge_fee_hash{"fee"};
								$total_entry_fees += $judge_fee_hash{"fee"};

								unless ($bulk) { 

									my $judge = "judge";
									$judge .= "s" if $uncovered != 1;
									$judge_fee_hash{"name"} = "Missing $uncovered $judge in ".$category->name;

									$judge_fee_hash{"quantity"} = $uncovered;
									$judge_fee_hash{"per_unit"} = $category_settings->{$category_id}{"missing_judge_fee"};
									$judge_fee_hash{"short_name"} = $category->abbr." judges under obligation";
								}

							}

						} else { 

							unless ($bulk) { 

								$judge_fee_hash{"name"} = "WARNING: You are short $uncovered judges in ".$category->name.". Hire or register more judges to cover your obligation by the deadline, or the tournament may reject your entry." if $judge_per;

								$judge_fee_hash{"name"} = "WARNING: You are short $uncovered rounds in ".$category->name.". Hire or register more judges to cover your obligation by the deadline, or the tournament may reject your entry." if $rounds_per;

								$judge_fee_hash{"warn"}++;
							}
						}

						push (@felines, {%judge_fee_hash});
				
					}

				} elsif ($uncovered > 0) {

					my %judge_fee_hash = ();

					$uncovered = ceil($uncovered / $judge_per) if $judge_per > 0;

					$judge_fee_hash{"fee"} = $uncovered * $category_settings->{$category_id}{'missing_judge_fee'};
					$judge_fee_hash{"warn"} = 1;

					$total += $judge_fee_hash{"fee"};
					$total_entry_fees += $judge_fee_hash{"fee"};

					unless ($bulk) { 

						$judge_fee_hash{"name"} = "WARNING: You are missing $uncovered judge(s) in ".$category->name.".  This tournament does not provide hired judging; register judges or reduce your entry." if $judge_per;

						$judge_fee_hash{"name"} = "WARNING: You are missing $uncovered round(s) in ".$category->name.".  This tournament does not provide hired judging; register judges or reduce your entry." if $rounds_per;


						push (@felines, {%judge_fee_hash});
					}

				}

				if ($category_settings->{$category_id}{"shifts"}) { 

					my %stimes_under = $m->comp(
						"/funclib/judgemath/judge_partials_short.mas", 
						category          => $category,
						category_settings => $category_settings->{$category_id},
						event_settings    => $event_settings,
						tourn_settings    => $tourn_settings,
						school            => $school,
						confirmed         => $entries_by_category{$category_id}{"confirmed"},
						waitlist          => $entries_by_category{$category_id}{"waitlist"},
						judges            => $judges->{$category_id},
						hires             => $hires->{$category_id},
						shifts			  => $category_settings->{$category_id}{"shifts"},
						bulk              => $bulk
					);

					foreach my $key (keys %stimes_under) {

						my $stime = Tab::JudgeShift->retrieve($key);

						next unless $stimes_under{$stime->id} > 0;

						if ($stime->no_hires) { 

							my %judge_fee_hash = ();
							$judge_fee_hash{"name"} .= "WARNING: You are under judge obligation by ";
							$judge_fee_hash{"name"} .= $stimes_under{$stime->id}." judge(s) in ";
							$judge_fee_hash{"name"} .= $category->name." ".$stime->name;

							$judge_fee_hash{"warn"} = 1;
							push (@felines, {%judge_fee_hash});

						} 
						
						if ($stime->fine) { 
						
							my %stime_fine = ();
							$stime_fine{"fee"}  =  $stime->fine * $stimes_under{$stime->id};
							$total += $stime->fine * $stimes_under{$stime->id};
							$total_entry_fees += $stime->fine * $stimes_under{$stime->id};

							unless ($bulk) { 

								$stime_fine{"name"} = $stimes_under{$stime->id}." ".$category->name;
								$stime_fine{"name"} .= "judges under in ".$stime->name." at ".$stime->fine." each";

								$stime_fine{"quantity"} = $stimes_under{$stime->id};
								$stime_fine{"per_unit"} = $stime->fine;
								$stime_fine{"short_name"} = "Judges under obligation in ".$stime->name;
								push (@felines, {%stime_fine});

							}

						} 

					}	
				}	


			} #end of foreach group

		} 


	} 

	if ($concessions) { 

		my @concessions;

		@concessions = @{$concession_array} if $concession_array;

		@concessions = $tourn->concessions 
			unless @concessions || $bulk;

		foreach my $concession (@concessions) {

			my @orders = Tab::ConcessionPurchase->search( 
				school     => $school_id,
				concession => $concession->id 
			);

			my $quantity;

			foreach my $order (@orders) { 
				$quantity += $order->quantity;
			}
		
			next unless $quantity;

			$total += $quantity * $concession->price;
			$total_concessions += $quantity * $concession->price;

			next if $bulk;

			my %line = ();

			$line{"name"} = $quantity." ".$concession->name." at ".$concession->price." each";
			$line{"fee"} = $quantity * $concession->price;

			$line{"quantity"} = $quantity;
			$line{"per_unit"} = $concession->price;
			$line{"short_name"} = $concession->name;

			push (@felines, {%line});

		}
	}

	if ($entry_fees || $payments) { 

		my @all_fines;
		
		@all_fines = @{$fines} if $fines;

		@all_fines = Tab::Fine->search(
			school => $school_id
		) unless $bulk || @all_fines;

		my @fines;

		foreach my $fine (@all_fines) { 

			next if ( (not defined $show_deleted) && $fine->deleted);
			next if ( (not defined $entry_fees) && $fine->payment == 0);
			next if ( (not defined $payments) && $fine->payment != 0);

			push @fines, $fine;

		}

		FINE: 
		foreach my $fine (@fines) { 

			my %fine_hash;

			unless ($bulk) { 

				my $reason = $fine->reason;

				$fine_hash{"name"} .= $reason;
				$fine_hash{"short_name"} .= $reason;

				if ($fine->deleted) { 

					$fine_hash{"deleted"}++;

					$fine_hash{"name"} .= " deleted at "
						if $fine->deleted_at;
					$fine_hash{"name"} .= &Tab::niceshortdt($fine->deleted_at->set_time_zone($tourn->tz)) 
						if $fine->deleted_at;

					$fine_hash{"name"} .= " by ". $fine->deleted_by->first." ".$fine->deleted_by->last  
						if $fine->deleted_by && $names;

				} else { 

					$fine_hash{"name"} .= " recorded "
						if $fine->levied_at;

					$fine_hash{"name"} .= &Tab::eurodate($fine->levied_at->set_time_zone($tourn->tz)) 
						if $fine->levied_at;

					$fine_hash{"name"} .= " by ". $fine->levied_by->first." ".$fine->levied_by->last  
						if $fine->levied_by && $names;
				}
			
				$fine_hash{"fine_id"} = $fine->id;
				$fine_hash{"fee"} = $fine->amount;

				push (@felines, {%fine_hash});
			}


			next if $fine->deleted;

			if ($fine->payment > 0) { 
				$total_payments += $fine->amount;
			} else { 
				$total_entry_fees += $fine->amount;
			}


			$total += $fine->amount;

		} # end of foreach fine

	} 

	my %totals = ();

	if ($all) { 
		$totals{"entry_fees"} = $total_entry_fees;
		$totals{"concessions"} = $total_concessions;
		$totals{"payments"} = $total_payments;
	}

	return ($total, \@felines, \%totals);

</%init>
