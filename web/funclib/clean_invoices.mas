<%args>
</%args>
<%init>

	Tab::School->set_sql(invoiced => "
		select distinct school.*
		from school, invoice, chapter
		where  school.chapter = chapter.id
		and chapter.nsda > 0
		and school.id = invoice.school
		and invoice.blusynergy > 0
	");

    use JSON;
    use MIME::Base64;
    use REST::Client;
	use Data::Dumper;

    my $auth_header = encode_base64($Tab::nsda_api_user.":".$Tab::nsda_api_key);

	my $true = bless( do{\(my $o = 1)}, 'JSON::PP::Boolean' );

	my $client = REST::Client->new(
		host => $Tab::nsda_api_endpoint
	);

	my $counter;

	$m->clear_buffer;

	foreach my $school (Tab::School->search_invoiced) {

		$client->GET(
			"/v2/schools/".$school->chapter->nsda."/invoices?status=all",
			{
				'Authorization' => "Basic $auth_header",
				'Content-Type'  => 'application/json',
				'Accept'        => 'application/json'
			}
		);

		my $response_json = $client->responseContent();

        my %answered_invoices = eval {
			return %{JSON::decode_json($response_json)};
		};

		my %exists;

		foreach my $blu_invoice (@{$answered_invoices{"invoices"}}) {
			$exists{$blu_invoice->{"invoiceId"}}++;
		}

		$m->print("<p>Testing school ".$school->name.": ");

		foreach my $invoice ($school->invoices) {

			my $string = "NSDA Invoice #".$invoice->blusynergy." paid";

			my @payments = Tab::Fine->search(
				reason => $string,
				school => $school->id
			);

			unless ($exists{$invoice->blusynergy}) {

				$m->print("FOUND: Unclear invoice ".$invoice->id." found for ".$invoice->school->name);

				foreach my $payment (@payments) {
					$m->print("Payment ".$payment->reason." deleted");
					#$payment->delete();
				}

				# $invoice->delete();
				$m->flush_buffer();

			} else {

				my $ok = shift @payments;

				if (@payments) {
					foreach (@payments) {
						$m->print("Payment ".$_->reason." deleted because $ok is registered");
						#$_->delete();
					}
				}

			}
		}

		$m->print("</p>");

		last if $counter++ > 20;
		sleep(.5);
	}

	$m->flush_buffer();
	$m->abort();

</%init>
