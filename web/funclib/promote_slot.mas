<%args>
	$person
	$entry
</%args>
<%init>

	if ($entry->setting("autoqual")) { 
		return "That slot was an auto-qualifier; no additional entry was promoted";
	}

	my $school = $entry->school;
	my $dest_event = $entry->event;
	my $tourn = $school->tourn;
	my $district = $school->district;

	unless ($tourn 
		&& $school->district 
		&& $tourn->setting("nsda_nats")
	) { 
		return "This only is appropriate for Nationals";
	}

	my $original_id = $entry->setting("source_entry");

	my $original_entry = Tab::Entry->retrieve($original_id) 
		if $original_id 
		&& $original_id eq int($original_id);

	unless ($original_entry) { 
		return "No promotion necessary; entry did not originate from a District tournament";
	}

	my $event = $original_entry->event;
	$original_entry->setting("nsda_vacate", 1);

	my %qualifiers = $m->comp(
		"/funclib/district_qualifiers.mas",
		event => $event
	);

    my @district_entries = 
        $m->comp("/funclib/nationals_entry.mas",
            district => $district,
            tourn => $tourn
	);

	my %existing_entries  =   
		map {$_->source_entry => $_} 
		@district_entries;

	my $new_entry;
	my $msg;

	foreach my $key (
		sort {$a <=> $b}
		keys %qualifiers
	) { 

		next if $key eq "tags";
		next if $key eq "descs";

		my $entry = $qualifiers{$key}{"entry"};

		next unless $entry;

		unless (
			$qualifiers{$key}{"vacated"}
			|| $existing_entries{$entry->id}
		) {

			$new_entry = $m->comp(
				"/funclib/transfer_entry.mas",
				person   => $person,
				entry    => $entry,
				event    => $dest_event,
				district => $district->id
			);

			Tab::debuglog("New entry is ".$new_entry->id."!!!");

		}

		next unless $new_entry;

		$msg = "Because of rejection of ".$original_entry->id." ".$original_entry->name.", $new_entry ".$new_entry->name." promoted into ".$event->abbr;

		$m->comp("/funclib/log.mas",
			tourn       => $tourn,
			event       => $dest_event,
			entry       => $new_entry->id,
			type        => "promotions",
			person      => $person,
			description => $msg
		);

	}

	my $body = "\n";
	$body .= $person->first." ".$person->last." from ".$original_entry->school->name." has rejected ";
	$body .= "or dropped an entry in ".$dest_event->abbr;
	$body .= "for the ".$tourn->name.".\n\n";
	$body .= "The next alternate entry from Districts is:\n";
	$body .= $new_entry->name."\n";
	$body .= $new_entry->school->name."\n";
	$body .= "and has been automatically promoted into Nationals registration";
	$body .= "\n\n";

	$body .= "New entries can be accepted or rejected on Tabroom.com.  Full details and a link ";
	$body .= "to registration are available at http://www.speechanddebate.org/nationals.";
	$body .= "\n\n";

	$body .= "If any of the above details are incorrect, please contact the NSDA office immediately; ";
	$body .= "you can do so by simply replying to this email.";

	my %contacts;

	$contacts{$person->id} = $person; 

	my $new_school = $new_entry->school;
	my $old_school = $entry->school;

	my $district_chair = Tab::Permission->search(
		tag      => "chair",
		district => $district->id
	)->first;

	$contacts{$district_chair->person->id} = $district_chair->person 
		if $district_chair 
		&& $district_chair->person > 0;

	foreach my $school ($new_school, $old_school) { 

		foreach my $coach (Tab::Permission->search(
			tag     => "chapter",
			chapter => $school->chapter->id)
		) { 
			$contacts{$coach->person->id} = $coach->person if $coach->person > 0;
		}
	}

	my @tos;

	foreach my $contact (keys %contacts) { 
		push @tos, $contacts{$contact};
	}

	my $reply = $m->comp("/funclib/send_email.mas", 
		subject     => "Nationals Entry Reject/Promotion",
		from        => $person,
		body        => $body,
		from_string => "nsda",
		array       => \@tos
	);

	$msg .= "<br />".$reply;

	Tab::debuglog("Sent email to @tos");
	Tab::debuglog("");
	Tab::debuglog("Body $body");

	return $msg;

</%init>
