<%args>
	$round
	$tiebreak_set => undef
	$simple       => undef
	$delimiter    => undef
	$round_name   => undef
</%args>
<%init>

	unless ($round && $round->id) { 
		return;
	}

	unless ($round->tiebreak_set) { 
		my $err = "That round does not have tiebreakers set.  ";
		$err .= "Please establish tiebreakers for all rounds";

		$m->redirect("/setup/schedule/event.mhtml?event_id=".$round->event->id."&err=$err");
	}

	my $type = $round->event->type;

	my %tb_types = $m->comp(
		"/funclib/tiebreak_types.mas", 
		tiebreak_set => $round->tiebreak_set
	);

	$tiebreak_set = $round->tiebreak_set unless $tiebreak_set;

	foreach my $tb ($tiebreak_set->tiebreaks) { 

		$tb_types{"ranks"}++
			if ($tb->name eq "ranks" 
				|| $tb->name eq "downs" 
				|| $tb->name eq "reciprocals");

		$tb_types{"winloss"}++
			if ($tb->name eq "opp_wins" 
				|| $tb->name eq "winloss" 
				|| $tb->name eq "ballots");

		$tb_types{"points"}++
			if ($tb->name eq "points" 
				|| $tb->name eq "competition" 
				|| $tb->name eq "opp_points");

		if ($tb->child) { 

			foreach my $otb ($tb->child->tiebreaks) { 

				$tb_types{"ranks"}++
					if ($otb->name eq "ranks" 
						|| $otb->name eq "downs" 
						|| $otb->name eq "reciprocals");

				$tb_types{"winloss"}++
					if ($otb->name eq "opp_wins" 
						|| $otb->name eq "winloss" 
						|| $otb->name eq "ballots");

				$tb_types{"points"}++
					if ($otb->name eq "points" 
						|| $otb->name eq "competition" 
						|| $otb->name eq "opp_points");

			}
		}
	}
	
	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select value.id, value.tag, value.value, 
			ballot.entry, ballot.judge, 
			panel.bye, ballot.bye, ballot.forfeit, ballot.chair, 
			round.id, round.name, round.type
		from (ballot, panel, round)
		left join score value on value.ballot = ballot.id
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.name <= ?
		and round.event =  ? 
		and not exists ( 
			select round_setting.id 
				from round_setting where round_setting.tag = 'ignore_results' 
				and round_setting.round = round.id
			)
		order by round.name, ballot.entry, ballot.chair, ballot.judge, 

			CASE value.tag 

				WHEN 'ballot' then 1 
				when 'rank' then 2 
				when 'points' then 3 
				when 'rebuttal_points' then 4 
				end
	");

	$round_name = int($round_name);
	$round_name = $round->name unless $round_name;

	$sth->execute($round_name, $round->event->id); 

	my %entry_round;

	my %entry_ballots;

	my $last_round;

	while (my (
		$id, $tag, $value, $entryid, $judge, 
		$pbye, $bye, $fft, $chair, 
		$roundid, $roundname, $roundtype

	) = $sth->fetchrow_array() ) { 

		if ($roundname != $entry_round{$entryid}) { 
			if ($simple) { 
				$entry_ballots{$entryid} .= " - " if $entry_ballots{$entryid};
			} elsif ($delimiter) { 
				$entry_ballots{$entryid} .= " ".$delimiter." " if $entry_ballots{$entryid};
			} else { 
				$entry_ballots{$entryid} .= " \n R$roundname:";
			}
		}

		unless ($tag) { 
			if ($pbye || $bye) { 
				$entry_ballots{$entryid} .= " B ";
			} elsif ($fft) { 
				$entry_ballots{$entryid} .= " F "; 
			}

			$entry_ballots{$entryid} .= " ";
		}

		if ($tag eq "ballot") { 

			$entry_ballots{$entryid} .= " " if $roundname != $entry_round{$entryid};

			if ($pbye || $bye) { 
				$entry_ballots{$entryid} .= "B"; 
			} elsif ($fft) { 
				$entry_ballots{$entryid} .= "F";
			} else { 
				$entry_ballots{$entryid} .= "W" if $value > 0;
				$entry_ballots{$entryid} .= "L" if $value < 1;
			}

		} elsif ($type eq "speech" && $tag eq "rank") { 

			$entry_ballots{$entryid} .= " ";
			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		} elsif ($tb_types{"ranks"} && $tag eq "rank") {

			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		} elsif ($tb_types{"points"} && $tag eq "points") {

			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		} elsif ($tb_types{"points"} && $tag eq "rebuttal_points") {

			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		}

		$entry_round{$entryid} = $roundname;

	}

	return %entry_ballots;

</%init>
