<%args>
	$chapter   => undef
	$target_id => undef
</%args>
<%init>

	use Tab::NSDA::Login;

	$chapter = Tab::Chapter->retrieve($target_id) if $target_id;

	unless ($chapter) {
		if ($ARGS{"return"}) {
			return;
		}
		$m->clear_buffer();
		$r->content_type('application/json');
		$m->print('{ "error": true, "message": "No school sent"}');
		$m->abort();
	}

	Tab::Chapter->set_sql(update_degrees => "
		update tabroom.chapter_setting cs,
			tabroom.chapter chapter,
			points.NEW_SCHOOLS school
			set cs.value = school.school_total_deg

			where cs.chapter = chapter.id
			and chapter.id = ?
			and cs.tag = 'nsda_degrees'
			and chapter.nsda = school.school_id
			and chapter.nsda > 0
	");

	Tab::Chapter->sql_update_degrees->execute($chapter->id);

	Tab::Chapter->set_sql(update_paid => "
		update tabroom.chapter_setting cs,
			tabroom.chapter chapter,
			points.NEW_SCHOOLS school
			set cs.value = school.school_paid_status

			where cs.chapter = chapter.id
			and chapter.id = ?
			and cs.tag = 'nsda_paid'
			and chapter.nsda = school.school_id
			and chapter.nsda > 0
	");

	Tab::Chapter->sql_update_paid->execute($chapter->id);

	Tab::Chapter->set_sql(update_charter => "
		update tabroom.chapter_setting cs,
			tabroom.chapter chapter,
			points.NEW_SCHOOLS school
			set cs.value = school.school_charter_status

			where cs.chapter = chapter.id
			and chapter.id = ?
			and cs.tag = 'nsda_charter'
			and chapter.nsda = school.school_id
			and chapter.nsda > 0
	");

	Tab::Chapter->sql_update_charter->execute($chapter->id);

	Tab::Student->set_sql(update_email=> "

		update tabroom.student_setting ss
			inner join tabroom.student student on student.id = ss.student
			inner join tabroom.chapter chapter on chapter.id = student.chapter
			inner join points.NEW_USERS person on person.user_id = student.nsda
			inner join points.DEMOGRAPHICS demo on demo.person_id = person.user_id
			left join nsda.logins logins on logins.person_id = person.user_id

			set ss.value = (
				case
					when (person.uemail is not null and person.uemail <> '') then person.uemail
					when (demo.student_email is not null and demo.student_email <> '') then demo.student_email
					when (logins.username is not null and logins.username <> '') then logins.username
					else ''
				end
			)

			where ss.tag = 'student_email'
			and chapter.id = ?
			and chapter.nsda > 0
	");

	Tab::Student->sql_update_email->execute($chapter->id);

	Tab::Student->set_sql(update_link => "

		update tabroom.student student,
			tabroom.chapter chapter,
			tabroom.person person,
			points.NEW_USERS user

			set student.person = person.id

			where (student.person is null or student.person = 0)
			and student.nsda = user.user_id

			and student.chapter = chapter.id
			and chapter.id = ?
			and chapter.nsda > 0
	");

	Tab::Student->sql_update_link->execute($chapter->id);

	Tab::Student->set_sql(update_paid => "

		update tabroom.student_setting ss,
			tabroom.student student,
			tabroom.chapter chapter,
			points.NEW_USERS person

			set ss.value = 1

			where ss.student = student.id
			and student.nsda = person.user_id
			and person.paid_status = 1
			and ss.tag = 'nsda_paid'

			and student.chapter = chapter.id
			and chapter.id = ?
			and chapter.nsda > 0
	");

	Tab::Student->sql_update_paid->execute($chapter->id);

	Tab::Student->set_sql(update_points => "

		update tabroom.student_setting ss,
			tabroom.student student,
			tabroom.chapter chapter,
			points.NEW_USERS person

			set ss.value = person.total_pts

			where ss.student = student.id
			and student.nsda = person.user_id
			and ss.tag = 'nsda_points'

			and student.chapter = chapter.id
			and chapter.id = ?
			and chapter.nsda > 0
	");

	Tab::Student->sql_update_points->execute($chapter->id);

	Tab::Student->set_sql(update_joined=> "

		update tabroom.student_setting ss,
			tabroom.student student,
			tabroom.chapter chapter,
			points.NEW_USERS_TO_DEGREES degree

			set ss.value_date = degree.dateacquired

			where ss.student = student.id
			and student.ualt_id = degree.ualt_id
			and degree.degree_id = 51
			and ss.tag = 'nsda_joined'

			and student.chapter = chapter.id
			and chapter.id = ?
			and chapter.nsda > 0
	");

	Tab::Student->sql_update_joined->execute($chapter->id);

	Tab::Student->set_sql(update_joined_date => "

		update tabroom.student_setting ss,
			tabroom.student student,
			tabroom.chapter chapter,
			points.NEW_USERS_TO_DEGREES degree

			set ss.value = 'date'

			where ss.student = student.id
			and student.ualt_id = degree.ualt_id
			and degree.degree_id = 51
			and ss.tag = 'nsda_joined'

			and student.chapter = chapter.id
			and chapter.id = ?
			and chapter.nsda > 0
	");

	Tab::Student->sql_update_joined_date->execute($chapter->id);

	Tab::Student->set_sql( no_email => "
		select student.*
		from student
		where student.chapter =?
		and student.retired != 1
		and not exists (
			select se.id
			from student_setting se
			where se.student = student.id
			and se.tag = 'student_email'
			and (se.value = '' or se.value is NULL)
		)
		and student.nsda > 0
	");

	foreach my $student (Tab::Student->search_no_email($chapter->id)) {
		$m->comp("/funclib/nsda_person_link.mas", student => $student);
	}

	return if $ARGS{"return"};

	$m->clear_buffer();
	$r->content_type('application/json');

	my $msg = $chapter->name." has been synced with their NSDA records";
	$m->print('{ "error": false, "message": "'.$msg.'"}');

	$m->abort();

</%init>
