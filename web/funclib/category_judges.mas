<%args>
	$category
	$hires  => undef
	$active => undef
</%args>
<%init>

	return unless $category;

	my $limits = " and judge.school = 0" if $hires;
	$limits .= " and judge.active = 1" if $active;

	my $prefs = $category->setting("prefs");

	Tab::Judge->columns( TEMP  => qw/ cap state 
		districtid distname distcode 
		schname schcode 
		regname regcode 
		perphone peremail
	/);

	if ($prefs && $prefs ne "none" && $prefs ne "ordinals") { 

		Tab::Judge->set_sql( prefs_by_category => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg, 
				tab_rating.value as tab_rating, 
				neutral.value as neutral, 
				diversity.value as diversity, 
				cap.value as cap,

			person.email as peremail, person.phone as perphone,
			school.id as schoolid, school.code as schcode, school.name as schname,
			region.id as regionid, region.name as regname, region.code as regcode,
			district.id as districtid, district.name as distname, district.code as distcode,
			chapter.id as chapterid, chapter.state as state

			from judge

			left outer join rating on rating.judge = judge.id
			left outer join rating_tier on rating_tier.id = rating.rating_tier

			left outer join judge_setting tab_rating 
				on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			left outer join judge_setting diversity 
				on diversity.judge = judge.id and diversity.tag = 'diversity'
			left outer join judge_setting neutral 
				on neutral.judge = judge.id and neutral.tag = 'neutral'
			left outer join judge_setting cap 
				on cap.judge = judge.id and cap.tag = 'chief_adjudicator'

			left outer join person on person.id = judge.person
			left outer join school on school.id = judge.school
			left outer join chapter on chapter.id = school.chapter
			left outer join region on region.id = school.region
			left outer join district on district.id = school.district


			where judge.category = ?
			$limits
			group by judge.id
			order by judge.code, judge.last");

		return Tab::Judge->search_prefs_by_category($category->id);

	} elsif ($prefs eq "ordinals") { 

		Tab::Judge->set_sql( ordinals_by_category => "
			select distinct judge.*, group_concat(distinct rating.id, rating.percentile) as avg, 
				tab_rating.value as tab_rating, 
				neutral.value as neutral, 
				diversity.value as diversity, 
				cap.value as cap,
			person.email as peremail, person.phone as perphone,
			school.id as schoolid, school.code as schcode, school.name as schname,
			region.id as regionid, region.name as regname, region.code as regcode,
			district.id as districtid, district.name as distname, district.code as distcode,
			chapter.id as chapterid, chapter.state as state

			left outer join person on person.id = judge.person
			left outer join school on school.id = judge.school
			left outer join chapter on chapter.id = school.chapter
			left outer join region on region.id = school.region
			left outer join district on district.id = school.district


			from judge
			left outer join rating on rating.judge = judge.id
			left outer join judge_setting tab_rating 
				on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			left outer join judge_setting diversity 
				on diversity.judge = judge.id and diversity.tag = 'diversity'
			left outer join judge_setting neutral 
				on neutral.judge = judge.id and neutral.tag = 'neutral'
			left outer join judge_setting cap 
				on cap.judge = judge.id and cap.tag = 'chief_adjudicator'
			where judge.category = ?
			$limits
			group by judge.id
			order by judge.code, judge.last");

		return Tab::Judge->search_ordinals_by_category($category->id);

	} else { 

		Tab::Judge->set_sql( by_category => "
			select distinct judge.*, 
				tab_rating.value as tab_rating, 
				neutral.value as neutral, 
				diversity.value as diversity, 
				cap.value as cap,
			person.email as peremail, person.phone as perphone,
			school.id as schoolid, school.code as schcode, school.name as schname,
			region.id as regionid, region.name as regname, region.code as regcode,
			district.id as districtid, district.name as distname, district.code as distcode,
			chapter.id as chapterid, chapter.state as state

			from judge
			left outer join judge_setting tab_rating 
				on tab_rating.judge = judge.id 
				and tab_rating.tag = 'tab_rating'
			left outer join judge_setting diversity 
				on diversity.judge = judge.id 
				and diversity.tag = 'diversity'
			left outer join judge_setting neutral 
				on neutral.judge = judge.id 
				and neutral.tag = 'neutral'
			left outer join judge_setting cap 
				on cap.judge = judge.id 
				and cap.tag = 'chief_adjudicator'

			left outer join person on person.id = judge.person
			left outer join school on school.id = judge.school
			left outer join chapter on chapter.id = school.chapter
			left outer join region on region.id = school.region
			left outer join district on district.id = school.district

			where judge.category = ?
			$limits
			order by judge.code, judge.last");

		return Tab::Judge->search_by_category($category->id);

	}

</%init>
