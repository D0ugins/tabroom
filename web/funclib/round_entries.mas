<%args>
	$round
	$active      => undef
	$no_byes     => undef
	$by_code     => undef
	$unentered   => undef
	$unstarted   => undef
	$unconfirmed => undef
	$cards       => undef
	$sort_by     => undef
	$no_drops    => undef
	$flight      => undef
</%args>
<%init>

	my $limit = " and panel.flight = ".$flight if $flight;

	if ($unstarted) {

		Tab::Entry->set_sql(unstarted_by_round => "
			select distinct entry.*
				from panel,ballot,judge,entry
				where panel.round = ?
				and panel.id = ballot.panel
				and ballot.judge = judge.id
				and ballot.audit != 1
				and ballot.entry = entry.id
				and entry.active = 1
				and panel.started is null
				and panel.bye != 1
				$limit
				group by entry.id
				order by entry.code, entry.name
		");

		return Tab::Entry->search_unstarted_by_round($round->id);

	} elsif ($unconfirmed) {

		Tab::Entry->set_sql(unconfirmed_by_round => "
			select distinct entry.*
				from panel,ballot,judge,entry
				where panel.round = ?
				and panel.id = ballot.panel
				and ballot.judge = judge.id
				and ballot.audit != 1
				and ballot.entry = entry.id
				and entry.active = 1
				and panel.bye != 1
				$limit
				and exists (
					select score.id
					from score
					where score.ballot = ballot.id
					and (
						score.tag = 'rank'
						or score.tag = 'point'
						or score.tag != 'winloss'
					)
				)
				group by entry.id
				order by entry.code, entry.name
		");

		return Tab::Entry->search_unconfirmed_by_round($round->id);

	} elsif ($unentered) {

		Tab::Entry->set_sql(unvoted_by_round => "
			select distinct entry.*
				from panel,ballot,judge,entry
				where panel.round = ?
				and panel.id = ballot.panel
				and ballot.judge = judge.id
				and ballot.audit != 1
				and ballot.entry = entry.id
				and entry.active = 1
				and panel.bye != 1
				$limit
				group by entry.id
				order by entry.code, entry.name
		");

		return Tab::Entry->search_unvoted_by_round($round->id);

	} else {

		my $order = "order by ballot.audit, ballot.speakerorder, ballot.side, entry.code";
		$order = "order by entry.code, entry.name" if $by_code;
		$order = "order by chapter.state, school.name, entry.code" if $cards;

		$limit .= "and entry.active = 1" if $no_drops;
		$limit .= "and entry.active = 1" if $active;

		if ($sort_by eq "codes") {
			$order = "order by entry.code, entry.name";
		} elsif ($sort_by eq "lastname") {
			$order = "order by student.last, entry.code";
		}

		Tab::Entry->columns(TEMP => "schoolid");
		Tab::Entry->columns(TEMP => "schoolcode");
		Tab::Entry->columns(TEMP => "schoolname");

		Tab::Entry->columns(TEMP => "regionid");
		Tab::Entry->columns(TEMP => "regioncode");
		Tab::Entry->columns(TEMP => "regionname");

		Tab::Entry->columns(TEMP => "districtid");
		Tab::Entry->columns(TEMP => "districtcode");
		Tab::Entry->columns(TEMP => "districtname");
		Tab::Entry->columns(TEMP => "lastname");
		Tab::Entry->columns(TEMP => "state");
		Tab::Entry->columns(TEMP => "bill");
		Tab::Entry->columns(TEMP => "billtag");
		Tab::Entry->columns(TEMP => "roomname");
		Tab::Entry->columns(TEMP => "panelletter");
		Tab::Entry->columns(TEMP => "chapterid");
		Tab::Entry->columns(TEMP => "panelbye");

		if ($no_byes) {

			Tab::Entry->set_sql(by_round => "
				select distinct entry.*,
					panel.id as panelid,
					panel.letter as panelletter, panel.bye as panelbye,
					ballot.speakerorder as speaks, sum(ballot.audit) as ballot,
					ballot.seed as bracketseed, ballot.pullup as pullup, ballot.side as side,
					student.last as lastname

				from (panel,ballot,entry)

				left join entry_student es on es.entry = entry.id
				left join student on student.id = es.student

				where panel.round = ?
					and panel.id = ballot.panel
					and panel.bye != 1
					and ballot.entry = entry.id
					$limit
				group by entry.id
				". $order ."
			");

			return Tab::Entry->search_by_round($round);

		} else {

			Tab::Entry->set_sql(by_round => "
				select distinct entry.*,
					panel.id as panelid,
					ballot.speakerorder as speaks, sum(ballot.audit) as ballot,
					ballot.seed as bracketseed, ballot.pullup as pullup, ballot.side as side,
					panel.letter as panelletter, panel.bye as panelbye,
					entry.school as schname,
					school.region as regname, school.name as schoolname, school.id as schoolid, school.code as schoolcode,
					region.name as regionname, region.code as regioncode, region.id as regionid,
					district.name as districtname, district.code as districtcode, district.id as districtid,
					chapter.state as state,
					room.name as roomname,
					student.last as lastname,
					bill.label as bill, bill.tag as billtag

				from (panel,ballot,entry)
					left join school on entry.school = school.id
					left join chapter on school.chapter = chapter.id
					left join entry_student on entry.id = entry_student.entry
					left join student on student.id = entry_student.student
					left join region on school.region = region.id
					left join district on school.district = district.id
					left join room on panel.room = room.id
					left join file bill on bill.type = 'legislation' and bill.entry = entry.id
				where panel.round = ?
					and panel.id = ballot.panel
					and ballot.entry = entry.id
				$limit
				group by entry.id
				". $order ."
			");

			return Tab::Entry->search_by_round($round);

		}
	}

</%init>
