<%args>
	$round
	$no_byes     => undef
	$by_code     => undef
	$unentered   => undef
	$unstarted   => undef
	$unconfirmed => undef
</%args>
<%init>

	if ($unstarted) { 

		Tab::Entry->set_sql(unstarted_by_round => "
			select distinct entry.*
				from panel,ballot,judge,entry
				where panel.round = ? 
				and panel.id = ballot.panel
				and ballot.judge = judge.id
				and ballot.audit != 1
				and ballot.entry = entry.id
				and entry.dropped != 1
				and panel.started is null
				and panel.bye != 1
				group by entry.id
				order by entry.code, entry.name
		");

		return Tab::Entry->search_unstarted_by_round($round->id);

	} elsif ($unconfirmed) { 

		Tab::Entry->set_sql(unconfirmed_by_round => "
			select distinct entry.*
				from panel,ballot,judge,entry
				where panel.round = ? 
				and panel.id = ballot.panel
				and ballot.judge = judge.id
				and ballot.audit != 1
				and ballot.entry = entry.id
				and entry.dropped != 1
				and panel.bye != 1
				and exists (
					select score.id
					from score
					where score.ballot = ballot.id
					and (score.tag = \"rank\" or score.tag = \"points\" or and score.tag != \"ballot\") 
				)
				group by entry.id
				order by entry.code, entry.name
		");

		return Tab::Entry->search_unconfirmed_by_round($round->id);

	} elsif ($unentered) { 

		Tab::Entry->set_sql(unvoted_by_round => "
			select distinct entry.*
				from panel,ballot,judge,entry
				where panel.round = ? 
				and panel.id = ballot.panel
				and ballot.judge = judge.id
				and ballot.audit != 1
				and ballot.entry = entry.id
				and entry.dropped != 1
				and panel.bye != 1
				group by entry.id
				order by entry.code, entry.name
		");

		return Tab::Entry->search_unvoted_by_round($round->id);

	} else { 

		my $order = "order by ballot.audit, ballot.speakerorder, ballot.side, entry.code";
		$order = "order by entry.code, entry.name" if $by_code;

		if ($no_byes) { 

			Tab::Entry->set_sql(by_round => "
				select distinct entry.*, panel.id as panelid, ballot.speakerorder as speaks, sum(ballot.audit) as ballot, 
					ballot.seed as bracketseed, ballot.pullup as pullup, ballot.side as side
					from panel,ballot,entry
					where panel.round = ? 
					and panel.id = ballot.panel
					and panel.bye != 1
					and ballot.entry = entry.id
					group by entry.id
					". $order ."
			");

			return Tab::Entry->search_by_round($round);

		} else { 

			Tab::Entry->set_sql(by_round => "
				select distinct entry.*, panel.id as panelid, ballot.speakerorder as speaks, 
					sum(ballot.audit) as ballot, ballot.seed as bracketseed, ballot.pullup as pullup, 
					ballot.side as side, entry.school as schname, school.region as regname
					from (panel,ballot,entry)
					left join school on entry.school = school.id
					where panel.round = ? 
					and panel.id = ballot.panel
					and ballot.entry = entry.id
					group by entry.id
					". $order ."
			");

			return Tab::Entry->search_by_round($round);
		}
	}


</%init>
