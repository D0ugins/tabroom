<%args>
	$person
	$all => undef
	$past => undef
</%args>
<%init>

	my $now = DateTime->now;
	return unless $person && $person->id;

	Tab::Entry->columns(TEMP => 'studentid');
	Tab::Entry->columns(TEMP => 'chaptername');
	Tab::Entry->columns(TEMP => 'chapterstate');

	if ($all) {

		Tab::Entry->set_sql( by_person => "
			select entry.*,
				student.id as studentid,
				chapter.name as chaptername,
				chapter.state as chapterstate
			from (entry, entry_student, student, event, tourn)
				left join school on school.id = entry.school
				left join chapter on school.chapter = chapter.id

			where student.person = ?
				and student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = tourn.id
			order by tourn.start desc
		");

		return Tab::Entry->search_by_person($person->id);

	} elsif ($past) {

		Tab::Entry->set_sql( past_by_person => "
			select entry.*,
				student.id as studentid,
				chapter.name as chaptername,
				chapter.state as chapterstate
			from (entry, entry_student, student, event, tourn)
				left join school on school.id = entry.school
				left join chapter on school.chapter = chapter.id

			where student.person = ?
				and student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = tourn.id
				and tourn.end < now()
			order by tourn.start desc
		");

		return Tab::Entry->search_past_by_person($person->id);

	} elsif ($ARGS{"present"}) {

		Tab::Entry->set_sql( present_by_person => "
			select entry.*,
				student.id as studentid,
				chapter.name as chaptername,
				chapter.state as chapterstate
			from (entry, entry_student, student, event, tourn)
				left join school on school.id = entry.school
				left join chapter on school.chapter = chapter.id
			where student.person = ?
				and student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = tourn.id
				and tourn.end > now()
				and tourn.start < now()
			group by entry.id
			order by tourn.start
		");

		return Tab::Entry->search_present_by_person($person->id);

	} else {

		Tab::Entry->set_sql( future_by_person => "
			select entry.*,
				student.id as studentid,
				chapter.name as chaptername,
				chapter.state as chapterstate
			from (entry, entry_student, student, event, tourn)
				left join school on school.id = entry.school
				left join chapter on school.chapter = chapter.id

			where student.person = ?
				and student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = tourn.id
				and tourn.end > now()
				and tourn.start > now()
			group by entry.id
			order by tourn.start
		");

		return Tab::Entry->search_future_by_person($person->id);

	}

</%init>
