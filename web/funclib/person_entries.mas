<%args>
	$person
	$all => undef
	$past => undef
</%args>
<%init>

	my $now = DateTime->now;
	return unless $person && $person->id;

	Tab::Entry->columns(TEMP => 'studentid');

	if ($all) {

		Tab::Entry->set_sql( by_person => "
			select entry.*,
				student.id as studentid
			from entry, entry_student, student, event, tourn
			where student.person = ?
			and student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.event = event.id
			and event.tourn = tourn.id
			order by tourn.start desc
		");

		return Tab::Entry->search_by_person($person->id);

	} elsif ($past) {

		Tab::Entry->set_sql( past_by_person => "
			select entry.*,
				student.id as studentid
			from entry, entry_student, student, event, tourn
			where student.person = ?
			and student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.event = event.id
			and event.tourn = tourn.id
			and tourn.end < now()
			order by tourn.start desc
		");

		return Tab::Entry->search_past_by_person($person->id);

	} elsif ($ARGS{"present"}) {

		Tab::Entry->set_sql( present_by_person => "
			select entry.*,
				student.id as studentid
			from entry, entry_student, student, event, tourn,
				ballot, panel, round
			where student.person = ?
			and student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.event = event.id
			and event.tourn = tourn.id
			and tourn.end > now()
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = round.id
			and (round.published > 0
				or exists (
					select round_setting.id
					from round_setting
					where round_setting.tag = 'publish_prelim_chamber'
					and round_setting.round = round.id
				)
			)

			group by entry.id
			order by tourn.start
		");

		return Tab::Entry->search_present_by_person($person->id);

	} else {

		Tab::Entry->set_sql( future_by_person => "
			select entry.*,
				student.id as studentid
			from entry, entry_student, student, event, tourn
			where student.person = ?
			and student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.event = event.id
			and event.tourn = tourn.id
			and tourn.end > now()
			group by entry.id
			order by tourn.start
		");

		return Tab::Entry->search_future_by_person($person->id);

	}

</%init>
