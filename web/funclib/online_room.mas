<%args>
	$util   => undef
	$panel  => undef
	$person => undef
	$tourn  => undef
	$perms  => undef
	$school => undef
</%args>
<%init>

	use Crypt::JWT qw(encode_jwt);

	# This hash manages which time zones are assigned to which Amazon zones.
	# Any time zone NOT listed will go to the default_server.  The tourn
	# setting campus_zone overrides both.

	my $default_server = "us-east-2";

	my %zones = (
		'America/Los_Angeles'   => "us-west-2",
		'America/Denver'        => "us-west-2",
		'America/Phoenix'       => "us-west-2",
		'America/Adak'          => "us-west-2",
		'America/Anchorage'     => "us-west-2",
		'America/Boise'         => "us-west-2",
		'America/Curacao'       => "us-west-2",
		'America/Denver'        => "us-west-2",
		'America/Edmonton'      => "us-west-2",
		'America/El_Salvador'   => "us-west-2",
		'America/Los_Angeles'   => "us-west-2",
		'America/Managua'       => "us-west-2",
		'America/Mexico_City'   => "us-west-2",
		'America/Nome'          => "us-west-2",
		'America/Phoenix'       => "us-west-2",
		'America/Regina'        => "us-west-2",
		'America/Santo_Domingo' => "us-west-2",
		'America/Sitka'         => "us-west-2",
		'America/Tijuana'       => "us-west-2",
		'America/Vancouver'     => "us-west-2",
		'America/Winnipeg'      => "us-west-2",
		'Pacific/Honolulu'      => "us-west-2",
		'Pacific/Guam'          => "us-west-2",
	);

	my %json;

	unless ($person) {
		return "You cannot join an online room without being logged into Tabroom.com.";
	}

	my $dbh = Tab::DBI->db_Main();

	if ($ARGS{"test"} eq "private") {

		$json{"roomName"}         = "Test Competition Room";
		$json{"roomInstructions"} = 'This is a test of an NSDA Campus Competition Room - this room is NOT private.';
		$json{"supportEmail"}     = 'info@speechanddebate.org';
		$json{"displayName"}      = $person->first." ".$person->last;
		$json{"role"}             = "competitor";
		$json{"server"}           = "private";
		$json{"panel_type"}       = "test_private";
		$json{"mode"}             = "nsda_private";
		$json{"panel_id"}         = $json{"uuid"};
		$json{"forceClose"}       = "true";

		if ($ARGS{"test_school"}) {
			$json{"uuid"}     = $ARGS{"test_school"};
			$json{"uuid"}     =~ s/\s+//g;
			$json{"roomName"} = $ARGS{"test_school"}." Competition Room Test";
		} else {
			$json{"uuid"} = 'NSDACampusCompetitionTest';
		}

	} elsif ($ARGS{"test"} eq "public") {

		$json{"roomName"}         = "Test Practice Room";
		$json{"roomInstructions"} = 'This is a test of an NSDA Campus Practice Room - this room is NOT private.';
		$json{"supportEmail"}     = 'info@speechanddebate.org';
		$json{"displayName"}      = $person->first." ".$person->last;
		$json{"role"}             = "competitor";
		$json{"server"}           = "public";
		$json{"panel_type"}       = "test_public";
		$json{"mode"}             = "nsda_private";
		$json{"panel_id"}         = $json{"uuid"};
		$json{"forceClose"}       = "true";

		if ($ARGS{"test_school"}) {
			$json{"uuid"}     = $ARGS{"test_school"}."-Practice";
			$json{"uuid"}     =~ s/\s+//g;
			$json{"roomName"} = $ARGS{"test_school"}." Practice Room Test";
		} else {
			$json{"uuid"} = 'NSDACampusPracticeTest';
		}

	} elsif ($util) {

		return unless $util->{id};

		if ($util->{"type"} eq "link") {
			$json{"mode"} = "sync";
			$json{"url"}  = $util->{url};
		} elsif ($util->{type} eq "jitsi") {
			$json{"mode"}         = "nsda_jitsi";
			$json{"server"}       = "public";
			$json{"uuid"}         = $util->{"uuid"};
			$json{"tourn_id"}     = $util->{tourn_id};
			$json{"event_id"}     = $util->{event_id};
			$json{"roomName"}     = $util->{"name"};
			$json{"displayName"}  = $person->first." ".$person->last;

			if ($tourn && $perms && $perms->{tourn}{$tourn}) {
				$json{"displayName"} .= " -Tab";
			}

			if ($ARGS{"chapter"} && $perms && $perms->{chapter}{$ARGS{"chapter"}}) {
				$json{"displayName"} .= " -Coach";
			}
		}

		$json{"panel_id"}   = $util->{"uuid"};
		$json{"panel_type"} = "util";

	} elsif ($school) {

		my $sth = $dbh->prepare("
			select
				school.id, school.name, school.tourn
			from school
			where school.id = ?
			and not exists (
				select school_setting.id
				from school_setting
				where school_setting.school = school.id
				and school_setting.tag = 'no_squad_room'
			)
		");

		$sth->execute($school);

		my ($id, $name, $tourn_id) = $sth->fetch();

		$sth->finish();
		$dbh->disconnect();

		$json{"mode"}         = "nsda_jitsi";
		$json{"server"}       = "public";
		$json{"uuid"}         = substr(Digest::SHA::sha256_hex("school".$id),0,32);
		$json{"tourn_id"}     = $tourn_id;
		$json{"roomName"}     = $name." Squad Room";
		$json{"displayName"}  = $person->first." ".$person->last;

		$json{"panel_id"}   = $id;
		$json{"panel_type"} = "school";

	} elsif ($ARGS{"entry"}) {

		my $sth = $dbh->prepare("
			select
				entry.id, entry.code, entry.name, event.tourn
			from entry, event
			where entry.id = ?
				and entry.event = event.id
			and exists (
				select event_setting.id
				from event_setting
				where event_setting.event = entry.event
				and event_setting.tag = 'online_prep'
			)
		");

		$sth->execute($ARGS{"entry"});

		my (
			$id, $code, $name, $tourn_id
		) = $sth->fetch();

		$sth->finish();
		$dbh->disconnect();

		$json{"mode"}        = "nsda_jitsi";
		$json{"server"}      = "public";
		$json{"uuid"}        = substr(Digest::SHA::sha256_hex("entry".$id),0,32);
		$json{"tourn_id"}    = $tourn_id;
		$json{"roomName"}    = $code." Prep Room";
		$json{"displayName"} = $ARGS{"role"}." ".$person->first." ".$person->last;
		$json{"panel_id"}    = $id;
		$json{"panel_type"}  = "entry";

	} elsif ($panel) {

		my $sth = $dbh->prepare("
			select
				panel.id, panel.letter, panel.flight,
				round.label, round.name, round.type,
				room.id, room.name, room.url, room.password, room.judge_url, room.judge_password,
				event.abbr, event.tourn, event.id,
				online_mode.value,
				nsda_campus_public_elims.value,
				online_public.value,
				online_support.value,
				online_instructions.value_text,
				online_judge_display.value,
				online_entry_display.value,
				online_prepend_role.value,
				permission.tag,
				tourn.tz, tourn.hidden, campus_zone.value, campus_force_public.value,
				person.first, person.last, person.email

			from (ballot, panel, round, event, person, tourn)

				left join room on panel.room = room.id

				left join tourn_setting campus_zone
					on campus_zone.tourn = tourn.id
					and campus_zone.tag = 'campus_zone'

				left join tourn_setting campus_force_public
					on campus_force_public.tourn = tourn.id
					and campus_force_public.tag = 'campus_force_public'

				left join event_setting online_mode
					on online_mode.event = event.id
					and online_mode.tag = 'online_mode'

				left join event_setting nsda_campus_public_elims
					on nsda_campus_public_elims.event = event.id
					and nsda_campus_public_elims.tag = 'nsda_campus_public_elims'

				left join event_setting online_judge_display
					on online_judge_display.event = event.id
					and online_judge_display.tag = 'online_judge_display'

				left join event_setting online_entry_display
					on online_entry_display.event = event.id
					and online_entry_display.tag = 'online_entry_display'

				left join event_setting online_prepend_role
					on online_prepend_role.event = event.id
					and online_prepend_role.tag = 'online_prepend_role'

				left join event_setting online_public
					on online_public.event = event.id
					and online_public.tag = 'online_public'

				left join event_setting online_support
					on online_support.event = event.id
					and online_support.tag = 'online_support'

				left join event_setting online_instructions
					on online_instructions.event = event.id
					and online_instructions.tag = 'online_instructions'

				left join permission on permission.person = person.id
					and permission.tourn = event.tourn

			where panel.id = ?
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.tourn = tourn.id
				and person.id   = ?

			group by panel.id
		");

		$sth->execute($panel, $person);

		%json = (
			source    => "tabroom",
			person_id => int($person)
		);

		# Check if the person is a student/entry in the round

		my $ep_sth = $dbh->prepare("
			select student.person, entry.id, entry.code, student.first, student.last
			from ballot, entry, entry_student es, student
			where ballot.panel = ?
				and ballot.entry = es.entry
				and es.entry = entry.id
				and es.student = student.id
				and student.person = ?
		");

		$ep_sth->execute($panel, $person);

		my ($person_id, $entry_id, $entry_code, $student_first, $student_last) = $ep_sth->fetch();

		if ($person_id && $person_id == $person) {
			$json{"role"}        = "competitor";
			$json{"object_id"}   = "entry-".$entry_id;
			$json{"entry_code"}  = $entry_code;
			$json{"entry_first"} = $student_first;
			$json{"entry_name"}  = $student_first." ".$student_last;
		}

		$ep_sth->finish();

		# Or are they a judge?

		my $jd_sth = $dbh->prepare("
			select judge.person, judge.id, judge.code
			from ballot, judge
			where ballot.panel = ?
				and ballot.judge = judge.id
				and judge.person = ?
		");

		$jd_sth->execute($panel, $person);

		my ($judge_person_id, $judge_id, $judge_code) = $jd_sth->fetch();

		if ($judge_person_id && $judge_person_id == $person) {
			$json{"role"}       = "judge";
			$json{"object_id"}  = "judge-".$judge_id;
			$json{"judge_code"} = $judge_code;
		}

		while (
			my (
				$panel_id, $panel_letter, $panel_flight,
				$round_label, $round_name, $round_type,
				$room_id, $room_name, $room_url, $room_password, $room_judge_url, $room_judge_password,
				$event_abbr, $tourn_id, $event_id,
				$online_mode, $nsda_campus_public_elims, $online_public, $online_support,
				$online_instructions,
				$online_judge_display,
				$online_entry_display,
				$online_prepend_role,
				$permission_tag,
				$tz, $hidden, $campus_zone, $campus_force_public,
				$person_first, $person_last, $person_email
			) = $sth->fetchrow_array()
		) {

			$json{"mode"} = $online_mode;

			if ($hidden && $online_mode eq "nsda_private") {
				$json{"mode"} = "nsda_jitsi";
				$online_mode = "nsda_jitsi";
			}

			if (
				($nsda_campus_public_elims)
				&& ($round_type eq "elim" || $round_type eq "final")
			) {
				$json{"mode"} = "nsda_jitsi";
				$online_mode = "nsda_jitsi";
			}

			if ($campus_force_public) {
				$json{"mode"} = "nsda_jitsi";
				$online_mode = "nsda_jitsi";
			}

			$json{"tourn_id"} = $tourn_id;
			$json{"event_id"} = $event_id;
			$json{"tz"}       = $tz;

			if ($online_mode eq "sync") {

				if ($room_judge_url && ($judge_id || $permission_tag)) {
					$json{"url"} = $room_judge_url;
				} else {
					$json{"url"} = $room_url;
				}

				if ($room_judge_password && ($judge_id || $permission_tag)) {
					$json{"password"} = $room_judge_password;
				} elsif ($room_password) {
					$json{"password"} = $room_password;
				}

			} elsif ($online_mode eq "nsda_private" || $online_mode eq "nsda_jitsi") {

				unless ($json{"link"}) {

					$json{"roomName"}         = $event_abbr." ".$panel_letter;
					$json{"roomInstructions"} = $online_instructions;
					$json{"supportEmail"}     = $online_support;

					if ($online_mode eq "nsda_jitsi") {
						$json{"server"} = "public";
					} elsif ($online_mode eq "nsda_private") {
						if ($campus_zone) {
							$json{"server"} = $campus_zone;
						} elsif ($zones{$tz}) {
							$json{"server"} = $zones{$tz};
						} else {
							$json{"server"} = $default_server;
						}

					} else {
						return "This tournament is not configured to use the integrated online service";
					}

					$json{"uuid"} = substr(Digest::SHA::sha256_hex($panel_id,$panel_letter),0,32);

					$json{"panel_id"}   = $panel_id;
					$json{"panel_type"} = "panel";
				}

				if ($json{"role"} eq "competitor") {

					$json{"displayName"} = "Entry - " if ($online_prepend_role);

					if ($online_entry_display eq "name") {
						$json{"displayName"} .= $json{"entry_name"};
					} elsif ($online_entry_display eq "code_first") {
						$json{"displayName"} .= $json{"entry_code"}." ".$json{"entry_first"};
					} elsif ($online_entry_display eq "code_name") {
						$json{"displayName"} .= $json{"entry_code"}." ".$json{"entry_name"};
					} else {
						$json{"displayName"} .= $json{"entry_code"};
					}

				} elsif ($judge_id || $json{"role"} eq "judge") {

					$json{"displayName"} = "Judge - " if ($online_prepend_role);

					if ($online_judge_display eq "code") {
						$json{"displayName"} .= $json{"judge_code"};
					} elsif ($online_judge_display eq "code_first") {
						$json{"displayName"} .= $json{"judge_code"}." ".$person_first;
					} elsif ($online_judge_display eq "code_name") {
						$json{"displayName"} .= $json{"judge_code"}." ".$person_first." ".$person_last;
					} else {
						$json{"displayName"} .= $person_first." ".$person_last;
					}

				} elsif ($person->site_admin) {

					$json{"role"} = "admin";
					$json{"displayName"} = "Admin - " if ($online_prepend_role);
					$json{"displayName"} .= $person_first." ".$person_last;

				} elsif ($permission_tag) {

					$json{"role"} = "tab";
					$json{"displayName"} = "Tab - " if ($online_prepend_role);
					$json{"displayName"} .= $person_first." ".$person_last;

				} else {

					$json{"role"} = "observer";
					$json{"displayName"} = "Obsv - " if ($online_prepend_role);
					$json{"displayName"} .= $person_first." ".$person_last;
				}
			}
		}

		$sth->finish();
		$dbh->disconnect();
	}


</%init>
<%perl>

	if ($json{"mode"} eq "sync") {

		if ($ARGS{'return'}) {

			if ($json{"password"}) {
				return $json{"url"}."?password=".$json{"password"};
			} else {
				return $json{"url"};
			}
		}
</%perl>

		<a
			href   = "<% $json{"url"} %>"
			target = "_blank"
			class  = "invert fa fa-video-camera <% $ARGS{"class"} ? $ARGS{"class"} : "fa-lg" %> buttonwhite bluetext marno"
		></a>

%		if ($ARGS{"show"} && $json{"password"}) {
			<p class="semibold bluetext padless centeralign smallish marless">
				Pass: <% $json{"password"} %>
			</p>
%		}

<%perl>

	} elsif ($json{"mode"} eq "nsda_jitsi" || $json{"mode"} eq "nsda_private") {

		my $json_data = JSON::encode_json(\%json);

		my $jwt = encode_jwt(
			payload => $json_data,
			alg     => 'HS256',
			key     => $Tab::jitsi_key
		);

		if ($ARGS{'return'}) {
			return $jwt;
		}

</%perl>

		<form
			id     = "meet_<% $json{"panel_id"} %>"
			action = "<% $Tab::jitsi_uri %>"
			method = "post"
			target = "_blank"
		>

			<input
				name  = "json"
				type  = "hidden"
				value = <% $jwt %>
			/>

			<button
				type          = "button"
				target_id     = "<% $json{"panel_id"} %>"
				property_name = "<% $json{"object_id"} %>"
				setting_name  = "<% $json{"panel_type"} %>"
				related_thing = "<% $json{"roomName"} %>"
				tourn_id      = "<% $json{"tourn_id"} %>"
				class         = "invert fa fa-video-camera <% $ARGS{"class"} ? $ARGS{"class"} : "fa-lg" %> buttonwhite bluetext marno notfirst"
				onClick       = "postSwitch(this, '/user/campus/room_log.mhtml'); this.form.submit();"
			></button>

		</form>

%	}
