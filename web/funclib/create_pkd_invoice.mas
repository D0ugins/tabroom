<%args>
	$person
	$school    => undef
	$school_id => undef
	$admin     => undef
</%args>
<%init>

    use JSON;
    use JSON::PP::Boolean;
    use MIME::Base64;
    use REST::Client;
    use Data::Dumper;

	$school = Tab::School->retrieve($school_id) unless $school;

	unless ($school) { 
		my $err = "No valid school found for ID $school_id $school";
		$m->redirect("/user/home.mhtml?err=$err");
	} 

	my $nsda = eval {
		return int($school->chapter->nsda);
	};

	unless ($nsda) { 
		my $err = "That school is not marked as an PKD member and therefore cannot pay via the PKD system";
		$m->redirect("/register/school/invoice.mhtml?school_id=".$school->id."&err=$err");
	}

	my $tourn = $school->tourn;
	my %tourn_settings = $tourn->all_settings();

	my %codes = (
		"fees"        => 2401,
		"concessions" => 2402
	);
	
	my ($owed, $feline_ref) =	$m->comp(
		"/funclib/school_fees.mas",
			all              => 1,
			school           => $school,
			tourn            => $tourn,
			tourn_settings   => \%tourn_settings,
		);

	my @invoices = $school->invoices();
	my %invoiced = ();
	my %still_owed = ();

	foreach my $invoice (@invoices) { 

		my %invoice = eval { 
			return %{JSON::decode_json($invoice->details)};
		};

		foreach my $key (keys %codes) { 
			$invoiced{$key} += $invoice{$key};
		}
	}

	my @items;

	my $key = "fees"; 

	KEY:
	foreach my $code (keys %codes) { 
		$owed -= $invoiced{$code};
	}

	if ($owed > 0 && $codes{$key}) { 

		$still_owed{$key} = $owed;

		my %item = (
			product_id => $codes{$key},
			price      => $owed
		);

		push @items, \%item;
	}

	my $school_invoice;

	if ($owed > 0) { 

		my $true = bless( do{\(my $o = 1)}, 'JSON::PP::Boolean' );

		my %new_invoice = (
			school_id => $nsda,
			items     => \@items,
			nationals => $true
		);

		my $json = JSON::encode_json(\%new_invoice);

		my $auth_header = encode_base64($Tab::nsda_invoice_user.":".$Tab::nsda_invoice_key);

		my $client = REST::Client->new(
			host => $Tab::nsda_invoice_endpoint
		);
	
		$client->POST( 
			"/v1/invoices",
			$json,
            {
				'Authorization' => "Basic $auth_header",
				'Content-Type'  => 'application/json',
				'Accept'        => 'application/json'
			}
		); 

		my $response_json = $client->responseContent();
	
		my %answered_invoice = eval { 
			return %{JSON::decode_json($response_json)};
		};

		if ($answered_invoice{"message"} eq "Invoice successfully created") { 

			foreach my $invoice (@{$answered_invoice{"invoices"}}) { 

				$school_invoice = Tab::Invoice->create({
					blusynergy => $invoice->{"invoiceId"},
					total      => $invoice->{"total"},
					school     => $school->id,
					paid       => 0,
					details    => JSON::encode_json(\%still_owed)
				});
			}

		} else { 

			$m->print("<div class='blankfull'>");
			$m->print("<pre>Something went wrong: ".$answered_invoice{"message"}."</pre>");
			$m->print("<pre>".$response_json."</pre>");
			$m->print('<pre> Please send the above message to help@tabroom.com for assistance</pre>');
			$m->abort();

		}

	}

	my $update = $m->comp(
		"/funclib/update_invoices.mas", 
		school => $school->id
	);

	if ($admin) { 
		my $msg = "Invoice ".$school_invoice->blusynergy." created and updated for user"
			if $school_invoice;
		$m->redirect("/register/school/invoice.mhtml?school_id=".$school->id."&msg=$msg");
	} else { 
		$m->redirect("https://www.speechanddebate.org/account/#/school/".$school->chapter->nsda."/invoices");

	}

</%init>

