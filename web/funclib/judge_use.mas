<%args>
	$round_id   => undef
	$round      => undef
	$event      => undef
	$limit_past => undef
</%args>
<%perl>

	use Time::HiRes qw( time );
	my $start = time();
	my $debug=0;

</%perl>
<%doc>

	 Returns a hash with 6 fields:

	 prelim rounds obligated to hear
		 $judge_hash{$judge.id}{'oblig'} 

	 rounds judged so far
		 $judge_hash{$judge.id}{'judged_already'} 

	 rounds scheduled to judge after this one
		 $judge_hash{$judge.id}{'will_judge'} 

	rounds available for this event in future rounds, excluding current round
		 $judge_hash{$judge.id}{'future_possible'} 

	 rounds lost, including current round
		 $judge_hash{$judge.id}{'lost'} 

	 boolean; did you lose a round from the judge in THIS round	
		 $judge_hash{$judge.id}{'lost_current'} 

	 boolean; is judge avail this round
		 $judge_hash{$judge.id}{'avail_current'} 

	 assigned to judge in the current round
		 $judge_hash{$judge.id}{'in_round'}

	 obligated-judged_already-will_judge
		 $judge_hash{$judge.id}{'left'} 

	future percentage either obligated or timeblocked:
		$judge_hash{$judge_id}{"percentage"}

</%doc>
<%perl>

	$round = Tab::Round->retrieve($round_id) unless $round;
	$event = $round->event unless $event;


	my $category = $event->category;

	my $round_start = $round->timeslot->start;
	my $round_end = $round->timeslot->end;

	my %judge_hash;

	my $dbh = Tab::DBI->db_Main();

	my $j_sth = $dbh->prepare("
		select judge.id, judge.obligation, judge.hired
		from judge
		where category = ".$category->id."
		order by judge.id");

	$j_sth->execute();

	while (
		my ($judge, $obligation, $hired)  = $j_sth->fetchrow_array()
	) {
		$judge_hash{$judge}{"oblig"} = $obligation + $hired;
		$judge_hash{$judge}{"avail_current"} = 1;
	}

	my $current_name = $round->name;
	my $round_limit = "and round.name <= ".$current_name." " if $limit_past;

	my $sth = $dbh->prepare("
		select judge.id, round.id, round.name, panel.flight, round.type, round.timeslot, event.type
		from ballot, panel, round, judge, event
		where event.category = ? 
		and round.event = event.id
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
	");

	$sth->execute($event->category->id);

	my %used;

	while (
		my ($judge, $round_id, $roundname, $flight, $type, $timeslot, $event_type)  
		= $sth->fetchrow_array() 
	) {

		next unless $roundname <= $current_name 	
			|| $event_type eq "speech" 
			|| $event_type eq "congress";

		next if $used{$judge."-".$round_id}++;

		$judge_hash{$judge}{"judged_all"}++ 
			if $roundname < $current_name 
			|| $event_type eq "speech" 
			|| $event_type eq "congress";

		next if $type eq "elim" || $type eq "final";

		$judge_hash{$judge}{"judged_already"}++ if $roundname <= $current_name;

		$judge_hash{$judge}{"will_judge"}++ if $roundname > $current_name;

		$judge_hash{$judge}{"in_round"}++ if $round_id == $round->id;

		$judge_hash{$judge}{"in_timeslot"}++ if $timeslot == $round->timeslot;

	}

	my $time_sth = $dbh->prepare("
		select judge.id
		from judge, ballot, panel, round, timeslot
		where judge.id = ballot.judge
		and ballot.panel = panel.id
		and panel.round = round.id
		and round.timeslot = timeslot.id
		and timeslot.start < ?
		and timeslot.end > ? 
	");

	$time_sth->execute(
		DateTime::Format::MySQL->format_datetime($round_end),
		DateTime::Format::MySQL->format_datetime($round_start)
	);

	while ( my ($judge) = $time_sth->fetchrow_array() ) { 
		$judge_hash{$judge}{"in_timeslot"}++;
	}

	my $future_count;
	my @future;

	foreach my $round ($event->rounds) { 

		next if $round->type eq "elim";
		next if $round->type eq "final";

		next unless $round->name > $current_name;

		$future_count++;
		push @future, $round;
	}

	foreach my $judge (keys %judge_hash) { 
		$judge_hash{$judge}{"future_possible"} = $future_count;
	}

	#future round availability
	
	foreach my $round (@future) { 

		my $event_strikes_sth = $dbh->prepare("
			select distinct strike.id, strike.judge
			from strike, judge
			where judge.category = ".$category->id."
			and strike.judge = judge.id
			and strike.event = ".$event->id."
			order by judge.id
		");

		my $future_strikes_sth = $dbh->prepare("
			select distinct strike.id, strike.judge
			from strike, judge, timeslot
			where judge.category = ? 
			and timeslot.id = ?
			and strike.judge = judge.id
			and strike.start <= timeslot.end
			and strike.end >= timeslot.start
		");

		my $timeslot = $round->timeslot;

		if ($timeslot) { 

			$future_strikes_sth->execute($category->id, $timeslot->id) ;

			while (my ($strike, $judge)  = $future_strikes_sth->fetchrow_array() ) {
				$judge_hash{$judge}{'future_possible'}-- 
					if $judge_hash{$judge}{'future_possible'};
			}

		}

		$event_strikes_sth->execute();

		while (my ($strike, $judge)  = $event_strikes_sth->fetchrow_array() ) {
			$judge_hash{$judge}{'future_possible'} = 0;
			$judge_hash{$judge}{"avail_current"} = 0;
		}
	
	}

	#current round availability

	my $current_strikes_sth = $dbh->prepare("
		select distinct strike.id, strike.judge
		from strike, judge, timeslot
		where judge.category = ?
		and timeslot.id = ?
		and strike.judge = judge.id
		and strike.start <= timeslot.end
		and strike.end >= timeslot.start
	");

	$current_strikes_sth->execute($category->id, $round->timeslot->id);

	while (my ($strike, $judge)  = $current_strikes_sth->fetchrow_array() ) {
		$judge_hash{$judge}{"avail_current"} = 0;
	}

	
	#calculate rounds lost
	
	foreach my $key (keys %judge_hash) {

		$judge_hash{$key}{'lost'} = 
			$judge_hash{$key}{'oblig'} 
			- $judge_hash{$key}{'judged_already'} 
			- $judge_hash{$key}{'future_possible'};

		$judge_hash{$key}{'left'} = 
			$judge_hash{$key}{'oblig'} 
			- $judge_hash{$key}{'judged_already'} 
			- $judge_hash{$key}{'will_judge'};

		if ($judge_hash{$key}{'in_round'} == 0 
			and $judge_hash{$key}{'avail_current'} == 1 
			and (
				$judge_hash{$key}{'left'} > $judge_hash{$key}{'future_possible'} 
				|| $judge_hash{$key}{'lost'} > 0 
			) 
		) { 

			$judge_hash{$key}{'lost_current'} = 1;

			#print $key." will lose a round if not placed; left = $judge_hash{$key}{'left'} 
			#and future possible is $judge_hash{$key}{'future_possible'} <br>";

		}

		$judge_hash{$key}{'left'} = 0 if $judge_hash{$key}{'left'} < 0;

		# Add one to include the current round
		$judge_hash{$key}{'left'} = ($judge_hash{$key}{'future_possible'} + 1) 
			if $judge_hash{$key}{'left'} > ($judge_hash{$key}{'future_possible'} + 1) 
			and $judge_hash{$key}{'in_round'} == 0;  

		$judge_hash{$key}{'left'} = 0 
			unless $judge_hash{$key}{'left'};

		$judge_hash{$key}{'lost'} = 0 
			if $judge_hash{$key}{'lost'} < 0;

		$judge_hash{$key}{"percentage"} = 
			int( ($judge_hash{$key}{"left"} / $judge_hash{$key}{"future_possible"}) * 100)
			if $judge_hash{$key}{"future_possible"};
	}


	if ($debug) {
		my $end = time();
		print "<br>judge_use.mas processing time: ";
		printf("%.2f\n", $end - $start);
	}

	return \%judge_hash;

</%perl>
