<%args>
	$text        => undef
	$message     => undef
	$restrictive => undef
</%args>
<%init>

	use Encode;
	use HTML::Restrict;

	$text = $message unless $text;
	return unless $text;

	my %rules = (
		a       => [qw( href target )],
		b       => [],
		caption => [],
		center  => [],
		em      => [],
		i       => [],
		img     => [qw( alt border height width src style )],
		li      => [],
		ol      => [],
		p       => [qw(style)],
		span    => [qw(style)],
		strong  => [],
		s       => [],
		sub     => [],
		sup     => [],
		table   => [qw( style border cellspacing cellpadding align )],
		tbody   => [],
		td      => [],
		tr      => [],
		br      => [],
		u       => [],
		ul      => [],
	);

	my $hr = HTML::Restrict->new( rules => \%rules );

	Tab::debuglog("Text before is");
	Tab::debuglog($text);

	my $result = $hr->process($text);

	Tab::debuglog("Bleh now it is");
	Tab::debuglog($result);

	return $result;

	my $scrubber;

	if ($restrictive) {
		$scrubber = HTML::Scrubber->new(
			allow => [ qw[strong b i u] ]
		);

		$text =~ s/<br \/>/\n/g;
		$text =~ s/\n\n/\n/g;
		$text =~ s/\n\n/\n/g;

	} else {
		$scrubber = HTML::Scrubber->new(
			allow => [ qw[p strong b i u hr br ol ul li font span div] ]
		);
	}


	$scrubber->rules(
		script => 1,
		style  => 0,
		img => {
			src => qr{^(?!http://)}i,
			alt => 1,
			'*' => 0,
		},
		a => {
			href => 1,
			'*'  => 0
		}
	);

	$scrubber->style(0);

	$text =~ s/&nbsp;/ /g;
	$result = $scrubber->scrub($text);

	$result =~ s/<p>\s+<\/p>//g;  #Nonsense
	$result =~ s/<p><\/p>//g;  #Nonsense

	$result =~ s/^\s+//;  # Leading only
	$result =~ s/\s+$//;  # Trailing


	$m->print($result) if $ARGS{"print"};

	return $result;

</%init>
