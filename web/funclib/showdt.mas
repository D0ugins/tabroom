<%args>
	$string => undef
	$dt     => undef
	$tz     => undef
	$length => "short"
</%args>
<%init>

	unless ($dt) {
		$dt = eval {
			return DateTime::Format::MySQL->parse_datetime($string);
		};
	}

	unless ($dt) {
		$m->print('&nbsp;');
		return;
	}

	$dt->set_time_zone($tz) if $tz;

	if ($ARGS{"day_abbr"}) {
		$m->print($dt->day_abbr." ");
	}

	if ($length eq "sortable") {

		$m->print($dt->ymd."-".$dt->hms('-'));

	} elsif ($length eq "csv") {

		$m->print($dt->year."-".sprintf("%02d",$dt->month)."-".sprintf("%02d",$dt->day)." ".sprintf("%02d",$dt->hour).":".sprintf("%02d",$dt->strftime('%M')));

	} elsif ($length eq "shortest") {

		$m->print($dt->month."/".$dt->day." ".$dt->hour.":".$dt->strftime("%M"));

	} elsif ($length eq "shorter") {

		$m->print($dt->month."/".$dt->day."/".substr($dt->year,2,2)." ".$dt->hour.":".$dt->strftime("%M").substr($dt->strftime('%p'),0,1));

	} elsif ($length eq "short") {

		$m->print($dt->month_abbr." ".$dt->day." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p'));

	} elsif ($length eq "medium" || (not defined $length)) {

		$m->print($dt->day." ".$dt->month_abbr." ".$dt->year." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p'));

	} elsif ($length eq "long") {

		$m->print($dt->day." ".$dt->month_name." ".$dt->year." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p'));

	} elsif ($length eq "longer") {

		$m->print($dt->day_abbr." ".$dt->day." ".$dt->month_name." ".$dt->year." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p'));

	} elsif ($length eq "murica") {

		$m->print($dt->day_abbr." ".$dt->month_name." ".$dt->day.", ".$dt->year." ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p'));

	} elsif ($length eq "longest") {

		$m->print($dt->day_name." ".$dt->day." ".$dt->month_name." ".$dt->year." at ".$dt->hour_12.":".$dt->strftime("%M")." ".$dt->strftime('%p'));
	}


</%init>
