<%args>
	$person   => undef
	$entry    => undeev
	$region   => undef
	$district => undef
</%args>
<%init>

    use Tab::NSDA::MemberSchool;

	return unless $entry && $event;

	my $origin = $entry->school->tourn;
	my $chapter = $entry->school->chapter;

	my $dest =  $event->tourn;
	my %dest_settings = $dest->all_settings();

	my $school = $dest->schools( 
		chapter => $chapter->id 
	)->first;

	my $err;
	my $unconfirmed = 0;

	unless ($school) { 

		if ($dest_settings{"nsda_nats"}) { 
	
			$unconfirmed = 1;

			if ($district) { 
				($school, $err) = $m->comp(
					"/funclib/create_school.mas",
						person         => $person,
						chapter        => $chapter,
						tourn          => $dest,
						district       => $district,
						tourn_settings => \%dest_settings
				);
			} else { 

				$err .= "No district found for district ID $district";
			}

		} elsif ($dest_settings{"ncfl"}) { 

			$unconfirmed = 1;

			if ($region) { 

				($school, $err) = $m->comp(
					"/funclib/create_school.mas",
						person         => $person,
						chapter        => $chapter,
						tourn          => $dest,
						region         => $region,
						tourn_settings => \%dest_settings
				);
			} else { 
				$err .= "No diocese found for diocese ID $region";
			}

		} else { 

			($school, $err) = $m->comp(
				"/funclib/create_school.mas",
					person         => $person,
					chapter        => $chapter,
					tourn          => $dest,
					region         => $region,
					tourn_settings => \%dest_settings
			);

		}

	}

	return 0, $err if $err;

	if ($dest_settings{"ncfl"}) { 

		my @existings = $m->comp(
			"/funclib/region_entries.mas",
			region => $region,
			event  => $event
		);

		if (scalar @existings >= $region->quota) { 
			return 0, "Your diocese has already reached its entry quota of ".$region->quota;
		}

	}

	my @students = $entry->students();

	return 0, "No students are part of that entry!" unless @students;

	foreach my $student (@students)  {

		my %ok_events = $m->comp(
			"/funclib/student_clear_events.mas",
			school      => $school,
			student     => $student,
			unconfirmed => $unconfirmed
		);

		$err .= $student->first." ".$student->last." is not eligible to enter ".$event->abbr
			unless $ok_events{$event->id};
	}

	return 0, $err if $err;

    my $waitlist = $m->comp(
		"/funclib/waitlist_status.mas",
            event  => $event,
            school => $school
        );

	if ($waitlist) { 
		$waitlist = 1;
	} else { 
		$waitlist = 0;
	}

	my $entry = Tab::Entry->create({
		code        => "",
		name        => "PENDING!",
		event       => $event->id,
		school      => $school->id,
		unconfirmed => $unconfirmed,
		waitlist    => $waitlist,
		created_at  => $now,
	});

	$entry->setting("registered_by", $person->id );

	foreach my $student (@students) { 
		Tab::EntryStudent->create({
			entry   => $entry->id,
			student => $student->id
		});
	}

	unless (
		$dest_settings{"nsda_nats"}
		|| $dest_settings{"ncfl"}
	) { 
		$entry->code($m->comp( 
			"/funclib/entry_code.mas",
				entry => $entry
			)
		);
	}

	$entry->name($m->comp("/funclib/entry_name.mas", entry => $entry));
	$entry->update();

</%init>
