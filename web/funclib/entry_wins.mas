<%args>
	$event
	$round    => undef
	$last     => undef
	$public   => undef
	$all      => undef
	$first_tb => undef
	$type     => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main(); 

	my $limit;

	if ($last && $round) { 
		$limit  = " and round.name = ".$round->name 
	} elsif ($round) { 
		$limit .= " and round.name <= ".$round->name." ";
	}

	if ($all) { 

	} elsif ($type) { 
		$limit  .= " and round.type = '$type'";
	} else { 
		$limit .= ' and round.type != "elim" and round.type != "final" ' unless $all;
	}
	
	$limit .= " and round.post_results > 0 " if $public;

	my $bye_limit .= " and panel.bye = 0" 
		if $round 
		&& $round->type ne "elim" 
		&& $round->type ne "final";

	my %entry_wins = ();
	my %entry_byes = ();

	if ($round && $round->event) { 

		foreach my $entry ($round->event->entries) { 
			$entry_wins{$entry->id} = 0;
		}

	}

	if ($first_tb) { 

		my ($entries_ref, $tbs_ref, $desc_ref, @whatever) 
			= $m->comp(
				"/tabbing/results/order_entries.mas", 
				round => $round
			); 

		my @keys = sort {$a <=> $b} keys %{$desc_ref};

		my $key = shift @keys if @keys;

		if ($key) { 

			foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {

				foreach my $entry_id (@{${$entries_ref}{$seed}}) {
					$entry_wins{$entry_id} = ${$tbs_ref}{$entry_id."-".$key};
				}   

			}   

			return %entry_wins;
		}

	}

	my $sth = $dbh->prepare('

	    select entry.id, count(distinct panel.id) as wins
        from round, panel, entry, ballot exist
        where entry.event = ? 
        and entry.id = exist.entry
        and panel.id = exist.panel
		and panel.round = round.id

		and not exists ( 
			select round_setting.id from round_setting 
				where round_setting.tag = "ignore_results" 
				and round_setting.round = round.id )

		'.$limit .'
		'.$bye_limit .'

        and (select count(distinct winner.id) as winner
            from ballot as winner, score
            where winner.entry = entry.id
            and winner.panel = panel.id
			and winner.forfeit = 0
			and winner.bye = 0
            and score.ballot = winner.id
            and score.tag = "ballot"
            and score.value = 1 ) 
        >
         (select count(distinct loser.id) as loser
            from ballot as loser, score
            where loser.entry = entry.id
            and loser.panel = panel.id
			and loser.forfeit = 0
			and loser.bye = 0
            and score.ballot = loser.id
            and score.tag = "ballot"
            and (score.value = 0 or score.value is null)) 
        group by entry.id
        order by entry.code
	');

	$sth->execute($event->id);

	while( my ($entry_id, $wins) = $sth->fetchrow_array() ) {
		$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
		$entry_wins{$entry_id} += $wins;
	}

	my $wsdc_byes = $event->setting("wsdc_bye_win_average");

	my %wsdc_bye_add = ();

	if ($wsdc_byes) { 
	
		my $round_count;

		foreach my $other ($event->rounds) { 
			next if $round && $round->name && $other->name > $round->name;
			next if $other->type eq "elim";
			next if $other->type eq "final";
			$round_count++;
		}


		foreach my $entry_id ( keys %entry_wins ) { 
			$wsdc_bye_add{$entry_id} = 0;
			$wsdc_bye_add{$entry_id} = 1 
				if $entry_wins{$entry_id} >= ($round_count / 2);
		}

	}

	my $bye_sth = $dbh->prepare('

		select entry.id, count(distinct panel.id) as wins

        from round, panel, entry, ballot exist
        where entry.event = ? 
        and entry.id = exist.entry
        and panel.id = exist.panel
		and panel.round = round.id

		and not exists ( 
			select round_setting.id 
			from round_setting 
			where round_setting.tag = "ignore_results" 
			and round_setting.round = round.id )

		and panel.bye = 1
		and exist.bye < 1
		and exist.forfeit < 1
		'.$limit .'
		and not exists ( 
			select score.id
			from score, ballot bany
			where score.tag = "ballot"
			and score.ballot = bany.id
			and score.value = 1
			and bany.panel = panel.id
		)
        group by entry.id
        order by entry.code
	');

	$bye_sth->execute($event->id);

	while( my ($entry_id, $wins) = $bye_sth->fetchrow_array() ) {
	
		if ($wsdc_byes) { 

			$entry_wins{$entry_id} += $wsdc_bye_add{$entry_id} * $wins;
		
			$entry_byes{$entry_id} += $wins;

		} else { 

			$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
			$entry_wins{$entry_id} += $wins;
			$entry_byes{$entry_id} += $wins;

		}
	}

	my $ballot_bye_sth = $dbh->prepare('
		select entry.id, count(distinct panel.id) as wins
        from round, panel, entry, ballot
        where entry.event = ? 
        and entry.id = ballot.entry
        and panel.id = ballot.panel
		and panel.round = round.id

		and not exists ( 
			select round_setting.id 
			from round_setting 
			where round_setting.tag = "ignore_results" 
			and round_setting.round = round.id )

		'.$limit .'
		and ballot.bye = 1
		and ballot.forfeit = 0
        group by entry.id
        order by entry.code
	');

	$ballot_bye_sth->execute($event->id);

	while( my ($entry_id, $wins) = $ballot_bye_sth->fetchrow_array() ) {

		if ($wsdc_byes) { 

			$entry_wins{$entry_id} += $wsdc_bye_add{$entry_id} * $wins;
			$entry_byes{$entry_id} += $wins;

		} else { 
			$entry_wins{$entry_id} = 0 unless $entry_wins{$entry_id};
			$entry_wins{$entry_id} += $wins;
			$entry_byes{$entry_id} += $wins;
		}
	}

	my $bye_min;

	if ($event->setting("round_robin")) { 

		foreach my $entry_key (keys %entry_wins) { 

			$bye_min = $entry_byes{$entry_key} 
				if $entry_byes{$entry_key} && not defined $bye_min;

			$bye_min =  $entry_byes{$entry_key} 
				if  $entry_byes{$entry_key} < $bye_min;

		}
	}

	foreach my $entry_key (keys %entry_wins) { 
		$entry_wins{$entry_key} -= $bye_min;
	}

	return %entry_wins;

</%init>
