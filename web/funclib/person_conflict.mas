<%args>
	$tourn
	$person
	$test_mode => undef
</%args>
<%init>

	return unless $person > 0;

	Tab::Entry->columns(TEMP  => "added");
	Tab::School->columns(TEMP => "added");
	Tab::Judge->columns(TEMP  => "added");

	Tab::Entry->set_sql( for_moi => "
		select distinct entry.*
		from event, entry, entry_student, student
		where event.tourn = ?
			and entry.event = event.id
			and entry_student.entry = entry.id
			and entry_student.student = student.id
			and student.person = ?
	");

	Tab::Judge->set_sql( for_moi => "
		select distinct judge.*
		from category, judge
		where category.tourn = ?
			and category.id = judge.category
			and judge.person = ?
	");

	my @entries =  Tab::Entry->search_for_moi( $tourn->id, $person->id );
	my @judges = Tab::Judge->search_for_moi( $tourn->id, $person->id );

	return unless @entries || @judges;

	Tab::School->set_sql( conflicteds => "
		select distinct school.*, conflict.added_by as added
		from school, conflict
		where school.tourn = ?
			and school.chapter = conflict.chapter
			and conflict.person > 0
			and conflict.person = ?
	");

	my $now = DateTime->now();

	foreach my $school (Tab::School->search_conflicteds($tourn->id, $person->id)) {

		foreach my $judge (@judges) {

			unless (
				Tab::Strike->search(
					tourn      => $tourn->id,
					judge      => $judge->id,
					type       => "school",
					school     => $school->id,
					registrant => 1,
					conflict   => 1
				)
			) {
				Tab::Strike->create({
					tourn      => $tourn->id,
					judge      => $judge->id,
					type       => "school",
					school     => $school->id,
					created_at => $now,
					entered_by => $school->added,
					conflictee => 1,
					registrant => 1,
					conflict   => 1
				});
			}
		}
	}


	# Where I conflicted the entry!
	Tab::Entry->set_sql( conflicteds => "
		select distinct entry.id, conflict.added_by as added
		from event, entry, entry_student, student, conflict
		where event.tourn = ?
			and event.id = entry.event
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			and student.person = conflict.conflicted
			and conflict.conflicted > 0
			and conflict.person = ?
	");

	# Where the entry conflicted me!
	Tab::Entry->set_sql( conflictees => "
		select distinct entry.id, conflict.added_by as added
		from event, entry, entry_student, student, conflict
		where event.tourn = ?
			and event.id = entry.event
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			and student.person > 0
			and student.person = conflict.person
			and conflict.conflicted = ?
	");

	foreach my $judge (@judges) {

		foreach my $entry (Tab::Entry->search_conflicteds( $tourn->id, $person->id )) {
			unless (Tab::Strike->search(
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					conflict   => 1,
					registrant => 1
				)
			) {
				Tab::Strike->create({
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					created_at => $now,
					entered_by => $entry->added,
					conflict   => 1,
					conflictee => 1,
					registrant => 1
				});
			}
		}

		foreach my $entry (Tab::Entry->search_conflictees( $tourn->id, $person->id )) {

			unless (Tab::Strike->search(
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					conflict   => 1,
					registrant => 1
				)
			) {
				Tab::Strike->create({
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					entered_by => $entry->added,
					created_at => $now,
					conflict   => 1,
					registrant => 1
				});
			}
		}
	}

	# Where the judge conflicted me!
	Tab::Judge->set_sql( conflicteds => "
		select distinct judge.id, conflict.added_by as added
		from category, judge, conflict
		where category.tourn = ?
			and category.id  = judge.category
			and judge.person = conflict.conflicted
			and judge.person > 0
			and conflict.conflicted > 0
			and conflict.person = ?
	");

	# Where I conflicted the judge!
	Tab::Judge->set_sql( conflictees => "
		select distinct judge.id, conflict.added_by as added
		from category, judge, conflict
		where category.tourn = ?
			and category.id = judge.category
			and judge.person = conflict.person
			and judge.person > 0
			and conflict.person > 0
			and conflict.conflicted = ?
	");

	foreach my $entry (@entries) {

		foreach my $judge (Tab::Judge->search_conflicteds( $tourn->id, $person->id)) {

			unless (Tab::Strike->search(
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					conflict   => 1,
					registrant => 1
				)
			) {
				Tab::Strike->create({
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					entered_by => $judge->added,
					conflictee => 1,
					conflict   => 1,
					created_at => $now,
					registrant => 1
				});
			}
		}

		foreach my $judge (Tab::Judge->search_conflictees( $tourn->id, $person->id)) {
			unless (Tab::Strike->search(
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					conflict   => 1,
					registrant => 1
				)
			) {
				Tab::Strike->create({
					tourn      => $tourn->id,
					type       => "entry",
					entry      => $entry->id,
					judge      => $judge->id,
					entered_by => $judge->added,
					created_at => $now,
					conflict   => 1,
					registrant => 1
				});
			}
		}
	}

	return;

</%init>
