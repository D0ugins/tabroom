<%args>
	$panel    => undef
	$panel_id => undef
	$judge    => undef
	$judge_id => undef
	$chair    => 0
</%args>
<%init> 

	$panel = Tab::Panel->retrieve($panel_id) if $panel_id; #supports a javascript call

	return unless ($judge || $judge_id) && $panel;

	$judge_id = $judge->id unless $judge_id;

	$chair = 1 if $chair > 0;
	$chair = 0 if $chair < 1;

	my @ballots = $panel->ballots;

	my $wudc++ if $panel->round->event->type eq "wudc";

	foreach ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {
		if ($_->id == $judge_id) {
			return;
		}	
	}

	if (@ballots && $ballots[0]->entry) { 

		# Are these ballots without judges? 
		my $alldone;

		BALLOT:
		foreach my $ballot (@ballots) { 

			next BALLOT if $ballot->judge && $ballot->judge > 0;

			$ballot->judge($judge_id);
			$ballot->chair($chair);
			$ballot->audit(0);
			$ballot->update;
			$alldone++;
		}


		unless ($alldone) { 

			my $audit = 1 if $wudc && $chair < 1;
			$audit = 0 unless $audit;

			my %done_entry = ();

			foreach my $ballot (@ballots) { 

				next if $ballot->entry && $done_entry{$ballot->entry->id}++;

				my $newb = $ballot->copy({
					judge        => $judge_id,
					collected_by => "",
					collected    => "",
					chair        => $chair,
					audit        => $audit,
					tv           => 0,
					forfeit      => 0,
				});
			}

		}

	} else {

		# If there are no ballots, or only ballots without any kids in them, we
		# must be pre paneling a round.  Therefore, we create a single ballot
		# with a judge but no kid. 

		my @other_judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

		my $ballot = Tab::Ballot->create({
			judge        => $judge_id,
			panel        => $panel->id,
			speechnumber => 1,
			chair        => $chair,
			speakerorder => 0
		});

		unless (@other_judges) { 
			$ballot->chair(1);
			$ballot->update;
		}

	}	#end of if @ballots 

	return;

</%init> 


