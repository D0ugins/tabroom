<%args>
	$panel    => undef
	$panel_id => undef
	$judge    => undef
	$judge_id => undef
	$chair    => 0
	$done     => 0
</%args>
<%init> 

	return unless ($judge || $judge_id) && ($panel || $panel_id);

	$judge_id = $judge->id if $judge && (not defined $judge_id);
	$panel_id = $panel->id if $panel && (not defined $panel_id);

	# SQL to check if this section is screwy for sides. 

	Tab::Ballot->set_sql( check_doubles => "
		select ballot.*
		from ballot, ballot other, panel, round, event
		where ballot.panel = ?
		and ballot.panel   = panel.id
		and panel.round    = round.id
		and round.event    = event.id
		and event.type     = 'debate'
		and other.panel    = panel.id
		and other.side     = ballot.side
		and other.id != ballot.id
	");

	if (Tab::Ballot->search_check_doubles($panel_id)) { 
		Tab::log("Step 1: Called by ".$r->uri." Judge add yielded a doubled debate panel $panel_id");
	}

	# If I ever figure out what is sending a fucking "4" as a chair flag I'm
	# going to murder it. 

	$chair = 1 if $chair > 0;
	$chair = 0 if $chair < 1;

	my @ballots = Tab::Ballot->search(panel => $panel_id);
	my %existing_judges;
	my $sample_judge; 

	foreach my $ballot (@ballots) { 
		push @{$existing_judges{$ballot->judge->id}}, $ballot;
		unless ($sample_judge) { 
			$sample_judge = $ballot->judge->id;
		}
	}

	return if $existing_judges{$judge_id};

	if ($ARGS{"wudc"}) { 
		$done = 1 unless $chair == 1;
	}

	my $i_can_haz_entries;

	foreach my $ballot (@{$existing_judges{$sample_judge}}) { 

		$done = 0 unless $done;
		my $side = $ballot->side;
		$i_can_haz_entries++ if $ballot->entry > 0;

		my $copy = $ballot->copy({ 
			judge         => $judge_id,
			chair         => $chair,
			side          => $side,
			collected_by  => "",
			collected     => "",
			tv            => 0,
			forfeit       => 0,
			hangout_admin => 0,
			audit         => $done
		});

		unless ($copy->side eq $side) { 
			$copy->side($side);
			$copy->update();
		}

		if ($side < 1) { 
			Tab::log("Side was $side for ballot $ballot and now copy $copy");
		}
	}

	my $limit;
	if ($i_can_haz_entries) { 
		$limit = " or ballot.entry = 0 or ballot.entry is null ";
	}

	Tab::Ballot->set_sql( delete_empties => "
		delete ballot.*
		from ballot
		where ballot.panel = ? 
		and (ballot.judge = 0 or ballot.judge is null $limit )
	");

	Tab::Ballot->sql_delete_empties->execute($panel_id);

	if (Tab::Ballot->search_check_doubles($panel_id)) { 
		Tab::log("Step 2: Called by ".$r->uri." Judge add yielded a doubled debate panel $panel_id.  Fixing:");
		$m->comp("/panel/manipulate/zero_sides.mas", panel_id => $panel_id, source => "panel_judgadd.mas");
	}

	return;

</%init> 
