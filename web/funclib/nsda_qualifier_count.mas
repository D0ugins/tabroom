<%args>
	$event
	$round => undef
</%args>
<%init>

	use Math::Round;

	my $tourn = $event->tourn;
	my $district_id = $tourn->setting("nsda_district");
	return unless $district_id;

	my $district = Tab::District->retrieve($district_id);

	return unless $district; 
	my $level = $district->level;

	if ($tourn->setting("nsda_district_level_force")) { 
		$level = $tourn->setting("nsda_district_level_force");
	}


	Tab::Entry->set_sql(competed_once => "
		select distinct entry.id 
		from entry
		where entry.event = ? 
		and exists (
			select score.id
			from score, ballot
			where ballot.entry = entry.id
			and ballot.id = score.ballot
			and (score.tag = 'rank'
				or score.tag = 'ballot'
			)
		)
	");

	my @entries = Tab::Entry->search_competed_once($event->id);

	if ($round && $round->name == 1) { 
		@entries = $event->entries( active => 1);
	}

	my $num_entries = scalar @entries;

	my $alternates = POSIX::ceil($num_entries / 2);
	$alternates = 14 if $alternates > 14;

	# Given an event, return how many entries qualify for that event.
	my $force = $event->setting("nsda_qual_force");
	return ($force, $alternates - $force, $num_entries) if $force;

	my $qual_override = $event->setting('nsda_qual_override');

	if ($qual_override) { 
		my ($quals, $count_threshold) = split(/,/, $qual_override);

		if ($num_entries > $count_threshold) { 
			return ($quals, $alternates - $quals, $num_entries) 
		}
	}

	my $quals;

	if ($event->abbr eq "BQ") { 

		$quals = 1;

	} elsif ($event->abbr eq "SEN") { 
	
		my %schools;

		foreach my $entry (@entries) { 
			$schools{$entry->school->id}++;
		}

		if ((scalar (keys %schools)) > 7) {

			$quals = 2; 

		} else { 

			$quals = 0;
		}

	} elsif ($event->abbr eq "HOU") { 

		if ($event->setting('nsda_qual_nohousepilot')) { 
			$quals = 6;
			$quals = 5 if $num_entries < 146;
			$quals = 4 if $num_entries < 117;
			$quals = 3 if $num_entries < 88;
			$quals = 2 if $num_entries < 59;
			$quals = 1 if $num_entries < 30;
		} else { 
			$quals = 9;
			$quals = 8 if $num_entries < 146;
			$quals = 7 if $num_entries < 117;
			$quals = 6 if $num_entries < 88;
			$quals = 4 if $num_entries < 59;
			$quals = 2 if $num_entries < 30;
		}

	} else { 

		my $team_event++ if $event->setting('max_entry') > 1;

		if ($level == 1) { 

			$quals = 1 if $num_entries > 3;

			if ($team_event) { 
				$quals = 2 if $num_entries > 15;
				$quals = 3 if $num_entries > 31;
				$quals = 4 if $num_entries > 55;
			} else { 
				$quals = 2 if $num_entries > 19;
				$quals = 3 if $num_entries > 45;
				$quals = 4 if $num_entries > 65;
			}

		} elsif ($level == 2) { 

			if ($team_event) { 
				$quals = 2 if $num_entries > 3;
				$quals = 3 if $num_entries > 29;
				$quals = 4 if $num_entries > 49;
			} else { 
				$quals = 2 if $num_entries > 3;
				$quals = 3 if $num_entries > 37;
				$quals = 4 if $num_entries > 57;
			}

		} elsif ($level == 3) { 

			if ($team_event) { 
				$quals = 2 if $num_entries > 3;
				$quals = 3 if $num_entries > 9;
				$quals = 4 if $num_entries > 49;
			} else { 
				$quals = 2 if $num_entries > 3;
				$quals = 3 if $num_entries > 11;
				$quals = 4 if $num_entries > 57;
			}

		} else { 

			$m->print('<div class="main">');

			$m->print("<h3>There seems to be a problem</h3>");

			$m->print("<p>Your district, ".$district->name." does ");
			$m->print(" not have a valid level: ".$level."</p>");

			$m->print('<p>Please contact us at <a href="mailto:help@tabroom.com">help@tabroom.com</a> for assistance.</p>');

			$m->print('</div>');

			$m->abort;

		}

	}

	my $penalty = $event->setting("nsda_qual_penalty");
	my $max = $event->setting("nsda_qual_max");

	if ($penalty) { 
		$quals = nearest(1, $quals * ($penalty / 100));
	}

	if ($max) { 
		$quals = $max if $quals > $max; 
	}

	return ($quals, $alternates - $quals, $num_entries);


</%init>
