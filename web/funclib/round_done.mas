<%args>
	$round
</%args>
<%init>

	my $now = DateTime->now();

	my @left = $m->comp(
		"/funclib/round_judges.mas",
			round => $round,
			not_in => "1"
	);

	my $judges_left = scalar @left;

	my $event = $round->event;

	#First ballot in notification
	my $first_notified = $event->setting("first_round_notified");

	unless ($ARGS{"admin_done"}) {
		unless ($round->setting("first_ballot")) {
			$round->setting("first_ballot", "date", $now);
		}
		$round->setting("last_ballot", "date", $now);
	}

	if ($first_notified < $round->name) {

		my $follower_ids = $event->setting("followers");
		my $subject = $event->name;

		my $body = "\n\n".$round->realname." of ".$event->name." first ballot entered.  $judges_left  left.\n";

		foreach my $id (split(/,/, $follower_ids)) {

			next unless $id;

			my $person = Tab::Person->retrieve($id);
			next unless $person;
			my $to;

			if ($person->phone && $person->provider) {

				my $phone = $person->phone;
				$phone =~ s/[\D_]//g;
				$to = $phone.'@'.$person->provider;

			} else {
				$to = $person->email;
			}

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tab Central <live@tabroom.com>',
				to      => $to,
				subject => $subject,
				body    => $body
			);
		}

		$event->setting("first_round_notified", $round->name);

	}

	return if $judges_left > 0;

	# Last ballot in notification
	my $notified = $event->setting("round_notified");

	if ($notified < $round->name) {

		my $follower_ids = $event->setting("followers");
		my $subject = $event->name;
		my $body = "\n\n".$round->realname." of ".$event->name." last ballot entered.\n";

		foreach my $id (split(/,/, $follower_ids)) {

			next unless $id;

			my $person = Tab::Person->retrieve($id);
			next unless $person;
			my $to;

			if ($person->phone && $person->provider) {

				my $phone = $person->phone;
				$phone =~ s/[\D_]//g;
				$to = $phone.'@'.$person->provider;
			} else {
				$to = $person->email;
			}

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tab Central <live@tabroom.com>',
				to      => $to,
				subject => $subject,
				body    => $body
			);
		}

		$event->setting("round_notified", $round->name);

=begin PALMERHOPE

		This used to be a thing that had to happen because we would get random
		scores without a concurrent tag that I'm hoping was the fault of either
		code that's been cleaned up since or the CAT.  It hasn't happened in
		forever which either means this code is working or it's not necessary,
		and since I'd rather like to eliminate the "tiebreak" field in the
		scores, I'm hoping it's the latter and commenting out this fixer for
		now.

		my $dbh = Tab::DBI->db_Main();

		my $ranks_sth = $dbh->prepare("
			update score set tag = 'rank' where tag = '' and tiebreak = 1;
			update score set tag = 'winloss' where tag = '' and tiebreak = 2;
			update score set tag = 'point' where tag = '' and tiebreak = 3;
			update score set tag = 'point' where tag = '' and tiebreak = 4;
			update score set tag = 'point' where tag = '' and tiebreak = 5;
		");

		$ranks_sth->execute();

=end PALMERHOPE
=cut

		$m->comp(
			"/funclib/auto_backups.mas",
			subject => "Last Ballot Entered",
			round   => $round
		);
	}

	return;

</%init>
