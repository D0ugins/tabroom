<%args>	
	$category
	$category_settings => undef
	$school            => undef
	$region            => undef
</%args>
<%init>

	unless (keys %{$category_settings}) { 
		my %cs = $category->all_settings();
		$category_settings = \%cs;
	}

	use POSIX;
	my $drop_limit = "and entry.dropped != 1" 
		if $category_settings->{"drops_no_burden"};

	my $waitlist_limit = " and entry.waitlist != 1 " 
		unless $category->tourn->setting("judges_waitlist");

	my @entries;

	Tab::Entry->columns(TEMP => 'eventid');

	if ($region) { 

		Tab::Entry->set_sql(entry_categories => "
			select distinct entry.id, event.id as eventid
				from entry,class,event,category,chapter
			where entry.event = event.id 
			and event.no_judge_burden = 0
			and event.category = category.id 
			and entry.school = chapter.school  
			and entry.unconfirmed = 0
			".$drop_limit."
			".$waitlist_limit."
			
			and chapter.region = ? 
			and not exists (
				select id from event_setting
				where event_setting.event = event.id
				and event_setting.tag = 'no_judge_burden'
				and event_setting.value = 1 )
			and category.id = ? ");

		@entries = Tab::Entry->search_entry_categories( $region->id, $category->id );

	} else { 

		Tab::Entry->set_sql(by_category_school=> "
			select distinct entry.id, event.id as eventid
				from entry,event
			where entry.school = ?
			".$drop_limit."
			".$waitlist_limit."
			
			and entry.event = event.id
			and entry.unconfirmed = 0
			and event.category = ?
			and not exists (
				select id from event_setting
				where event_setting.event = event.id
				and event_setting.tag = 'no_judge_burden'
				and event_setting.value = 1 )
			order by entry.code
		");

		@entries = Tab::Entry->search_by_category_school($school->id, $category->id);

	} 
	
	my $judge_burden;
	
	$judge_burden = ceil( (scalar @entries) / $category_settings->{"judge_per"}) 
		if $category_settings->{"judge_per"} 
		&& $category_settings->{"judge_per"} != 0;

	$judge_burden = ceil( (scalar @entries) * $category_settings->{"rounds_per"}) 
		if $category_settings->{"rounds_per"}
		&& $category_settings->{"rounds_per"} != 0;


	my %entries_in_event;
		
	foreach my $entry (@entries) { 
		$entries_in_event{$entry->eventid}++;
	}

	my %event_by_id = map {$_->id => $_} $category->events;

	# "Large school" tax for large entries:

	if ($category_settings->{"commitment_bump_after"}) { 
		
		my $bump_after = $category_settings->{"commitment_bump_after"};

		foreach my $event_id (keys %entries_in_event) { 

			#add a rd of commitment if too many entries in event
			if ( $bump_after && $entries_in_event{$event_id} > $bump_after) {
				$judge_burden += ( 
					($entries_in_event{$event_id} - $bump_after) 
					* $category_settings->{"commitment_bump_unit"} 
				);
			}

		}
	}

	# Event specific event adjustments

	foreach my $event_id (keys %entries_in_event) { 

		if ($category_settings->{"rounds_per"}) { 

			if ($event_by_id{$event_id}->setting("adjust_judge_rounds_owed")) {
				$judge_burden += ( 
					$event_by_id{$event_id}->setting("adjust_judge_rounds_owed") 
					* $entries_in_event{$event_id} 
				);
			}

		} else { 

			if ($event_by_id{$event_id}->setting("adjust_judges_owed")) {

				Tab::debuglog("event is $event_id");
				Tab::debuglog("entries is ".$entries_in_event{$event_id});
				Tab::debuglog("adjustment is ".$event_by_id{$event_id}->setting("adjust_judges_owed"));
				Tab::debuglog("Starting with $judge_burden");

				$judge_burden += ( 
					$event_by_id{$event_id}->setting("adjust_judges_owed") 
					* $entries_in_event{$event_id} 
				);

				Tab::debuglog("ending  with $judge_burden");
			}

		}

	}
			
	$judge_burden = $judge_burden - $category_settings->{"free"} if @entries;

	$judge_burden = $category_settings->{"min_burden"} 
		if $category_settings->{"min_burden"} 
		&& $category_settings->{"min_burden"} > $judge_burden 
		&& @entries;

	$judge_burden = $category_settings->{"max_burden"} 
		if $category_settings->{"max_burden"} 
		&& $category_settings->{"max_burden"} < $judge_burden 
		&& @entries;

	return $judge_burden;

</%init>
