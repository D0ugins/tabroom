<%args>	
	$category
	$category_settings => undef
	$event_settings    => undef
	$school            => undef
	$region            => undef
	$tourn_settings    => undef
	$confirmed         => undef
	$waitlist          => undef
	$bulk              => undef
</%args>
<%init>

	use POSIX;

	%{$category_settings} = $category->all_settings() unless $category_settings;

	return if $category_settings->{"nsda_category"};

	my $drop_limit = "and entry.dropped != 1" 
		if $category_settings->{"drops_no_burden"};

	my $waitlist_limit;
	
	if ($tourn_settings) { 
		$waitlist_limit .= " and entry.waitlist != 1 " 
			unless $tourn_settings->{"judges_waitlist"};
	} else { 
		$waitlist_limit .= " and entry.waitlist != 1 " 
			unless $category->tourn->setting("judges_waitlist");
	}

	my @entries;

	if ($region) { 
	
		Tab::Entry->columns(TEMP => 'eventid');

		Tab::Entry->set_sql(entry_categories => "
			select distinct entry.id, event.id as eventid
				from entry,event,category,chapter
			where entry.event = event.id 
			and event.no_judge_burden = 0
			and event.category = category.id 
			and entry.school = chapter.school  
			and entry.unconfirmed = 0
			".$drop_limit."
			".$waitlist_limit."
			
			and chapter.region = ? 
			and not exists (
				select id from event_setting
				where event_setting.event = event.id
				and event_setting.tag = 'no_judge_burden'
				and event_setting.value = 1 )
			and category.id = ? ");

		@entries = Tab::Entry->search_entry_categories( $region->id, $category->id );

	} elsif ($bulk) { 

		@entries = @{$confirmed} if $confirmed; 
		@entries = @{$waitlist} if $tourn_settings->{"judges_waitlist"} && $waitlist;

	} else { 
		

		Tab::Entry->columns(TEMP => 'eventid');

		Tab::Entry->set_sql(by_category_school=> "
			select distinct entry.id, event.id as eventid
				from entry,event
			where entry.school = ?
			".$drop_limit."
			".$waitlist_limit."
			
			and entry.event = event.id
			and entry.unconfirmed = 0
			and event.category = ?
			and not exists (
				select id from event_setting
				where event_setting.event = event.id
				and event_setting.tag = 'no_judge_burden'
				and event_setting.value = 1 )
			order by entry.code
		");

		@entries = Tab::Entry->search_by_category_school($school->id, $category->id);

	} 
	
	my $judge_burden;
	
	$judge_burden = ceil( (scalar @entries) / $category_settings->{"judge_per"}) 
		if $category_settings->{"judge_per"} 
		&& $category_settings->{"judge_per"} != 0;

	$judge_burden = ceil( (scalar @entries) * $category_settings->{"rounds_per"}) 
		if $category_settings->{"rounds_per"}
		&& $category_settings->{"rounds_per"} != 0;


	if ($category_settings->{"custom_rounds_per"}) { 
	
		my %customs = 
			%{JSON::decode_json $category_settings->{'custom_rounds_per'}}
			if $category_settings->{'custom_rounds_per'};

		if ($customs{scalar @entries}) { 
			$judge_burden = $customs{scalar @entries};
		}

	}
			
	my %entries_in_event;
		
	foreach my $entry (@entries) { 
		$entries_in_event{$entry->eventid}++;
	}

	# "Large school" tax for large entries:

	if ($category_settings->{"commitment_bump_after"}) { 
		
		my $bump_after = $category_settings->{"commitment_bump_after"};

		foreach my $event_id (keys %entries_in_event) { 

			#add a rd of commitment if too many entries in event
			if ( $bump_after && $entries_in_event{$event_id} > $bump_after) {
				$judge_burden += ( 
					($entries_in_event{$event_id} - $bump_after) 
					* $category_settings->{"commitment_bump_unit"} 
				);
			}

		}
	}

	# Event specific event adjustments

	EVENT:
	foreach my $event_id (keys %entries_in_event) { 
	
		unless ($event_settings->{$event_id}) { 
			my $event = Tab::Event->retrieve($event_id);
			next EVENT unless $event;
			%{$event_settings->{$event_id}} = $event->all_settings();
		}

		if ($category_settings->{"rounds_per"}) { 

			if (
				$event_settings->{$event_id}{"adjust_judge_rounds_owed"}
			) {
				$judge_burden += ( 
					$event_settings->{$event_id}{"adjust_judge_rounds_owed"}
					* $entries_in_event{$event_id} 
				);
			}

		} else { 

			if (
				$event_settings->{$event_id}{"adjust_judges_owed"}
			) {

				$judge_burden += ( 
					$event_settings->{$event_id}{"adjust_judges_owed"}
					* $entries_in_event{$event_id} 
				);

			}

		}

	}

	$judge_burden = $judge_burden - $category_settings->{"free"} if @entries;

	$judge_burden = $category_settings->{"min_burden"} 
		if $category_settings->{"min_burden"} 
		&& $category_settings->{"min_burden"} > $judge_burden 
		&& @entries;

	$judge_burden = $category_settings->{"max_burden"} 
		if $category_settings->{"max_burden"} 
		&& $category_settings->{"max_burden"} < $judge_burden 
		&& @entries;


	return $judge_burden;

</%init>
