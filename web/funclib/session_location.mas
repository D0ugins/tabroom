<%args>
	$session => undef
</%args>
<%init>

	use GeoIP2::Database::Reader;

	my $ip;

	if ($ARGS{"raw"}) {
		$ip = $ARGS{"ip"};
	} elsif ($ARGS{"update"}) {
		$ip = $ENV{HTTP_X_FORWARDED_FOR};
	} elsif ($session) {
		$ip = $session->ip;
	}

	return unless $ip;
	return if $ip =~ m/^127/;
	return if $ip =~ m/^10\./;
	return if $ip =~ m/^192\.168\./;

	if (
		$session
		&& $session->ip eq $ip
		&& $session->geoip
	) {
		return $session->location();
	}

	Tab::debuglog("I made it here with ip $ip");

	my $reader = GeoIP2::Database::Reader->new(
		file    => $Tab::geoip,
		locales => [ 'en' ]
	);

	my $isp_reader = GeoIP2::Database::Reader->new(
		file => $Tab::geoisp,
		locales => ['en']
	);

	my $record = eval {
		#STFU pls
		return $reader->city( ip => $ip);
	};

	my $isp = eval {
		#STFU pls
		return $isp_reader->isp( ip => $ip);
	};

	my %result;

	if ($record) {

		%result = (
			city        => $record->city->name(),
			zip         => $record->postal->code,
			tz          => $record->location->time_zone,
			state       => $record->most_specific_subdivision->name,
			country     => $record->registered_country->name(),
			countrycode => $record->registered_country->iso_code(),
			eu          => $record->registered_country->is_in_european_union,
			statecode   => $record->most_specific_subdivision->iso_code,
			metrocode   => $record->location->metro_code,
		);

		if ($isp) {
			$result{isp} = $isp->isp;

			if ($isp->organization ne $result{isp}) {
				$result{organization} = $isp->organization;
			}
		}
	}

	if ($session) {
		$session->ip($ip);
		$session->location(\%result);
		$session->update();
	}

	return \%result;

</%init>

