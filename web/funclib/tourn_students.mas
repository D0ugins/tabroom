<%args>
	$tourn
	$by_region   => undef
	$by_entry    => undef
	$by_result   => undef
	$no_drops    => undef
	$category_id => undef
</%args>
<%perl>

	my $limit = " and entry.active = 1 " if $no_drops;

	# Only you can prevent sql injections!
	$category_id = int($category_id); 

	$limit = " and event.category = ".$category_id if $category_id;

	if ($by_entry) { 

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select distinct entry_student.id, entry.id, entry_student.student, entry.school, 
				concat_ws(' ',student.first, student.last)
			from entry_student, entry, event, student
			where entry.event = event.id
			and event.tourn = ?
			and entry.id = entry_student.entry
			$limit
			and entry_student.student = student.id
			group by entry_student.id
			order by event.id, entry.id, student.id
		");

		my %entry_students;

		$sth->execute($tourn->id);

		while (my ($id, $entry, $student, $school, $name)  = $sth->fetchrow_array() ) {
			push @{$entry_students{$entry}{"students"}}, $student;
			$entry_students{$entry}{$student}{"name"} = $name;
			$entry_students{$entry}{$student}{"school"} = $school;
		}

		return %entry_students;

	} elsif ($by_region) { 

		Tab::Student->set_sql( region_by_tourn => "
			select distinct student.*, entry.id as entry, region.id as region
			from student, entry_student, entry, school, region
			where student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.tourn = ? 
			and entry.school = school.id
			$limit
			and school.region = region.id
			order by school.name, student.last ");

		return Tab::Student->search_region_by_tourn($tourn->id);

	} elsif ($by_result) { 

		Tab::Student->set_sql( by_result_tourn => "
			select distinct student.*, 
				chapter.name as school, 
				chapter.id as code, 
				chapter.level as event, 
				event.id as entry
			from student, score, ballot, entry, event, chapter
			where event.tourn = ? 
			and entry.event = event.id
			and entry.id = ballot.entry
			$limit
			and ballot.id = score.ballot
			and score.student = student.id
			and student.chapter = chapter.id
			order by student.chapter, student.last ");

		return Tab::Student->search_by_result_tourn($tourn->id);

	} else { 


		Tab::Student->set_sql( by_tourn => "
			select distinct student.*, entry.id as entry, school.id as school
			from student, entry_student, entry, school, event
			where student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.event = event.id
			and event.tourn = ? 
			and entry.school = school.id
			$limit
			group by student.id
			order by school.name, student.last
			");

		return Tab::Student->search_by_tourn($tourn->id);

	}

</%perl>

