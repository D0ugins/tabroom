<%args>
	$judges
	$settings_ref
	$metadata_ref => undef
	$busy         => undef
	$worlds       => undef
	$anonymize    => undef
	$category     => undef
</%args>
<%init>

	use Math::Round;
	use POSIX;

	my %judge_strings;
	my %judge_headers; 

	my %settings = %{$settings_ref};

	my %others = %{$settings{"others_ref"}};
	my %judge_use = %{$settings{"judge_use_ref"}};
	my %rating_by_judge = %{$settings{"rating_by_judge_ref"}};

	my $affref = $settings{"affref"};
	my $negref = $settings{"negref"};

	foreach my $judge_id (keys %{$judges}) { 

		if ($settings{"diversity"}) { 
			$judge_strings{$judge_id}{"a-Div"} = "Y" if $judges->{$judge_id}{"diverse"};
			$judge_headers{"a-Div"} = 1
		}

		if ($settings{"prefs"}) { 

			my $rating;

			foreach my $pref (${$affref}{$judge_id}, ${$negref}{$judge_id}) { 

				if ($pref) { 
					$pref = 1 if $pref < 1;
					$pref = round($pref);
				} else { 
					$pref = "x";
				}

				$rating .= "-" if $rating;
				$rating .= $pref;
			}

			$judge_strings{$judge_id}{"b-Pref"} = $rating;

			$judge_headers{"b-Pref"} = length($rating) 
				if length($rating) > $judge_headers{"b-Pref"};

			$judge_strings{$judge_id}{"c-AvPf"} = 
				$m->comp("/funclib/judge_avg_rating.mas", 
					judge_id => $judge_id,
					category => $category,
					style    => $category->setting('prefs')
				);

			$judge_headers{"c-AvPf"} = length($judge_strings{$judge_id}{"c-AvPf"}) 
				if length($judge_strings{$judge_id}{"c-AvPf"}) > $judge_headers{"c-AvPf"};

		}
		
		if ($settings{"tab_ratings"}) { 
			$judge_strings{$judge_id}{"d-TabRt"} = $judges->{$judge_id}{"tab_rating"};
			$judge_headers{"d-TabRt"} = length($judges->{$judge_id}{"tab_rating"}) 
				if length($judges->{$judge_id}{"tab_rating"}) > $judge_headers{"Rtng"};
		}

		if ($settings{"online_ballots"}) { 
			$judge_strings{$judge_id}{"e-Link"} = $judges->{$judge_id}{"tab_rating"};
			if ($judges->{$judge_id}{"person"} > 0) { 
				$judge_strings{$judge_id}{"e-Link"} = "Y";
			} else { 
				$judge_strings{$judge_id}{"e-Link"} = "N";
			}
			$judge_headers{"e-Link"} = 5;
		}

		if ($settings{"coach_ratings"}) { 

			$judge_strings{$judge_id}{"e-Qual"} = $rating_by_judge{$judge_id};
			$judge_strings{$judge_id}{"e-Qual"} = "x" unless $rating_by_judge{$judge_id};

			$judge_headers{"e-Qual"} = length($rating_by_judge{$judge_id}) 
				if length($rating_by_judge{$judge_id}) > $judge_headers{"e-Qual"};
		}

		my $usage; 

		if ($settings{"rounds_per"}) {
			$usage = $judge_use{$judge_id}{'left'} ."/".($judge_use{$judge_id}{'judged_already'} 
				+ $judge_use{$judge_id}{'will_judge'})."/".$judge_use{$judge_id}{'oblig'};

		} else { 
			# This figure includes prelims and elims both 
			$usage = $judge_use{$judge_id}{'judged_all'}; 
		}

		$judge_strings{$judge_id}{"f-Use"} = $usage;

		$judge_headers{"f-Use"} = length($usage) 
			if length($usage) > $judge_headers{"f-Use"};

		unless ($settings{"blind_mode"}) { 

			unless (
				$settings{"coach_ratings"} 
				|| $settings{"tab_ratings"} 
				|| $settings{"prefs"}
			) { 

				$judge_strings{$judge_id}{"g-Own"} = $metadata_ref->{$judge_id}{"own"};

				$judge_headers{"g-Own"} = length($metadata_ref->{$judge_id}{"own"}) 
					if length($metadata_ref->{$judge_id}{"own"}) > $judge_headers{"g-Own"};
			}

			if ($settings{"nsda_nats"}) { 

				my $key = "h-ST";
				$judge_strings{$judge_id}{$key} = $judges->{$judge_id}{"region_code"};
				$judge_headers{$key} = length($judges->{$judge_id}{"region_code"}) 
					if length($judges->{$judge_id}{"region_code"}) > $judge_headers{$key};

				$judge_headers{"h-ST"} = 2;

			}  elsif ($settings{"ncfl"} || $settings{"region"}) { 

				my $key = "h-Reg";
				$key = "h-Dio" if $settings{"ncfl"};
				$judge_strings{$judge_id}{$key} = $judges->{$judge_id}{"region_code"};
				$judge_headers{$key} = length($judges->{$judge_id}{"region_code"}) 
					if length($judges->{$judge_id}{"region_code"}) > $judge_headers{$key};
			} 


			if ($settings{"dio_regions"}) { 
				my $key = "i-Reg";
				$judge_strings{$judge_id}{$key} = $settings{"dio_region"}{$judges->{$judge_id}{"region_code"}};

				$judge_headers{$key} = length($settings{"dio_region"}{$judges->{$judge_id}{"region_code"}}) 
					if length($settings{"dio_region"}{$judges->{$judge_id}{"region_code"}}) > $judge_headers{$key};
			}
			
			my $school;

			if ($settings{"no_school_codes"}) { 
				$school .= substr($judges->{$judge_id}{"school_name"},0,10);
			} elsif ($judges->{$judge_id}{"school_code"} eq "--") { 
				$school .= "HIRED";
			} elsif (not defined $judges->{$judge_id}{"school_code"}) { 
				$school .= "HIRED";
			} else { 
				$school .= substr($judges->{$judge_id}{"school_code"}." ".$judges->{$judge_id}{"school_name"},0,10);
			}

			$judge_strings{$judge_id}{"j-School"} = $school;
			$judge_headers{"j-School"} = length($school) if length($school) > $judge_headers{"j-School"};

			unless ($settings{"no_judge_codes"} || $settings{"blind_mode"}) { 
				$judge_strings{$judge_id}{"k-JCode"} = " ".$judges->{$judge_id}{"code"};
				$judge_headers{"k-JCode"} = length($judges->{$judge_id}{"code"}) 
					if length($judges->{$judge_id}{"code"}) > $judge_headers{"k-JCode"};
			}

			my $judge_name = $judges->{$judge_id}{"first"}." ".$judges->{$judge_id}{"last"};
			$judge_strings{$judge_id}{"l-Name"} = $judge_name;
			$judge_headers{"l-Name"} = length($judge_name) 
				if length($judge_name) > $judge_headers{"l-Name"};

		} else { 

			$judge_strings{$judge_id}{"l-Name"} = $anonymize->{"judge"}{$judge_id};
			$judge_headers{"l-Name"} = length($anonymize->{"judge"}{$judge_id})
				if length($anonymize->{"judge"}{$judge_id}) > $judge_headers{"l-Name"};
		}

		if ($settings{"judge_sites"}) { 

			$judge_strings{$judge_id}{"m-Site"} = ${$settings{"judge_sites"}}{$judge_id};

			$judge_headers{"m-Site"} = length($judge_strings{$judge_id}{"m-Site"}) 
				if length($judge_strings{$judge_id}{"m-Site"}) > $judge_headers{"m-Site"};

		}

		if ($others{$judge_id}{"other_event"}) {

			my $judge_other;
			$judge_other .= $others{$judge_id}{"other_event"}."  ";
			$judge_other .= "Rd: ".$others{$judge_id}{"other_round"}." ";
			$judge_other .= "Rm: ".$others{$judge_id}{"other_room"}." ";

			$judge_strings{$judge_id}{"m-Other Rnd"} = $judge_other;

			$judge_headers{"m-Other Rnd"} = length($judge_other) 
				if length($judge_other) > $judge_headers{"m-Other Rnd"};

		} elsif ($others{$judge_id}{"other_room"}) {

			my $judge_other;

			if ($busy ) { 

				$judge_other .= "Bkt: ".$others{$judge_id}{"bracket"}." " 
					if $others{$judge_id}{"bracket"};

				$judge_other .= "Prf: ".$others{$judge_id}{"prefs"}." " 
					if $settings{"prefs"};
			}

			$judge_other .= "Rm: ".$others{$judge_id}{"other_room"}." ";

			$judge_other .= "Flt ".$others{$judge_id}{"other_flight"} 
				if $others{$judge_id}{"other_flight"} 
				&& $settings{"round_flighted"} > 1;

			$judge_strings{$judge_id}{"m-Other Rnd"} = $judge_other;

			$judge_headers{"m-Other Rnd"} = length($judge_other) 
				if length($judge_other) > $judge_headers{"m-Other Rnd"};
		}
	}

	my %fields;

	foreach my $fullkey (sort keys %judge_headers) { 

		my ($junk, $key) = split(/-/, $fullkey); 

		$judge_headers{$fullkey} = length($key) 
			if $judge_headers{$fullkey} < length($key);

		unless ($key eq "Other Rnd") { 

			my $needed = ($judge_headers{$fullkey} - length($key)) / 2;
			my $pad;

			foreach (1..floor($needed)) { 
				$pad = "&nbsp;";
			}

			foreach (1..ceil($needed)) { 
				$pad .= $pad;
			}

			$key = $pad." $key";
		}

		$fields{"label"} .= "&nbsp;".$key."&nbsp;";
	}

	foreach my $judge_id (keys %{$judges}) { 

		foreach my $key (sort keys %judge_headers) { 

			my $string = $judge_strings{$judge_id}{$key}; 

			$string =~ s/^\s+//;
			$string =~ s/\s+$//;

			if ($key eq "m-Other Rnd") { 

			} elsif ($key eq "l-Name" || $key eq "m-Site") { 

				my $needed = $judge_headers{$key} - length($string);

				my $pad;

				foreach (1 .. ceil($needed)) { 
					$pad .= "&nbsp;";
				}

				$string = " ".$string.$pad;

			} else { 

				my $needed = $judge_headers{$key} - length($string);
				$needed += 2 if $string eq "HIRED";

				if ($string) { 
					$needed = $needed / 2;
				} else { 
					$needed--;
				}

				my $pad;

				foreach (1 .. floor($needed)) { 
					$pad = "&nbsp;";
				}

				foreach (1 .. ceil($needed)) { 
					$pad = $pad."&nbsp;";
				}

				$string = " ".$string.$pad;
			}

			$fields{$judge_id} .= "&nbsp;".$string."&nbsp;";
		}
	}

	return %fields;

</%init>
