<%args>
	$round          => undef
	$round_id       => undef
	$event          => undef
	$event_settings => undef
</%args>
<%perl>

	# checks to see if there are any judges hearing a team a second time in a given round
	
	use Time::HiRes qw( time );

	$round = Tab::Round->retrieve($round_id) unless $round;
	$event = $round->event unless $event;

	return unless $round;

	unless ($event_settings) { 
		%{$event_settings} = $event->all_settings();
	}

	return if $event_settings->{'allow_repeat_judging'};

	if (
		$event_settings->{'allow_repeat_elims'}
		and ($round->type eq "elim" 
			or $round->type eq "final"
			or $round->type eq "runoff"
		) 
	) { 
		return;
	}

	my $include_elims;
	if ($event_settings->{'allow_repeat_elims'}) {
		$include_elims .= "and round.type != 'elim' ";
		$include_elims .= "and round.type != 'final' ";
		$include_elims .= "and round.type != 'runoff' ";
	}

	my $diff_side_ok = $event_settings->{"allow_repeat_prelim_side"};
	
	my $start = time(); 
	my $warn;
	
	#STEP 1: PULL ALL BALLOTS IN THE EVENT

    my $dbh = Tab::DBI->db_Main();
		    
    my $sth = $dbh->prepare("
		select ballot.entry, ballot.judge, concat_ws(' ', judge.first, judge.last) as judge_name, entry.name as entry_name, ballot.side as side, round.id as round
		from ballot, panel, round, entry, judge
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.name < ? 
		and round.event = ? 
			and entry.id = ballot.entry
			and judge.id = ballot.judge
			$include_elims
		");

	$sth->execute( $round->name, $event->id);

	my %judged;
	my %judge_name;
	my %entry_name;
	my %entry_side;
	my %current;

	while( 
		my ($entry, $judge, $judgename, $entryname, $side, $round)  
		= $sth->fetchrow_array()
	) {
		$judged{$judge}{$entry}++;
		$judged{$judge}{$entry."-".$side}++;
		$judge_name{$judge} = $judgename; 
		$entry_name{$entry} = $entryname;
		$entry_side{$entry} = $side;

		$current{$entry} = $judge if $round == $round_id;
	}

	# STEP 3: LOOK FOR ISSUES

	my $flag;
	
	foreach my $entry_key ( keys %entry_name ) {

		my $judge = $current{$entry_key};
		my $side = $entry_side{$entry_key};

		if ($diff_side_ok) { 

			if ( $judged{$judge}{$entry_key."-".$side} > 1 ) {

				$warn .= $judge_name{$judge}." has judged ".$entry_name{$entry_key}." on aff ".$judged{$judge}{$entry_key}." times. <br />" if $side == 1;
				$warn .= $judge_name{$judge}." has judged ".$entry_name{$entry_key}." on neg ".$judged{$judge}{$entry_key}." times. <br />" if $side == 2;

			} 

		}  else {
			
			if ( $judged{$judge}{$entry_key} > 1 ) {
				$warn .= $judge_name{$judge}." has judged ".$entry_name{$entry_key}." ".$judged{$judge}{$entry_key}." times. <br />";
			}
		}
	}

	return $warn;	

</%perl>
