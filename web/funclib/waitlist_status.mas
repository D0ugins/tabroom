<%args>
	$school
	$event
</%args>
<%init>

	# Figure out waitlist status.  Return 1 if future entries should be
	# waitlisted for whatever reason.

	return unless $school;
	return unless $event;
	return unless $school->tourn->id == $event->tourn->id;

	return "All entries are waitlisted pending tournament approval"
		if $event->setting("waitlist_all");

	my $school_event_cap = $event->setting("school_cap");

	if ($school_event_cap) {

		my @school_event_entries = Tab::Entry->search(
			school      => $school->id,
			event       => $event->id,
			unconfirmed => 0,
			dropped     => 0
		);

		return "Each school is limited to $school_event_cap entries"
			if scalar @school_event_entries >= $school_event_cap;

	}

	my $cap = $event->setting("cap");

	if ($cap) {

		my @event_entries = Tab::Entry->search(
			event       => $event->id,
			dropped     => 0,
			unconfirmed => 0
		);

		return "The tournament field cap has been reached"
			if scalar @event_entries >= $cap;


		# Make sure someone doesn't vulture a slot when others are on the
		# waitlist and someone else drops.

		unless ($school_event_cap) {

			return "The tournament field cap has been reached"
				if Tab::Entry->search(
					event    => $event->id,
					waitlist => 1
				);

		}
	}

	my $tourn = $school->tourn;

	my $school_tourn_cap = $tourn->setting("school_overall_cap");

	if ($school_tourn_cap) {

		my @school_tourn_entries = Tab::Entry->search(
			school      => $school->id,
			unconfirmed => 0,
			dropped     => 0
		);

		return "Your tournament school entry limit of $school_tourn_cap has been reached"
			if scalar @school_tourn_entries >= $school_tourn_cap;

	}

	my $tourn_cap = $tourn->setting("overall_cap");

	if ($tourn_cap) {

		my @tourn_entries = $m->comp(
			'/funclib/tourn_entries.mas',
			tourn => $tourn
		);

		return "The tournament total capacity has been reached"
			if scalar @tourn_entries >= $tourn_cap;

	};

	return;

</%init>
