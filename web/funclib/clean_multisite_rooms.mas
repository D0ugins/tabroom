<%args>
	$round  => undef
	$panel  => undef
	$flight => undef
</%args>
<%init>

	$round = $panel->round if $panel && $panel->round;

	return unless $round;

	my @round_rpools = $m->comp("/funclib/round_rpools.mas", round => $round);

	unless (@round_rpools) { 

		my $err = "You do not have any round pools assigned to this round.
		With a multi-site tournament you must have round pools established or
		else I have no idea where to pull rooms from";

		$m->redirect("/panel/room/edit_rpools.mhtml?err=$err")
	}

	my @rooms;

	if ($panel) { 

		Tab::Room->set_sql(clean_rooms_by_panel => "
		   select distinct room.* from room, round, tourn, timeslot, panel, rpool_room, rpool_round
				where panel.id = ? 
				and round.id = panel.round 

				and round.id = rpool_round.round
				and room.id = rpool_room.room
				and rpool_round.rpool = rpool_room.rpool

				and room.inactive != 1
				and tourn.id = timeslot.tourn
				and round.timeslot = timeslot.id
				and not exists (
					select p2.id 
					from panel as p2,round as r2,timeslot as t2
					where t2.start < timeslot.end
					and t2.end > timeslot.start
					and p2.room = room.id
					and p2.round = r2.id
					and p2.flight = panel.flight
					and r2.timeslot  = t2.id 
					and t2.tourn = tourn.id
				)
				and not exists (
					select stime.id from room_strike as stime
					where stime.room = room.id
					and stime.start < timeslot.end 
					and stime.end > timeslot.start
					and stime.tourn = tourn.id
				)
				and not exists ( 
					select sevent.id from room_strike as sevent
					where sevent.event = round.event
					and sevent.room = room.id
					and sevent.tourn = tourn.id
				)
				and not exists (
					select sjudge.id 
					from room_strike as sjudge, ballot
					where ballot.judge = sjudge.judge
					and ballot.panel = panel.id
					and sjudge.room = room.id
				)
				and not exists (
					select sentry.id 
					from room_strike as sentry, ballot
					where ballot.entry = sentry.entry
					and ballot.panel = panel.id
					and sentry.room = room.id
				)

		");

		@rooms =  Tab::Room->search_clean_rooms_by_panel($panel->id);

	} else { 

		my $flight_limit = "and p2.flight = $flight " if $flight;

		Tab::Room->set_sql(clean_rooms_by_round => "
		   select distinct room.* from room, round, tourn, timeslot, rpool_round, rpool_room
				where round.id = ?
				and room.inactive != 1

				and round.id = rpool_round.round
				and room.id = rpool_room.room
				and rpool_round.rpool = rpool_room.rpool

				and tourn.id = timeslot.tourn
				and round.timeslot = timeslot.id
				and not exists (
					select p2.id from panel as p2,round as r2,timeslot as t2
					where t2.start < timeslot.end
					and t2.end > timeslot.start
					and p2.room = room.id
					". $flight_limit ."
					and p2.round = r2.id
					and r2.timeslot  = t2.id )

				and not exists (
					select stime.id from room_strike as stime
					where stime.room = room.id
					and stime.start < timeslot.end 
					and stime.end > timeslot.start
				)
				and not exists ( 
					select sevent.id from room_strike as sevent
					where sevent.event = round.event
					and sevent.room = room.id
					and sevent.tourn = tourn.id
				)
		");

		@rooms =  Tab::Room->search_clean_rooms_by_round($round->id);

	}


	@rooms = map  { $_->[0] } sort { $a->[1] <=> $b->[1] } map  { [$_, $_->name=~/(\d+)/] } @rooms;
	@rooms = map  { $_->[0] } sort { $a->[1] cmp $b->[1] } map  { [$_, $_->name=~/(\D+)/] } @rooms;

	@rooms = sort {$a->quality <=> $b->quality} @rooms;

	return @rooms;

</%init>
