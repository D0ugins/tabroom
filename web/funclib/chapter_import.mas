<%args>
	$nsda_school
	$person => undef
	$nome   => undef
</%args>
<%init>

	use Tab::NSDA::District;
	use Tab::NSDA::Login;
	use Tab::NSDA::Person;

	my $now = DateTime->now();

	# Create the school
	my $level = "highschool"
		if $nsda_school->realm eq "NFL";

	$level = "university"
		if $nsda_school->realm eq "PKD";

	$level = "middle"
		if $nsda_school->realm eq "MID";

	my $chapter = Tab::Chapter->search(
		nsda => $nsda_school->school_id
	)->first;

	unless ($chapter) {

		$chapter =  Tab::Chapter->create({
			name   => $nsda_school->school_name,
			street => $nsda_school->school_addr,
			city   => $nsda_school->school_city,
			zip    => $nsda_school->school_zip,
			state  => $nsda_school->school_state,
			nsda   => $nsda_school->school_id,
			level  => $level
		});

		Tab::ChapterSetting->create({
			chapter => $chapter->id,
			tag     => "nsda_degrees",
			value   => $nsda_school->school_total_deg
		});

		Tab::ChapterSetting->create({
			chapter => $chapter->id,
			tag     => "nsda_charter",
			value   => $nsda_school->school_charter_status
		});

		Tab::ChapterSetting->create({
			chapter => $chapter->id,
			tag     => "nsda_paid",
			value   => $nsda_school->school_paid_status
		});

		# Add to the appropriate circuits

		if ($level eq "university") {

			Tab::ChapterCircuit->create({
				chapter     => $chapter->id,
				circuit     => 126,
				full_member => 1
			});

		} elsif ($level eq "highschool") {

			Tab::ChapterCircuit->create({
				chapter     => $chapter->id,
				circuit     => 6,
				full_member => 1
			});

			Tab::ChapterCircuit->create({
				chapter     => $chapter->id,
				circuit     => 83,
				full_member => 1
			});

		} elsif ($level eq "middle") {

			Tab::ChapterCircuit->create({
				chapter     => $chapter->id,
				circuit     => 25,
				full_member => 1
			});

		}

		# Add to the correct district

		# This unnecssarily complicated process bought to you by every cursed hand
		# that's ever touched the points database

		Tab::NSDA::District->set_sql( by_chapter => "
			select district.*
			from points.NEW_DISTRICTS district,
				points.NEW_SCHOOLS_TO_DISTRICTS chapter_district
			where chapter_district.school_id = ?
			and chapter_district.enddate = '0000-00-00 00:00:00'
			and chapter_district.district_id = district.dist_id
		");

		my $nsda_district =
			Tab::NSDA::District->search_by_chapter(
				$nsda_school->school_id
			)->first;

		my $tabroom_district = Tab::District->search(
			code => $nsda_district->dist_num
		)->first if $nsda_district;

		$chapter->district($tabroom_district->id) if $tabroom_district;
		$chapter->update();

		# Create all the admins. First me

		unless ($nome) {

			Tab::Permission->create({
				tag     => "chapter",
				person  => $person->id,
				chapter => $chapter->id
			}) if $person;

		}

		Tab::NSDA::Person->set_sql( my_admins => "
			select distinct person.*
			from NEW_USERS_TO_SCHOOLS person_school, NEW_USERS person
			where person_school.school_id = ?
			and person_school.hasaccess = 1
			and person_school.isadmin = 1
			and (
				person_school.enddate = '0000-00-00 00:00:00'
				or person_school.enddate > ?
			)
			and person_school.ualt_id = person.ualt_id
		");

		my @admins = Tab::NSDA::Person->search_my_admins(
			$nsda_school->school_id,
			DateTime::Format::MySQL->format_datetime($now)
		);

		foreach my $admin (@admins) {

			next if $person && $admin->nsda == $person->nsda;

			my $admin_login = Tab::NSDA::Login->search(
				person_id => $admin->user_id
			)->first;

			my $admin_username = $admin->uemail;

			my ($other_person, $other_login, $msg) =
				$m->comp("/funclib/find_login.mas",
					username    => $admin_username,
					nsda_person => $admin,
					nsda_login  => $admin_login
			);

			if ($other_person && $other_login) {

				Tab::Permission->create({
					tag     => "chapter",
					person  => $other_person->id,
					chapter => $chapter->id
				});

			}

		}

	}

	# Create all the students

	Tab::NSDA::Person->set_sql( my_students => "

		select distinct person.*,
			middle_joined.dateacquired as middle_joined,
			high_joined.dateacquired as high_joined

		from (NEW_USERS_TO_SCHOOLS person_school, NEW_USERS person)

		left join NEW_USERS_TO_DEGREES middle_joined
			on middle_joined.degree_id = 21
			and middle_joined.ualt_id = person.ualt_id

		left join NEW_USERS_TO_DEGREES high_joined
			on high_joined.degree_id = 51
			and high_joined.ualt_id = person.ualt_id

		where person_school.school_id = ?

		and (
			person_school.enddate = '0000-00-00 00:00:00'
			or person_school.enddate > ?
		)

		and person_school.ualt_id = person.ualt_id
		and person.utype like '%Student'
	");

	my @students = Tab::NSDA::Person->search_my_students(
		$nsda_school->school_id,
		DateTime::Format::MySQL->format_datetime($now)
	);

	my $counter;

	foreach my $nsda_student (@students) {

		$m->comp("/funclib/student_import.mas",
			nsda_student => $nsda_student,
			chapter      => $chapter
		);
	}

	return $chapter;

</%init>
