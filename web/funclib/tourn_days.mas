<%args>
	$tourn
	$add_one => undef
	$weekend => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	if ($tourn->setting("nsda_district")) {

		my @tourn_days;

		my @weekends;

		if ($weekend) {
			push @weekends, $weekend;
		} else {
			@weekends = $tourn->weekends();
		}

		foreach my $weekend (@weekends) {

			my $start = $weekend->start->clone;
			my $end = $weekend->end->clone;

			$start->set_time_zone($tz);
			$end->set_time_zone($tz);

			$end->truncate(to => 'day');
			$start->truncate(to => 'day');

			unless ($start->day == $end->day) {

				my $holder = $start->clone;

				until ($holder->epoch > $end->epoch) {
					push (@tourn_days, $holder->clone);
					$holder->add( days => 1);
				}

			} else {
				push (@tourn_days, $start);
			}

			if ($add_one) {
				my $first = $start->clone;
				$first = $start->subtract( days => 1 );
				unshift(@tourn_days, $first);
			}
		}

		# In case I move the tournament dates, show the old days if timeslots
		# straggle.

		foreach my $timeslot ($tourn->timeslots) {
			push @tourn_days, $timeslot->start->clone->set_time_zone($tz);
		}

		my %seen = ();
		@tourn_days = grep { ! $seen{$_->month."-".$_->day} ++ } @tourn_days;

		return sort {$a->epoch <=> $b->epoch} @tourn_days;

	} else {

		my $start = $tourn->start->clone;
		my $end = $tourn->end->clone;

		$start->set_time_zone($tz);
		$end->set_time_zone($tz);

		$end->truncate(to => 'day');
		$start->truncate(to => 'day');

		my @tourn_days;

		unless ($start->day == $end->day) {

			my $holder = $start->clone();

			until ($holder->epoch > $end->epoch) {
				push (@tourn_days, $holder->clone);
				$holder->add( days => 1);
			}

		} else {
			push (@tourn_days, $start);
		}

		if ($add_one) {
			my $first = $start->clone();
			$first = $start->subtract( days => 1);
			unshift(@tourn_days, $first);
		}

		# In case I move the tournament dates, show the old days if timeslots
		# straggle.

		foreach my $timeslot ($tourn->timeslots) {
			my $start = $timeslot->start->set_time_zone($tz);
			push @tourn_days, $start;
		}

		my %seen = ();
		@tourn_days = grep { ! $seen{$_->day} ++ } @tourn_days;

		return sort {$a->epoch <=> $b->epoch} @tourn_days;

	}

</%init>
