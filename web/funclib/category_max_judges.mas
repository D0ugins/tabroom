<%args>
	$category
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select round.id, round.name,
			timeslot.id, timeslot.start, timeslot.end
			num_judges.value, count(panel.id)

		from (round, event, timeslot, panel)
			left join round_setting num_judges on num_judges.round = round.id and num_judges.tag='num_judges'

		where event.category = ?
		and round.event = event.id
		and round.timeslot = timeslot.id
		and round.panel = panel.id
		and panel.bye != 1
	");

	$sth->execute($category->id);

	my %timeslot_count;

	while (
		my ($round_id, $round_name, $timeslot_id, $timeslot_start, $timeslot_id, $num_judges) = $sth->fetchrow_array()
	) {

		$timeslot

	}

	return unless $category;
	my @judges  = $category->judges;

	my @timeslots;
	my %need_by_timeslot = ();

	foreach my $round ($m->comp("/funclib/category_rounds.mas", category => $category)) {
		my $judges = $round->setting("num_judges");
		$judges = 1 unless $judges;
		my $need = $judges * scalar $round->panels;

		next unless $round->timeslot;

		push (@timeslots, $round->timeslot);
		$need_by_timeslot{$round->timeslot->id} += $need;
	}

	my %seen = ();
	@timeslots = grep { ! $seen{$_->id} ++ } @timeslots;
	@timeslots = sort {$a->start->epoch <=> $b->start->epoch} @timeslots;

	my $max;

	while (@timeslots) {

		my $total;

		my $timeslot = shift @timeslots;
		$total += $need_by_timeslot{$timeslot->id};

		foreach my $other (@timeslots) {

			$total += $need_by_timeslot{$other->id} if $timeslot->start->epoch < $other->end->epoch && $timeslot->end->epoch > $other->start->epoch;

		}

		$max = $total if $max < $total;

	}

	return $max;


</%init>

