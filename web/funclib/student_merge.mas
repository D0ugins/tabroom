<%args>
	$mergee_id      => undef
	$destination_id => undef
	$mergee         => undef
	$destination    => undef
	$check_grad     => undef
</%args>
<%init>

	$mergee = Tab::Student->retrieve($mergee_id)
		if $mergee_id
		&& not defined $mergee;

	$destination = Tab::Student->retrieve($destination_id)
		if $destination_id
		&& not defined $destination;

	return unless $mergee && $destination;

	if ($mergee->nsda > 0 && $destination->nsda > 0) {

		unless ($mergee->nsda == $destination->nsda) {

			# Do not merge students who both have NSDA merit numbers
			$mergee->chapter($destination->chapter->id);
			$mergee->update;

			return "Both students with name ".$mergee->first." ".$mergee->last." are NSDA members with different IDs.  Not merging";
		}
	}

	my $master_year = $mergee->grad_year;

	my $ualt_id;
	my $nsda;

	if ($mergee->ualt_id) {
		$ualt_id = $mergee->ualt_id;
		$nsda = $mergee->nsda;
		$master_year = $mergee->grad_year;
	} elsif ($destination->ualt_id) {
		$ualt_id = $destination->ualt_id;
		$nsda = $destination->nsda;
		$master_year = $destination->grad_year;
	} elsif ($destination->grad_year > $mergee->grad_year) {
		$master_year = $destination->grad_year;
	}

	if ($check_grad && $master_year &&  abs($destination->grad_year - $mergee->grad_year) > 3) {
		#Do not merge students whose grad years differ by more than three.
		$mergee->chapter($destination->chapter->id);
		$mergee->update;
		return "Students with name ".$mergee->first." ".$mergee->last." have grad years too far apart to merge.";
	}

    Tab::EntryStudent->set_sql( steal => "
        update ignore entry_student
        set student = ?
        where student = ?
    ");

    Tab::Housing->set_sql( steal => "
        update ignore housing
        set student = ?
        where student = ?
    ");

    Tab::Score->set_sql( steal => "
        update ignore score
        set student = ?
        where student = ?
    ");

    Tab::Result->set_sql( steal => "
        update ignore result
        set student = ?
        where student = ?
    ");

	Tab::StudentSetting->set_sql( steal => "
		update student_setting ss
		set ss.student = ?
		where ss.student = ?
		and not exists (
			select 1
			from (select * from student_setting where student = ?) as ss2
			where ss2.tag = ss.tag
		)
	");

	Tab::StudentSetting->set_sql( rm_dupes => "
		delete from student_setting where student = ?
	");

	Tab::EntryStudent->sql_steal->execute($destination->id, $mergee->id);
	Tab::Housing->sql_steal->execute($destination->id, $mergee->id);
	Tab::Score->sql_steal->execute($destination->id, $mergee->id);
	Tab::Result->sql_steal->execute($destination->id, $mergee->id);
	Tab::StudentSetting->sql_steal->execute($destination->id, $mergee->id, $destination->id);
	Tab::StudentSetting->sql_rm_dupes->execute($mergee->id);

	$destination->person($mergee->person->id)
		if $mergee->person
		&& not defined $destination->person;

	$destination->grad_year($master_year);
	$destination->phonetic($mergee->phonetic)
		if $mergee->phonetic
		&& not defined $destination->phonetic;

	$destination->retired("");
	$destination->gender($mergee->gender)
		if $mergee->gender
		&& not defined $destination->gender;

	$destination->diet($mergee->diet)
		if $mergee->diet
		&& not defined $destination->diet;

	$destination->birthdate($mergee->birthdate)
		if $mergee->birthdate
		&& not defined $destination->birthdate;

	$destination->ualt_id($ualt_id);
	$destination->nsda($nsda);
	$destination->update;

  	Tab::Student->set_sql(wipe => "delete from student where id = ?");
	Tab::Student->sql_wipe->execute($mergee->id);

#	undef $mergee;

	return;

</%init>
