<%args>
	$person
	$victim_id  => undef
	$target_id  => undef
	$victim     => undef
	$target     => undef
</%args>
<%init>

	$target = Tab::Student->retrieve($target_id)
		if $target_id
		&& not defined $target;

	$victim = Tab::Student->retrieve($victim_id)
		if $victim_id
		&& not defined $victim;

	return unless $victim && $target;
	return if $victim == $target;

	if ($victim->nsda > 0 && $target->nsda > 0) {

		unless ($victim->nsda == $target->nsda) {

			# Do not merge students who both have NSDA merit numbers
			$victim->chapter($target->chapter->id);
			$victim->update;

			return "Both students with name ".$victim->first." ".$victim->last." are NSDA members with different IDs.  Not merging";
		}
	}

	my $ualt_id;
	my $nsda;

	my $master_year = $target->grad_year;
	$master_year = $victim->grad_year
		if $victim->grad_year > $target->grad_year;
	$master_year = Tab::school_year() unless $master_year;

	if ($target->ualt_id) {
		$ualt_id     = $target->ualt_id;
		$nsda        = $target->nsda;
	} elsif ($victim->ualt_id) {
		$ualt_id     = $victim->ualt_id;
		$nsda        = $victim->nsda;
	}

	if (
		$target->grad_year > 2000
		&& $victim->grad_year > 2000
		&& abs($target->grad_year - $victim->grad_year) > 3
	) {
		#Do not merge students whose grad years differ by more than three.
		$victim->chapter($target->chapter->id);
		$victim->update;
		return "Students with name ".$victim->first." ".$victim->last." have grad years too far apart to merge.";
	}

    Tab::EntryStudent->set_sql( steal => "
        update ignore entry_student
        set student = ?
        where student = ?
    ");

	Tab::debuglog("Running an entry student steal.  ".$victim->id." moving to ".$target->id);

	Tab::EntryStudent->sql_steal->execute($target->id, $victim->id);

    Tab::Housing->set_sql( steal => "
        update ignore housing
        set student = ?
        where student = ?
    ");

	Tab::Housing->sql_steal->execute($target->id, $victim->id);

    Tab::Score->set_sql( steal => "
        update ignore score
        set student = ?
        where student = ?
    ");

	Tab::Score->sql_steal->execute($target->id, $victim->id);

    Tab::Result->set_sql( steal => "
        update ignore result
        set student = ?
        where student = ?
    ");

	Tab::Result->sql_steal->execute($target->id, $victim->id);

	Tab::StudentSetting->set_sql( steal => "
		update student_setting ss
		set ss.student = ?
		where ss.student = ?
		and not exists (
			select 1
			from (select * from student_setting where student = ?) as ss2
			where ss2.tag = ss.tag
		)
	");

	Tab::StudentSetting->sql_steal->execute($target->id, $victim->id, $target->id);

	Tab::StudentSetting->set_sql( rm_dupes => "
		delete from student_setting where student = ?
	");

	Tab::StudentSetting->sql_rm_dupes->execute($victim->id);

	$target->person($victim->person->id)
		if $victim->person
		&& not defined $target->person;

	$target->grad_year($master_year);
	$target->phonetic($victim->phonetic)
		if $victim->phonetic
		&& not defined $target->phonetic;

	$target->retired("");
	$target->gender($victim->gender)
		if $victim->gender
		&& not defined $target->gender;

	$target->diet($victim->diet)
		if $victim->diet
		&& not defined $target->diet;

	$target->birthdate($victim->birthdate)
		if $victim->birthdate
		&& not defined $target->birthdate;

	$target->ualt_id($ualt_id);
	$target->nsda($nsda);
	$target->update;

	Tab::log($person->id." ".$person->email." merged student ID ".$victim->id." with student ".$target->id);

  	Tab::Student->set_sql(wipe => "delete from student where id = ?");
	Tab::Student->sql_wipe->execute($victim->id);

	undef $victim;
	return;

</%init>
