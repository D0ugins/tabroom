<%args>
	$round_id        => undef
	$round           => undef
	$tiebreak_set    => undef
	$tiebreak_set_id => undef
</%args>
<%init>

	if ($tiebreak_set) {

	} elsif ($tiebreak_set_id) {

		$tiebreak_set = Tab::TiebreakSet->retrieve($tiebreak_set_id);

	} elsif ($round) {

		$tiebreak_set = $round->tiebreak_set();

	} elsif ($round_id) {

		$round = Tab::Round->retrieve($round_id);
		$tiebreak_set = $round->tiebreak_set();
	}

	unless ($tiebreak_set) {
		return;
	}

	unless ($round) {
		#Sample round for event etc
		$round = $tiebreak_set->rounds->first;
	}

	my $event_type;
	my $round_type;
	my $round_name;

	if ($round) {
		$event_type = $round->event->type;
		$round_type = $round->type;
		$round_name = $round->name;
	}

	if ($round_type eq "preset"
		|| $round_type eq "snaked_prelim"
		|| $round_type eq "highhigh"
		|| $round_type eq "highlow"
	) {
		$round_type = "prelim";
	}

	my %types = ();
	$types{"speech"}++ if $event_type eq "congress";

	return unless $tiebreak_set;

	my $dbh = Tab::DBI->db_Main();
	my $sth = $dbh->prepare("
		select tiebreak.id, tiebreak.name,
			tiebreak.count, tiebreak.count_round, tiebreak.child,
			tiebreak.tiebreak_set
		from tiebreak, tiebreak_set
		where tiebreak_set.tourn = ?
			and tiebreak_set.id = tiebreak.tiebreak_set
	");

	#Ugly but faster I suppose
	$sth->execute($round->event->tourn->id);

	#First pass, get the info for all the tiebreakers to account for composite

	my %tiebreaks;
	my %sets;

	while (
		my (
			$id, $name, $count, $count_round, $child, $set_id
		) = $sth->fetchrow_array()
	) {
		$sets{$set_id}{$id}++;

		$tiebreaks{$id}{"name"}        = $name;
		$tiebreaks{$id}{"count"}       = $count;
		$tiebreaks{$id}{"count_round"} = $count_round;
		$tiebreaks{$id}{"child"}       = $child;
		$tiebreaks{$id}{"set"}         = $set_id;
	}

	my %done;

	my @sets = ($tiebreak_set->id);

	SET:
	while (@sets) {

		my $set_id = shift @sets;
		if ($done{$set_id}++) {
			next SET;
		}

		TIEBREAK:
		foreach my $tiebreak_id (keys %{$sets{$set_id}}) {

			if (
				$tiebreaks{$tiebreak_id}{"count"} eq "all"
				|| $tiebreaks{$tiebreak_id}{"count"} eq "previous"
			) {

			} elsif ($tiebreaks{$tiebreak_id}{"count"} eq "specific") {

				if ($tiebreaks{$tiebreak_id}{"count_round"} ne $round_name) {
					next TIEBREAK;
				}

			} else {
				unless ($round_type eq $tiebreaks{$tiebreak_id}{"count"}) {
					next TIEBREAK;
				}
			}

			my $tb_name = $tiebreaks{$tiebreak_id}{"name"};

			if (
				$tb_name eq "ranks"
				|| $tb_name eq "reciprocals"
				|| $tb_name eq "opp_ranks"
				|| $tb_name eq "chair_ranks"
				|| $tb_name eq "non_chair_ranks"
				|| $tb_name eq "downs"
				|| $tb_name eq "preponderance"
				|| $tb_name eq "judgepref"
			) {
				$types{"rank"}++;
				if ($event_type eq "wsdc") {
					$types{"refute"}++;
				}
			}

			if ($tb_name eq "best_po") {
				$types{"best_po"}++;
			}

			if (
				$tb_name eq "opp_wins"
				|| $tb_name eq "winloss"
				|| $tb_name eq "ballots"
				|| $tb_name eq "losses"
				|| $tb_name eq "headtohead"
			) {
				$types{"winloss"}++
			}

			if (
				$tb_name eq "points"
				|| $tb_name eq "opp_points"
				|| $tb_name eq "po_points"
				|| $tb_name eq "three_way_point"
				|| $tb_name eq "judgevar"
				|| $tb_name eq "judgevar2"
			) {
				$types{"point"}++;
			}

			if ($tiebreaks{$tiebreak_id}{"child"}) {
				# If we have everything we're done.
				unless ($types{'point'} && $types{"winloss"} && $types{"rank"}) {
					push @sets, $tiebreaks{$tiebreak_id}{"child"};
				}
			}
		}
	}

	return %types;

</%init>
