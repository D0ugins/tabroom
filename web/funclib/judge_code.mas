<%args>
	$judge
</%args>
<%init>

	my $code;

	my $category = $judge->category;
	my $tourn = $category->tourn;

	if ($tourn->setting("nsda_nats")) { 

		my $region = $judge->school->region
			if $judge->school 
			&& $judge->school->region;

		unless ($region) { 
			my $regioncode = $judge->setting("region_code");
			$region = $tourn->regions(code => $regioncode) if $regioncode;
		}

		my @judges;

		my $region_code;

		if ($region) { 

			Tab::Judge->set_sql( state_judges => "
				select judge.*
				from judge, school
				where judge.school = school.id
				and school.region = ?
				and judge.category = ? 
			");

			@judges = Tab::Judge->search_state_judges($region->id, $category->id);
			$region_code = $region->code;

		} else { 

			Tab::Judge->set_sql( stateless_judges => "
				select judge.*
				from judge
				where judge.category = ? 
				and not exists (
					select school.id from school where school.id = judge.school
				)
			");

			@judges = Tab::Judge->search_stateless_judges($category->id);
			$region_code = 99;
		}

		my $categorycode = "J";
		my $max_code = 100; 

        foreach my $ojudge (List::Util::shuffle @judges) { 

			next if $ojudge->id == $judge->id;

			my $code = $ojudge->code; 
			$code =~ s/^[^$categorycode]*$categorycode//g;

			$code++;
            $code++ if $code == 169;
            $code++ if $code == 269;
            $code++ if $code == 420;
            $code++ if $code == 666;

			$max_code = $code if $code > $max_code; 
        }

		my $new_code = $region_code.$categorycode.$max_code; 

		return $new_code;

	}

</%init>

