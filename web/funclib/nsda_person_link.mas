<%args>
	$student     => undef
	$ualt_id     => undef
	$nsda        => undef
	$nsda_person => undef
</%args>
<%init>

	use Tab::NSDA::Person;

	return unless $student;

	unless ($ualt_id || $nsda || $nsda_person) { 
		return;
	} 


	my $now = DateTime->now();
	my $nowstring = DateTime::Format::MySQL->format_datetime($now);

	my $search_string;
	my $search_value;

	if ($nsda_person) { 
		$search_string = " person.user_id = ? ";
		$search_value  = $nsda_person->user_id;

		#otherwise the object will not contain the custom values. 
		undef $nsda_person;  

	} elsif ($nsda) { 
		$search_string = " person.user_id = ? ";
		$search_value  = $nsda;
	} elsif ($ualt_id) { 
		$search_string = " person.ualt_id = ? ";
		$search_value  = $ualt_id;
	}

	Tab::NSDA::Person->columns(TEMP => "high_joined");
	Tab::NSDA::Person->columns(TEMP => "middle_joined");
	Tab::NSDA::Person->columns(TEMP => "student_email");

	Tab::NSDA::Person->set_sql( whodunnit => "

		select distinct person.*, 
			person_school.school_id as school_id,
			middle_joined.dateacquired as middle_joined,
			high_joined.dateacquired as high_joined,
			DEMOGRAPHICS.student_email

		from (NEW_USERS_TO_SCHOOLS person_school, NEW_USERS person)

		left join DEMOGRAPHICS on DEMOGRAPHICS.person_id = person.user_id

		left join NEW_USERS_TO_DEGREES middle_joined 
			on middle_joined.degree_id = 21
			and middle_joined.ualt_id  = person.ualt_id

		left join NEW_USERS_TO_DEGREES high_joined 
			on high_joined.degree_id = 51
			and high_joined.ualt_id  = person.ualt_id

		where $search_string

		and (
			person_school.enddate = '0000-00-00 00:00:00'
			or person_school.enddate > ?
		)

		and person_school.ualt_id = person.ualt_id
		and person.utype like '%Student'
	");

	my $student_person = Tab::NSDA::Person->search_whodunnit($search_value, $now)->first;

	return unless $student_person;

	$student->ualt_id($student_person->ualt_id);
	$student->nsda($student_person->user_id);
	$student->update();

	# EMAILS CAN BE ANYWHERE!!!!!
	if ($student_person->uemail) { 
		$student->setting('student_email', $student_person->uemail);
	} elsif ($student_person->student_email) { 
		$student->setting('student_email', $student_person->student_email);
	} elsif ($student->person > 0) { 
		$student->setting('student_email', $student->person->email);
	} else { 
		unless ($student->setting("student_email")) { 
			$student->setting('student_email', "X");
		}
	}

	$student->setting('nsda_paid', $student_person->paid_status);
	$student->setting('nsda_points', int($student_person->total_pts)); 
 
	my $high_datetime = eval{ 
  		return DateTime::Format::MySQL->parse_datetime($student_person->high_joined);
	};

	my $middle_datetime = eval{ 
  		return DateTime::Format::MySQL->parse_datetime($student_person->middle_joined);
	};

	if ($high_datetime) { 
		$student->setting('nsda_joined', "date", $high_datetime);
	} elsif ($middle_datetime) { 
		$student->setting('nsda_joined', "date", $middle_datetime);
	}

	return;

</%init>
