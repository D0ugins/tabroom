<%args>
	$round
</%args>
<%init>

	my %entry_ballots;

	unless ($round && $round->id) { 
		return;
	}

	unless ($round->tiebreak_set) { 
		my $err = "That round does not have tiebreakers set.  ";
		$err .= "Please establish tiebreakers for all rounds";

		$m->redirect("/setup/schedule/event.mhtml?event_id=".$round->event->id."&err=$err");
	}

	my $type = $round->event->type;

	my %round_ranks;
	my %round_wins;
	my %round_points;

	foreach my $round ($round->event->rounds) { 
		foreach my $tb ($round->tiebreak_set->tiebreaks) { 

			$round_ranks{$round}++ 
				if ($tb->name eq "ranks" 
					|| $tb->name eq "reciprocals");

			$round_wins{$round}++ 
				if ($tb->name eq "opp_wins" 
					|| $tb->name eq "winloss" 
					|| $tb->name eq "ballots");

			$round_points{$round}++ 
				if ($tb->name eq "points" 
					|| $tb->name eq "competition" 
					|| $tb->name eq "opp_points");
		}
	}
	
	# Messes up WSDC results

	# my $spacer;
	# foreach  (1 .. $round->event->setting('max_entry')) { 
	#	$spacer .= " &nbsp; ";
	# }

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select value.id, value.tag, value.value, 
			ballot.entry, ballot.judge, 
			panel.bye, ballot.bye, ballot.forfeit, ballot.chair, 
			round.id, round.name, round.type
		from (ballot, panel, round)
		left join score value on value.ballot = ballot.id
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.name <= ?
		and round.event =  ? 
		and not exists ( 
			select round_setting.id 
				from round_setting where round_setting.tag = 'ignore_results' 
				and round_setting.round = round.id
			)
		order by round.name, ballot.entry, ballot.chair, ballot.judge, 
			CASE value.tag WHEN ".' "ballot" 
			then 1 when "rank" 
			then 2 when "points" 
			then 3 when "rebuttal_points" 
			then 4 end'."
	");

	$sth->execute($round->name, $round->event->id); 

	my %entry_round;

	while (my (
		$id, $tag, $value, $entryid, $judge, 
		$pbye, $bye, $fft, $chair, 
		$roundid, $roundname, $roundtype) = $sth->fetchrow_array() ) { 

		$entry_ballots{$entryid} .= $roundname." " unless $entry_ballots{$entryid};

		if ($entry_ballots{$entryid} 
			&& $entry_round{$entryid} 
			&& $roundname != $entry_round{$entryid}) { 

			$entry_ballots{$entryid} .= " &nbsp; $roundname";
		}

		unless ($tag) { 
			if ($pbye || $bye) { 
				$entry_ballots{$entryid} .= " B ";
				$entry_ballots{$entryid} .= $spacer if $round_points{$roundid};
				$entry_ballots{$entryid} .= $spacer if $round_ranks{$roundid};
			} elsif ($fft) { 
				$entry_ballots{$entryid} .= " F "; 
				$entry_ballots{$entryid} .= $spacer if $round_points{$roundid};
				$entry_ballots{$entryid} .= $spacer if $round_ranks{$roundid};
			}

			$entry_ballots{$entryid} .= " ";
		}

		if ($tag eq "ballot") { 

			$entry_ballots{$entryid} .= " " if $roundname != $entry_round{$entryid};

			if ($pbye || $bye) { 
				$entry_ballots{$entryid} .= " B "; 
				$entry_ballots{$entryid} .= $spacer if $round_points{$roundid};
				$entry_ballots{$entryid} .= $spacer if $round_ranks{$roundid};
			} elsif ($fft) { 
				$entry_ballots{$entryid} .= " F ";
				$entry_ballots{$entryid} .= $spacer if $round_points{$roundid};
				$entry_ballots{$entryid} .= $spacer if $round_ranks{$roundid};
			} else { 
				$entry_ballots{$entryid} .= " W " if $value > 0;
				$entry_ballots{$entryid} .= " L " if $value < 1;
			}

		} elsif ($type eq "speech" && $tag eq "rank") { 

			$entry_ballots{$entryid} .= " ";
			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		} elsif ($round_ranks{$roundid} && $tag eq "rank") {

			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		} elsif ($round_points{$roundid} && $tag eq "points") {

			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		} elsif ($round_points{$roundid} && $tag eq "rebuttal_points") {

			$entry_ballots{$entryid} .= " ".$value unless $value == -1;

		}

		$entry_round{$entryid} = $roundname;

	}

	return %entry_ballots;

</%init>
