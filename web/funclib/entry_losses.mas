<%args>
	$event
	$all    => undef
	$type   => undef
	$round  => undef
	$last   => undef
	$public => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	my $limit;

	if ($last && $round) {
		$limit  = " and round.name = ".$round->name
	} elsif ($round) {
		$limit .= " and round.name <= ".$round->name." ";
	}

	if ($all || $last) {

	} elsif ($type eq "prelim") {
		$limit .= " and round.type in ('prelim', 'highlow', 'highhigh') ";
	} elsif ($type) {
		$limit  .= " and round.type = '$type'";
	} else {
		$limit .= ' and round.type != "elim" and round.type != "final" ';
	}

	$limit .= " and round.post_results > 0 " if $public;

	my %entry_losses = ();

	if ($round) {
		foreach my $entry ($event->entries(unconfirmed => 0)) {
			$entry_losses{$entry->id} = 0;
		}
	}

	my $sth = $dbh->prepare('

	    select entry.id, count(distinct panel.id) as losses

        from round, panel, entry, ballot exist
        where entry.event = ?
        and entry.id = exist.entry
        and panel.id = exist.panel
		and panel.round = round.id
		and not exists (
			select round_setting.id
				from round_setting
				where round_setting.tag = "ignore_results"
				and round_setting.round = round.id)

		'.$limit .'

        and (select count(distinct winner.id) as winner
            from ballot as winner, score
            where winner.entry = entry.id
            and winner.panel   = panel.id
			and winner.forfeit = 0
			and winner.bye     = 0
            and score.ballot   = winner.id
            and score.tag      = "ballot"
            and (score.value   = 0 or score.value is null) )
		>
         (select count(distinct loser.id) as loser
            from ballot as loser, score
            where loser.entry = entry.id
            and loser.panel   = panel.id
			and loser.forfeit = 0
			and loser.bye     = 0
            and score.ballot  = loser.id
            and score.tag     = "ballot"
            and score.value   = 1 )

        group by entry.id
        order by entry.code
	');

	$sth->execute($event->id);

	while( my ($entry_id, $losses) = $sth->fetchrow_array() ) {
		$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
		$entry_losses{$entry_id} += $losses;
	}

	my $ballot_bye_sth = $dbh->prepare('

		select entry.id, count(distinct panel.id) as losses
        from round, panel, entry, ballot
        where entry.event = ?
        and entry.id = ballot.entry
        and panel.id = ballot.panel
		and panel.round = round.id

		and not exists (
			select round_setting.id
			from round_setting
			where round_setting.tag = "ignore_results"
			and round_setting.round = round.id)

		'.$limit .'
		and ballot.forfeit = 1
        group by entry.id
        order by entry.code
	');

	$ballot_bye_sth->execute($event->id);

	while( my ($entry_id, $losses) = $ballot_bye_sth->fetchrow_array() ) {
		$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
		$entry_losses{$entry_id} += $losses;
	}

	my $wsdc_byes = $event->setting("wsdc_bye_win_average");

	if ($wsdc_byes) {

		my %wsdc_bye_add = ();

		if ($wsdc_byes) {

			my $round_count;

			foreach my $other ($event->rounds) {

				next if $round && $round->name && ($other->name > $round->name);

				next if $other->type eq "elim";
				next if $other->type eq "final";
				$round_count++;
			}

			foreach my $entry_id ( keys %entry_losses ) {
				$wsdc_bye_add{$entry_id} = 0;
				$wsdc_bye_add{$entry_id} = 1
					if $entry_losses{$entry_id} > ($round_count / 2);
			}

		}

		my $bye_sth = $dbh->prepare('
			select entry.id, count(distinct panel.id) as wins
			from round, panel, entry, ballot exist
			where entry.event = ?
			and entry.id = exist.entry
			and panel.id = exist.panel
			and panel.round = round.id

			and not exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = "ignore_results"
				and round_setting.round = round.id )

			and panel.bye = 1
			and exist.bye < 1
			and exist.forfeit < 1
			'.$limit .'
			and not exists (
				select score.id
				from score, ballot bany
				where score.tag = "ballot"
				and score.ballot = bany.id
				and score.value = 1
				and bany.panel = panel.id
			)
			group by entry.id
			order by entry.code
		');

		$bye_sth->execute($event->id);

		while( my ($entry_id, $wins) = $bye_sth->fetchrow_array() ) {

			if ($wsdc_byes) {

				$entry_losses{$entry_id} += $wsdc_bye_add{$entry_id} * $wins;

			} else {

				$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
				$entry_losses{$entry_id} += $wins;

			}
		}

		my $ballot_bye_sth = $dbh->prepare('
			select entry.id, count(distinct panel.id) as wins
			from round, panel, entry, ballot
			where entry.event = ?
			and entry.id = ballot.entry
			and panel.id = ballot.panel
			and panel.round = round.id

			and not exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = "ignore_results"
				and round_setting.round = round.id
			)

			'.$limit .'
			and ballot.bye = 1
			and ballot.forfeit = 0
			group by entry.id
			order by entry.code
		');

		$ballot_bye_sth->execute($event->id);

		while( my ($entry_id, $wins) = $ballot_bye_sth->fetchrow_array() ) {

			if ($wsdc_byes) {

				$entry_losses{$entry_id} += $wsdc_bye_add{$entry_id} * $wins;

			} else {
				$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
				$entry_losses{$entry_id} += $wins;
			}
		}

	}

	return %entry_losses;

</%init>
