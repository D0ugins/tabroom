<%args>
    $category
	$round
	$event_settings => undef
	$event          => undef
	$tourn          => undef
	$tourn_settings => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	my %judge_constraint;

	unless ($event) {
		$event = $round->event;
	}
	unless ($event_settings) {
		%{$event_settings} = $event->all_settings;
	}

	$category = $event->category unless $category;

	unless ($event_settings->{"allow_judge_own"}) {

		my $same_school_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, entry, event
			where judge.school = entry.school
			and entry.event    = event.id
			and event.category = ?
		");

		$same_school_sth->execute($category->id);

		while (my ($judge, $entry) = $same_school_sth->fetchrow_array() ) {
			$judge_constraint{$judge}{$entry}++;
		}

		my $hybrid_same_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, strike, entry, event
			where entry.event  = event.id
			and event.category = ?
			and judge.school   = strike.school
			and strike.type    = 'hybrid'
			and strike.entry   = entry.id
		");

		$hybrid_same_sth->execute($category->id);

		while (my ($judge, $entry) = $hybrid_same_sth->fetchrow_array() ) {
			$judge_constraint{$judge}{$entry}++;
		}

	}

	if ($category->setting("auto_conflict_hires")) {

		my $auto_conflict_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, judge_hire, entry, event
			where judge.id        = judge_hire.judge
			and judge_hire.school = entry.school
			and entry.event       = event.id
			and event.category    = ?
		");

		$auto_conflict_sth->execute($category->id);

		while (my ($judge, $entry) = $auto_conflict_sth->fetchrow_array() ) {
			$judge_constraint{$judge}{$entry}++;
		};

	}

	my $hybrid_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike hybrid, strike schoolstrike, entry, event
		where entry.event      = event.id
		and event.category     = ?
		and hybrid.type        = 'hybrid'
		and hybrid.entry       = entry.id
		and hybrid.school      = schoolstrike.school
		and schoolstrike.judge = judge.id
	");

	$hybrid_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $hybrid_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge}{$entry}++;
	}

	unless ($event_settings->{"allow_repeat_judging"}) {

		unless ($event_settings->{"allow_repeat_elims"} && ($round->type eq "elim" || $round->type eq "final")) {

			my $judged_sth;

			if ($event_settings->{"allow_repeat_prelim_side"}) {

				$judged_sth = $dbh->prepare("
					select judge.id, ballot.entry, ballot.side
					from (judge, ballot, panel, round, entry, event,
							ballot b2, panel p2, round r2)
					where ballot.judge     = judge.id
						and ballot.entry   = entry.id
						and entry.event    = event.id
						and event.category = ?
						and ballot.panel   = panel.id
						and panel.round    = round.id
						and round.id      != r2.id
						and r2.id          = ?
						and r2.id          = p2.round
						and p2.id          = b2.panel
						and b2.entry       = entry.id
						and b2.side        = ballot.side
				");

				$judged_sth->execute($event->id, $round->id);

			} else {

				$judged_sth = $dbh->prepare("
					select judge.id, ballot.entry, ballot.side
					from judge, ballot, panel, round, entry, event
					where ballot.judge = judge.id
					and ballot.entry   = entry.id
					and entry.event    = event.id
					and event.category = ?
					and ballot.panel   = panel.id
					and panel.round    = round.id
					and round.id 	  != ?
				");

				$judged_sth->execute($category->id, $round->id);
			}

			while (my ($judge, $entry) = $judged_sth->fetchrow_array() ) {
				$judge_constraint{$judge}{$entry}++;
			}
		}
	}

	my $school_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike, entry, event
		where judge.id     = strike.judge
			and event.category = ?
			and entry.event    = event.id
			and strike.type    = 'school'
			and strike.school  = entry.school
	");

	$school_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $school_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge}{$entry}++;
	}

	my $conflict_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike, entry, event
		where judge.id = strike.judge
			and entry.event    = event.id
			and event.category = ?
			and strike.type    = 'entry'
			and strike.entry   = entry.id
	");

	$conflict_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $conflict_strike_sth->fetchrow_array() ) {
		Tab::debuglog("$judge can't judge $entry") if $judge == 1065838;
		$judge_constraint{$judge}{$entry}++;
	}

	my $region_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from (judge, strike, entry, event, school, category)
		where event.category = ?
		and entry.event      = event.id
		and entry.school     = school.id
		and school.region    = strike.region
		and strike.judge     = judge.id
		and judge.category   = category.id
		and category.tourn   = event.tourn
		and school.region > 0
	");

	$region_strike_sth->execute($category->id);

	while (
		my ($judge, $entry) = $region_strike_sth->fetchrow_array()
	) {
		$judge_constraint{$judge}{$entry}++;
	}

	if ($event_settings->{"region_constrain"}) {

		my $region_sth = $dbh->prepare("
			select judge.id, entry.id
			from (judge, entry, school, school jschool)
			where entry.event = ?
			and entry.school  = school.id
			and school.region = jschool.region
			and school.tourn  = jschool.tourn
			and jschool.id    = judge.school
			and school.region > 0
		");

		$region_sth->execute($category->id);

		while (
			my ($judge, $entry) = $region_sth->fetchrow_array()
		) {
			$judge_constraint{$judge}{$entry}++;
		}

	}

	$dbh->disconnect();

	return %judge_constraint;

</%init>

