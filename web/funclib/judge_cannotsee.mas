<%args>
    $category
	$round => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	my %judge_constraint;

	my $event = $round->event if $round;

	unless ($round && $event->setting("allow_judge_own")) { 

		my $same_school_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, entry, event
			where judge.school = entry.school
			and entry.event = event.id
			and event.category = ? 
		");

		$same_school_sth->execute($category->id);

		while (my ($judge, $entry) = $same_school_sth->fetchrow_array() ) { 
			$judge_constraint{$judge}{$entry}++;
		}

		my $hybrid_same_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, strike, entry, event
			where entry.event = event.id
			and event.category = ? 
			and judge.school = strike.school
			and strike.type = 'hybrid'
			and strike.entry = entry.id
		");

		$hybrid_same_sth->execute($category->id);

		while (my ($judge, $entry) = $hybrid_same_sth->fetchrow_array() ) { 
			$judge_constraint{$judge}{$entry}++;
		}

	}

	if ($category->setting("auto_conflict_hires")) {

		my $auto_conflict_sth = $dbh->prepare("
			select judge.id, entry.id
			from judge, judge_hire, entry, event
			where judge.id = judge_hire.judge
			and judge_hire.school = entry.school
			and entry.event = event.id
			and event.category = ? 
		");

		$auto_conflict_sth->execute($category->id);

		while (my ($judge, $entry) = $auto_conflict_sth->fetchrow_array() ) {
			$judge_constraint{$judge}{$entry}++;
		};

	}

	my $hybrid_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike hybrid, strike schoolstrike, entry, event
		where entry.event = event.id
		and event.category = ? 
		and hybrid.type = 'hybrid'
		and hybrid.entry = entry.id
		and hybrid.school = schoolstrike.school
		and schoolstrike.judge = judge.id
	");

	$hybrid_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $hybrid_strike_sth->fetchrow_array() ) { 
		$judge_constraint{$judge}{$entry}++;
	}

	my $round_limit = "and panel.round != ".$round->id if $round;

	unless ($round && $event->setting("allow_repeat_judging")) { 

		if ($round && $event->setting("allow_repeat_prelim_side")) { 
		
			my $judged_sth = $dbh->prepare("
				select judge.id, ballot.entry, ballot.side
				from judge, ballot, panel, round, entry, event
				where ballot.judge = judge.id
				and ballot.entry = entry.id
				and entry.event = event.id
				and event.category = ? 
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.type != 'elim'
				and round.type != 'final'
				".$round_limit."
			");

			$judged_sth->execute($category->id);

			while (my ($judge, $entry, $side) = $judged_sth->fetchrow_array() ) { 
				$judge_constraint{$judge}{$entry}{$side}++;
			}

		} elsif ( 
			$event->setting("allow_repeat_elims") 
			&& ( ($round->type eq "elim") || ($round->type eq "final"))
		) { 
		
			my $judged_sth = $dbh->prepare("
				select judge.id, ballot.entry
				from judge, ballot, panel, round, event, entry
				where ballot.judge = judge.id
				and entry.event = event.id
				and event.category = ? 
				and round.event = event.id
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and panel.round = round.id
				and round.type != 'elim'
				and round.type != 'final'
				".$round_limit."
				group by ballot.id
			");

			$judged_sth->execute($category->id);

			while (my ($judge, $entry) = $judged_sth->fetchrow_array() ) { 

				$judge_constraint{$judge}{$entry}++;
			}


		} else { 	

			my $judged_sth = $dbh->prepare("
				select judge.id, ballot.entry
				from judge, ballot, panel, round, event, entry
				where ballot.judge = judge.id
				and entry.event = event.id
				and event.category = ? 
				and round.event = event.id
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and panel.round = round.id
				".$round_limit."
				group by ballot.id
			");

			$judged_sth->execute($category->id);

			while (my ($judge, $entry) = $judged_sth->fetchrow_array() ) { 
				$judge_constraint{$judge}{$entry}++;
			}

		}
	}

	my $school_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike, entry, event
		where judge.id = strike.judge
		and event.category = ? 
		and entry.event = event.id
		and strike.type = 'school'
		and strike.school = entry.school
	");

	$school_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $school_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge}{$entry}++;
	}

	my $conflict_strike_sth = $dbh->prepare("
		select judge.id, entry.id
		from judge, strike, entry, event
		where judge.id = strike.judge
		and entry.event = event.id
		and event.category = ? 
		and strike.type = 'conflict'
		and strike.school = entry.school
	");

	$conflict_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $conflict_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge}{$entry}++;
	}

	my $entry_strike_sth = $dbh->prepare("
		select judge.id, strike.entry
		from judge, strike, entry, event
		where entry.id = strike.entry
		and entry.event = event.id
		and event.category = ? 
		and strike.type = 'conflict'
		and judge.id = strike.judge
	");

	$entry_strike_sth->execute($category->id);

	while (my ($judge, $entry) = $entry_strike_sth->fetchrow_array() ) {
		$judge_constraint{$judge}{$entry}++;
	}

	return %judge_constraint;

</%init>

