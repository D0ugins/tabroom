<%args>
	$tourn
	$person
</%args>
<%init>

	my $district_id = $tourn->setting("nsda_district");
	my $district = Tab::District->retrieve($district_id) if $district_id;

	unless ($district) {
		$m->comp("/funclib/abort.mas",
		message => "Not a district tournament: district id: $district_id");
	}

	my $permission = Tab::Permission->search(
		district => $district->id,
		person   => $person->id
	)->first;

	$permission++ if $person->site_admin;
	$permission++ if $person->setting("nsda_admin");

	unless ($permission) {
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to that district");
		$m->print('</h4></div>');
		$m->abort();
	}

	my $tz = $tourn->tz;
	$tz = "America/Chicago" unless $tz;

	# CONGRESS only has one ruleset now

	my $con_prelim_set = find_tbset($tourn, "Congress Prelim");
	$con_prelim_set->setting('equal_elims', 1);
	$con_prelim_set->setting('forfeits_never_break', 1);

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		truncate      => 9,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		truncate      => 9,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $con_prelim_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 6
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $con_prelim_set->id,
		count         => "prelim",
		chair		  => "chair",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	});

	my $con_elim_set = find_tbset($tourn, "Congress Elim");
	$con_elim_set->setting('equal_elims', 1);
	$con_elim_set->setting('forfeits_never_break', 1);

	Tab::Tiebreak->create({
		name          => "student_ranks",
		tiebreak_set  => $con_elim_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $con_elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $con_elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $con_elim_set->id,
		count         => "previous",
		highlow       => 0,
		truncate      => 9,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $con_elim_set->id,
		count         => "previous",
		highlow       => 1,
		truncate      => 9,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $con_elim_set->id,
		count         => "previous",
		highlow       => 1,
		truncate      => 9,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $con_elim_set->id,
		count         => "previous",
		chair		  => "chair",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	});

	# DEBATE

	foreach my $event ($tourn->events(type => "debate")) {
		$event->setting("powermatch", "sop");
		$event->setting("pullup_method", "sop");
		$event->setting("pullup_repeat", 1);
	}

	my $deb_prelim_set = find_tbset($tourn, "Debate");

	Tab::Tiebreak->create({
		name          => "winloss",
		tiebreak_set  => $deb_prelim_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "ballots",
		tiebreak_set  => $deb_prelim_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $deb_prelim_set->id,
		highlow       => 1,
		highlow_count => 1,
		count         => "prelim",
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $deb_prelim_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "opp_seed",
		tiebreak_set  => $deb_prelim_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "coinflip",
		tiebreak_set  => $deb_prelim_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 6
	});

	my $robin_set = find_tbset($tourn, "Round Robin");

	Tab::Tiebreak->create({
		name          => "ballots",
		tiebreak_set  => $robin_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "headtohead",
		tiebreak_set  => $robin_set->id,
		count         => "prelim",
		multiplier    => 1,
		priority      => 2
	});

	my $deb_elim_set = find_tbset($tourn, "Debate Elim");

	Tab::Tiebreak->create({
		name          => "winloss",
		tiebreak_set  => $deb_elim_set->id,
		count         => "previous",
		multiplier    => 1,
		priority      => 1
	});

	my $deb_double_elim_set = find_tbset($tourn, "Debate Double Elimination");

	Tab::Tiebreak->create({
		name         => "losses",
		tiebreak_set => $deb_double_elim_set->id,
		count        => "elim",
		multiplier   => 1,
		priority     => 1
	});

	my $deb_final_set = find_tbset($tourn, "Debate Final");
	$deb_final_set->delete();

	foreach my $alt ("Runoff", "Seed") {

		my $deb_final_set = find_tbset($tourn, "Debate Final ".$alt);

		Tab::Tiebreak->create({
			name          => "winloss",
			tiebreak_set  => $deb_final_set->id,
			count         => "final",
			multiplier    => 1,
			priority      => 1
		});

		Tab::Tiebreak->create({
			name          => "rounds",
			tiebreak_set  => $deb_final_set->id,
			count         => "all",
			multiplier    => 1,
			priority      => 2
		});

		my $alt_tag = lc($alt);
		$alt_tag =~ s/ /_/g;

		if ($alt_tag ne "runoff") {
			Tab::Tiebreak->create({
				name          => $alt_tag,
				tiebreak_set  => $deb_final_set->id,
				count         => "all",
				multiplier    => 1,
				priority      => 3
			});
		}
	}

	foreach my $event ($tourn->events( type => "speech")) {
		$event->setting("elim_method", "snake_school");
		$event->setting("min_panel_size", 4);
		$event->setting("max_panel_size", 7);
	}

	foreach my $event ($tourn->events( type => "congress")) {

		my $online_mode = $event->setting("online_mode");

		if ($online_mode eq "none" || (not defined $online_mode)) {
			$event->setting("min_panel_size", 8);
			$event->setting("max_panel_size", 29);
		} else {
			$event->setting("min_panel_size", 8);
			$event->setting("max_panel_size", 16);
		}

		$event->setting("parli_noautofill", 1);
	}

	rm_tbset($tourn, "IE Semi");
	rm_tbset($tourn, "IE Break To Elims");
	rm_tbset($tourn, "IE Prelim Composite");
	rm_tbset($tourn, "IE Prelim Seeding");

	my $ie_prelim_set = find_tbset($tourn, "IE Prelim");

	Tab::Tiebreak->create({
		name              => "ranks",
		tiebreak_set      => $ie_prelim_set->id,
		count             => "prelim",
		highlow           => 4,
		highlow_count     => 0,
		highlow_threshold => 4,
		multiplier        => 1,
		priority          => 1,
		truncate          => 0,
		truncate_smallest => 1
	});

	my $no_elim_set = find_tbset($tourn, "IE No Elims");

	Tab::Tiebreak->create({
		name              => "ranks",
		tiebreak_set      => $no_elim_set->id,
		count             => "all",
		highlow           => 0,
		highlow_count     => 0,
		highlow_threshold => 0,
		multiplier        => 1,
		priority          => 1,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name              => "reciprocals",
		tiebreak_set      => $no_elim_set->id,
		count             => "all",
		highlow           => 0,
		highlow_count     => 0,
		highlow_threshold => 0,
		multiplier        => 1,
		priority          => 2,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name              => "judgepref",
		tiebreak_set      => $no_elim_set->id,
		count             => "all",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		priority          => 3,
		truncate          => 0,
		truncate_smallest => 0
	});

	my $ie_elim_set = find_tbset($tourn, "IE Elim");

	Tab::Tiebreak->create({
		name              => "ranks",
		tiebreak_set      => $ie_elim_set->id,
		count             => "prelim",
		highlow           => 4,
		highlow_count     => 1,
		highlow_threshold => 0,
		multiplier        => 1,
		priority          => 1,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $ie_elim_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 2,
		priority      => 1,
		truncate      => 0
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $ie_elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2,
		truncate      => 0
	});

	my $ie_final_set = find_tbset($tourn, "IE Final");

	Tab::Tiebreak->create({
		name          => "rounds",
		tiebreak_set  => $ie_final_set->id,
		count         => "all",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name              => "ranks",
		tiebreak_set      => $ie_final_set->id,
		count             => "prelim",
		highlow           => 4,
		highlow_count     => 1,
		highlow_threshold => 0,
		multiplier        => 1,
		priority          => 2,
		truncate          => 0,
		truncate_smallest => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $ie_final_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 2,
		priority      => 2,
		truncate      => 0
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 2,
		priority      => 2,
		truncate      => 0
	});

	my $speech_weekend;

	foreach my $weekend (sort {$b->start->epoch <=> $a->start->epoch} $tourn->weekends) {

		my @weekend_events = $m->comp("/funclib/weekend_events.mas", weekend => $weekend, type => "speech");

		if (@weekend_events) {
			$speech_weekend = $weekend;
		}
	}

	my $shit_changed = "2022-03-24 18:21:01";
	my $scdt = DateTime::Format::MySQL->parse_datetime($shit_changed);

	my $counter = 3;

	if ($speech_weekend->start < $scdt) {

		Tab::debuglog("Yes I have no bananas!");

		Tab::Tiebreak->create({
			name              => "reciprocals",
			tiebreak_set      => $ie_final_set->id,
			count             => "prelim",
			highlow           => 4,
			highlow_count     => 1,
			highlow_threshold => 0,
			multiplier        => 1,
			priority          => $counter,
			truncate          => 0,
			truncate_smallest => 1
		});

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $ie_final_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => $counter,
			truncate      => 0
		});

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $ie_final_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => $counter,
			truncate      => 0
		});

		$counter++;
	}

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $ie_final_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $ie_final_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => $counter++
	});

	Tab::Tiebreak->create({
		name              => "judgepref",
		tiebreak_set      => $ie_final_set->id,
		count             => "prelim",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		priority          => $counter++,
		truncate_smallest => 1
	});

	my $runoff_set = find_tbset($tourn, "IE Runoff");

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $runoff_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $runoff_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});


	return;

	sub find_tbset {

		my ($tourn, $tag) = @_;

		my @tbsets = Tab::TiebreakSet->search(
			tourn => $tourn->id,
			name  => $tag
		);

		my $tbset;
		$tbset = shift @tbsets if @tbsets;

		foreach my $left (@tbsets) {
			$left->delete();
		}

		Tab::Tiebreak->set_sql("delete" => "delete from tiebreak where tiebreak_set = ? ");
		Tab::TiebreakSetSetting->set_sql("delete" => "delete from tiebreak_set_setting where tiebreak_set = ? ");

		if ($tbset) {
			Tab::Tiebreak->sql_delete->execute($tbset->id);
			Tab::TiebreakSetSetting->sql_delete->execute($tbset->id);
		} else {

			$tbset = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => $tag
			});
		}

		return $tbset;

	}

	sub rm_tbset {

		my ($tourn, $tag) = @_;

		my @tbsets = Tab::TiebreakSet->search(
			tourn => $tourn->id,
			name  => $tag
		);

		foreach my $tb_set (@tbsets) {
			$tb_set->delete();
		}

		return;
	}

</%init>
