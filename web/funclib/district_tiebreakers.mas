<%args>
	$tourn
	$person
</%args>
<%init>

	my $district_id = $tourn->setting("nsda_district");
	my $district = Tab::District->retrieve($district_id) if $district_id;

	unless ($district) {
		$m->comp("/funclib/abort.mas", 
		message => "Not a district tournament: district id: $district_id");
	}

	my $permission = Tab::Permission->search( 
		district => $district->id,
		person   => $person->id 
	)->first;

	$permission++ if $person->site_admin;
	$permission++ if $person->setting("nsda_admin");

	unless ($permission) { 
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to that district");
		$m->print('</h4></div>');
		$m->abort();
	}

	my $tz = $tourn->tz;
	$tz = "America/Chicago" unless $tz;


	# CONGRESS IS THE SAME EITHER WAY
	my $prelim_set = find_tbset($tourn, "Congress Prelim");
	$prelim_set->setting('equal_elims', 1);
	$prelim_set->setting('forfeits_never_break', 1);

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		truncate      => 9,
		priority      => 2
	}); 

	Tab::Tiebreak->create({ 
		name          => "reciprocals",
		tiebreak_set  => $prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		truncate      => 9,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $prelim_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $prelim_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 6
	}); 

	Tab::Tiebreak->create({
		name          => "chair_ranks",
		tiebreak_set  => $prelim_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	}); 

	my $elim_set = find_tbset($tourn, "Congress Elim");
	$elim_set->setting('equal_elims', 1);
	$elim_set->setting('forfeits_never_break', 1);

	Tab::Tiebreak->create({
		name          => "student_ranks",
		tiebreak_set  => $elim_set->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2 
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3 
	}); 

	Tab::Tiebreak->create({ 
		name          => "reciprocals",
		tiebreak_set  => $elim_set->id,
		count         => "previous",
		highlow       => 0,
		truncate      => 9,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $elim_set->id,
		count         => "previous",
		highlow       => 1,
		truncate      => 9,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 5
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $elim_set->id,
		count         => "previous",
		highlow       => 1,
		truncate      => 9,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	}); 

	Tab::Tiebreak->create({
		name          => "chair_ranks",
		tiebreak_set  => $elim_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	}); 

	# DEBATE

	if ($tourn->setting("nsda_pilot_debate")) { 

		foreach my $event ($tourn->events(type => "debate")) { 
			$event->setting("powermatch", "sop");
			$event->setting("pullup_method", "sop");
		}

		my $prelim_set = find_tbset($tourn, "Debate");

		Tab::Tiebreak->create({
			name          => "winloss",
			tiebreak_set  => $prelim_set->id,
			count         => "prelim",
			multiplier    => 1,
			priority      => 1
		}); 

		Tab::Tiebreak->create({
			name          => "points",
			tiebreak_set  => $prelim_set->id,
			highlow       => 1,
			highlow_count => 1,
			count         => "prelim",
			multiplier    => 1,
			priority      => 2
		}); 

		Tab::Tiebreak->create({
			name          => "points",
			tiebreak_set  => $prelim_set->id,
			count         => "prelim",
			multiplier    => 1,
			priority      => 3 
		}); 

		Tab::Tiebreak->create({
			name          => "opp_seed",
			tiebreak_set  => $prelim_set->id,
			count         => "prelim",
			multiplier    => 1,
			priority      => 4 
		}); 

		Tab::Tiebreak->create({
			name          => "coinflip",
			tiebreak_set  => $prelim_set->id,
			count         => "prelim",
			multiplier    => 1,
			priority      => 5
		}); 

		my $elim_set = find_tbset($tourn, "Debate Elim");

		Tab::Tiebreak->create({
			name          => "winloss",
			tiebreak_set  => $elim_set->id,
			count         => "previous",
			multiplier    => 1,
			priority      => 1 
		}); 

		my $final_set = find_tbset($tourn, "Debate Final");
		$final_set->delete();

		foreach my $alt ("Runoff", "NSDA Points", "Seed") { 

			my $final_set = find_tbset($tourn, "Debate Final ".$alt);

			Tab::Tiebreak->create({
				name          => "winloss",
				tiebreak_set  => $final_set->id,
				count         => "previous",
				multiplier    => 1,
				priority      => 1
			}); 

			Tab::Tiebreak->create({
				name          => "rounds",
				tiebreak_set  => $final_set->id,
				count         => "all",
				multiplier    => 1,
				priority      => 2 
			}); 

			my $alt_tag = lc($alt);
			$alt_tag =~ s/ /_/g;

			if ($alt_tag ne "runoff") { 

				Tab::Tiebreak->create({
					name          => $alt_tag,
					tiebreak_set  => $final_set->id,
					count         => "all",
					multiplier    => 1,
					priority      => 3 
				}); 
			}
		}

	} else { 

		my $prelim_set = find_tbset($tourn, "Debate");

		Tab::Tiebreak->create({
			name          => "losses",
			tiebreak_set  => $prelim_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		my $elim_set = find_tbset($tourn, "Debate Elim");

		Tab::Tiebreak->create({
			name          => "winloss",
			tiebreak_set  => $elim_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		my $final_set = find_tbset($tourn, "Debate Final");

		Tab::Tiebreak->create({
			name          => "winloss",
			tiebreak_set  => $final_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		Tab::Tiebreak->create({
			name          => "rounds",
			tiebreak_set  => $final_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2 
		}); 

		Tab::Tiebreak->create({
			name          => "headtohead",
			tiebreak_set  => $final_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 3 
		}); 

		Tab::Tiebreak->create({
			name          => "ballots",
			tiebreak_set  => $final_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 4 
		}); 
	}

	my $method = $tourn->setting("nsda_speech_method");
	$method = "doubledown" unless $method;
	$method = "pilot" if $tourn->setting("nsda_pilot_speech");

	# SPEECH
	if ($method eq "pilot") { 
		
		my $semi_tiebreak_set = find_tbset($tourn, "IE Semi");
		$semi_tiebreak_set->delete();
		my $first_break_set = find_tbset($tourn, "IE Break To Elims");
		$first_break_set->delete();

		# Create the composite scorer
		my $prelim_composite_set = find_tbset($tourn, "IE Prelim Composite");
		$prelim_composite_set->delete() if $prelim_composite_set;

		my $seeding_tiebreak_set = find_tbset($tourn, "IE Prelim Seeding");
		$seeding_tiebreak_set->delete() if $seeding_tiebreak_set;

		my $prelim_set = find_tbset($tourn, "IE Prelim");

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $prelim_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1,
			truncate      => 0
		});

		my $elim_set = find_tbset($tourn, "IE Elim");

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $elim_set->id,
			count         => "prelim",
			highlow       => 4,
			highlow_count => 1,
			multiplier    => 1,
			priority      => 1,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $elim_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => 1,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $elim_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2,
			truncate      => 0
		});

		my $final_set = find_tbset($tourn, "IE Final");

		Tab::Tiebreak->create({
			name          => "rounds",
			tiebreak_set  => $final_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $final_set->id,
			count         => "prelim",
			highlow       => 4,
			highlow_count => 1,
			multiplier    => 1,
			priority      => 2,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $final_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => 2,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $final_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => 2,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "reciprocals",
			tiebreak_set  => $final_set->id,
			count         => "prelim",
			highlow       => 4,
			highlow_count => 1,
			multiplier    => 1,
			priority      => 3,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "reciprocals",
			tiebreak_set  => $final_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => 3,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "reciprocals",
			tiebreak_set  => $final_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 2,
			priority      => 3,
			truncate      => 0
		});

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $final_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 4
		});

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $final_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 5
		}); 

		Tab::Tiebreak->create({ 
			name          => "reciprocals",
			tiebreak_set  => $final_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 6
		});

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $final_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 7
		}); 

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $final_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 8 
		}); 

		my $runoff_set = find_tbset($tourn, "IE Runoff");

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $runoff_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		});

		Tab::Tiebreak->create({ 
			name          => "reciprocals",
			tiebreak_set  => $runoff_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2
		});

	} elsif ($method eq "doubledown") { 
		
		my $semi_tiebreak_set = find_tbset($tourn, "IE Semi");
		$semi_tiebreak_set->delete();

		my $first_break_set = find_tbset($tourn, "IE Break To Elims");
		$first_break_set->delete();

		my $prelim_composite_set = find_tbset($tourn, "IE Prelim Composite");
		$prelim_composite_set->setting("forfeits_never_break", 1);

		my $tiebreak_set = find_tbset($tourn, "IE Prelim");

		# Updown gives a W for the first half of a section and a L for the
		# second half

		Tab::Tiebreak->create({
			name          => "downs",
			tiebreak_set  => $tiebreak_set->id,
			count         => "all",
			child         => $prelim_composite_set->id,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		# The composite is determined by ranks first 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $prelim_composite_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			truncate      => 5,
			multiplier    => 1,
			priority      => 1
		}); 

		# Judges' preference is the second

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $prelim_composite_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			truncate      => 5,
			multiplier    => 1,
			priority      => 2
		}); 

		# Reciprocals is the third

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $prelim_composite_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			truncate      => 5,
			multiplier    => 1,
			priority      => 3
		}); 

		# Adjusted ranks is fourth 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $prelim_composite_set->id,
			count         => "previous",
			highlow       => 1,
			highlow_count => 1,
			truncate      => 5,
			multiplier    => 1,
			priority      => 4 
		}); 

		# This tiebreaker set is not used in rounds, but is used to
		# determine seeding position in rounds after Round 2.

		my $seeding_tiebreak_set = find_tbset($tourn, "IE Prelim Seeding");

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $seeding_tiebreak_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			truncate      => 5,
			multiplier    => 1,
			priority      => 1
		}); 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $seeding_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			truncate      => 5,
			multiplier    => 1,
			priority      => 1
		}); 

		# Final round placement tiebreakers. 

		my $final_tiebreak_set = find_tbset($tourn, "IE Final");
		$final_tiebreak_set->setting("forfeits_never_break", 1);

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		});

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			child         => $prelim_composite_set->id,
			count         => "elim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		});

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		});

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2
		});

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 3
		});

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 3
		});

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 4
		});

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 5
		});

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 5
		});

	} else {

		# California Plan 
		# Create the composite scorer

		my $prelim_composite_set = find_tbset($tourn, "IE Prelim Composite");
		$prelim_composite_set->setting("forfeits_never_break", 1);

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $prelim_composite_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1,
			truncate      => 5

		});

		Tab::Tiebreak->create({ 
			name          => "judgepref",
			tiebreak_set  => $prelim_composite_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2

		});

		my $tiebreak_set = find_tbset($tourn, "IE Prelim");

		Tab::Tiebreak->create({ 
			name          => "ranks",
			tiebreak_set  => $tiebreak_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1

		});

		# Seeds for prelims to prelims are just composite ranks
		my $seed_tiebreak_set = find_tbset($tourn, "IE Prelim Seeding");

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $seed_tiebreak_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		# Seeds to advance to semis are more complicated

		my $first_break_set = find_tbset($tourn, "IE Break To Elims");

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $first_break_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 


		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $first_break_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2
		});

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $first_break_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 3
		});

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $first_break_set->id,
			count         => "prelim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 4
		});

		# Break Semis to Finals

		my $semi_tiebreak_set = find_tbset($tourn, "IE Semi");
		$semi_tiebreak_set->setting("truncate_to_smallest", 1);

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $semi_tiebreak_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		my $tb = Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		# 2nd: Judge pref of semifinal round

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2
		}); 

		# 3rd: Ranks of semi alone

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 3
		}); 

		# 4th: Recips of semi alone

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 4
		}); 

		# 5th: Raw ranks of all rounds (no re-rankings)

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 5
		}); 

		# 6th is composite recips from prelims and raw recips from
		# semis

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "prelim",
			child         => $prelim_composite_set->id,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 6
		}); 

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $semi_tiebreak_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 6
		}); 

		# Rank the Finals

		my $final_tiebreak_set = find_tbset($tourn, "IE Final");

		# First is rank totals from finals and semis, together with
		# composite ranks from prelims. 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			child         => $prelim_composite_set->id,
			count         => "prelim",
			truncate      => 5,
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 1
		}); 

		# Second is ranks from finals only

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 2
		}); 

		# Third is Judge Prefs in the final 

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 3
		}); 

		# Fourth is recips in the final 

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 4
		}); 

		# Fifth: Finals + Semis

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 5
		}); 

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 5
		}); 

		# Sixth is Judge Prefs in the final  + semis

		Tab::Tiebreak->create({
			name          => "judgepref",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "previous",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 6
		}); 

		# Seventh is recips in the final + semi

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "final",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 7
		}); 

		Tab::Tiebreak->create({
			name          => "reciprocals",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "elim",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 7
		}); 

		# Eighth: Finals + Semis + Unadjusted Prelims

		Tab::Tiebreak->create({
			name          => "ranks",
			tiebreak_set  => $final_tiebreak_set->id,
			count         => "all",
			highlow       => 0,
			highlow_count => 0,
			multiplier    => 1,
			priority      => 8
		}); 

	} 

	return;


	sub find_tbset { 

		my ($tourn, $tag) = @_;

		Tab::debuglog("Tag is $tag");

		my @tbsets = Tab::TiebreakSet->search(
			tourn => $tourn->id,
			name  => $tag
		);

		my $tbset;
		
		$tbset = shift @tbsets if @tbsets;

		foreach my $left (@tbsets) { 
			$left->delete();
		}

		Tab::Tiebreak->set_sql("delete" => "delete from tiebreak where tiebreak_set = ? ");
		Tab::TiebreakSetSetting->set_sql("delete" => "delete from tiebreak_set_setting where tiebreak_set = ? ");

		if ($tbset) { 
			Tab::Tiebreak->sql_delete->execute($tbset->id);
			Tab::TiebreakSetSetting->sql_delete->execute($tbset->id);
		} else { 

			$tbset = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => $tag
			});
		}

		return $tbset;

	}

</%init>
