<%args>
	$round => undef
</%args>
<%init>

	return unless $round;

	my $event = $round->event;

	my %entry_ballots = ();

	my %entry_names = $m->comp("/funclib/event_names.mas", event => $event);

	my %rounds;

	my $points;
	my $ranks;
	my $wins;

	next unless $round->tiebreak_set;

	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
		$ranks++ if ($tb->name eq "ranks" 
					|| $tb->name eq "reciprocals");

		$wins++ if ($tb->name eq "opp_wins" 
					|| $tb->name eq "winloss" 
					|| $tb->name eq "ballots");

		$points++ if ($tb->name eq "points" 
					|| $tb->name eq "competition" 
					|| $tb->name eq "opp_points");


		if ($tb->child) { 

			foreach my $otb ($tb->child->tiebreaks) { 
				$ranks++ if ($otb->name eq "ranks" 
							|| $otb->name eq "reciprocals");

				$wins++ if ($otb->name eq "opp_wins" 
							|| $otb->name eq "winloss" 
							|| $otb->name eq "ballots");

				$points++ if ($otb->name eq "points" 
							|| $otb->name eq "competition" 
							|| $otb->name eq "opp_points");
			}

		}

	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select distinct value.id, value.tag, value.value, 
			ballot.entry, ballot.judge, 
			panel.bye, 
			ballot.bye, ballot.forfeit, ballot.chair, 
			round.id, round.name, round_setting.value 
		from round
		left join panel on panel.round  =round.id
		left join ballot on ballot.panel = panel.id
		left join score value on value.ballot = ballot.id
		left join round_setting on round_setting.round = round.id 
			and round_setting.tag = 'ignore_results'

		where round.name <= ? 
		and round.event = ? 
		order by round.name, ballot.entry, ballot.chair, ballot.judge, 
			CASE value.tag 
				WHEN ".' "ballot" 
					then 1 when "rank" 
					then 2 when "points" 
					then 3 when "rebuttal_points" 
					then 4 end'."
		");

		$sth->execute($round->name, $event->id); 

		my %entry_round;
		my %points_done;

		while (my (
			$id, $tag, $value, 
			$entryid, $judge, 
			$pbye, 
			$bye, $forfeit, $chair,
			$round_id, $roundname, $ignore_results) = $sth->fetchrow_array() ) { 

			$rounds{$round_id}{"name"} = $roundname;

			next if $tag eq "rank" && not defined $ranks;
			next if $tag eq "points" && not defined $points;
			next if $tag eq "ballot" && not defined $wins;

			$entry_round{$entryid} = $roundname;

			if ($ignore_results &! $entry_ballots{$entryid}{$roundname}) { 
				$entry_ballots{$entryid}{$roundname} .= " Not Counted:  ";
			}

			if ($tag eq "ballot") { 

				if ($bye) { 
					$entry_ballots{$entryid}{$roundname} .= "BYE ";
				} elsif ($forfeit) { 
					$entry_ballots{$entryid}{$roundname} .= "FFT " 
				} else { 
					$entry_ballots{$entryid}{$roundname} .= "W  " if $value > 0;
					$entry_ballots{$entryid}{$roundname} .= "L  " if $value < 1;
				}
			
			} elsif ($tag eq "points") { 

				unless ($team_points && $points_done{$entryid."-".$judge."-".$roundname}++) { 
					foreach (length($value) .. 5) { 
						$value .= "&nbsp;";
					}
					$entry_ballots{$entryid}{$roundname} .= $value." " if defined $value;
				}

			} elsif ($tag eq "rank") { 

				$entry_ballots{$entryid}{$roundname} .= $value." " if defined $value;
			} elsif ($pbye) { 
				$entry_ballots{$entryid}{$roundname} .= "BYE "; 
			} elsif ($bye) { 
				$entry_ballots{$entryid}{$roundname} .= "BYE "; 
			}

		}

	}

	return %entry_ballots;

