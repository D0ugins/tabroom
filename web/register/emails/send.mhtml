<%args>
	$tourn
	$tourn_settings
	$person
	$subject       => undef
	$content       => undef
	$email_id      => undef
	$everybody     => undef
	$diodirs       => undef
	$judge_short   => undef
	$money_short   => undef
	$invoice_short => undef
	$tba           => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	
	my $now = DateTime->now(time_zone => $tz);

	my $sent_to;
	my @recipients;
	my @notifieds;
	my @emails;

	my @schools;

	unless ($content) { 
		my $err = "The email had no message body.  Try again,";
		$m->redirect("/register/emails/compose.mhtml&err=$err");
	}

	if ($diodirs) { 

		$sent_to .= "Diocesan Moderators of ".$tourn->name;

   		foreach my $region ($m->comp("/funclib/tourn_regions.mas", tourn => $tourn)) {
      	   	push @recipients, $region->admins;
		}

	}

	if ($everybody) { 
		$sent_to .= "All Registrants of ".$tourn->name;
		push @schools, $tourn->schools;
	} 

	if ($judge_short) { 

		if ($tourn_settings->{"nsda_nats"}) { 

			$m->comp("/register/reports/nsda_judging.mas", 
				tourn          => $tourn,
				tourn_settings => $tourn_settings,
				return         => 1
			);

			Tab::School->set_sql(short_judging => "

				select distinct school.*
				from school, school_setting
					where school.tourn = ? 
					and school_setting.school = school.id
					and school_setting.tag = 'judging_unmet'

					and exists (
						select entry.id
						from entry
						where entry.school = school.id
						and entry.active = 1
					)
			");

			push @schools, Tab::School->search_short_judging($tourn->id);

		} else { 

			my @categories = $tourn->categories;
			$sent_to .= " Schools short on judges at ".$tourn->name;

			foreach my $school ($tourn->schools) {

				my $short;

				foreach my $category (@categories) { 

					my ($uncovered, $overage) = $m->comp(
						"/funclib/judgemath/uncovered_burden_by_category.mas",
						category => $category,
						school   => $school
					);

					$short++ if $uncovered;
					last if $short;
				}

				next unless $short;

				push @schools, $school;
			}
		}
	}

	my %school_balances;

	if ($money_short || $invoice_short) { 

		$sent_to = " Schools with positive balances at ".$tourn->name;

		%school_balances = $m->comp(
			"/funclib/school_balances.mas", 
			tourn          => $tourn,
			tourn_settings => $tourn_settings
		);

		foreach my $school_id (keys %school_balances) { 

			my $yup;

			if ($money_short && $school_balances{$school_id}{"balance"} > 0) { 
				$yup++;
			}

			if ($invoice_short && $school_balances{$school_id}{"uninvoiced"} > 0) { 
				$yup++;
			}

			push @schools, Tab::School->retrieve($school_id) if $yup;
		}

	}
	
	if ($tba) { 
		$sent_to .= "Schools with TBA entries at ".$tourn->name;
		push @schools, $m->comp("/funclib/tourn_school_tba.mas", tourn => $tourn);
	} 

	unless ($everybody || $judge_short || $tba) {
 
		my %send_keys = ();
		
		$sent_to .= " Schools registered for ".$tourn->name." with entries in: ";

		foreach my $event ($tourn->events) { 

			next unless $ARGS{"event_".$event->id};

			my $waitlist;
			$waitlist++ if $ARGS{"wl_".$event->id};
			
			$sent_to .= $event->name."\n";

			push @schools, $m->comp(
				"/funclib/event_schools.mas", 
				event    => $event,
				waitlist => $waitlist
			);
		} 
	} 

	foreach my $category ($tourn->categories) { 

		my $category_key = "category_".$category->id;
		next unless $ARGS{$category_key};

		$sent_to .= $category->name." judges\n";

		foreach my $judge ($category->judges) { 
   	      	push (@notifieds, 
				$m->comp("/funclib/judge_follower.mas", 
				judge  => $judge,
				emails => 1
			));
		}

	}

	my %done;

	my %tourn_contacts = $m->comp("/funclib/tourn_contacts.mas", tourn => $tourn);

	foreach my $school (@schools) { 
		next if $done{$school->id}++;
		push @emails, keys %{$tourn_contacts{$school->id}};
	}

	my $email;

	if ($email_id) { 

		$email = Tab::Email->retrieve($email_id);

		#If the mail has been sent already we clone instead of overwriting

		if ($email->sent_to) {   
			$email = $email->copy({
				sent_at => $now
			});
		}

		$email->sent_at($now);

	} else { 

		$email = Tab::Email->create({
			subject => $subject,
			content => $content,
			sent_at => $now,
			tourn   => $tourn->id,
			sender  => $person->id
		});

	} 

	unless (@recipients || @notifieds || @emails) { 
		my $err = "The categories/checkboxes you have selected did not have any recipients.";
		$err .= "It's possible you didn't check boxes, or that the categories you chose ";
		$err .= "have no active entries.";
		$m->redirect("compose.mhtml?email_id=".$email->id."&err=$err");
	}

	foreach my $director ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn)) {
		push (@recipients, $director);
	}

	$content = $content."\n-----------------------------<br />\n";
	$content = $content."$sent_to\n\n";

	$email->sent_to($sent_to);
	$email->content($content);
	$email->update;

	#uniq

    my %nseen = ();
	@notifieds = grep { ! $nseen{$_}++ } @notifieds;

	my $count;

	foreach my $recipient (@recipients) { 
		next if $nseen{$recipient->email}++;
		push @emails, $recipient->email unless $recipient->no_email;
	}

	$m->comp( "/funclib/send_email.mas", 
		from    => $person,
		array   => \@emails,
		subject => $subject,
		body    => $content 
	);

	$m->comp( "/funclib/send_notify.mas", 
		from    => $person->email,
		array   => \@notifieds,
		subject => $subject,
		body    => $content 
	);

	my $msg = "This message has been sent.";
	$m->redirect("/register/emails/index.mhtml?email_id=".$email->id."&msg=$msg");

</%init>

