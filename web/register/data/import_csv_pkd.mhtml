<%args>
	$tourn
	$person
	$session
</%args>
<%init>

	my $ok++ if $person->site_admin;

	my %event_by_name = map {$_->name => $_} $tourn->events;
	my %event_by_id = map {$_->id => $_} $tourn->events;

	my $wsdc = $tourn->setting("usa_wsdc");

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload; 
	my $csv_file = $req->upload($csv_handles[0]);
	my $io = $csv_file->io;

	my @lines = <$io>;

	my @entries;


	foreach (@lines) { 
		$_ =~ s/[\r]+/\n/g;
		$_ =~ s/[\r\n]+/\n/g;
		$_ =~ s/[\n]+/\n/g;
		push @entries, split (/\n/, $_);
	}

	my %chapter_by_name;
	my %school_by_name;
	my %student_by_name;
	my %event_count;

	my $err;
	
	$m->print('<div class="blankfull">');

	ENTRY:
	foreach my $entry (@entries) { 

		my ($school_name, $event_name, $nameone, $nametwo) 
			= split(/,/, $entry);

		next unless $school_name;
		next if $school_name eq "School Name";

		foreach ($school_name, $event_name, $nameone, $nametwo)  {
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
		}

		my $event = $event_by_name{$event_name};

		unless ($event) { 
			$err.= "No event found for $event_name";
			next ENTRY;
		}

		my $school = $school_by_name{$school_name};
		my $chapter = $chapter_by_name{$school_name};

		unless ($school) { 

			$school = Tab::School->search( 
				name => $school_name, 
				tourn => $tourn->id
			)->first;

			if ($school) { 
				$school_by_name{$school_name} = $school;
				$chapter = $school->chapter;
				$chapter_by_name{$school_name} = $school->chapter;
			}
		}

		unless ($school) { 

			foreach my $circuit ($tourn->circuits) { 
				my @chapters = $m->comp(
					"/funclib/circuit_chapters.mas", 
						circuit => $circuit, 
						name => $school_name
					);
				$chapter = shift @chapters;
				last if $chapter;
			}

			unless ($chapter) { 

				$chapter = Tab::Chapter->create({
					name    => $school_name,
					country => $tourn->country
				});

				foreach my $circuit ($tourn->circuits) { 
					Tab::ChapterCircuit->create({
						chapter => $chapter->id,
						circuit => $circuit->id
					});
				}
			}

			my ($school_code, $school_region) = $m->comp(
				"/funclib/chapter_code.mas", 
				tourn => $tourn, 
				chapter => $chapter
			);

			$school = Tab::School->create({
				tourn      => $tourn->id,
				chapter    => $chapter->id,
				name       => $school_name,
				code       => $school_code
			});

			$school->setting("entered_on", "date", $now);

			$school_by_name{$school_name} = $school;
			$chapter = $school->chapter if $school;
			$chapter_by_name{$school_name} = $school->chapter;
		}

		my @students;

		foreach my $name ($nameone, $nametwo) { 

			next unless $name;
			
			my $student = $student_by_name{$school->id}{$name};

			unless ($student) { 

				my @names = split(/\ /, $name);
				next unless @names;

				my $first = shift @names;
				my $last = pop @names if @names;
				my $middle = join(' ', @names) if @names;

				$student = Tab::Student->search(
					chapter => $chapter->id,
					first   => $first,
					last    => $last
				)->first;

				unless ($student) { 

					$student = Tab::Student->create({
						chapter    => $chapter->id,
						first      => $first,
						middle     => $middle,
						last       => $last,
						grad_year  => ($now->year + 1)
					});

				}
			}

			push @students, $student;

			$student_by_name{$school->id}{$name} = $student;

		}


		my $name;
	
		if (scalar @students == 1) { 

			$name = $students[0]->first." ".$students[0]->last;

		} else { 

			foreach my $student (@students) { 
				$name .= " & " if $name;
				$name .= $student->last;
			}
		}

		my $code = 1;

		my $entry = Tab::Entry->create({
			school      => $school->id,
			event       => $event->id,
			tourn       => $tourn->id,
			name        => $name,
			dropped     => 0,
			dq          => 0,
			waitlist    => 0,
			unconfirmed => 0,
			code        => $code
		});

		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
		$entry->update;

		foreach my $student (@students) { 
			Tab::EntryStudent->create({
				entry   => $entry->id,
				student => $student->id
			});
		}

		$event_count{$event->id}++;

	}

</%init>


%	foreach my $event_id (keys %event_count) { 
%		my $event = $event_by_id{$event_id};

		<p> <% $event->name %> imported <% $event_count{$event_id} %> entries </p>

%	}

	</div>

