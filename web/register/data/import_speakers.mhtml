<%args>
	$person
	$session
</%args>
<%init>

	use XML::Simple;
	use Data::Dumper;

	my $now = DateTime->now;

	#PROCESS THE XML

	my $xml = new XML::Simple ( 
		SuppressEmpty => 1,
		ForceArray => [ qw(settings tiebreaks) ]
	);
	my $data;

	my $req = Apache2::Request->new($r);
	my @xml_handles = $r->upload;
	my $xml_file = $req->upload($xml_handles[0]);
	my $xml_filename = $xml_file->tempname;

	my $epoch = $now->epoch;
	
	system "/bin/mkdir -p ".$Tab::file_root."tmp/$epoch";
	system "mv $xml_filename ".$Tab::file_root."tmp/$epoch/SessionsData.xml";

	$data = $xml->XMLin($Tab::file_root."tmp/$epoch/SessionsData.xml"); 

	$m->abort unless $data;

	foreach my $key (keys %{$data}) { 

		SESSION:
		foreach my $session_ref (@{$data->{$key}}) { 

			my $tb_ref = $session_ref->{"tb_set"};

			my $id = $tb_ref->{"id"};
			my $name = $tb_ref->{"tag"};
			my $tourn_id = $tb_ref->{"tourn"};
			my $setting_id = $tb_ref->{"setting"};

			$m->print("<h5>TICK</h5>");
			$m->print("<p>ID $id, Name $name, tourn $tourn_id, setting $setting_id</p>");

			if (Tab::TiebreakSet->retrieve($id)) {

				$m->print("<p>Tiebreak set exists already</p>");

			} else { 


				my $tb_set = Tab::TiebreakSet->create({
					id    => $id,
					name  => $name,
					tourn => $tourn_id
				});

				$m->print("<p>Tiebreak set does not exist.  Created $tb_set vs id $id</p>");

				if ($tb_ref->{"tiebreaks"}) { 

					foreach my $tiebreak_id (keys %{$tb_ref->{"tiebreaks"}}) { 

						my $tag =  $tb_ref->{"tiebreaks"}{$tiebreak_id}{"tag"};

						my $tiebreak = Tab::Tiebreak->create({
							name          => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"tag"},
							count         => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"count"},
							multiplier    => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"multiplier"},
							priority      => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"priority"},
							highlow       => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"highlow"},
							highlow_count => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"highlow_count"},
							truncate      => $tb_ref->{"tiebreaks"}{$tiebreak_id}{"truncate"},
							tiebreak_set  => $tb_set->id
						}),

						$m->print("<p>Tiebreak $tiebreak_id: $tag created</p>"),
					}
				}

				if ($tb_ref->{"settings"}) { 
					foreach my $setting_id (keys %{$tb_ref->{"settings"}}) { 

						my $tag = $tb_ref->{"settings"}{$setting_id}{"tag"};

						my $setting = Tab::TiebreakSetSetting->create({
							tag          => $tb_ref->{"settings"}{$setting_id}{"tag"},
							value        => $tb_ref->{"settings"}{$setting_id}{"value"},
							tiebreak_set => $tb_set->id
						});

						$m->print("<p>Setting $setting_id: $tag created</p>");

					}
				}

				unless ($tb_set->id == $id) { 

					my $setting = Tab::EventSetting->retrieve($setting_id);
					$setting->value($tb_set->id);
					$setting->update;

					$m->print("<p>Updated event setting</p>");

				}

			}

			#my @settings = @{$tb_ref->{"settings"}} if $tb_ref->{"settings"};
			#my @tiebreaks = @{$tb_ref->{"tiebreaks"}} if $tb_ref->{"tiebreaks"};

			$m->flush_buffer();

		}

	}

	$m->abort();


</%init>
