<%args>
	$person
	$perms
	$tourn
	$judge_id => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');


	unless ($judge_id) { 
		$m->print('{ "error": true, "message": "No Judge ID sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($judge) { 
		$m->print('{ "error": true, "message": "No judge found for ID '.$judge_id.'"}');
		$m->abort();
	}

	my $filename = "Judge".$judge->id."Backup-".$judge->first."-".$judge->last;

	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename.json";

	my $cj = $judge->chapter_judge->id if $judge->chapter_judge;
	my $school = $judge->school->id if $judge->school;
	my $jperson = $judge->person->id if $judge->person;

	my %judge_hash = ( 
		first         => $judge->first,
		last          => $judge->last,
		middle        => $judge->middle,
		active        => $judge->active,
		code          => $judge->code,
		category      => $judge->category->id,
		chapter_judge => $cj,
		school        => $school,
		person        => $jperson
	);

	foreach my $rating ($judge->ratings) { 

		my $entered = $rating->entered->epoch if $rating->epoch;

		my %rating = ( 
			type          => $rating->type,
			entered       => $entered,
			ordinal       => $rating->ordinal,
			percentile    => $rating->percentile,
			tourn         => int($rating->tourn),
			entry         => int($rating->entry),
			school        => int($rating->school),
			rating_tier   => int($rating->rating_tier),
			rating_subset => int($rating->rating_subset),
			sheet         => int($rating->sheet)
		);

		push @{$judge_hash{"ratings"}}, \%rating;
	}

	foreach my $ballot ($judge->ballots) { 
			
		my $judge_started = $ballot->judge_started->epoch if $ballot->judge_started;
		my $collected = $ballot->collected->epoch if $ballot->collected;

		my %ballot = ( 
			side          => $ballot->side,
			speakerorder  => $ballot->speakerorder,
			seat          => $ballot->seat,
			chair         => $ballot->chair,
			bye           => $ballot->bye,
			forfeit       => $ballot->forfeit,
			seed          => $ballot->seed,
			pullup        => $ballot->pullup,
			tv            => $ballot->tv,
			audit         => $ballot->audit,
			judge_started => $judge_started,
			collected     => $collected,
			collected_by  => $ballot->collected_by,
			entered_by    => int($ballot->entered_by),
			audited_by    => int($ballot->audited_by),
			panel         => int($ballot->panel),
			entry         => int($ballot->entry)
		); 

		foreach my $score ($ballot->scores) { 

			my %score = ( 
				tag      => $score->tag,
				value    => $score->value,
				content  => $score->content,
				topic    => $score->topic,
				speech   => $score->speech,
				position => $score->position,
				student  => int($score->student)
			);

			push @{$ballot{"scores"}}, \%score;
		}

		push @{$judge_hash{"ballots"}}, \%ballot;
	}

	foreach my $strike ($judge->strikes) { 
			
		my $created_at = $strike->created_at->epoch();

		my %strike = (
			type       => $strike->type,
			start      => $strike->start,
			end        => $strike->end,
			registrant => $strike->registrant,
			conflictee => $strike->conflictee,
			tourn      => int($strike->tourn),
			event      => int($strike->event),
			entry      => int($strike->entry),
			school     => int($strike->school),
			region     => int($strike->region),
			district   => int($strike->district),
			timeslot   => int($strike->timeslot),
			shift      => int($strike->shift),
			entered_by => int($strike->entered_by),
			dioregion  => int($strike->dioregion)
		);

		push @{$judge_hash{"strikes"}}, \%strike;
	}

	foreach my $setting ($judge->settings) { 

		my %setting = ( 
			tag        => $setting->tag,
			value      => $setting->value,
			value_date => $setting->value_date,
			value_text => $setting->value_text,
			setting    => int($judge->setting)
		);

		push @{$judge_hash{"settings"}}, \%setting;
	}

	foreach my $jpool_judge (Tab::JPoolJudge->search(judge => $judge->id)) { 

		my %jpj = ( 
			jpool => int($jpool_judge->jpool)
		);

		push @{$judge_hash{"jpool_judges"}}, \%jpj;
	}

	$m->print(JSON::encode_json(\%judge_hash));
	$m->abort();

</%init>
