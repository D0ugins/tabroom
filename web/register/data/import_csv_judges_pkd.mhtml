<%args>
	$tourn
	$person
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $debate_jpool;
	my $speech_jpool;
	my $worlds_jpool;

	my $debate_category;
	my $speech_category;
	my $worlds_category;

	foreach my $category ($tourn->categories) { 

		my $djp = $category->jpools(name => "Debate")->first;
		my $sjp = $category->jpools(name => "Speech")->first;
		my $bjp = $category->jpools(name => "BP")->first;

		$debate_jpool = $djp if $djp;
		$speech_jpool = $sjp if $sjp;
		$worlds_jpool = $bjp if $bjp;

		$debate_category = $category if $djp;
		$speech_category = $category if $sjp;
		$worlds_category = $category if $bjp;
	}

	my $now = DateTime->now( time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @text_handles = $r->upload; 
	my $text_file = $req->upload($text_handles[0]);
	my $io = $text_file->io;

	my @judges;

	# Fix line breaks
	my @lines = (<$io>);

    foreach (@lines) { 
        $_ =~ s/[\r]+/\n/g;
        $_ =~ s/[\r\n]+/\n/g;
        $_ =~ s/[\n]+/\n/g;
        push @judges, split (/\n/, $_);
    }   

	my $skipped;

	my %schools_by_name = map {$_->name => $_} $tourn->schools;

	my $debate_counter;
	my $speech_counter;
	my $worlds_counter;

	GROUP:
	foreach my $judge (@judges) { 

		my ($school_name, $name, $debate, $speech, $worlds) = split(/,/,$judge);

		foreach ($school_name, $name, $debate, $speech, $worlds) {
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
			$_ =~ s/^'//;
			$_ =~ s/'$//g;
		}

		next if $school_name eq "School Name";
		$school_name = "Hired" unless $school_name;

		next unless $name;

		my @names = split(/\ /, $name);
		my $first = shift @names;
		my $last = pop @names if @names;
		my $middle = join(' ', @names) if @names;

		my $school;
		my $chapter_judge;
		my $chapter;

		unless ($school_name eq "Hired") { 

			$school = $schools_by_name{$school_name};
			$chapter = $school->chapter if $school;

			unless ($school) { 

				foreach my $circuit ($tourn->circuits) { 

					my @chapters = $m->comp(
						"/funclib/circuit_chapters.mas", 
							circuit => $circuit, 
							name => $school_name
						);

					$chapter = shift @chapters;
					last if $chapter;
				}

				unless ($chapter) { 

					$chapter = Tab::Chapter->create({
						name    => $school_name,
						country => $tourn->country
					});

					foreach my $circuit ($tourn->circuits) { 
						Tab::ChapterCircuit->create({
							chapter => $chapter->id,
							circuit => $circuit->id
						});
					}
				}

				my ($school_code, $school_region) = $m->comp(
					"/funclib/chapter_code.mas", 
						tourn   => $tourn,
						chapter => $chapter
				);

				my $now = DateTime->now(time_zone => $tz);

				$school = Tab::School->create({
					tourn      => $tourn->id,
					chapter    => $chapter->id,
					name       => $school_name,
					code       => $school_code
				});

				$school->setting("entered_on", "date", $now);

			}
	
			$chapter_judge = Tab::ChapterJudge->search(
				chapter => $chapter->id,
				first   => $first,
				last    => $last
			)->first;

			$chapter_judge = Tab::ChapterJudge->create({
				chapter => $chapter->id,
				first   => $first,
				last    => $last
			}) unless $chapter_judge;

		}

		my $chapter_judge_id = $chapter_judge->id if $chapter_judge;
		my $school_id = $school->id if $school;

		Tab::debuglog("School $school_id chapterjudge $chapter_judge_id judge $name ie $speech db $debate bp $worlds");


		my $category;

		if ($debate eq "Yes") { 

			$category = $debate_category;

		} elsif ($speech eq "Yes")  {

			$category = $speech_category;

		} elsif ($worlds eq "Yes") { 

			$category = $worlds_category;
		} 

		if ($category) { 

			$judge = Tab::Judge->create({
				first         => $first,
				middle        => $middle,
				last          => $last,
				school        => $school_id,
				chapter_judge => $chapter_judge_id,
				category      => $category->id,
				active        => 1,
				obligation    => 9,
				person        => 0
			});

			if ($debate eq "Yes") { 

				Tab::JPoolJudge->create({
					judge => $judge->id,
					jpool => $debate_jpool->id
				});

				$debate_counter++;

			}
			
			if ($speech eq "Yes")  {

				Tab::JPoolJudge->create({
					judge => $judge->id,
					jpool => $speech_jpool->id
				});

				$speech_counter++;
			} 
			
			if ($worlds eq "Yes") { 

				Tab::JPoolJudge->create({
					judge => $judge->id,
					jpool => $worlds_jpool->id
				});

				$worlds_counter++;

			}

		}

	}	

	my $msg = "$debate_counter debate judges, $speech_counter speech judges, $worlds_counter worlds judges imported";

	$m->redirect("import_csv.mhtml?msg=$msg");

</%init>
