<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$save_csv       => undef
	$delete_someone => undef
</%args>
<%init>

	my %autoquals = %{JSON::decode_json($tourn_settings->{'autoquals'})} if $tourn_settings->{'autoquals'};

	use Text::CSV;
	use Tab::NSDA::Person;
	use Tab::NSDA::MemberSchool;

	my $error_log;

	if ($delete_someone) {
		delete $autoquals{$delete_someone};
	}

	if ($save_csv) {

		# Get the upload and create the file handle.
		my $req = Apache2::Request->new($r);
		my @csv_handles = $r->upload();
		my $csv_file = $req->upload($csv_handles[0]);
		my $io = $csv_file->io;

		my $csv = Text::CSV->new({ sep_char => ',' });


		LINE:
		foreach my $line (<$io>) {

	        next unless $csv->parse($line);
	        my ($event_abbr, $nsda_chapter, @students) = $csv->fields();

			unless ($event_abbr && @students && $nsda_chapter) {
				$error_log .= "Error in line $line: no chapter/event/student found \n";
				next;
			}

			next if $event_abbr eq "WS";

			my $event = $tourn->events(
				abbr => $event_abbr
			)->first;

			unless ($event) {
				$error_log .= "Error in line $line: no event $event_abbr found\n";
				next;
			}

			if (
				$event->setting("min_entry") > 1
				&& (scalar @students < 2)
			) {
				$error_log .= "Error in line $line: insufficient competitors found \n";
				next;
			}

			# First find if there are existing Tabroom records;
			my $chapter;

			my $nsda_school = Tab::NSDA::MemberSchool->retrieve(
				school_id => $nsda_chapter
			);

			unless ($nsda_school) {
				$error_log .= "No NSDA member school found for $nsda_chapter\n";
				next;
			}

			$chapter = Tab::Chapter->search(
				nsda => $nsda_chapter
			)->first;

			unless ($chapter) {
				$chapter = $m->comp(
					"/funclib/chapter_import.mas",
					nome        => 1,
					person      => $person,
					nsda_school => $nsda_school
				);
			}

			unless ($chapter) {
				$error_log .= "No Tabroom school could be created for NSDA chapter $nsda_chapter\n";
				next;
			}

			my @entry_students;

			foreach my $user_id (@students) {
				next unless $user_id;

				my $student = $chapter->students(
					nsda => $user_id
				)->first;

				if ($student){
					push @entry_students, $student;
				} else {
					$error_log .= "No student could be found for ID $user_id in chapter $nsda_chapter\n";
					next LINE;
				}
			}

			@entry_students = sort {$a->id <=> $b->id} @entry_students;

			if ($autoquals{$entry_students[0]->id}) {
				$error_log .= "Error in line $line: Entry ".$entry_students[0]->nsda." is already in $event_abbr \n";
				next;
			}

			$autoquals{$entry_students[0]->id}{"event"} = $event->id;
			$autoquals{$entry_students[0]->id}{"chapter"} = $chapter->id;

			if ($chapter->district) {
				$autoquals{$entry_students[0]->id}{"district"} = $chapter->district->id;
			}

			foreach my $student (@entry_students) {
				push @{$autoquals{$entry_students[0]->id}{"students"}}, $student->id;
			}
		}
	}

	if ($ARGS{"form_post"}) {
		foreach my $student_id (keys %autoquals) {
			if ($ARGS{"deleted_".$student_id}) {
				undef $autoquals{$student_id}
			}
		}
	}

	$tourn->setting("autoquals", "text", JSON::encode_json(\%autoquals))
		if keys %autoquals;

</%init>

	<div class="main">

		<% $error_log ? "errors: ".$error_log : "" %>

		<span class="fourfifths nospace">
			<h4>Autoquals pending or taken:</h4>
		</span>

		<span
			class = "fifth rightalign"
			id    = "autoquals_buttonarea"
		>
		</span>

		<& "/funclib/tablesorter.mas",
			table => "autoquals"
		&>

		<table id="autoquals">

			<thead>

				<tr class="yellowrow semibold">
					<th class="padvert">
						Chapter
					</th>

					<th>
						Event
					</th>

					<th>
						Student
					</th>

					<th>
						Student ID
					</th>

					<th>
						Partner
					</th>

					<th>
						Partner ID
					</th>

					<th>
						Posted?
					</th>

					<th>
						Delete
					</th>
				</tr>

			</thead>

			<tbody>

<%perl>

		my %events = map {$_->id => $_} $tourn->events;

		Tab::Entry->set_sql( already => "
			select entry.*
			from entry, entry_student
			where entry.event = ?
			and entry.id = entry_student.entry
			and entry_student.student = ?
		");

		foreach my $entry (sort keys %autoquals) {

			my %aq = %{$autoquals{$entry}};

			my $event = $events{$aq{'event'}};
			next unless $event;

			my $chapter;
			$chapter = Tab::Chapter->retrieve($aq{"chapter"}) unless $chapter;

			my @students;

			foreach my $studid (@{$aq{"students"}}) {
				push @students, Tab::Student->retrieve($studid);
			}

			next unless $chapter && $event && @students;

			my %this_autoqual = {
				event    => $event->id,
				chapter  => $chapter->id,
				district => $chapter->district->id,
				students => \@students
			};

			Tab::Entry->set_sql(by_aq => "
				select entry.*
				from entry, entry_student, student
				where entry.event = ?
				and entry.id = entry_student.entry
				and entry_student.student = student.id
				and student.nsda = ?
			");

			my $entry = Tab::Entry->search_by_aq($event->id, $students[0]->nsda)->first if $students[0];

</%perl>

			<tr>

				<td>
					<% $event->abbr %>
				</td>

				<td>
					<% $chapter->name %>
				</td>

				<td>
%					if ($students[0]) {
						<% $students[0]->first." ".$students[0]->last." " %>
%					}
				</td>

				<td>
%					if ($students[0]) {
						<% $students[0]->nsda %>
%					}
				</td>

				<td>
%					if ($students[1]) {
						<% $students[1]->first." ".$students[1]->last." " %>
%					}
				</td>

				<td>
%					if ($students[1]) {
						<% $students[1]->nsda %>
%					}
				</td>

				<td class="centeralign">
					<% $entry ? "YES" : "NO" %>
				</td>

				<td class="centeralign">
%					if ($students[0]) {
						<a
							class="fa fa-sm buttonwhite redtext fa-trash"
							href="autoquals.mhtml?delete_someone=<% $students[0]->id %>"
							<& "/funclib/confirm.mas", warn => "Deletes this autoqualifier from registering.  Getting it back is hard.  Please be sure or you will risk Palmer's righteous anger.  He might smite things.  Maybe you." &>
						></a>
%					}
				</td>
			</tr>

%		}

		</tbody>

		</table>

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>Upload autoquals</h4>

			<form
				enctype = "multipart/form-data"
				action  = "autoquals.mhtml"
				method  = "post"
			>
				<p class="smaller">format:  event abbr, chapter id, nsda ID, nsda ID </p>

				<div class="centeralign padvertmore even">

					<div class="uploader centearlign thinner">

						<input
							type     = "file"
							name     = "save_csv"
							style    = "opacity: 0;"
							onchange = "uploaderName('new_autoquals', 'new_autoquals_file');"
							id       = "new_autoquals"
						>
						<span
							id    = "new_autoquals_file"
							class = "filename"
							style = "-webkit-user-select: none;"
						>No file selected</span>

						<span
							class="action"
							style="-webkit-user-select: none;"
						>Choose File</span>

					</div>

				</div>

				<div class="libl rightalign full marvertno">
					<input type="submit" value="Upload">
				</div>

			</form>

		</div>

	</div>

