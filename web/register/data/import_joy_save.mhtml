<%args>
	$tourn
	$tourn_settings
	$person
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload; 
	my $csv_file = $req->upload($csv_handles[0]);
	my $io = $csv_file->io;

	my @lines = <$io>;

	my @all_lines;

	foreach (@lines) { 
		$_ =~ s/[\r]+/\n/g;
		$_ =~ s/[\r\n]+/\n/g;
		$_ =~ s/[\n]+/\n/g;
		push @all_lines, split (/\n/, $_);
	}

	my %event_by_code;

	my @all_events;

	my $master_category;

	foreach my $line (@all_lines) { 

		if (substr($line, 0, 2) eq '$$') {

			my $div_number = $line;
			my $div_name = $line;

			$div_number = substr($div_number, 2, 1);
			$div_name =~ s/^\$+//g;
			$div_name =~ s/^[0-9]+//g;

			my $event = Tab::Event->search( 
				name  => $div_name,
				tourn => $tourn->id
			)->first;

			unless ($event) { 
				$event = Tab::Event->search( 
					abbr  => $div_name,
					tourn => $tourn->id
				)->first;
			}

			if ($tourn_settings->{"nsda_district"}) { 

				$div_name = "Informative"
					if $div_name eq "Informative Speaking";

				$div_name = "Lincoln Douglas"
					if $div_name eq "Lincoln Douglas Debate";

				$div_name = "Policy"
					if $div_name eq "Policy Debate";

				$div_name = "Program Oral Interp"
					if $div_name eq "Programmed Oral Interp";

				$div_name = "Public Forum"
					if $div_name eq "Public Forum Debate";

				$div_name = "US Extemp"
					if $div_name eq "United States Extemp";

				unless ($event) { 
					$event = Tab::Event->search( 
						name  => $div_name,
						tourn => $tourn->id
					)->first;
				}

				unless ($event) { 
					$event = Tab::Event->search( 
						abbr  => $div_name,
						tourn => $tourn->id
					)->first;
				}

			}

			$event_by_code{$div_number} = $event;

			push @all_events, $event;

		} elsif (substr($line, 0, 1) eq 'E') {

			my ($string, $div, @shit) = split(/\;/, $line);

			my $event = Tab::Event->search(
				name => $div,
				tourn => $tourn->id
			)->first;

			$event_by_code{$div} = $event;
			push @all_events, $event;

		}

	}

	my %school_by_code;

	foreach my $line (@all_lines) { 

		my $school_name;
		my $school_number;

		if (substr($line, 0, 1) eq '#') { 

			my @school_names;

			$line =~ s/  / /g;
			($school_number, @school_names) = split (/ /, $line);

			$school_name = join(" ", @school_names);

			$school_number =~ s/[\D_]//g;
			$school_name =~ s/^\s+//;
			$school_name =~ s/\s+$//;

		} elsif (substr($line, 0, 1) eq 'S') { 

			my $eh;

			($eh, $school_number, $school_name) = split (/\;/, $line);

			$school_number =~ s/[\D_]//g;
			$school_name =~ s/^\s+//;
			$school_name =~ s/\s+$//;

		}

		if ($school_name && $school_number) { 

			my $school = Tab::School->search( 
				name => $school_name, 
				tourn => $tourn->id
			)->first;

			my $chapter;
			$chapter = $school->chapter if $school;

			unless ($school) { 

				foreach my $circuit ($tourn->circuits) { 

					my @chapters = $m->comp("/funclib/circuit_chapters.mas", 
						circuit => $circuit,
						name    => $school_name
					);

					$chapter = shift @chapters;
					last if $chapter;
				}

				unless ($chapter) { 

					$chapter = Tab::Chapter->create({
						name    => $school_name,
						state   => $tourn->state,
						country => $tourn->country
					});

					foreach my $circuit ($tourn->circuits) { 
						Tab::ChapterCircuit->create({
							chapter => $chapter->id,
							circuit => $circuit->id
						});
					}
				}

				my ($school_code, $school_region) 
					= $m->comp( "/funclib/chapter_code.mas", 
						tourn   => $tourn,
						chapter => $chapter
					);

				$school = Tab::School->create({
					tourn      => $tourn->id,
					chapter    => $chapter->id,
					name       => $school_name,
					code       => $school_code
				});

				$school->setting("entered_on", "date", $now);
			}

			$school_by_code{$school_number} = $school;

		}

	}

	my %entry_by_code;
	my $num_entries;
	my $trie;

	foreach my $line (@all_lines) { 

		my $divcode;
		my @names;
		my $divnum;
		my $entry_code;
		my $schoolnum;
		my @student_names;
		
		if (substr($line, 0, 1) eq '$') {

			next if (substr($line, 0, 2) eq '$$');

			($divcode, @names) = split(/\;/, $line);
			($divnum, $entry_code) = split(/\*/, $divcode);

			$divnum =~ s/[\D_]//g;
			$entry_code =~ s/[\D_]//g;
		
			foreach my $name (@names) { 
				$name =~ s/^\s+//;
				if ((substr($name, 0, 1) eq "#")) { 
					$schoolnum = $name;
					$schoolnum =~ s/[\D_]//g;
				} else { 
					push @student_names, $name;
				}
			}

		} elsif (substr($line, 0, 1) eq "C") { 

			my ($meh, $kidone, $fuckifiknow, $kidtwo, @shit);

			($meh, $schoolnum, $entry_code, $divnum, $kidone, $fuckifiknow, $kidtwo, @shit) = 
				split(/\;/, $line);

			push @student_names, $kidone if $kidone;	
			push @student_names, $kidtwo if $kidtwo;	

			$trie++;

		}

		$schoolnum =~ s/[\D_]//g;

		if ($divnum && @student_names && $schoolnum) { 

			my $event = $event_by_code{$divnum};
			next unless $event;

			next if ($trie && ($event->type ne "speech"));

			if ($trie) { 
				$master_category = $event->category unless $master_category;
			}

			my $school = $school_by_code{$schoolnum};
			next unless $school;

			my @students;
			my $entry_name;

			foreach my $name (@student_names) { 

				my ($first, $last) = split(/\ /, $name);

				my $student = Tab::Student->search(
					chapter => $school->chapter->id,
					first   => $first,
					last    => $last,
					retired => 0
				)->first;

				unless ($student) { 
					$student = Tab::Student->create({
						chapter   => $school->chapter->id,
						first     => $first,
						last      => $last,
						grad_year => ($now->year + 1)
					});
				}

				push @students, $student;

				if (scalar @student_names > 1) { 
					$entry_name .= " & " if $entry_name;
					$entry_name .= $last;
				} else { 
					$entry_name = $first." ".$last;
				}

			}

			next if Tab::Entry->search( 
				event       => $event->id,
				name        => $entry_name,
				school      => $school->id,
				unconfirmed => 0
			);

			$num_entries++;

			my $entry = Tab::Entry->create({
				school      => $school->id,
				event       => $event->id,
				tourn       => $tourn->id,
				name        => $entry_name,
				dropped     => 0,
				dq          => 0,
				waitlist    => 0,
			});

			$entry->setting("jot_id", $entry_code);

			foreach my $student (@students) { 

				unless (Tab::EntryStudent->search( 
					entry   => $entry->id,
					student => $student->id
				)->first) {

					Tab::EntryStudent->create({
						entry   => $entry->id,
						student => $student->id
					});

				}

			}

		}

	}

	foreach my $event (@all_events) { 
		next unless $event && $event->id;
		$m->comp("/register/data/entry_recode_save.mhtml", 	
			event_id => $event->id,
			sort_by  => "Name",
			return   => 1
		);
	}

	my $num_judges;
	
	foreach my $line (@all_lines) { 

		my $judgecode;
		my $name;
		my $schoolnum;
		my $note;
		my $obligation;
		my $oblsecond;
		my $division_nums;

		my $rounds;
		my $event;
		my $category;
		
		if (substr($line, 0, 1) eq '%') {

			my @notes;

			($judgecode, $name, $schoolnum, $division_nums, $obligation, $oblsecond, @notes ) 
				= split(/\;/, $line);

			$schoolnum =~ s/[\D_]//g;
			$note = join (';', @notes);

			$judgecode =~ s/[\D_]//g;

			if (substr($oblsecond, 0, 1) ne '@') { 
				$note = $oblsecond."; ".$note;
				undef $oblsecond;
			}

			$rounds = $oblsecond if $oblsecond && $obligation eq '*ALL,*Y';

			unless ($rounds) { 
				$rounds = "9";
				$rounds = "0" if $obligation ne '*ALL,*Y';
			}

			$rounds =~ s/[\D_]//g;

			my @division_codes = split (/\$/, $division_nums);
			my $div_code  = $division_codes[1];

			$div_code =~ s/[\D_]//g;

			$event = $event_by_code{$div_code};
			next unless $event;

			$category = $event->category;

		} elsif (substr($line, 0, 1) eq 'J') {

			my @notes;

			my $meh;
			my $a;
			my $b;
			my $c;
			my $d;
			my $e;
			my $f;
			my $g;
			my $h;

			($meh, $schoolnum, $name, $a, $b, $c, $d, $e, $f, $judgecode, $g, $h, @notes) 
				= split(/\;/, $line);

			$category = $master_category;
			$rounds = 99;

			$note = join (';', @notes);

		}

		next unless $name;

		my $school = $school_by_code{$schoolnum};
		my $hire;
		$hire++ unless $school;

		my ($last, $first) = split(/\,/, $name);
		$last =~ s/^\s+//;
		$last =~ s/\s+$//;
		$first =~ s/^\s+//;
		$first =~ s/\s+$//;

		my $chapter_judge;

		if ($school && $school->chapter) { 

			$chapter_judge = Tab::ChapterJudge->search(
				chapter => $school->chapter->id,
				first   => $first,
				last    => $last,
				retired => 0
			)->first;

			unless ($chapter_judge) { 
				$chapter_judge = Tab::ChapterJudge->create({
					chapter => $school->chapter->id,
					first   => $first,
					last    => $last
				});
			}
		}
		
		my $code;

		$code = $m->comp("/funclib/category_code.mas", 
			category => $category 
		) 

		unless $category->setting("no_codes");

		if ($school) {

			if ($master_category) { 

				next if Tab::Judge->search( 
					first    => $first,
					last     => $last,
					school   => $school->id
				);

			} else { 
		
				next if Tab::Judge->search( 
					category => $category->id,
					first    => $first,
					last     => $last,
					school   => $school->id
				);

			}

			my $judge = Tab::Judge->create({
				category   => $category->id,
				school     => $school->id,
				code       => $code,
				tourn      => $tourn->id,
				first      => $first,
				last       => $last,
				active     => 1,
				obligation => $rounds,
				hired      => 0,
			});

			$judge->setting("jot_id", $judgecode);
			$judge->setting("notes", $note);

			$judge->chapter_judge($chapter_judge->id) 
				if $chapter_judge;

			$judge->update;

		} else { 

			if ($trie) { 

				next if Tab::Judge->search( 
					first    => $first,
					last     => $last,
					school   => 0
				);

			} else { 

				next if Tab::Judge->search( 
					category => $category->id,
					first    => $first,
					last     => $last,
					school   => 0
				);

			}

			my $judge = Tab::Judge->create({
				category   => $category->id,
				tourn      => $tourn->id,
				first      => $first,
				last       => $last,
				active     => 1,
				school     => 0,
				code       => $code,
				hired      => $rounds,
				obligation => 0,
			});

			$judge->setting("jot_id", $judgecode);
			$judge->setting("notes", $note);

		}

		$num_judges++;

	}

	my $msg = $num_entries ." entries and $num_judges judges imported.";
	$m->redirect("index.mhtml?msg=$msg");

</%init>
