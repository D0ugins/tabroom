<%args>
	$tourn
</%args>
<%init>

	if (
		$r->hostname ne "testing.tabroom.com"
		&& $r->hostname ne "local.tabroom.com"
	) {
		$m->comp("/funclib/abort.mas",
			message => "This function can only be run on the testing server or local development servers."
		);
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select school.name, school.state
		from school
		order by rand()
		limit 100
	");

	my $student_sth = $dbh->prepare("
		select student.first, student.middle, student.last, student.grad_year
		from student
		where student.first is not null
		and student.last is not null
		order by rand()
		limit 500
	");

	my $judge_sth = $dbh->prepare("
		select judge.first, judge.middle, judge.last
		from judge
		where judge.first is not null
		and judge.last is not null
		order by rand()
		limit 500
	");

	my @schools;
	my @students;
	my @judges;

	foreach my $school ($tourn->schools) {

		unless (@schools) {
			$sth->execute();
			@schools = $sth->fetchall();
		}

		my $ref = shift @schools;
		my ($name, $state) = @{$ref};

		$school->code("");
		$school->name($name);
		$school->state($state);
		$school->update();

		my $chapter = $school->chapter;
		$chapter->name($name);
		$chapter->state($state);
		$chapter->update();

		foreach my $student ($m->comp("/funclib/school_students.mas", school => $school, all => 1)) {

			unless (@students) {
				$student_sth->execute();
				@students = $student_sth->fetchall();
			}

			my $ref = shift @students;
			my ($first, $middle, $last, $grad_year)  = @{$ref};

			$student->first($first);
			$student->middle($middle);
			$student->last($last);
			$student->grad_year($grad_year);
			$student->person(0);
			$student->update();
		}
	}

	foreach my $category ($tourn->categories()) {

		foreach my $judge ($category->judges()) {

			unless (@judges) {
				$judge_sth->execute();
				@judges = $judge_sth->fetchall();
			}

			my $ref = shift @judges;
			my ($first, $middle, $last) = @{$ref};

			$judge->first($first);
			$judge->middle($middle);
			$judge->last($last);
			$judge->person(0);
			$judge->chapter_judge(0);
			$judge->update();
		}

		my $delsth = $dbh->prepare("
			delete js.*
			from judge_setting js, judge
			where judge.category = ?
			and judge.id = js.judge
			and js.tag in ('email', 'phone')
		");

		$delsth->execute();

		foreach my $event ($category->events) {

			foreach my $entry ($event->entries) {
				$entry->name($m->comp(
					"/funclib/entry_name.mas",
					entry => $entry
				));
				$entry->code($m->comp(
					"/funclib/entry_code.mas",
					entry => $entry
				));
				$entry->update();
			}
		}
	}

	my $msg = "Tournament fuzzed";
	$m->redirect("index.mhtml?msg=$msg");

</%init>
