<%args>
	$tourn
	$tourn_settings
	$person
</%args>
<%init>

	my $now = DateTime->now();

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);

	my @json_handles = $r->upload; 
	my $json_file = $req->upload($json_handles[0]);
	my $io = $json_file->io;

	my $json = <$io>;

	my $judge_ref = JSON::decode_json($json);

	my $already = Tab::Judge->retrieve($judge_ref->{"id"}); 

	if (
		$already 
		&& $already->first eq $judge_ref->{'first'} 
		&& $already->last eq $judge_ref->{'last'} 
		&& $already->category->tourn == $tourn
	) { 
		$m->comp("/funclib/abort.mas", warning => "That judge already exists");
	}

	my $category = Tab::Category->retrieve($judge_ref->{"category"}); 

	unless ($category && $category->tourn == $tourn) { 
		$m->comp("/funclib/abort.mas", 
			warning => "Judge category does not correspond to this tournament"
		);
	}

	my $judge = Tab::Judge->create({ 
		first         => $judge_ref->{"first"},
		middle        => $judge_ref->{"middle"},
		last          => $judge_ref->{"last"},
        active        => $judge_ref->{"active"},
        code          => $judge_ref->{"code"},
        category      => $judge_ref->{"category"},
        chapter_judge => $judge_ref->{"chapter_judge"},
        school        => $judge_ref->{"school"},
        person        => $judge_ref->{"person"}
	});

	foreach my $rating_ref (@{$judge_ref->{"ratings"}}) { 

		my $entered = eval { 
			return DateTime->from_epoch($rating_ref->{"entered"});
		};

		my $rating = Tab::Rating->create({
			judge         => $judge,
            type          => $rating_ref->{"type"},
            entered       => $entered,
            ordinal       => $rating_ref->{"ordinal"},
            percentile    => $rating_ref->{"percentile"},
            tourn         => $rating_ref->{"tourn"},
            entry         => $rating_ref->{"entry"},
            school        => $rating_ref->{"school"},
            rating_tier   => $rating_ref->{"rating_tier"},
            rating_subset => $rating_ref->{"rating_subset"},
            sheet         => $rating_ref->{"sheet"}
		});

	}

	foreach my $ballot_ref (@{$judge_ref->{"ballots"}}) { 

		my $collected = eval { 
			return DateTime->from_epoch($ballot_ref->{"collected"});
		};

		my $judge_started = eval { 
			return DateTime->from_epoch($ballot_ref->{"judge_started"});
		};

		my $ballot = Tab::Ballot->create({
			judge         => $judge,
            side          => $ballot_ref->{"side"},
            speakerorder  => $ballot_ref->{"speakerorder"},
            seat          => $ballot_ref->{"seat"},
            chair         => $ballot_ref->{"chair"},
            bye           => $ballot_ref->{"bye"},
            forfeit       => $ballot_ref->{"forfeit"},
            seed          => $ballot_ref->{"seed"},
            pullup        => $ballot_ref->{"pullup"},
            tv            => $ballot_ref->{"tv"},
            audit         => $ballot_ref->{"audit"},
            judge_started => $judge_started,
            collected     => $collected,
            collected_by  => $ballot_ref->{"collected_by"},
            entered_by    => $ballot_ref->{"entered_by"},
            audited_by    => $ballot_ref->{"audited_by"},
            panel         => $ballot_ref->{"panel"},
            entry         => $ballot_ref->{"entry"}
		});

		foreach my $score_ref (@{$ballot_ref->{"scores"}} ) { 

			my $score = Tab::Score->create({ 
				ballot   => $ballot->id,
                tag      => $score_ref->{"tag"},
                value    => $score_ref->{"value"},
                content  => $score_ref->{"content"},
                topic    => $score_ref->{"topic"},
                speech   => $score_ref->{"speech"},
                position => $score_ref->{"position"},
                student  => $score_ref->{"student"}
			});

		}

	}

	foreach my $strike_ref (@{$judge_ref->{"strikes"}}) { 

		my $created_at = eval { 
			return DateTime->from_epoch($strike_ref->{"created_at"});
		};

		my $strike = Tab::Strike->create({
			judge      => $judge,
            type       => $strike_ref->{"type"},
            start      => $strike_ref->{"start"},
            end        => $strike_ref->{"end"},
            registrant => $strike_ref->{"registrant"},
            conflictee => $strike_ref->{"conflictee"},
            tourn      => $strike_ref->{"tourn"},
            event      => $strike_ref->{"event"},
            entry      => $strike_ref->{"entry"},
            school     => $strike_ref->{"school"},
            region     => $strike_ref->{"region"},
            district   => $strike_ref->{"district"},
            timeslot   => $strike_ref->{"timeslot"},
            shift      => $strike_ref->{"shift"},
            entered_by => $strike_ref->{"entered_by"},
            dioregion  => $strike_ref->{"dioregion"}
		});
	}

	foreach my $setting_ref (@{$judge_ref->{"settings"}}) { 
		my $setting = Tab::JudgeSetting->create({
			judge      => $judge,
            tag        => $setting_ref->{"tag"},
            value      => $setting_ref->{"value"},
            value_date => $setting_ref->{"value_date"},
            value_text => $setting_ref->{"value_text"},
            setting    => $setting_ref->{"setting"}
		});
	}	

	foreach my $jpool_ref (@{$judge_ref->{"jpool_judges"}}) { 
		my $jpj = Tab::JPoolJudge->create({
			jpool => $jpool_ref->{"jpool"},
			judge => $judge
		});
	}

	my $msg = "Judge restored";
	$m->redirect("/register/judge/edit.mhtml?judge_id=".$judge->id);
	
</%init>
