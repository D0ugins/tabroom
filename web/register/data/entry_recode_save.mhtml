<%args>
	$event_id  => undef
	$sort_by   => "Randomly"
	$return    => undef
	$codestart => undef
</%args>
<%init>

	use List::Util 'shuffle';

	$m->abort unless $sort_by;
	$m->abort unless $event_id;

	my $event = Tab::Event->retrieve($event_id);
	my $tourn = $event->tourn;

	$event->setting('code_start', $codestart) if $codestart;

	Tab::Entry->set_sql( 
		code_clear => 
		"update entry set code = 0 where event = ?"
	);

	Tab::Entry->sql_code_clear->execute($event->id);

	my @entries = $event->entries;
	@entries = shuffle @entries if $sort_by eq "Randomly";

	if ($sort_by eq "RandomSchool") { 

		my @schools = $m->comp("/funclib/event_schools.mas", event => $event);

		my %school_rand = map {$_->id => rand(1000)} @schools;

		@entries = shuffle @entries;

		@entries = 
			sort {$school_rand{$a->school->id} <=> $school_rand{$b->school->id}} 
			@entries;

	}

	@entries = sort {$a->name cmp $b->name} @entries 
		if $sort_by eq "Name";

	@entries = sort {$a->school->name cmp $b->school->name} @entries 
		if $sort_by eq "School";

	@entries = sort {$a->id <=> $b->id} @entries 
		if $sort_by eq "Register";

	if ($sort_by eq "Diocese" || $sort_by eq "Region") { 

		@entries = 
			sort {$a->school->name cmp $b->school->name} 
			@entries;

		@entries = 
			sort {$a->school->region->code cmp $b->school->region->code} 
			@entries;

		@entries = 
			sort {length($a->school->region->code) <=> length($b->school->region->code)} 
			@entries;

	}

	my $setting = $event->setting("code_style");

	if ($setting eq "numbers" 
		|| $setting eq "school_number" 
		|| $setting eq "nsda_nats"
	) { 

		my %taken_codes = map {$_->code => 1} 
			$m->comp("/funclib/tourn_entries.mas",	
				tourn => $tourn
			);

		my %taken_judge_codes = map {$_->code => 1} 
			$m->comp("/funclib/tourn_judges.mas",
				tourn => $tourn
			);

		my %school_code = map {$_->id => $_->code} $tourn->schools 
			if $setting eq "school_number";

		if ($setting eq "school_number") { 	
			foreach my $key (keys %taken_codes, keys %taken_judge_codes) { 
				$key =~ s/\D//g;
				$taken_codes{$key}++;
			}
		}

		if ($setting eq "nsda_nats") { 
	
			my %codes = $m->comp("/funclib/nsda_codes.mas") 
				if $setting eq "nsda_nats";

			my %event_codes = map {$_->id => $_->setting("nsda_event_code")} $tourn->events;

			foreach my $entry (@entries) { 

				my $prefix = $codes{$entry->school->district->id};
				$prefix .= " ".$event_codes{$entry->event->id}." ";

				my $suffix = $codestart;
				$suffix = "0".$suffix if length($suffix) < 2;

				while ( $taken_codes{$prefix.$suffix} 
					|| $suffix =~ m/666$/ 
					|| $suffix =~ m/420$/ 
					|| $suffix == m/69$/
				) { 
					$suffix++;
					$suffix = "0".$suffix if length($suffix) < 2;
				}


				$taken_codes{$prefix.$suffix}++;

				$entry->code($prefix.$suffix);
				$entry->update;

			}

		} else { 

			my $code = $codestart;

			foreach my $entry (@entries) { 

				while ( $taken_codes{$code} 
					|| $taken_judge_codes{$code} 
					|| $code =~ m/666$/ 
					|| $code =~ m/420$/ 
					|| $code == m/69$/
				) { 
					$code++;
				}

				$entry->code($school_code{$entry->school->id}." ".$code) if $setting eq "school_number";
				$entry->code($code) unless $setting eq "school_number";;
				$entry->update;
				$code++;
			}

		}

	} else { 

		foreach my $entry (@entries) { 
			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
			$entry->update;
		}

	}

	Tab::debuglog("I am here and return is $return");
	return if $return;


	my $msg = "Codes for ".$event->name." reshuffled";
	$m->redirect("/register/data/entry_recode.mhtml?msg=$msg");

</%init>
