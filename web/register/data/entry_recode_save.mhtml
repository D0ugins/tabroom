<%args>
	$event_id  => undef
	$sort_by   => "Randomly"
	$return    => undef
	$codestart => undef
	$tourn
	$tourn_settings
</%args>
<%init>

	use List::Util 'shuffle';

	$m->abort unless $sort_by;
	$m->abort unless $event_id;

	my $event = Tab::Event->retrieve($event_id);

	if ($tourn_settings->{"nsda_nats"}) { 

		Tab::Entry->columns(TEMP => "regioncode");
		Tab::Entry->columns(TEMP => "eventcode");

		Tab::Entry->set_sql( nats_codes => "
			select entry.*, 
				region.code as regioncode, 
				eventletter.value as eventcode

			from (entry, school)

			left join region on school.region = region.id
			left join event_setting eventletter
				on eventletter.event = entry.event
				and eventletter.tag = 'nsda_event_code'

			where entry.school = school.id
			and entry.event = ? 
			and entry.unconfirmed = 0
		");

		my @entries = Tab::Entry->search_nats_codes($event->id);

		my $number = 100;

		foreach my $entry (shuffle @entries) { 
			$entry->code($entry->eventcode.$number);
			$entry->update();
			$number++;
			$number++ if $number == 69;
			$number++ if $number == 169;
			$number++ if $number == 269;
			$number++ if $number == 420;
			$number++ if $number == 666;
		}

		return if $return;
		my $msg = "Codes for ".$event->name." reshuffled";
		$m->redirect("/register/data/entry_recode.mhtml?msg=$msg");
	}

	$event->setting('code_start', $codestart) if $codestart;

	my $setting = $event->setting("code_style");

	Tab::Entry->set_sql( 
		code_clear => 
		"update entry set code = 0 where event = ?"
	);

	Tab::Entry->sql_code_clear->execute($event->id)
		unless $setting eq "prepend_school";

	my @entries = $event->entries( unconfirmed => 0);

	@entries = shuffle @entries if $sort_by eq "Randomly";

	if ($sort_by eq "RandomSchool") { 

		my @schools = $m->comp("/funclib/event_schools.mas", event => $event);

		my %school_rand = map {$_->id => rand(1000)} @schools;

		@entries = shuffle @entries;

		@entries = 
			sort {$school_rand{$a->school->id} <=> $school_rand{$b->school->id}} 
			@entries;

	}

	@entries = sort {$a->name cmp $b->name} @entries 
		if $sort_by eq "Name";

	@entries = sort {$a->school->name cmp $b->school->name} @entries 
		if $sort_by eq "School";

	@entries = sort {$a->id <=> $b->id} @entries 
		if $sort_by eq "Register";

	if ($sort_by eq "Diocese" || $sort_by eq "Region") { 

		@entries = 
			sort {$a->school->name cmp $b->school->name} 
			@entries;

		@entries = 
			sort {$a->school->region->code cmp $b->school->region->code} 
			@entries;

		@entries = 
			sort {length($a->school->region->code) <=> length($b->school->region->code)} 
			@entries;

	}

	if ($setting eq "numbers" 
		|| $setting eq "school_number" 
		|| $setting eq "nsda_nats"
	) { 

		my %taken_codes = map {$_->code => 1} 
			$m->comp("/funclib/tourn_entries.mas",	
				tourn => $tourn
			);

		my %taken_judge_codes = map {$_->code => 1} 
			$m->comp("/funclib/tourn_judges.mas",
				tourn => $tourn
			);

		my %school_code = map {$_->id => $_->code} $tourn->schools 
			if $setting eq "school_number";

		if ($setting eq "school_number") { 	
			foreach my $key (keys %taken_codes, keys %taken_judge_codes) { 
				$key =~ s/\D//g;
				$taken_codes{$key}++;
			}
		}

		if ($setting eq "nsda_nats") { 
	
			my %codes = $m->comp("/funclib/nsda_codes.mas") 
				if $setting eq "nsda_nats";

			my %event_codes = map {$_->id => $_->setting("nsda_event_code")} $tourn->events;

			foreach my $entry (@entries) { 

				my $prefix = $codes{$entry->school->district->id};
				$prefix .= " ".$event_codes{$entry->event->id}." ";

				my $suffix = $codestart;
				$suffix = "0".$suffix if length($suffix) < 2;

				while ( $taken_codes{$prefix.$suffix} 
					|| $suffix =~ m/666$/ 
					|| $suffix =~ m/420$/ 
					|| $suffix == m/69$/
				) { 
					$suffix++;
					$suffix = "0".$suffix if length($suffix) < 2;
				}

				$taken_codes{$prefix.$suffix}++;
				$entry->code($prefix.$suffix);
				$entry->update;

			}

		} else { 

			my $code = $codestart;

			foreach my $entry (@entries) { 

				while ( $taken_codes{$code} 
					|| $taken_judge_codes{$code} 
					|| $code =~ m/666$/ 
					|| $code =~ m/420$/ 
					|| $code == m/69$/
				) { 
					$code++;
				}

				$entry->code($school_code{$entry->school->id}." ".$code) if $setting eq "school_number";
				$entry->code($code) unless $setting eq "school_number";;
				$entry->update;
				$code++;
			}

		}

	} elsif ( $event->setting("usa_wsdc")  ) { 

		my @colors = ("Blue", "White", "Red");

		@entries = sort {$a->school->name cmp $b->school->name} @entries;

		my %school_count;

		foreach my $entry (@entries) { 
			$school_count{$entry->school->id}++;
		}

		my %taken;

		foreach my $entry (@entries) { 

			@colors = shuffle(@colors);

			my $chosen;

			foreach my $color (@colors) {
				next if $taken{$entry->school->id}{$color};
				$chosen = $color;
				last if $chosen;
			}

			if ($school_count{$entry->school->id} < 2) { 
				$entry->code($entry->school->name);
			} else { 
				$entry->code($entry->school->name." ".$chosen);
			}

			$entry->update();
			$taken{$entry->school->id}{$chosen}++;

		}

	} elsif ($setting eq "prepend_school") { 

		foreach my $entry (@entries) { 

			my $school_name = $entry->school->name;
			my $new_code = $school_name." ".$entry->code;
			$entry->code($new_code);
			$entry->update();
		}

	} else { 

		foreach my $entry (@entries) { 
			$entry->code($m->comp(
				"/funclib/entry_code.mas", 
				entry => $entry
			));
			$entry->update();
		}

	}

	return if $return;
	my $msg = "Codes for ".$event->name." reshuffled";
	$m->redirect("/register/data/entry_recode.mhtml?msg=$msg");

</%init>
