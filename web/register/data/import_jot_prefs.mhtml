<%args>
	$tourn
	$person
	$category_id => undef
</%args>
<%init>


	my $category = Tab::Category->retrieve($category_id);
	$m->abort unless $category;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload;
	my $csv_file = $req->upload($csv_handles[0]);
	my $io = $csv_file->io;

	my @lines = <$io>;
	my @all_lines;

	foreach (@lines) {
		$_ =~ s/[\r]+/\n/g;
		$_ =~ s/[\r\n]+/\n/g;
		$_ =~ s/[\n]+/\n/g;
		push @all_lines, split (/\n/, $_);
	}

	Tab::JudgeSetting->set_sql(jot_id => "
		select distinct judge_setting.*
		from judge_setting, judge
		where judge.category = ?
		and judge.id = judge_setting.judge
		and judge_setting.tag = 'jot_id'
	");

	my @jot_judge_ids = Tab::JudgeSetting->search_jot_id($category->id);

	my %judges_by_name;

	foreach my $judge ($category->judges()) { 
		my $key = $judge->first." ".$judge->last;
		$key = lc($key);
		$judges_by_name{$key} = $judge;
	}

	my %judges_by_id = map { $_->value => $_->judge->id } @jot_judge_ids;

	my %judges_by_name = $map{$_->first." ".$judge->last => $_} $category->judges();

	Tab::EntrySetting->set_sql("jot_id" => "
		select distinct entry_setting.*
		from entry_setting, entry, event
		where event.category = ?
		and event.id = entry.event
		and entry.id = entry_setting.entry
		and entry_setting.tag = 'jot_id'
	");

	Tab::Entry->set_sql("last_name" => "
		select entry.*
		from entry, entry_student es1, student s1, event, school
		where entry.event = event.id
		and event.category = ? 
		and school.name like ?
		and entry.id = es1.entry
		and es1.student = s1.id
		and s1.last = ? 
	");

	Tab::Entry->set_sql("last_names" => "
		select entry.*
		from entry, entry_student es1, student s1, entry_student es2, student s2, event, school
		where entry.event = event.id
		and event.category = ? 
		and school.name like ?
		and entry.id = es1.entry
		and entry.id = es2.entry
		and es1.student = s1.id
		and s1.last = ? 
		and es2.student = s2.id
		and s2.last = ? 
	");

	my @jot_entry_ids = Tab::EntrySetting->search_jot_id($category->id);
	my %entries_by_id = map {$_->value => $_->entry->id} @jot_entry_ids;

	my %codes_by_id = map {$_->value => $_->entry->code} @jot_entry_ids;
	my %tiers_by_name = map {$_->name => $_->id} $category->rating_tiers;

	my $prefs = $category->setting("prefs");
	my $strikes;

	unless ($prefs && $prefs ne "none") {
		$strikes++ if $category->setting("school_strikes");
		$strikes++ if $category->setting("entry_strikes");
	}

	my $current_entry;
	my $num_entries;

	LINE:
	foreach my $line (@all_lines) {

		next if $line eq "-------------------------------------";

		$line =~ s/\t/ /g;
		$line =~ s/ +/ /g;

		my ($one, $two, $three, @names) = split(/\ /, $line);

		if (substr($two, 0, 1) eq '*') {

			$two =~ s/[\D_]//g;

			my $twolast = pop @names;

			my $nope;
			my $onelast;
			my $sigh;

			while (not defined $nope) { 
				my $screwthis = pop @names;
				($onelast, $sigh) = split(/\//, $screwthis);
				if ($onelast ne $screwthis) { 
					$nope++;
				} elsif (scalar @names < 1) { 
					$nope++;
				}
			}

			$current_entry = $entries_by_id{$two};

			unless ($current_entry) { 
				$current_entry = Tab::Entry->search_last_names($category->id, $three.'%', $onelast, $twolast)->first;
			}

			unless ($current_entry) { 
				$current_entry = Tab::Entry->search_last_name($category->id, $three.'%', $twolast)->first;
			}

			if ($strikes) {

				Tab::Strike->set_sql(wipe_my_strikes => "
					delete from strike
					where entry = ?
					and type = 'entry'
					and registrant = 1
				");

				Tab::Strike->sql_wipe_my_strikes->execute($current_entry);

			} else {

				Tab::Entry->set_sql(wipe_my_prefs => "
					delete from rating
					where entry = ?
					and type = 'entry'
				");

				Tab::Entry->sql_wipe_my_prefs->execute($current_entry);
			}

			$num_entries++;
		}

		next unless $current_entry;
		next unless $one eq "%";

		my $four = shift @names;
		my $five = shift @names;

		my $judge = $judges_by_id{$two};

		unless ($judge) {
			$four =~ s/,//g;
			$judge = $judges_by_name{lc($five." ".$four)};
			$judges_by_id{$two} = $judge;
		}

		next unless $judge;

		$three =~ s/[\D_]//g;

		if ($strikes) {

			next LINE unless $three;

			Tab::Strike->create({
				tourn       => $tourn,
				entry       => $current_entry,
				judge       => $judge,
				type        => "entry",
				registrant  => 1
			});

		} else {

			my $tier = $tiers_by_name{$three};
			next LINE unless $tier;

			Tab::Rating->create({
				tourn       => $tourn,
				entry       => $current_entry,
				judge       => $judge,
				rating_tier => $tier,
				type        => "entry"
			});
		}
	}

	my $msg = $num_entries ." entries had prefs imported.";
	$m->redirect("index.mhtml?msg=$msg");

</%init>
