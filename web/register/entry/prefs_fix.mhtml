<%args> 
	$tourn
	$tourn_settings
	$event_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now( time_zone => $tz );
	my $event = Tab::Event->retrieve($event_id);
	$m->abort() unless $event;

	my $category   = $event->category;
	my @all_judges = $category->judges;
	my $prefs      = $category->setting("prefs");
	my $rounds_per = $category->setting("rounds_per");

	my %tier_by_name = ();

	if ($prefs eq "tiered" || $prefs eq "tiered_round" || $prefs eq "caps") { 
		foreach my $tier ($category->rating_tiers) { 
			$tier_by_name{$tier->name} = $tier->id;
		}
	}

	foreach my $entry ($event->entries(active => 1)) { 

		my $count;
		my $total_rounds;
		my %judges_at_rating = ();
		my $rounds_before = 1;

		my @ratings = $entry->ratings();

		my %ordinal_by_judge = map {$_->judge->id => $_ } @ratings;

		foreach my $rating (@ratings) { 
			push (@{$judges_at_rating{$rating->ordinal}}, $rating->judge );

			if ($rounds_per) { 
				$total_rounds += $rating->judge->obligation;
				$total_rounds += $rating->judge->hired;
			} else { 
				$total_rounds++;
			}
		}

		$total_rounds = scalar @all_judges unless $total_rounds;

		foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {
			
			next unless $ordinal > 0;

			my $rounds_add;
			my $judge_count;
		
			foreach my $judge (@{$judges_at_rating{$ordinal}}) { 

				$judge_count++;
				$count++;

				if ($rounds_per) { 
					$rounds_add += $judge->obligation;
					$rounds_add += $judge->hired;
				} else { 
					$rounds_add++;
				}
			}

			foreach my $judge (@{$judges_at_rating{$ordinal}}) { 
				my $percentile = ($rounds_before / $total_rounds) * 100;
				my $rating = $ordinal_by_judge{$judge->id};

				$rating->percentile($percentile);
				$rating->update; 
			}

			$rounds_before += $rounds_add;

		}
	}

	my $msg = $event->abbr." prefs saved in ".$category->abbr;

	$m->print($msg);
	$m->abort();

</%init>
