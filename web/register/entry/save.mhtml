<%args>
	$tourn
	$tourn_settings 
	$person
	$entry_id     => undef
	$name         => undef
	$code         => undef
	$ada          => undef
	$seed         => undef
	$pairing_seed => undef
	$atlarge      => undef
	$pod          => undef
</%args>
<%init>

	my $err;

	$m->abort unless $entry_id;
	my $entry = Tab::Entry->retrieve($entry_id);

	$m->abort unless $entry;

	if ($name && $name ne $entry->name) { 

		my @existing = Tab::Entry->search( 
			name        => $name,
			tourn       => $tourn->id,
			unconfirmed => 0
		);

		foreach  (@existing) { 
			next if $_->id == $entry_id;
			my $err = "An entry with name $name already exists.  Names must be unique.";
			$m->redirect("edit.mhtml?entry_id=$entry_id&err=$err");
		}
		
		$entry->name($name);
		$entry->update;
	}

	my $event = $entry->event;
	my %event_settings = $event->all_settings;

	my $code_setting = $event_settings{"code_style"};

	$code =~ s/[^\w\s&-\/]//g;

	if ($code && $code ne $entry->code) { 

		my @existing = $m->comp(
			"/funclib/entry_by_code.mas", 
			tourn => $tourn,
			code  => $code
		);

		push @existing, $m->comp(
			"/funclib/judge_by_code.mas", 
			tourn => $tourn,
			code  => $code
		) if $code eq int($code);

		if (@existing) { 

			my $err = "An entry or judge with code $code already exists.  Codes must be unique.  @existing";
			$m->redirect("edit.mhtml?entry_id=$entry_id&err=$err");
	
		} elsif ($code eq "Team Scorpion") { 

			my $err = "That team name was retired in 2008.  Choose another";
			$m->redirect("edit.mhtml?entry_id=$entry_id&err=$err");
			
		} else { 
	
			$entry->code($code);
		}

	}

	$entry->ada($ada);
	$entry->update;

	$entry->setting("registered_seed", $seed);
	$entry->setting("atlarge", $atlarge);

    if ($seed eq "full") { 
        $entry->setting("pairing_seed", 1);
    } elsif ($seed eq "half") { 
        $entry->setting("pairing_seed", 2);
    } elsif ($seed eq "free") { 
        $entry->setting("pairing_seed", 3);
    } elsif ($event_settings{"apda"}) { 
        $entry->setting("pairing_seed", 4);
    } else { 
		$entry->setting("pairing_seed", $pairing_seed);
    }

	$entry->setting("pod", $pod);

	foreach my $field (
		"title",
		"author", 
		"bibliography", 
		"publisher",
		"publish_date",
		"publish_isbn",
		"publish_print_date",
		"publish_url",
	) { 
		my $text = $m->comp(
			"/funclib/save_editor.mas", 
			text => $ARGS{$field}
		);
		$entry->setting($field, $text);

	}

	if ($person->site_admin) { 
		my $jot_id = $ARGS{"jot_id"};
		$jot_id = 0 unless $jot_id;
		$entry->setting("jot_id", $ARGS{"jot_id"});
	}

	if ($tourn_settings->{"nsda_district"} 
		|| $tourn_settings->{"nsda_ms_nats"}
		|| $tourn_settings->{"nsda_nats"}
	) { 

		$entry->setting("publisher", $ARGS{"publisher"});
		$entry->setting("publish_date", $ARGS{"publish_date"});
		$entry->setting("publish_isbn", $ARGS{"publish_isbn"});
		$entry->setting("publish_url", $ARGS{"publish_url"});

		$entry->setting("nsda_house_bloc", $ARGS{"nsda_house_bloc"});

		if ($ARGS{"publish_print_date"}) { 
			my $tz = $tourn->tz;
			$tz = "UTC" unless $tz;
			my $time = "12:00 PM";
			my $published_dt = Tab::dtme($ARGS{"publish_print_date"}, $time, $tz);
			$entry->setting("publish_print_date", "date", $published_dt);
		} else { 
			$entry->setting("publish_print_date", 0);
		}
	}

	if ($tourn_settings->{"nsda_nats"}) {
		$entry->setting("nsda_points_coach", $ARGS{"nsda_points_coach"});
		$entry->setting("nsda_awards_coach_names", $ARGS{"nsda_awards_coach_names"});
	} 

	if ($event_settings{"breakouts"}) { 

		foreach my $breakout (1 .. $event_settings{"breakouts"}) { 

			next if $event_settings{"breakout_".$breakout."_delete"};

			$entry->setting("breakout_".$breakout, $ARGS{"breakout_".$breakout}) 
				if $ARGS{"breakout_".$breakout};

			$entry->setting("breakout_".$breakout, 0) 
				unless $ARGS{"breakout_".$breakout};
		}
	}

	my $msg = "Entry information updated";
	$m->redirect("edit.mhtml?entry_id=$entry_id&msg=$msg");
		
</%init>
