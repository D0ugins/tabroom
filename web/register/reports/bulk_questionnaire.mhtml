<%args>
	$tourn
	$tourn_settings
	$quiz_id     => undef
	$category_id => undef
</%args>
<%init>

	use Switch;

	my $category = Tab::Category->retrieve($category_id);

	my @all_categories = $tourn->categories();

	unless ($category) { 
		$category = $all_categories[0];
	}

	Tab::debuglog("My quiz she is $quiz_id");

	my @quizzes;

	if ($category) { 

		@quizzes = eval { 
			return @{$category->setting('required_quizzes')};
		};

		foreach my $jpool (
			$m->comp("/funclib/category_jpools.mas", 
				category => $category,
				limit => "registrant"
			)
		) { 
			push @quizzes, $jpool->setting("paradigm_quiz") 
				if $jpool->setting("paradigm_quiz");
		}
	}

	my %quiz_by_id;

	foreach my $key (@quizzes) { 
		my $quiz = Tab::Quiz->retrieve($key);
		$quiz_by_id{$quiz->id} = $quiz;
	}

	my $quiz;

	if ( (scalar (keys %quiz_by_id)) == 1 || (not defined $quiz_id)) {
		$quiz_id = $quizzes[0];
	}

	$quiz =  $quiz_by_id{$quiz_id};

	my %form = eval {
		return %{JSON::decode_json($quiz->questions)};
	};

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			judge.id, judge.first, judge.last, 
			school.name school,
			chapter.state state,
			person.email, pq.answers,
			district.name district,
			GROUP_CONCAT(jpool.name) jpools
		from judge
			left join school on judge.school = school.id
			left join chapter on school.chapter = chapter.id
			left join district on school.district = district.id
			left join person on judge.person = person.id
			left join person_quiz pq on pq.person = person.id
				and pq.quiz = ?

			left join jpool_judge jpj on jpj.judge = judge.id
			left join jpool on jpj.jpool = jpool.id AND EXISTS
				( select jps.id from jpool_setting jps where jps.jpool = jpj.jpool and jps.tag = 'registrant')

		where judge.category = ?
		group by judge.id
		order by chapter.state, school.name, judge.last
	");

	my $result_refs;

	if ($quiz && $category) { 
		$sth->execute($quiz, $category);
		$result_refs = $sth->fetchall_hash();
	}

	$sth = $dbh->prepare("
		select
			judge.id,
			diamonds.value,
			diverse.value,
			nomination.value_text
		from judge
			left join person_setting diamonds on diamonds.person = judge.person and diamonds.tag = 'diamonds'
			left join judge_setting diverse on diverse.judge = judge.id and diverse.tag = 'diverse'
			left join judge_setting nomination on nomination.judge = judge.id and nomination.tag = 'nomination'
		where judge.category = ?
	");

	$sth->execute($category);

	my %diverse;
	my %nomination;
	my %diamonds;

	while (
		my (
			$jid, $diamonds, $diverse, $nomination
		) = $sth->fetchrow_array()
	) {

		$diverse{$jid} = $diverse;
		$diamonds{$jid} = $diamonds;
		$nomination{$jid} = eval {
			return JSON::decode_json($nomination);
		};
	}

</%init>

	<div class="blankfull">

	<span class="twenty">
		<a
			href="index.mhtml"
			title="return to reports"
			class="fa fa-lg fa-arrow-left bluetext buttonwhite"
		></a>
	</span>

	<span class="quarter">
		<h4 class="nospace">Paradigm Sheets</h4>
	</span>

	<form action="bulk_questionnaire.mhtml" method="post">

	<span class="threetenths centeralign">
		<select
			name     = "category_id"
			class    = "fixedmed"
			onChange = "this.form.submit();"
		>
%			foreach my $ocat (@all_categories) {
				<option
					value="<% $ocat->id %>"
					<% $ocat == $category ? 'selected' : "" %>
				><% $ocat->name %></option>
%			}
		</select>
	</span>

	<span class="threetenths centeralign">
		<select
			name     = "quiz_id"
			class    = "fixedmed"
			onChange = "this.form.submit();"
		>
%			foreach my $key (@quizzes) {
				<option
					value="<% $key %>"
					<% $key eq $quiz_id ? 'selected' : "" %>
				><% $quiz_by_id{$key}->label %></option>
%			}
		</select>
	</span>

	<span class="marno tenth rightalign"
		id="<% $quiz_id %>_buttonarea"
	></span>

	<& "/funclib/tablesorter.mas", table => $quiz_id &>

<%perl>

	if (keys %form) {

		my @all_keys = sort keys %{$form{"questions"}};

		my @keys;

		foreach my $key (@all_keys) {
			next if $form{"questions"}{$key}{"type"} eq "title";
			push @keys, $key;
		}

		@keys =
			map  { $_->[0] }
			sort { uc($a->[1]) cmp uc($b->[1]) }
			map  { [$_, $_ =~ /(\D+)/] }
			@keys;

		@keys =
			map  { $_->[0] }
			sort { $a->[1] <=> $b->[1] }
			map  { [$_, $_ =~ /(\d+)/] }
			@keys;

</%perl>

		<table id="<% $quiz_id %>">

			<thead>

				<tr class="yellowrow smallish">

					<th>
						First
					</th>

					<th>
						Last
					</th>

					<th>
						School
					</th>

					<th>
						Reg/St
					</th>

					<th>
						Pools
					</th>

					<th class="hiddencsv">
						Emails
					</th>

					<th title="Self Nomination">
						SN
					</th>

					<th title="Diamonds">
						Dia
					</th>

					<th>
						Div
					</th>

%					foreach my $key (@keys) {
						<th title="<% $form{"questions"}{$key}{"question"} %>" >
							<% $key %>
						</th>
%					}

				</tr>

			</thead>

			<tbody>
<%perl>

			foreach my $judge (@{$result_refs}) {

				my %answers = eval {
					return %{JSON::decode_json($judge->{"answers"})};
				};
</%perl>

				<tr class="smallish">

					<td>
						<% $judge->{"first"} %>
					</td>

					<td>
						<% $judge->{"last"} %>
					</td>

					<td>
						<& "/funclib/short_name.mas",
							name => $judge->{"school"},
							printme => 1
						&>
					</td>

					<td class="centeralign">
						<% $judge->{'state'} %>
					</td>

					<td class="smaller">
						<% $judge->{"jpools"} %>
					</td>

					<td class="hiddencsv">
						<% $judge->{"email"} %>
					</td>

					<td class='centeralign'>
						<% $nomination{$judge->{"id"}} && $nomination{$judge->{"id"}}{"self_nominated"} ? "Y" : "" %>
					</td>

					<td class='centeralign'>
						<% $diamonds{$judge->{"id"}} %>
					</td>

					<td class='centeralign'>
						<% $diverse{$judge->{"id"}} ? "Y" : "" %>
					</td>

%					foreach my $key (@keys) {
<%perl>
						$answers{$key} =~ s/Prefer not to answer/Prefer not/g;
						$answers{$key} =~ s/prefer not to answer/Prefer not/g;
						$answers{$key} =~ s/female/F/g;
						$answers{$key} =~ s/Cisgender/Cis/g;
						$answers{$key} =~ s/cisgender/Cis/g;
						$answers{$key} =~ s/Cis gendered/Cis/g;
						$answers{$key} =~ s/Genderfluid/GenFl/g;
						$answers{$key} =~ s/Female/F/g;
						$answers{$key} =~ s/Woman/F/g;
						$answers{$key} =~ s/woman/F/g;
						$answers{$key} =~ s/Male/M/g;
						$answers{$key} =~ s/male/M/g;
						$answers{$key} =~ s/Non-binary/NB/g;
						$answers{$key} =~ s/Non-Binary/NB/g;
						$answers{$key} =~ s/non-binary/NB/g;
						$answers{$key} =~ s/Nonbinary/NB/g;
						$answers{$key} =~ s/nonbinary/NB/g;
						$answers{$key} =~ s/Over 64/64+/g;
</%perl>
						<td class="<% $key == 4 ? 'nowrap rightalign' : "" %>">

%							if ($key == 1 && (not defined $answers{$key})) { 
								<span class="hidden">
									99999
								</span>
%							}
							<% ucfirst($answers{$key}) %>
						</td>
%					}
				</tr>
%			}
		</tbody>
	</table>

%	}

	</div>
