<%args>
	$tourn
	$tourn_settings
	$school_id => undef
</%args>
<%init>

	my %schools;
    my $dbh = Tab::DBI->db_Main();

	my $school;
	$school = Tab::School->retrieve($school_id) if $school_id;

	my $school_limit;
	my @keys = ($tourn->id);

	my $duckie_file = "$Tab::file_root/lib/images/doa.png";

	if ($school > 0) {
		$school_limit = "and school.id = ? ";
		push @keys, $school->id;
	}

	# Missing release forms or scripts etc.
	my $missing_releases = $dbh->prepare("

		select school.id, school.name,
			chapter.nsda, school.state,
			entry.id, entry.name, event.abbr,
			incomplete.value_text

		from (school, entry, event, entry_setting status, entry_setting incomplete, chapter)

		where school.tourn = ?
			$school_limit
			and school.id      = entry.school
			and entry.event    = event.id
			and entry.id       = status.entry
			and entry.active   = 1
			and status.tag     = 'status'
			and status.value   = 'incomplete'
			and school.chapter = chapter.id

			and incomplete.entry = entry.id
			and incomplete.tag = 'incomplete_reasons'
	");

	$missing_releases->execute(@keys);

    while (
        my ($school_id, $school_name,
			$nsda_id, $state,
			$entry_id, $entry_name, $event_abbr,
			$incomplete_text
		) = $missing_releases->fetchrow_array()
    ) {

		$schools{$school_id}{"name"} = $school_name;
		$schools{$school_id}{"state"} = $state;
		$schools{$school_id}{"nsda_id"} = $nsda_id;

		$schools{$school_id}{"bad"}{"entries"}{$entry_id}{"name"} = $entry_name;
		$schools{$school_id}{"bad"}{"entries"}{$entry_id}{"event"} = $event_abbr;
		$schools{$school_id}{"bad"}{"entries"}{$entry_id}{"reason"} = $incomplete_text;
	}

	# Worlds Students missing releases

	my $usa_wsdc_sth = $dbh->prepare("
		select student.id, student.first, student.last, entry.code,
			event.abbr,
			school.id, school.name, school.state, chapter.nsda,
			release_forms.value_text
		from (entry, event, entry_student es, student, event_setting usa, school, chapter)
			left join school_setting release_forms
				on release_forms.school = school.id
				and release_forms.tag = 'release_forms'
			where school.tourn  = ?
			$school_limit
			and school.chapter = student.chapter
			and school.chapter = chapter.id
			and student.id     = es.student
			and entry.active   = 1
			and es.entry       = entry.id
			and entry.event    = usa.event
			and usa.tag        = 'usa_wsdc'
			and entry.event    = event.id
			and event.tourn    = school.tourn
	");

	$usa_wsdc_sth->execute(@keys);

	my %forms;

	while (
		my (
			$student_id, $student_first, $student_last, $entry_code,
			$event_abbr,
			$school_id, $school_name, $school_state, $chapter_nsda,
			$release_json
		) = $usa_wsdc_sth->fetchrow_array()
	) {

		unless ($forms{$school_id}) {
			$forms{$school_id} = eval{
				return JSON::decode_json($release_json);
			};
		}

		next if $forms{$school_id}{$student_id};

		$schools{$school_id}{"name"} = $school_name;
		$schools{$school_id}{"state"} = $school_state;
		$schools{$school_id}{"nsda_id"} = $chapter_nsda;

		$schools{$school_id}{"bad"}{"worlds"}{"S".$student_id}{"name"} = $student_first." ".$student_last;
		$schools{$school_id}{"bad"}{"worlds"}{"S".$student_id}{"event"} = $event_abbr;
		$schools{$school_id}{"bad"}{"worlds"}{"S".$student_id}{"reason"} = "Missing release form";
	}

	$usa_wsdc_sth->finish();

	# Missing coaches
	my $missing_coaches = $dbh->prepare("

		select school.id, school.name,
			chapter.nsda, school.state,
			entry.id, entry.name, event.abbr

		from (school, entry, event, chapter)

		where school.tourn = ?
			$school_limit

			and school.id      = entry.school
			and entry.event    = event.id
			and school.chapter = chapter.id
			and entry.active   = 1

			and not exists (
				select coach.id
				from entry_setting coach
				where coach.entry = entry.id
				and coach.tag = 'coach_points'
			)
	");

	$missing_coaches->execute(@keys);

    while (
        my ($school_id, $school_name,
			$nsda_id, $state,
			$entry_id, $entry_name, $event_abbr
		) = $missing_coaches->fetchrow_array()
    ) {
		$schools{$school_id}{"name"}    = $school_name;
		$schools{$school_id}{"state"}   = $state;
		$schools{$school_id}{"nsda_id"} = $nsda_id;

		$schools{$school_id}{"bad"}{"entries"}{$entry_id}{"name"} = $entry_name;
		$schools{$school_id}{"bad"}{"entries"}{$entry_id}{"event"} = $event_abbr;
		$schools{$school_id}{"bad"}{"entries"}{$entry_id}{"reason"} = "No coach listed for points credit";
	}

	if ($school) {

        $m->comp("/funclib/judgemath/nats_check_judging.mas",
            school         => $school,
            tourn          => $tourn,
            tourn_settings => $tourn_settings
        );

	} else {

		$m->comp("/register/judge/nsda_judge_status.mhtml",
			tourn          => $tourn,
			return         => 1,
			tourn_settings => $tourn_settings
		);
	}

	my $judges_borked = $dbh->prepare("
		select school.id, school.name,
			chapter.nsda, school.state,
			unmet.value_text

		from (school, school_setting unmet, chapter)

		where school.tourn = ?
			$school_limit
			and school.chapter = chapter.id
			and unmet.tag      = 'judging_unmet'
			and unmet.school   = school.id
			group by school.id
	");

	$judges_borked->execute(@keys);

    while (
        my ($school_id, $school_name,
			$nsda_id, $state,
			$reasons
		) = $judges_borked->fetchrow_array()
    ) {
		$schools{$school_id}{"name"}    = $school_name;
		$schools{$school_id}{"state"}   = $state;
		$schools{$school_id}{"nsda_id"} = $nsda_id;

		$reasons =~ s/\n/\n\n/g;
		$reasons =~ s/\n\n\n/\n\n/g;
		$schools{$school_id}{"bad"}{"judging"}  = $reasons
	}

	# Owes money
	my %balances = ();

	if ($school) {

		my @fees = $m->comp("/funclib/school_fees.mas",
			school => $school,
			all    => 1
		);

		my $money_due = shift @fees;

		if ($money_due > 0) {
			$balances{$school->id}{"balance"} = $money_due;
			$schools{$school->id}{"bad"}{"balance"} = $money_due;
		}

	} else {

		%balances = $m->comp(
			"/funclib/balances.mas",
			tourn          => $tourn,
			tourn_settings => $tourn_settings
		);

		foreach my $school_id (keys %balances) {

			next unless $balances{$school_id}{"balance"} > 0;

			$schools{$school_id}{"name"}           = $balances{$school_id}{"name"};
			$schools{$school_id}{"sort_name"}      = $balances{$school_id}{"name"};
			$schools{$school_id}{"state"}          = $balances{$school_id}{"state"};
			$schools{$school_id}{"nsda_id"}        = $balances{$school_id}{"nsda"};
			$schools{$school_id}{"bad"}{"balance"} = $balances{$school_id}{"balance"};
			$schools{$school_id}{"sort_name"} =~ s/^The //g;
		}
	}

	my $filename = "ProblemReports-Nationals";

	if ($school) {
		my $school_name = $school->name;
		$school_name =~ s/[\W_]//g;
		$filename = "ProblemReport-".$school_name."-Nationals";
		$schools{$school->id}{"name"}           = $school->name;
		$schools{$school->id}{"sort_name"}      = $school->name;
		$schools{$school->id}{"state"}          = $school->state;
		$schools{$school->id}{"nsda_id"}        = $school->chapter->nsda;
		$schools{$school->id}{"sort_name"} =~ s/^The //g;

	}

    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
        tourn     => $tourn,
        filename  => $filename,
        head      => 1,
        array     => "1.3",
		linespace => 1.4
    );

    open (TEXOUT, ">>$filepath.tex");

	my @ids =
		sort {$schools{$a}{"sort_name"} cmp $schools{$b}{"sort_name"}}
		keys %schools;

	@ids =
		sort {$schools{$a}{"state"} cmp $schools{$b}{"state"}} @ids;

	push @ids, $school->id if $school && (scalar @ids < 1);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(time_zone => $tz);

	foreach my $school_id (@ids) {

		print TEXOUT "\\noindent\n";
		print TEXOUT "\\large\n";

		print TEXOUT "\\textsb{ ".Tab::texify($schools{$school_id}{"state"})." }";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\textsb{ ".Tab::texify($schools{$school_id}{"name"})." }";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\textsb{ ".Tab::texify($schools{$school_id}{"nsda_id"})." }";

		print TEXOUT "\\vspace{8mm}\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\strut\n";

		my $ive_got_issues = scalar(keys %{$schools{$school_id}{"bad"}});

		if ($ive_got_issues) {

			print TEXOUT "\\hfill \\textbf{\\Huge Please Visit the Solution Tables} \\hfill";

			print TEXOUT "\\bigskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\large\n";
			print TEXOUT "\\raggedright\n";

			print TEXOUT "Your registration is incomplete as listed below.

			You can still fix many issues online without waiting in line.  Upload
			script information and release forms online on {\\underline http://www.tabroom.com}.
			Fees are still payable at {\\underline http://www.speechanddebate.org/account}.

			If you have fixed these issues, go to Tabroom and PRINT UPDATED PROBLEM SHEET
			(yellow button on the top right of your school's Tabroom Nationals registration,
			under the General tab), or the SELF SERVICE table can clear you for registration.";

		} else {

			print TEXOUT "\\hfill \\textbf{\\Huge PROBLEM CLEARED} \\hfill";

			print TEXOUT "\\bigskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\strut\\hfill\n";
			print TEXOUT "\\textsb{\\LARGE Thank you!}\n";
			print TEXOUT "\\hfill\\strut\n";
			print TEXOUT "\\bigskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\strut\\hfill\n";
			print TEXOUT "\\textsb{\\large You have successfully resolved your pending issues.}\n";
			print TEXOUT "\\hfill\\strut\n";
			print TEXOUT "\\bigskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\strut\\hfill\n";
			print TEXOUT "\\textsb{\\large Please print this sheet, and proceed with registration.}\n";
			print TEXOUT "\\hfill\\strut\n";

			print TEXOUT "\\bigskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\strut\\hfill\n";
			print TEXOUT "\\begin{minipage}[c]{4in}\n";
			print TEXOUT "\\includegraphics[width=4in]{".$duckie_file."}\n";
			print TEXOUT "\\end{minipage}\n";
			print TEXOUT "\\hfill\\strut\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\bigskip\n";

		}

		print TEXOUT "\\bigskip\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\textsb{\\emph{ Printed on ".Tab::nicedt($now)." }} \n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";

		my %already;

		foreach my $reason (sort {$a cmp $b} keys %{$schools{$school_id}{"bad"}}) {

			if ($reason eq "balance") {

				print TEXOUT "\\emph{\\small Please check with the FINANCE table to resolve:}\n";
				print TEXOUT "\\newline\n";

				print TEXOUT "\\fbox{\\begin{minipage}{7in}\n";
				print TEXOUT "\\hspace{.25in}\n";
				print TEXOUT "\\parbox{3.5in}{\n";
				print TEXOUT "\\vspace{4mm}\n";
				print TEXOUT "\\textsb{\\large Unpaid Tournament Fees: } \n";
				print TEXOUT "\\vspace{4mm}\n";
				print TEXOUT "}\n";

				print TEXOUT "\\parbox{2.5in}{\n";
				print TEXOUT "\\textsb{";
				print TEXOUT Tab::texify('$'.$schools{$school_id}{"bad"}{"balance"});
				print TEXOUT "}}\n";
				print TEXOUT "\\end{minipage}\n";
				print TEXOUT "\\vspace{.25in}\n";
				print TEXOUT "\\newline\n";
				print TEXOUT "}\n";

			} elsif ($reason eq "judging") {

				print TEXOUT "\\emph{\\small Please check with the JUDGING table to resolve:}\n";
				print TEXOUT "\\newline\n";

				print TEXOUT "\\fbox{\\begin{minipage}{7in}\n";
				print TEXOUT "\\hspace{.25in}\n";
				print TEXOUT "\\parbox{1.5in}{\n";
				print TEXOUT "\\vspace{4mm}\n";
				print TEXOUT "\\textsb{\\large Judging Issues: } \n";
				print TEXOUT "\\vspace{4mm}\n";
				print TEXOUT "}\n";

				print TEXOUT "\\parbox{4.5in}{\\small \n";
				print TEXOUT Tab::texify($schools{$school_id}{"bad"}{"judging"});
				print TEXOUT "}\n";
				print TEXOUT "\\end{minipage}\n";
				print TEXOUT "}\n";

			} else {

				print TEXOUT "\\emph{\\small Please check with the ENTRIES table to resolve:}\n";
				print TEXOUT "\\newline\n";

				print TEXOUT "\\textsb{\\Large ".Tab::texify(ucfirst($reason))." } \n";
				print TEXOUT "\\medskip\n";
				print TEXOUT "\\newline\n";
				print TEXOUT "\\small\n";

				foreach my $entry_id (sort keys %{$schools{$school_id}{"bad"}{$reason}}) {

					my @all_reasons = split("-", $schools{$school_id}{"bad"}{$reason}{$entry_id}{"reason"});
					my @reasons;

					foreach my $reason (@all_reasons) {
						$reason =~ s/^\s+//;
						$reason =~ s/\s+$//;
						if ($already{$reason}) {
						} else {
							push @reasons, $reason unless ($already{$reason});
						}
					}
					next unless @reasons;

					print TEXOUT "\\fbox{\\begin{minipage}{7in}\n";

					print TEXOUT "\\parbox{.5in}{\n";
					print TEXOUT "\\vspace{4mm}\n";
					print TEXOUT Tab::texify($schools{$school_id}{"bad"}{$reason}{$entry_id}{"event"});
					print TEXOUT "\\vspace{4mm}\n";
					print TEXOUT "}\n";

					print TEXOUT "\\parbox{1.5in}{\n";
					print TEXOUT Tab::texify($schools{$school_id}{"bad"}{$reason}{$entry_id}{"name"});
					print TEXOUT "}\n";

					print TEXOUT "\\parbox{4.5in}{\n";

					my $notfirst;
					foreach my $reason (@reasons) {

						if ($notfirst++) {
							print TEXOUT "\\newline\n";
						}
						print TEXOUT Tab::texify($reason);
						if (index($reason, "No release forms uploaded for") != -1) {
							$already{$reason}++;
						}
					}

					print TEXOUT "}\n";
					print TEXOUT "\\end{minipage}\n";
					print TEXOUT "}\n";
				}
			}

			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";
		}

		print TEXOUT "\\newpage\n";
	}

    close (TEXOUT);

    $m->comp(
		"/funclib/printout.mas",
        tourn     => $tourn,
        filename  => $filename,
        tail      => 1
    );

</%init>

