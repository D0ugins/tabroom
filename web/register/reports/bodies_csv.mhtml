<%args>
	$tourn
	$person
	$session
</%args>
<%init>
	use POSIX;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

    my $now = DateTime->now;    
    $now->set_time_zone($tz);

    my $name = $tourn->name;
    $name =~ s/[\W_]//g;

    my $filename = "PersonsInAttendance-$name.csv";
	$m->clear_buffer;
    $r->content_type('application/csv');
    $r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

    my $dbh = Tab::DBI->db_Main(); 
	
	my $student_sth = $dbh->prepare('
		select student.first, student.last, student.nsda,
			event.abbr, 
			chapter.id, chapter.nsda, school.name, school.state,
				chapter.name, chapter.state,
				otherchapter.id,
			region.name, 
			district.name, district.code,
			entry.created_at

		from (student, entry_student, event, entry)

		left join school on entry.school     = school.id
		left join region on region.id        = school.region
		left join chapter on student.chapter = chapter.id
		left join district on district.id    = school.district

		left join chapter otherchapter on school.chapter = chapter.id

		where event.tourn = ?
		and event.id      = entry.event
		and entry.id      = entry_student.entry
		and entry_student.student = student.id
		and entry.active  = 1

		and not exists (
			select supp.id
			from event_setting supp
			where supp.tag = "supp"
			and supp.event = event.id
		)
		and not exists (
			select conn.id
			from event_setting conn
			where conn.tag = "conn"
			and conn.event = event.id
		)
		group by student.id
		order by school.id, entry.timestamp
	');

	$student_sth->execute($tourn->id);

	my %bodies_by_school = ();
	my %chapters;

    while( 
		my (
			$student_first, $student_last, $nsda,
			$event_code, 
			$chapter_id, $chapter_nsda, $school_name, $school_state, 
			$chapter_name, $chapter_state,
				$otherchapter_id,
			$region_name,
			$district_name, $district_code,
			$entry_timestamp
		)
		= $student_sth->fetchrow_array() 
	) { 

		if ($otherchapter_id != $chapter_id) { 
			$school_name  = $chapter_name;
			$school_state = $chapter_state;
		}

		my $person = ({
			first       => $student_first,
			last        => $student_last,
			nsda        => $nsda,
			type        => "student",
			event       => $event_code,
			school_nsda => $chapter_nsda,
			school_id   => $chapter_id,
			school      => $chapter_name,
			state       => $chapter_state,
			region      => $region_name,
			district    => $district_name,
			dcode       => $district_code,
			timestamp   => $entry_timestamp
		});

		push @{$bodies_by_school{$chapter_id}}, $person;

		$chapters{$chapter_id} = $chapter_name;

	}

	my $judge_sth = $dbh->prepare('
		select judge.first, judge.last, nsda.value,
			category.abbr,
			chapter.id, chapter.nsda, school.name, school.state, 
			region.name,
			district.name, district.code,
			judge.timestamp

		from (judge, category)

		left join school on school.id = judge.school
		left join region on region.id = school.region
		left join district on district.id = school.district
		left join chapter on chapter.id = school.chapter
		left join judge_setting nsda 
			on nsda.judge = judge.id and nsda.tag = "nsda"

		where category.tourn = ? 
		and category.id = judge.category
		group by judge.id
		order by school.id 
	');

	$judge_sth->execute($tourn->id);

    while( 
		my (
			$judge_first, $judge_last, $nsda,
			$event_code, 
			$chapter_id, $chapter_nsda, $chapter_name, $chapter_state, 
			$region_name,
			$district_name, $district_code,
			$timestamp
		)
		= $judge_sth->fetchrow_array() 
	) { 

		$chapter_name =~ s/Hired //g;

		my $person = ({
			first       => $judge_first,
			last        => $judge_last,
			nsda       => $nsda,
			type        => "judge",
			event       => $event_code,
			school_nsda => $chapter_nsda,
			school_id   => $chapter_id,
			school      => $chapter_name,
			state       => $chapter_state,
			region      => $region_name,
			district    => $district_name,
			dcode       => $district_code,
			timestamp   => $timestamp
		});

		$chapter_id = 0 unless $chapter_id;
		$chapters{$chapter_id} = $chapter_name;
		push @{$bodies_by_school{$chapter_id}}, $person;
	}

	$m->print("First,Last,Merit,School,SchoolID,State,Type,Event,Region,District,DCode,Timestamp\n");

	foreach my $chapter_id (
		sort {$chapters{$a} cmp $chapters{$b}} 
		keys %bodies_by_school
	) { 

		foreach my $person (@{$bodies_by_school{$chapter_id}}) { 

			$m->print('"'.$person->{"first"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"last"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"nsda"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"school"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"school_nsda"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"state"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"type"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"event"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"region"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"district"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"dcode"}.'"');
			$m->print(',');
			$m->print('"'.$person->{"timestamp"}.'"');
			$m->print("\n");

		}

	}

	$m->flush_buffer();
	$m->abort;

</%init>
