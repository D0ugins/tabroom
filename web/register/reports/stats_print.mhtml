<%args>
	$session
	$tourn
	$tourn_settings
	$person
</%args>
<%init>

	my $now = DateTime->now;
	$now->set_time_zone($tourn->tz);

	my $name = $tourn->name;
	$name =~ s/[\W_]//g;

    my $filename = "TournStats-$name-".$session->id;
	my $filepath = $Tab::file_root."tmp/".$filename;
	`rm -f $filepath.*`;

	$m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1
	);

	open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\noindent\n";
	print TEXOUT "\\hfill \\textsb{\\huge ".Tab::texify($tourn->name)." } \n ";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\strut \\hfill {\\LARGE Tournament Statistics} \n";
	print TEXOUT "\\bigskip\n";
	print TEXOUT "\\newline\n";

    my $dbh = Tab::DBI->db_Main();

    my $entries_sth = $dbh->prepare('
		select entry.id, event.id, event.abbr,
			student.id, school.id, region.id,
			chapter.id, chapter.state

			from (entry, event, entry_student, student, school)

			left join region on region.id = school.region
			left join chapter on chapter.id = school.chapter

		where school.tourn = ?
		and school.id = entry.school
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		and entry.school = school.id
		and entry.active = 1
		and entry.event = event.id
		group by entry_student.id
    ');

	my %counters;
	$entries_sth->execute($tourn->id);

	my $count;

	while(
		my (
			$entry_id, $event_id, $event_abbr,
			$student_id, $school_id, $region_id,
			$chapter_id, $chapter_state
		) = $entries_sth->fetchrow_array() ) {

		$counters{"schools"}{$school_id}++;
		$counters{"regions"}{$region_id}++;
		$counters{"states"}{$chapter_state}++;

		$counters{"students"}{$student_id}++;
		$counters{"entries"}{$entry_id}++;
		$counters{"event_entries"}{$event_abbr}{$entry_id}++;

		$counters{"event_states"}{$event_abbr}{$chapter_state}++;
		$counters{"event_students"}{$event_abbr}{$student_id}++;
		$counters{"event_states"}{$event_abbr}{$chapter_state}++;

		$counters{"people"}{"s".$student_id}++;
		$count++;
	}

    my $judges_sth = $dbh->prepare('
		select judge.id, category.id, category.abbr,
			school.id, region.id,
			chapter.id, chapter.state

			from (judge, category)

			left join school on judge.school = school.id
			left join chapter on chapter.id = school.chapter
			left join region on region.id = school.region

		where category.tourn = ?
		and category.id = judge.category
    ');

	$judges_sth->execute($tourn->id);

	while(
		my (
			$judge_id,
			$category_id, $category_abbr,
			$school_id, $region_id,
			$chapter_id, $chapter_state
		) = $judges_sth->fetchrow_array() ) {

		$counters{"schools"}{$school_id}++ if $school_id;
		$counters{"regions"}{$region_id}++ if $region_id;
		$counters{"states"}{$chapter_state}++ if $chapter_state;

		$counters{"judges"}{$judge_id}++;
		$counters{"category_judges"}{$category_abbr}{$judge_id}++;
		$counters{"people"}{"j".$judge_id}++;
	}

	my $limit = "registrant" if $tourn_settings->{"nsda_nats"};

	Tab::JPool->set_sql(counts => "
       select distinct jpool.*, count(jpool_judge.id) as judgecount
        from (jpool, category)
            left join jpool_judge on jpool_judge.jpool = jpool.id
        where jpool.category = category.id
        and category.tourn = ?
		and exists (
			select jpool_setting.id from jpool_setting
			where jpool_setting.jpool = jpool.id
			and jpool_setting.tag = 'registrant'
		)
        group by jpool.id
        order by category.name, jpool.name
	");

    Tab::JPool->columns(TEMP => "judgecount");
	my @jpools = Tab::JPool->search_counts($tourn->id);

	my $tabular = "\\begin{tabular}{p{2in}p{.75in}}\n";

	print TEXOUT "\\begin{minipage}[t][][b]{3.2in}\n";

	print TEXOUT "\\Large \\textsb{Totals}\n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\normalsize\n";

	print TEXOUT $tabular;

	print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\n";
	print TEXOUT "\\textsb{Type} & \\hfill \\textsb{People} \\\\ \n";

	my @counters = ("schools", "states", "students", "judges", "entries", "people");

	if ($tourn_settings->{"ncfl"} || $tourn_settings->{"regions"}) {
		unshift @counters, "regions";
	}

	my $switch;

	foreach my $key (@counters) {

		print TEXOUT "\\rowcolor[rgb]{.96,.96,.96}\n" if $switch++ % 2;

		print TEXOUT ucfirst($key)." & ";

		print TEXOUT "\\hfill\n";
		if ($counters{$key}) {
			print TEXOUT scalar(keys %{$counters{$key}});
		} else {
			print TEXOUT "0";
		}

		print TEXOUT "\\\\ \n";
	}

	print TEXOUT "\\end{tabular}\n";

	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\Large \\textsb{Judges by Category}\n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\normalsize\n";

	print TEXOUT $tabular;

	print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\n";
	print TEXOUT "\\textsb{Category} & \\hfill \\textsb{Judges} \\\\ \n";

	foreach my $abbr (sort {$a cmp $b} keys %{$counters{"category_judges"}}) {

		print TEXOUT "\\rowcolor[rgb]{.96,.96,.96}\n" if $switch++ % 2;
		print TEXOUT Tab::texify($abbr)." & ";

		print TEXOUT "\\hfill ";
		if ($counters{"category_judges"}{$abbr}) {
			print TEXOUT scalar (keys %{$counters{"category_judges"}{$abbr}});
		} else {
			print TEXOUT "0";
		}

		print TEXOUT "\\\\ \n";
	}

	print TEXOUT "\\end{tabular}\n";

	if (@jpools) {

		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\Large \\textsb{Judges by Pool}\n";
		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\normalsize\n";

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\n";
		print TEXOUT "\\textsb{Pool} & \\hfill \\textsb{Judges} \\\\ \n";

		foreach my $jpool (@jpools) {
			print TEXOUT "\\rowcolor[rgb]{.96,.96,.96}\n" if $switch++ % 2;
			print TEXOUT Tab::texify($jpool->name)." & \\hfill ";
			print TEXOUT $jpool->judgecount;
			print TEXOUT "\\\\ \n";
		}
		print TEXOUT "\\end{tabular}\n";
	}

	print TEXOUT "\\end{minipage}\n";
	print TEXOUT "\\hspace{.5in}\n";
	print TEXOUT "\\begin{minipage}[t][][b]{3.2in}\n";

		print TEXOUT "\\Large \\textsb{Entries by Event}\n";
		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\normalsize\n";

		print TEXOUT "\\begin{tabular}{p{.65in}p{.65in}p{.65in}p{.65in}}\n";
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\n";
		print TEXOUT "\\textsb{Event} & \\hfill \\textsb{Entries} & \\hfill \\textsb{Students} & \\hfill \\textsb{States} \\\\ \n";

		foreach my $abbr (
			sort {$a cmp $b}
			keys %{$counters{"event_entries"}}
		) {

			print TEXOUT "\\rowcolor[rgb]{.96,.96,.96}\n" if $switch++ % 2;
			print TEXOUT Tab::texify($abbr)." & \\hfill ";

			if ($counters{"event_entries"}{$abbr}) {
				print TEXOUT scalar (keys %{$counters{"event_entries"}{$abbr}});
			} else {
				print TEXOUT " 0 ";
			}

			print TEXOUT " & \\hfill ";

			if ($counters{"event_students"}{$abbr}) {
				print TEXOUT scalar (keys %{$counters{"event_students"}{$abbr}});
			} else {
				print TEXOUT " 0 ";
			}

			print TEXOUT " & \\hfill ";

			if ($counters{"event_states"}{$abbr}) {
				print TEXOUT scalar (keys %{$counters{"event_states"}{$abbr}});
			} else {
				print TEXOUT " 0 ";
			}

			print TEXOUT "\\\\ \n";
		}

	print TEXOUT "\\end{tabular}\n";
	print TEXOUT "\\end{minipage}\n";

	$m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>
