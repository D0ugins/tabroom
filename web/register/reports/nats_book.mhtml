<%args>
	$tourn
	$mode => "pdf"
</%args>
<%init>

	our $pagesize = 59;
	our $line = $pagesize - 12;
	our $counter;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select student.id, student.first, student.middle, student.last, event.abbr,
			count(distinct(year(points.startdate))) as count_nats,
			school.id, school.name, school.state, coaches.value_text, contact_name.value,
			(SELECT sum(appear) FROM points.NAT_APPEARANCES WHERE school_id = chapter.nsda)
			as appearances,
			chapter.nsda

		from (student, entry_student, entry, school, event, chapter)

		left join entry_setting coach_nsda
			on coach_nsda.entry = entry.id
			and coach_nsda.tag = 'coach_points'

		left join points.NEW_USERS nsda_person
			on student.nsda = nsda_person.user_id

		left join points.NEW_POINTS points
			on nsda_person.ualt_id = points.student_id
			and points.event_cat_id = 4

		left join school_setting coaches
			on coaches.school = school.id
			and coaches.tag = 'tbook_coaches'

		left join school_setting contact_name
			on contact_name.school = school.id
			and contact_name.tag = 'contact_name'

		where event.tourn       = ?
		and event.tourn         = school.tourn
		and school.chapter      = student.chapter
		and chapter.id          = school.chapter
		and student.id          = entry_student.student
		and entry_student.entry = entry.id
		and entry.active        = 1
		and entry.event         = event.id

		and not exists (
			select supp.id
			from event_setting supp
			where supp.event = event.id
			and supp.tag = 'supp'
		)

		and not exists (
			select conn.id
			from event_setting conn
			where conn.event = event.id
			and conn.tag = 'conn'
		)

		group by student.id
		order by school.state, school.name, student.last, event.id
	");

	$sth->execute($tourn->id);

	my %school;

	while (

		my (
			$student_id, $student_first, $student_middle, $student_last, $student_main,
			$count_nats, $school_id, $school_name, $school_state, $coaches, $contact, $appearances,
			$chapter_nsda
		) = $sth->fetchrow_array()

	) {

		unless ($school{$school_id}) {
			$school{$school_id}{"name"}          = $school_name;
			$school{$school_id}{"state"}         = $school_state;
			$school{$school_id}{"state"}         = "INT" unless $school_state;
			$school{$school_id}{"extra_coaches"} = $coaches;
			$school{$school_id}{"contact"}       = $contact;
			$school{$school_id}{"nsda"}          = $chapter_nsda;
			$school{$school_id}{"appearances"}   = $appearances + 1;
		}

		unless ($school{"students"}{$student_id}) {
			$school{$school_id}{"students"}{$student_id}{"first"}       = $student_first;
			$school{$school_id}{"students"}{$student_id}{"middle"}      = $student_middle;
			$school{$school_id}{"students"}{$student_id}{"last"}        = $student_last;
			$school{$school_id}{"students"}{$student_id}{"main"}        = $student_main;
			$school{$school_id}{"students"}{$student_id}{"count"}       = $count_nats;
		}
	}

	my $coach_sth = $dbh->prepare("

        select entry.school, nsda_person.user_id, nsda_person.ufname, nsda_person.umname, nsda_person.ulname,
			max(degree.diamonds)

        from (points.NEW_USERS nsda_person, tabroom.entry entry,
			tabroom.entry_setting coach, tabroom.event event)

		left join points.NEW_USERS_TO_DEGREES nutd
			on nutd.ualt_id = nsda_person.ualt_id

		left join points.degree_levels degree
			on nutd.degree_id = degree.degree_id

        where event.tourn = ?
		and event.id      = entry.event
        and entry.id      = coach.entry
		and entry.active  = 1
        and coach.tag     = 'coach_points'
        and coach.value   = nsda_person.user_id

        group by nsda_person.user_id

	");

	$coach_sth->execute($tourn->id);

	while (

		my (
			$school_id, $coach_id, $coach_ufname, $coach_umname, $coach_ulname, $diamonds
		) = $coach_sth->fetchrow_array()

	) {
		unless ($school{$school_id}{"coaches"}{$coach_id}) {
			$school{$school_id}{"coaches"}{$coach_id}{"first"}    = $coach_ufname;
			$school{$school_id}{"coaches"}{$coach_id}{"middle"}   = $coach_umname;
			$school{$school_id}{"coaches"}{$coach_id}{"last"}     = $coach_ulname;
			$school{$school_id}{"coaches"}{$coach_id}{"diamonds"} = $diamonds;
		}
	}

	$coach_sth->finish();

	my $name_coach_sth = $dbh->prepare("

        select max(degree.diamonds)

        from (points.NEW_USERS nsda_person, points.NEW_USERS_TO_SCHOOLS nuts)

		left join points.NEW_USERS_TO_DEGREES nutd
			on nutd.ualt_id = nsda_person.ualt_id

		left join points.degree_levels degree
			on nutd.degree_id = degree.degree_id

        where nsda_person.ufname = ?
        and nsda_person.ulname = ?
		and nsda_person.ualt_id = nuts.ualt_id
		and nuts.school_id = ?

		and nuts.enddate = '0000-00-00 00:00:00'
        group by nsda_person.user_id
	");

	my $judge_sth = $dbh->prepare("

        select entry.school, nsda_person.user_id, nsda_person.ufname, nsda_person.umname, nsda_person.ulname,
			max(degree.diamonds)

        from (points.NEW_USERS nsda_person,
			tabroom.entry entry,
			tabroom.judge judge,
			tabroom.judge_setting coach,
			tabroom.event event
		)

		left join points.NEW_USERS_TO_DEGREES nutd
			on nutd.ualt_id = nsda_person.ualt_id

		left join points.degree_levels degree
			on nutd.degree_id = degree.degree_id

        where event.tourn = ?
		and event.id      = entry.event
        and entry.school  = judge.school
		and judge.id      = coach.judge
		and coach.tag     = 'nsda'
		and coach.value   = nsda_person.user_id

        group by nsda_person.user_id

	");

	$judge_sth->execute($tourn->id);

	while (

		my (
			$school_id, $coach_id, $coach_ufname, $coach_umname, $coach_ulname, $diamonds
		) = $judge_sth->fetchrow_array()

	) {

		unless ($school{$school_id}{"coaches"}) {
			unless ($school{$school_id}{"coaches"}{$coach_id}) {
				$school{$school_id}{"coaches"}{$coach_id}{"first"}    = $coach_ufname;
				$school{$school_id}{"coaches"}{$coach_id}{"middle"}   = $coach_umname;
				$school{$school_id}{"coaches"}{$coach_id}{"last"}     = $coach_ulname;
				$school{$school_id}{"coaches"}{$coach_id}{"diamonds"} = $diamonds;
			}
		}
	}

	my $states = $m->comp("/funclib/state_hash.mas");

	my $sort_states = $m->comp("/funclib/state_hash.mas", sort => "yasqueen");

	my @keys =
		sort {$school{$a}{"name"} cmp $school{$b}{"name"}}
		keys %school;

	@keys =
		sort {$states->{$school{$a}{"state"}} cmp $states->{$school{$b}{"state"}}}
		@keys;

	@keys =
		sort {$sort_states->{$school{$a}{"state"}} <=> $sort_states->{$school{$b}{"state"}}}
		@keys;

	my $name = $tourn->name;

	$name =~ s/[\W_]//g;
	my $filename = "TournamentBook-$name";

	if ($mode eq "csv") {
		$m->clear_buffer();
		$r->content_type('application/csv');
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename.csv";
	} else {

	    $m->comp("/funclib/printout.mas",
			tourn     => $tourn,
            filename  => $filename,
			wider     => 1,
			array     => 1.1,
			linespace => .9,
			vmargin   => 1,
			hmargin   => .4,
			no_footer => 1,
            head      => 1,
        );

	    my $filepath = $Tab::file_root."tmp/".$filename;
	   	open (TEXOUT, ">>$filepath.tex");

	}

	print TEXOUT "\\footnotesize\n";

	my $last_state;

	my $linecounter;

	print TEXOUT "\\begin{minipage}[t][][t]{2.35in}\n";
	print TEXOUT "\\raggedright\n";
	print TEXOUT "\\strut\n";
	print TEXOUT "\\vspace{1.3in}\n";
	print TEXOUT "\\newline\n";

	foreach my $school_id (@keys) {

		next unless $school{$school_id}{"students"};
		my $state = $school{$school_id}{"state"};

		$state = "INT" unless $state;

		if ($state ne $last_state) {

			if ($mode eq "csv") {
				$m->print($states->{$state}."\n");
			} else {
				&print_state($states->{$state});
			}

			$last_state = $state;
		}

		if ($mode eq "csv") {
			$m->print(',"'.$school{$school_id}{'name'}.'",');
			$m->print('"'.$school{$school_id}{"appearances"}.'"');
			$m->print("\n");
		} else {
			&print_school($school{$school_id}{'name'}, $school{$school_id}{"appearances"});
		}

		foreach my $student_id ( sort {
				$school{$school_id}{"students"}{$a}{"last"}
				cmp $school{$school_id}{"students"}{$b}{"last"}
			} keys %{$school{$school_id}{"students"}}

		) {

			if ($mode eq "csv") {
				$m->print(",,");
				$m->print('"'.$school{$school_id}{"students"}{$student_id}{"last"}.'",');
				$m->print('"'.$school{$school_id}{"students"}{$student_id}{"first"}.'",');
				$m->print('"'.$school{$school_id}{"students"}{$student_id}{"middle"}.'",');

				foreach (
					1 ..  $school{$school_id}{"students"}{$student_id}{"count"}
				) {
					$m->print('\\#');
				}
				$m->print(",");
				$m->print($school{$school_id}{"students"}{$student_id}{"main"});
				$m->print("\n");
			} else {

				my $name_string;
				$name_string .= $school{$school_id}{"students"}{$student_id}{"first"};
				$name_string .= " ".$school{$school_id}{"students"}{$student_id}{"middle"}
					if $school{$school_id}{"students"}{$student_id}{"middle"};
				$name_string .= " ". $school{$school_id}{"students"}{$student_id}{"last"};

				&print_student(
					$name_string,
					$school{$school_id}{"students"}{$student_id}{"count"},
					$school{$school_id}{"students"}{$student_id}{"main"}
				);
			}

		}

		my $coached;

		foreach my $coach_id ( sort {
				$school{$school_id}{"coaches"}{$a}{"last"}
				cmp $school{$school_id}{"coaches"}{$b}{"last"}
			} keys %{$school{$school_id}{"coaches"}}

		) {

			$coached++;

			if ($mode eq "csv") {
				$m->print(",,");
				$m->print('"'.$school{$school_id}{"coaches"}{$coach_id}{"last"}.'",');
				$m->print('"'.$school{$school_id}{"coaches"}{$coach_id}{"first"}.'",');
				$m->print('"'.$school{$school_id}{"coaches"}{$coach_id}{"middle"}.'",');
				foreach (1 .. $school{$school_id}{"coaches"}{$coach_id}{"diamonds"}) {
					$m->print('*');
				}
				$m->print("\n");
			} else {

				my $name_string = $school{$school_id}{"coaches"}{$coach_id}{"first"};
				$name_string .= " ".$school{$school_id}{"coaches"}{$coach_id}{"middle"}
					if $school{$school_id}{"coaches"}{$coach_id}{"middle"};
				$name_string .= " ".$school{$school_id}{"coaches"}{$coach_id}{"last"};

				&print_coach(
					$name_string,
					$school{$school_id}{"coaches"}{$coach_id}{"diamonds"}
				);
			}

		}

		if ($school{$school_id}{"extra_coaches"}) {

			$coached++;

			foreach my $extra (split(/\,/, $school{$school_id}{"extra_coaches"}) ) {

				$extra =~ s/^\s+//;
				$extra =~ s/\s+$//;

				my @names = split(/\ /, $extra);

				my $first;
				my $last;
				my $middle;

				$first = shift @names if @names;
				$last = pop @names if @names;
				$middle = join (" ", @names) if @names;

				$name_coach_sth->execute($first, $last, $school{$school_id}{"nsda"});
				my ($diamonds) = $name_coach_sth->fetchrow_array();
				$name_coach_sth->finish();

				if ($mode eq "csv") {
					$m->print(",,");
					$m->print('"'.$first.'",');
					$m->print('"'.$middle.'",');
					foreach (1 .. $diamonds) {
						$m->print('*');
					}
					$m->print('"'.$last."\"\n");
				} else {
					my $name_string = $first;
					$name_string .= " ".$middle if $middle;
					$name_string .= " ".$last;

					&print_coach($name_string, $diamonds);
				}
			}
		}

		unless ($coached) {

			my $contact = $school{$school_id}{"contact"};
			$contact =~ s/^\s+//;
			$contact =~ s/\s+$//;

			my @names = split(/\ /, $contact);

			my $first;
			my $last;
			my $middle;

			$first = shift @names if @names;
			$last = pop @names if @names;
			$middle = join (" ", @names) if @names;

			if ($mode eq "csv") {
				$m->print(",,");
				$m->print('"'.$first.'",');
				$m->print('"'.$middle.'",');
				$m->print('"'.$last."\"\n");
			} else {
				my $name_string = $first;
				$name_string .= " ".$middle if $middle;
				$name_string .= " ".$last;
				&print_coach( $name_string);
			}
		}
	}

	sub column_break {

		print TEXOUT "\\end{minipage}\n";
		if ($counter++ % 2) {
			print TEXOUT "\\newpage\n"
		} else {
			print TEXOUT "\\hspace{-.05in}\n"
		}
		print TEXOUT "\\begin{minipage}[t][][t]{2.35in}\n";
		print TEXOUT "\\raggedright\n";

		$line = $pagesize;

		if ($counter < 2) {
			print TEXOUT "\\strut\n";
			print TEXOUT "\\vspace{1.3in}\n";
			print TEXOUT "\\newline\n";
			$line -= 14;
		}

		return;
	}

	sub print_state {

		my $state = shift;
		&column_break() if $line-- < 1;
		$line--;

		if ($counter) {
			print TEXOUT "\\strut\n";
			print TEXOUT "\\vspace{1mm}\n";
			print TEXOUT "\\newline\n";
		}
		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\textsb{".uc($state)."}\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";
		print TEXOUT "\\newline\n";
		return;
	}

	sub print_school {

		my ($school, $natcount) = @_;

		undef $natcount if $natcount < 1;

		&column_break() if $line-- < 1;

		print TEXOUT "\\parbox{1.85in}{";
		print TEXOUT "\\truncate{1.8in}{ ";
		print TEXOUT Tab::texify($school)."}}";
		print TEXOUT "\\parbox{.2in}{\\raggedleft $natcount } ";
		print TEXOUT "\\newline\n";

		return;
	}

	sub print_student {

		my ($name, $nats, $event) = @_;

		&column_break() if $line-- < 1;

		my $nats_string;
		foreach my $nats (1 .. $nats) {
			$nats_string .= '\#';
		}

		print TEXOUT "\\parbox{.1in}{\\strut} ";
		print TEXOUT "\\parbox{1.3in}{";
		print TEXOUT "\\truncate{1.25in}{ ";
		print TEXOUT Tab::texify($name)." } } ";
		print TEXOUT "\\parbox{.30in}{ \\raggedleft \\strut ".$nats_string."} ";
		print TEXOUT "\\parbox{.30in}{ \\raggedleft $event } ";
		print TEXOUT "\\newline\n";
		return;
	}

	sub print_coach {

		my ($name, $diamonds) = @_;

		my $diamond_string;

		if ($diamonds) {
			$diamond_string = '$';
			foreach my $diamond (1 .. $diamonds) {
				$diamond_string .= "{\\star}";
			}
			$diamond_string .= '$';
		}

		&column_break() if $line-- < 1;

		my $diamond_length = $diamonds * .05;
		my $name_box = 1.9 - $diamond_length;

		print TEXOUT "\\parbox{.1in}{\\strut} ";
		print TEXOUT "\\parbox{".$name_box."in}{";
		print TEXOUT "\\truncate{".($name_box - .05)."in}{\\textsb{";
		print TEXOUT Tab::texify($name)."}}} ";
		print TEXOUT "\\parbox{".$diamond_length."in}{\\scriptsize\\raggedleft $diamond_string}";
		print TEXOUT "\\newline\n";
		return;
	}

	undef $line;
	undef $pagesize;
	undef $counter;

	print TEXOUT "\\end{minipage}\n";

	$m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		tail      => 1,
	);


</%init>
