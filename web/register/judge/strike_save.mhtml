<%args> 
	$tourn
	$person
	$type     => undef
	$judge_id => undef
	$from     => undef
</%args>
<%init> 

	$m->abort unless $type;
	$m->abort unless $judge_id;

	my $now = DateTime->now;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $err;
	my $msg;
	my $strike;

	if ($type eq "time") { 
	
		my $start_date = $ARGS{"start_date"};
		my $start_time = $ARGS{"start_time"};
		my $end_date = $ARGS{"end_date"};
		my $end_time = $ARGS{"end_time"};

		$end_date = $start_date unless $end_date;

		my $start_dt;
		my $end_dt;

		eval { 
			$start_dt = Tab::dtme($start_date, $start_time, $tz);
			$end_dt = Tab::dtme($end_date, $end_time, $tz);
		};

		unless ($start_dt && $end_dt) { 
			$err = "You did not send valid dates and times.  Please use the date picker to get the format right.";
		} elsif ($start_dt > $end_dt) { 
			$err = "Your strike time starts after it ends.  Tabroom.com does not support travel back in time.  Try again";
		} else {
			unless (Tab::Strike->search(
					judge => $judge_id,
					tourn => $tourn->id,
					type  => "time",
					start => $start_dt,
					end   => $end_dt
				)->first
			) { 
				Tab::Strike->create({
					judge => $judge_id,
					tourn => $tourn->id,
					type  => "time",
					start => $start_dt,
					end   => $end_dt
				});
			}
			$msg = "Time strike saved";
		}

	} elsif ($type eq "timeslot") { 

		my $timeslot_id = $ARGS{"timeslot_id"};
		my $timeslot = Tab::Timeslot->retrieve($timeslot_id) if $timeslot_id;

		unless ($timeslot) {

			$err = "You did not send a valid timeslot";

		} else {
			
			$strike = Tab::Strike->create({
				judge => $judge_id,
				tourn => $tourn->id,
				type  => "time",
				start => $timeslot->start,
				end   => $timeslot->end
			});

			$msg = "Time strike saved";

		}

	} elsif ($type eq "day") { 
	
		my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn);

		foreach my $day (@days) { 

			my $day_date = $ARGS{"day_date"};
			my $start_time = "00:00:00";
			my $end_time = "23:59:00";
			my $start_dt;
			my $end_dt;

			eval { 
				$start_dt = Tab::dtme($day_date, $start_time, $tz);
				$end_dt = Tab::dtme($day_date, $end_time, $tz);
			};

			unless ($start_dt && $end_dt) { 
				$err = "You did not send valid dates and times.  Please use the date picker to get the format right.";
			} else {
				
				unless (Tab::Strike->search(
						judge => $judge_id,
						tourn => $tourn->id,
						type  => "time",
						start => $start_dt,
						end   => $end_dt
					)->first
				) { 
					Tab::Strike->create({
						judge => $judge_id,
						tourn => $tourn->id,
						type  => "time",
						start => $start_dt,
						end   => $end_dt
					});
				}

				$msg = "Time strike saved";

			}
		}

	} elsif ($type eq "event") { 
	
		my $event = Tab::Event->retrieve($ARGS{event});
		my $msg;

		if ($event && $event->id) { 

			$strike = Tab::Strike->create({ 
				judge => $judge_id,
				tourn => $tourn->id,
				type  => "event",
				event => $event->id
			});

			$msg = "Judge struck against ". $event->abbr;
		}

	
	} elsif ($type eq "elim") {
	
		my $event = Tab::Event->retrieve($ARGS{event});

		$strike = Tab::Strike->create({ 
			judge => $judge_id,
			tourn => $tourn->id,
			type  => "elim",
			event => $event->id
		});

		my $msg = "Judge reserved for elims in ". $event->abbr;

	} elsif ($type eq "entry") {

		my $entry_id = $ARGS{entry_id};
		my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;

		if ($entry) { 

			$strike = Tab::Strike->create({ 
				tourn => $tourn->id,
				judge => $judge_id,
				type  => "entry",
				entry => $entry->id
			});

			$msg = "Judge blocked against ". $entry->code." (".$entry->name.") <br />";

		} else { 
			$err = "No valid entry found from input";
		}

	} elsif ($type eq "student") {

		my $msg;

		my $student = Tab::Student->retrieve($ARGS{student_id}) if $ARGS{student_id};

		my @entries = $m->comp('/funclib/student_entries.mas', 
			student => $student,
			tourn   => $tourn
		) if $student;

		foreach my $entry (@entries) { 

			$strike = Tab::Strike->create({ 
				tourn => $tourn->id,
				judge => $judge_id,
				type  => "entry",
				entry => $entry->id
			});
			
			$msg .= "Judge was conflicted against ".$entry->code." <br />";
				
		}
			
	} elsif ($type eq "school") {
	
		my $school = Tab::School->retrieve($ARGS{school});

		$strike = Tab::Strike->create({ 
			tourn  => $tourn->id,
			judge  => $judge_id,
			type   => "school",
			school => $school->id,
		});

		$msg = "Judge struck against school ".$school->name;

	} elsif ($type eq "region") { 
	
		my $region = Tab::Region->retrieve($ARGS{region});

		$strike = Tab::Strike->create({ 
			tourn  => $tourn->id,
			judge  => $judge_id,
			type   => "region",
			region => $region->id,
		});

		$msg = "Judge struck against region ".$region->name;

	} elsif ($type eq "district") { 
	
		my $district = Tab::District->retrieve($ARGS{district});

		$strike = Tab::Strike->create({ 
			tourn    => $tourn->id,
			judge    => $judge_id,
			type     => "district",
			district => $district->id,
		});

		$msg = "Judge struck against district ". $district->name;

	} elsif ($type eq "diocese") { 
	
		my $diocese = Tab::Region->retrieve($ARGS{diocese});

		$strike = Tab::Strike->create({ 
			tourn  => $tourn->id,
			judge  => $judge_id,
			type   => "diocese",
			region => $diocese->id,
		});

		$msg = "Judge struck against diocese ". $diocese->name;

	} elsif ($type eq "shift") {

		my $judge = Tab::Judge->retrieve($judge_id);

	    foreach my $shift ($judge->category->shifts) {

   	  		my $shiftkey = "shift_".$shift->id;
        	my $existing_strike = $shift->strike($judge);

        	my $shift_yes = $ARGS{$shiftkey};

        	next if $shift_yes && $existing_strike;
        	next unless $shift_yes || $existing_strike;

        	if ( defined $shift_yes &! defined $existing_strike) {

				# There should be one.  and there ISN'T ALREADY!!!  HAHAHAHAHA
        	    $strike = Tab::Strike->create({
        	        tourn => $tourn->id,
        	        shift => $shift->id,
        	        type  => "time",
        	        judge => $judge->id,
        	        start => $shift->start,
        	        end   => $shift->end
				});

        	}

        	if ( defined $existing_strike &! defined $shift_yes) {
	
	            $existing_strike->delete();
   		     }
   		}

		$msg = "Time strike saved";

	} else { 

		$msg = "That type of strike is unknown.  This is either a bug or you're attemping something weird.";
	}

    Tab::ChangeLog->create({
        type        => 'tabbing',
        tourn       => $tourn->id,
        person      => $person->id,
        created     => $now,
        description => $msg
    }); 

	$m->redirect("/register/judge/edit.mhtml?judge_id=$judge_id&msg=$msg") if $from;
	$m->redirect("/register/judge/judge_strikes.mhtml?judge_id=$judge_id&msg=$msg");

</%init>
