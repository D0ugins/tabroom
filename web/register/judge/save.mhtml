<%args>
	$tourn
	$tourn_settings
	$person
	$judge_id          => undef
	$qual_history      => 0
	$list_first_name   => 0
</%args>
<%init>

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my $now = DateTime->now();

	$m->print("No such judge.  Hit back and try again.") unless $judge;
	$m->abort unless $judge;

	my $err;

	my $max = $judge->category->setting("max_rounds");
	my $obligation = $ARGS{"obligation"};
	my $hired = $ARGS{"hired"};

	unless ($tourn_settings->{"nsda_nats"}) {
		if ( ($obligation + $hired) > $max && $max > 0) { 

			my $difference = $max - $obligation - $hired;
			$hired = $hired - $difference;

			if ($hired < 0) { 
				$obligation = $obligation + $hired;
				$hired = 0;
			}

			$err = "No judge can cover more than $max rounds of obligation.  Round burden reduced";
		}
	}

	$judge->first($ARGS{"first"}) if $ARGS{"first"};
	$judge->middle($ARGS{"middle"}) if $ARGS{"middle"};
	$judge->last($ARGS{"last"}) if $ARGS{"last"};

	$judge->code($ARGS{"code"});
	$judge->setting("ualt_id", $ARGS{"ualt_id"});

	if ($ARGS{"ualt_id"}) { 
		$judge->setting('diamonds', 
			$m->comp("/funclib/nationals_diamonds.mas", 
				ualt_id => $ARGS{"ualt_id"}
			));
	} else { 
		$judge->setting('diamonds', 0); 
	}

	$judge->category($ARGS{"category"});
	$judge->school($ARGS{"school"});

	$judge->hired($hired);
	$judge->obligation($obligation);
	$judge->covers($ARGS{"covers"});
	$judge->alt_category($ARGS{"alt_category"});

	$judge->setting("cat_id", $ARGS{"cat_id"});
	$judge->setting("jot_id", $ARGS{"jot_id"});
	$judge->setting('hire_offer', $ARGS{"hire_offer"});
	$judge->setting('special_job', $ARGS{"special"});
	$judge->setting("notes", $ARGS{"notes"});

	eval { $judge->setting("notes_timestamp", "date", $now); };

	$judge->setting("tab_rating", $ARGS{"tab_rating"});

	if ($judge->chapter_judge) { 
		my $cj = $judge->chapter_judge;
		$cj->notes($ARGS{"notes"});
		$cj->notes_timestamp($now);
		$cj->update;
	}

	$judge->update();

	$judge->setting("qual_history", "text", $qual_history);
	$judge->setting("list_first_name", $list_first_name);


	if ($ARGS{"phone"} && $judge->person && $judge->person->id) {
		$judge->person->phone($ARGS{"phone"}) ;
		$judge->person->update;
	} elsif ($ARGS{"phone"}) { 
		$judge->setting("phone", $ARGS{"phone"});
	}

	if ($ARGS{"email"} 
		&& $judge->person 
		&& $judge->person->id 
		&& $judge->person->email ne $ARGS{"email"}
	) {

		if (Tab::Person->search( email => $ARGS{"email"})) { 
			$err = "Another Tabroom user already has the email ".$ARGS{"email"}.".  Try again";
		} else { 
			$judge->person->email($ARGS{"email"}) ;
			$judge->person->update;
		}

	} elsif ($ARGS{"email"}) { 
		$judge->setting("email", $ARGS{"email"});
	}

	$judge->setting("original_school", $ARGS{"original_school"});

	if ($tourn_settings->{"nsda_nats"}) {
		my $response = $m->comp(
			"/user/enter/nats/judge_complete_check.mas", 
			judge => $judge
		);
	}

	my $msg = "Judge information saved";
	$m->redirect("edit.mhtml?judge_id=$judge_id&msg=$msg&err=$err");

</%init>
