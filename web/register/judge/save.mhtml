<%args>
	$tourn
	$tourn_settings
	$person
	$judge_id          => undef
	$qual_history      => 0
	$list_first_name   => 0
</%args>
<%init>

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;
	my $now = DateTime->now();

	$m->print("No such judge.  Hit back and try again.") unless $judge;
	$m->abort unless $judge;

	my $err;
	my $max   = $judge->category->setting("max_rounds");
	my $hired = $ARGS{"hired"};
	$hired    = 0 unless $hired;

	my $obligation = $ARGS{"obligation"};

	unless ($tourn_settings->{"nsda_nats"}) {

		if ( ($obligation + $hired) > $max && $max > 0) {

			my $difference = $max - $obligation - $hired;
			$hired = $hired - $difference;

			if ($hired < 0) {
				$obligation = $obligation + $hired;
				$hired = 0;
			}

			$err = "No judge can cover more than $max rounds of obligation.  Round burden reduced";
		}
	}

	my $cj;

	$ARGS{"phone"} =~ s/[\D_]//g;
	$ARGS{"phone"} = 0 unless $ARGS{"phone"} > 0;

	if ($ARGS{"chapter_judge"} > 0
		&& $judge
		&& $ARGS{"chapter_judge"} != $judge->chapter_judge
	) {

		$cj = Tab::ChapterJudge->retrieve($ARGS{"chapter_judge"});

		$judge->chapter_judge($cj->id);
		$judge->first($cj->first);
		$judge->middle($cj->middle);
		$judge->last($cj->last);

		if ($judge->person > 0) {

		} elsif ($cj->person > 0) {
			$judge->person($cj->person);
			$judge->setting("email", 0);
			$judge->setting("phone", 0);
		} elsif ($cj->email || $cj->phone) {
			$judge->person(0);
			$judge->setting("email", $cj->email);
			$judge->setting("phone", $cj->phone);
		} elsif ($ARGS{"email"} || $ARGS{"phone"}) {
			$judge->person(0);
			$judge->setting("email", $ARGS{"email"});
			$judge->setting("phone", $ARGS{"phone"});

			$cj->phone($ARGS{"phone"});
			$cj->email($ARGS{"email"});
			$cj->update();
		}

		$ARGS{"nsda"} = $cj->nsda unless $ARGS{"nsda"};

		$judge->update();

	} else {

		unless ($ARGS{"chapter_judge"} == $judge->chapter_judge) {
			$judge->chapter_judge(0);
		} else {
			$cj = $judge->chapter_judge;

			if ($cj) {
				$cj->phone($ARGS{"phone"});
				$cj->email($ARGS{"email"});
				$cj->update();
			}
		}

		$judge->first($ARGS{"first"}) if $ARGS{"first"};
		$judge->middle($ARGS{"middle"}) if $ARGS{"middle"};
		$judge->last($ARGS{"last"}) if $ARGS{"last"};
		$judge->setting("nsda", $ARGS{"nsda"});

		if ($ARGS{"phone"} && $judge->person && $judge->person->id) {
			$judge->person->phone($ARGS{"phone"}) ;
			$judge->person->update;
		} elsif ($ARGS{"phone"}) {
			$judge->setting("phone", $ARGS{"phone"});
		} else {
			$judge->setting("phone", 0);
		}

		if ($ARGS{"email"}
			&& $judge->person > 0
			&& $judge->person->id
			&& $judge->person->email ne $ARGS{"email"}
		) {
			if (Tab::Person->search( email => $ARGS{"email"})) {
				$err = "Another Tabroom user already has the email ".$ARGS{"email"}.".  Try again";
			} else {
				$judge->person->email($ARGS{"email"}) ;
				$judge->person->update;
			}

		} elsif ($ARGS{"email"}) {
			$judge->setting("email", $ARGS{"email"});
		} else {
			$judge->setting("email", 0);
		}
	}

	if ($cj) {
		unless ($cj->notes eq $ARGS{"notes"}) {
			$cj->notes($ARGS{"notes"});
			$cj->notes_timestamp($now);
			$cj->update();
		}
	}

	$judge->code($ARGS{"code"});

	if ($ARGS{"nsda"}) {
		$judge->setting('diamonds',
			$m->comp("/funclib/nsda/member_honors.mas",
				nsda_id       => $ARGS{"nsda"},
				diamonds_only => 1
			));
	} else {
		$judge->setting('diamonds', 0);
	}

	$judge->category($ARGS{"category"});
	$judge->school($ARGS{"school"});

	$judge->hired($hired);
	$judge->obligation($obligation);

	$ARGS{'covers'} = 0 unless $ARGS{'covers'};
	$ARGS{'alt_category'} = 0 unless $ARGS{'alt_category'};

	$judge->covers($ARGS{"covers"});
	$judge->alt_category($ARGS{"alt_category"});

	$judge->setting("jot_id", $ARGS{"jot_id"});

	$judge->setting('hire_offer', $ARGS{"hire_offer"});
	$judge->setting('special_job', $ARGS{"special"});
	$judge->setting("notes", "text", $ARGS{"notes"});

	eval { $judge->setting("notes_timestamp", "date", $now); };

	$judge->setting("tab_rating", $ARGS{"tab_rating"});
	$judge->update();

	$judge->setting("qual_history", "text", $qual_history);
	$judge->setting("list_first_name", $list_first_name);
	$judge->setting("original_school", $ARGS{"original_school"});

	if ($tourn_settings->{"nsda_nats"}) {
		my $response = $m->comp(
			"/user/enter/nats/judge_complete_check.mas",
			judge => $judge
		);
	}

	my $msg = "Judge information saved";
	$m->redirect("edit.mhtml?judge_id=$judge_id&msg=$msg&err=$err");

</%init>
