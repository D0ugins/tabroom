<%args>
	$person
	$tourn 
	$from        => undef
	$email       => undef
	$first       => 0
	$last        => 0
	$phone       => 0
	$school_id   => 0
	$obligation  => 0
	$hired       => 0
	$first_year  => undef
	$gender      => undef
	$category_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now->set_time_zone($tz);

	my $category = Tab::Category->retrieve( $category_id );

	unless ($category && $category->tourn && $category->tourn->id == $tourn->id) { 
		$m->print("<p>Just what are you trying to pull?  Quit messing around.  </p>");
		$m->abort;
	}

	my $code;
	my $judge;

	unless ($category->setting("no_codes")) { 
		$code = $m->comp("/funclib/category_code.mas", category => $category);
	}

	if ($email) { 

		my $judge_person = Tab::Person->search( 
			email => $email 
		)->first;

		$m->redirect("add.mhtml?category_id=$category_id&err=No person found with email $email") 
			unless $judge_person;

		my $already = Tab::Judge->search( 
			category => $category_id,
			person   => $judge_person->id
		)->first;

		$m->redirect("add.mhtml?category_id=$category_id&err=That judge is already judging in that judge category") unless $judge_person;

		$judge = Tab::Judge->create({
			first      => $judge_person->first,
			last       => $judge_person->last,
			person     => $judge_person->id,
			active     => 1,
			obligation => $obligation,
			hired      => $hired,
			school     => $school_id,
			category   => $category->id,
			code       => $code
		});

		$judge->setting("special", $ARGS{"special"}) if $ARGS{"special"};
		$judge->setting("notes", $ARGS{"notes"}) if $ARGS{"notes"};
		$judge->setting("tab_rating", $ARGS{"tab_rating"}) if $ARGS{"tab_rating"};
		$judge->setting("diversity", $ARGS{"diversity"}) if $ARGS{"diversity"};
		$judge->setting("gender", $judge_person->gender) if $judge_person->gender;

		$judge->setting("registered_by", $person->id);

		my $phone = $judge_person->phone if $judge_person;
		my $provider = $judge_person->provider if $judge_person;

		Tab::Follower->create({
			judge  => $judge->id,
			cell   => $phone,
			domain => $provider,
			type   => "judge"
		}) if $provider;

		my $email = $judge_person->email if $judge_person;
		my $no_email = $judge_person->no_email if $judge_person;

		Tab::Follower->create({
			judge => $judge->id,
			email => $email,
			type  => "judge"
		}) unless $no_email;

		$m->comp("/funclib/person_conflict.mas", 
			tourn  => $tourn,
			person => $person
		);

	} else { 

		$judge = Tab::Judge->create({
			first       => $first,
			last        => $last,
			active      => 1,
			obligation  => $obligation,
			hired       => $hired,
			school      => $school_id,
			category => $category->id,
			code        => $code
		});

		$judge->setting("gender", $gender);
		$judge->setting("special", $ARGS{"special"});
		$judge->setting("notes", $ARGS{"notes"});
		$judge->setting("tab_rating", $ARGS{"tab_rating"}) if $ARGS{"tab_rating"};
		$judge->setting("diversity", $ARGS{"diversity"}) if $ARGS{"diversity"};
		$judge->setting("registered_by", $person->id);

	}

	my $description = "Entered ".$category->abbr." judge ".$judge->code ." ".$judge->first." ".$judge->last;

	my $change = $m->comp("/funclib/log.mas", 
	   tourn       => $tourn->id,
	   school      => $school_id,
	   judge       => $judge->id,
	   type        => "registration",
	   description => $description,
	   person      => $person->id
	) if $school_id;

	foreach my $jpool ($category->jpools) { 

		next unless $ARGS{$jpool->id};

		Tab::JPoolJudge->create({
			jpool  => $jpool->id,
			judge => $judge->id
		});

	}

    if ($category->rating_subsets) { 

        foreach my $subset ($category->rating_subsets) { 
    
            my @judge_ratings = Tab::Rating->search(
                judge         => $judge->id,
                rating_subset => $subset->id,
                type          => "coach"
            );

            my $notfirst;

            JR:
            foreach my $jr (@judge_ratings) { 

                if ($notfirst) { 
                    $jr->delete;
                    next JR;
                } else { 
					my $tier = $ARGS{$subset->id."_rating"};
					$tier = 0 unless $tier;
                    $jr->rating_tier($tier);
                    $jr->entered($now);
                    $jr->update;
                    $notfirst++;
                }

            }

            unless ($notfirst) { 

                my $tier = $ARGS{$subset->id."_rating"};
				$tier = 0 unless $tier;

                Tab::Rating->create({
                    judge         => $judge->id,
                    tourn         => $tourn->id,
                    type          => "coach",
                    rating_tier   => $tier,
                    rating_subset => $subset->id,
                    entered       => $now
                });
            }

        }

    } else {

        my @judge_ratings = Tab::Rating->search(
            judge => $judge->id,
            type => "coach"
        );

        my $notfirst;

        JR:
        foreach my $jr (@judge_ratings) {

            if ($notfirst) {
                $jr->delete;
                next JR;
            } else {
                $jr->rating_tier($ARGS{"rating"});
                $jr->update;
                $notfirst++;
            }
        }

        unless ($notfirst) {

			my $tier = $ARGS{"rating"};
			$tier = 0 unless $tier;

            Tab::Rating->create({
                judge       => $judge->id,
                tourn       => $tourn->id,
                type        => "coach",
                rating_tier => $tier,
                entered     => $now
            });

        }

    }

	$judge->setting("phone", $phone);
	$judge->setting("first_year", $first_year);

	$m->redirect("/register/school/judges.mhtml?school_id=".$school_id."&category_id=$category_id") if $from && $school_id;
	$m->redirect("add.mhtml?last_id=".$judge->id."&category_id=$category_id");
	
</%init>

