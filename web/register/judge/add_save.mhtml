<%args>
	$person
	$tourn
	$from        => undef
	$email       => undef
	$first       => 0
	$middle      => undef
	$last        => 0
	$phone       => 0
	$school_id   => 0
	$obligation  => 0
	$hired       => 0
	$category_id => undef
</%args>
<%init>

	use Email::Valid;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now->set_time_zone($tz);

	my $category = Tab::Category->retrieve( $category_id );

	unless ($category) {
		$m->comp('/funclib/abort.mas',
			message => "No judge category found for $category_id"
		);
	}

	my $school = Tab::School->retrieve($school_id) if $school_id;
	my $judge;

	my $chapter = $school->chapter if $school;

	my $judge_person;
	my $nsda_person;
	my $chapter_judge;

	my %category_settings = $category->all_settings();
	my $max_rounds = $category_settings{'max_rounds'};
	$max_rounds = 8 unless $max_rounds;

	my $msg;
	$chapter_judge = Tab::ChapterJudge->retrieve($ARGS{"chapter_judge_id"});

	foreach my $email ($ARGS{"tabroom_email"}, $ARGS{"email"}) {

		next unless $email;
		next if $judge_person;

		$judge_person = Tab::Person->search(
			email => $email
		)->first;

		unless ($judge_person) {
			my $login = Tab::Login->search(
				username => $email
			)->first;
			$judge_person = $login->person() if $login;
		}

	}

	unless ($judge_person) {
		$judge_person = $chapter_judge->person if $chapter_judge
			&& $chapter_judge->person > 0;
	}

	unless (
		$chapter_judge
		|| $nsda_person
		|| $judge_person
		|| ($ARGS{"first"} && $ARGS{"last"})
	) {

		my $err = "Insufficient information provided to register a judge: must have at least one of a valid Tabroom judge, a valid Tabroom account email or a first &amp; last name";

		$m->redirect("add.mhtml?category_id=".$category->id."&school_id=".$school_id."&err=$err");

	}

	#Check for duplicates

	my @existing;

	if ($judge_person > 0) {
		push @existing, $m->comp(
			"/funclib/person_judges.mas",
			person => $judge_person,
			tourn  => $tourn
		);
	}

	if ($nsda_person > 0 ) {
		push @existing, $m->comp(
			"/funclib/nsda_person_judges.mas",
			nsda_person => $nsda_person,
			tourn       => $tourn
		);
	}

	if ($chapter_judge > 0) {

		Tab::Judge->set_sql( tourn => "
			select judge.*
			from judge, category
				where category.tourn = ?
				and category.id = judge.category
				and judge.chapter_judge = ?
		");

		push @existing, Tab::Judge->search_tourn(
			$tourn->id,
			$chapter_judge->id
		);
	}

	my %cat_double;
	foreach my $category ($tourn->categories) {
		$cat_double{$category->id} = $category->setting("double_entry");
	}

	my @same;
	my @other;

	foreach my $existing (@existing) {
		next if $cat_double{$existing->category->id};
		if ($existing->category == $category) {
			push @same, $existing;
		} else {
			push @other, $existing;
		}
	}

	my $err;

	if (@same) {

		my %done;
		$err = $same[0]->first." ".$same[0]->last." is already registered in ".$category->abbr.": ";

		foreach my $other (@existing) {

			next if $done{$other->id}++;

			$err .= "<br />" if $err;
			$err .= $other->first." ".$other->last;
			$err .= " from ".$other->school->name." " if $other->school > 0;
			$err .= " in ".$other->category->abbr;
		}

		$m->redirect("edit.mhtml?category_id=".$category->id."&school_id=".$school_id."&err=$err");

	} else {

		if (@other) {
			$err = $other[0]->first." ".$other[0]->last." is already entered in the tournament in ";
			foreach my $other (@other) {
				$err .= " ".$other->category->abbr;
			}
			$err .= ". They have been entered in ".$category->abbr." but be careful about double booking.";
		}

		unless ($nsda_person) {

			my $nsda;
			my $email;

			$nsda = $judge_person->nsda
				if ($judge_person && $judge_person->nsda);

			$nsda = $chapter_judge->nsda
				if ($chapter_judge && $chapter_judge->nsda);

			$email = $chapter_judge->email
				if $chapter_judge
				&& $chapter_judge->email;

			$email = $judge_person->email
				if $judge_person;

		}

		unless ($judge_person) {

			my $nsda;
			my $email;

			$nsda = $chapter_judge->nsda
				if ($chapter_judge && $chapter_judge->nsda);

			$nsda = $nsda_person->user_id
				if ($nsda_person && $nsda_person->user_id);

			$email = $chapter_judge->email
				if ($chapter_judge && $chapter_judge->email);

			$email = $nsda_person->uemail
				if ($nsda_person && $nsda_person->uemail);

			undef $email unless Email::Valid->address(
				  -address => $email,
				   -mxcheck => 0
			);

			$judge_person = Tab::Person->search(
				email => $email
			)->first if $email;

			unless ($judge_person) {
				$judge_person = Tab::Person->search(
					nsda => $nsda
				)->first if $nsda;
			}
		}

		if ($judge_person
			&& $nsda_person
			&& $judge_person->nsda != $nsda_person->user_id
		) {
			$judge_person->nsda($nsda_person->user_id);
			eval {  #I am coward
				$judge_person->update();
			};
		}

		if ($chapter_judge) {

			if ($judge_person) {
				$chapter_judge->person($judge_person->id);
			}

			if ($nsda_person) {
				$chapter_judge->nsda($nsda_person->user_id);
			}

			$chapter_judge->update();

		} elsif ($school && $school->chapter) {

			if ($judge_person && $chapter) {
				$chapter_judge = $judge_person->chapter_judges(
					chapter => $chapter->id,
					last    => $judge_person->last
				)->first;
			}

			unless ($chapter_judge) {
				if ($nsda_person && $chapter) {
					$chapter_judge = $chapter->chapter_judges(
						nsda => $nsda_person->user_id
					)->first;
				}
			}

			unless ($chapter_judge) {

				# There might be another one by name or something but I
				# could be here all friggin day checking iterations

				my $first = $ARGS{"first"};
				my $middle;
				my $last  = $ARGS{"last"};
				my $phone = $ARGS{"phone"};
				my $email = $ARGS{"email"};
				my $nsda;
				my $judge_person_id;

				if ($nsda_person) {
					$first   = $nsda_person->ufname;
					$middle  = $nsda_person->umname;
					$last    = $nsda_person->ulname;
					$phone   = $nsda_person->cell;
					$email   = $nsda_person->uemail;
					$nsda    = $nsda_person->user_id;
				}

				if ($judge_person) {
					$first           = $judge_person->first;
					$middle          = $judge_person->middle;
					$last            = $judge_person->last;
					$email           = $judge_person->email;
					$phone           = $judge_person->phone;
					$judge_person_id = $judge_person->id;
				}

				undef $email unless Email::Valid->address(
					  -address => $email,
					   -mxcheck => 0
				);

				unless ($first && $last) {

					my $err = "You must supply a name, or a Coach/Tabroom record, to register a judge";
					$m->redirect("edit.mhtml?category_id=".$category->id."&school_id=".$school_id."&err=$err");
				} else {

					$chapter_judge = Tab::ChapterJudge->search(
						first   => $first,
						last    => $last,
						chapter => $school->chapter->id,
					)->first if $school && $school->chapter;

					if ($chapter_judge) {
						$chapter_judge->nsda($nsda) if $nsda;
						$chapter_judge->update();
					}
				}

				unless ($chapter_judge) {

					$chapter_judge = Tab::ChapterJudge->create({
						first   => $first,
						middle  => $middle,
						last    => $last,
						chapter => $school->chapter->id,
						phone   => $phone,
						email   => $email,
						nsda    => $nsda,
						person  => $judge_person_id
					}) if $school && $school->chapter;

				}
			}
		}

		unless ($first && $last) {

			if ($nsda_person) {
				$first  = $nsda_person->ufname;
				$middle = $nsda_person->umname;
				$last   = $nsda_person->ulname;
			}

			if ($judge_person) {
				$first = $judge_person->first;
				$middle = $judge_person->middle;
				$last = $judge_person->last;
			}

		}

		my $nsda = $nsda_person->user_id if $nsda_person;
		my $judge_person_id = $judge_person->id if $judge_person;
		$judge_person_id = 0 unless $judge_person_id;


		my $code;

		unless ($category_settings{"no_codes"}) {
			$code = $m->comp(
				"/funclib/category_code.mas",
				category => $category
			);
		}

		if ($chapter_judge) {

			$judge = Tab::Judge->create({
				chapter_judge => $chapter_judge->id,
				first         => $chapter_judge->first,
				middle        => $chapter_judge->middle,
				last          => $chapter_judge->last,
				active        => 1,
				code          => $code,
				obligation    => $max_rounds,
				category      => $category->id,
				covers        => $category->id,
				school        => $school_id,
				person        => $judge_person_id
			});

		} else {

			$school_id = 0 unless $school_id;

			$judge = Tab::Judge->create({
				first      => $first,
				middle     => $middle,
				last       => $last,
				active     => 1,
				code       => $code,
				obligation => $max_rounds,
				category   => $category->id,
				covers     => $category->id,
				school     => $school_id,
				person     => $judge_person_id
			});

		}

		$judge->setting("nsda", $nsda) if $nsda;
		$judge->setting("phone", $phone) if $phone;
		$judge->setting("email", $email) if $email;

	}

	$msg = "Judge ".$judge->first." ".$judge->last." created";

	my $description = "Entered ".$category->abbr." judge ".$judge->code ." ".$judge->first." ".$judge->last;

	my $change = $m->comp("/funclib/log.mas",
	   tourn       => $tourn->id,
	   school      => $school_id,
	   judge       => $judge->id,
	   type        => "registration",
	   description => $description,
	   person      => $person->id
	) if $school_id;

    if (
		$category_settings{"coach_ratings"}
		|| $category_settings{"ask_alts"}
	) {

		$m->redirect("/register/school/judge_details.mhtml?judge_id=".$judge->id."&school_id=".$school_id."&err=$err");

	} else {

		$m->redirect("/register/school/judges.mhtml?school_id=".$school_id."&category_id=$category_id&msg=$description&err=$err")
			if $from && $school_id;

		$m->redirect("add.mhtml?last_id=".$judge->id."&category_id=$category_id&msg=$description&err=$err");

	}

</%init>

