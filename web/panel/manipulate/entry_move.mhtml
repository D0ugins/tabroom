<%args>
	$person
	$tourn
	$entry_id => undef
	$panel_id => undef
	$manual   => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $entry = Tab::Entry->retrieve($entry_id);
	my $panel = Tab::Panel->retrieve($panel_id);

	$m->abort unless $entry && $panel;

	my $now = DateTime->now();
	my $round = $panel->round;
	my $event = $round->event;

	my @panels;

	if (
		$event->type eq "congress"
		&& $round->type eq "prelim"
	) {

		foreach my $round (
			$event->rounds(type => "prelim")
		) {
			push @panels, $round->panels(
				letter => $panel->letter
			);
		}
	} else {
		@panels = ($panel);
	}

	PANEL:
	foreach my $panel (@panels) {

		my @ballots = $panel->ballots();
		my $round = $panel->round();
		my $sample;
		my %taken;

		foreach my $ballot (@ballots) {
			$taken{$ballot->speakerorder}++;
			if ($ballot->entry > 0) {
				$sample = $ballot->entry();
			}
		}

		my $order = 1;
		while ($taken{$order}) {
			$order++;
		}

		my $old_panel;

		Tab::Panel->set_sql( current => "
			select panel.*
			from panel, ballot
			where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = ?
		");

		my @old_panels = Tab::Panel->search_current(
			$round->id,
			$entry->id
		);

		my %here_already;

		PANEL:
		foreach my $old_panel (@old_panels) {

			if ($old_panel && $old_panel->id == $panel->id) {
				$here_already{$old_panel->id}++;
				next PANEL;
			}

			unless ($ARGS{"add"}) {

				if ($old_panel) {

					my $old_order;
					foreach my $ballot ($entry->ballots(panel => $old_panel->id)) {
						$old_order = $ballot->speakerorder;
						$ballot->delete();
					}

					my @count = $old_panel->ballots;
					my $order = scalar @count + 1;
					undef @count;

					foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} $old_panel->ballots) {
						$ballot->speakerorder($order++);
						$ballot->update();
					}

					$order = 1;
					foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} $old_panel->ballots) {
						$ballot->speakerorder($order++);
						$ballot->update();
					}
				}
			}
		}


		unless ($here_already{$panel->id}) {
			foreach my $ballot (@ballots) {
				if ($sample) {
					next unless $ballot->entry == $sample;
				}

				my $new_ballot = $ballot->copy({
					entry         => $entry->id,
					speakerorder  => $order,
					hangout_admin => 0,
					pullup        => 0,
					chair         => 0,
					audit         => 0
				});
			}
		}

		my $regline = "Entry ".$entry->code." moved from ".$old_panel->letter if $old_panel;
		$regline .= " into ".$panel->letter." for ".$round->realname." of ".$event->abbr if $old_panel;

		unless ($regline) {
			$regline = "Entry ".$entry->code." moved into ".$panel->letter;
			$regline .= " for ".$round->realname." of ".$event->abbr;
		}

		my $old_panel_id = $old_panel->id if $old_panel;

		Tab::ChangeLog->create({
			type        => "move",
			event       => $entry->id,
			tourn       => $tourn->id,
			new_panel   => $panel->id,
			entry       => $entry->id,
			old_panel   => $old_panel_id,
			description => $regline,
			created     => $now,
			person      => $person->id
		});

	}

	my $msg = "Competitor ".$entry->code." was moved into ".$panel->letter;

	$m->redirect("manual_rebalance.mhtml?round_id=".$round->id."&entry_id=$entry_id&new_panel_id=".$panel->id."&msg=$msg") if $manual;

	$m->redirect("entry_edit.mhtml?round_id=".$round->id."&entry_id=$entry_id&msg=$msg");

</%init>
