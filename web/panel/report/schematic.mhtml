<%args>
	$tourn
	$session
	$tourn_settings
	$person_settings
	$event_id    => undef
	$site_id     => undef
	$schools     => undef
	$states      => undef
	$min_paper   => 1
	$round_id    => undef
	$timeslot_id => undef
	$record      => undef
	$no_break    => undef
	$event_break => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id) if $round_id;

	$event_id = $round->event->id if $round && (not defined $event_id);

	unless ($event_id) {
		$m->print("I wasn't sent an event.  Something is wrong");
		$m->abort;
	}

	my @events;

	my $flighted++ if $round
		&& $round->event->type ne "speech"
		&&  $round->flighted == 2;

	$flighted++ if $round
		&& $round->event->type eq "congress"
		&& $round->event->setting("schem_orientation") eq "vertical";

	if ($event_id eq "all") {
		@events = $tourn->events;
	} else {
		push (@events, Tab::Event->retrieve($event_id));
	}

	@events = sort {$a->name cmp $b->name} @events;

	my @sites = $tourn->sites;

	my @timeslots;

	if ($timeslot_id eq "all") {
		@timeslots = $tourn->timeslots;
		undef $timeslot_id;
	} else {
		push (@timeslots, Tab::Timeslot->retrieve($timeslot_id)) if $timeslot_id;
		push (@timeslots, $round->timeslot) if $round;
	}

	@timeslots = sort {$a->start->epoch <=> $b->start->epoch} @timeslots;

	foreach my $timeslot (@timeslots) {
		foreach my $event (@events) {
			my @rounds = Tab::Round->search(event => $event->id, timeslot => $timeslot->id);
			foreach my $round (@rounds) {
				$flighted++ if $round->flighted == 2 && $round->event->type ne "speech";
			}
		}
	}

	my $name = $events[0]->name if $event_id ne "all";
	$name = "ALL" unless $name;
    $name =~ s/[\W_]//g;

	my $round_name .= "-".$round->realname if $round;
	$round_name = "-ALL" unless $round_name;
    $round_name =~ s/[\W_]//g;

	my $timeslot_name .= "-".$timeslots[0]->name if $timeslot_id;
	$timeslot_name = "-ALL" unless $timeslot_id;
    $timeslot_name =~ s/[\W_]//g;

	my $by_judge_name = "ByJudge-" if $ARGS{"by_judge"};

    my $filename = "Schematic-$by_judge_name"."$name-$round_name-$timeslot_name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

	my $taller++ unless $flighted;

    $m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		head      => 1,
		wide      => 1,
		array     => "1.3",
		landscape => $flighted,
		fontsize  => $person_settings->{"fontsize"},
		taller    => $taller
	);

	open (TEXOUT, ">>$filepath.tex");

	if ($round) {

		if ($ARGS{"list_by_entry"}) {

			$m->comp("schemat/round_print_entrylist.mas",
				round_id       => $round->id,
				tourn_settings => $tourn_settings,
				fontsize       => $person_settings->{"fontsize"},
				filename       => $filename
			);

		} elsif ($ARGS{"list_by_judge"}) {

			$m->comp("schemat/round_print_judgelist.mas",
				round_id       => $round->id,
				tourn_settings => $tourn_settings,
				fontsize       => $person_settings->{"fontsize"},
				filename       => $filename
			);

		} else {

			my $event = $round->event;

			undef $flighted if $event->type eq "speech";
			undef $flighted if $event->type eq "congress";

			next unless $round->panels;

			if ($event->type eq "speech") {

				if ($event->setting("schem_orientation") eq "vertical") {

					$m->comp("schemat/round_print_speech_vertical.mas",
						round_id       => $round->id,
						fontsize       => $person_settings->{"fontsize"},
						filename       => $filename,
						by_section     => $ARGS{"by_section"},
						tourn_settings => $tourn_settings,
						states         => $states,
						schools        => $schools
					);

				} else {

					$m->comp("schemat/round_print_speech_horizontal.mas",
						round_id       => $round->id,
						fontsize       => $person_settings->{"fontsize"},
						filename       => $filename,
						tourn_settings => $tourn_settings,
						by_section     => $ARGS{"by_section"},
						states         => $states,
						schools        => $schools)
					;
				}

			} elsif ($event->type eq "congress") {

				if ($event->setting("schem_orientation") eq "vertical") {

					$m->comp("schemat/round_print_congress_vertical.mas",
						round_id       => $round->id,
						filename       => $filename,
						fontsize       => $person_settings->{"fontsize"},
						schools        => $schools,
						states         => $states,
						by_section     => $ARGS{"by_section"},
						tourn_settings => $tourn_settings,
						tourn          => $tourn
					);

				} else {

					$m->comp("schemat/round_print_congress_horizontal.mas",
						round_id       => $round->id,
						filename       => $filename,
						fontsize       => $person_settings->{"fontsize"},
						schools        => $schools,
						states         => $states,
						by_section     => $ARGS{"by_section"},
						tourn_settings => $tourn_settings,
						tourn          => $tourn
					);

				}

			} elsif ($event->type eq "wudc") {

				$m->comp("schemat/round_print_wudc.mas",
					round_id       => $round->id,
					filename       => $filename,
					fontsize       => $person_settings->{"fontsize"},
					tourn_settings => $tourn_settings,
					states         => $states,
					schools        => $schools
				);

			} else {

				$m->comp("schemat/round_print_debate.mas",
					round_id       => $round->id,
					filename       => $filename,
					fontsize       => $person_settings->{"fontsize"},
					judge_codes    => $ARGS{"judge_codes"},
					schools        => $schools,
					states         => $states,
					record         => $record,
					tourn_settings => $tourn_settings,
					by_section     => $ARGS{"by_section"},
					by_judge       => $ARGS{"by_judge"}
				);

			}
		}

		if ($round->setting("notes")) {
			print TEXOUT "\\strut\n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\normalsize\n";
			print TEXOUT Tab::texify($round->setting("notes"));
		}

		print TEXOUT "\\newpage\n" unless $no_break;

	} else {

		EVENT:
		foreach my $event (@events) {

			undef $flighted if $event->type eq "speech";
			undef $flighted if $event->type eq "congress";

			TIMESLOT:
			foreach my $timeslot (@timeslots) {

				my @rounds;

				if (scalar @sites > 1 && $site_id ne "all") {
					@rounds = Tab::Round->search(
						event    => $event->id,
						timeslot => $timeslot->id,
						site     => $site_id
					);
				} else {
					@rounds = Tab::Round->search(
						event    => $event->id,
						timeslot => $timeslot->id
					);
				}

				unless ($timeslot) {
					print TEXOUT "\\huge TAB ROOM COPY: ". $event->name ." \\\\ \n" if $schools;
					print TEXOUT "\\huge ". $event->name ." \\\\ \n" unless $schools;
				}

				foreach my $round (@rounds) {

					next unless $round->panels;

					next unless $m->comp(
						"/funclib/round_entries.mas",
						round => $round
					);

					if ($event->type eq "speech") {

						if ($event->setting("schem_orientation") eq "vertical") {

							$m->comp("schemat/round_print_speech_vertical.mas",
								round_id       => $round->id,
								filename       => $filename,
								tourn_settings => $tourn_settings,
								fontsize       => $person_settings->{"fontsize"},
								schools        => $schools
							);

						} else {

							$m->comp("schemat/round_print_speech_horizontal.mas",
								round_id       => $round->id,
								fontsize       => $person_settings->{"fontsize"},
								filename       => $filename,
								tourn_settings => $tourn_settings,
								schools        => $schools
							);
						}

					} elsif ($event->type eq "congress") {

						if ($event->setting("schem_orientation") eq "vertical") {

							$m->comp("schemat/round_print_congress_vertical.mas",
								round_id       => $round->id,
								filename       => $filename,
								fontsize       => $person_settings->{"fontsize"},
								schools        => $schools,
								tourn_settings => $tourn_settings,
								tourn          => $tourn
							);

						} else {

							$m->comp("schemat/round_print_congress_horizontal.mas",
								round_id       => $round->id,
								filename       => $filename,
								fontsize       => $person_settings->{"fontsize"},
								schools        => $schools,
								tourn_settings => $tourn_settings,
								tourn          => $tourn
							);

						}

					} elsif ($event->type eq "wudc") {

						$m->comp("schemat/round_print_wudc.mas",
							round_id => $round->id,
							filename => $filename,
							fontsize => $person_settings->{"fontsize"},
							schools  => $schools);

					} else {

						$m->comp("schemat/round_print_debate.mas",
							round_id       => $round->id,
							filename       => $filename,
							fontsize       => $person_settings->{"fontsize"},
							by_judge       => $ARGS{"by_judge"},
							tourn_settings => $tourn_settings,
							schools        => $schools
						);
					}

					if ($round->setting("notes")) {
						print TEXOUT "\\medskip\n";
						print TEXOUT "\\newline\n";
						print TEXOUT "\\normalsize\n";
						print TEXOUT Tab::texify($round->setting("notes"));
					}

					print TEXOUT "\\bigskip\n";
					print TEXOUT "\\newpage\n" unless $no_break || $event_break;
					print TEXOUT "\\newline\n" if $no_break || $event_break;

				}

			}

			if ($event_break) {
				print TEXOUT "\\newpage\n";
			}

		}

	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		tail      => 1,
		landscape => $flighted
	);

</%init>
