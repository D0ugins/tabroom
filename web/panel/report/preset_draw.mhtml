<%args>
	$event_id
</%args>

<%init>
	
	my @rounds = Tab::Round->search( event=> $event_id, type => 'prelim' );
	my @entries = Tab::Entry->search( event => $event_id, dropped => 0, waitlist => 0, );
	my $event = Tab::Event->retrieve($event_id);
	my @events = Tab::Event->search( tourn => $event->tourn );
	
	my @seed_settings = $m->comp("/funclib/event_entry_settings.mas", event => $event, tag => "pairing_seed");
	my %seed_by_entry = map {$_->entry->id => $_->value} @seed_settings;

	my $max_seed;

	foreach my $entry (@entries) { 
		$max_seed = $seed_by_entry{$entry->id} if $seed_by_entry{$entry->id}  > $max_seed;
	}

	my %round_type;

	if ($event->type eq "wsdc") { 
		foreach my $round (@rounds) { 
			$round_type{$round->id} = $round->setting('wsdc_round_type');
		}
	}

</%init>

	<div class="menu">

		<div class="sidenote">

			<h4>Select Event</h4>

%			foreach $event (@events) {
				<a class="<% $event_id == $event->id ? "dk" : "" %>blue full" href="preset_draw.mhtml?event_id=<% $event->id %>">
					<% $event->name %>
				</a>
%			}

		</div>

	</div>
	
	<div class="main">
	
		<& /funclib/tablesorter.mas, table => "sortme" &>

		<h2>Preset Draw, <% $event->name %></h2>

		<table id="sortme">

			<thead>
			
				<tr class="yellowrow">

					<th class="smaller">
						Team
					</th>
					
%					foreach my $round (@rounds) {
						<th class="smallish">
							<% $round->name %>
						</th>
%					}				

					<th class="smallish">
						Total
					</th>

					<th class="smallish">
						Avg
					</th>

					<th class="smallish">
						StDv
					</th>


%					if ($event->type eq "wsdc") { 
						<th class="smallish">
							Prop Avg
						</th>

						<th class="smallish">
							Prop StDv
						</th>

						<th class="smallish">
							Opp Avg
						</th>

						<th class="smallish">
							Opp StDv
						</th>

						<th class="smallish">
							Imp Avg
						</th>

						<th class="smallish">
							Imp StDv
						</th>

						<th class="smallish">
							Prep Avg
						</th>

						<th class="smallish">
							Prep StDv
						</th>
%					}

				</tr>
		
			</thead>

			<tbody>
			
%			foreach my $entry (@entries) {

<%perl>

				my @seeds_hit;
				my @impromptu_seeds_hit;
				my @prepped_seeds_hit;

				my @aff_seeds_hit;
				my @neg_seeds_hit;


				my $dbh = Tab::DBI->db_Main();

				my $preset_sth = $dbh->prepare("
					select entry.id, entry.code, panel.id, ballot.side, round.id 

					from entry, ballot, ballot b2, panel, round

					where panel.id = ballot.panel
					and ballot.entry = ? 
					and ballot.panel = b2.panel
					and b2.entry != ballot.entry
					and b2.entry = entry.id

					and round.id = panel.round
					and round.type = 'prelim'
					order by round.name, entry.code
				");

			    $preset_sth->execute($entry->id);

				my %opponents = ();

			    while (my ($id, $code, $panel, $side, $round_id)  = $preset_sth->fetchrow_array() ) { 

					push @{$opponents{"round"}{$round_id}}, $id;

					$opponents{$id}{"code"} = $code;
					$opponents{$id}{"seed"} = $seed_by_entry{$id};
					$opponents{$id}{"side"} = $side;

				}

</%perl>
				<tr>

					<td>
						<span class="sixth smaller">
							<% $seed_by_entry{$entry->id} %>
						</span>
						<span class="fivesixth nospace smaller" style="overflow: hidden;">
							<% $entry->code %> 
						</span>
					</td>

<%perl>

					foreach my $round (@rounds) {

						my %used;

						$m->print("<td>");

							foreach my $opponent (@{$opponents{"round"}{$round->id}}) {	

								next if $used{$opponent}++;

								my $seed = $opponents{$opponent}{"seed"};
								my $code = $opponents{$opponent}{"code"};
								my $side = $opponents{$opponent}{"side"};

								push (@seeds_hit, $seed);
								push (@prepped_seeds_hit, $seed) if $round_type{$round->id} eq "prepped";
								push (@impromptu_seeds_hit, $seed) if $round_type{$round->id} eq "impromptu";

								push (@aff_seeds_hit, $seed) if $side == 1;
								push (@neg_seeds_hit, $seed) if $side == 2;

</%perl>
								<% $seed %>
%							}

%							unless (keys %used) { 

<%perl>

								my $seed_presets = $event->setting("seed_presets");
								my $bye_seed = $max_seed;
								$bye_seed++ if $seed_presets eq "balance";

								push (@seeds_hit, $bye_seed);
								push (@prepped_seeds_hit, $bye_seed) if $round_type{$round->id} eq "prepped";
								push (@impromptu_seeds_hit, $bye_seed) if $round_type{$round->id} eq "impromptu";

</%perl>

								<span class="sixth nospace">
									<% $bye_seed %> 
								</span>
								<span class="fivesixth">
									BYE
								</span>

%							}

						</td>
%					}

				<td class="centeralign">
					<% scalar @seeds_hit %>
				</td>

				<td class="centeralign">
					<% average(@seeds_hit) %>
				</td>

				<td class="centeralign">
					<% stdev(@seeds_hit) %>
				</td>

%				if ($event->type eq "wsdc") { 

					<td class="borderleft centeralign">
						<% average(@aff_seeds_hit) %>
					</td>

					<td class="centeralign">
						<% stdev(@aff_seeds_hit) %>
					</td>

					<td class="centeralign">
						<% average(@neg_seeds_hit) %>
					</td>

					<td class="centeralign">
						<% stdev(@neg_seeds_hit) %>
					</td>

					<td class="borderleft centeralign">
						<% average(@impromptu_seeds_hit) %>
					</td>

					<td class="centeralign">
						<% stdev(@impromptu_seeds_hit) %>
					</td>

					<td class="centeralign">
						<% average(@prepped_seeds_hit) %>
					</td>

					<td class="centeralign">
						<% stdev(@prepped_seeds_hit) %>
					</td>
%				}

			</tr>
			
%			}

			</tbody>
			
		</table>
		
	</div>

<%perl>

	sub average{

        my @data = @_;

		return 0 unless @data;

        my $total = 0;

        foreach (@data) {
        	$total += $_;
        }

        my $average = $total / scalar @data;

        return sprintf("%.2f", $average);
	}


	sub stdev {

		my @data = @_;

		return 0 unless @data;
		return 0 if scalar @data == 1;

		my $average = &average(@data);
		my $sqtotal = 0;

		foreach (@data) {
			$sqtotal += ($average-$_) ** 2;
		}

		my $std = ($sqtotal / (scalar @data - 1)) ** 0.5;

        return sprintf("%.2f", $std);
	}

</%perl>
