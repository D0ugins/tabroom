<%args>
	$round_id
	$filename
	$schools        => undef
	$event_settings => undef
	$tourn_settings => undef
</%args>
<%init>

	my $filepath = $Tab::file_root."tmp/".$filename;
	my $fontsize = $ARGS{"fontsize"};
	$fontsize = "large" if $fontsize eq "default" || not defined $fontsize;

	use POSIX;

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my $tourn = $event->tourn;

	my $no_judge_codes++ if	$event->category->setting("no_codes");

	undef $schools if $tourn_settings->{"school_codes"} eq "none";
	my $ncfl++ if $tourn_settings->{"ncfl"};

	%{$event_settings} = $event->all_settings() unless $event_settings;

	my $code_style = $event_settings->{"schem_designation"};
	$code_style = "codes" unless $code_style;

	my @panels = $m->comp("/funclib/round_panels.mas", round => $round, sort_by => "room");
	my @round_judges = $m->comp("/funclib/round_judges.mas", round => $round);
	my @round_entries = $m->comp("/funclib/round_entries.mas", round => $round);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my $prep_offset;

	if ($event_settings->{"prep_offset"}) {
		$prep_offset = $start->clone();
		$prep_offset->subtract( minutes => $event_settings->{"prep_offset"});
	}

	my $flighted++ if $round->flighted > 1;
	my $flight_offset = $event_settings->{"flight_offset"};

	@panels = sort {$a->flight <=> $b->flight} @panels if $flighted;

	my %doubled = $m->comp("/funclib/round_doubled.mas", round => $round);

	my %flight_start;

	if ($flighted && $flight_offset) {
		foreach my $flight (1 .. $round->flighted) {
			my $offset_time = $start->clone;

			my $offset_factor = $flight_offset * ($flight - 1);
			$offset_time->add( minutes => $offset_factor );
			$flight_start{$flight} = $offset_time;
		}
	}

	print TEXOUT "\\noindent\n";
	print TEXOUT "{\\bf \\LARGE ". Tab::texify($round->realname)." } ";
	print TEXOUT "\\hfill";

	print TEXOUT " \\parbox{1.5in}{";

	if ($flighted) {
		foreach my $flight (sort keys %flight_start) {
			print TEXOUT "{\\large Flight $flight Start: ";
			print TEXOUT $m->comp("/funclib/showtime.mas",
				dt     => $flight_start{$flight},
				return => 1
			);
			print TEXOUT "} \n";
		}
	} else {
		print TEXOUT "{\\large Start: ";
		print TEXOUT $m->comp("/funclib/showtime.mas",
			dt     => $start,
			return => 1
		);
		print TEXOUT "} \n";
	}

	if ($prep_offset) {
		print TEXOUT "\n\n";
		print TEXOUT "{\\normalsize Draw Begins: ";
		print TEXOUT $m->comp("/funclib/showtime.mas",
			dt     => $prep_offset,
			return => 1
		);
		print TEXOUT "} \n";
	}

	print TEXOUT "} \n";
	print TEXOUT "\\linespread{1}\n";
	print TEXOUT " \\hfill \\LARGE {\\bf ".Tab::texify($round->event->name)." } \n";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";

	my $switch;
	my $length;
	my %panel_entries = ();
	my %designate;

	foreach my $entry (@round_entries) {

		next if $entry->dropped;
		push @{$panel_entries{$entry->panelid}}, $entry;

		my $moniker;

		if ($schools) {
			if ($ncfl) {
				$moniker = $entry->regioncode." ";
			} else {
				$moniker = $entry->schoolcode." ";
			}
		}

		$designate{$entry->id} = Tab::texify($moniker.$entry->code." ".$entry->name) if $code_style eq "both";
		$designate{$entry->id} = Tab::texify($moniker.$entry->name) if $code_style eq "names";
		$designate{$entry->id} = Tab::texify($moniker.$entry->code) if $code_style eq "codes";

		my $doubled = scalar (keys %{$doubled{$entry->id}});
		foreach (1 .. $doubled) {
			$designate{$entry->id} .= "*";
		}

		$length = length($designate{$entry->id}) if length($designate{$entry->id}) > $length;
	}

	$length++;

	my %panel_judges = ();
	my $judge_length;

	foreach my $judge (@round_judges) {

		push @{$panel_judges{$judge->panelid}}, $judge;

		my $moniker;

		if ($ncfl) {
			if ($judge->regioncode) {
				$moniker = $judge->regioncode." ";
			} else {
				$moniker .= "XX";
			}
		} else {
			if ($judge->schoolcode) {
				$moniker = $judge->schoolcode." ";
			} else {
				$moniker .= "XX";
			}
		}

		if ($judge->code) {
			$moniker .= " " if $moniker;
			$moniker .= $judge->code;
		}

		$moniker .= " " if $moniker;
		$moniker .= $judge->first." ".$judge->last;
		$designate{"J".$judge->id} = Tab::texify($moniker);
		$judge_length = length($designate{"J".$judge->id})
			if length($designate{"J".$judge->id}) > $judge_length;
	}


	my $room_length;
	foreach my $panel (@panels) {
		$room_length = length($panel->roomname)
			if length($panel->roomname) > $room_length;
	}

	my $remainder = $room_length + $judge_length * 1.3;

	if (scalar @panels > 10) {
		if ($ARGS{"fontsize"} eq "default"
			|| (not defined $ARGS{"fontsize"})
		) {
			$fontsize = "small"
		}
	} elsif (scalar @panels > 3) {
		if ($ARGS{"fontsize"} eq "default"
			|| (not defined $ARGS{"fontsize"})
		) {
			$fontsize = "normalsize";
		}
	}

	my $tabular = "\\begin{tabular}{p{".$room_length."ex}p{".$judge_length."ex}p{\\dimexpr\\textwidth-".$remainder."ex}}\n";

	print TEXOUT "\\".$fontsize."\n";
	print TEXOUT $tabular;
	print TEXOUT "\\rowcolor[rgb]{1.0,.94,.65}\[5.5pt\]\[5.5pt\]\n";
	print TEXOUT "\\textsb{ Room } & \\textsb{ Judging } & \\textsb{ Competitors } \n";
	print TEXOUT "\\end{tabular}\n";
	print TEXOUT "\\newline\n";

	my $current_flight;
	my $notfirst;

	@panels =
		map  { $_->[0] }
		sort { $a->[1] <=> $b->[1] }
		map  { [$_, $_->roomname=~/(\d+)/] }
		@panels;

	@panels =
		map  { $_->[0] }
		sort { uc($a->[1]) cmp uc($b->[1]) }
		map  { [$_, $_->roomname =~ /(\D+)/] }
		@panels;

	foreach my $panel (@panels) {

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{.92,.92,.90}\[5.5pt\]\[5.5pt\]\n" unless ($switch % 2);

		print TEXOUT Tab::texify($panel->roomname);
		if ($flighted) {
			print TEXOUT "\\vspace{1mm} \\newline\n";
			print TEXOUT "Flt ".$panel->flight;
		}
		print TEXOUT " & ";

		unless ($panel_judges{$panel->id} && @{$panel_judges{$panel->id}}) {
			@{$panel_judges{$panel->id}} = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		}

		if ($panel_judges{$panel->id}) {
			my $notfirst;
			foreach my $judge (@{$panel_judges{$panel->id}}) {
				print TEXOUT "\n\n " if $notfirst++;
				print TEXOUT $designate{"J".$judge->id};
			}
		}

		print TEXOUT " & ";
		print TEXOUT "\\raggedright\n ";

		foreach my $entry (sort {$a->speaks <=> $b->speaks} @{$panel_entries{$panel->id}}) {
			next if $entry->dropped;
			print TEXOUT "\\parbox[l][][c]{".$length."ex}{";
			print TEXOUT "\\".$fontsize."\n";
			print TEXOUT $designate{$entry->id};
			print TEXOUT "} ";
		}

		print TEXOUT "\n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";
		$switch++;

	}

	return;

</%init>
