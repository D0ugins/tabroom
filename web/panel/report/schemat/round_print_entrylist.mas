<%args>
	$round_id
	$filename
</%args>
<%init>

	my $fontsize = $ARGS{"fontsize"}; 
	$fontsize = "small" if $fontsize eq "default" || not defined $fontsize;
	
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my $tourn = $event->tourn;

	my %event_settings = $event->all_settings();

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

    my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select entry.id, entry.code, room.name, ballot.side, panel.flight, 
			GROUP_CONCAT(distinct judge.code SEPARATOR ',')

			from (panel, ballot, entry)

			left join room on room.id = panel.room
			left join judge on judge.id = ballot.judge

			where panel.round = ? 
				and panel.id = ballot.panel
				and ballot.entry = entry.id
				and ballot.judge = judge.id

			group by entry.id order by entry.code
	");

	$sth->execute($round->id);

	my %rooms; 

	my $max_room;
	my $max_judge;
	my $max_entry;

	while (
		my ($entry_id, $entry_code, $room_name, $ballot_side, $panel_flight, $judge_code) 
			= $sth->fetchrow_array()
	) { 

		$rooms{$entry_id}{"entry"}  = $entry_code;
		$rooms{$entry_id}{"sort"}   = $entry_code;
		$rooms{$entry_id}{"room"}   = $room_name;
		$rooms{$entry_id}{"judges"} = $judge_code;
		$rooms{$entry_id}{"flight"} = $panel_flight;

		$rooms{$entry_id}{"sort"} =~ s/[\D_]//g;

		unless ($event_settings{"no_side_constraints"}) { 
			$rooms{$entry_id}{"side"} = $aff_string if $ballot_side == 1;
			$rooms{$entry_id}{"side"} = $neg_string if $ballot_side == 2;
		}

		$max_room = length($room_name) 
			if length($room_name) > $max_room;

		$max_entry = length($entry_code) 
			if length($entry_code) > $max_entry;

		$max_judge = length($judge_code) 
			if length($judge_code) > $max_judge;
	}

	$max_room--;
	$max_room--;
	$max_entry--;
	$max_entry--;
	$max_judge--;
	$max_judge--;

	my $tabular = "\\begin{tabular}[t]{|p{".$max_entry."em}p{".$max_room."em} p{.1in}p{.2in}p{".$max_judge."em}|}\n";

	my $header .= "\\hline\n";
	$header .= "\\rowcolor[rgb]{1,.95,.72}\[5.5pt\]\[5.5pt\]\n";
	$header .= "\\textsb{Entry} & \\textsb{Room} & \\textsb{Fl} & \\textsb{Side} & \\textsb{Judge} \\\\\n";
	$header .= "\\hline\n";

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my $filepath = $Tab::file_root."tmp/".$filename;
	open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\pagebreak[1]\n";
	print TEXOUT "\\noindent\n";
	print TEXOUT "\\textsb{\\Large ". Tab::texify($round->realname);
	print TEXOUT "} \\hfill \\textsb{\\Large ". Tab::texify($event->name);
	print TEXOUT "} \\hfill \\textsb{\\Large Start: ".Tab::nicetime($start)." } ";

	print TEXOUT " \\\\ \n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\$fontsize\n";

	my $counter;
	my $lap;

	print TEXOUT $tabular;
	print TEXOUT $header;

	foreach my $entry_id (
		sort {$rooms{$a}{"sort"} <=> $rooms{$b}{"sort"}} 
		keys %rooms
	) { 

		if ($counter > 45) { 
			print TEXOUT "\\hline\n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\hspace{1mm}\n";
			print TEXOUT $tabular;
			print TEXOUT $header;
			undef $counter;
			if ($lap++ > 1) { 
				$counter = -3;
			}
		}

		print TEXOUT "\\rowcolor[rgb]{.90,.90,.90}\[5.5pt\]\[5.5pt\]\n" if $counter++ % 2;

		print TEXOUT Tab::texify($rooms{$entry_id}{"entry"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($rooms{$entry_id}{"room"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($rooms{$entry_id}{"flight"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($rooms{$entry_id}{"side"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($rooms{$entry_id}{"judges"});
		print TEXOUT "\\\\ \n";

	}

	print TEXOUT "\\hline\n";
	print TEXOUT "\\end{tabular}\n";
	print TEXOUT "\\strut\n";

</%init>
