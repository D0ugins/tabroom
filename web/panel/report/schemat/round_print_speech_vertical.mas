<%args>
	$round_id
	$filename
	$schools        => undef
	$states         => undef
	$event_settings => undef
	$tourn_settings => undef
</%args>
<%init>

	my $filepath = $Tab::file_root."tmp/".$filename;
	my $fontsize = $ARGS{"fontsize"};
	$fontsize = "small" if $fontsize eq "default" || not defined $fontsize;

	use POSIX;

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my $tourn = $event->tourn;

	my $flighted = $round->flighted if $round->flighted > 1;
	my $no_judge_codes++ if	$event->category->setting("no_codes");
	undef $schools if $tourn_settings->{"school_codes"} eq "none";

	unless ($event_settings) {
		%{$event_settings} = $event->all_settings();
	}

	my $code_type = $event_settings->{"code_style"};
	my $code_style = $event_settings->{"schem_designation"};
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my @panels = $m->comp(
		"/funclib/round_panels.mas",
		round   => $round,
		sort_by => "room"
	);

	if ($flighted > 1) {
		@panels = sort {$a->flight <=> $b->flight} @panels;
		my %room_panel = map {$_->id => $_->roomname} @panels;
		@panels = sort {$room_panel{$a} cmp $room_panel{$b}} @panels;
	}

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my $prep_offset;
	if ($event_settings->{"prep_offset"}) {
		$prep_offset = $start->clone();
		$prep_offset->subtract(minutes => $event_settings->{"prep_offset"});
	}

	my %flight_start;
	my $flight_offset = $event_settings->{"flight_offset"};

	if ($flighted && $flight_offset) {
		foreach my $flight (1 .. $round->flighted) {
			my $offset_time = $start->clone;
			my $offset_factor = $flight_offset * ($flight - 1);
			$offset_time->add( minutes => $offset_factor );
			$flight_start{$flight} = $offset_time;
		}
	}

	my %doubled = $m->comp("/funclib/round_doubled.mas", round => $round);

	print TEXOUT "\\sloppy\n";
	print TEXOUT "\\raggedright\n";
	print TEXOUT "\\indent\n";
	print TEXOUT "\\textsb{\\LARGE ". Tab::texify($round->realname)." } ";
	print TEXOUT "\\hfill";
	print TEXOUT " \\parbox{1.5in}{";

	if ($flighted) {
		foreach my $flight (sort keys %flight_start) {
			print TEXOUT "{\\large Flight $flight Start: ";
			print TEXOUT $m->comp("/funclib/showtime.mas",
				dt     => $flight_start{$flight},
				return => 1
			);
			print TEXOUT "} \n";
		}
	} else {
		print TEXOUT "{\\large Start: ";
		print TEXOUT $m->comp("/funclib/showtime.mas",
			dt     => $start,
			return => 1
		);
		print TEXOUT "} \n";
	}

	if ($prep_offset) {
		print TEXOUT "\n\n";
		print TEXOUT "{\\normalsize Draw Begins: ";
		print TEXOUT $m->comp("/funclib/showtime.mas",
			dt     => $prep_offset,
			return => 1
		);
		print TEXOUT "} \n";
	}

	print TEXOUT "} \n";

	print TEXOUT " \\hfill \\textsb{\\LARGE ".Tab::texify($round->event->name)." } \n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";

	my $max_lines;
	my %panel_judges;
	my %panel_entries;

	my @round_judges = $m->comp('/funclib/round_judges.mas', round => $round);
	my @round_entries = $m->comp('/funclib/round_entries.mas', round => $round);

	my $length;
	my %entry_codes;

	foreach my $entry (@round_entries) {

		push @{$panel_entries{$entry->panelid}}, $entry;

		my $raw;

		if ($states && $tourn_settings->{"nsda_nats"}) {
			$entry_codes{$entry->id} .= "\\parbox{.15in}{".Tab::texify($entry->regioncode)."} ";
			$raw .= $entry->regioncode." ";
		} elsif ($schools && $tourn_settings->{"ncfl"}) {
			$entry_codes{$entry->id} .= Tab::texify($entry->regioncode)." ";
			$raw .= $entry->regioncode." ";
		} elsif ($schools) {
			$entry_codes{$entry->id} .= Tab::texify($entry->schoolcode)." ";
			$raw .= $entry->schoolcode." ";
		}

		if ($code_style ne "names") {
			$entry_codes{$entry->id} .= Tab::texify($entry->code);
			$raw .= $entry->code;
		}

		if ($code_style eq "both") {
			$entry_codes{$entry->id} .= " ";
			$raw .= $entry->code;
		}

		if ($code_style ne "codes") {
			$entry_codes{$entry->id} .= Tab::texify($entry->name);
			$raw .= $entry->name
		}

		$length = length($raw) if length($raw) > $length;
	}

	my $fontplus++ if $length < 7;
	my %judge_codes;

	foreach my $judge (@round_judges) {

		push @{$panel_judges{$judge->panelid}}, $judge;

		if ((not defined $no_judge_codes) && $judge->code) {
			$judge_codes{$judge->id} .= $judge->code." ".$judge->last;
		} else {
			$judge_codes{$judge->id} .= $judge->first." ".$judge->last;
		}

		$length = length($judge_codes{$judge->id}) if length($judge_codes{$judge->id}) > $length;

		if ($tourn_settings->{"ncfl"}) {
			$judge_codes{$judge->id} .= "\\hfill \\emph{\\scriptsize ".$judge->regioncode."} \\hspace{2mm} \\strut";
		} elsif ($judge->schoolcode) {
			$judge_codes{$judge->id} .= "\\hfill \\emph{\\scriptsize ".$judge->schoolcode."} \\hspace{2mm} \\strut";
		}
	}

	foreach my $panel (@panels) {
		my $lines = scalar @{$panel_judges{$panel->id}} if $panel_judges{$panel->id};
		$lines += scalar @{$panel_entries{$panel->id}} if $panel_entries{$panel->id};
		$lines++;
		$max_lines = $lines if $lines > $max_lines;
	}

	@panels =
		map  { $_->[0] }
		sort { $a->[1] <=> $b->[1] }
		map  { [$_, $_->roomname=~/(\d+)/] }
		@panels;

	@panels =
		map  { $_->[0] }
		sort { uc($a->[1]) cmp uc($b->[1]) }
		map  { [$_, $_->roomname =~ /(\D+)/] }
		@panels;

    if ($ARGS{"by_section"} || $ARGS{'states'}) {
        @panels = sort {
            length($a->letter) <=> length($b->letter)
            || $a->letter cmp $b->letter
        } @panels;
    }

	my $height = .24 * $max_lines;
	$fontsize = $ARGS{"fontsize"};
	$fontsize = "small" if $fontsize eq "default";

	print TEXOUT "\\$fontsize\n";

	my $center = "c";
	$center = "l" if $code_type eq "names";
	$center = "l" if $code_type eq "schoolname_code";
	$center = "l" if $code_type eq "schoolname_code";
	$center = "l" if $code_type eq "school_names";
	$center = "l" if $code_type eq "school_first_names";
	$center = "l" if $code_type eq "school_last_names";
	$center = "l" if $code_type eq "school_name_only";
	$center = "l" if $code_type eq "code_name";
	$center = "l" if $code_style eq "both";
	$center = "l" if $code_style eq "names";

	foreach my $panel (@panels) {

		print TEXOUT "\\parbox[t][][t]{".$length."ex}{";
		print TEXOUT "\\$fontsize\n";

    	if ($ARGS{"by_section"} || $ARGS{'states'}) {
			print TEXOUT "\\parbox{2ex}{\\textsb{".Tab::texify($panel->letter)."}} -- ";
		}

		print TEXOUT "\\textsb{In ".Tab::texify($panel->roomname)."}" if $panel->room;
		print TEXOUT " \\hspace{1mm} Flight ".Tab::texify($panel->flight) if $flighted > 1;
		print TEXOUT " \\vspace{-2mm} \n";
		print TEXOUT " \\newline";
		print TEXOUT "\\makebox[".$length."ex][c]{\\hrulefill}\n";
		print TEXOUT " \\newline\n";

		unless ($panel_judges{$panel->id} && @{$panel_judges{$panel->id}}) {
			@{$panel_judges{$panel->id}} = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		}

		foreach my $judge (@{$panel_judges{$panel->id}}) {
			print TEXOUT "\\truncate{".$length."ex}{".$judge_codes{$judge->id}." }\n\n";
		}
		print TEXOUT "\\vspace{-2mm} \n";

		print TEXOUT "\\makebox[".$length."ex][c]{\\hrulefill}\n";
		print TEXOUT "\\newline\n";

		foreach my $entry (@{$panel_entries{$panel->id}}) {

			my $doubled = scalar (keys %{$doubled{$entry->id}});
			print TEXOUT "\\makebox[".$length."ex][$center]{\n";

			if ($fontplus) {
				print TEXOUT "\\Huge\n" if $fontsize eq "huge";
				print TEXOUT "\\huge\n" if $fontsize eq "LARGE";
				print TEXOUT "\\LARGE\n" if $fontsize eq "Large";
				print TEXOUT "\\Large\n" if $fontsize eq "large";
				print TEXOUT "\\large\n" if $fontsize eq "normalsize";
				print TEXOUT "\\normalsize\n" if $fontsize eq "small";
				print TEXOUT "\\small\n" if $fontsize eq "footnotesize";
				print TEXOUT "\\footnotesize\n" if $fontsize eq "scriptsize";
				print TEXOUT "\\scriptsize\n" if $fontsize eq "tiny";
			} else {
				print TEXOUT "\\$fontsize\n";
			}
			print TEXOUT $entry_codes{$entry->id};
			foreach (1 .. $doubled) {
				print TEXOUT "*";
			}
			print TEXOUT "}\n\n";
		}

		print TEXOUT "\\vspace{3ex}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\hspace{1mm}\n";
	}

	print TEXOUT "\\newline\n";
	return;

</%init>
