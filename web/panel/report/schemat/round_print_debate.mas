<%args>
	$round_id
	$filename
	$judge_codes => undef
</%args>
<%init>

	$ARGS{"by_section"}++ if $judge_codes;

	my $round = Tab::Round->retrieve($round_id);

	my $fontsize = $ARGS{"fontsize"};
	$fontsize = "small" if $fontsize eq "default" || not defined $fontsize;

	my $round_name = $round->name;
	$round_name--;

	my $event    = $round->event;
	my $tourn    = $event->tourn;
	my $category = $event->category;

	my $ncfl++ if $tourn->setting("ncfl");
	my $nsda++ if $tourn->setting("nsda_nats");
	my %event_settings = $event->all_settings();

	my $online++ if $event->setting("online_mode");
	undef $online if $event->setting("online_hybrid");

	my $no_codes++ if $category->setting("no_codes");
	my $no_side_constraints++ if $event_settings{'no_side_constraints'};
	my $include_room_notes if $round->setting("include_room_notes");

	my $sidelocks;

	if ($tourn->setting("nsda_nats")
		&& (not defined $event_settings{"not_nats"})
	) {

	} elsif (
		(not defined $no_side_constraints)
		&& (
			$round->type eq "elim"
			|| $round->type eq "final"
			|| $round->type eq "runoff"
	   )
	) {
		$sidelocks++;
		undef $ARGS{"by_judge"};
	}

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my %pods;

	my $dbh = Tab::DBI->db_Main();
	my $sth = $dbh->prepare("

		select
			entry.id, entry.code, entry.name,
			pod.value,
			school.id, school.name, school.code, school.state,
			region.id, region.code, region.name, encfl_region.value,
			district.id, district.code, district.name,
			ballot.id, ballot.side, ballot.chair,
			panel.id, panel.letter, panel.bye, panel.flight,
			room.name, room.notes,
			judge.id, judge.code, judge.first, judge.last,
			judge_school.id, judge_school.code, judge_school.name,
			judge_region.id, judge_region.code, judge_region.name, jncfl_region.value,
			judge_district.id, judge_district.code, judge_district.name,
			cr_tier.name, gcr_tier.name, tab_rating.value,
			pod.value

		from (ballot, panel, entry, round, event)

			left join room on panel.room = room.id
			left join judge on ballot.judge = judge.id
			left join school on entry.school = school.id
			left join region on school.region = region.id
			left join region_setting encfl_region
				on encfl_region.region = region.id
				and encfl_region.tag = 'region_".$event->id."'

			left join district on school.district = district.id
			left join school judge_school on judge.school = judge_school.id
			left join region judge_region on judge_school.region = judge_region.id
			left join region_setting jncfl_region
				on jncfl_region.region = judge_region.id
				and jncfl_region.tag = 'region_".$event->id."'
			left join district judge_district on judge_school.district = judge_district.id
			left join entry_setting pod on pod.entry = entry.id and pod.tag = 'pod'

			left join rating coach_rating
				on coach_rating.rating_subset = event.rating_subset
				and coach_rating.judge = judge.id

			left join rating_tier cr_tier
				on coach_rating.rating_tier = cr_tier.id

			left join rating gcoach_rating
				on gcoach_rating.judge = judge.id

			left join rating_tier gcr_tier
				on gcoach_rating.rating_tier = gcr_tier.id

			left join judge_setting tab_rating
				on tab_rating.judge = judge.id
				and tab_rating.tag = 'tab_rating'

		where round.id = ?
			and panel.round = round.id
			and ballot.panel = panel.id
			and ballot.entry = entry.id
			and event.id = round.event
		order by
			panel.letter, ballot.side, judge.last DESC
	");

	$sth->execute($round->id);

	my %panels;
	my %room_judge_count;

	while (
		my (
			$eid, $entry_code, $entry_name,
			$pod_id,
			$school_id, $school_name, $school_code, $school_state,
			$region_id, $region_code, $region_name, $encfl_region,
			$district_id, $district_code, $district_name,
			$ballot_id, $ballot_side, $ballot_chair,
			$pid, $panel_letter, $panel_bye, $panel_flight,
			$room_name, $room_notes,
			$jid, $judge_code, $judge_first, $judge_last,
			$judge_school_id, $judge_school_name, $judge_school_code,
			$judge_region_id, $judge_region_name, $judge_region_code, $jncfl_region,
			$judge_district_id, $judge_district_name, $judge_district_code,
			$coach_rating, $unspec_coach_rating, $tab_rating
		) = $sth->fetchrow_array()
	) {

		$panels{$pid}{"letter"} = $panel_letter;
		$panels{$pid}{"room_name"} = $room_name;
		$panels{$pid}{"room_notes"} = $room_notes;

		my $room_number = $room_name;
		my $room_string = $room_name;
		$room_number =~  s/[\D_]//g;
		$room_string =~  s/\d//g;
		$panels{$pid}{"room_number"} = $room_number;
		$panels{$pid}{"room_string"} = $room_string;

		if ($panel_bye) {
			$panels{$pid}{"flight"} = 1;
		} else {
			$panels{$pid}{"flight"} = $panel_flight;
		}

		if ($panel_bye) {
			$panels{$pid}{"bye"}++;
		}

		unless ($panels{$pid}{"judge_name"}) {
			$panels{$pid}{"judge_name"} = $judge_last;
		}

		my $tag = $ballot_side;

		unless ($panels{$pid}{"judges"}{$jid}) {
			$panels{$pid}{"judges"}{$jid}{"chair"} = $ballot_chair;
			$panels{$pid}{"judges"}{$jid}{"code"} = $judge_code;
			$panels{$pid}{"judges"}{$jid}{"first"} = $judge_first;
			$panels{$pid}{"judges"}{$jid}{"last"} = $judge_last;
			$panels{$pid}{"judges"}{$jid}{"name"} = $judge_last.", ".$judge_first;
			$panels{$pid}{"judges"}{$jid}{"school_name"} = $judge_school_name;
			$panels{$pid}{"judges"}{$jid}{"school_code"} = $judge_school_code;
			$panels{$pid}{"judges"}{$jid}{"region_name"} = $judge_region_name;
			$panels{$pid}{"judges"}{$jid}{"region_code"} = $judge_region_code;
			$panels{$pid}{"judges"}{$jid}{"region_ncfl"} = $jncfl_region;

			$panels{$pid}{"judges"}{$jid}{"district_name"} = $judge_district_name;
			$panels{$pid}{"judges"}{$jid}{"district_code"} = $judge_district_code;

			if ($coach_rating) {
				$panels{$pid}{"judges"}{$jid}{"coach_rating"} = $coach_rating;
			} elsif ($unspec_coach_rating) {
				$panels{$pid}{"judges"}{$jid}{"coach_rating"} = $unspec_coach_rating;
			}

			$panels{$pid}{"judges"}{$jid}{"tab_rating"} = $tab_rating;

			foreach my $ttag (keys %{$panels{$pid}{"judges"}{$jid}}) {
				$panels{$pid}{"judges"}{$jid}{$ttag} = Tab::texify($panels{$pid}{"judges"}{$jid}{$ttag});
			}
		}

		if (
			$panels{$pid}{"judges"}
			&& (scalar (keys %{$panels{$pid}{"judges"}}) > $room_judge_count{$room_name})
		) {
			$room_judge_count{$room_name} = scalar (keys %{$panels{$pid}{"judges"}});
		}

		unless ($panels{$pid}{"entries"}{$tag}{$eid}) {

			if ($pod_id) {
				unless (defined $pods{$pod_id}) {
					$pods{$pod_id} = $event->setting("pod_".$pod_id);
				}

				unless ($pods{$pod_id}) {
					$pods{$pod_id} = " ";
				}
				$panels{$pid}{"entries"}{$tag}{$eid}{"pod"} = $pods{$pod_id};
			}

			$panels{$pid}{"entries"}{$tag}{$eid}{"id"} = $eid;
			$panels{$pid}{"entries"}{$tag}{$eid}{"code"} = $entry_code;
			$panels{$pid}{"entries"}{$tag}{$eid}{"name"} = $entry_name;
			$panels{$pid}{"entries"}{$tag}{$eid}{"school_name"} = $school_name;
			$panels{$pid}{"entries"}{$tag}{$eid}{"school_code"} = $school_code;

			$panels{$pid}{"entries"}{$tag}{$eid}{"region_name"} = $region_name;
			$panels{$pid}{"entries"}{$tag}{$eid}{"region_code"} = $region_code;
			$panels{$pid}{"entries"}{$tag}{$eid}{"region_ncfl"} = $encfl_region;

			$panels{$pid}{"entries"}{$tag}{$eid}{"district_name"} = $district_name;
			$panels{$pid}{"entries"}{$tag}{$eid}{"district_code"} = $district_code;

			foreach my $ttag (keys %{$panels{$pid}{"entries"}{$tag}{$eid}}) {
				$panels{$pid}{"entries"}{$tag}{$eid}{$ttag} = Tab::texify($panels{$pid}{"entries"}{$tag}{$eid}{$ttag});
			}
		}
	}

	my %entry_wins = ();
	my %entry_losses = ();

	if ($ARGS{"record"}) {
		%entry_wins = $m->comp("/funclib/entry_wins.mas",
			event => $round->event,
			round => $round
		);

		%entry_losses = $m->comp("/funclib/entry_losses.mas",
			event => $round->event,
			round => $round
		);
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my $flighted =  $round->flighted;
	$flighted = 1 unless $flighted;
	$fontsize = "small" if $fontsize eq "default" || not defined $fontsize;
	my $flight_offset = $event_settings{"flight_offset"};

	my $filepath = $Tab::file_root."tmp/".$filename;

	open (TEXOUT, ">>$filepath.tex");

	my $tabular;
	my $letters;

	my $room_size;
	my $judge_size;

	if ($event_settings{"show_panel_letters"} || $ARGS{'by_section'}) {
		$letters = "p{.075in}";
	}

	if ($flighted == 2) {
		$tabular = "\\begin{tabular}{".$letters."p{.075in}p{1.05in}p{1.05in}p{1in}p{1in}}\n";
	} elsif ($flighted > 2) {
		$tabular = "\\begin{tabular}{".$letters."p{.075in}p{1.4in}p{1.4in}p{1.9in}p{1.5in}}\n";
	} elsif ($online) {
		$tabular = "\\begin{tabular}{".$letters."p{2in}p{2in}p{1in}p{2in}}\n";
	} else {
		$tabular = "\\begin{tabular}{".$letters."p{1.5in}p{1.5in}p{2in}p{2in}}\n";
	}

	my $entry_size = "1.5";
	$entry_size = "1.15" if $flighted == 2;

	if ($ARGS{"schools"}) {
		$entry_size -= .55;
	}

	$entry_size .= "in";

	print TEXOUT "\\pagebreak[1]\n";
	print TEXOUT "\\noindent\n";
	print TEXOUT "{\\bf \\Large ". Tab::texify($round->realname);
	print TEXOUT "} \\hfill {\\bf \\Large ". Tab::texify($event->name);
	print TEXOUT "} \\hfill {\\bf \\Large Start: ".Tab::nicetime($start)." } ";

	print TEXOUT " \\\\ \n";
	print TEXOUT "\\smallskip\n" if $flighted;
	print TEXOUT "\\newline\n";
	print TEXOUT "\\".$fontsize."\n";

	my @panel_ids = keys %panels;

	@panel_ids = sort {
		$panels{$a}{"bye"} <=> $panels{$b}{"bye"}
		|| $panels{$a}{"room_string"} cmp $panels{$b}{"room_string"}
		|| $panels{$a}{"room_number"} <=> $panels{$b}{"room_number"}
		|| $panels{$a}{"flight"} <=> $panels{$b}{"flight"}
		|| $panels{$a}{"judge_name"} cmp $panels{$b}{"judge_name"}
	} @panel_ids;

	if ($ARGS{"by_judge"}) {
		@panel_ids = sort {
			$panels{$a}{"bye"} <=> $panels{$b}{"bye"}
			|| $panels{$a}{"judge_name"} cmp $panels{$b}{"judge_name"}
		} @panel_ids;
	}

	if ($ARGS{"by_section"}) {
		@panel_ids = sort {
			length($panels{$a}{"panel_letter"}) <=> length($panels{$b}{"panel_letter"})
			|| $panels{$a}{"panel_letter"} cmp $panels{$b}{"panel_letter"}
		} @panel_ids;
	}

	my $num_panels = scalar @panel_ids;

	if ($ARGS{"fontsize"} eq "default" || (not defined $ARGS{"fontsize"})) {

		$fontsize = "\\footnotesize\n";

		if ($flighted % 2) {
			$fontsize = "\\small\n" if ($num_panels < 12);
			$fontsize = "\\scriptsize\n" if ($num_panels > 32);
			$fontsize = "\\tiny\n" if ($num_panels > 59);
		} else {
			$fontsize = "\\small\n" if ($num_panels < 24);
			$fontsize = "\\scriptsize\n" if ($num_panels > 96);
			$fontsize = "\\tiny\n" if ($num_panels > 84) && ($num_panels < 108);
			$fontsize = "\\tiny\n" if ($num_panels > 168);
		}

		if ($fontsize eq "scriptsize") {
			$fontsize = "\\tiny\n" if $event_settings{"code_style"} eq "school_names";
			$fontsize = "\\tiny\n" if $event_settings{"code_style"} eq "school_first_names";
			$fontsize = "\\tiny\n" if $event_settings{"code_style"} eq "school_last_names";
		} elsif ($fontsize eq "footnotesize") {
			$fontsize = "\\scriptsize\n" if $event_settings{"code_style"} eq "school_names";
			$fontsize = "\\scriptsize\n" if $event_settings{"code_style"} eq "school_first_names";
			$fontsize = "\\scriptsize\n" if $event_settings{"code_style"} eq "school_last_names";
		} elsif ($fontsize eq "small") {
			$fontsize = "\\footnotesize\n" if $event_settings{"code_style"} eq "school_names";
			$fontsize = "\\footnotesize\n" if $event_settings{"code_style"} eq "school_first_names";
			$fontsize = "\\footnotesize\n" if $event_settings{"code_style"} eq "school_last_names";
		}

	} else {

		$fontsize = "\\".$ARGS{"fontsize"}."\n";
	}

	my $switch = 1;
	my $last_room;
	my $last_flight;
	my $notfirst;

	my $num_passes = $flighted;
	$num_passes = 1 if $num_passes == 2;

	foreach my $flight (1 .. $num_passes) {

		if ($flighted % 2 && $flighted > 1) {

			if ($notfirst) {
				print TEXOUT "\\medskip\n";
				print TEXOUT "\\newline\n";
			}

			print TEXOUT "{\\large Flight ".$flight;

			if ($notfirst++ && $flight_offset) {
				my $offset_time = $start->clone;
				my $offset_factor = $flight_offset * ($flight - 1);
				$offset_time->add( minutes => $offset_factor );
				print TEXOUT " \\hfill Begins at ".Tab::nicetime($offset_time)." ";
			}

			print TEXOUT " } \n";
			print TEXOUT "\\newline\n";
		}

		my $pass = 1;
		$pass++ if $flighted == 2;

		foreach (1 .. $pass) {

			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{1.0,.94,.65}\[6pt\]\[6pt\]\n";

			if ($event_settings{"show_panel_letters"} || $ARGS{"by_section"}) {
				print TEXOUT '\# &';
			}

			if ($sidelocks || $no_side_constraints) {

				if ($flighted > 1) {
					print TEXOUT "Fl & Entries & & Room & Judge \\\\ \n";
				} else {
					print TEXOUT "Teams & & Room & Judge \\\\ \n";
				}

			} else {

				if ($flighted > 1) {
					print TEXOUT "Fl & ".Tab::texify($aff_string)." & ";
					print TEXOUT Tab::texify($neg_string)." & Room & Judge \\\\ \n";
				} else {
					print TEXOUT Tab::texify($aff_string)." & ";
					print TEXOUT Tab::texify($neg_string)." & Room & Judge \\\\ \n";
				}
			}

			print TEXOUT "\\end{tabular}\n";
		}

		print TEXOUT $fontsize;

		foreach my $pid (@panel_ids) {

			next unless $panels{$pid}{"entries"};

			my $panel_flight = $panels{$pid}{"flight"};
			$panel_flight = 1 if $panel_flight < 1;
			next if $flighted != 2 && $panel_flight != $flight;

			my $locked_aff;

			if ($sidelocks) {
				$locked_aff =  $m->comp(
					"/funclib/round_elim_dueaff.mas",
					panel_id => $pid
				);
			}

			unless ($last_room && $last_room eq $panels{$pid}{"room_name"}) {

				print TEXOUT "\\newline\n";
				$switch++;

				if ($flighted == 2 && $panel_flight == 2) {
					print TEXOUT $tabular."\n";
					print TEXOUT "\\rowcolor[rgb]{.91,.91,.91}\[5.5pt\]\[5.5pt\] " if $switch % 2;
					if ($event_settings{"show_panel_letters"} || $ARGS{'by_section'}) {
						print TEXOUT " & ";
					}

					print TEXOUT "& & & & ";

					undef $notfirst;
					foreach (1 .. $room_judge_count{$panels{$pid}{"room_name"}}) {

						if ($notfirst++) {
							print TEXOUT "\\newline\n";
							print TEXOUT "\\vspace{1mm}\n";
						}
						print TEXOUT "\\strut\n";
					}

					print TEXOUT "\\\\ \n \\end{tabular}\n" if $panel_flight == 2;
				}

				$last_room = $panels{$pid}{"room_name"};
			}

			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{.91,.91,.91}\[5.5pt\]\[5.5pt\]" if $switch % 2;

			if ($event_settings{"show_panel_letters"} || $ARGS{"by_section"}) {
				print TEXOUT $panels{$pid}{"panel_letter"}.' & ';
			}

			print TEXOUT $panel_flight." & " if $flighted > 1;
			my $counter;

			foreach my $side (sort {$a <=> $b} keys %{$panels{$pid}{"entries"}}) {

				my $notfirst;
				$counter++;

				foreach my $eid (sort {$a <=> $b} keys %{$panels{$pid}{"entries"}{$side}}) {

					if ($notfirst++) {
						print TEXOUT "\\newline\n";
					}

					print TEXOUT $fontsize;

					print TEXOUT "\\raggedright";

					if ($ARGS{"record"}) {
						print TEXOUT "\\parbox[c][][l]{.1in}{".$entry_wins{$eid}."-".$entry_losses{$eid}." }\n";
					}

					if ($ARGS{"schools"}) {

						print TEXOUT "\\parbox[l][][l]{.5in}{";
						print TEXOUT "\\truncate[]{.45in}{";
						if ($ncfl) {
							print TEXOUT $panels{$pid}{"entries"}{$side}{$eid}{"region_ncfl"}." -- ";
							print TEXOUT $panels{$pid}{"entries"}{$side}{$eid}{"region_code"};
						} elsif ($panels{$pid}{"entries"}{$side}{$eid}{"school_code"}) {
							print TEXOUT $panels{$pid}{"entries"}{$side}{$eid}{"school_code"};
						} else {
							my $short_name = $m->comp("/funclib/short_name.mas",
								name => $panels{$pid}{"entries"}{$side}{$eid}{"school_name"}
							);
							print TEXOUT Tab::texify($short_name);
						}
						print TEXOUT " } } ";
					}

					if ($ARGS{'states'}) {
						print TEXOUT "\\parbox{.2in}{ ".$panels{$pid}{"entries"}{$side}{$eid}{"region_code"}." } ";
					}

					print TEXOUT "\\parbox[c][][l]{$entry_size}{ \\raggedright ";
					print TEXOUT $panels{$pid}{"entries"}{$side}{$eid}{"code"};
					print TEXOUT "}";

					if ($side == 1 && $locked_aff) {
						print TEXOUT "\\newline \\hspace*{0pt} \\hfill $fontsize ".$aff_string."";
					} elsif ($side == 2 && $locked_aff) {
						print TEXOUT "\\newline \\hspace*{0pt} \\hfill $fontsize ".$neg_string."";
					} elsif ($sidelocks) {
						print TEXOUT "\\newline \\hspace*{0pt} \\hfill $fontsize Flip"
					}

				}
				print TEXOUT " & ";
			}

			while ($counter < 2) {
				print TEXOUT " & ";
				$counter++;
			}

			print TEXOUT $fontsize;

			my $roomname = Tab::texify($panels{$pid}{"room_name"});
			$roomname = "Online" if ($online) && (not defined $roomname);
			$roomname = "Ask Tab" unless $roomname;

			if ($include_room_notes && $panels{$pid}{"room_notes"}) {
				$roomname = " \\parbox[l][][l]{\\textwidth}{\\vspace{.25\\baselineskip} ".$roomname." \\\\ ".$panels{$pid}{"room_notes"}." \\vspace{.25\\baselineskip}} ";
			}

			if ($panels{$pid}{"bye"}) {
				print TEXOUT " BYE ";
			} elsif ($flighted > 1) {
				print TEXOUT "$roomname & ";
			} else {
				print TEXOUT "$roomname & "
			}

			undef $notfirst;

			if ($panels{$pid}{"judges"} && (not defined $panels{$pid}{"bye"})) {

				foreach my $jid (
					sort {
						$panels{$pid}{"judges"}{$a}{"last"} cmp $panels{$pid}{"judges"}{$b}{"last"}
						|| $panels{$pid}{"judges"}{$a}{"first"} cmp $panels{$pid}{"judges"}{$b}{"first"}
					} keys %{$panels{$pid}{"judges"}}
				) {

					if ($notfirst++) {
						print TEXOUT "\\smallskip \\newline\n";
					}

					my $tab_rating = $panels{$pid}{"judges"}{$jid}{"tab_rating"};
					my $coach_rating = $panels{$pid}{"judges"}{$jid}{"coach_rating"};

					print TEXOUT $fontsize;
					print TEXOUT " *" if $panels{$pid}{"judges"}{$a}{"chair"};

					if ($ncfl && $ARGS{"schools"}) {

						if ($panels{$pid}{"judges"}{$jid}{"school_name"}) {

							print TEXOUT "\\truncate[]{.2in}{".$panels{$pid}{"judges"}{$jid}{"region_code"}." }";
							print TEXOUT "\\truncate[]{.14in}{".$panels{$pid}{"judges"}{$jid}{"region_ncfl"}." }";

						} else {
							print TEXOUT "\\truncate[]{.34in}{HR}";
						}

						print TEXOUT "\\truncate[]{.2in}{".$coach_rating."}";

						if ($no_codes) {
							print TEXOUT "\\truncate[]{.3in}{".$panels{$pid}{"judges"}{$jid}{"code"}."}";
						} else {
							print TEXOUT "\\truncate[]{.3in}{".$panels{$pid}{"judges"}{$jid}{"name"}."}";
						}

					} elsif ($ncfl) {

						if ($no_codes) {
							print TEXOUT "\\truncate[]{.3in}{".$panels{$pid}{"judges"}{$jid}{"name"}." }";
						} else {
							print TEXOUT "\\truncate[]{.3in}{".$panels{$pid}{"judges"}{$jid}{"code"}." }";
						}

					} else {

						if ($flighted > 1) {
							print TEXOUT "\\truncate[]{.95in}{";
						} else {
							print TEXOUT "\\truncate[]{1.90in}{";
						}

						if ($ARGS{"schools"}) {

							print TEXOUT $panels{$pid}{"judges"}{$jid}{"tab_rating"}." ";
							print TEXOUT $panels{$pid}{"judges"}{$jid}{"coach_rating"}." ";

							if ($panels{$pid}{"judges"}{$jid}{"school_code"}) {

								print TEXOUT "\\parbox[c][][l]{.5in}{";
								print TEXOUT "\\truncate[]{.45in}{";
								print TEXOUT $panels{$pid}{"judges"}{$jid}{"school_code"};
								print TEXOUT " } } ";

							} else {

								my $short_name = $m->comp("/funclib/short_name.mas",
									name => $panels{$pid}{"judges"}{$jid}{"school_name"}
								);

								if ($flighted > 1) {
									print TEXOUT "\\truncate[]{.9in}{".Tab::texify($short_name)."} \\newline ";
								} else {
									print TEXOUT "\\truncate[]{.1.8in}{".Tab::texify($short_name)."} \\newline ";
								}

							}
						}

						print TEXOUT " ".$panels{$pid}{"judges"}{$jid}{"name"}." }";
					}
				}
			}
			print TEXOUT "\n\\end{tabular}\n";
		}
	}

</%init>


