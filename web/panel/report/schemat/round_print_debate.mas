<%args>
	$round_id
	$filename
	$schools => undef
	$record  => undef
	$by_judge => undef
</%args>
<%init>
	
	my $round = Tab::Round->retrieve($round_id);

	my $round_name = $round->name;
	$round_name--;
	my $tourn = $round->event->tourn;

	my $ncfl++ if $tourn->setting("ncfl");

	my $event = $round->event;
	my %event_settings = $event->all_settings();

	my $category = $event->category;

	my $round_robin++ if $event_settings{"round_robin"};

	my $codes = $tourn->setting("schemat_display");
	my $coach_ratings = $category->setting("coach_ratings");
	my $tab_ratings = $category->setting("tab_ratings");

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	undef $by_judge if $round->type eq "elim";
	undef $by_judge if $round->type eq "final";

	Tab::Panel->columns(TEMP => "judgename");
	Tab::Panel->columns(TEMP => "roomname");
	Tab::Panel->columns(TEMP => "roomnotes");

	Tab::Panel->set_sql( schemat => "
		select panel.*, room.name as roomname, room.notes as roomnotes, judge.last as judgename
		from panel
		left join room on room.id = panel.room
		left join ballot on ballot.panel = panel.id
		left join judge on judge.id = ballot.judge
		where panel.round = ? 
		group by panel.id
		order by panel.letter");

	my @panels = Tab::Panel->search_schemat($round->id);

	my %entry_wins = (); 

	my $no_side_constraints++ if $event_settings{'no_side_constraints'};

	my $sidelocks++ 
		if ($round->type eq "elim" || $round->type eq "final") 
		&& not defined $no_side_constraints;

	undef $sidelocks if $tourn->setting("nsda_nats") && (not defined $event_settings{"not_nats"});

	my $no_codes++ if $category->setting("no_codes");

	if ($record) { 
		%entry_wins = $m->comp("/funclib/entry_wins.mas", 
			event => $round->event, 
			round => $round
		);
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my $flighted =  $round->flighted;
	my $flight_offset = $event_settings{"flight_offset"};

	my $filepath = $Tab::file_root."tmp/".$filename;

	open (TEXOUT, ">>$filepath.tex");

	my $tabular;

	$tabular = "\\begin{tabular}{p{1.5in}p{1.5in}p{2in}p{1.5in}}\n";
	$tabular = "\\begin{tabular}{p{.075in}p{1.15in}p{1.15in}p{1in}p{.75in}}\n" if $flighted == 2;
	$tabular = "\\begin{tabular}{p{.075in}p{1.5in}p{1.5in}p{1.9in}p{1.5in}}\n" if $flighted > 2;

	my $entry_size = "1.5in";
	$entry_size = "1.15in" if $flighted == 2;

	print TEXOUT "\\pagebreak[1]\n";
	print TEXOUT "\\noindent\n";
	print TEXOUT "{\\bf \\Large ". Tab::texify($round->realname);
	print TEXOUT "} \\hfill {\\bf \\Large ". Tab::texify($event->name);
	print TEXOUT "} \\hfill {\\bf \\Large Start: ".Tab::nicetime($start)." } ";

	print TEXOUT " \\\\ \n";
	print TEXOUT "\\smallskip\n" if $flighted;
	print TEXOUT "\\newline\n";
	print TEXOUT "\\small\n";

	my @entries = $m->comp("/funclib/round_entries.mas", round => $round);

	my @judges = $m->comp("/funclib/round_judges.mas", round => $round);

	my @ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	my %coach_rating = ();

	if ($coach_ratings) {

		Tab::Rating->set_sql( "by_round" => "
			select distinct rating.*
			from rating, ballot, panel
			where panel.round = ? 
			and panel.id = ballot.panel
			and ballot.judge = rating.judge
		");

		my %tiername_by_id = map {$_->id => $_->name} $category->rating_tiers;

		my @ratings = Tab::Rating->search_by_round($round->id);

		%coach_rating = map {$_->judge->id => $tiername_by_id{$_->rating_tier->id} } @ratings;
	}

	my %pod_name;

    if ($round_robin) { 

        foreach my $entry (@entries) { 

            next if $pod_name{$entry->setting("pod")};

            $pod_name{$entry->setting("pod")} = $event_settings{"pod_".$entry->setting("pod")};

            $pod_name{$entry->setting("pod")} = "Pod ".$entry->setting("pod") 
				unless $pod_name{$entry->setting("pod")};
        }   
    }   

	my %judge_by_id = ();
	foreach my $judge (@judges) { 
		$judge_by_id{$judge->id} = $judge;
	}

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();
	my %judges_by_panel = ();

	foreach my $ballot (@ballots) { 

		push @{$ballots_by_entry{$ballot->entry->id}}, $ballot 
			if $ballot->entry;

		$panel_undone{$ballot->panel->id}++ 
			unless $ballot->audit;

		push @{$judges_by_panel{$ballot->panel->id}}, $judge_by_id{$ballot->judge->id} 
			if $ballot->judge
			&& $judge_by_id{$ballot->judge->id};
	}

	@panels = sort {$a->judgename cmp $b->judgename} @panels;
	@panels = sort {$a->flight <=> $b->flight} @panels if $flighted;
	@panels = sort {$a->roomname cmp $b->roomname} @panels;
	@panels = sort {$a->judgename cmp $b->judgename} @panels if $by_judge;
	@panels = sort {$a->bye <=> $b->bye} @panels;

	my $switch = 1;
	my $last_room;
	my $last_pod;
	my $last_flight;
	my $notfirst;

	my $num_passes = $flighted;
	$num_passes = 1 if $num_passes == 2;

	foreach my $flight (1 .. $num_passes) { 

		if ($flighted % 2 && $flighted > 1) { 

			if ($notfirst) {
				print TEXOUT "\\medskip\n";
				print TEXOUT "\\newline\n";
			}

			print TEXOUT "{\\large Flight ".$flight;
			
			if ($notfirst++ && $flight_offset) {
				my $offset_time = $start->clone;
				my $offset_factor = $flight_offset * ($flight - 1);
				$offset_time->add( minutes => $offset_factor );
				print TEXOUT " \\hfill Begins at ".Tab::nicetime($offset_time)." ";
			}

			print TEXOUT " } \n";

			print TEXOUT "\\newline\n";
		}

		my $pass = 1;
		$pass++ if $flighted == 2;

		foreach (1 .. $pass) { 

			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{1.0,.94,.65}\[6pt\]\[6pt\]\n";

			if ($sidelocks || $no_side_constraints) { 

				print TEXOUT "Fl & Entries & & Room & Judge \\\\ \n" 
					if $flighted > 1;

				print TEXOUT "Teams & & Room & Judge \\\\ \n" 
					unless $flighted > 1;

			} else { 

				print TEXOUT "Fl & ".Tab::texify($aff_string)." & ".Tab::texify($neg_string)." & Room & Judge \\\\ \n"
					if $flighted > 1;

				print TEXOUT Tab::texify($aff_string)." & ".Tab::texify($neg_string)." & Room & Judge \\\\ \n"
					unless $flighted > 1;
			}

			print TEXOUT "\\end{tabular}\n";
		}

		my $size = "\\footnotesize\n";

		if ($flighted % 2) { 
			$size = "\\small\n" if (scalar @panels < 12);
			$size = "\\scriptsize\n" if (scalar @panels > 32);
			$size = "\\tiny\n" if (scalar @panels > 59);
		} else { 
			$size = "\\small\n" if (scalar @panels < 24);
			$size = "\\scriptsize\n" if (scalar @panels > 96);
			$size = "\\tiny\n" if (scalar @panels > 84) && (scalar @panels < 108);
			$size = "\\tiny\n" if (scalar @panels > 168);
		}

		if ($size eq "scriptsize") { 
			$size = "\\tiny\n" if $event_settings{"code_style"} eq "school_names";
			$size = "\\tiny\n" if $event_settings{"code_style"} eq "school_first_names";
			$size = "\\tiny\n" if $event_settings{"code_style"} eq "school_last_names";
		} elsif ($size eq "footnotesize") { 
			$size = "\\scriptsize\n" if $event_settings{"code_style"} eq "school_names";
			$size = "\\scriptsize\n" if $event_settings{"code_style"} eq "school_first_names";
			$size = "\\scriptsize\n" if $event_settings{"code_style"} eq "school_last_names";
		} elsif ($size eq "small") { 
			$size = "\\footnotesize\n" if $event_settings{"code_style"} eq "school_names";
			$size = "\\footnotesize\n" if $event_settings{"code_style"} eq "school_first_names";
			$size = "\\footnotesize\n" if $event_settings{"code_style"} eq "school_last_names";
		}

		print TEXOUT $size;

		foreach my $panel (@panels) { 

			next if $flighted != 2 && $panel->flight != $flight;

			my $aff;
			my $neg;
			my @byes;

			my $locked_aff =  $m->comp(
				"/funclib/round_elim_dueaff.mas",
				panel => $panel
			) 
			if $sidelocks;

			foreach my $pc (@{$entries_by_panel{$panel->id}}) { 

				if ($ballots_by_entry{$pc->id}) { 
					push @byes, $pc if $panel->bye;
					$aff = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "1";
					$neg = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "2";
				}

			}

			if ($round_robin && ($aff && $last_pod != $aff->setting("pod")) 
				|| (@byes && $last_pod != $byes[0]->setting("pod"))
			) { 

				print TEXOUT "\\vspace{.02in}\\newline\n" unless $last_pod;
				print TEXOUT "\\smallskip\n\\newline\n" if $last_pod;
				print TEXOUT "{\\normalsize \\bf ".Tab::texify($pod_name{$aff->setting("pod")})."}\n" if $aff;
				print TEXOUT "{\\normalsize \\bf ".Tab::texify($pod_name{$byes[0]->setting("pod")})."}\n" if @byes;
				$last_pod = $aff->setting("pod") if $aff;
				$last_pod = $byes[0]->setting("pod") if @byes;
				print TEXOUT "\\normalsize\n";

			}
		
			unless ($last_room && $last_room eq $panel->room) { 

				print TEXOUT "\\newline\n";

				$switch++;

				if ($flighted == 2 && $panel->flight == 2) { 
					print TEXOUT $tabular."\n";
					print TEXOUT "\\rowcolor[rgb]{.91,.91,.91}\[5.5pt\]\[5.5pt\] " if $switch % 2;
					print TEXOUT "& & & & \\\\ \n \\end{tabular}\n" if $panel->flight == 2;
				}

				$last_room = $panel->room->id if $panel->room && $panel->room > 0;
			}

			next unless $entries_by_panel{$panel->id};
		
			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{.91,.91,.91}\[5.5pt\]\[5.5pt\]" if $switch % 2;
			print TEXOUT $panel->flight." & " if $flighted > 1;

			if ($panel->bye) { 

				foreach my $bye (@byes) {
					print TEXOUT $size;
					print TEXOUT Tab::texify($entry_wins{$bye->id}."-".($round_name - $entry_wins{$bye->id})." ") if $record;
					print TEXOUT "\\raggedright ".Tab::texify($bye->code)." & ";
				}

			} elsif ($aff) { 

				print TEXOUT $size;
				print TEXOUT Tab::texify($entry_wins{$aff->id}."-".($round_name - $entry_wins{$aff->id})." ") if $record;
				print TEXOUT "\\raggedright \\truncate{$entry_size}{";

					if ($ncfl && $schools) { 
						print TEXOUT "\\parbox[l][][l]{.35in}{";
						print TEXOUT Tab::texify($aff->school->region->setting("region-".$event)." -- ");
						print TEXOUT Tab::texify($aff->school->region->code);
						print TEXOUT "}";

						print TEXOUT "\\parbox[c][][l]{.2in}{";
					}

					print TEXOUT Tab::texify($aff->code);

					if ($ncfl && $schools) { 
						print TEXOUT "}";
						print TEXOUT Tab::texify($aff->name);
					}
				print TEXOUT "}";
				print TEXOUT "\\newline \\hspace*{0pt} \\hfill $size ".Tab::texify($aff_string)."" if $locked_aff;
				print TEXOUT "\\newline \\hspace*{0pt} \\hfill $size Flip" if $sidelocks && not defined $locked_aff;
				print TEXOUT " & ";  
			} 

			if ($panel->bye) { 
				if (scalar @byes > 1) { 
					print TEXOUT "BYE ";  
				} else { 
					print TEXOUT " BYE & ";
				}
			} elsif ($neg) { 
				print TEXOUT $size;
				print TEXOUT Tab::texify($entry_wins{$neg->id}."-".($round_name - $entry_wins{$neg->id})." ") if $record;

				print TEXOUT "\\raggedright \\truncate{$entry_size}{";

					if ($ncfl && $schools) { 
						print TEXOUT "\\parbox[l][][l]{.35in}{";
						print TEXOUT Tab::texify($neg->school->region->setting("region-".$event)." -- ");
						print TEXOUT Tab::texify($neg->school->region->code);
						print TEXOUT "}";

						print TEXOUT "\\parbox[c][][l]{.2in}{";
					}

					print TEXOUT Tab::texify($neg->code);

					if ($ncfl && $schools) { 
						print TEXOUT "}";
						print TEXOUT Tab::texify($neg->name);
					}
				print TEXOUT "}";

				print TEXOUT "\\newline \\hspace*{0pt} \\hfill $size ".Tab::texify($neg_string)."" if $locked_aff;
				print TEXOUT "\\newline \\hspace*{0pt} \\hfill  $size Flip" if $sidelocks && not defined $locked_aff;
			}

			print TEXOUT " & ";
			print TEXOUT $size;

			my $roomname = Tab::texify($panel->roomname);
			$roomname = "Ask Tab" unless $roomname;

			if ($round->setting("include_room_notes") && $panel->roomnotes) { 
				$roomname = " \\parbox[l][][l]{\\textwidth}{\\vspace{.25\\baselineskip} ".$roomname." \\\\ ".$panel->roomnotes." \\vspace{.25\\baselineskip}} ";
			}

			print TEXOUT "\\truncate[]{.72in}{$roomname} & " if $flighted && $panel->bye < 1;
			print TEXOUT "\\truncate[]{1.9in}{$roomname} & " unless $flighted || $panel->bye;

			my $notfirst;
			my %used = ();

			if ($judges_by_panel{$panel->id}) { 

				foreach my $judge (sort {$b->chair <=> $a->chair} @{$judges_by_panel{$panel->id}}) {

					next if $used{$judge->id};
					$used{$judge->id}++;

					if ($notfirst) { 
						unless ($ncfl && not defined $schools) { 
							print TEXOUT "\\smallskip \\newline\n";
						}
					}

					print TEXOUT $size;
					print TEXOUT " *" if $judge->chair;

					if ($ncfl) { 

						if ($schools) { 

							if ($judge->school) { 
								print TEXOUT "\\truncate[]{.2in}{".Tab::texify($judge->school->region->code)." }";
								print TEXOUT "\\truncate[]{.14in}{".Tab::texify($judge->school->region->setting("region-".$event->id))." }";

							} else { 
								print TEXOUT "\\truncate[]{.34in}{HR}" unless $judge->school;
							}

							print TEXOUT "\\truncate[]{.2in}{".$coach_rating{$judge->id}."}";

							print TEXOUT "\\truncate[]{.3in}{".Tab::texify($judge->code)."}" unless $no_codes;

						} elsif ($record) { 

							print TEXOUT "\\truncate[]{.78in}{".$judge->setting("tab_rating")." ".Tab::texify($judge->code)." }" 
								if $flighted;

							print TEXOUT "\\truncate[]{1.90in}{".$judge->setting("tab_rating")." ".Tab::texify($judge->code)." }" 
								unless $flighted;

						} else { 
							print TEXOUT "\\truncate[]{.3in}{".Tab::texify($judge->code)." }" unless $no_codes;
						}

					} else {

						if ($record) { 
							print TEXOUT "\\truncate[]{.78in}{".$judge->setting("tab_rating")." ".Tab::texify($judge->last.", ".$judge->first)." }" 
								if $flighted;

							print TEXOUT "\\truncate[]{1.90in}{".$judge->setting("tab_rating")." ".Tab::texify($judge->last.", ".$judge->first)." }" 
								unless $flighted;

						} else { 
							print TEXOUT "\\truncate[]{.78in}{".Tab::texify($judge->last.", ".$judge->first)." }" if $flighted;
							print TEXOUT "\\truncate[]{1.90in}{".Tab::texify($judge->last.", ".$judge->first)." }" unless $flighted;
						}
					}
					$notfirst++;
				} 

			}

			print TEXOUT "\n\\end{tabular}\n";

		} 

	} 

</%init>


