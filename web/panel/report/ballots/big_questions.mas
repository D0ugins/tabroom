<%args>
	$filename
	$panel_id => undef
	$judge_id => undef
	$event_id => undef
	$round_id => undef
	$chair    => undef
</%args>
<%perl>

	my $filepath = $Tab::file_root."/tmp/".$filename;

	use List::Util 'shuffle';

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my $round = $panel->round if $panel;
	$round = Tab::Round->retrieve($round_id) 
		unless $round || not defined $round_id;

	my $timeslot = $round->timeslot if $round;
	my $event = $round->event if $round;

	unless ($event) { 
		$event = Tab::Event->retrieve($event_id) if $event_id;
	}

	unless ($event) { 
		$m->print('<div class="blankfull"><h4>error?</h4>');
		$m->print('<p class="warning">That round appears to not exist or not belong to an event.');
		$m->print('Please hit the browser back button and try again</p></div>');
		$m->abort();
	}

	my %event_settings = $event->all_settings();

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $no_sides++ if $event_settings{"no_side_constraints"};

	my $round_type = $round->type;
	$round_type = "prelim" if $round_type eq "highhigh";
	$round_type = "prelim" if $round_type eq "highlow";

	my $elim++ if $round && $round_type eq "elim";
	$elim++ if $round && $round_type eq "final";
	$elim++ if $round && $round_type eq "runoff";
	my $ld++ if $event && $event->type eq "ld";

	$event = Tab::Event->retrieve($event_id) unless $event;
	my $tourn = $event->tourn;

	my $ncfl       = $tourn->setting("ncfl");
	my $tourn_logo = $tourn->setting("logo");

	my $bqd_logo  = $Tab::file_root."/lib/images/big-questions-logo.jpg";
	my $nsda_logo = $Tab::file_root."/lib/images/nsda-logo-printable.png";
	my $jtf_logo  = $Tab::file_root."/lib/images/templeton-logo.png";

    my $bqd_resolution = Tab::TournSetting->search( 
        tourn => 0,
        tag   => "bqd_resolution"
    )->first;

    my $bqd_rules = Tab::TournSetting->search( 
        tourn => 0,
        tag   => "bqd_rules"
    )->first;

    my $bqd_speech_times = Tab::TournSetting->search( 
        tourn => 0,
        tag   => "bqd_speech_times"
    )->first;
	
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

    my $no_side_constraints++ if $event->setting('no_side_constraints');

    my $sidelocks++ 
		if $round 
		&& ($round_type eq "elim" 
			|| $round_type eq "final" 
			|| $round_type eq "runoff"
		) 
		&& not defined $no_side_constraints;

	my $locked;

	if ($tourn->setting("nsda_nats") && (not defined $event_settings{"not_nats"}) ) { 
		undef $sidelocks;
		$locked++;
	}

	$locked =  $m->comp(
		"/funclib/round_elim_dueaff.mas", 
		panel => $panel
	) if $sidelocks;

	my @judges = $m->comp(
		"/funclib/panel_judges.mas", 
		panel => $panel
	) if $panel;

	my $start;
	
	if ($round) { 
		my $roundstart = $round->start_time;
		$roundstart = $timeslot->start unless $roundstart;
		$roundstart->set_time_zone($tz);
		$start = $roundstart->clone;
	}

	my $flight_offset = $event_settings{"flight_offset"};

	if ($flight_offset && $panel && $panel->flight > 1) { 
		my $flight = $panel->flight;
		$flight--;
		$start->add( minutes => $flight_offset * $flight) if $flight;
	}

	my %tb_types;

	if ($round && $round->tiebreak_set) { 
		%tb_types = $m->comp(
			"/funclib/tiebreak_types.mas", 
			round => $round
		);
	} else { 
		$tb_types{"points"}++ ;
		$tb_types{"winloss"}++ ;
		$tb_types{"ranks"}++ ;
	}

    my $points  = $tb_types{"points"};
    my $winloss = $tb_types{"winloss"};
    my $ranks   = $tb_types{"ranks"};

	my $lpw++ unless $event_settings{"no_lpw"};
	my $max_points = $event_settings{"max_points"};
	my $min_points = $event_settings{"min_points"};
	my $max_entry  = $event_settings{"max_entry"};
	my $min_entry  = $event_settings{"min_entry"};

	$min_points = 0 unless $min_points;
	$max_points = 30 unless $max_points;

	open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\renewcommand{\\arraystretch}{1.8}\n";
	print TEXOUT "\\setlength{\\parindent}{0pt}\n";

	print TEXOUT "\\noindent\n";

	if ($panel) { 

		print TEXOUT "\\parbox[l][.5in][t]{2.5in}{ ";
		print TEXOUT "\\hrule height 0pt width 0pt \n";
		print TEXOUT "\\normalsize \n";

		print TEXOUT "{\\bf Room: ".&Tab::texify($panel->room->name)."} \n\n " 
			if $panel->room;

		print TEXOUT "{\\bf Room: ASK TAB } \n\n " unless $panel->room;

		print TEXOUT "{\\bf ".&Tab::texify($round->realname)."";
		print TEXOUT " Flight ".$panel->flight if $round->flighted > 1;
		print TEXOUT " Start: ".Tab::nicetime($start);
		print TEXOUT "} \n\n";

		my $t_start = $tourn->start->set_time_zone($tz);
		my $t_end = $tourn->end->set_time_zone($tz);
		
		my $date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->day.", ".$t_end->year  
			if $t_start->month == $t_end->month;

		unless ($t_start->month == $t_end->month) { 
			$date_string .= $t_start->month_abbr." ".$t_start->day;
			$date_string .= " - ".$t_end->month_abbr." ".$t_end->day.", ".$t_end->year;
		}

		print TEXOUT "{\\bf Start: ".Tab::nicetime($start)." } \n\n " if $round->flighted < 2;
		print TEXOUT "{\\bf \\truncate{2.5in}{".&Tab::texify($tourn->name)." }} \\\\ \n";
		print TEXOUT "{\\bf ".&Tab::texify($date_string)." } \\\\ \n";
		print TEXOUT "}";
		print TEXOUT "\\parbox[c][.6in][t]{2.1in}{";
		print TEXOUT "\\hrule height 0pt width 0pt \n";
		print TEXOUT "\\hfill ";
 
		print TEXOUT "\\centerline{\\includegraphics[height=.6in]{".$bqd_logo."}}\n";

		print TEXOUT "\\hfill\n";
		print TEXOUT "\\vspace{.05in}";
		print TEXOUT "}";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\parbox[r][.5in][t]{2.75in}{";
		print TEXOUT "\\hrule height 0pt width 0pt \n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "{\\Huge *}" if $judge && $judge->chair;

		if ($judge) { 

			if ($ncfl) { 

				print TEXOUT "{\\fontsize{32pt}{32pt}\\selectfont \\bf ".Tab::texify($judge->code)."}";
				print TEXOUT "\\vspace{.05in}";

				print TEXOUT "\n\n \\hfill {\\normalsize ".Tab::texify($judge->school->region->code)."}"
					if $judge->school;

			} else { 

				print TEXOUT "{\\fontsize{20pt}{20pt}\\selectfont ";
				print TEXOUT Tab::texify(substr($judge->last.", ".$judge->first, 0, 24))."}";
				print TEXOUT "\\vspace{.05in}";

				if ($judge->school) { 
					print TEXOUT "\n\n \\hfill {\\normalsize ";
					print TEXOUT Tab::texify(substr($judge->school->short_name, 0, 30))."}";
				}
			}

		} else { 
			print TEXOUT "{\\Large \\bf Judge: \\makebox[1.75in]{\\hrulefill}}";
		}

		print TEXOUT "} \\\\ \n";

		unless ($winloss || $ranks || $points) { 
			print TEXOUT "\\medskip \n ";
			print TEXOUT "\\newline\n ";
			print TEXOUT "\\begin{center}\n";
			print TEXOUT "{\\LARGE \\bf \\color{red} You have no tiebreakers set so this ballot is blank.";
			print TEXOUT "  Set tiebreakers for each round for better results! }";
			print TEXOUT "\\end{center}\n";
		}

	} else { 
		print TEXOUT "{\\bf Room: \\makebox[1.5in]{\\hrulefill} ";
		print TEXOUT "\\hfill Round: \\makebox[.5in]{".$round->realname."} " if $round;
		print TEXOUT "\\hfill Round: \\makebox[.5in]{\\hrulefill} " unless $round;
		print TEXOUT "\\hfill Judge: \\makebox[1.5in]{\\hrulefill}}\n\\medskip\\newline\n";
	}

	if ($elim) { 

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		@entries = sort {$a->side <=> $b->side}  @entries;
		@entries = shuffle @entries unless $locked;

		my $first = shift @entries;
		my $second = shift @entries if @entries;

		print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\large\n";

		if ($first && $second) { 

			if ($no_side_constraints 
				|| (not defined $locked)
			) { 

				print TEXOUT "\\vspace{.2in}\n";

				if ($ncfl) { 
					print TEXOUT Tab::texify("Debater code ".$first->code)." vs ";
					print TEXOUT Tab::texify("Debater code ".$second->code)." \n\n";
				} else { 
					print TEXOUT Tab::texify($first->code." (".$first->name.")")." vs ";
					print TEXOUT Tab::texify($second->code." (".$second->name.")")." \n\n";
				}

				print TEXOUT "\\vspace{.05in}\n";

				print TEXOUT "\\scriptsize{\\emph{ Debaters should flip for sides. Please mark entry designations by side on the lines below}}\n\n";

				print TEXOUT "\\vspace{.3in}\n";

			} elsif ($locked) { 

				print TEXOUT "{\\scriptsize \\emph{ Sides are locked due to a previous debate between these entries}}\n\n";
				print TEXOUT "\\vspace{.2in}\n";
				print TEXOUT "\\parbox[c]{2.75in}{".Tab::texify($first->code." (".$first->name.")")."} ";
				print TEXOUT "\\hspace{.5in} ";
				print TEXOUT "\\parbox[c]{2.75in}{". Tab::texify($second->code." (".$second->name.")") ."}\n";

			}

			print TEXOUT "\\makebox[2.75in]{\\hrulefill} \\hspace{.5in} \\makebox[2.75in]{\\hrulefill}\n\n";
			print TEXOUT "\\footnotesize\n";
			print TEXOUT "{\\bf ".Tab::texify(uc($aff_string))." } \\hspace{3in} {\\bf ".Tab::texify(uc($neg_string))." } " ;

		} else { 

			print TEXOUT "\\vspace{.05in}\n";

			unless ($no_side_constraints) { 
				print TEXOUT "\\scriptsize{\\emph{ Debaters should flip for sides, unless they have debated ";
				print TEXOUT "before, in which case they should debate opposite sides. Please mark entry ";
				print TEXOUT "designations by side on the lines below}}\n\n";
			} else { 
				print TEXOUT "\\scriptsize{\\emph{Debaters should flip for sides. ";
				print TEXOUT "Please mark entry designations by side on the lines below}}\n\n";
			}

			print TEXOUT "\\vspace{.3in}\n";

			print TEXOUT "\\makebox[2.75in]{\\hrulefill} \\hspace{.5in} \\makebox[2.75in]{\\hrulefill}\n\n";
			print TEXOUT "\\footnotesize\n";

			print TEXOUT "{\\bf ".Tab::texify(uc($aff_string))." } \\hspace{3in} {\\bf ".Tab::texify(uc($neg_string))." } ";

		}

		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\newline\n";

	} else { 

		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\begin{minipage}[c][][r]{5in}\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "{\\small \\bf Award points to each debater (based on the range below) } \n\n";
		print TEXOUT "{\\small 20-21 Below Average \\hfill 22-23 Average \\hfill 24-26 Good ";
		print TEXOUT " \\hfill 27-28 Excellent \\hfill  \\hfill 29-30 Outstanding }";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n\n";
		print TEXOUT "\\end{center}\n";

		my $aff;
		my $neg;

		if ($panel) { 
			foreach my $entry (
				$m->comp("/funclib/panel_entries.mas", panel => $panel)
			) {
				$aff = $entry if $entry->side == 1;
				$neg = $entry if $entry->side == 2;
			}
		}

		my @affs = $aff->students if $aff;
		my @negs = $neg->students if $neg;

		print TEXOUT "\\begin{minipage}[c]{3.5in}";
		print TEXOUT "\n \\normalsize\n";

		if ($no_sides) {
			print TEXOUT "{\\small {\\bf ";
			print TEXOUT Tab::texify(uc($aff_string))." \\hspace{.1in} ";
			print TEXOUT Tab::texify(uc($neg_string));
			print TEXOUT " } \\hspace{.1in} {\\footnotesize (Circle One) } }\n\\medskip\n\\newline\n";
			print TEXOUT "\\begin{tabular}{"
		} else { 
			print TEXOUT "{\\small \\bf ".Tab::texify(uc($aff_string))."}\n\\newline\n";
			print TEXOUT "\\begin{tabular}{"
		} 

		my $first_row;
		my $size = "1.75in" if $ranks;
		$size = "2.25in" unless $ranks;

		if ($max_entry > 1) { 
			print TEXOUT "|p{.25in}|p{$size}";

			if ($aff) {
				$first_row = " {\\bf \\scriptsize Spkr} & {\\bf \\truncate{$size}{";
				$first_row .= Tab::texify($aff->code)."} }";
			} else { 
				$first_row = " {\\bf \\scriptsize Spkr} & {\\bf Team: } ";
			}

		} else { 
			print TEXOUT "|" unless $event->type eq "ld";
			print TEXOUT "p{$size}";
			$first_row = " {\\bf \\truncate{$size}{".Tab::texify($aff->code)."} }" if $aff;
			$first_row = " {\\bf \\truncate{$size}{ Debater: } }" unless $aff;
		}

		if ($points) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize POINTS}\n\n";
			$first_row .= "{\\scriptsize ( $min_points - $max_points )}\n";
			$first_row .= "\\vspace{.02in}\n";
			$first_row .= "\\end{minipage}\n";
		}

		if ($ranks) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c][][t]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize RANK}\n\n";
			$first_row .= "\\vspace{.22in}\n\n";
			$first_row .= "\\end{minipage}\n ";
		}

		print TEXOUT "|" unless $ld;
		print TEXOUT "}\n";
		print TEXOUT "\\hline\n" unless $ld;
		print TEXOUT $first_row."\\\\ \n";
		print TEXOUT "\\hline\n" unless $ld;

		my $order = 1;

		if (@affs && ($points || $ranks)) { 
			foreach my $speaker (@affs) { 
				print TEXOUT " & " if $max_entry > 1; 
				print TEXOUT Tab::texify($speaker->first." ".$speaker->last." ") unless $ncfl;
				print TEXOUT " & " if $points;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}

		} elsif ($points || $ranks) { 

			my $order = 1;
			foreach (1 .. $max_entry) { 

				print TEXOUT " & " if $max_entry > 1;
				print TEXOUT "{\\footnotesize Name: }";
				print TEXOUT " & " if $points;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}
		}

		print TEXOUT "\\end{tabular}\n";

		print TEXOUT "\\end{minipage}\n";

		if ($ranks) { 
			print TEXOUT "\\hspace{.15in}\n"
		} else { 
			print TEXOUT "\\hspace{.25in}\n"
		}

		print TEXOUT "\\begin{minipage}[c]{3.5in}";
		print TEXOUT "\n \\normalsize\n";

		if ($no_sides) { 

			print TEXOUT "\\hfill {\\footnotesize (Circle One) } \\hspace{.1in} {\\small {\\bf  ";
			print TEXOUT Tab::texify(uc($aff_string))." \\hspace{.1in} ";
			print TEXOUT Tab::texify(uc($neg_string))." } }\n\n\\medskip\n";

			print TEXOUT "\\begin{tabular}{"
		} else { 
			print TEXOUT "{\\small \\bf ".Tab::texify(uc($neg_string))."}\n\\newline\n";
			print TEXOUT "\\begin{tabular}{"
		} 

		undef $first_row;
		$size = "1.75in" if $ranks;
		$size = "2.25in" unless $ranks;

		if ($max_entry > 1) { 

			print TEXOUT "|p{.25in}|p{$size}";

			if ($neg) { 
				$first_row = " {\\bf \\scriptsize Spkr} & {\\bf \\truncate{$size}{";
				$first_row .= Tab::texify($neg->code)."} }";
			} else { 
				$first_row = " {\\bf \\scriptsize Spkr} & {\\bf Team: } ";
			}

		} else { 

			print TEXOUT "|" unless $event->type eq "ld";
			print TEXOUT "p{$size}";

			if ($neg) { 
				$first_row = " {\\bf \\truncate{$size}{".Tab::texify($neg->code)."} }";
			} else { 
				$first_row = " {\\bf \\truncate{$size}{ Debater: } }";
			}
		}

		if ($points) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize POINTS}\n\n";
			$first_row .= "{\\scriptsize ( $min_points - $max_points )}\n";
			$first_row .= "\\vspace{.02in}\n";
			$first_row .= "\\end{minipage}\n";
		}

		if ($ranks) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c][][t]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize RANK}\n\n";
			$first_row .= "\\vspace{.22in}\n\n";
			$first_row .= "\\end{minipage}\n ";
		}

		print TEXOUT "|" unless $ld;
		print TEXOUT " }\n";
		print TEXOUT "\\hline\n" unless $ld;
		print TEXOUT $first_row."\\\\ \n";
		print TEXOUT "\\hline\n" unless $ld;

		$order = 1;

		if (@negs && ($points || $ranks)) { 
			foreach my $speaker (@negs) { 
				print TEXOUT " & " if $max_entry > 1;
				print TEXOUT Tab::texify($speaker->first." ".$speaker->last." ") unless $ncfl;
				print TEXOUT " & " if $points;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}
		} elsif ($points || $ranks) { 

			foreach (1 .. $max_entry) { 

				print TEXOUT " & " if $max_entry > 1;
				print TEXOUT "{\\footnotesize Name: }";
				print TEXOUT " & " if $points;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}
		}

		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";
	}

	if ($winloss) { 

		print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\vspace{.3in}\n";
		print TEXOUT "\\normalsize\n";
		print TEXOUT "Winner: \\makebox[2.5in]{\\hrulefill} on the side \\makebox[1in]{\\hrulefill}\n";

		print TEXOUT "\\hspace{.15in} \\footnotesize Low point win? \\makebox[.5in]{\\hrulefill} \n" 
				if $lpw &! $elim;

		print TEXOUT "\n";
		print TEXOUT "\\scriptsize\n";

		if ($elim) { 
			print TEXOUT "\\makebox[1.25in]{}Entry Name or Code\\makebox[2.3in]{} Side (";
			print TEXOUT Tab::texify($aff_string." or ".$neg_string).")";
		} else { 
			print TEXOUT "\\makebox[.8in]{}Entry Name or Code\\makebox[1.9in]{} Side (";
			print TEXOUT Tab::texify($aff_string." or ".$neg_string).")";
			print TEXOUT "\\makebox[1.25in]{}" if $lpw;
		}

		print TEXOUT "\n\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n\n";
		print TEXOUT "\\vspace{.1in}\n";
	}

	my $pronouns_string;

	Tab::Student->set_sql( pronouns =>
		"select student.id, student.last, entry.code code, person.pronoun entry
		from ballot, entry, entry_student, student, person
		where ballot.panel = ? 
		and ballot.entry = entry.id
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		and student.person = person.id
		group by person.id "
	);

	if ($panel &! $ncfl) { 
		foreach my $student (Tab::Student->search_pronouns($panel->id)) { 
			next unless $student->entry;
			$pronouns_string .= ", "  if $pronouns_string;
			$pronouns_string .= $student->code."'s ".$student->last." pronouns: ".$student->entry;
		}   
	}   

	if (scalar @judges > 1) { 

		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\medskip \n\n";
		print TEXOUT "\\footnotesize {\\bf *Please chair this round.}\n" if $chair;

		my $other_names;

		foreach my $other (@judges) { 
			next if $other->id == $judge_id;
			$other_names .= ", " if $other_names;
			$other_names .= $other->first." ".$other->last unless $ncfl;
			$other_names .= $other->code if $ncfl;
        
			if (
				(not defined $ncfl) 
				&& ($other->person 
						&& $other->person->id 
						&& $other->person->pronoun
					)
			) { 
				$pronouns_string .= ", "  if $pronouns_string;
				$pronouns_string .= "Judge ".$other->last." pronouns ".$other->person->pronoun;
			}
		}

		if ($other_names) { 
			print TEXOUT "\\footnotesize {\\bf Other judges on panel: ".Tab::texify($other_names).".  ";
			print TEXOUT "Please do not start until all judges are present.}\n";
		}

		print TEXOUT "\\end{center}\n";

	}

	if ((not defined $ncfl) && (defined $pronouns_string)) { 
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\footnotesize Pronouns: ".Tab::texify($pronouns_string)."\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\vspace{.05in}\n";
	}

	print TEXOUT "\\fbox{\n";
	print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";

	print TEXOUT "\\begin{center}\n";
	print TEXOUT "{\\normalsize \\bf\n";
	print TEXOUT Tab::texify($bqd_resolution->value_text);
	print TEXOUT "}\n";
	print TEXOUT "\\end{center}";

	if ($bqd_rules) { 
		my $strip = HTML::Strip->new();

		my $rules_text = $bqd_rules->value_text;

		$rules_text =~ s/\<li\>//g;
		$rules_text =~ s/\<\/li\>/\n/g;
		$rules_text =~ s/\r/\n\n/g;
		$rules_text =~ s/\n/\n\n/g;
		$rules_text =~ s/<br \/>/\n\n/g;
		$rules_text =~ s/\&nbsp;/ /g;
		$rules_text = $strip->parse( $rules_text );
		$rules_text =~ s/^\s+//;
		$rules_text =~ s/\s+$//;
		chomp $rules_text;

		print TEXOUT "\\setlength{\\parskip}{.5em}\n";

		print TEXOUT "\\footnotesize\n";
		print TEXOUT &Tab::texify($rules_text);
		print TEXOUT "\n\n";

	}

	print TEXOUT "\\end{minipage}\n";
	print TEXOUT "}\n";
	print TEXOUT "\\vspace{.2in}\n";
	print TEXOUT "\\newline \n ";

	if ($chair) { 

		my $message = $event_settings{"ballot_rules_chair"};

		if ($message) { 
			my $strip = HTML::Strip->new();
			$message =~ s/\<li\>//g;
			$message =~ s/\<\/li\>/\n/g;
			$message =~ s/\r/\n\n/g;
			$message =~ s/\n/\n\n/g;
			$message =~ s/<br \/>/\n\n/g;
			$message =~ s/\&nbsp;/ /g;
			$message = $strip->parse( $message );
			$message =~ s/^\s+//;
			$message =~ s/\s+$//;
			chomp $message;
			print TEXOUT "\\fbox{\n";
			print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
			print TEXOUT "\\footnotesize\n ";
			print TEXOUT "\\noindent\n ";
			print TEXOUT &Tab::texify($message);
			print TEXOUT "\\end{minipage}\n";
			print TEXOUT "}\n";
		}
	}

	print TEXOUT "\\begin{minipage}[c][][r]{7.15in}\n";
	print TEXOUT "\\vspace{-6mm}\n";

	print TEXOUT "\\begin{minipage}[c][][r]{3.4in}\n";
	print TEXOUT "\\footnotesize\n";
	print TEXOUT "\\vspace{4mm}\n";
 	print TEXOUT "Reasons why the ".Tab::texify($aff_string);
	print TEXOUT "may have won the round, positive feedback and constructive criticism:";

	print TEXOUT "\\vspace{1.8in}\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\end{minipage}\n";

	print TEXOUT "\\hfill\n";
	print TEXOUT "\\vrule\n";
	print TEXOUT "\\hfill\n";

	print TEXOUT "\\begin{minipage}[c][][r]{3.4in}\n";
	print TEXOUT "\\footnotesize\n";
	print TEXOUT "\\vspace{4mm}\n";
 	print TEXOUT "Reasons why the ";
	print TEXOUT Tab::texify($neg_string)." may have won the round, positive feedback";
	print TEXOUT " and constructive criticism:";
	print TEXOUT "\\vspace{1.8in}\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\end{minipage}\n\n";


	print TEXOUT "\\end{minipage}\n\n";

	print TEXOUT "\\noindent\n";
	print TEXOUT "\\footnotesize\n";
	print TEXOUT "Reasons for decision (provide a detailed justification, ";
	print TEXOUT "referring to central issues debaters presented in the round):\n \n";
	print TEXOUT "\\vspace{.25in}\n";

	if ($bqd_speech_times) { 

		my $speech_times = $bqd_speech_times->value_text;

		my $strip = HTML::Strip->new();
		$speech_times =~ s/\r\n/\n\n/g;
		$speech_times =~ s/\<li\>/*/g;
		$speech_times =~ s/\<\/p\>/\n\n/g;
		$speech_times =~ s/\<\/li\>/\n\n/g;
		$speech_times =~ s/<br \/>/\n\n/g;
		$speech_times =~ s/\&nbsp;/ /g;
		$speech_times = $strip->parse( $speech_times );
		$speech_times = Tab::texify($speech_times);
		$speech_times =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.6in}{";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "{\\bf Speech Times and Order:} \n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.6in}{";
		print TEXOUT $speech_times;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\medskip \\newline \n ";
	}

	print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
	print TEXOUT "\\scriptsize\n";
 	print TEXOUT "I verify that this round followed the event rules and that the winning debater ran a topical position:\\vspace{.3in}\n\n";
	print TEXOUT "Signature: \\makebox[4in]{\\hrulefill} ";
	print TEXOUT "\n\n";
	print TEXOUT "\\end{minipage}\n\n";

	print TEXOUT "\\includegraphics[height=.6in]{".$nsda_logo."}\n";
	print TEXOUT "\\hfill\n";
	print TEXOUT "\\includegraphics[height=.6in]{".$jtf_logo."}\n";

	close (TEXOUT);

	return;

</%perl>
