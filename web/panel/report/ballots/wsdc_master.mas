<%args>
	$filename
	$panel_id => undef
	$judge_id => undef
	$event_id => undef
	$chair    => undef
</%args>
<%perl>

	my $filepath = $Tab::file_root."/tmp/".$filename;

	use List::Util 'shuffle';
	use POSIX 'ceil';

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my $round = $panel->round if $panel;
	my $timeslot = $round->timeslot if $round;
	my $event = $round->event if $round;
	$event = Tab::Event->retrieve($event_id) if $event_id &! $event;
	my %event_settings = $event->all_settings;

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};

	my $lpw++ unless $event_settings{"no_lpw"};
	my $no_rfd = $event_settings{"wsdc_no_rfd"};

	my %max_points;
	my %min_points; 

	my @scores = ("style", "content", "strategy", "poi"); 
	
	foreach my $key (@scores) { 
		$min_points{$key} = $event_settings{"min_".$key."_points"};
		$max_points{$key} = $event_settings{"max_".$key."_points"}; 
		
		$min_points{"total"} += $min_points{$key} unless $key eq "poi";
		$max_points{"total"} += $max_points{$key} unless $key eq "poi";
	}

	my $trash = pop @scores unless $max_points{"poi"};
	my $point_scale = $event_settings{"point_scale"};
	my $flight_offset = $event_settings{"flight_offset"};
	my $no_sides++ if $event_settings{"no_side_constraints"};

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	$event = Tab::Event->retrieve($event_id) unless $event;
	my $tourn = $event->tourn;
	
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start;
	
	if ($round) { 
		my $roundstart = $round->start_time;
		$roundstart = $timeslot->start unless $roundstart;
		$roundstart->set_time_zone($tz);
		$start = $roundstart->clone;
	}

	if ($flight_offset && $panel && $panel->flight > 1) { 
		my $flight = $panel->flight;
		$flight--;
		$start->add( minutes => $flight_offset * $flight) if $flight;
	}

	my %tb_types;

	if ($round && $round->tiebreak_set) { 
		%tb_types = $m->comp(
			"/funclib/tiebreak_types.mas", 
			round => $round
		);
	} else { 

		my @round = sort {$a->name <=> $b->name} $event->rounds;
		my $sample = shift @round;

		if ($sample) { 
			%tb_types = $m->comp(
				"/funclib/tiebreak_types.mas", 
				round => $round
			);
		} else { 
			$tb_types{"points"}++ ;
			$tb_types{"winloss"}++ ;
			$tb_types{"ranks"}++ ;
		}
	}

	$tb_types{"points"}++ ;
	$tb_types{"winloss"}++ ;

	my @entries = $m->comp(
		"/funclib/panel_entries.mas", 
		panel => $panel
	) if $panel;

	my @sides = ($aff_string, $neg_string);

	open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\renewcommand{\\arraystretch}{2.2}\n";
	print TEXOUT "\\setlength{\\parindent}{0pt}\n";
	print TEXOUT "\\noindent\n";

	my $logo = $tourn->setting("logo");

	if ($logo) { 

		unless (-e "$Tab::file_root/tmp/".$logo) { 
			system "cd $Tab::file_root/tmp; /usr/bin/wget ".$Tab::s3_url."/".$tourn->id."/".$logo;
		}

		if (-e "$Tab::file_root/tmp/".$logo) { 
			print TEXOUT "\\parbox[c][][t]{.85in}{\n";
			print TEXOUT "\\includegraphics[height=.84in]{$logo}\n";
			print TEXOUT "}\n";
		} else { 
			undef $logo;
		}

	}

	if ($panel) { 
		print TEXOUT "\\parbox[c][][t]{2.5in}{\n" unless $logo;
		print TEXOUT "\\parbox[c][][t]{2in}{\n" if $logo;
		print TEXOUT "\\normalsize \n";
		print TEXOUT "{\\bf Room: ".&Tab::texify($panel->room->name)."} \n\n " if $panel->room;
		print TEXOUT "{\\bf Room: ASK TAB } \n\n " unless $panel->room;

		if ($round->flighted > 1) { 
			print TEXOUT "{\\bf Flight ".$panel->flight." }";
		}

		print TEXOUT "{\\bf ".Tab::texify($round->realname);
		print TEXOUT " Start: ".Tab::nicetime($start)." } \n\n ";

		print TEXOUT "{\\bf Division: ".&Tab::texify($event->name)." }";
		print TEXOUT "}";
		print TEXOUT "\\parbox[c][][t]{1.6in}{\n" if $logo;
		print TEXOUT "\\parbox[c][][t]{2.1in}{\n" unless $logo;
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "{\\huge \\bf ".$round->name."} " unless $round->label;
		print TEXOUT "{\\LARGE \\bf ".$round->realname."}" if $round->label;
		print TEXOUT "\\end{center}\n";
		print TEXOUT "} ";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\parbox[c][][t]{2.5in}{\n";
		print TEXOUT "\\raggedleft\n";

		if ($judge) { 
			print TEXOUT "\\hfill\n";
			print TEXOUT "{\\LARGE \\bf ";
			print TEXOUT "*" if $chair;
			print TEXOUT &Tab::texify($judge->last.", ".$judge->first);
			print TEXOUT "}\n\n ";
			print TEXOUT "{\\small \\bf Chair Judge } \n" if $chair;
		} else {
			print TEXOUT "{\\Large \\bf Chair: \\makebox[1.75in]{\\hrulefill}}" if $chair;
			print TEXOUT "{\\Large \\bf Judge: \\makebox[1.75in]{\\hrulefill}}" unless $chair;
		}
		print TEXOUT "} \\\\ \n";

		unless ($tb_types{"winloss"} 
			|| $tb_types{"ranks"} 
			|| $tb_types{"points"}
		) { 
			print TEXOUT "\\medskip \n ";
			print TEXOUT "\\newline\n ";
			print TEXOUT "\\begin{center}\n";
			print TEXOUT "{\\LARGE \\bf \\color{red} You have no tiebreakers ";
			print TEXOUT "set so this ballot is blank.  Set tiebreakers for ";
			print TEXOUT "each round for better results! }";
			print TEXOUT "\\end{center}\n";
		}

	} else { 

		print TEXOUT "{\\bf Room: \\makebox[1.5in]{\\hrulefill} \\hfill ";
		print TEXOUT "Round: \\makebox[.5in]{\\hrulefill} ";
		print TEXOUT "\\hfill Judge: \\makebox[1.5in]{\\hrulefill}}\n\\medskip\\newline\n";

	}

	unless ($logo) { 

		print TEXOUT "\\begin{center}\n";

		my $t_start = $tourn->start->set_time_zone($tz);
		my $t_end = $tourn->end->set_time_zone($tz);
		
		my $date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->day.", ".$t_end->year  
			if $t_start->month == $t_end->month;

		$date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->month_abbr." ".$t_end->day.", ".$t_end->year  
			unless $t_start->month == $t_end->month;

		print TEXOUT "{\\huge \\bf ".&Tab::texify(uc($tourn->name))." } \\\\ \n";
		print TEXOUT "\\smallskip \n ";
		print TEXOUT "{\\large \\bf ".&Tab::texify($date_string)." } \\\\ \n";
	
		print TEXOUT "\\end{center} \n";
	}

	print TEXOUT "\\begin{center} \n";

	if ($chair) { 

		my $ballot_rules_chair = 
			$m->comp("/funclib/print_format.mas", 
				message => $event_settings{"ballot_rules_chair"}
			);

		if ($ballot_rules_chair) { 
			print TEXOUT "\\begin{minipage}[t][][t]{7in}";
			print TEXOUT "\\footnotesize\n ";
			print TEXOUT "\\centering \n";
			print TEXOUT &Tab::texify($ballot_rules_chair);
			print TEXOUT "\\end{minipage}";
			print TEXOUT "\\vspace{1mm}\n";
			print TEXOUT "\\newline \n ";
		}
	}

	my $ballot_rules = 
		$m->comp("/funclib/print_format.mas", 
			message => $event_settings{"ballot_rules"}
		);

	if ($ballot_rules) { 
		print TEXOUT "\\begin{minipage}[t][][t]{7in}";
		print TEXOUT "\\footnotesize\n ";
		print TEXOUT "\\centering \n";
		print TEXOUT &Tab::texify($ballot_rules);
		print TEXOUT "\\end{minipage}";
		print TEXOUT "\\vspace{1mm}\n";
		print TEXOUT "\\newline \n ";
	}

	my $motion = $round->setting("motion") if $round;

	if ($motion) { 
		my $strip = HTML::Strip->new();
		$motion =~ s/\<li\>//g;
		$motion =~ s/\<\/li\>/\n/g;
		$motion =~ s/\r/\n\n/g;
		$motion =~ s/\n/\n\n/g;
		$motion =~ s/<br \/>/\n\n/g;
		$motion =~ s/\&nbsp;/ /g;
		$motion = $strip->parse( $motion );
		chomp $motion;
		print TEXOUT "\\begin{minipage}[t][][t]{7in}";
		print TEXOUT "\\centering \n";
		print TEXOUT "\\small\n ";
		print TEXOUT "{\\bf Motion:} ";
		print TEXOUT &Tab::texify($motion);
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\newline \n ";
	}

	print TEXOUT "\\end{center} \n";

	my $aff;
	my $neg;

	my $cols = 2;
	$cols += 4 if $tb_types{"points"};
	$cols++ if $max_points{"poi"};
	$cols++ if $tb_types{"ranks"};

	print TEXOUT "\\begin{center}\n" if $no_rfd;
	print TEXOUT "\\vspace{-2mm}\n";

	foreach (1 .. 2) {

		my $side_string = shift @sides;
		my $entry = shift @entries;
		my @students = $entry->students if $entry;

		if ($no_rfd) { 
			print TEXOUT "\\begin{minipage}[t][][t]{5.5in}\n";
			print TEXOUT "\\small\n";
			print TEXOUT "\\fbox{\n";
			print TEXOUT "\\parbox[t][.9in][t]{5.325in}{\n";
			print TEXOUT "\\vspace{1mm} \n\n";
		} else { 
			print TEXOUT "\\begin{minipage}[t][][t]{3.65in}\n";
			print TEXOUT "\\footnotesize\n";
			print TEXOUT "\\fbox{\\parbox[t][.78in][t]{3.49in}{\n";
			print TEXOUT "\\vspace{1mm} \n\n";
		}

		print TEXOUT "\\begin{minipage}[t][][t]{1in}\n";
			print TEXOUT "\\truncate{1in}{ \\bf ";
			print TEXOUT "\\normalsize \n" if $no_rfd;
			print TEXOUT Tab::texify($entry->code) if $entry;
			print TEXOUT "Team Code: \n" unless $entry;
			print TEXOUT " } ";
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\hfill\n";

		if ($entry)  {
		
			print TEXOUT "\\begin{minipage}[t][][t]{2.5in}\n" if $no_rfd;
			print TEXOUT "\\begin{minipage}[t][][t]{1.4in}\n" unless $no_rfd;
		
			if ($no_rfd) { 
				print TEXOUT "\\centering{ \\bf \\small Speakers:} \n\n";
			} else { 
				print TEXOUT "\\centering{ \\bf \\scriptsize  Speakers:} \n\n";
			}

			print TEXOUT "\\raggedright\n";

			my $counter = 1;

			foreach my $student (sort {$a->id <=> $b->id} @students) { 

				if ($no_rfd) { 
					print TEXOUT "\\hspace{.64in} ".$counter++;
					print TEXOUT "\\hspace{.1in} \\footnotesize ";
				} else { 
					print TEXOUT "\\hspace{.15in} ".$counter++;
					print TEXOUT "\\hspace{.1in} \\scriptsize ";
				}

				print TEXOUT Tab::texify($student->first." ".$student->middle." ".$student->last)."\n\\newline \\indent";
			}

			print TEXOUT "\\end{minipage}\n";
			print TEXOUT "\\hfill\n";
		}

		print TEXOUT "\\begin{minipage}[t][][t]{1in}\n";

		if ($no_sides) { 
			print TEXOUT "\\hfill ".Tab::texify(uc($aff_string));
			print TEXOUT "\\hspace{.1in} ".Tab::texify(uc($neg_string))."  ";
			print TEXOUT "\\hspace{.1in} {\\footnotesize (Circle One) } \n";
		} else { 

			print TEXOUT "\\hfill {\\large \\bf ".Tab::texify(uc($side_string))." } \n" if $no_rfd;
			print TEXOUT "\\hfill {\\small \\bf ".Tab::texify(uc($side_string))." } \n" unless $no_rfd;
		}

		print TEXOUT "\\end{minipage}\n";
		 
		print TEXOUT " } } \n";

		print TEXOUT "\\vspace{-.4mm}\n\n";

		my $tabular;

		if ($no_rfd) { 

			if ($max_points{"poi"}) { 
				$tabular = "\\begin{tabular}{|p{.16in}|p{2in}|";
				$tabular .= "p{.42in}|p{.42in}|p{.42in}|p{.42in}|p{.42in}|" if $tb_types{"points"};
				$tabular .= "p{.42in}|" if $tb_types{"ranks"};
				$tabular .= "}\n";

			} else { 
				$tabular = "\\begin{tabular}{|p{.16in}|p{2.595in}|";
				$tabular .= "p{.42in}|p{.42in}|p{.42in}|p{.42in}|" if $tb_types{"points"};
				$tabular .= "p{.42in}|" if $tb_types{"ranks"};
				$tabular .= "}\n";
			}

		} else { 

			if ($max_points{"poi"}) { 

				$tabular = "\\begin{tabular}{|p{.20in}|p{.9in}|";
				$tabular .= "p{.25in}|p{.25in}|p{.25in}|p{.25in}|p{.30in}|" if $tb_types{"points"};
				$tabular .= "p{.25in}|" if $tb_types{"ranks"};
				$tabular .= "}\n";

			} else { 
				$tabular = "\\begin{tabular}{|p{.20in}|p{1.1in}|";
				$tabular .= "p{.32in}|p{.32in}|p{.32in}|p{.32in}|" if $tb_types{"points"};
				$tabular .= "p{.25in}|" if $tb_types{"ranks"};
				$tabular .= "}\n";

			}
		}

		print TEXOUT "\\renewcommand{\\arraystretch}{1.2}\n";
		print TEXOUT $tabular;
		print TEXOUT "\\hline \n";

		if ($no_rfd) { 

			print TEXOUT " & \\parbox{2in}{\\vspace{2mm} \\textsb{\\small Speaker} ";
			print TEXOUT " \\hspace{.5in} {\\scriptsize \\it Write number and name: } } ";

			foreach my $key (@scores) { 

				if ( abs($min_points{$key}) == abs($max_points{$key}) ) { 
					print TEXOUT " & \\textsb{ \\scriptsize ".uc($key)." } \n\n ";
					print TEXOUT " \\textsb{\\scriptsize \$ \\pm \$ ".abs($min_points{$key})." } ";

				} else { 

					print TEXOUT " & \\textsb{ \\scriptsize ".ucfirst($key)." } \n\n ";
					print TEXOUT "\\textsb{\\scriptsize $min_points{$key} ";
					print TEXOUT "- $max_points{$key} } ";

				}
			}

			print TEXOUT " & \\textsb{ \\scriptsize Total } \n\n ";
			print TEXOUT "\\textsb{\\scriptsize ".$min_points{"total"};
			print TEXOUT " - ".$max_points{"total"}." } \n";
			print TEXOUT " & \\textsb{ \\footnotesize Ranks } " if $tb_types{"ranks"};

		} else { 

			print TEXOUT " & \\textsb{ \\scriptsize Speaker } \\tiny \n\n";
			print TEXOUT " \\it Write number and name ";

			foreach my $key (@scores) { 
				print TEXOUT " & \\textsb{ \\tiny ".ucfirst($key)." } \n\n ";
				print TEXOUT " \\textsb{ \\tiny $min_points{$key} - $max_points{$key} } ";
			}

			print TEXOUT " & \\textsb{ \\tiny Total } \n\n ";
			print TEXOUT " \\textsb{ \\tiny ".$min_points{"total"}." - ".$max_points{"total"}." } ";
			print TEXOUT " & \\textsb{ \\scriptsize Ranks } " if $tb_types{"ranks"};
		}

		print TEXOUT "\\\\ \\hline \n";

		print TEXOUT "\\end{tabular}\n";
		print TEXOUT " \\vspace{-.01in} \n\n";

		print TEXOUT "\\renewcommand{\\arraystretch}{2.2}\n";

		foreach my $position (1, 2, 3) { 
			print TEXOUT $tabular;
			print TEXOUT " $position  & ";
			print TEXOUT " & & & & " if $tb_types{"points"};
			print TEXOUT " & " if $max_points{"poi"};
			print TEXOUT " & " if $tb_types{"ranks"};
			print TEXOUT "\\\\ \\hline \n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT " \\vspace{-.01in} \n\n";
		}

		# Reply speech boxes
		print TEXOUT "\\renewcommand{\\arraystretch}{1.2}\n";
		print TEXOUT $tabular;

		if ($no_rfd) { 

			print TEXOUT " & \\parbox{2in}{\\vspace{2mm} ";
			print TEXOUT " \\textsb{\\small Reply} \\hspace{.725in} ";
			print TEXOUT " {\\scriptsize \\it Must be speaker 1 or 2: }}";

			foreach my $key (@scores) { 

				print TEXOUT " & ";

				if ($key eq "poi") {
					print TEXOUT "\\cellcolor[rgb]{.75, .75, .75} ";
				} else { 

					print TEXOUT "\\textsb{\\scriptsize ".ucfirst($key)." } \n\n ";

					print TEXOUT "\\textsb{\\scriptsize ".($min_points{$key}/2);
					print TEXOUT " - ".($max_points{$key}/2)." } ";
				}
			}

			print TEXOUT " & \\textsb{ \\scriptsize Total }\n\n ";
			print TEXOUT "\\textsb{\\scriptsize ".($min_points{"total"}/2);
			print TEXOUT " - ".($max_points{"total"}/2)." } ";
			print TEXOUT " & \\textsb{ \\footnotesize Ranks } " if $tb_types{"ranks"};

		} else { 

			print TEXOUT " & \\scriptsize \\bf Reply \\tiny \n\n ";
			print TEXOUT " \\it Must be either speaker 1 or 2 ";

			foreach my $key (@scores) { 

				print TEXOUT " & ";

				if ($key eq "poi") {
					print TEXOUT "\\cellcolor[rgb]{.75, .75, .75} ";
				} else { 
					print TEXOUT "\\bf \\tiny ucfirst($key) \n\n ";
					print TEXOUT ($min_points{$key}/2)." - ".($max_points{$key}/2);
				}
			}

			print TEXOUT " & \\bf \\tiny Total \n\n ";
			print TEXOUT ($min_points{"total"}/2)." - ".($max_points{"total"}/2);

			print TEXOUT " & \\bf \\scriptsize Ranks " if $tb_types{"ranks"};

		}

		print TEXOUT "\\\\ \\hline \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT " \\vspace{-.01in} \n\n";

		print TEXOUT "\\renewcommand{\\arraystretch}{2.2}\n";

		print TEXOUT $tabular;
		print TEXOUT " R & ";
		print TEXOUT " & & & & " if $tb_types{"points"};
		print TEXOUT "\\cellcolor[rgb]{.75, .75, .75} & " if $max_points{"poi"};
		print TEXOUT " & " if $tb_types{"ranks"};
		print TEXOUT "\\\\ \\hline \n";

		print TEXOUT "\\multicolumn{".($cols - 1)."}{|r|}{ \n";
		print TEXOUT "\\parbox{2in}{\\hfill \\normalsize \\bf TEAM TOTAL: }} & \n";
		print TEXOUT "\\\\ \\hline \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\hfill \n";

	}

	print TEXOUT "\\end{center}\n" if $no_rfd;

	print TEXOUT "\n \\normalsize\n";

	if ($tb_types{"winloss"}) {

		print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
		print TEXOUT "\\begin{center}\n";

		unless ($lpw) { 
			print TEXOUT "\\vspace{.08in}{\\bf \\scriptsize Low point wins and draws ";
			print TEXOUT "are not allowed.  The higher scoring team MUST be the winner.}";
			print TEXOUT "\\vspace{.15in} \n\n";
		}

		print TEXOUT "\\vspace{.3in}\n" if $lpw;
		print TEXOUT "\\normalsize\n";
		print TEXOUT "Winning team: \\makebox[2.5in]{\\hrulefill} debating on the";
		print TEXOUT "\\makebox[1in]{\\hrulefill}\n";
		print TEXOUT "\\hspace{.16in} \\footnotesize Low point win? " if $lpw;
		print TEXOUT "\\makebox[.5in]{\\hrulefill} \n" if $lpw;
		print TEXOUT "\n";
		print TEXOUT "\\scriptsize\n";

		if ($no_sides) { 
			print TEXOUT "\\makebox[1.4in]{}School/Team\\makebox[2.3in]{} Side (".Tab::texify($aff_string." or ".$neg_string).")";
		} else { 
			print TEXOUT "\\makebox[1.4in]{}School/Team\\makebox[2.5in]{} Side (".Tab::texify($aff_string." or ".$neg_string).")";
			print TEXOUT "\\makebox[1.4in]{}" if $lpw;
		}
		print TEXOUT "\n\n";
		print TEXOUT "\\vspace{.25in}\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n\n";
	}

	print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
	print TEXOUT "\\begin{center}\n";
	print TEXOUT "Signature:  \\makebox[3.25in]{\\hrulefill} ";
	print TEXOUT "Affiliation: \\makebox[2in]{\\hrulefill}";
	print TEXOUT "\n\n";
	print TEXOUT "\\end{center}\n";
	print TEXOUT "\\end{minipage}\n\n";

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel) if $panel;

	if (scalar @judges > 1) { 

		my $other_names;

		foreach my $other (@judges) { 
			next if $other->id == $judge_id;
			$other_names .= ", " if $other_names;
			$other_names .= $other->first." ".$other->last;
		}

		print TEXOUT "\\hspace{4mm}\n\n";
		print TEXOUT "\\centerline{\\bf \\small Other Judges: ".Tab::texify($other_names)." }\n\n";

	}

	unless ($no_rfd) { 

		print TEXOUT "\\vspace{.16in}\n";
		print TEXOUT "\\noindent";
		print TEXOUT "\\makebox[7.25in]{\\hrulefill}\n\n" unless $no_rfd;
		print TEXOUT "\\noindent\n" unless $no_rfd;
		print TEXOUT "Comments \\\& Reason for Decision:\n\n" unless $no_rfd;
		print TEXOUT "\\vspace{.5in}\n";

	}

	if ($point_scale) { 
		my $strip = HTML::Strip->new();
		$point_scale =~ s/\<li\>/*/g;
		$point_scale =~ s/\<\/p\>/\n \n/g;
		$point_scale =~ s/\<\/li\>/\n \n/g;
		$point_scale =~ s/<br \/>/\n\n/g;
		$point_scale =~ s/\&nbsp;/ /g;
		$point_scale = $strip->parse( $point_scale );
		$point_scale = Tab::texify($point_scale);
		$point_scale =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n\n";
		print TEXOUT "\\noindent \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT "{\\bf Point Scale:} \n\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT $point_scale;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\vspace{.5in} \\newline \n. ";
	}

	my $speech_times = $event_settings{"speech_times"};

	if ($speech_times) { 
		my $strip = HTML::Strip->new();
		$speech_times =~ s/\<li\>/*/g;
		$speech_times =~ s/\<\/p\>/\n \n/g;
		$speech_times =~ s/\<\/li\>/\n \n/g;
		$speech_times =~ s/<br \/>/\n\n/g;
		$speech_times =~ s/\&nbsp;/ /g;
		$speech_times = $strip->parse( $speech_times );
		$speech_times = Tab::texify($speech_times);
		$speech_times =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT "{\\bf Speech Times:} \n\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT $speech_times;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\medskip \\newline \n ";
	}

	undef $event;

	close (TEXOUT);

	return;

</%perl>
