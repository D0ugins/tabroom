<%args>
	$filename
	$panel_id => undef
	$judge_id => undef
	$event_id => undef
	$round_id => undef
	$chair    => undef
</%args>
<%perl>

	my $filepath = $Tab::file_root."/tmp/".$filename;

	use List::Util 'shuffle';

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my $round = $panel->round if $panel;
	$round = Tab::Round->retrieve($round_id) unless $round || not defined $round_id;

	my $timeslot = $round->timeslot if $round;
	my $event = $round->event if $round;
	$event = Tab::Event->retrieve($event_id) unless $event;
	my %event_settings = $event->all_settings();

	my $tourn = $event->tourn;

	my %tourn_settings = $tourn->all_settings;

	my $ncfl = $tourn_settings{"ncfl"};

	unless ($event) { 
		$event = Tab::Event->retrieve($event_id) if $event_id;
	}

	unless ($event) { 
		$m->print('<div class="blankfull"><h4>error?</h4>');
		$m->print('<p class="warning">That round appears to not exist or not belong to an event.');
		$m->print('Please hit the browser back button and try again</p></div>');
		$m->abort();
	}

	my $no_codes = $event->category->setting("no_codes");

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $no_sides++ if $event_settings{"no_side_constraints"};

	my $elim++ if $round && $round->type eq "elim";
	$elim++ if $round && $round->type eq "final";

	undef $elim if $tourn_settings{"nsda_district"};

	my $ld++ if $event && $event->type eq "ld";

	
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

    my $no_side_constraints++ if $event_settings{'no_side_constraints'};

    my $sidelocks++ 
		if $round 
		&& ($round->type eq "elim" || $round->type eq "final") 
		&& not defined $no_side_constraints;

	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel) if $panel;

	my $start;
	
	if ($round) { 
		my $roundstart = $round->start_time;
		$roundstart = $timeslot->start unless $roundstart;
		$roundstart->set_time_zone($tz);
		$start = $roundstart->clone;
	}

	my $flight_offset = $event_settings{"flight_offset"};

	if ($flight_offset && $panel && $panel->flight > 1) { 
		my $flight = $panel->flight;
		$flight--;
		$start->add( minutes => $flight_offset * $flight) if $flight;
	}

	my $points;
	my $ranks;
	my $winloss;

	if ($panel && $panel->round->tiebreak_set) { 

		TIEBREAK:
		foreach my $tb ($panel->round->tiebreak_set->tiebreaks) {

			my $round_type = $round->type;
			$round_type = "prelim" if $round_type eq "highhigh";
			$round_type = "prelim" if $round_type eq "highlow";

			unless (
				$tb->count eq "previous" 
				|| $tb->count eq "all"
			) { 
				next TIEBREAK if $tb->count ne $round_type;
			}

			$points++ if $tb->name eq "points";
			$ranks++ if $tb->name eq "ranks";
			$winloss++ if $tb->name eq "ballots";
			$winloss++ if $tb->name eq "losses";
			$winloss++ if $tb->name eq "winloss";
		}

	} elsif ($round && $round->tiebreak_set) { 
	
		TIEBREAK:
		foreach my $tb ($round->tiebreak_set->tiebreaks) {

			unless (
				$tb->count eq "previous" 
				|| $tb->count eq "all"
			) { 
				next TIEBREAK if $tb->count ne $round->type;
			}

			$points++ if $tb->name eq "points";
			$ranks++ if $tb->name eq "ranks";
			$winloss++ if $tb->name eq "ballots";
			$winloss++ if $tb->name eq "losses";
			$winloss++ if $tb->name eq "winloss";
		}

	} else { 

		my @round = sort {$a->name <=> $b->name} $event->rounds;
		my $sample = shift @round;

		TIEBREAK:
		if ($sample->tiebreak_set) { 

			foreach my $tb ($sample->tiebreak_set->tiebreaks) {

				unless (
					$tb->count eq "previous" 
					|| $tb->count eq "all"
				) { 
					next TIEBREAK if $tb->count ne $round->type;
				}

				$points++ if $tb->name eq "points";
				$ranks++ if $tb->name eq "ranks";
				$winloss++ if $tb->name eq "ballots";
				$winloss++ if $tb->name eq "losses";
				$winloss++ if $tb->name eq "winloss";
			}
		} else { 
			$points++;
			$ranks++;
		}
	}

	$points++ if $tourn_settings{"nsda_district"};

	my $lpw++ unless $event_settings{"no_lpw"};

	my $max_points = $event_settings{"max_points"};
	my $min_points = $event_settings{"min_points"};

	my $max_entry = $event_settings{"max_entry"};
	my $min_entry = $event_settings{"min_entry"};

	$min_points = 0 unless $min_points;
	$max_points = 30 unless $max_points;

	my $subscores = $event_settings{"wsdc_categories"};

    my %max_subpoints = ();
    my %min_subpoints = (); 

    my @scores = ("Style", "Content", "Strategy", "POI"); 
    
    foreach my $key (@scores) { 

        $min_subpoints{$key} = $event_settings{"min_".lc($key)."_points"};
        $max_subpoints{$key} = $event_settings{"max_".lc($key)."_points"}; 

		$min_subpoints{$key} = 0 unless $min_subpoints{$key};

        $min_subpoints{"total"} += $min_subpoints{$key} unless $key eq "POI";
        $max_subpoints{"total"} += $max_subpoints{$key} unless $key eq "POI";

    }

    my $trash = pop @scores unless $max_subpoints{"POI"};

	open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\renewcommand{\\arraystretch}{1.8}\n";

	print TEXOUT "\\setlength{\\parindent}{0pt}\n";

	print TEXOUT "\\noindent\n";

	if ($panel) { 
		print TEXOUT "\\parbox[l][.5in][t]{2.5in}{ ";
		print TEXOUT "\\hrule height 0pt width 0pt \n";
		print TEXOUT "\\normalsize \n";

		print TEXOUT "{\\bf Room: ".&Tab::texify($panel->room->name)."} \n\n " 
			if $panel->room;

		print TEXOUT "{\\bf Room: ASK TAB } \n\n " unless $panel->room;

		print TEXOUT "{\\bf Flight ".$panel->flight." Start: ".Tab::nicetime($start)." } \n\n " 
			if $round->flighted > 1;

		print TEXOUT "{\\bf Start: ".Tab::nicetime($start)." } \n\n " if $round->flighted < 2;
		print TEXOUT "{\\bf ".&Tab::texify($event->name)." }";
		print TEXOUT "}";
		print TEXOUT "\\parbox[c][.5in][t]{2.1in}{";
		print TEXOUT "\\hrule height 0pt width 0pt \n";
		print TEXOUT "\\hfill ";

		print TEXOUT "{\\fontsize{32pt}{32pt}\\selectfont \\bf ".$round->name."} " 
			unless $round->label;

		print TEXOUT "{\\fontsize{24pt}{24pt}\\selectfont  \\bf ".Tab::texify($round->label)."}" 
			if $round->label;

		print TEXOUT "\\hfill\n";
		print TEXOUT "\\vspace{.05in}";
		print TEXOUT "} ";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\parbox[r][.5in][t]{2.75in}{";
		print TEXOUT "\\hrule height 0pt width 0pt \n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "{\\Huge \\bf *}" if $judge && $judge->chair;


		if ($judge) { 

			print TEXOUT "{\\fontsize{24pt}{24pt}\\selectfont \\bf ";
	
			print TEXOUT "\\truncate[-]{2.70in}{\n";
			print TEXOUT Tab::texify($judge->code)." - " unless $no_codes;
			print TEXOUT Tab::texify(substr($judge->last.", ".$judge->first, 0, 24))."}";
			print TEXOUT "}\n";
			print TEXOUT "\\vspace{.05in}";

			if ($judge->school) { 
				print TEXOUT "\n\n \\hfill {\\normalsize ";
				
				if ($ncfl) { 
					print TEXOUT Tab::texify($judge->school->region->code)."}";
				} else { 
					print TEXOUT Tab::texify(substr($judge->school->short_name, 0, 32))."}";
				}
			}

		} else { 
			print TEXOUT "{\\Large \\bf Judge: \\makebox[1.75in]{\\hrulefill}}";
		}


		print TEXOUT "} \\\\ \n";

		unless ($winloss || $ranks || $points) { 

			print TEXOUT "\\medskip \n ";
			print TEXOUT "\\newline\n ";
			print TEXOUT "\\begin{center}\n";

			print TEXOUT "{\\LARGE \\bf \\color{red} You have no tiebreakers set so this ballot is blank.  Set tiebreakers for each round for better results! }";

			print TEXOUT "\\end{center}\n";
		}

	} else { 

		print TEXOUT "{\\bf Room: \\makebox[1.5in]{\\hrulefill} ";
		print TEXOUT "\\hfill Round: \\makebox[.5in]{".$round->realname."} " if $round;
		print TEXOUT "\\hfill Round: \\makebox[.5in]{\\hrulefill} " unless $round;
		print TEXOUT "\\hfill Judge: \\makebox[1.5in]{\\hrulefill}}\n\\medskip\\newline\n";

	}


	print TEXOUT "\\noindent\n";
	print TEXOUT "\\begin{center}\n";
	my $logo = $tourn_settings{"logo"};

	if ($logo) { 

		unless (-e "$Tab::file_root/tmp/$logo") { 
			system "cd $Tab::file_root/tmp;
				$Tab::latex_path_prefix/wget ".$Tab::s3_url."/".$tourn->id."/".$logo;
		}

		if (-e "$Tab::file_root/tmp/".$logo) { 
			print TEXOUT "\\vspace{-32pt}\n";
			print TEXOUT "\\begin{figure}[h!]\n";
			print TEXOUT "\\hspace{-13pt}\n";
			print TEXOUT "\\centerline{\\includegraphics[height=1in]{".$logo."}}\n";
			print TEXOUT "\\end{figure}\n";
			print TEXOUT "\\vspace{-20pt}\n";
		}

	} else { 

		my $t_start = $tourn->start->set_time_zone($tz);
		my $t_end = $tourn->end->set_time_zone($tz);
		
		my $date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->day.", ".$t_end->year  
			if $t_start->month == $t_end->month;

		$date_string = $t_start->month_abbr." ".$t_start->day." - ".$t_end->month_abbr." ".$t_end->day.", ".$t_end->year  
			unless $t_start->month == $t_end->month;

		print TEXOUT "{\\huge \\bf ".&Tab::texify(uc($tourn->name))." } \\\\ \n";
		print TEXOUT "\\smallskip \n ";
		print TEXOUT "{\\large \\bf ".&Tab::texify($date_string)." } \\\\ \n";
	}

	print TEXOUT "\\end{center} \n";

	my $message = $event_settings{"ballot_rules"};

	if ($message) { 
		my $strip = HTML::Strip->new();
		$message =~ s/\<li\>//g;
		$message =~ s/\<\/li\>/\n/g;
		$message =~ s/\r/\n\n/g;
		$message =~ s/\n/\n\n/g;
		$message =~ s/<br \/>/\n\n/g;
		$message =~ s/\&nbsp;/ /g;
		$message = $strip->parse( $message );
		$message =~ s/^\s+//;
		$message =~ s/\s+$//;
		chomp $message;
		print TEXOUT "\\footnotesize\n ";
		print TEXOUT "\\noindent\n ";
		print TEXOUT &Tab::texify($message);
		print TEXOUT "\\vspace{.2in}\n";
		print TEXOUT "\\newline \n ";
	}

	if ($chair) { 

		my $message = $event_settings{"ballot_rules_chair"};

		if ($message) { 
			my $strip = HTML::Strip->new();
			$message =~ s/\<li\>//g;
			$message =~ s/\<\/li\>/\n/g;
			$message =~ s/\r/\n\n/g;
			$message =~ s/\n/\n\n/g;
			$message =~ s/<br \/>/\n\n/g;
			$message =~ s/\&nbsp;/ /g;
			$message = $strip->parse( $message );
			$message =~ s/^\s+//;
			$message =~ s/\s+$//;
			chomp $message;
			print TEXOUT "\\footnotesize\n ";
			print TEXOUT "\\noindent\n ";
			print TEXOUT &Tab::texify($message);
			print TEXOUT "\\vspace{.2in}\n";
			print TEXOUT "\\newline \n ";
		}
	}

	if ($elim) { 

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		@entries = shuffle @entries unless $locked;

		my $first = shift @entries;
		my $second = shift @entries if @entries;

		print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\large\n";

		if ($first && $second) { 

			if ($no_side_constraints || not defined $locked) { 

				print TEXOUT "\\vspace{.2in}\n";

				print TEXOUT Tab::texify($first->code." (".$first->name.")");
				print TEXOUT " vs ".Tab::texify($second->code." (".$second->name.")")." \n\n";

				print TEXOUT "\\vspace{.05in}\n";

				print TEXOUT "\\scriptsize{\\emph{Debaters should flip for sides. Please mark entry designations by side on the lines below}}\n\n";

				print TEXOUT "\\vspace{.3in}\n";


			} elsif ($locked) { 

				print TEXOUT "{\\scriptsize \\emph{ Sides are locked due to a previous debate between these entries}}\n\n";
				print TEXOUT "\\vspace{.2in}\n";
				print TEXOUT "\\parbox[c]{2.75in}{".Tab::texify($first->code." (".$first->name.")")."} \\hspace{.5in} \\parbox[c]{2.75in}{". Tab::texify($second->code." (".$second->name.")") ."}\n";

			}

			print TEXOUT "\\makebox[2.75in]{\\hrulefill} \\hspace{.5in} \\makebox[2.75in]{\\hrulefill}\n\n";
			print TEXOUT "\\footnotesize\n";
			print TEXOUT "{\\bf ".Tab::texify(uc($aff_string))." } \\hspace{3in} {\\bf ".Tab::texify(uc($neg_string))." } " ;

		} else { 

			print TEXOUT "\\vspace{.05in}\n";

			print TEXOUT "\\scriptsize{\\emph{Debaters should flip for sides, unless they have debated before, in which case they should debate opposite sides. Please mark entry designations by side on the lines below}}\n\n" unless $no_side_constraints;
			print TEXOUT "\\scriptsize{\\emph{Debaters should flip for sides.  Please mark entry designations by side on the lines below}}\n\n" if $no_side_constraints;

			print TEXOUT "\\vspace{.3in}\n";

			print TEXOUT "\\makebox[2.75in]{\\hrulefill} \\hspace{.5in} \\makebox[2.75in]{\\hrulefill}\n\n";
			print TEXOUT "\\footnotesize\n";
			print TEXOUT "{\\bf ".Tab::texify(uc($aff_string))." } \\hspace{3in} {\\bf ".Tab::texify(uc($neg_string))." } " ;

		}

		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n";
		print TEXOUT "\\newline\n";

	} else { 

		my $aff;
		my $neg;

		if ($panel) { 
			foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {
				$aff = $entry if $entry->side == 1;
				$neg = $entry if $entry->side == 2;
			}
		}

		my @affs = $aff->students if $aff;
		my @negs = $neg->students if $neg;

		if ($subscores) {  
			print TEXOUT "\\hfill\n";
			print TEXOUT "\\begin{minipage}[c]{5.25in}";
		} else {
			print TEXOUT "\\begin{minipage}[c]{3.5in}";
		}

		print TEXOUT "\n \\normalsize\n";
		
		if ($no_sides) {

			print TEXOUT "{\\small {\\bf ".Tab::texify(uc($aff_string))
				." \\hspace{.1in} ".Tab::texify(uc($neg_string))
				." } \\hspace{.1in} {\\footnotesize (Circle One) } }\n\\medskip\n\\newline\n";
			print TEXOUT "\\begin{tabular}{"

		} else { 
			print TEXOUT "{\\small \\bf ".Tab::texify(uc($aff_string))."}\n\\newline\n";
			print TEXOUT "\\begin{tabular}{"
		} 

		my $first_row;
		my $size = "1.75in" if $ranks;
		$size = "2.25in" unless $ranks;

		if ($max_entry > 1) { 
			print TEXOUT "|p{.25in}|p{$size}";

			$first_row = " {\\bf \\scriptsize Spkr} & {\\bf \\truncate{$size}{".Tab::texify($aff->code)."} }" if $aff;
			$first_row = " {\\bf \\scriptsize Spkr} & {\\bf Team: } " unless $aff;
		} else { 
			print TEXOUT "|" unless $event->type eq "ld";
			print TEXOUT "p{$size}";
			$first_row = " {\\bf \\truncate{$size}{".Tab::texify($aff->code)."} }" if $aff;
			$first_row = " {\\bf \\truncate{$size}{ Debater: } }" unless $aff;
		}

		if ($subscores) { 

			foreach my $score (@scores) { 
				print TEXOUT "|" unless $ld;
				print TEXOUT "p{.4in}";
				$first_row .= " & \\begin{minipage}[c]{.5in}\n";
				$first_row .= "\\vspace{.05in}\n";
				$first_row .= "{\\bf \\scriptsize ".ucfirst($score)." }\n\n";
				$first_row .= "{\\scriptsize ( $min_subpoints{$score} - $max_subpoints{$score} )}\n";
				$first_row .= "\\vspace{.02in}\n";
				$first_row .= "\\end{minipage}\n";
			}

			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c]{.5in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize TOTAL }\n\n";
			$first_row .= "{\\scriptsize ( $min_subpoints{'total'} - $max_subpoints{'total'} )}\n";
			$first_row .= "\\vspace{.02in}\n";
			$first_row .= "\\end{minipage}\n";

		} elsif ($points) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize POINTS}\n\n";
			$first_row .= "{\\scriptsize ( $min_points - $max_points )}\n";
			$first_row .= "\\vspace{.02in}\n";
			$first_row .= "\\end{minipage}\n";
		}

		if ($ranks) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c][][t]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize RANK}\n\n";
			$first_row .= "\\vspace{.22in}\n\n";
			$first_row .= "\\end{minipage}\n ";
		}

		print TEXOUT "|" unless $ld;
		print TEXOUT "}\n";
		print TEXOUT "\\hline\n" unless $ld;
		print TEXOUT $first_row."\\\\ \n";
		print TEXOUT "\\hline\n" unless $ld;

		my $order = 1;

		if (@affs && ($points || $ranks)) { 
			foreach my $speaker (@affs) { 
				print TEXOUT " & " if $max_entry > 1; 
				print TEXOUT Tab::texify($speaker->first." ".$speaker->last." ");
				print TEXOUT " & " if $points;
				print TEXOUT " & & & " if $subscores;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}

		} elsif ($points || $ranks) { 

			my $order = 1;
			foreach (1 .. $max_entry) { 

				print TEXOUT " & " if $max_entry > 1;
				print TEXOUT "{\\footnotesize Name: }";
				print TEXOUT " & " if $points;
				print TEXOUT " & & & " if $subscores;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}
		}

		if ($subscores && $event_settings{"team_total_line"}) { 

			print TEXOUT "\\multicolumn{5}{|r|}{ \\bf TEAM TOTAL } & \n";
			print TEXOUT " & " if $ranks;
			print TEXOUT "\\\\ \n";
			print TEXOUT "\\hline\n" unless $ld;
		}

		print TEXOUT "\\end{tabular}\n";

		print TEXOUT "\\end{minipage}\n";

		if ($subscores) {  

			print TEXOUT "\\hfill\n";

			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n \n";
			print TEXOUT "\\hfill\n";
			print TEXOUT "\\begin{minipage}[c]{5.25in}";

		} else { 

			if ($ranks) { 
				print TEXOUT "\\hspace{.15in}\n"
			} else { 
				print TEXOUT "\\hspace{.25in}\n"
			}

			print TEXOUT "\\begin{minipage}[c]{3.5in}";

		}

		print TEXOUT "\n \\normalsize\n";

		if ($no_sides) { 

			print TEXOUT "\\hfill {\\footnotesize (Circle One) } \\hspace{.1in} {\\small {\\bf  ".
				Tab::texify(uc($aff_string))." \\hspace{.1in} ".
				Tab::texify(uc($neg_string))." } }\n\n\\medskip\n";

			print TEXOUT "\\begin{tabular}{";

		} else { 

			print TEXOUT "{\\small \\bf ".Tab::texify(uc($neg_string))."}\n\\newline\n";
			print TEXOUT "\\begin{tabular}{";

		} 

		undef $first_row;
		$size = "1.75in" if $ranks;
		$size = "2.25in" unless $ranks;

		if ($max_entry > 1) { 

			print TEXOUT "|p{.25in}|p{$size}";

			$first_row = " {\\bf \\scriptsize Spkr} & {\\bf \\truncate{$size}{".
				Tab::texify($neg->code)."} }" if $neg;

			$first_row = " {\\bf \\scriptsize Spkr} & {\\bf Team: } " unless $neg;

		} else { 

			print TEXOUT "|" unless $event->type eq "ld";
			print TEXOUT "p{$size}";

			$first_row = " {\\bf \\truncate{$size}{".Tab::texify($neg->code)."} }" if $neg;
			$first_row = " {\\bf \\truncate{$size}{ Debater: } }" unless $neg;
		}

		if ($subscores) { 

			foreach my $score (@scores) { 
				print TEXOUT "|" unless $ld;
				print TEXOUT "p{.4in}";
				$first_row .= " & \\begin{minipage}[c]{.5in}\n";
				$first_row .= "\\vspace{.05in}\n";
				$first_row .= "{\\bf \\scriptsize ".ucfirst($score)." }\n\n";
				$first_row .= "{\\scriptsize ( $min_subpoints{$score} - $max_subpoints{$score} )}\n";
				$first_row .= "\\vspace{.02in}\n";
				$first_row .= "\\end{minipage}\n";
			}

			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c]{.5in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize TOTAL }\n\n";
			$first_row .= "{\\scriptsize ( $min_subpoints{'total'} - $max_subpoints{'total'} )}\n";
			$first_row .= "\\vspace{.02in}\n";
			$first_row .= "\\end{minipage}\n";

		} elsif ($points) { 

			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize POINTS}\n\n";
			$first_row .= "{\\scriptsize ( $min_points - $max_points )}\n";
			$first_row .= "\\vspace{.02in}\n";
			$first_row .= "\\end{minipage}\n";
		}

		if ($ranks) { 
			print TEXOUT "|" unless $ld;
			print TEXOUT "p{.4in}";
			$first_row .= " & \\begin{minipage}[c][][t]{.4in}\n";
			$first_row .= "\\vspace{.05in}\n";
			$first_row .= "{\\bf \\scriptsize RANK}\n\n";
			$first_row .= "\\vspace{.22in}\n\n";
			$first_row .= "\\end{minipage}\n ";
		}

		print TEXOUT "|" unless $ld;
		print TEXOUT " }\n";
		print TEXOUT "\\hline\n" unless $ld;
		print TEXOUT $first_row."\\\\ \n";
		print TEXOUT "\\hline\n" unless $ld;

		$order = 1;

		if (@negs && ($points || $ranks)) { 
			foreach my $speaker (@negs) { 
				print TEXOUT " & " if $max_entry > 1;
				print TEXOUT Tab::texify($speaker->first." ".$speaker->last." ");
				print TEXOUT " & " if $points;
				print TEXOUT " & & & " if $subscores;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}
		} elsif ($points || $ranks) { 

			foreach (1 .. $max_entry) { 

				print TEXOUT " & " if $max_entry > 1;
				print TEXOUT "{\\footnotesize Name: }";
				print TEXOUT " & " if $points;
				print TEXOUT " & & & " if $subscores;
				print TEXOUT "\\makebox[.5in]{\\hrulefill}" if $ld;
				print TEXOUT " & " if $ranks;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\hline\n" unless $ld;
			}
		}

		if ($subscores && $event_settings{"team_total_line"}) { 

			print TEXOUT "\\multicolumn{5}{|r|}{ \\bf TEAM TOTAL } & \n";
			print TEXOUT " & " if $ranks;
			print TEXOUT "\\\\ \n";
			print TEXOUT "\\hline\n" unless $ld;
		}

		print TEXOUT "\\end{tabular}\n";

		print TEXOUT "\\end{minipage}\n";

		if ($subscores) {  
			print TEXOUT "\\hfill\n";
		}

		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";

	}

	if ($winloss) { 

		print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\vspace{.3in}\n";
		print TEXOUT "\\normalsize\n";
		print TEXOUT "Winner: \\makebox[2.5in]{\\hrulefill} debating on the \\makebox[1in]{\\hrulefill}\n";


		print TEXOUT "\\hspace{.15in} \\footnotesize Low point win? \\makebox[.5in]{\\hrulefill} \n" 
			if $lpw &! $elim;

		print TEXOUT "\n";
		print TEXOUT "\\scriptsize\n";

		if ($elim) { 

			print TEXOUT "\\makebox[1.25in]{}School/Team\\makebox[2.3in]{} Side (";
			print TEXOUT Tab::texify($aff_string." or ".$neg_string).")";

		} else { 
			print TEXOUT "\\makebox[.8in]{}School/Team\\makebox[2.3in]{} Side (";
			print TEXOUT Tab::texify($aff_string." or ".$neg_string).")";
			print TEXOUT "\\makebox[1.25in]{}" if $lpw;
		}
		print TEXOUT "\n\n";
		print TEXOUT "\\vspace{.25in}\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\end{minipage}\n\n";
	}

	print TEXOUT "\\begin{minipage}[c][][r]{7in}\n";
	print TEXOUT "\\begin{center}\n";
	print TEXOUT "Signature:  \\makebox[3.25in]{\\hrulefill} ";
	print TEXOUT "School: \\makebox[2in]{\\hrulefill}" if $event->type eq "pf";
	print TEXOUT "\n\n";
	print TEXOUT "\\end{center}\n";
	print TEXOUT "\\end{minipage}\n\n";

	my $pronouns_string;

	Tab::Student->set_sql( pronouns => "
		select student.id, student.last, entry.code code, person.pronoun entry
		from ballot, entry, entry_student, student, person
		where ballot.panel = ? 
		and ballot.entry = entry.id
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		and student.person = person.id
		group by person.id ");

	if ($panel &! $ncfl) { 
		foreach my $student (Tab::Student->search_pronouns($panel->id)) { 
			next unless $student->entry;
			$pronouns_string .= ", "  if $pronouns_string;
			$pronouns_string .= $student->code."'s ".$student->last." pronouns: ".$student->entry;
		}   
	}   

	if (scalar @judges > 1) { 

		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\medskip \n\n";
		print TEXOUT "\\footnotesize {\\bf *Please chair this round.}\n" if $chair;

		my $other_names;

		foreach my $other (@judges) { 
			next if $other->id == $judge_id;
			$other_names .= ", " if $other_names;
			$other_names .= $other->code if $ncfl;
			$other_names .= $other->first." ".$other->last;
        
			if (
				(not defined $ncfl) 
				&& (
					$other->person 
					&& $other->person->id 
					&& $other->person->pronoun
				)
			) { 

				$pronouns_string .= ", "  if $pronouns_string;
				$pronouns_string .= "Judge ".$other->last." pronouns: ".$other->person->pronoun;
			}
		}

		if ($other_names) { 
			print TEXOUT "\\footnotesize {\\bf Other judges on panel: ";
			print TEXOUT Tab::texify($other_names);
			print TEXOUT ".  Please do not start until all judges are present.}\n";
		}

		print TEXOUT "\\end{center}\n";

	}

	if ((not defined $ncfl) && (defined $pronouns_string)) { 
		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\footnotesize Pronouns: ".Tab::texify($pronouns_string)."\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\vspace{.05in}\n";
	} else { 
		print TEXOUT "\\vspace{.15in}\n";
	}

	print TEXOUT "\\noindent";
	print TEXOUT "\\makebox[7in]{\\hrulefill}\n\n";
	print TEXOUT "\\noindent\n";
	print TEXOUT "Comments \\\& Reason for Decision:\n \n" unless $elim;
	print TEXOUT "\\vspace{.5in}\n";

	my $point_scale = $event_settings{"point_scale"};

	if ($point_scale) { 
		my $strip = HTML::Strip->new();
		$point_scale =~ s/\<li\>/*/g;
		$point_scale =~ s/\<\/p\>/\n \n/g;
		$point_scale =~ s/\<\/li\>/\n \n/g;
		$point_scale =~ s/<br \/>/\n\n/g;
		$point_scale =~ s/\&nbsp;/ /g;
		$point_scale = $strip->parse( $point_scale );
		$point_scale = Tab::texify($point_scale);
		$point_scale =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n\n";
		print TEXOUT "\\noindent \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT "{\\bf Point Scale:} \n\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT $point_scale;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\vspace{.5in} \\newline \n. ";
	}

	my $speech_times = $event_settings{"speech_times"};

	if ($speech_times) { 
		my $strip = HTML::Strip->new();
		$speech_times =~ s/\<li\>/*/g;
		$speech_times =~ s/\<\/p\>/\n \n/g;
		$speech_times =~ s/\<\/li\>/\n \n/g;
		$speech_times =~ s/<br \/>/\n\n/g;
		$speech_times =~ s/\&nbsp;/ /g;
		$speech_times = $strip->parse( $speech_times );
		$speech_times = Tab::texify($speech_times);
		$speech_times =~ s/\.\.\./ \\dotfill /g;
		print TEXOUT "\\scriptsize \n ";
		print TEXOUT "\\hfill ";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT "{\\bf Speech Times:} \n\n";
		print TEXOUT "\\fbox{ \n";
		print TEXOUT "\\parbox[l][][c]{1.5in}{";
		print TEXOUT $speech_times;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\medskip \\newline \n ";
	}

	close (TEXOUT);

	return;

</%perl>
