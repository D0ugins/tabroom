<%args>
	$round
</%args>
<%init>

	return unless $round;
	my $round_name = $round->name;

	use Math::Round;

	my $event = $round->event();
	my %record_count = ();

	my $previous_round;

	if ($round_name > 1) {

		Tab::Round->set_sql(previous => "
			select round.*
			from round
			where round.name < ?
			and not exists ( 
				select rs.id
				from round_setting rs
				where rs.round = round.id
				and rs.tag = 'ignore_results'
			)
			order by round.name DESC limit 1
		");

		$previous_round = Tab::Round->search_previous($round_name)->first;
	}

	if ($previous_round) {

		my %records = $m->comp(
			"/funclib/entry_wins.mas",
			round => $previous_round,
			event => $event
		);

		foreach my $panel (sort {$b->bracket <=> $a->bracket} $round->panels()) {

			my $counter;
			my $record;
			my $diff;

			foreach my $entry ( $m->comp(
				"/funclib/panel_entries.mas", panel => $panel
			)) {

				if (defined $record) {

					if ($record != $records{$entry->id}) {

						$diff++;
						$record = $records{$entry->id}
							if $record < $records{$entry->id};
					}

				} else {
					$record = $records{$entry->id};
					$record = 0 unless $record;
				}
			}


			if ($diff) {
				$record_count{$record}{"min"}++;
				$record_count{($record + 1)}{"max"}++;
				$record_count{$record}{"max"}++;
				$record_count{$record}{"max"}++;
				$record_count{($record - 1)}{"max"}++;

				$record_count{($record + 1)}{"total"} += .5;
				$record_count{$record}{"total"}++;
				$record_count{($record - 1)}{"total"} += .5;
			} else {

				$record_count{($record + 1)}{"max"}++;
				$record_count{$record}{"max"}++;

				$record_count{($record + 1)}{"min"}++;
				$record_count{$record}{"min"}++;

				$record_count{$record}{"total"}++;
				$record_count{$record + 1}{"total"}++;
			}
		}

	} else {

		my @entries = $event->entries( active => 1);

		my $half = scalar (@entries) / 2;

		foreach my $record (0 .. 1) {
			$record_count{$record}{"min"} = POSIX::floor($half);
			$record_count{$record}{"max"} = POSIX::ceil($half);
			$record_count{$record}{"total"} = scalar @entries;
		}
	}

	my $prelim_count;

	foreach my $round ($event->rounds() ) {
		next if $round->setting("ignore_results");
		next if $round->type eq "elim";
		next if $round->type eq "final";
		next if $round->type eq "runoff";
		$prelim_count++;
	}

	my %pascal_rounds;

	foreach my $key (sort keys %record_count) {
		$pascal_rounds{$round->name}{$key} = $record_count{$key}{"max"};
	}

	Tab::debuglog("Prelim count is $prelim_count");

	if ($prelim_count > $round->name) {

		foreach my $coming_round (($round->name + 1) .. $prelim_count) {

			my $record = $coming_round;

			foreach my $record (reverse (0 .. $coming_round))  {

				$pascal_rounds{$coming_round}{$record} =
					( $pascal_rounds{($coming_round - 1)}{$record} * .5)
					+ ( $pascal_rounds{($coming_round - 1)}{($record - 1)} * .5);

			}
		}
	}

</%init>

	<div class='sidenote'>

		<h6 class="martop bluetext semibold">
			After <% $round->realname %>
		</h6>

		<div class="liblrow smallish semibold padless marno">

			<span class="third">
				Record
			</span>

			<span class="nospace twothirds">

				<span class="third centeralign nospace">
					Min
				</span>

				<span class="third centeralign nospace">
					Max
				</span>

				<span class="third centeralign nospace">
					&amp; above
				</span>

			</span>

		</div>

<%perl>

		my $running_total;

		foreach my $record (
			sort {$b <=> $a}
			keys %record_count
		) {

			$running_total += $record_count{$record}{"max"};

</%perl>

			<div class="row">

				<span class="third semibold centeralign bluetext">
					<% $record %>-<% $round->name - $record %>
				</span>

				<span class="nospace twothirds">

					<span class="third centeralign nospace">
						<% $record_count{$record}{"min"} %>
					</span>

					<span class="third centeralign nospace">
						<% $record_count{$record}{"max"} %>
					</span>

					<span class="third centeralign nospace">
						<% $running_total %>
					</span>

				</span>

			</div>

%		}

%		if ($prelim_count > $round->name) {

			<h6 class="martop bluetext semibold">
				After round <% $prelim_count %>
			</h6>

			<div class="liblrow smallish semibold padless marno">

				<span class="third">
					Record
				</span>

				<span class="nospace third centeralign">
					Approx
				</span>

				<span class="nospace third centeralign">
					&amp Up
				</span>

			</div>

<%perl>

			undef $running_total;

			foreach my $record (
				sort {$b <=> $a}
				keys %{$pascal_rounds{$prelim_count}}
			) {

				$running_total += $pascal_rounds{$prelim_count}{$record};

</%perl>

				<div class="row">

					<span class="third semibold centeralign bluetext">
						<% $record %>-<% $prelim_count - $record %>
					</span>

					<span class="nospace thirds centeralign">
						<% nearest(1, $pascal_rounds{$prelim_count}{$record}) %>
					</span>

					<span class="nospace thirds centeralign">
						<% nearest(1, $running_total) %>
					</span>

				</div>

%			}

%		}

	</div>
