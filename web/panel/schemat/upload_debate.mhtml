<%args>
	$tourn
	$round_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

    my $tz = $tourn->tz;
    $tz = "UTC" unless $tz;
    my $now = DateTime->now(time_zone => $tz);

    # Get the upload and create the file handle.
    my $req = Apache2::Request->new($r);
    my @csv_handles = $r->upload;
    my $csv_file = $req->upload($csv_handles[0]);
    my $io = $csv_file->io;

    my @lines = <$io>;
	my @panels;

    foreach (@lines) {
        $_ =~ s/[\r]+/\n/g;
        $_ =~ s/[\r\n]+/\n/g;
        $_ =~ s/[\n]+/\n/g;
        push @panels, split (/\n/, $_);
    }

	my $event = $round->event;

	my %judge_flight;

    ENTRY:
    foreach my $panel_string (@panels) {

		my $letter = 1;

		if ($event->type eq 'speech') { 

			my ($room_name, $judge_name, @entries)  = split(/,/, $panel_string); 

			my ($first, @lasts) = split(/\ /, $judge_name);
			my $last = join(' ', @lasts);

			my $judge = Tab::Judge->search( 
				judge_group => $event->judge_group->id,
				first       => $first,
				last        => $last
			)->first;

			my $room = Tab::Room->search( 
				site => $round->site->id,
				name => $room_name
			)->first;

			my $flight = 1;

			my $panel = Tab::Panel->create({
				round  => $round->id,
				letter => $letter++,
				flight => $flight,
				room   => $room,
				bye    => 0
			});

			my $order = 1;

			foreach my $entry_code (@entries) { 

				my $entry = Tab::Entry->search( 
					event => $event->id, 
					code => $entry_code
				)->first;

				if ($entry) { 
					Tab::Ballot->create({
						panel        => $panel->id,
						entry        => $entry,
						judge        => $judge,
						speakerorder => $order++
					});
				}
			}

		} else { 

			my ($flight, $aff, $neg, $room_name, $judge_name)  = split(/,/, $panel_string); 
			my ($first, @lasts) = split(/\ /, $judge_name);
			my $last = join(' ', @lasts);

			next unless $aff && $neg;

			my $aff_entry;
			my $neg_entry;

			my $bye = 0;
			my $judge = 0;
			my $room = 0;

			if ($neg eq "ZZ-BYE-ZZ") { 
				$bye++;
				$aff_entry = Tab::Entry->search( 
					event => $event->id,
					code  => $aff
				)->first;
			} elsif ($aff eq "ZZ-BYE-ZZ") { 
				$bye++;
				$aff_entry = Tab::Entry->search( 
					event => $event->id,
					code  => $neg
				)->first;
			} else {

				$aff_entry = Tab::Entry->search( 
					event => $event->id,
					code  => $aff
				)->first;

				$neg_entry = Tab::Entry->search( 
					event => $event->id, 
					code => $neg
				)->first;

				$judge = Tab::Judge->search( 
					judge_group => $event->judge_group->id,
					first       => $first,
					last        => $last
				)->first;

				unless ($judge) {

					$judge = Tab::Judge->create({
						judge_group => $event->judge_group->id,
						first       => $first,
						last        => $last,
						active      => 0
					});
				}

				$room = Tab::Room->search( 
					site => $round->site->id,
					name => $room_name
				)->first;

				unless ($room) { 
					$room = Tab::Room->create({
						site     => $round->site->id,
						name     => $room_name,
						inactive => 1
					});
				}
			}

			my $letter = 1;

			unless ($flight) { 
				$judge_flight{$judge}++;
				$flight = $judge_flight{$judge};
			}

			$flight = 1 unless $flight;
			$judge = 0 unless $judge;

			my $panel = Tab::Panel->create({
				round  => $round->id,
				letter => $letter++,
				flight => $flight,
				room   => $room,
				bye    => $bye
			});

			if ($aff_entry) { 
				Tab::Ballot->create({
					panel => $panel->id,
					entry => $aff_entry->id,
					side  => 1,
					judge => $judge
				});
			}

			if ($neg_entry) { 
				Tab::Ballot->create({
					panel => $panel->id,
					entry => $neg_entry->id,
					side  => 2,
					judge => $judge
				});
			}
		}
	}

	$m->redirect("show.mhtml?round_id=".$round->id."&msg=Round Imported");

</%init>

