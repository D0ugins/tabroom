<%args>
	$round_id
	$message        => undef
	$sendto         => "all"
	$panels         => "all"
	$motion         => undef
	$include_motion => undef
	$flight         => undef
</%args>
<%init>

	my $oround = Tab::Round->retrieve($round_id);

	my @rounds;
	if ($ARGS{all_timeslot}) {
		push @rounds, $oround->timeslot->rounds();
	} else {
		push @rounds, $oround;
	}

	my %used;
	my $counter = 0;

	foreach my $round (@rounds) {

		my @judges;
		my @entries;

		$flight = int($flight);
		undef $flight if $flight < 1;

		if ($panels eq "all") {
			unless ($sendto eq "entries") {
				@judges = $m->comp(
					"/funclib/round_judges.mas",
					flight => $flight,
					round  => $round
				);
			}

			unless ($sendto eq "judges") {
				@entries = $m->comp(
					"/funclib/round_entries.mas",
					flight => $flight,
					round  => $round
				);
			}

		} elsif ($panels eq "unstarted") {

			unless ($sendto eq "entries") {
				@judges = $m->comp(
					"/funclib/round_judges.mas",
					round     => $round,
					flight    => $flight,
					unstarted => "yep"
				);
			}

			unless ($sendto eq "judges") {
				@entries = $m->comp(
					"/funclib/round_entries.mas",
						round     => $round,
						flight    => $flight,
						unstarted => "yep"
				);
			}

		} elsif ($panels eq "unentered") {

			unless ($sendto eq "entries") {
				@judges = $m->comp(
					"/funclib/round_judges.mas",
					round     => $round,
					flight    => $flight,
					unentered => "yep"
				);
			}

			unless ($sendto eq "judges") {
				@entries = $m->comp(
					"/funclib/round_entries.mas",
					round     => $round,
					flight    => $flight,
					unentered => "yep"
				);
			}

		} elsif ($panels eq "unconfirmed") {

			unless ($sendto eq "entries") {
				@judges = $m->comp("/funclib/round_judges.mas",
					round       => $round,
					flight      => $flight,
					unconfirmed => "yep"
				);
			}

			unless ($sendto eq "judges") {
				@entries = $m->comp("/funclib/round_entries.mas",
					round       => $round,
					flight      => $flight,
					unconfirmed => "yep"
				);
			}
		}

		if ($include_motion) {
			$message .= "\r\n " if $message;
			$message .= " Motion: ".$motion;
		}

		foreach my $entry (@entries) {

			foreach my $follower ($m->comp("/funclib/entry_follower.mas", entry => $entry)) {

				$m->comp(
					"/funclib/send_notify.mas",
					from    => 'Tabroom.com <live@tabroom.com>',
					to      => $follower,
					subject => "Message from Tab",
					body    => $message
				);

				$counter++;
				$used{$follower}++;
			}
		}

		foreach my $judge (@judges) {

			foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge)) {

				next if $used{$follower}++;

				$m->comp(
					"/funclib/send_notify.mas",
						from    => 'Tabroom.com <live@tabroom.com>',
						to      => $follower,
						subject => "Message from Tab",
						body    => $message
				);

				$counter++;
			}
		}
	}

	my $msg = "Blast Message sent to $counter recipients";
	$m->redirect("blast.mhtml?round_id=$round_id&msg=$msg");

</%init>

