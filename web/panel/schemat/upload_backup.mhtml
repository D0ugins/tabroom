<%args>
	$tourn
	$person
	$session
	$round_id  => undef
	$submitted => undef
</%args>

%	unless ($submitted) { 

		<div class="menu">

			<div class="sidenote">

				<h4>Don't be a moron</h4>

				<span class="full padmore">
					Please actually read the notes at left before doing things.  I
					don't write them for my health.  I really am trying to make
					your life and tournaments better. 
				</span>

			</div>

		</div>

		<div class="main">

			<h2 class="martopmore">
				Import a backup into <% $round->realname %> of <% $round->event->abbr %>
			</h2>

			<p>
				Import a round you saved from a backup using the green "Download
				Round Backup" button at right under "Change and Destroy".
			</p>

			<h4>OK, so listen...</h4>

			<p
				title="Tufts Parliamentary Debate found this out the hard way"
			>

				Since you find yourself in a position to be restoring a round from
				backup I hope you'll break from the usual pattern of software users
				and you'll actually read this cautionary note.
			</p>

			<p
				title="Don't be like Danny DeBois in this or anything else"
			>
				Please, only use this to upload Tabroom.com data that you've
				downloaded from a round from THIS tournament.  This backup only
				works inside the SAME tournament and will not go through and
				un-delete competitors, judges or schools, or sync the same
				from another tournament. 
			</p>

			<p 
				title="Just ask Jason Russell"
			>
				If you try to upload a full tournament backup or a CSV file or
				a copy of your 8th grade report card or whatever else, it will not
				work and might delete other data.  And if you ask me to help after
				doing that I will laugh at you so very very much.
			</p>

			<p
				title="So if you accidentally delete the entire friggin Glenbrooks like Brian did, you're still SOL"
			>
				But if you're here, you probably don't read things anyway, since
				that's why you ended up deleting a round.  Or you're in APDA, which
				amounts to the same thing.   So you're probably even more hosed
				than you were five minutes ago.  But don't say I didn't warn you.
			</p>

			<div class="row full padmore">

				<form 
					action   = "upload_backup.mhtml"
					method   = "post"
					name     = "panels"
					enctype  = "multipart/form-data"
					onsubmit = "return uploadThis()"
				>

				<input 
					type  = "hidden"
					name  = "round_id"
					value = "<% $round->id %>"
				>

				<span class="quarter strong centeralign">
					Upload round file:
				</span>

				<span class="half">

					<div class="uploader">

						<input 
							type     = "file"
							name     = "panels"
							style    = "opacity: 0;"
							onchange = "uploaderName('panels', 'filename')"
							id       = "panels"
						>

						<span 
							id    = "filename"
							class = "filename"
							style = "-webkit-user-select: none;"
						>No file selected</span>

						<span 
							class = "action"
							style = "-webkit-user-select: none;"
						>Choose File</span>
					</div>
				</span>

				<span class="fifth centeralign" >

					<input 
						name  = "submitted"
						type  = "submit"
						value = "Upload"
					>
				</span>

				</form>

			</div>

		</div>

%	}

<%init>

	use XML::Simple;
	use Crypt::PasswdMD5;
	use Data::Dumper;

	my $round = Tab::Round->retrieve($round_id);

	if ($submitted) { 

		my $now = DateTime->now;

		#PROCESS THE XML

		my $xml = new XML::Simple ( SuppressEmpty => 1,  ForceArray => [ qw(PANEL BALLOT ELIMSEED) ]); 
		my $data;

		my $req = Apache2::Request->new($r);
		my @xml_handles = $r->upload;
		my $xml_file = $req->upload($xml_handles[0]);
		my $xml_filename = $xml_file->tempname;

		my $filepath = $now->epoch;
		system "/bin/mkdir -p ".$Tab::file_root."/tmp/".$filepath;
		system "mv $xml_filename ".$Tab::file_root."tmp/$filepath/RoundData.xml";

		$data = $xml->XMLin($Tab::file_root."tmp/$filepath/RoundData.xml");

		my $msg;

		my @xml_rounds;
		
		eval { 
			@xml_rounds = @{$data->{ROUND}} if @{$data->{ROUND}};
		};

		if (@xml_rounds) { 
			$m->print("This data file contains multiple rounds.  You cannot use
			this interface to upload multiple rounds.  Use the API or the
			register->data menu");

			$m->abort;
		}
	
		my $xml_round = $data->{ROUND};

		my $event = $round->event;

		$round->created($now);
		$round->type = $xml_round->{TYPE} if $xml_round->{TYPE};
		$round->update;

		$msg .= $round->realname." replaced and uploaded.<br />";
	
		$m->comp( "/funclib/round_dump.mas", round => $round );
	
		foreach my $result ($round->results) { 
			$result->delete;
		}

		my %panel_by_id = ();

		my $letter = 1;
		$letter = "A" if $event->setting("panel_labels") eq "letters";

		PANEL:
		foreach my $xml_panel (@{$data->{PANEL}}) { 

			my $room_id = $xml_panel->{ROOM};
			$room_id = 0 unless $room_id;

			my $bye = 0;
			$bye = $xml_panel->{BYE} if $xml_panel->{BYE};

			my $flight = 0;
			$flight = $xml_panel->{FLIGHT} if $xml_panel->{FLIGHT};

			my $panel = Tab::Panel->create({
				letter => $letter,
				round  => $round->id,
				room   => $room_id,
				bye    => $bye,
				flight => $flight
			});

			$panel_by_id{$xml_panel->{ID}} = $panel;

			$letter++;

		}

		my %ballot_by_id = ();

		foreach my $xml_ballot (@{$data->{BALLOT}}) { 

			my $ballot_id = $xml_ballot->{ID};

			next if $xml_ballot->{ENTRY} == -99;
			next if $xml_ballot->{JUDGE} == 0;

			my $panel = $panel_by_id{${$xml_ballot->{PANEL}}[0]};

			next unless $panel;

			my $bye = 0;
			$bye++ if $xml_ballot->{JUDGE} == -1;
			$bye++ if $xml_ballot->{BYE};

			my $fft = 0;
			$fft++ if $xml_ballot->{NOSHOW};

			my $judge_id = 0;

			unless ($xml_ballot->{JUDGE} == -99) { 
				$judge_id = $xml_ballot->{JUDGE} if $xml_ballot->{JUDGE};
			}

			my $entry_id =$xml_ballot->{ENTRY};

			next unless $panel;

			my $ballot = Tab::Ballot->create({
				judge   => $judge_id,
				panel   => $panel,
				entry   => $entry_id,
				side    => $xml_ballot->{SIDE},
				bye     => $bye,
				forfeit => $fft,
				cat_id  => $xml_ballot->{ID}
			});

			$ballot_by_id{$xml_ballot->{ID}} = $ballot;

		}

		my %score_by_id = ();

		SCORE:
		foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 

			my $score_id = $xml_score->{ID};
			my $ballot = $ballot_by_id{$xml_score->{BALLOT}[0]};

			next unless $ballot;
			next if $xml_score->{SCORE} < 0;

			my $type = $xml_score->{SCORE_ID};

			my $tag = "ballot" if $type == 1;
			$tag = "points" if $type == 2 || $type == 4;
			$tag = "rank" if $type == 3 || $type == 5;

			my $student = $xml_score->{RECIPIENT} unless $tag eq "ballot";

			my $score = Tab::Score->create({
				tag     => $tag,
				ballot  => $ballot->id,
				student => $student,
				value   => $xml_score->{SCORE},
				cat_id  => $xml_score->{ID}
			});

		}

		$m->comp("/funclib/round_audit.mas", round => $round);
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&msg=$msg");

	}

</%init>
