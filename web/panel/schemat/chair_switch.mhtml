<%args>
	$tourn
	$tourn_settings
	$judge_id
	$panel_id
	$person
	$chair  => undef
	$return => undef
</%args>
<%perl>


	my $judge = Tab::Judge->retrieve($judge_id);
	my $panel = Tab::Panel->retrieve($panel_id);

	my $wudc++ if $panel->round->event->type eq "wudc";
	my $event = $panel->round->event;

	my $ballot = Tab::Ballot->search( 
		judge => $judge->id,
		panel => $panel->id
	)->first;

	Tab::Ballot->set_sql( only_last => "
		update ballot, panel, round
		set ballot.audit = 1
		where ballot.judge = ? 
		and ballot.panel = panel.id
		and panel.round = round.id
		and round.event = ? 
		and round.name < ? 
	");

	Tab::Panel->set_sql( by_letter => "
		select distinct panel.* 
		from panel, round 
		where round.event = ?
		and round.type    = ?
		and round.id      = panel.round
		and panel.letter  = ?
	");


	if ($wudc) { 

		Tab::Ballot->set_sql(remove_all_chairs => "
				update ballot 
					set chair = 0,audit = 0
					where panel = ? 
					and chair = 1");

		Tab::Ballot->set_sql(remove_chairs => "
				update ballot 
					set chair = 0,audit = 0
					where panel = ? 
					and judge = ? 
					and chair = 1");

		Tab::Ballot->set_sql(rm_scores => "
				delete score.* 
					from ballot, score 
					where score.ballot = ballot.id 
					and ballot.panel = ? 
					and ballot.chair = 1");

		Tab::Ballot->set_sql(add_chair => "
				update ballot 
					set chair = 1,audit = 0 
					where panel = ? 
					and judge = ? 
					and chair = 0");

	} else {  


		Tab::Ballot->set_sql(remove_all_chairs => "
				update ballot 
					set chair = 0, audit = 0
					where panel = ? 
					and chair = 1");

		Tab::Ballot->set_sql(remove_chairs => "
				update ballot 
					set chair = 0, audit = 0
					where panel = ? 
					and judge = ? 
					and chair = 1");

		Tab::Ballot->set_sql(add_chair => "
				update ballot 
					set chair = 1 where panel = ? 
					and judge = ? 
					and chair = 0");
	}

	my $msg;

	if ($ballot && $ballot->chair || (defined $chair && $chair ne 1)) { 

		Tab::Ballot->sql_remove_chairs->execute($panel->id, $judge->id);

		$msg = "Chair of panel removed";

		if (
			( 	$event->type eq "congress" 
				&& $panel->round->type eq "prelim"
			)
			|| 
				( $event->type eq "congress" 
				  && $panel->round->type eq "elim"
				  && $tourn_settings->{"nsda_nats"}
				)
		) { 

			my $type = $panel->round->type; 

			my @panels = Tab::Panel->search_by_letter( 
				$event->id, 
				$type,
				$panel->letter 
			);

			foreach my $opanel (@panels) { 

				next if $opanel->round->type ne $type;
				next if $opanel->id == $ballot->panel->id;
				
				$m->comp("judge_rm.mhtml", 
					judge_id       => $judge->id,
					panel_id       => $opanel->id,
					tourn          => $tourn,
					tourn_settings => $tourn_settings,
					return         => "ohgodyes",
					person         => $person
				);

			}

			$msg .= " and judge removed from other sessions of this chamber";

		}

	} elsif ($ballot)  { 
		
		if ( 
				(	$event->type eq "congress" 
					&& $panel->round->type eq "prelim"
				)
				
			|| 
				( $event->type eq "congress" 
				  && $panel->round->type eq "elim"
				  && $tourn_settings->{"nsda_nats"}
				)
		) {

			my $type = $panel->round->type;

			unless (defined $chair && $chair eq 0) { 

				my @panels = Tab::Panel->search_by_letter( 
					$event->id, 
					$type,
					$panel->letter 
				);

				my @rounds = 
					sort {$a->name <=> $b->name} 
					$event->rounds( type => $type );

				my $last_round = pop @rounds if @rounds;

				foreach my $opanel (@panels) { 

					next if $opanel->round->type ne $type;

					my %judges = map {$_->id => $_} $m->comp(
						"/funclib/panel_judges.mas", 
						panel => $opanel
					);

					# Remove the non chair from the other sessions


					foreach my $judge_id (keys %judges) { 

						next if $judge_id == $judge->id;

						next if $opanel->id == $panel->id;

						if ($judges{$judge_id}->chair) { 

							$m->comp("judge_rm.mhtml", 
								judge_id       => $judge_id,
								panel_id       => $opanel->id,
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								return         => "ohgodyes",
								person         => $person
							);
						}

					}

					unless ($judges{$judge->id}) { 

						$m->comp("judge_add.mhtml", 
							judge_id       => $judge->id,
							panel_id       => $opanel->id,
							tourn          => $tourn,
							tourn_settings => $tourn_settings,
							return         => "ohgodyes",
							person         => $person
						);
					}

					Tab::Ballot->sql_rm_scores->execute($opanel->id) if $wudc;

					Tab::Ballot->sql_remove_all_chairs->execute($opanel->id);

					Tab::Ballot->sql_add_chair->execute($opanel->id, $judge->id);

				}

				if ($event->setting("parli_ballot")) { 

					Tab::Ballot->set_sql( only_last => "
						update ballot, panel, round
						set ballot.audit   = 1
						where ballot.judge = ?
						and ballot.panel   = panel.id
						and panel.round    = round.id
						and round.event    = ?
						and round.type  = ? 
						and round.name < ? 
					");

					Tab::Ballot->sql_only_last->execute( 
						$judge->id, 
						$event->id, 
						$type,
						$last_round->name 
					);

				}

				$msg = "Parliamentarian ".$judge->first." ".$judge->last." designated for chamber ".$panel->letter." in ALL ROUNDS";

			}

		} else { 

			Tab::Ballot->sql_rm_scores->execute($panel->id) if $wudc;

			Tab::Ballot->sql_remove_all_chairs->execute($panel->id);

			Tab::Ballot->sql_add_chair->execute($panel->id, $judge->id);

			$msg = $judge->last." designated chair of panel";
		}

	}

	if ($return) { 

		return;

	} else { 

		$m->redirect("panel_view.mhtml?panel_id=".$panel->id."&msg=$msg");
	}


</%perl>
