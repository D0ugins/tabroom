<%args>
	$tourn
	$person         => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => undef
	$target_id      => undef
	$related_thing  => 1
</%args>
<%init>

	use List::Util 'shuffle';

    $m->clear_buffer();
    $r->content_type('application/json');

    unless ($target_id) {
        $m->print('{ "error": true, "message": "No ID sent for flip target"}');
        $m->abort();
    }

	$target_id = int($target_id);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $limit;
	my @panels;
	my $event;
	my $only;
	my $panel;
	my $round;

	if ($setting_name eq "cancel_aq") {

		foreach my $aq (Tab::Autoqueue->search(
			round => $target_id,
			tag   => "flip"
		)) {
			$aq->delete();
		}

		$m->print('{
			"error"   : false,
			"destroy" : "autoqueue",
			"message" : "No section found for ID '.$target_id.'"
		}');

		$m->abort();

	} elsif ($setting_name eq "cancel_aq2") {

		foreach my $aq (Tab::Autoqueue->search(
			round => $target_id ,
			tag   => "flip_2"
		)) {
			$aq->delete();
		}

		$m->print('{
			"error"   : false,
			"destroy" : "aq2",
			"message" : "No section found for ID '.$target_id.'"
		}');
		$m->abort();
	}

	if ($property_name eq "panel") {

		$panel = Tab::Panel->retrieve($target_id);

		unless ($panel) {
			$m->print('{
				"error"   : true,
				"message" : "No section found for ID '.$target_id.'"
			}');
			$m->abort();
		}

		if ($panel->bye) {
			$m->print('{
				"error"   : true,
				"message" : "There is no point in flipping a bye round"
			}');
			$m->abort();
		}

		push @panels, $panel;
		$limit = " and panel.id = ".$panel->id;

		$round = $panel->round;
		$event = $round->event;
		$only = $panel->id;

	} elsif ($property_name eq "round") {

		$round = Tab::Round->retrieve(int($target_id));

		unless ($round) {
			$m->print('{ "error": true, "message": "No round found for ID '.$target_id.'"}');
			$m->abort();
		}

		if (int($related_thing) > 0) {
			push @panels, $round->panels(bye => 0, flight => int($related_thing));
		} else {
			push @panels, $round->panels(bye => 0);
		}

		$limit = " and panel.round = ".$round->id;

		if (int($related_thing) > 0) {
			$limit .= " and panel.flight = ".int($related_thing);
		}

		$event = $round->event();
	}

	my %do_me;

	unless ($event->setting("no_side_constraints")) {

		my @clear_panels;

		foreach my $panel (@panels) {
			my $aff = $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel);

			if ($aff) {
				next;
			}

			$do_me{$panel->id}++;
		}
	}

	unless (@panels) {
        $m->print('{
			"error": true,
			"message": "No sections found for flips"
		}');
        $m->abort();
	}

	my $now = DateTime->now();
	my $deadline = $now->clone();

	unless ($deadline->second == 0) {
		$deadline->set( second => 0 );
		$deadline->add( minutes => 1);
	}

	my $add_mins = $event->setting("flip_deadline");

	$add_mins = 5 unless $add_mins > 0;
	$deadline->add( minutes => $add_mins );

	unless ($event->setting("flip_online")) {

        $m->print('{
			"error": true,
			"message": "This event is not set to enable online flips"}
		');
        $m->abort();
	}

	my $dbh = Tab::DBI->db_Main();

	if ($round
		&& ($setting_name eq "flip_published" || $setting_name eq "doall")
	) {

		if ($setting_name eq "doall") {
			$property_value = 1;
		}

		$round->setting("flip_published", $property_value);

		if ($setting_name eq "flip_published") {
			if ($property_value) {

				$m->print('{
					"error": false,
					"message": "Flip cards set to published"
				}');

				$m->abort();

			} else {
				$m->print('{
					"error": false,
					"message": "Flip cards set to NOT published"
				}');

				$m->abort();
			}
		}

	} elsif ($setting_name eq "deadline_only") {

		my $dt = eval {
			return Tab::dtme($round->timeslot->start->mdy('/'), $property_value, $tz);
		};

		my $message;
		my $error;

		if ($dt) {

			$dt->set_time_zone("UTC");

			my $flight_offset = $event->setting("flight_offset");

			if ($event->setting("flip_split_flights")) {
				undef $flight_offset;
			}

			my $sth = $dbh->prepare("update panel set flip_at = ? where id = ?");

			my %flight_cache;

			foreach my $panel (@panels) {

				next unless $do_me{$panel->id};

				unless ($flight_cache{$panel->flight}) {

					my $new_dt = $dt->clone();

					$new_dt->add( minutes => ($flight_offset * ($panel->flight - 1)));

					my $two_string = DateTime::Format::MySQL->format_datetime($new_dt);
					$flight_cache{$panel->flight} = $two_string;
				}

				my $string = $flight_cache{$panel->flight};
				$sth->execute($string, $panel->id);
			}

			$message = "Deadline set to ".$property_value;
			$error = "false";

		} else {
			$error = "true";
			$message = "Invalid time sent.  Please try again";
		}

		$round->setting("flip_at", "date", $dt);
        $m->print('{ "error": '.$error.', "message": "'.$message.'"}');
        $m->abort();
	}

	my $message;

	unless ($setting_name eq "blast_only") {

		my $sth = $dbh->prepare("
			select panel.id, aff.id, neg.id
			from panel
				left join ballot aff on aff.panel = panel.id and aff.side = 1
				left join ballot neg on neg.panel = panel.id and neg.side = 2
			where panel.id = panel.id
				and panel.bye != 1
				$limit
				group by panel.id
		");

		$sth->execute();

		my $update_sth = $dbh->prepare("
			update panel
				set panel.flip_at = ?, panel.flip_status = 'winner'
				where panel.id = ?
		");

		my $delete_sth = $dbh->prepare("
			delete score.*
			from (score, ballot, panel)
			where ballot.panel = ?
				and score.ballot = ballot.id
				and score.tag = 'flip_win'
		");

		while (
			my (
				$panel_id, $aff_id, $neg_id
			) = $sth->fetchrow_array()
		) {

			next unless $do_me{$panel_id};

			my @sides = shuffle ($aff_id, $neg_id);
			my $winner = shift @sides;

			$delete_sth->execute($panel_id);

			Tab::Score->create({
				ballot => $winner,
				tag    => "flip_win",
				value  => 1
			});

			$update_sth->execute(DateTime::Format::MySQL->format_datetime($deadline), $panel_id);
		}

		if ($round) {

			$message .= "Flips performed for ".$round->realname." of ".$event->abbr;
			$round->setting("flipped_at", "date", $deadline);

		} else {
			$message .= "Flips performed for ".$round->realname." of ".$event->abbr;
		}

		if ($setting_name eq "doall"
			&& (not defined $related_thing)
			&& (not defined $ARGS{"auto"})
		) {

			if ($event->setting("flip_split_flights")) {

				my $flight_offset = $event->setting("flight_offset");

				if ($flight_offset) {

					$now->add(minutes => $flight_offset);

					my $aq = Tab::Autoqueue->create({
						tag       => "flip_2",
						round     => $round,
						active_at => $now
					});

				}
			}
		}
	}

	my $reply;

	unless ($setting_name eq "flip_only") {

		if ($message) {
			$message .= ", published and blasted.";
		} elsif ($round) {
			$message .= "Flip status for ".$round->realname." blasted ";
		} else {
			$message .= "Flip status for this debate blasted";
		}

		if ($property_name eq "panel") {

			$m->comp("/funclib/blast_flips.mas",
				panel => $panel
			);

		} elsif ($property_name eq "round") {

			$m->comp("/funclib/blast_flips.mas",
				round => $round
			);

			$round->setting("flip_blasted", "date", $now);
		}

		$reply = $m->comp("/funclib/showdt.mas",
			string => $now,
			tz     => $tz,
			return => 'yasplz'
		);
	}

	my %response = (
        error   => 0,
        message => $message
    );

	if ($reply) {
		$response{"reply"} = $reply;
	}

	if ($ARGS{"auto"}) {
		$message .= " by automatic process ";
	}

    Tab::ChangeLog->create({
        type        => 'tabbing',
        event       => $event->id,
        tourn       => $event->tourn->id,
        person      => $person,
        description => $message,
        created     => $now
    });

    $m->print(JSON::encode_json(\%response));
    $m->abort();

</%init>
