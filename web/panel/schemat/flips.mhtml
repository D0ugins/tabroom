<%args>
	$person
	$tourn
	$tourn_settings
	$setting_name   => undef
	$property_name  => undef
	$property_value => undef
	$target_id      => undef
</%args>
<%init>

	use List::Util 'shuffle';

    $m->clear_buffer();
    $r->content_type('application/json');

    unless ($target_id) {
        $m->print('{ "error": true, "message": "No ID sent for flip target"}');
        $m->abort();
    }

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $limit;
	my @panels;
	my $event;
	my $only;
	my $panel;
	my $round;

	if ($setting_name eq "cancel_autoqueue") {

		foreach my $aq (Tab::Autoqueue->search( round => $target_id )) {
			$aq->delete();
		}

		$m->print('{
			"error"   : false,
			"destroy" : "autoqueue"
			"message" : "No section found for ID '.$target_id.'"
		}');
		$m->abort();

	}


	if ($property_name eq "panel") {

		$panel = Tab::Panel->retrieve($target_id);

		unless ($panel) {
			$m->print('{
				"error"   : true,
				"message" : "No section found for ID '.$target_id.'"
			}');
			$m->abort();
		}

		if ($panel->bye) {
			$m->print('{
				"error"   : true,
				"message" : "There is no point in flipping a bye round"
			}');
			$m->abort();
		}

		push @panels, $panel;
		$limit = " and panel.id = ".$panel->id;
		$event = $panel->round->event;
		$only = $panel->id;

	} elsif ($property_name eq "round") {

		$round = Tab::Round->retrieve($target_id);

		unless ($round) {
			$m->print('{ "error": true, "message": "No round found for ID '.$target_id.'"}');
			$m->abort();
		}

		push @panels, $round->panels(bye => 0);
		$limit = " and panel.round = ".$round->id;
		$event = $round->event;
	}

	unless (@panels) {
        $m->print('{ "error": true, "message": "No sections found for flips"}');
        $m->abort();
	}

	my $now = DateTime->now();
	my $deadline = $now->clone();

	unless ($deadline->second == 0) {
		$deadline->set( second => 0 );
		$deadline->add( minutes => 1);
	}

	my $add_mins = $event->setting("flip_deadline");

	$add_mins = 5 unless $add_mins > 0;
	$deadline->add( minutes => $add_mins );

	unless ($event->setting("flip_online")) {
        $m->print('{ "error": true, "message": "This event is not set to enable online flips"}');
        $m->abort();
	}

	my $dbh = Tab::DBI->db_Main();

	if ($round && $setting_name eq "flip_published") {

		$round->setting("flip_published", $property_value);

		if ($property_value) {
			$m->print('{ "error": false, "message": "Flip cards set to published"}');
			$m->abort();

		} else {
			$m->print('{ "error": false, "message": "Flip cards set to NOT published"}');
			$m->abort();
		}

	} elsif ($setting_name eq "deadline_only") {

		my $dt = eval {
			return Tab::dtme($round->timeslot->start->mdy('/'), $property_value, $tz);
		};

		my $message;
		my $error;

		if ($dt) {

			$dt->set_time_zone("UTC");
			foreach my $panel (@panels) {
				my $sth = $dbh->prepare("update panel set flip_at = ? where id = ?");
				$sth->execute(DateTime::Format::MySQL->format_datetime($dt), $panel->id);
			}

			$message = "Deadline set to ".$property_value;
			$error = "false";

		} else {
			$error = "true";
			$message = "Invalid time sent.  Please try again";
		}

		$round->setting("flip_at", "date", $dt);

        $m->print('{ "error": '.$error.', "message": "'.$message.'"}');
        $m->abort();

	}

	my $message;

	unless ($setting_name eq "blast_only") {

		my $sth = $dbh->prepare("
			delete score.*
			from (score, ballot, panel)
			where ballot.panel = panel.id
				and score.ballot = ballot.id
				and score.tag = 'flip_win'
				$limit
		");

		$sth->execute();
		$sth->finish();

		$sth = $dbh->prepare("
			select panel.id, aff.id, neg.id
			from panel
				left join ballot aff on aff.panel = panel.id and aff.side = 1
				left join ballot neg on neg.panel = panel.id and neg.side = 2
			where panel.id = panel.id
				and panel.bye != 1
				$limit
		");

		$sth->execute();

		while (
			my (
				$panel_id, $aff_id, $neg_id
			) = $sth->fetchrow_array()
		) {
			my @sides = shuffle ($aff_id, $neg_id);
			my $winner = shift @sides;

			Tab::Score->create({
				ballot => $winner,
				tag    => "flip_win",
				value  => 1
			});
		}

		$sth->finish();

		$sth = $dbh->prepare("
			update panel
				set panel.flip_at = ?, panel.flip_status = 'winner'
				where panel.id = panel.id
				$limit
		");

		$sth->execute(DateTime::Format::MySQL->format_datetime($deadline));
		$message .= "Flips performed for ".$round->realname." of ".$event->abbr;
	}

	my $reply;

	Tab::debuglog("Setting name is $setting_name and message right now is $message");

	unless ($setting_name eq "flip_only") {

		if ($message) {
			$message .= ", published and blasted.";
		} else {
			$message .= "Flip status for ".$round->realname." blsated ";
		}

		if ($property_name eq "panel") {

			$m->comp("/funclib/blast_flips.mas",
				panel => $panel
			);

		} elsif ($property_name eq "round") {

			$m->comp("/funclib/blast_flips.mas",
				round => $round
			);
		}

		$reply = $m->comp("/funclib/showdt.mas",
			string => $now,
			tz     => $tz,
			return => 'yasplz'
		);
	}

	my %response = (
        error   => 0,
        message => $message
    );

	if ($reply) {
		$response{"reply"} = $reply;
	}

    Tab::ChangeLog->create({
        type        => 'tabbing',
        event       => $event->id,
        tourn       => $tourn->id,
        person      => $person->id,
        description => $message,
        created     => $now
    });

    $m->print(JSON::encode_json(\%response));
    $m->abort();

</%init>
