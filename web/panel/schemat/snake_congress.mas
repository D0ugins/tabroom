<%args>
	$tourn
	$tourn_settings
	$person
	$round
	$whoami   => undef
</%args>
<%init>

	$m->abort unless $round;
	my $event = $round->event;
	$m->abort unless $event->tourn == $tourn->id;

	my @types;
	my $show_strength++ if $round->type eq "elim";

	if ($tourn_settings->{"nsda_nats"}) { 
		push @types, "district";
		push @types, "state";
	} else { 
		push @types, "school";
		if ($tourn_settings->{"nsda_district"}) { 
			push @types, "blocs";
		}
	}
	
	if ($show_strength) { 
		push @types, "strength";
		push @types, "seed";
		push @types, "section_rank";
	}

	push @types, "PO";

	my @averages = ("strength", "seed", "section_rank") if $show_strength;

	my %colors = (
		district     => "red",
		school       => "red",
		region       => "orange",
		state        => "green",
		PO           => "blue",
		seed         => "purple",
		section      => "black",
		section_rank => "grey",
		strength     => "orange"
	);

	my @all_colors; 

	foreach (keys %colors) {
		push @all_colors, $colors{$_};
	}

	my %event_settings = $event->all_settings;

	my %entry_settings = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		all   => 1,
		value => 1
	);

	my @panels = $round->panels;

    my %panel_entries = ();

    my $entries_ref;

	my %schools;

	if ($show_strength) { 

		my $previous_round = Tab::Round->search(
			name => ($round->name - 1),
			event => $event->id
		)->first;


		if ($previous_round) { 

			my @results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $previous_round,
			) if $previous_round;

			$entries_ref = pop @results if @results;

		}

	}

	my %seeds = %{$entries_ref->{'seed'}} 
		if $show_strength
		&& $entries_ref 
		&& $entries_ref->{"seed"};

	my %section_ranks = %{$entries_ref->{'section_rank'}} 
		if $show_strength
		&& $entries_ref 
		&& $entries_ref->{"section_rank"};

	my $strength = ${$entries_ref}{"tiebreak"}{"1"} 
		if $show_strength
		&& $entries_ref;

	foreach my $panel (@panels) { 

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

        push (@{$panel_entries{$panel->id}}, @entries);

		foreach my $entry (@entries) { 

			unless ($schools{$entry->school->id}{"code"}) {

				if ($entry->school->code) { 
					$schools{$entry->school->id}{"code"} = $entry->school->code;
				} else { 
					$schools{$entry->school->id}{"code"} = substr($entry->school->short_name, 0, 6);

					if ($tourn_settings->{"nsda_nats"}) { 
						$schools{$entry->school->id}{"state"} = $entry->school->chapter->state;
						$schools{$entry->school->id}{"district"} = $entry->school->district->code;
						$schools{$entry->school->id}{"district_name"} = $entry->school->district->code;
					}
				}
			}
		}
    }

	my %title_by_entry;


	my @blocs = $m->comp("/funclib/event_entry_settings.mas", 
		event => $event,
		tag   => "nsda_house_bloc" 
	) if $tourn_settings->{"nsda_district"} 
		&& $event->abbr eq "HOU";

	my %blocs_by_entry = map {$_->entry->id => $_->value} @blocs if @blocs;

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (@panels) { 

%				foreach my $average (@averages) { 
					averageContents('<% $panel->id %>', "<% $average %>");
%				}

%			}

		});

		function averageContents(panelID, targetType) { 

			var total = 0, counter = 0, average = 0, already = {};

			$("#panel_"+panelID).find("."+targetType+"s").each(function(index) { 

				var targetScore = parseInt(this.id);

				var entryID = $(this).attr("entry");

				if (!(entryID in already)) { 
					total = total + targetScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) { 
				average = (total / counter);
			}

			$("#average_"+targetType+"_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) { 
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) { 
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".statetoggle").removeClass('invert');
			$(".districttoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) { 

			$(".entries").not("."+clashType+"_"+clashKey).removeClass(colorToggle);
			$(".schooltoggle").not("#"+keyID).removeClass('invert');
			$(".statetoggle").not("#"+keyID).removeClass('invert');
			$(".districttoggle").not("#"+keyID).removeClass('invert');

			$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
			$("#"+keyID).toggleClass('invert');

			if (clashType === "hits") { 
				$("."+clashType).toggleClass("hidden");
				$("."+clashType).toggleClass(colorToggle);
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").toggleClass("hidden");

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop             : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_confirm.mhtml",{ 
                        entry_id : ui.draggable.attr("id"),
                        panel_id : this.id
                    }).done(function(data) { 

						console.log(data);

						if (data.error) { 
							console.log("THINGS ARE ERROR!");
							alertify.error(data.message);
						} else { 
							console.log("THINGS ARE SUCCESS!: "+data.message);
							alertify.set('notifier','delay', 2);
							alertify.notify(data.message, "custom");
							alertify.set('notifier','delay', 5);
						}
					});

                    // remove the original element from its origin to this
                    // location, and make it visible again while destroying the
                    // clone.  this is necessary because the default jquery
                    // draggable behavior does not play well with scrollable
                    // windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");
					averageStrength(panelID);

					$("#"+this.id).removeClass("strength_"+panelID);

                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$( ".draggable" ).draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) { 

					$("."+this.id).hide();

%					foreach my $type (@types) { 
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).removeClass("dk<% $colors{$type} %>");
%					}

				},

				start: function(event, ui) { 
			
%					foreach my $color (@all_colors) { 
						$(".entries").removeClass("dk<% $color %>");
%					}

%					foreach my $type (@types) { 
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).addClass("dk<% $colors{$type} %>");
%					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"
			});

		});

	</script>

<%perl>


</%perl>

		<div class="full nospace">

			<span class="twofifths">
				<h4><% $round->realname %> Elim Snake</h4>
			</span>

			<span class="threefifths rightalign">

				<span class="strong">
					Show:
				</span>

%				foreach my $type (@types) { 

%					my $label_type = $type;
%					$label_type =~ s/\_/ /g;

					<span 
						id      = "<% $type %>s"
						class   = "buttonwhite <% $colors{$type} %>text padless"
						onClick = "toggleShow(this.id)";
					>
						<% ucfirst($label_type) %>s
					</span>
%				}

			</span>

		</div>

<%perl>



		my $count;

		foreach my $panel (@panels) { 

			my %titles;
			my %counter = ();

</%perl>

			<span 
				class="marless top congress_snake"
				id = "panel_<% $panel->id %>"
			>

				<div class="yellowrow padmore smallish centeralign strong marno bordersides bordertop">
					Chamber <% $panel->letter %> <% $panel->id %>
				</div>


				<div 
					id    = "<% $panel->id %>"
					panel   = "<% $panel->id %>"
					class = "full lightrow nospace bordersides droppable centeralign"
				>

<%perl>
					foreach my $entry (@{$panel_entries{$panel->id}}) { 

						$counter{"school"}{$entry->school->id}++;

   						if ($tourn_settings->{"nsda_nats"}) { 
							$counter{"district"}{$schools{$entry->school->id}{"district"}}++;
							$counter{"state"}{$schools{$entry->school->id}{"state"}}++;
						}

</%perl>
						<span 
							class="
								biggish
								leftalign
								martop
								padtop
								padbottom
								marbottom
								draggable
								school_<% $entry->school->id %> 
%								if ($tourn_settings->{"nsda_nats"}) { 
									district_<% $schools{$entry->school->id}{"district"} %> 
									state_<% $schools{$entry->school->id}{"state"} %> 
%								}
							"
							id       = "<% $entry->id %>"
							school   = "<% $entry->school->id %>"
%							if ($tourn_settings->{"nsda_nats"}) { 
								district = "<% $schools{$entry->school->id}{"district"} %>"
								state    = "<% $schools{$entry->school->id}{"state"} %>"
%							}
						>

%							if (length($entry->code) > 6) { 

								<span class="marno padless full borderbottom centeralign codes" >
									<% $entry->code %>	
								</span>

%							} else { 
								<span class="nospace half borderright centeralign codes" >
									<% $entry->code %>	
								</span>
%							}

%							if ($tourn_settings->{"nsda_nats"}) { 

								<span class="nospace quarter rightalign states hidden greentext strong">
									<% $schools{$entry->school->id}{"state"} %>
								</span>

								<span class="nospace quarter rightalign districts hidden redtext strong">
									<% $schools{$entry->school->id}{"district"} %>
								</span>

								<span class="marless padless full rightalign district_name hidden redtext">
									<% $schools{$entry->school->id}{"district_name"} %>
								</span>

%							} else { 

								<span class="nospace quarter rightalign schools hidden" >
									<% $schools{$entry->school->id}{"code"} %>
								</span>

								<span 
									class="nospace quarter rightalign blocs hidden"
								>
									<% $blocs_by_entry{$entry->id} %>
								</span>

%							} 

							<span class="nospace quarter rightalign strong bluetext POs hidden">
								<% $entry_settings{$entry->id}{"presiding_officer"} ? "PO" : "" %>
							</span>


							<span class="nospace rightalign quarter strengths hidden orangetext strong"
								entry = "<% $entry->id %>"
								id    = "<% $strength ? ${$strength}{$entry->id} : ""  %>"
							>
								<% $strength ? ${$strength}{$entry->id} : ""  %>
							</span>

							<span class="nospace rightalign quarter seeds hidden purpletext strong"
								entry = "<% $entry->id %>"
								id    = "<% %seeds ? $seeds{$entry->id} : ""  %>"
							>
								<% %seeds ? $seeds{$entry->id} : ""  %>
							</span>

							<span class="nospace rightalign quarter section_ranks hidden strong"
								entry = "<% $entry->id %>"
								id    = "<% %section_ranks ? $section_ranks{$entry->id} : ""  %>"
							>
								<% %section_ranks ? $section_ranks{$entry->id} : ""  %>
							</span>

						</span>
%					}

				</div>

				<div class="lightrow centeralign padmore marno bordersides borderbottom">

					<p class="leftalign strong smallish marno">Status:</p>

%					if ($round->type eq "elim") { 

%						foreach my $tag (@averages) { 

%							my $tag_label = $tag;
%							$tag_label =~ s/\_/ /g;
%							$tag_label =~ s/\Section/Sct/g;

							<div class = "half padless marno <% $colors{$tag} %>text" >

								<span class="half rightalign">
									<% ucfirst($tag_label) %>:
								</span>

								<span 
									class = "half leftalign strong"
									id    = "average_<% $tag %>_<% $panel->id %>"
								>
								</span>

							</div>

<%perl>
						}

					}

					my $blah;

					foreach my $type (keys %counter) { 

						foreach my $key (keys %{$counter{$type}}) { 

							next unless $counter{$type}{$key} > 1;
							$blah++;

</%perl>

							<span class="fourtenths centeralign nospace">

								<span 
									id      = "<% $key %>_<% $panel->id %>"
									class	= "<% $type %>toggle <% $colors{$type} %>text 
												buttonwhite marbottom padless smallish full"

									onClick = "toggleColor( 
										this.id, 
										<% $panel->id %>,
										'<% $key %>',
										'<% $type %>', 
										'dk<% $colors{$type} %>'
									);"
								>
								<% $counter{$type}{$key} %> 
									from
								<% $type ne "state" ? ucfirst($type): "" %> 
								<% $key %>

							</span>

						</span>

%						}

%					}

%					unless ($blah) { 
		
						<span class="buttonwhite greentext padless">

							<span class="fa fa-check fa-lg greentext">
							</span>

							All OK!

						</span>

%					}

				</div>

			</span>
%		}



