<%args>
	$tourn
	$tourn_settings
	$person
	$round
	$woami   => undef
</%args>
<%init>

	$m->abort unless $round;
	my $event = $round->event;
	$m->abort unless $event->tourn == $tourn->id;

	my @types;
	my $show_strength++ if $round->type eq "elim";

	if ($tourn_settings->{"nsda_nats"}) { 
		push @types, "district";
		push @types, "district_name";
		push @types, "state";

		if ($round->type eq "prelim") { 
			push @types, "auto_qual";
		}

	} else { 
		push @types, "school";
		if ($tourn_settings->{"nsda_district"}) { 
			push @types, "blocs";
		}
	}
	
	if ($show_strength) { 
		push @types, "strength";
		push @types, "seed";
		push @types, "section_rank";
		push @types, "chamber";
	}

	push @types, "PO" if $round->type ne "prelim";

	my %authorship;

	if ($round->type eq "prelim") { 
		if ($tourn_settings->{'district_authorships'} ) { 
			eval { 
				%authorship = %{JSON::decode_json $tourn_settings->{'district_authorships'}};
			};
			push @types, "legislation";
		}
	}

	my %district_region;

	if ($round->type eq "prelim") { 

		if ($tourn_settings->{'district_regions'} ) { 

			my %regions_by_id = map {$_->id => $_} $tourn->regions;

			eval { 
				%district_region = %{JSON::decode_json $tourn_settings->{'district_regions'}};
			};

			foreach my $key (%district_region) { 
				$district_region{$key} = $regions_by_id{$district_region{$key}};
			}

			push @types, "region";
		}
	}

	my @averages = ("strength", "seed", "section_rank") if $show_strength;

	my %colors = (
		district      => "red",
		district_name => "blue",
		school        => "red",
		region        => "bluegreen",
		state         => "green",
		PO            => "blue",
		auto_qual     => "purple",
		seed          => "purple",
		chamber       => "black",
		section_rank  => "grey",
		strength      => "orange",
		legislation   => "orange"
	);

	my %sizes = (
		district      => "third",
		district_name => "full",
		school        => "full",
		region        => "third",
		state         => "third",
		PO            => "third",
		auto_qual     => "third",
		seed          => "third",
		chamber       => "third",
		section_rank  => "third",
		strength      => "third",
		legislation   => "third",
	);

	my %label = (
		auto_qual    => "AQ",
		legislation => "LEG"
	);

	my @all_colors; 

	foreach (keys %colors) {
		push @all_colors, $colors{$_};
	}

	my %event_settings = $event->all_settings;

	my %entry_settings = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		all   => 1,
		value => 1
	);

	my @panels = sort {$a->letter <=> $b->letter} $round->panels;

    my %panel_entries = ();

    my $entries_ref;

	if ($show_strength) { 

		my $previous_round = Tab::Round->search(
			name => ($round->name - 1),
			event => $event->id
		)->first;


		if ($previous_round) { 

			my @results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $previous_round,
			) if $previous_round;

			$entries_ref = pop @results if @results;

		}

	}

	if ($show_strength) { 

		foreach my $seed_entry (keys %{$entries_ref->{'seed'}}) { 
			$entry_settings{$seed_entry}{"seed"} 
				= $entries_ref->{'seed'}{$seed_entry};
		}

		foreach my $section_rank_entry (keys %{$entries_ref->{'section_rank'}}) { 
			$entry_settings{$section_rank_entry}{"section_rank"} 
				= $entries_ref->{'section_rank'}{$section_rank_entry};
		}

		foreach my $section_entry (keys %{$entries_ref->{'section'}}) { 
			$entry_settings{$section_entry}{"chamber"} 
				= $entries_ref->{'section'}{$section_entry};
		}

		foreach my $strength_entry (keys %{$entries_ref->{'tiebreak'}{"1"}}) { 
			$entry_settings{$strength_entry}{"strength"} 
				= $entries_ref->{'tiebreak'}{"1"}{$strength_entry};
		}

	}

	foreach my $panel (@panels) { 

		my @entries = $m->comp(
			"/funclib/panel_entries.mas", 
			panel => $panel
		);

        push (@{$panel_entries{$panel->id}}, @entries);

		foreach my $entry (@entries) { 

			my $school = $entry->school;

			unless ($entry_settings{$entry->id}{"code"}) {

				if ($school->code) { 

					$entry_settings{$entry->id}{"code"} 
						= $school->code;

				} else { 

					$entry_settings{$entry->id}{"code"} 
						= substr($school->short_name, 0, 6);

					if ($tourn_settings->{"nsda_nats"}) { 

						$entry_settings{$entry->id}{"state"} 
							= $school->chapter->state;

						$entry_settings{$entry->id}{"district"} 
							= $school->district->code;

						$entry_settings{$entry->id}{"district_name"} 
							= $school->district->name;

						$entry_settings{$entry->id}{"legislation"} 
							= $authorship{$school->district->id};

						$entry_settings{$entry->id}{"region"} 
							= $district_region{$school->district->id}->code
							if $district_region{$school->district->id};
					}
				}
			}
		}
    }


	my @blocs = $m->comp("/funclib/event_entry_settings.mas", 
		event => $event,
		tag   => "nsda_house_bloc" 
	) if $tourn_settings->{"nsda_district"} 
		&& $event->abbr eq "HOU";

	my %blocs_by_entry = map {$_->entry->id => $_->value} @blocs if @blocs;

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (@panels) { 

%				foreach my $average (@averages) { 
					averageContents('<% $panel->id %>', "<% $average %>");
%				}

%			}

		});

		function averageContents(panelID, targetType) { 

			var total = 0, counter = 0, average = 0, already = {};

			$("#panel_"+panelID).find("."+targetType+"s").each(function(index) { 

				var targetScore = parseInt(this.id);

				var entryID = $(this).attr("entry");

				if (!(entryID in already)) { 
					total = total + targetScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) { 
				average = (total / counter);
			}

			$("#average_"+targetType+"_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) { 
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) { 
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".statetoggle").removeClass('invert');
			$(".districttoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) { 

			$(".entries").not("."+clashType+"_"+clashKey).removeClass(colorToggle);
			$(".schooltoggle").not("#"+keyID).removeClass('invert');
			$(".statetoggle").not("#"+keyID).removeClass('invert');
			$(".districttoggle").not("#"+keyID).removeClass('invert');

			$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
			$("#"+keyID).toggleClass('invert');

			if (clashType === "hits") { 
				$("."+clashType).toggleClass("hidden");
				$("."+clashType).toggleClass(colorToggle);
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").toggleClass("hidden");

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop             : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_confirm.mhtml",{ 
                        entry_id : ui.draggable.attr("id"),
                        panel_id : this.id
                    }).done(function(data) { 

						console.log(data);

						if (data.error) { 
							console.log("THINGS ARE ERROR!");
							alertify.error(data.message);
						} else { 
							console.log("THINGS ARE SUCCESS!: "+data.message);
							alertify.set('notifier','delay', 2);
							alertify.notify(data.message, "custom");
							alertify.set('notifier','delay', 5);
						}
					});

                    // remove the original element from its origin to this
                    // location, and make it visible again while destroying the
                    // clone.  this is necessary because the default jquery
                    // draggable behavior does not play well with scrollable
                    // windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");

%					foreach my $average (@averages) { 
						averageContents(panelID, "<% $average %>");
%					}

					$("#"+this.id).removeClass("strength_"+panelID);

                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$( ".draggable" ).draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) { 

					$("."+this.id).hide();

%					foreach my $type (@types) { 
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).removeClass("dk<% $colors{$type} %>");
%					}

				},

				start: function(event, ui) { 
			
%					foreach my $color (@all_colors) { 
						$(".entries").removeClass("dk<% $color %>");
%					}

%					foreach my $type (@types) { 
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).addClass("dk<% $colors{$type} %>");
%					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"
			});

		});

	</script>

<%perl>


</%perl>

		<div class="full nospace">

			<span class="twentieth nospace">
				<a
					title = "Print cards with snake information"
					class = "buttonwhite redtext padless fa fa-2x fa-file-pdf-o"
					href  = "snake_congress_cards.mhtml?round_id=<% $round->id %>"
				>
				</a>
			</span>

			<span class="quarter nospace">
				<h4><% $round->realname %> 
					<% $round->type eq "prelim" ? "Prelim Chambers" : "Elim Snake" %> </h4>
			</span>

			<span class="fiveeighths rightalign">

				<span class="strong">
					Show:
				</span>

%				foreach my $type (@types) { 

<%perl>

					my $label_type = $type;
					$label_type =~ s/\_/ /g;
					$label_type =~ s/section/C/g;
					$label_type =~ s/ rank/ Rank/g;
					$label_type =~ s/strength/Rank/g;

					my $label_desc;
					
					$label_desc = "Rank within prelim chamber" if $type eq "section_rank";
					$label_desc = "Overall prelim seed" if $type eq "seed";
					$label_desc = "Prelim chamber assignment" if $type eq "chamber";
					$label_desc = "Total of ranks from prelims" if $type eq "strength";
					$label_desc = "Was a presiding officer" if $type eq "PO";

</%perl>

					<span 
						id      = "<% $type %>s"
						title   = "<% $label_desc %>"
						class   = "buttonwhite <% $colors{$type} %>text padless"
						onClick = "toggleShow(this.id)";
					>
						<% ucfirst($label_type) %>
					</span>
%				}

			</span>

		</div>

<%perl>



		my $count;

		foreach my $panel (@panels) { 

			my %counter = ();

</%perl>

			<span 
				class = "marless top congress_snake"
				id    = "panel_<% $panel->id %>"
			>

				<div class="yellowrow padmore smallish centeralign strong marno bordersides bordertop">
					Chamber <% $panel->letter %> 
				</div>


				<div 
					id    = "<% $panel->id %>"
					panel   = "<% $panel->id %>"
					class = "full row nospace bordersides droppable centeralign"
				>

<%perl>
					foreach my $entry (@{$panel_entries{$panel->id}}) { 

						$counter{"school"}{$entry->school->id}++;

						$counter{"auto_qual"}{""}++ if
								$entry_settings{$entry->id}{"auto_qual"};

						$counter{"PO"}{""}++ if
								$entry_settings{$entry->id}{"presiding_officer"};

   						if ($tourn_settings->{"nsda_nats"}) { 

							$counter{"district"}{$entry_settings{$entry->id}{"district"}}++;

							$counter{"state"}{$entry_settings{$entry->id}{"state"}}++;

							$counter{"region"}{$entry_settings{$entry->id}{"region"}}++
								if $entry_settings{$entry->id}{"region"}
						}

</%perl>
						<span 
							class="
								biggish
								centeralign
								martop
								padtop
								padbottom
								marbottom
								draggable
								school_<% $entry->school->id %> 
%								if ($tourn_settings->{"nsda_nats"}) { 
									district_<% $entry_settings{$entry->id}{"district"} %> 
									state_<% $entry_settings{$entry->id}{"state"} %> 
%								}
							"
							id       = "<% $entry->id %>"
							school   = "<% $entry->school->id %>"
%							if ($tourn_settings->{"nsda_nats"}) { 
								district = "<% $entry_settings{$entry->id}{"district"} %>"
								state    = "<% $entry_settings{$entry->id}{"state"} %>"
%							}
						>

							<span class="marno padless full borderbottom codes" >
								<% $entry->code %>	
							</span>

%							foreach my $tag (@types) {

								<span class="<% $tag %>s <% $colors{$tag} %>text <% $sizes{$tag} %> 
									strong hidden">
									<% $entry_settings{$entry->id}{$tag} == 1 
										? $label{$tag}
										: $entry_settings{$entry->id}{$tag}
									%>
								</span>

%							} 

						</span>
%					}

				</div>

				<div class="row centeralign padmore marno bordersides borderbottom">

					<p class="leftalign strong smallish marno">Status:</p>

%					if ($round->type eq "elim") { 

%						foreach my $tag (@averages) { 

%							my $tag_label = $tag;
%							$tag_label =~ s/\_/ /g;
%							$tag_label =~ s/\Section/Sct/g;

							<div class = "half padless marno <% $colors{$tag} %>text" >

								<span class="half rightalign">
									<% ucfirst($tag_label) %>:
								</span>

								<span 
									class = "half leftalign strong"
									id    = "average_<% $tag %>_<% $panel->id %>"
								>
								</span>

							</div>

<%perl>
						}

					}

					my $blah;

					foreach my $type (keys %counter) { 

						foreach my $key (keys %{$counter{$type}}) { 

							next unless $counter{$type}{$key} > 1;
							$blah++;

</%perl>

							<span class="half centeralign nospace">

								<span 
									id      = "<% $key %>_<% $panel->id %>"
									class	= "<% $type %>toggle <% $colors{$type} %>text 
												buttonwhite marbottom padless smallish full"

									onClick = "toggleColor( 
										this.id, 
										<% $panel->id %>,
										'<% $key %>',
										'<% $type %>', 
										'dk<% $colors{$type} %>'
									);"
								>
								<% $counter{$type}{$key} %> 
									from
								<% $type ne "state" ? ucfirst($type): "" %> 
								<% $key %>

							</span>

						</span>

%						}

%					}

%					unless ($blah) { 
		
						<span class="buttonwhite greentext padless">

							<span class="fa fa-check fa-lg greentext">
							</span>

							All OK!

						</span>

%					}

				</div>

			</span>
%		}



