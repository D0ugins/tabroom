<%args>
	$tourn
	$tourn_settings
	$person
	$round
	$woami   => undef
</%args>
<%init>

	$m->abort unless $round;
	my $event = $round->event;
	$m->abort unless $event->tourn == $tourn->id;

	my @types;
	my $show_strength++ if $round->type eq "elim";

	if ($tourn_settings->{"nsda_nats"}) {
		push @types, "district_code";
		push @types, "district_name";
		push @types, "state";

		if ($round->type eq "prelim") {
			push @types, "autoqual";
		}

	} else {

		push @types, "school_name";
		push @types, "school_code";
		if ($tourn_settings->{"nsda_district"}) {
			push @types, "blocs";
		}
	}


	if ($show_strength) {
		push @types, "strength";
		push @types, "seed";
		push @types, "section_rank";
		push @types, "chamber";
	}

	push @types, "PO" if $round->type ne "prelim";

	push @types, "last_name";

	my %authorship;

	if ($round->type eq "prelim") {
		if ($tourn_settings->{'district_authorships'} ) {
			eval {
				%authorship = %{JSON::decode_json $tourn_settings->{'district_authorships'}};
			};
			push @types, "legislation";
		}
	}

	my %district_region;

	if ($tourn_settings->{'district_regions'} ) {

		my %regions_by_id = map {$_->id => $_} $tourn->regions;

		eval {
			%district_region = %{JSON::decode_json $tourn_settings->{'district_regions'}};
		};

		foreach my $key (%district_region) {
			$district_region{$key} = $regions_by_id{$district_region{$key}};
		}

		push @types, "region";
	} elsif ($tourn_settings->{'regions'} ) {
		push @types, "region";
	}

	my @averages = ("strength", "seed", "section_rank") if $show_strength;

	my %colors = (
		district_code => "red",
		district_name => "blue",
		school_name   => "blue",
		school_code   => "red",
		region        => "bluegreen",
		state         => "green",
		PO            => "blue",
		autoqual     => "purple",
		seed          => "purple",
		chamber       => "black",
		section_rank  => "grey",
		strength      => "orange",
		legislation   => "orange",
		last_name     => 'black'
	);

	my %sizes = (
		district_code => "third",
		district_name => "full",
		school_code   => "third",
		school_name   => "full",
		school        => "full",
		region        => "third",
		state         => "third",
		PO            => "third",
		autoqual     => "third",
		seed          => "third",
		chamber       => "third",
		section_rank  => "third",
		strength      => "third",
		legislation   => "third",
	);

	my %label = (
		autoqual    => "AQ",
		legislation  => "LEG",
		PO           => "PO",
		section_rank => "1",
		seed         => "1",
		strength     => "1"
	);

	my @all_colors;

	foreach (keys %colors) {
		push @all_colors, $colors{$_};
	}

	my %event_settings = $event->all_settings;

	my %entry_settings = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		all   => 1,
		value => 1
	);

	my @panels = sort {$a->letter <=> $b->letter} $round->panels;

    my %panel_entries = ();

    my $entries_ref;

	if ($show_strength) {

		my $previous_round = Tab::Round->search(
			name => ($round->name - 1),
			event => $event->id
		)->first;

		if ($previous_round) {

			my @results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $previous_round,
			) if $previous_round;

			$entries_ref = pop @results if @results;

		}

	}

	if ($show_strength) {


		foreach my $seed_entry (keys %{$entries_ref->{'seed'}}) {
			$entry_settings{$seed_entry}{"seed"}
				= $entries_ref->{'seed'}{$seed_entry};
		}

		foreach my $section_rank_entry (keys %{$entries_ref->{'seed'}}) {
			$entry_settings{$section_rank_entry}{"section_rank"}
				= $entries_ref->{'section_rank'}{$section_rank_entry};
		}

		foreach my $section_entry (keys %{$entries_ref->{'section'}}) {
			$entry_settings{$section_entry}{"chamber"}
				= $entries_ref->{'section'}{$section_entry};
		}

		foreach my $strength_entry (keys %{$entries_ref->{'tiebreak'}{"1"}}) {
			$entry_settings{$strength_entry}{"strength"}
				= $entries_ref->{'tiebreak'}{"1"}{$strength_entry};
		}

	}

	foreach my $panel (@panels) {

		my @entries = $m->comp(
			"/funclib/panel_entries.mas",
			panel => $panel
		);

        push (@{$panel_entries{$panel->id}}, @entries);

		foreach my $entry (@entries) {

			delete $entry_settings{$entry->id}{"po"};
			$entry_settings{$entry->id}{"school"} = $entry->school->id;

			$entry_settings{$entry->id}{"school_code"} = $entry->schoolcode;
			$entry_settings{$entry->id}{"school_code"} =
				substr(Tab::short_name($entry->schoolname), 0, 6)
				unless $entry->schoolcode;

			$entry_settings{$entry->id}{"school_name"}   = $entry->schoolname;
			$entry_settings{$entry->id}{"region_code"}   = $entry->regioncode;
			$entry_settings{$entry->id}{"region"}        = $entry->regioncode;
			$entry_settings{$entry->id}{"region_name"}   = $entry->regionname;
			$entry_settings{$entry->id}{"district_code"} = $entry->districtcode;
			$entry_settings{$entry->id}{"district_name"} = $entry->districtname;
			$entry_settings{$entry->id}{"last_name"}     = $entry->lastname;
			$entry_settings{$entry->id}{"legislation"}   = $authorship{$entry->districtid};

			if ($tourn_settings->{"nsda_nats"}) {
				$entry_settings{$entry->id}{"state"} = $entry->regioncode;
			} else {
				$entry_settings{$entry->id}{"state"} = $entry->state;
			}

			$entry_settings{$entry->id}{"region"}
				= $district_region{$entry->districtid}->code
				if $district_region{$entry->districtid};
		}
    }

	if ($round->type eq "elim" || $round->type eq "final") { 

		my @this_ties = $m->comp("/funclib/congress_ties.mas", round => $round);
		@this_ties = sort {$a->name <=> $b->name} @this_ties;

		my $earliest = $this_ties[0]->name;
		my $last = $earliest - 1;
		my $previous = $event->rounds( name => $last)->first;
		my $round_ids;

		foreach my $tie ($m->comp("/funclib/congress_ties.mas", round => $previous)) { 
			$round_ids .= ',' if $round_ids;
			$round_ids .= $tie->id;
		}

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select
				entry.id
				from entry, ballot, score, panel
			where panel.round in ($round_ids)
				and panel.id = ballot.panel
				and ballot.entry = entry.id
				and ballot.id = score.ballot
				and score.tag = 'po'
		");

		$sth->execute();

		while (
			my $eid = $sth->fetchrow_array()
		) {
			$entry_settings{$eid}{"po"} = 1;
		}
	}

	my @blocs = $m->comp("/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "nsda_house_bloc"
	) if $tourn_settings->{"nsda_district"}
		&& $event->abbr eq "HSE";

	my %blocs_by_entry = map {$_->entry->id => $_->value} @blocs if @blocs;

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (@panels) {
%				foreach my $average (@averages) {
					averageContents('<% $panel->id %>', "<% $average %>");
%				}
%			}

		});

		function averageContents(panelID, targetType) {

			var total = 0, counter = 0, average = 0, already = {};

			console.log("averaging the score for target "+targetType+"s in panel "+panelID);

			$("#"+panelID).find("."+targetType+"s").each(function(index) {

				var targetScore = parseInt($(this).text());

				var entryID = $(this).attr("entry");


				if (!(entryID in already)) {
					total = total + targetScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) {
				average = (total / counter);
			}

			$("#average_"+targetType+"_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) {
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) {
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".statetoggle").removeClass('invert');
			$(".districttoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) {

			$(".entries").not("."+clashType+"_"+clashKey).removeClass(colorToggle);
			$(".schooltoggle").not("#"+keyID).removeClass('invert');
			$(".statetoggle").not("#"+keyID).removeClass('invert');
			$(".districttoggle").not("#"+keyID).removeClass('invert');

			$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
			$(".text_"+clashType+"_"+clashKey).toggleClass("hidden");

			$("#"+keyID).toggleClass('invert');

			if (clashType === "hits" || clashType == "PO") {
				$("."+clashType).toggleClass(colorToggle);
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").toggleClass("hidden");

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop             : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_confirm.mhtml",{
                        entry_id : ui.draggable.attr("id"),
                        panel_id : this.id
                    }).done(function(data) {

						console.log(data);
						console.log(data.message);
						console.log(data.error);

						if (data.error) {
							alertify.error(data.message);
						} else {
							console.log("THINGS ARE SUCCESS!: "+data.message);
							alertify.set('notifier','delay', 2);
							alertify.notify(data.message, "custom");
							alertify.set('notifier','delay', 5);
						}
					});

					// remove the original element from its origin to this
					// location, and make it visible again while destroying the
					// clone.  this is necessary because the default jquery
					// draggable behavior does not play well with scrollable
					// windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");

%					foreach my $average (@averages) {
						averageContents(panelID, "<% $average %>");
%					}

					$("#"+this.id).removeClass("strength_"+panelID);

                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$(".draggable").draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) {

					$("."+this.id).hide();

%					foreach my $type (@types) {
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).removeClass("dk<% $colors{$type} %>");
%					}

				},

				start: function(event, ui) {

%					foreach my $color (@all_colors) {
						$(".entries").removeClass("dk<% $color %>");
%					}

%					foreach my $type (@types) {
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).addClass("dk<% $colors{$type} %>");
%					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"
			});

		});

	</script>

		<div class="full nospace">

			<span class="twentieth nospace">
				<a
					title = "Print cards with snake information"
					class = "buttonwhite redtext padless fa fa-2x fa-file-pdf-o"
					href  = "snake_congress_cards.mhtml?round_id=<% $round->id %>"
				>
				</a>
			</span>

			<span class="quarter nospace">
				<h5><% $round->realname %>
					<% $round->type eq "prelim" ? "Prelims" : "Snake" %> </h5>
			</span>

			<span class="fiveeighths rightalign">

				<span class="semibold">
					Show:
				</span>
<%perl>
				foreach my $type (@types) {

					my $label_type = $type;
					$label_type =~ s/\_/ /g;
					$label_type =~ s/section/C/g;
					$label_type =~ s/district/D/g;
					$label_type =~ s/ rank/ Rank/g;
					$label_type =~ s/strength/Rank/g;

					my $label_desc;

					$label_desc = "Rank within prelim chamber" if $type eq "section_rank";
					$label_desc = "Overall prelim seed" if $type eq "seed";
					$label_desc = "Prelim chamber assignment" if $type eq "chamber";
					$label_desc = "Total of ranks from prelims" if $type eq "strength";
					$label_desc = "Was a presiding officer" if $type eq "PO";
</%perl>
					<span
						id      = "<% $type %>s"
						title   = "<% $label_desc %>"
						class   = "buttonwhite <% $colors{$type} %>text padless"
						onClick = "toggleShow(this.id)";
					>
						<% ucfirst($label_type) %>
					</span>
%				}

			</span>

		</div>

<%perl>

		my $count;

		foreach my $panel (@panels) {

			my %counter = ();

</%perl>

			<span
				class = "marless top congress_snake"
				id    = "panel_<% $panel->id %>"
			>

				<div class="yellowrow padmore smallish centeralign semibold marno bordersides bordertop">
					Chamber <% $panel->letter %>
				</div>

				<div
					id    = "<% $panel->id %>"
					panel   = "<% $panel->id %>"
					class = "full row nospace bordersides droppable centeralign"
				>

<%perl>
					foreach my $entry (@{$panel_entries{$panel->id}}) {

						my $entry_id = $entry->id;

						$counter{"autoqual"}{""}++ if
								$entry_settings{$entry_id}{"autoqual"};

						$counter{"PO"}{""}++ if
								$entry_settings{$entry_id}{"po"};

						$counter{"legislation"}{""}++ if
								$entry_settings{$entry_id}{"legislation"};

						$counter{"region"}{$entry_settings{$entry_id}{"region"}}++
							if $entry_settings{$entry_id}{"region"};

   						if ($tourn_settings->{"nsda_nats"}) {

							$counter{"district"}{$entry_settings{$entry_id}{"district_code"}}++;

							$counter{"state"}{$entry_settings{$entry_id}{"state"}}++;

							$counter{"last_name"}{$entry_settings{$entry_id}{"last_name"}}++;

						} else {

							$counter{"school"}{$entry->school->id}++;
						}

</%perl>
						<span
							class="
								biggish martop padtop padbottom marbottom draggable leftalign wider
								school_<% $entry_settings{$entry_id}{"school"} %>
								<% $entry_settings{$entry_id}{"po"} ? "PO" : "" %>
%								if ($tourn_settings->{"nsda_nats"}) {
									district_<% $entry_settings{$entry_id}{"district_code"} %>
									state_<% $entry_settings{$entry_id}{"state"} %>
%								}
								region_<% $entry_settings{$entry_id}{"region"} %>
							"
							id     = "<% $entry_id %>"
							school = "<% $entry->school->id %>"
							entry  = "<% $entry_id %>"

%							if ($tourn_settings->{"nsda_nats"}) {
								district = "<% $entry_settings{$entry_id}{"district"} %>"
								state    = "<% $entry_settings{$entry_id}{"state"} %>"
%							}
						>

							<span class="marno padless full borderbottom codes" >
								<% $entry->code %>
							</span>

%							foreach my $tag (@types) {

%								my $short_tag = $tag;
%								$short_tag =~ s/\_code//g;
%								$short_tag =~ s/\_name//g;

								<span
									class="leftalign <% $tag %>s <% $colors{$tag} %>text <% $sizes{$tag} %> semibold hidden
									<% $short_tag ne $tag
										? "text_".$short_tag."_".$entry_settings{$entry_id}{$tag}
										: ""
									%>"
									entry   = "<% $entry_id %>"
								>
									<% $entry_settings{$entry_id}{$tag} == 1 && $tag ne "chamber"
										? $label{$tag}
										: $entry_settings{$entry_id}{$tag}
									%>
								</span>
%							}

						</span>
%					}

				</div>

				<div class="row centeralign padmore marno bordersides borderbottom">

					<p class="leftalign semibold smallish marno">Status:</p>

%					if ($round->type eq "elim") {

%						foreach my $tag (@averages) {

%							my $tag_label = $tag;
%							$tag_label =~ s/\_/ /g;
%							$tag_label =~ s/\Section/Sct/g;

							<div class = "half padless marno <% $colors{$tag} %>text" >

								<span class="half rightalign">
									<% ucfirst($tag_label) %>:
								</span>

								<span
									class = "half leftalign semibold"
									id    = "average_<% $tag %>_<% $panel->id %>"
								>
								</span>
							</div>
<%perl>
						}
					}

					my $blah;

					foreach my $type (keys %counter) {

						foreach my $key (keys %{$counter{$type}}) {

							next unless $counter{$type}{$key} > 1;
							$blah++;

							my $color = $colors{$type};
							$color = $colors{"district_code"} if $type eq "district";
							$color = $colors{"school_code"} if $type eq "school";

</%perl>
							<span class="half centeralign nospace">
								<span
									id      = "<% $key %>_<% $panel->id %>"
									class	= "<% $type %>toggle <% $color %>text buttonwhite marbottom padless smallish full"
									onClick = "toggleColor(
										this.id,
										<% $panel->id %>,
										'<% $key %>',
										'<% $type %>',
										'<% $color %>'
									);"
								>
%								if ($type eq "legislation") {
									<% $counter{$type}{$key} %> authorships
%								} else {
									<% $counter{$type}{$key} %>
										<% $key eq "PO" ? "" : "from" %>
									<% $type ne "state" ? ucfirst($type): "" %> <% $key %><% $key eq "PO" ? "s" : "" %>
%								}
							</span>
						</span>

%						}
%					}

%					unless ($blah) {
						<span class="buttonwhite greentext padless">
							<span class="fa fa-check fa-lg greentext">
							</span>
							All OK!
						</span>

%					}

				</div>
			</span>
%		}



