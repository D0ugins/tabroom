<%args>
	$person
	$tourn
	$tourn_settings => undef
	$target_id      => undef
	$setting_name   => undef
	$property_name  => undef
	$other_value    => 0
	$property_value => 0
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	my $now = DateTime->now();

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No round ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $round = Tab::Round->retrieve($target_id);

	unless ($round) {
		$m->print('{ "error": true, "message": "No round found for ID '.$target_id.'"}');
		$m->abort();
	}

	my $message;

	if ($setting_name) {

		$round->setting($setting_name, $other_value);
		$message = "Setting $setting_name changed to $other_value";

	} elsif ($property_name eq "published") {

		if ($other_value == 5) {

			$round->setting("publish_prelim_chamber", 1);
			$message = "Prelim chamber assignment listed for students";
			$round->published(0);

		} elsif ($other_value == 4) {

			$round->setting("publish_entry_list_no_byes", 1);
			$message = "List of clearing entries has been published without showing byes";
			$round->published(0);

		} elsif ($other_value == 3) {

			$round->setting("publish_entry_list", 1);
			$message = "List of clearing entries has been published";
			$round->published(0);

		} else {

			$property_name = 0 unless $property_name;
			$round->setting("publish_entry_list", 0);

			if ($other_value > 0) {
				$message = "Schematic has been published";
			} else {
				$message = "Schematic has been unpublished";
			}

			if ($other_value == 2) {
				$message .= " without judges";
			}
			$round->published($other_value);
		}

		$round->update();

		if ($other_value > 0) {
			$m->comp('/funclib/cache_invalidate.mas', round => $round);
			$m->comp("/funclib/autopublish_round.mas", event => $round->event);
		}

		if ($other_value == 1) {

			my ($error, $garbage) = $m->comp('/funclib/online_usage.mas',
				tourn          => $tourn,
				tourn_settings => $tourn_settings,
				round          => $round,
				return         => 1
			);

			unless ($error eq "1" || not defined $error) {

				my %response = (
					error   => 1,
					message => $error
				);

				$round->published(0);
				$round->update();

				$m->print(JSON::encode_json(\%response));
				$m->abort();
			}

			if ($now < $tourn->start) {

				my $start = $tourn->start;
				$start->set_time_zone($tourn->tz);
				$now->set_time_zone($tourn->tz);

				$error = "Your tournament is set to start under Settings -> Tournament -> the Dates tab in the future! <br /><br />";
				$error .= " Competitors and judges will not be able to see online ballots or rooms until ".Tab::nicedt($tourn->start)." <br /><br />";
				$error .= " Adjust your tournament start time if this is in error!";

			}

			$m->comp('/funclib/publish_flips.mas', round => $round);

			$m->comp("/funclib/auto_backups.mas",
				subject => "Published",
				person  => $person,
				round   => $round
			);

			if ($error) {
				my %response = (
					error   => 1,
					message => $error
				);

				$m->print(JSON::encode_json(\%response));
				$m->abort();
			}
		}

	} elsif ($property_name eq "start_time") {

		my $timeslot = $round->timeslot;
		my $start_date = $timeslot->start;
		my $tz = $tourn->tz;

		my $start_dt = eval {
			return Tab::dtme( $start_date->mdy('/'), $other_value, $tz);
		};

		my $datestring;

		if ($start_dt) {
			$round->start_time($start_dt);
			$datestring = $m->comp("/funclib/showtime.mas", dt => $start_dt, return => 1);
		} elsif ($start_date) {
			$round->start_time($start_date);
			$datestring = $m->comp("/funclib/showtime.mas", dt => $start_date, return => 1);
		}

		$round->update();

		$message = "Round start changed to ".$datestring;

	} elsif ($property_name eq "post_results") {

		if (not defined $other_value) {
			$other_value = 0;
		}

		if ($other_value > 2) {
			$message .= "RFDs and results published";
			$round->setting("public_feedback", 1);
			$round->post_results(1);
		} else {
			$message .= "Results published";
			$round->setting("public_feedback", 0);
			$round->post_results($other_value);
		}

		$round->update();

	} elsif ($property_name) {

		$round->$property_name($other_value);
		$round->update();
		$message = "Property $property_name changed to $other_value";

	}

    my %response = (
		error   => 0,
		message => $message
    );

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
