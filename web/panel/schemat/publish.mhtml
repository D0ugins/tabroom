<%args>
	$person
	$round_id  => undef
	$type      => undef
	$published => 1
	$clearing  => undef
	$listed    => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	my $msg;
	my $round = Tab::Round->retrieve($round_id) if $round_id;

	unless ($round) {
		my $msg = "No round found for id $round_id.  Refresh and try again";
		$m->print('{ "error":true,"message":"'.$msg.'" }');
		$m->abort();
	}

	if ($type eq "clearing") {

		undef $clearing if $clearing eq "false";
		$round->setting("publish_entry_list", 1) if $clearing;
		$round->setting("publish_entry_list", 0) unless $clearing;
		$msg = "List of clearing entries has been removed from the public website";
		$msg = "Clearing entries have been listed in alphabetical order on the public website" if $clearing;
		$round->update();

	} else {

		$round->published($published);
		$msg = "Round has been removed from the public website";
		$msg = "Round has been published on the public website" if $published;
		$msg .= " without judges" if $published == 2;
		$msg .= " with motion" if $published == 3;
		$round->update();

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select round.flighted, event.id,
				flip_online.value,
				flip_autopublish.value,
				flip_split_flights.value,
				flight_offset.value,
				flip_online.value
			from round, event
				left join event_setting flip_online
					on flip_online.event = event.id
					and flip_online.tag = 'flip_online'

				left join event_setting flip_autopublish
					on flip_autopublish.event = event.id
					and flip_autopublish.tag = 'flip_autopublish'

				left join event_setting flight_offset
					on flight_offset.event = event.id
					and flight_offset.tag = 'flight_offset'

				left join event_setting flip_split_flight
					on flip_split_flight.event = event.id
					and flip_split_flight.tag = 'flip_split_flight'

				left join round_setting flip_online
					on flip_online.round = round.id
					and flip_online.tag = 'flip_online'

			where round.id = ?
				and round.event = event.id
		");

		$sth->execute($round->id);

		my @refs = $sth->fetchrow_array();
		my $ref = shift @refs;

		my ($flighted, $event_id, $online, $autopublish, $split, $offset, $online) = @{$ref};

		$sth->finish();
		$dbh->disconnect();

		if ($online && $autopublish) {

			my $now = DateTime->now();
			my $then = $now->clone();
			$then->add(minutes => $autopublish);

			my $aq = Tab::Autoqueue->create({
				tag        => "flip",
				round      => $round->id
				active_at  => $then,
				created_at => $now
			});

			if ($flighted > 1 && $offset && $split) {

				$then->add(minutes => $offset);

				my $aq = Tab::Autoqueue->create({
					tag        => "flip_2",
					round      => $round->id
					active_at  => $then,
					created_at => $now
				});
			}
		}
	}

	if ($published || $clearing) {
		$m->comp(
			"/funclib/auto_backups.mas",
			subject => "Published",
			person  => $person,
			round   => $round
		);

		$m->comp("/funclib/autopublish_round.mas", event => $round->event);
	}

	$m->print('{ "error":false, "message":"'.$msg.'" }');
	$m->abort();

</%init>
