<%args>
	$tourn
	$tourn_settings
	$round_id
</%args>
<%init>

    my $round = Tab::Round->retrieve($round_id);
    my $timeslot = $round->timeslot;
    my $event = $round->event;

	my %event_settings = $event->all_settings();

	my $aff_string = $event_settings{"aff_string"};
	$aff_string = "Aff" unless $aff_string;

	my $neg_string = $event_settings{"neg_string"};
	$neg_string = "Neg" unless $neg_string;

    my %tags;
    my %problems;
    my $dbh = Tab::DBI->db_Main();

	my $event_type;

	$event_type = "speech" if $event->type eq "speech";
	$event_type = "congress" if $event->type eq "congress";
	$event_type = "debate" unless $event_type;

    #DOUBLE-BOOKED JUDGES

    $tags{"double_booked_judges"} = "Judges double booked within round";

    my $double_judges_sth = $dbh->prepare("

        select distinct judge.*

		from judge, panel, panel clonepanel, ballot, ballot cloneballot

        where panel.round = ?
        and clonepanel.round = panel.round
        and panel.flight = clonepanel.flight
        and panel.id != clonepanel.id
        and panel.id = ballot.panel
        and ballot.judge = judge.id
        and clonepanel.id = cloneballot.panel
        and cloneballot.judge = judge.id
    ");

    $double_judges_sth->execute($round->id);

    while (
		my ($judge, $panel, $clonepanel, $ballot, $cloneballot)
		= $double_judges_sth->fetchrow_array()
	) {
        my $judge_info = Tab::Judge->retrieve($judge);
        $problems{"double_booked_judges"} .= '<p class="warning padless marno">'
			. $judge_info->first." ".$judge_info->last." is double-booked!</p>";
    }

    #TIMESLOT (CROSS-EVENT) DOUBLE-SCHEDULING

	$tags{"timeslot_double_booked_judges"} = "Double booked judges this timeslot";

    my $timeslot_double_judges_sth = $dbh->prepare("
        select distinct judge.id, judge.first, judge.last,
			round.id, round.flighted, count(distinct round.id) as round_count

		from judge, round, panel, ballot, timeslot
        	where round.timeslot = timeslot.id
        	and round.id = panel.round
        	and panel.id = ballot.panel
        	and ballot.judge= judge.id

			and timeslot.start > ?
			and timeslot.end < ?
			and round.id != ?
		group by judge
		order by judge.id, round.id asc
    ");

    $timeslot_double_judges_sth->execute(
		DateTime::Format::MySQL->format_datetime($timeslot->end),
		DateTime::Format::MySQL->format_datetime($timeslot->start),
		$round->id
	);

    while (
		my ($judge_id, $first, $last, $roundid, $flights, $round_count)
		= $timeslot_double_judges_sth->fetchrow_array()
	) {

		next if $round_count <= $flights;

		$problems{"timeslot_double_booked_judges"}
			.= '<p class="warning padless marno">'. $first." ".$last
			." is double-booked in another event!</p>";
    }

	if ($event_type eq "debate") {

		# RIGHT NUMBER OF AFF/NEGS

		my $side_locked;
		my $side_lock_against = $round->setting("sidelock_against");

		if ($side_lock_against) {

			if ($side_lock_against ne "NONE" && $side_lock_against ne "RANDOM") {
				$side_locked++;
			}

		} else {
			$side_locked++ unless ($round->name % 2);
			undef $side_locked if $event_settings{"no_side_constraints"};
		}

		undef $side_locked if $event_settings{"round_robin"};

		undef $side_locked if $round->type eq "elim"
			|| $round->type eq "final"
			|| $round->type eq "runoff";

		if ($side_locked) {

			$tags{"sides_uneven"} = "Entries on the wrong side?";

			my $round_number = $round->name;

			while ( (not defined $side_lock_against) && ($round_number > 0)) {
				#Find previous round
				$round_number--;
				my $sla = Tab::Round->search(
					event => $event->id,
					name  => $round_number
				)->first;
				$side_lock_against = $sla->id if $sla;
			}

			if ($side_lock_against) {

				my $sides_sth = $dbh->prepare("
					select entry.code, b1.side, b2.side
					from entry,
						ballot b1, panel p1,
						ballot b2, panel p2

						where b1.entry = entry.id
						and b1.panel = p1.id
						and p1.bye != 1

						and b2.entry = entry.id
						and b2.panel = p2.id
						and p2.bye != 1

						and p1.round = ".$round->id."
						and p2.round = ".$side_lock_against."
				");

				$sides_sth->execute();

				while (my ($entry, $side1, $side2)  = $sides_sth->fetchrow_array() ) {
					$problems{"sides_uneven"} .= '<p class="warning padless marno">'. $entry." should be on the opposite side this round!</p>" if $side1 == $side2;
				}
			}
		}

		$tags{"sides_same"} = "Entries on the same side in the same debate";
		my $round_number = $round->name;

		my $sides_sth = $dbh->prepare("
			select entry.code, e2.code, b1.side, b2.side
			from entry, entry e2,
				panel p1,
				ballot b1, ballot b2

				where b1.entry = entry.id
				and b1.panel = p1.id
				and p1.bye != 1

				and b2.entry = e2.id
				and b2.panel = p1.id

				and b2.side = b1.side
				and e2.id > entry.id

				and p1.round = ?

			group by entry.id
		");

		$sides_sth->execute($round->id);

		while (my ($entry, $e2, $side1, $side2)  = $sides_sth->fetchrow_array() ) {
			if ($side1 == 0 || $side2 == 0) {
				$problems{"sides_same"} .= '<p class="warning padless marno">'. $entry." vs ".$e2." have no marked sides</p>";
			} elsif ($side1 == $side2) {
				$problems{"sides_same"} .= '<p class="warning padless marno">'. $entry." vs ".$e2." both marked aff?</p>" if $side1 == 1;
				$problems{"sides_same"} .= '<p class="warning padless marno">'. $entry." vs ".$e2." both marked neg?</p>" if $side1 == 2;
			}
		}

		if ($event_settings{"round_robin"}) {

			#SIDES WORK OUT IN A ROUND ROBIN
			$tags{"round_robin_side_count"} = "Round Robin: Inequal numbers of ".$aff_string."s/".$neg_string."s";
			$tags{"round_robin_side_order"} = "Round Robin: Too many of the same side in a row";

			my $sth = $dbh->prepare("
				select distinct round.name, ballot.side as side, ballot.bye as bye, panel.bye as pbye
				from round, ballot, panel
				where ballot.entry = ?
				and ballot.panel = panel.id
				and panel.round = round.id
				group by round.name
				order by round.name
			");

			foreach my $entry ($m->comp("/funclib/round_entries.mas", round => $round)) {

				$sth->execute($entry->id);

				my $aff_count;
				my $neg_count;

				my $in_a_row;
				my $current_side;

				while (my ($name, $side, $bye, $pbye) = $sth->fetchrow_array() ) {

					next if $bye;
					next if $pbye;

					if ($side == $current_side) {
						$in_a_row++;
					} else {
						$in_a_row = 1;
						$current_side = $side;
					}

					if ($in_a_row > 2) {
						my $sidename = $aff_string;
						$sidename = $neg_string if $side == 2;
						$problems{"round_robin_side_order"}
							.= '<p class="warning padless marno">'.
							$entry->code." debates on $sidename $in_a_row times in a row</p>";
					}

					$aff_count++ if $side == 1;
					$neg_count++ if $side == 2;

				}

				next if $aff_count == $neg_count;
				next if ($aff_count + 1) == $neg_count;
				next if ($neg_count + 1) == $aff_count;

				$problems{"round_robin_side_count"}
					.= '<p class="warning padless marno">'
					. $entry->code." has a side imbalance.  $aff_count on $aff_string, $neg_count on $neg_string</p>";

			}

		}

	}

    # UNSCHEDULED ENTRIES

    $tags{"unscheduled_entries"} = "Entries left out of the round";

    unless ($round->type eq "elim" || $round->type eq "final" || $round->type eq "runoff") {

		Tab::Entry->set_sql( not_assigned => "
			select entry.*
			from entry
			where entry.event = ?
			and entry.active = 1
			and not exists (
				select ballot.id
				from ballot, panel
				where panel.round = ?
				and ballot.panel = panel.id
				and ballot.entry = entry.id)"
		);

        foreach my $entry (Tab::Entry->search_not_assigned( $event->id, $round->id )) {
			$problems{"unscheduled_entries"}.= '<p class="warning padless marno">
			'. $entry->code. " is not scheduled</p>";
        }
    }

	# ENTRIES SCHEDULED TOO MANY TIMES

	$tags{"double_scheduled_entries"} = "Entries scheduled more than once";

	Tab::Entry->set_sql( assigned_twice => "
		select entry.*
		from entry, ballot b1, panel p1, ballot b2, panel p2

		where entry.id = b1.entry
		and b1.panel = p1.id
		and entry.id = b2.entry
		and b2.panel = p2.id

		and p1.id > p2.id
		and p1.round = ?
		and p1.round = p2.round
		group by entry.id
	");

	foreach my $entry (Tab::Entry->search_assigned_twice($round->id )) {
		$problems{"double_scheduled_entries"}.= '<p class="warning padless marno">'
			. $entry->code. " is scheduled twice in the same round</p>";
	}

    #MEETING OWN SCHOOL

	unless ($event_type eq "speech" || $event_type eq "congress") {

		$tags{"same_school_sections"} = "Entry: same school hits";

		Tab::Entry->set_sql( same_school_sections => "
			select entry.*, opp.code as othername
			from entry, ballot, panel,
			entry opp, ballot oballot

				where entry.id = ballot.entry
				and ballot.panel = oballot.panel
				and oballot.entry = opp.id
				and ballot.panel = panel.id
				and panel.round = ?
				and opp.school = entry.school
				and opp.id < entry.id
		");

		my %done;

		foreach my $entry (Tab::Entry->search_same_school_sections($round->id )) {
			next if $done{$entry->code."-".$entry->othername}++;
			$problems{"same_school_sections"} .= '<p class="warning padless marno">';
			$problems{"same_school_sections"} .= $entry->code." and ".$entry->othername;
			$problems{"same_school_sections"} .= " are from the same school!</p>";
		}
	}

	if ($event_type eq "debate") {
		# TWO BYES

		$tags{"two_entry_byes"} = "Entries with more than one bye";

		my $twobyes_sth = $dbh->prepare("

			select entry.id, entry.code, otherround.id, otherround.name

			from entry, ballot, panel, round,
				ballot otherballot, panel otherpanel, round otherround

			where round.id = ?
				and panel.round = round.id
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and (
					ballot.bye = 1
					or panel.bye = 1
				)

				and otherballot.entry = entry.id
				and otherballot.panel = otherpanel.id
				and otherpanel.round = otherround.id
				and otherround.id != round.id
				and (
					otherballot.bye = 1
					or otherpanel.bye = 1
				)
		");

		$twobyes_sth->execute($round->id);

		while(
			my ($entry, $code, $otherround, $othername) = $twobyes_sth->fetchrow_array()
		) {
			$problems{"two_entry_byes"} .= '<p class="warning padless marno">';
			$problems{"two_entry_byes"} .= $code." also got a bye in round $othername </p>";
		}

	}

	if ($event_settings{"wsdc_multiple_sites"}) {

		# JUDGES MOVING SITES
		$tags{"moving_sites"} = "Judges moving between locations today";

	    my $round_time = $round->timeslot->start;

	    my $today_start_string = $round_time->year."-".$round_time->month."-".$round_time->day." 00:00:00";
	    my $today_end_string = $round_time->year."-".$round_time->month."-".$round_time->day." 23:59:59";

		Tab::Judge->columns(TEMP => qw/siteone sitetwo/);

		Tab::Judge->set_sql( moving_sites => "
			select judge.*, site1.name as siteone, site2.name as sitetwo

			from judge,

				site site1, site site2,
				timeslot time1, timeslot time2,
				round round1, round round2,
				room room1, room room2,
				ballot ballot1, ballot ballot2,
				panel panel1, panel panel2

				where round1.id = ?
				and round1.timeslot = time1.id

				and panel1.round = round1.id
				and ballot1.panel = panel1.id
				and judge.id = ballot1.judge

				and judge.id = ballot2.judge
				and ballot2.panel = panel2.id
				and panel2.round = round2.id
				and round2.timeslot = time2.id

				and time2.end > ?
				and time2.start < ?

                and panel1.room = room1.id
                and panel2.room = room2.id
                and room1.site = site1.id
                and room2.site = site2.id
                and site1.id != site2.id

	            group by judge.id

		");

		foreach my $judge (
			Tab::Judge->search_moving_sites(
				$round->id,
				$today_start_string,
				$today_end_string
			)
		) {
			$problems{"moving_sites"} .= '<p class="warning padless marno">';
			$problems{"moving_sites"} .= $judge->last." moves sites: ";
			$problems{"moving_sites"} .= $judge->siteone." and ".$judge->sitetwo." </p>";

		}
	}

	if ($event_settings{"region_avoid"} || $event_settings{"region_constrain"}) {

		#MEETING OWN REGION

		$tags{"same_region_sections"} = "Entries hits within region";

		Tab::Entry->set_sql( same_region_sections => "
			select entry.*, opp.code as othername
			from entry, ballot, panel, school,
			entry opp, ballot oballot, school oschool

				where entry.id = ballot.entry
				and ballot.panel = oballot.panel
				and oballot.entry = opp.id
				and ballot.panel = panel.id
				and panel.round = ?
				and opp.school = oschool.id
				and entry.school = school.id
				and oschool.region = school.region
				and oschool.region > 0
				and opp.id < entry.id
		");

		foreach my $entry (Tab::Entry->search_same_region_sections($round->id )) {
			$problems{"same_region_sections"}
				.= '<p class="warning padless marno">'
				.  $entry->code." and ".$entry->othername." are from the same region!</p>";
		}
	}


	# DEBATES SHORT ON FULL PANELS OF JUDGING

	my $num_judges = $round->setting('num_judges');
	$num_judges++ if $event_type eq "congress"; #count the parli!

    $tags{"judge_short_sections"} = "Judges panels short of the required ".$num_judges;
    $tags{"judge_short_sections"} = "Judges missing" if $num_judges == 1;

    my $short_panel_sth = $dbh->prepare("
		select panel.letter, count(distinct judge.id), room.name
		from (panel, ballot)
		left join room on room.id = panel.room
		left join judge on ballot.judge = judge.id
		where panel.round = ?
		and panel.id = ballot.panel
		and panel.bye != 1
		group by panel.id
		order by room.name, panel.id
	");

	$short_panel_sth->execute($round->id);

	my %panel_judgecount = ();
	my %panel_judgeroom = ();

	my $has_judges;

	while (
		my ($panel, $count, $room)
		= $short_panel_sth->fetchrow_array()
	) {

		$has_judges += $count;

		next if $count >= $num_judges;

		$panel_judgecount{$panel} = $count;
		$panel_judgecount{$panel} = 0 unless $count;
		$panel_judgeroom{$panel} = $room;

		$problems{"judge_short_sections"}
			.= '<p class="warning padless marno">'
			. "Room ".$panel_judgeroom{$panel}." has ". $panel_judgecount{$panel} ." judges. </p>";

	}

	foreach my $panel ($round->panels) {
		next if $num_judges <= $panel_judgecount{$panel};
	}

	unless ($has_judges > 0) {
		$problems{"judge_short_sections"}
			= '<p class="warning padless marno"> No judges have been assigned to this round </p>';
	}

	undef %panel_judgecount;
	undef $num_judges;

    #ROOMS: ROUNDS WITH NO ROOMS

	$tags{"roomless_sections"} = "Rooms assigned ";

	Tab::Panel->set_sql( roomless_sections => "
		select distinct panel.*, e1.code as opp, e2.code as pos, room.name as roomname
		from (panel, ballot b1, ballot b2, entry e1, entry e2)
		left join room on panel.room = room.id

		where panel.round = ?
		and panel.bye != 1
		and panel.id = b1.panel
		and b1.bye !=1
		and b1.forfeit !=1
		and b1.entry = e1.id

		and panel.id = b2.panel
		and b2.bye !=2
		and b2.forfeit !=2
		and b2.entry = e2.id

		group by panel.id
	");

	my $any_rooms;

	foreach my $panel (Tab::Panel->search_roomless_sections($round->id )) {

		if ($panel->roomname) {

			$any_rooms++;

		} else {

			if ($event_type eq "debate") {

				$problems{"roomless_sections"}
				.= '<p class="warning padless marno">'.
					"Section ".$panel->letter." between "
					.$panel->opp." and ".$panel->pos." has no room! </p>";

			} else {

				$problems{"roomless_sections"}
				.= '<p class="warning padless marno">'.
					"Section ".$panel->letter." has no room! </p>";

			}


			undef $panel;

		}
	}

	unless ($any_rooms) {
		$problems{"roomless_sections"} = '<p class="warning padless marno">
			No rooms have been assigned to this round </p>';
	}

	if ($event_type eq "debate"
		|| (
			($tourn_settings->{'ncfl'} || $tourn_settings->{'nsda_nats'})
			&& $event_type eq "speech"
			&& $round->type eq "prelim"
		)
	) {

		#ENTRIES PREVIOUS MET

		$tags{"hit_before"} = "Entries who competed against each other before";

		my $limit;
		if ($event_type eq "speech") {
			$limit = "and otherround.type = 'prelim'";
		}

		my $second_hit_sth = $dbh->prepare("
			select distinct me.code,
				opp.code othername, otherround.name roundname,
				me_b1.side side1, me_b2.side side2,
				otherround.type

			from entry me, entry opp, round otherround,

				ballot me_b1, ballot opp_b1, panel p1,
				ballot me_b2, ballot opp_b2, panel p2

				where me_b1.entry = me.id
				and opp_b1.entry  = opp.id
				and me_b1.panel   = opp_b1.panel
				and me_b1.panel   = p1.id

				and p1.round = ?

				and me_b2.entry  = me.id
				and opp_b2.entry = opp.id
				and me_b2.panel  = opp_b2.panel
				and me_b2.panel  = p2.id
				and p2.round 	!= p1.round
				and p2.round     = otherround.id
				$limit

				and me.id > opp.id
		");

		$second_hit_sth->execute($round->id);

		while (
			my ($entry, $opp, $round, $side1, $side2, $type)
			= $second_hit_sth->fetchrow_array()
		) {

			if ($event_type eq "speech" || $event_type eq "congress") {

				$problems{"hit_before"}.= '<p class="warning padless marno">'
					. "Entry $entry hit $opp already in round $round ";

			} else {

				$problems{"hit_before"}.= '<p class="warning padless marno">'
					. "Entry $entry debated $opp already in round $round ";
				$problems{"hit_before"}.= "on the SAME SIDE </p>" if $side1 == $side2;
				$problems{"hit_before"}.= "on the OPPOSITE SIDE </p>" if $side1 != $side2;
			}
		}

	}

	if ($event_type eq 'speech' || $event_type eq "congress") {

		# UNBALANCED SECTIONS OR CHAMBERS

		$tags{"unbalanced"} = "Unbalanced section sizes" if $event_type eq "speech";
		$tags{"unbalanced"} = "Unbalanced chamber sizes" if $event_type eq "congress";

		#check to make sure this honors school preclusions
		my $unbalance_sth = $dbh->prepare("
			select panel.id, panel.letter, count(distinct ballot.entry), room.name
			from (panel, ballot)
			left join room on room.id = panel.room
			where panel.round = ?
				and panel.id = ballot.panel
			group by panel.id
		");

		my $min_size;
		my $max_size;
		my %panels_at_size;

		$unbalance_sth->execute($round->id);

		while (
			my ($panel_id, $panel_letter, $ballot_count, $room_name) = $unbalance_sth->fetchrow_array()
		) {

			$panels_at_size{$ballot_count} .= ", " if $panels_at_size{$ballot_count};
			$panels_at_size{$ballot_count} .= $panel_letter;
			$panels_at_size{$ballot_count} .= " in ".$room_name if $room_name;

			$max_size = $ballot_count if ($ballot_count > $max_size);
			$min_size = $ballot_count if (not defined $min_size);
			$min_size = $ballot_count if $ballot_count < $min_size;
		}

		if ( ($max_size - $min_size) > 1) {

			if ($event_type eq "congress") {
				$problems{"unbalanced"}.= '<p class="warning padless marno">'
					." Chambers with $min_size: ".$panels_at_size{$min_size}
					."<br/> Chambers with $max_size: ".$panels_at_size{$max_size}
					." </p>";

			} else {
				$problems{"unbalanced"}.= '<p class="warning padless marno">'
					." Sections with $min_size: ".$panels_at_size{$min_size}
					." Sections with $max_size: ".$panels_at_size{$max_size}
					." </p>";
			}
		}
	}

    #JUDGES: HEARING A BLOCKED TEAM/SCHOOL

    $tags{"judge_preclusion"} = "Judges constraints/preclusions violated";

    #check to make sure this honors school preclusions
    my $strikes_sth = $dbh->prepare("
		select judge.first, judge.last, entry.code, panel.id, panel.letter, strike.type
		from strike, ballot, entry, judge, panel
		where panel.round = ?
		and panel.id =  ballot.panel
		and ballot.entry = entry.id
		and ballot.judge = judge.id
		and strike.entry = entry.id
		and strike.judge = judge.id
	");

    $strikes_sth->execute($round->id);

    while (
		my ($judge_first, $judge_last, $entry, $panel, $panel_letter, $type)
		= $strikes_sth->fetchrow_array()
	) {
		$type = ucfirst($type);
		$problems{"judge_preclusion"}.= '<p class="warning padless marno">'
			." $judge_first $judge_last is judging $entry in section $panel_letter,
				but has a preclusion of type $type </p>";
    }

    $strikes_sth = $dbh->prepare("
		select judge.first, judge.last, entry.code, panel.id, panel.letter, strike.type, school.name
		from strike, ballot, entry, judge, panel, school
		where panel.round = ?
		and panel.id =  ballot.panel
		and ballot.entry = entry.id
		and ballot.judge = judge.id
		and school.id = entry.school
		and strike.school = school.id
		and strike.judge = judge.id
	");

    $strikes_sth->execute($round->id);

    while (
		my ($judge_first, $judge_last, $entry, $panel, $panel_letter, $type, $school)
		= $strikes_sth->fetchrow_array()
	) {
		$type = ucfirst($type);
		$problems{"judge_preclusion"}.= '<p class="warning padless marno">'
			."$judge_first $judge_last is judging $entry from $school in section $panel_letter,
				but has a preclusion of type $type </p>";
    }

    $strikes_sth = $dbh->prepare("
		select judge.first, judge.last, entry.code, panel.id, panel.letter, strike.type, region.code
		from strike, ballot, entry, judge, panel, school, region
		where panel.round = ?
		and panel.id =  ballot.panel
		and ballot.entry = entry.id
		and ballot.judge = judge.id
		and school.id = entry.school
		and strike.region = school.region
		and school.region = region.id
		and strike.judge = judge.id
	");

    $strikes_sth->execute($round->id);

    while (
		my ($judge_first, $judge_last, $entry, $panel, $panel_letter, $type, $region)
		= $strikes_sth->fetchrow_array()
	) {
		$type = ucfirst($type);
		$problems{"judge_preclusion"}.= '<p class="warning padless marno">'
			."$judge_first $judge_last is judging $entry from $region in section $panel_letter,
				but has a preclusion of type $type </p>";
    }

    #JUDGES NOT AVAILABLE THIS ROUND

    $tags{"judge_timestrike"} = "Judges used but not currently available";

    my $time_strikes_sth = $dbh->prepare("
		select distinct judge.id, judge.first, judge.last
		from judge, ballot, panel, round, strike, timeslot
		where round.id = ?
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
		and strike.judge = judge.id
        and timeslot.id = round.timeslot
		and strike.start <= timeslot.end
		and strike.end >= timeslot.start
    ");

    $time_strikes_sth->execute($round->id);

    while (
		my ($id, $first, $last)
		= $time_strikes_sth->fetchrow_array()
	) {
		$problems{"judge_timestrike"}.= '<p class="warning padless marno">
			Judge '. $first." ".$last." is unavailable for this round!</p>";
    }

    # MY OWN HIRES

	if ($event->category->setting("auto_conflict_hires")) {

		$tags{"hired_judging_me"} = "Hires judging the program paying them";

		Tab::JudgeHire->set_sql( "hires_judging_me" => "
			select distinct judge_hire.*
			from judge, ballot, judge_hire, entry, panel
			where panel.round = ?
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and ballot.entry = entry.id
			and entry.school = judge_hire.school
			and judge.id = judge_hire.judge
			group by entry.id
		");

		foreach my $conflict (Tab::JudgeHire->search_hires_judging_me($round_id)) {
			$problems{"hired_judging_me"} = $conflict->judge->first." ".$conflict->judge->last."
				is judging ".$conflict->school->name." who has hired them.";
		}

	}

	# ENTRY: ADA rooms
	$tags{"ada_room"} = "ADA rooms requirements not met";

	Tab::Entry->set_sql("ada" => "
		select distinct me.*, room.name othername
		from entry me,
		ballot, panel, room
		where panel.round = ?
			and ballot.panel = panel.id
			and ballot.entry = me.id
			and panel.room = room.id
			and room.ada != 1
			and me.ada = 1
	");

	foreach my $entry (Tab::Entry->search_ada($round->id)) {
		$problems{"ada_room"} .= '<p class="warning padless marno"> Entry '
			. $entry->code." is in non-ADA room ".$entry->othername." </p>";
	}

	# JUDGE: ADA rooms
	Tab::Judge->columns(TEMP => qw/othername/);
	Tab::Judge->set_sql("ada" => "
		select distinct me.*, room.name othername
		from judge me,
		ballot, panel, room
		where panel.round = ?
			and ballot.panel = panel.id
			and ballot.judge = me.id
			and panel.room = room.id
			and room.ada != 1
			and me.ada = 1
	");

	foreach my $judge (Tab::Judge->search_ada($round->id)) {
		$problems{"ada_room"} .= '<p class="warning padless marno"> Judge '
			.$judge->first." ".$judge->last." is in non-ADA room ".$judge->othername." </p>";
	}

	if ($event_type eq "debate") {

		unless ($event_settings{"hybrids_can_hit"}) {

			# ENTRY: HIT HYBRID PARTNER

			$tags{"hybrid_team_hit"} = "Entries hitting a hybrid preclusion";

			Tab::Entry->set_sql( "hybrid" => "
				select distinct me.*, otherschool.name othername

				from entry me, school otherschool,
				strike hybrid,
				ballot b1, ballot b2, entry opp,
				panel

				where panel.round = ?
					and panel.id = b1.panel
					and b1.panel = b2.panel
					and b1.entry != b2.entry
					and b1.entry = me.id

					and b1.entry = hybrid.entry
					and hybrid.type = 'hybrid'
					and hybrid.school = opp.school
					and opp.id = b2.entry
					and opp.school = otherschool.id
			");

			foreach my $entry (Tab::Entry->search_hybrid($round->id)) {
				$problems{"hybrid_team_hit"} .= '<p class="warning padless marno">'
					. $entry->code." debates against hybrid precluded school ".$entry->othername." </p>";
			}
		}

		# ENTRY: HIT SAME SCHOOL TWICE IN PRESETS

		if ($round->type eq "prelim") {

			$tags{"same_school_twice"} = "Entries debating a program twice in presets";

			Tab::Entry->set_sql( "same_school_twice" => "

				select distinct me.*, otherschool.name othername

				from entry me, school otherschool,
					entry opp1, ballot b1, panel p1, ballot ob1,
					entry opp2, ballot b2, panel p2, ballot ob2, round r2

					where me.id = b1.entry
					and b1.panel = p1.id
					and ob1.panel = p1.id
					and opp1.id = ob1.entry
					and ob1.entry != me.id

					and me.id = b2.entry
					and b2.panel = p2.id
					and ob2.panel = p2.id
					and opp2.id = ob2.entry
					and ob2.entry != me.id

					and p1.round != p2.round
					and p1.round = ?
					and p2.round = r2.id
					and r2.type = 'prelim'

					and opp1.id != opp2.id
					and opp1.school = opp2.school
					and opp1.school = otherschool.id

			");

			foreach my $entry (Tab::Entry->search_same_school_twice($round->id)) {
				$problems{"same_school_twice"} .= '<p class="warning padless marno">'
					. $entry->code." debates against entries from  ".$entry->othername
					." twice in presets. </p>";
			}

		}

		# ENTRY: HIT SAME REGION TWICE IN PRESETS

		if ($round->type eq "prelim"
			&& ($event_settings{"region_avoid"}
			|| $event_settings{"region_constrain"})
		) {

			$tags{"same_region_twice"} = "Entries debating a region twice in presets";

			Tab::Entry->set_sql( same_region_twice => "

				select distinct me.*, otherregion.name othername
				from entry me, region otherregion, school,
					entry opp1, ballot b1, panel p1, ballot ob1, school s1,
					entry opp2, ballot b2, panel p2, ballot ob2, school s2, round r2

					where me.id = b1.entry
					and b1.panel = p1.id
					and ob1.panel = p1.id
					and opp1.id = ob1.entry
					and ob1.entry != me.id

					and me.id = b2.entry
					and b2.panel = p2.id
					and ob2.panel = p2.id
					and opp2.id = ob2.entry
					and ob2.entry != me.id

					and p1.round != p2.round
					and p1.round = ?
					and p2.round = r2.id
					and r2.type = 'prelim'

					and opp1.school = s1.id
					and opp2.school = s2.id

					and s1.region = s2.region
					and s1.region = otherregion.id

					and opp1.school != opp2.school
			");

			foreach my $entry (Tab::Entry->search_same_region_twice($round->id)) {
				$problems{"same_region_twice"} .= '<p class="warning padless marno">'.
					$entry->code." debates against entries from
					".$entry->othername." twice in presets. </p>";
			}

		}

	}

    # JUDGES: HEARD ENTRY BEFORE

    $tags{"judged_before"} = "Judges judging an entry twice";

    my $second_judged_sth = $dbh->prepare("

		select distinct entry.code, judge.first, judge.last, round.name, b1.side, b2.side, round.type,
			b1.chair, b2.chair, round.type

		from entry, judge, ballot b1, ballot b2, panel p1, panel p2, round

			where p1.round = ?
			and p1.id = b1.panel
			and b1.entry = entry.id
			and b1.judge = judge.id

			and p2.round != p1.round
			and p2.id = b2.panel
			and b2.entry = entry.id
			and b2.judge = judge.id
			and round.id = p2.round

	");

	$second_judged_sth->execute($round->id);

	my $allow_elim = $event_settings{"allow_repeat_elims"};

	unless (
		($allow_elim && $round->type eq "elim")
		|| ($allow_elim && $round->type eq "final")
		|| ($allow_elim && $round->type eq "runoff")
	) {

		while (
			my ($entry, $first, $last, $roundname, $side1, $side2, $type,
				$chair1, $chair2, $roundtype2)
			= $second_judged_sth->fetchrow_array()
		) {

			next if $allow_elim && $type eq "elim";
			next if $allow_elim && $type eq "final";
			next if $allow_elim && $type eq "runoff";

			next if $event_type eq "congress"
				&& ($chair1 == $chair2)
				&& ($round->type eq $roundtype2);

			$problems{"judged_before"} .= '<p class="warning padless marno">';
			$problems{"judged_before"} .= "Judge $first $last already judged $entry in round $roundname ";
			unless ($event_type eq "speech" || $event_type eq "congress") {
				$problems{"judged_before"} .= "on the SAME SIDE </p>" if $side1 == $side2;
				$problems{"judged_before"} .= "on the OPPOSITE SIDE </p>" if $side1 != $side2;
			}
		}
	}

    # JUDGES: SAME SCHOOL AND/OR REGION

	unless ($tourn_settings->{"nsda_nats"}) {

		if ($event_settings{"region_avoid"}
			|| $event_settings{"region_constrain"}
			|| $event_settings{"region_judge_forbid"}
			|| $tourn_settings->{"ncfl"}
		) {

			my $region_judged_sth;

			$tags{"judged_region"} = "Judges judging their own ";

			if ($tourn_settings->{"ncfl"}) {

				$tags{"judged_region"} .= " diocese";

			} else {

				$tags{"judged_region"} .= " region";
			}

			$region_judged_sth = $dbh->prepare("
				select distinct entry.code, judge.first, judge.last, region.name
					from entry, judge, panel, ballot,
						school judgeschool, school entryschool, region
					where panel.round = ?
						and ballot.panel = panel.id
						and ballot.entry = entry.id
						and ballot.judge = judge.id
						and judge.school = judgeschool.id
						and entry.school = entryschool.id
						and judgeschool.region = entryschool.region
						and entryschool.region = region.id
			");

			$region_judged_sth->execute($round->id);

			while (my ($entry, $first, $last, $name)  = $region_judged_sth->fetchrow_array() ) {
				$problems{"judged_region"} .= '<p class="warning padless marno">';
				$problems{"judged_region"} .= "Judge $first $last is judging $entry, both are from $name ";
			}
		}
	}

    # SAME STATE  (NSDA NATS)

	if (
		$tourn_settings->{"nsda_nats"}
		&& ($round->name < $event_settings{"state_constraint_threshold"}
			|| (not defined $event_settings{"state_constraint_threshold"})
		)
	) {

		# MEETING SAME STATE

		$tags{"same_region_sections"} = "Entries hits within state code (Split TX/CA)";

		Tab::Entry->set_sql( same_region_sections => "
			select entry.*, opp.code as othername, region.name as regname

			from entry, ballot, panel, school, region,
				entry opp, ballot oballot, school oppschool

			where entry.id = ballot.entry
				and ballot.panel = oballot.panel
				and oballot.entry = opp.id
				and ballot.panel = panel.id
				and panel.round = ?

				and entry.school = school.id
				and school.region = region.id

				and opp.school = oppschool.id
				and oppschool.region = region.id

				and opp.id < entry.id
		");

		foreach my $entry (Tab::Entry->search_same_region_sections($round->id)) {
			$problems{"same_region_sections"}
				.= '<p class="warning padless marno">'. $entry->code."
					and ".$entry->othername." are both from region ".$entry->regname."</p>";
		}

		$tags{"judged_state"} = "Judges judging their own state code (TX/CA split)";

		my $state_judged_sth;

		$state_judged_sth = $dbh->prepare("
			select distinct entry.code, judge.first, judge.last, entryregion.code
				from entry, judge, panel, ballot,
					school entryschool, region entryregion,
					school judgeschool, region judgeregion

				where panel.round = ?
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and ballot.judge = judge.id
				and entry.school = entryschool.id
				and entryschool.region = entryregion.id

				and judge.school = judgeschool.id
				and judgeschool.region = judgeregion.id

				and judgeregion.id = entryregion.id
		");

		$state_judged_sth->execute($round->id);

		while (my ($entry, $first, $last, $state)  = $state_judged_sth->fetchrow_array() ) {

			$problems{"judged_state"} .=
				'<p class="warning padless marno">'. "$first $last judging $entry (Both $state)";
		}




		if ($event_type eq "debate") {

			if ($round->type eq "prelim") {

				# SAME STATE TWICE IN PRESETS

				$tags{"same_state_twice"} = "Entries debating a state twice in prelims";

				Tab::Entry->set_sql( "same_state_twice" => "

					select distinct me.*, c1.state othername

						from entry me,
						entry opp1, ballot b1, panel p1, ballot ob1, school s1, chapter c1,
						entry opp2, ballot b2, panel p2, ballot ob2, school s2, chapter c2,
						round r2

						where me.id = b1.entry
						and b1.panel = p1.id
						and ob1.panel = p1.id
						and opp1.id = ob1.entry
						and ob1.entry != me.id

						and me.id = b2.entry
						and b2.panel = p2.id
						and ob2.panel = p2.id
						and opp2.id = ob2.entry
						and ob2.entry != me.id

						and p1.round != p2.round
						and p1.round = ?
						and p2.round = r2.id
						and r2.type = 'prelim'

						and opp1.id != opp2.id

						and opp1.school = s1.id
						and s1.chapter = c1.id

						and opp2.school = s2.id
						and s2.chapter = c2.id

						and c2.state = c1.state
						and c1.state is not null
						and c1.state != 0

				");

				foreach my $entry (Tab::Entry->search_same_state_twice($round->id)) {
					$problems{"same_state_twice"}
						.= '<p class="warning padless marno">'
						. $entry->code." debates against entries from  ".$entry->othername." twice in prelims. </p>";
				}
			}
		}
	}

	unless ($event_settings{"region_constrain"}) {

		my %dupes;

		my $own_judged_sth;

		$tags{"judged_own"} = "Judges judging their own program";

		$own_judged_sth = $dbh->prepare("
			select distinct entry.code, judge.id, judge.first, judge.last, school.name
				from entry, judge, panel, ballot, school
				where panel.round = ?
				and ballot.panel = panel.id
				and ballot.entry = entry.id
				and ballot.judge = judge.id
				and judge.school = entry.school
				and judge.school = school.id
		");

		$own_judged_sth->execute($round->id);

		while (
			my ($entry, $judge_id, $first, $last, $name) = $own_judged_sth->fetchrow_array()
		) {

			next if $dupes{$judge_id}{$name}++;

			$problems{"judged_own"}.= '<p class="warning padless marno">'
			."Judge $first $last is judging entries from $name ";
		}

	}

    # JUDGES: HEARING BLOCKED DIVISION
    # ROOMS: ROOMS USED TOO MANY TIMES
    # ROOMS: NOT AVAILABLE


	## JUDGES FROM SAME STATE
	if ($tourn_settings->{"nsda_nats"}){
		@tags{"judges_from_same_state"} = "Judges from Same State";

		my $judges_from_same_state_sth = $dbh->prepare("
			SELECT DISTINCT panel.id, j1.first, j1.last, r1.code, j2.first, j2.last, r2.code
			FROM round, panel,
				ballot b1, school s1, chapter c1, judge j1, region r1,
				ballot b2, school s2, chapter c2, judge j2, region r2

			WHERE round.id = ?
			AND panel.round = round.id
			AND b1.panel = panel.id
			AND b1.judge = j1.id
			AND j1.school = s1.id
			AND s1.chapter = c1.id
			AND s1.region = r1.id

			AND b2.panel = panel.id
			AND b2.judge = j2.id
			AND j2.school = s2.id
			AND s2.chapter = c2.id
			AND s2.region = r2.id

			AND j1.id > j2.id
			AND r1.id = r2.id
		");
		$judges_from_same_state_sth->execute($round->id);

		while (
			my ($panel, $j1_first, $j1_last, $j1_state, $j2_first, $j2_last, $j2_state)
			= $judges_from_same_state_sth->fetchrow_array()
		) {
			$problems{"judges_from_same_state"}.='<p class="warning padless marno">
				Judges '. $j1_first .' '. $j1_last .' & '. $j2_first . ' ' . $j2_last .' are both from ' . $j1_state . '</p>';
		}
	}

</%init>

<div class="main">

	<h2><% $round->realname %> disaster checks</h2>

<%perl>

	my @tags = sort {
		length $problems{$b} <=> length $problems{$a}
		|| $tags{$a} cmp $tags{$b}
	} keys %tags;

	foreach my $tag (@tags) {

</%perl>
		<div class="row full marvertno">

			<span class="twofifths semibold bluetext">
				<% $tags{$tag} %>
			</span>

%			if ($tag eq "sides_same" && $problems{$tag}) {
				<span class="threefifths nospace padleft">
					<% $problems{$tag} %>
				</span>
%			} else {
				<span class="threefifths nospace padleft">
					<% $problems{$tag}
						? $problems{$tag}
						: '<span class="centeralign full fa fa-lg nospace fa-check greentext"></span>'
					%>
				</span>
%			}
		</div>

% 	}

</div>

<div class="menu">

	<div class="sidenote">
		<a
			class="full blue"
			href="/panel/schemat/show.mhtml?round_id=<% $round_id %>"
		>
			Return to Pairings
		</a>
	</div>

</div>
