<%args>
	$person
	$tourn
	$tourn_settings
	$round_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

    my $tz = $tourn->tz;
    $tz = "UTC" unless $tz;
    my $now = DateTime->now(time_zone => $tz);

    # Get the upload and create the file handle.
    my $req = Apache2::Request->new($r);
    my @csv_handles = $r->upload;
    my $csv_file = $req->upload($csv_handles[0]);
    my $io = $csv_file->io;

    my @lines = <$io>;
	my @panels;

    foreach (@lines) {
        $_ =~ s/[\r]+/\n/g;
        $_ =~ s/[\r\n]+/\n/g;
        $_ =~ s/[\n]+/\n/g;
        push @panels, split (/\n/, $_);
    }

	my $event = $round->event;
	my $letter = 1;

	my $panel;
	my @judges;

	my $counter; 

    ENTRY:
    foreach my $panel_string (@panels) {

		my ($type, $first, $last) = split(/\,/, $panel_string);

		if ($type eq "Room") { 

			if (@judges && $panel) { 
				foreach my $judge (@judges) { 
					$m->comp("/panel/schemat/judge_add.mhtml", 
						judge          => $judge,
						panel          => $panel,
						return         => "shiiiiiny",
						tourn          => $tourn,
						tourn_settings => $tourn_settings,
						person         => $person
					);
				}
			}

			$counter = 1;

			my $room_name = $first." ".$last if $last;
			$room_name = $first unless $last; 

			next ENTRY unless $room_name;

			my $room = Tab::Room->search( 
				site => $round->site->id,
				name => $room_name
			)->first;

			unless ($room) { 
				$room = Tab::Room->create({
					site     => $round->site->id,
					name     => $room_name,
					inactive => 1
				});
			}


			$panel = $round->panels( room => $room->id )->first if $room;

			$panel = Tab::Panel->create({
				round  => $round->id,
				letter => $letter++,
				flight => 1,
				room   => $room,
				bye    => 0
			}) unless $panel;

		} elsif ($type eq "Judge") { 

			next unless $panel;

			my $judge_first = $first;
			my $judge_last = $last if $last;
			$judge_last = $first unless $last;

			my $judge;

			undef $judge;

			$judge = Tab::Judge->search( 
				judge_group => $event->judge_group->id,
				first       => $judge_first,
				last        => $judge_last
			)->first;

			$judge = Tab::Judge->create({
				judge_group => $event->judge_group->id,
				first       => $judge_first,
				last        => $judge_last,
				active      => 0
			});

			push @judges, $judge;

		} else { 

			next unless $panel;

			my $entry_code = $first;
			my $entry_name = $last;

			my $entry = Tab::Entry->search( 
				event => $event->id,
				code  => $entry_code
			)->first;

			$entry = Tab::Entry->search( 
				event => $event->id,
				name  => $entry_name
			)->first unless $entry;

			if ($entry) { 
				Tab::Ballot->create({
					panel        => $panel->id,
					entry        => $entry,
					judge        => 0,
					speakerorder => $counter++
				});
			}
		}
	}

	if (@judges && $panel) { 
		foreach my $judge (@judges) { 
			$m->comp("/panel/schemat/judge_add.mhtml", 
				judge          => $judge,
				panel          => $panel,
				return         => "shiiiiiny",
				tourn          => $tourn,
				tourn_settings => $tourn_settings,
				person         => $person
			);
		}
	}


	$m->redirect("show.mhtml?round_id=".$round->id."&msg=Round Imported");

</%init>

