<%args>
	$tourn
	$person
	$round
	$event
	$event_settings
	$round_id => undef
	$sort_by  => undef
</%args>
<%init>

	$round = Tab::Round->retrieve($round_id) 
		if $round_id 
		&& (not defined $round);

	$m->abort unless $round;
	$m->abort unless $event->tourn == $tourn->id;

	my %event_settings = $event->all_settings;

	my $ncfl++ if $tourn->setting("ncfl");

	my @panels = $round->panels;

    my %panel_entries = ();

	my %entry_school = ();
	my %school;

	foreach my $panel (@panels) { 

		my @entries = $m->comp(
			"/funclib/panel_entries.mas", 
			panel => $panel
		);

        push (@{$panel_entries{$panel->id}}, @entries);

		foreach my $entry (@entries) { 

			my $code;
			my $id;

			if ($ncfl) { 
				$code = $entry->school->region->code;
				$id = $entry->school->region->id;
			} else { 
				$code = $entry->school->code;
				$id = $entry->school->id;
			}

			$entry_school{$entry->id}{"code"} = $code;
			$entry_school{$entry->id}{"school"} = $id;

			unless ($school{$id}) {
				$school{$id} = $code;
			}
		}
    }

	my %crosses_entries = $m->comp(
		"/funclib/event_doubled.mas", 
		round => $round 
	);

	my %event_speaker_order = $m->comp(
		"/funclib/event_speaker_order.mas",
		round => $round
	);

	my %hit_before = $m->comp(
		"/funclib/event_entry_hits.mas",
		round => $round
	);

	my $previous_round = Tab::Round->search(
		name => ($round->name - 1),
		event => $event->id
	)->first;

    my $entries_ref;

    if ($previous_round) { 

        my @results = $m->comp(
            "/tabbing/results/order_entries.mas",
            round => $previous_round,
        ) if $previous_round;

        $entries_ref = pop @results if @results;

	}

	my %seeds = %{$entries_ref->{'seed'}} 
		if $entries_ref 
		&& $entries_ref->{"seed"};

	my %section_ranks = %{$entries_ref->{'section_rank'}} 
		if $round->type eq "elim"
		&& $entries_ref 
		&& $entries_ref->{"section_rank"};

	my %sections = %{$entries_ref->{'section'}} 
		if $round->type eq "elim"
		&& $entries_ref 
		&& $entries_ref->{"section"};


	my $strength = ${$entries_ref}{"tiebreak"}{"1"} 
		if $entries_ref;

	if ($event_settings->{"seed_presets"} && $event->type ne "elim") { 

		my @seeds = $m->comp(
			"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "pairing_seed"
		);

		%seeds = map {$_->entry->id => $_->value} @seeds;
	}

	my $code_style = $event_settings->{"code_style"};

	my $code_block = "big";

	$code_block = "small" if $code_style eq "numbers";
	$code_block = "small" if $code_style eq "school_number";

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (@panels) { 
				averageStrength('<% $panel->id %>');
%			}

		});

		function averageStrength(panelID) { 

			var total = 0, counter = 0, average = 0, already = {};

			$("#panel_"+panelID).find(".strength").each(function(index) { 

				var strengthScore = parseInt(this.id);

				var entryID = $(this).attr("entry");

				if (!(entryID in already)) { 
					total = total + strengthScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) { 
				average = (total / counter);
			}

			$("#average_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) { 
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) { 
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) { 

			$(".entries").not("."+clashType+"_"+clashKey).removeClass(colorToggle);
			$(".schooltoggle").not("#"+keyID).removeClass('invert');

			$("#"+keyID).toggleClass('invert');

			if (clashType === "hits") { 
				$("."+clashType).toggleClass("hidden");
				$("."+clashType).toggleClass(colorToggle);
			} else { 
				$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
				$("."+clashType+"_"+clashKey).toggleClass("hidden");
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").addClass("hidden");

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop             : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_confirm.mhtml",{ 
                        entry_id     : ui.draggable.attr("id"),
                        panel_marker : this.id
                    }).done(function(data) { 

						console.log(data);

						if (data.error) { 
							alertify.error(data.message);
						} else { 
							alertify.set('notifier','delay', 2);
							alertify.success(data.message);
							alertify.set('notifier','delay', 5);
						}
					});

                    // remove the original element from its origin to this
                    // location, and make it visible again while destroying the
                    // clone.  this is necessary because the default jquery
                    // draggable behavior does not play well with scrollable
                    // windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");
					averageStrength(panelID);

					$("#"+this.id).removeClass("strength_"+panelID);
					

                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$( ".draggable" ).draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) { 
					$("."+this.id).hide();

					var schoolID = $("#"+this.id).attr("school");
					$(".school_"+schoolID).addClass("hidden");

					$(".hitcounter").addClass('hidden');

				},

				start: function(event, ui) { 
			
					var schoolID = $("#"+this.id).attr("school");

					$(".schools").addClass("hidden");
					$(".school_"+schoolID).removeClass("hidden");

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");

					$(".hit_"+this.id).removeClass("hidden");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"
			});

		});

	</script>

		<div class="full nospace">

			<span class="twentieth">
%				if ($sort_by eq "seed") { 
					<a 
						class = "fa fa-lg buttonwhite redtext fa-sort"
						title = "Sort by speaker order"
						href="show_snake.mhtml?round_id=<% $round->id %>&sort_by=speaker"
					></a>
%				} else { 	
					<a 
						class = "fa fa-lg buttonwhite bluetext fa-sort"
						title = "Sort by seed order"
						href="show_snake.mhtml?round_id=<% $round->id %>&sort_by=seed"
					></a>
%				}
			</span>

			<span class="third">
				<h4><% $round->realname %> Snake</h4>
			</span>

			<span class="threefifths rightalign">

				<span class="strong">
					Show:
				</span>


				<span 
					id      = "schools"
					class   = "buttonwhite redtext padless"
					onClick = "toggleShow(this.id)";
				>
					<% $ncfl ? "Dioceses" : "Schools" %>
				</span>

%				unless ($round->type eq "elim") { 

					<span 
						id      = "hits"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						Hits
					</span>

%				}

				<span 
					id      = "orders"
					class   = "buttonwhite greentext padless"
					onClick = "toggleShow(this.id)";
				>
					Order
				</span>

%				unless ($ncfl) { 

					<span 
						id      = "crosses"
						class   = "buttonwhite graytext padless"
						onClick = "toggleShow(this.id)";
					>
						Cross
					</span>

%				} else { 

					<span 
						id      = "sections"
						class   = "buttonwhite bluetext padless"
						onClick = "toggleShow(this.id)";
					>
						Section
					</span>

					<span 
						id      = "section_ranks"
						class   = "buttonwhite graytext padless"
						onClick = "toggleShow(this.id)";
					>
						Section Rank
					</span>

%				}

%				unless ($round->type eq "elim") { 

					<span 
						id      = "strength"
						class   = "buttonwhite purpletext padless"
						onClick = "toggleShow(this.id)";
					>
						Strength
					</span>

%				}

%				if (keys %seeds) { 

					<span 
						id      = "seeds"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						Seeds
					</span>

%				}

			</span>

		</div>

<%perl>

		my $max_speaker;
		my %entry_by_speaker = ();

		my %order_by_seed = ();

		my %in_section = ();

		foreach my $panel (@panels) { 

			foreach my $entry (@{$panel_entries{$panel->id}}) { 

				push @{$entry_by_speaker{$panel->id}{$entry->speaks}}, $entry;

				$order_by_seed{$panel->id}{$entry->speaks} = $seeds{$entry->id};

				$max_speaker = $entry->speaks 
					if $entry->speaks > $max_speaker;

				$in_section{$entry->id} = $panel->id;
			}
		}

		my $count;

		foreach my $panel (@panels) { 

			my %schools;
			my $order_count;
			my $last_order_count;
			my $crosses_total_clash;
			my $hit_total;

			my @speakers = (1 .. $max_speaker);

			@speakers = 
				sort { $order_by_seed{$panel->id}{$a} <=> $order_by_seed{$panel->id}{$b} }
				@speakers
				if $sort_by eq 'seed';

</%perl>

			<span 
				class="inline marless top fixedwidth"
				id = "panel_<% $panel->id %>"
			>

				<div class="
						yellowrow padmore smallish centeralign strong marno 
						bordersides bordertop"
				>
					Section <% $panel->letter %> 
				</div>



%				foreach my $speaker ( @speakers) { 

					<div class="full lightrow nospace bordersides">

						<span class="tenth padless marno centeralign">
							<% $speaker %>
						</span>

						<span 
							id      = "<% $panel->id %>_<% $speaker %>"
							panel   = "<% $panel->id %>"
							class   = "marno fivesixths droppable speaker_<% $speaker %>"
						>

<%perl>
						unless ($entry_by_speaker{$panel->id}{$speaker}) {
							$m->print("</span></div>\n");
							next;
						}

						foreach my $entry (@{$entry_by_speaker{$panel->id}{$speaker}}) {

							$schools{$entry_school{$entry->id}{"school"}}++;

							my $order_string;
							my %orders = ();

							my $last_order;

							foreach my $round (sort keys %{$event_speaker_order{$entry->id}}) { 

								$order_string .= ", " if $order_string;
								$order_string .= $event_speaker_order{$entry->id}{$round};

								$orders{$event_speaker_order{$entry->id}{$round}}++;
								$last_order = $event_speaker_order{$entry->id}{$round};
							}

							if ($speaker == $last_order) { 
								$last_order_count++ 
							} else {
								$order_count += $orders{$speaker};
							}

							my $crosses_clash;

							foreach my $other (keys %{$crosses_entries{$entry->id}}) { 
													
								if (
									(abs $crosses_entries{$entry->id}{$other}{"order"} - $speaker) 
									< 2
								) {
									$crosses_total_clash++;
									$crosses_clash++;
								}
							}
</%perl>

							<span 
								class="
									marno
									entries
									draggable
									centeralign
									<% $last_order == $speaker ? "order_last" : "" %>
									<% $orders{$speaker} ? "order_normal" : "" %>
									<% $crosses_clash ? "crosses_normal" : "" %>
								"
								id         = "<% $entry->id %>"
								school     = "<% $entry_school{$entry->id}{"school"} %>"
								orders     = "<% $order_string %>"
								last_order = "<% $last_order %>"
							>
								<div class="centeralign codes full marno padless
									<% length($entry->code) < 6 ? "biggish" : "" %>
								">
									<% $entry->code %>
								</div>

								<span 
									class="
										school_<% $entry_school{$entry->id}{"school"} %>
										nospace half schools hidden biggish redtext strong"
								>
									<% $entry_school{$entry->id}{"code"} %>
								</span>

%								unless ($round->type eq "elim") { 

									<span class="
										hits_<% $panel->id %> 
										nospace half schools hidden biggish orangetext strong"
									>

%										foreach my $hit (sort keys %{$hit_before{$entry->id}}) {

%											next unless $in_section{$hit} == $panel->id;

%											$hit_total++;

											<span class="full nospace strong">
												<% $hit_before{$entry->id}{$hit}{"code"} %>
												<% $hit_before{$entry->id}{$hit}{"count"} %>x
											</span>
%										}

									</span>

%									foreach my $hit (sort keys %{$hit_before{$entry->id}}) {
										<span class="
											centeralign orangetext full nospace 
											strong hitcounter hit_<% $hit %> hidden
										">
											<% $hit_before{$entry->id}{$hit}{"count"} %>x
										</span>
%									}

%								} else { 

									<span 
										class="nospace half seeds hidden biggish orangetext strong"
										entry = "<% $entry->id %>"
										id    = "<% $seeds{$entry->id} %>"
									>
										<% $seeds{$entry->id} %>
									</span>
							
									<span 
										class="nospace quarter sections hidden biggish bluetext strong"
										entry = "<% $entry->id %>"
										id    = "<% %sections ? $sections{$entry->id} : ""  %>"
									>
										<% %sections ? $sections{$entry->id} : ""  %>
									</span>
							
									<span 
										class="nospace quarter section_ranks hidden biggish greytext strong"
										entry = "<% $entry->id %>"
										id    = "<% %section_ranks ? $section_ranks{$entry->id} : ""  %>"
									>
										<% %section_ranks ? $section_ranks{$entry->id} : ""  %>
									</span>


%								}

								<span 
									class="nospace half strengths hidden biggish purpletext strong"
									entry = "<% $entry->id %>"
									id    = "<% $strength ? ${$strength}{$entry->id} : ""  %>"
								>
									<% $strength ? ${$strength}{$entry->id} : ""  %>
								</span>

								<span 
									class="nospace orders code_<% $panel->id %> hidden"
								>
%									foreach my $round (
%										sort keys %{$event_speaker_order{$entry->id}}
%									) { 
										<span class="full padless marno">
										<% $round %>-<%
											Lingua::EN::Numbers::Ordinate::ordinate(
												$event_speaker_order{$entry->id}{$round}
											)
										%>
										</span>
%									}
								</span>

								<span class="nospace crosses code_<% $panel->id %> hidden">

%									foreach my $other (keys %{$crosses_entries{$entry->id}}) { 

										<span class="full nospace">

											<% $crosses_entries{$entry->id}{$other}{"event"} %>-<% 	
												Lingua::EN::Numbers::Ordinate::ordinate(
													$crosses_entries{$entry->id}{$other}{"order"} 
												) 
										%>

										</span>
%									}

								</span>

							</span>
%						}

					</div>
%				}

				<div class="lightrow centeralign padmore marno bordersides borderbottom">

					<p class="leftalign strong smallish marno">Status:</p>

%					unless ($round->type eq "elim") { 

						<div class = "full padless marno purpletext" >

							<span class="half rightalign">
								Avg Rank:
							</span>

							<span 
								class = "half leftalign strong"
								id    = "average_<% $panel->id %>">
							</span>

						</div>

%					}

%					my $blah;

%					foreach my $key (keys %schools) { 

%						next unless $schools{$key} > 1;
%						$blah++;

						<span 
							id      = "<% $key %>_<% $panel->id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padless smallish full"
							onClick = "toggleColor( 
								this.id,
								<% $panel->id %>,
								<% $key %>, 
								'school',
								''
							);"
						>
							<% $schools{$key} %> from 
							<% $ncfl ? "Dio" : "School" %> 
							<% $school{$key} %>

						</span>

%					}

%					if ($order_count) { 

%						$blah++;

						<span 
							id      = "order_<% $panel->id %>"
							class	= "ordertoggle buttonwhite marbottom greentext padless smallish full"
							onClick = "toggleColor( 
								this.id,
								<% $panel->id %>,
								'normal',
								'order',
								'green'
							);"
						>
							<% $order_count %> order repeats
						</span>
%					}

%					if ($last_order_count) { 
%						$blah++;

						<span 
							id      = "last_order_<% $panel->id %>"
							class	= "last_ordertoggle buttonwhite marbottom greentext padless smallish full"
							onClick = "toggleColor( 
								this.id,
								<% $panel->id %>,
								'last',
								'order',
								'dkgreen'
							);"
						>
							<% $last_order_count %> same order R<% $round->name - 1 %>
						</span>
%					}

%					unless ($ncfl) { 
%						if ($crosses_total_clash) { 
%							$blah++;

							<span 
								id      = "crosses_<% $panel->id %>"
								class	= "crossestoggle buttonwhite marbottom graytext padless smallish full"
								onClick = "toggleColor( this.id, <% $panel->id %>, 'normal', 'crosses', 'dkgrey');"
							>
								<% $crosses_total_clash %> crosses entry order
							</span>
%						}
%					}


%					unless ($round->type eq "elim") { 

%						if ($hit_total) { 

%							$blah++;

							<span 
								id      = "hit_<% $panel->id %>"
								class	= "hittoggle buttonwhite marbottom orangetext padless smallish full"
								onClick = "toggleColor( this.id, <% $panel->id %>, 'hits', 'hits', 'orangetext');"
							>
								<% $hit_total %> repeat hits
							</span>
%						}
%					}

%					unless ($blah) { 
		
						<span class="buttonwhite greentext padless">

							<span class="fa fa-check fa-lg greentext">
							</span>

							All OK!

						</span>

%					}

				</div>

			</span>
%		}



