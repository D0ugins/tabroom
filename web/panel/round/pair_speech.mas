<%args>
	$round
	$num_panels
	$entries_ref => undef
</%args>
<%perl>

	return if $round->setting("flight_a_round");

	use POSIX;
	my $event = $round->event;

	my $ncfl++ if $event->tourn->setting("ncfl");
	my $region_avoid++ if $event->setting("region_avoid");

	my $percent_limit = $event->setting("school_percent_limit");

	my @all_entries;

	@all_entries = ${$entries_ref} if $entries_ref;
	@all_entries = $event->entries( active => 1 ) 
		unless @all_entries;

	my $panel_size = ceil(scalar @all_entries / $num_panels);
	my %panel_cohorts = ();

	my $count;
	my $cohort = 1;

	#Prime the panel scorer 
	my @other_ballots = $m->comp(
		"/funclib/other_ballots.mas", 
		round => $round
	);

	my %entries_by_panel = ();
	my %panels_by_entry = ();

	my %positions_by_entry = ();
	my %total_positions_by_entry = ();

	foreach my $ob (@other_ballots) { 
		next unless $ob && $ob->id;
		next unless $ob->entry && $ob->panel;

		my $entry = $ob->entry->id;
		my $panel = $ob->panel->id;

		push (@{$entries_by_panel{$panel}}, $entry);
		push (@{$panels_by_entry{$entry}}, $panel);

		$positions_by_entry{$entry."-".$ob->speakerorder}++;
		$total_positions_by_entry{$entry} += $ob->speakerorder;
	}

	my %entry_hits = ();
	my %school_hits = ();
	my %region_hits = ();
	my %own_school_hits = ();
	my %own_region_hits = ();
	my %size_of_school = ();

	my %school_by_entry = ();
	my %region_by_entry = ();

	my %entry_double_position = ();
	my %entry_double_late = ();

	my $speaker_priority_first = $event->setting("speaker_priority_first");

	my @schools;

	if ($ncfl) { 

		my %school_region = ();

		foreach my $entry (@all_entries) { 

			my $entry_id = $entry->id;

			my $region = $school_region{$entry->school->id};

			unless ($region) { 
				$region = $entry->school->region;
				$school_region{$entry->school->id} = $region;
				push (@schools, $region);
				$size_of_school{$region}++;
			}

			$school_by_entry{$entry_id} = $region->id;

		}

	} elsif ($region_avoid) { 

		my %school_region = ();

		foreach my $entry (@all_entries) { 

			my $entry_id = $entry->id;

			my $region = $school_region{$entry->school->id};

			unless ($region) { 
				$region = $entry->school->region;
				$school_region{$entry->school->id} = $region;
			}

			$school_by_entry{$entry_id} = $entry->school->id;
			push (@schools, $school_by_entry{$entry_id});
			$size_of_school{$school_by_entry{$entry_id}}++;

			$region_by_entry{$entry_id} = $region->id;

		}

	} else { 

		foreach my $entry (@all_entries) { 
			my $entry_id = $entry->id;
			$school_by_entry{$entry_id} = $entry->school->id;
			push (@schools, $school_by_entry{$entry_id});
			$size_of_school{$school_by_entry{$entry_id}}++;
		}
	}

	foreach my $entry (@all_entries) { 

		my $entry_id = $entry->id;

		foreach my $panel_id (@{$panels_by_entry{$entry_id}}) {

			foreach my $other_id (@{$entries_by_panel{$panel_id}}) { 
				
				next if $other_id <= $entry_id; 
				# Avoid myself and double counting

				$entry_hits{$entry_id."-".$other_id}++;

				$school_hits{$entry_id."-".$school_by_entry{$other_id}}++;
				$region_hits{$entry_id."-".$region_by_entry{$other_id}}++;
	
				if ($school_by_entry{$other_id} == $school_by_entry{$entry_id}) { 
					$own_school_hits{$entry_id}++;
				}
				if ($region_by_entry{$other_id} == $region_by_entry{$entry_id}) { 
					$own_region_hits{$entry_id}++;
				}

			}
		}
	}

	my $dbh = Tab::DBI->db_Main();

	my $second_round_id = $round->setting("flight_b_round");

	my $second_round = 
		Tab::Round->retrieve($second_round_id) 
		if $second_round_id;

	undef $second_round 
		unless $second_round 
		&& $second_round->event->id == $round->event->id;

    my $double_entry_sth = $dbh->prepare("
        select distinct thisentry.id, thatballot.entry, thatballot.speakerorder, thatsetting.value

        from (entry thisentry, entry_student thises, round thisround,
             round thatround, panel thatpanel, ballot thatballot, entry_student thates)

		left join event_setting thatsetting 
			on thatsetting.event = thatround.event
			and thatsetting.tag = 'speaker_priority_first'

        where thisround.id = ?
        and thisround.event = thisentry.event
        and thisentry.id = thises.entry
        and thises.student = thates.student
        and thises.entry != thates.entry
        and thates.entry = thatballot.entry
        and thatballot.panel = thatpanel.id
        and thatpanel.round = thatround.id
        and thatround.timeslot = thisround.timeslot
	");

	$double_entry_sth->execute($round->id);

	while ( my ($this_entry, $that_entry, $that_order, $speaklate) 
		= $double_entry_sth->fetchrow_array() 
	) { 
		$entry_double_position{$round}{$this_entry} = $that_order;
		$entry_double_late{$round}{$this_entry} = $speaklate;
	}

	if ($second_round) { 

		$double_entry_sth->execute($second_round);

		while ( my ($this_entry, $that_entry, $that_order, $speaklate) 
			= $double_entry_sth->fetchrow_array() 
		) { 
			$entry_double_position{$second_round}{$this_entry} = $that_order;
			$entry_double_late{$second_round}{$this_entry} = $speaklate;
		}

	}

	my %sseen = (); 
	@schools = grep { ! $sseen{$_} ++ } @schools;
	@schools = sort {$size_of_school{$b} <=> $size_of_school{$a}} @schools;
	my %school_rank = ();

	my $ranker = 1;
	foreach (@schools) { 
		$school_rank{$_} = $ranker++;
	}

	#Set up the initial panels
	my $max_size = ceil(scalar @all_entries / $num_panels);
	my $min_size = floor(scalar @all_entries/ $num_panels);
	my $remainder = (scalar @all_entries - ($num_panels * $min_size));

	my %panels = ();

	use List::Util 'shuffle';
	my @keys =  shuffle( 1 .. $num_panels);

	my %forbidden_panels = ();

	my $limit_count =  (scalar @keys) * $percent_limit * .01;

	if ($limit_count) { 

		foreach my $school (@schools) { 

			next if $size_of_school{$school} < $limit_count;

			my $counter;
			my $limited;

			foreach my $key (shuffle @keys) { 
				next if $counter++ <= $limit_count;
				$forbidden_panels{$school}{$key}++;
				$limited++;
			}

		}

		@all_entries = 
			sort { $size_of_school{$school_by_entry{$b}} <=> $size_of_school{$school_by_entry{$a}} } 
			@all_entries;

	}

	foreach my $entry (@all_entries) { 

		my $score = "3141592653";   #Shut up.
		my $picked_key;

		KEY:
		foreach my $key (@keys) { 

			next if $score == 0;
			next if $forbidden_panels{$school_by_entry{$entry->id}}{$key};

			my @panel = @{$panels{$key}} if $panels{$key};

			next KEY if (scalar @panel) >= $max_size;

			if ((scalar @panel) == $min_size) {
				next KEY unless $remainder > 0;
			}

			if (@panel) { 

				push (@panel, $entry->id);

				my $new_score = score_section(\@panel, \%entry_hits, \%school_hits, 
					\%region_hits, \%own_school_hits, \%own_region_hits, 
					\%school_by_entry, \%region_by_entry);
			
				if ($new_score < $score) { 
					$picked_key = $key;
					$score = $new_score;
					last KEY if $score == 0;
				}

			} else {
					
				$picked_key = $key;
				$score = 0;
				last KEY;
			}

		}

		$remainder-- if $panels{$picked_key} && scalar @{$panels{$picked_key}} == $min_size;
		push (@{$panels{$picked_key}}, $entry->id);

		my $k = shift @keys;
		push (@keys, $k);

	}

	my @panel_keys = sort keys %panels;

	foreach my $panel_key (@panel_keys) { 
		@{$panels{$panel_key}} = 
			sort {$school_rank{$school_by_entry{$a}} <=> $school_rank{$school_by_entry{$b}} } 
			@{$panels{$panel_key}};
	}

	my $no_improvement = 1;

	foreach my $counter (1 .. 7) { 

		my $total;

		next if $no_improvement == 0;
		$no_improvement = 0;

		foreach my $panel_key (@panel_keys) { 
		
			my @panel = @{$panels{$panel_key}};
			my $entry_panel1_score = score_section(\@panel, \%entry_hits, \%school_hits, 
				\%region_hits, \%own_school_hits, \%own_region_hits, 
				\%school_by_entry, \%region_by_entry);

			next if $entry_panel1_score < 1;

			ENTRY:
			foreach my $entry_id (@panel) { 
			
				next if $entry_panel1_score < 1;

				# Remove the candidate for a test array of original panel
				my @panel1 = @panel; 	
				my $index = 0;
				$index++ until $panel1[$index] == $entry_id;
				splice(@panel1, $index, 1);

				my $swap_panel;
				my $swap_entry;
				my $current_diff;

				my @new_entry_panel;
				my @new_swap_panel;

				my $count;
	
				OTHERPANEL:
				foreach my $other_key (@panel_keys) { 

					next if $forbidden_panels{$school_by_entry{$entry_id}}{$other_key};

					next if $other_key == $panel_key; 				# Can't switch to the same panel

					my @panel2 = @{$panels{$other_key}}; 			# Find the other panel for scoring
					my $other_panel2_score = score_section(\@panel2, \%entry_hits, \%school_hits, 
						\%region_hits, \%own_school_hits, \%own_region_hits, 
						\%school_by_entry, \%region_by_entry);

					push (@panel2, $entry_id);						# Put me into this panel for testing

					OTHERENTRY:
					foreach my $other_entry_id (@{$panels{$other_key}}) {
					
						next if $forbidden_panels{$school_by_entry{$other_entry_id}}{$panel_key};
						push (@panel1, $other_entry_id);				# Add swap candidate to original panel

						$count++;

						my $other_panel1_score = score_section(\@panel1, \%entry_hits, \%school_hits, 
							\%region_hits, \%own_school_hits, \%own_region_hits, 
							\%school_by_entry, \%region_by_entry);

						my $index = 0;									# Remove swap candidate from the panel
						$index++ until $panel2[$index] == $other_entry_id;
						splice(@panel2, $index, 1);

						my $entry_panel2_score = score_section(\@panel2, \%entry_hits, \%school_hits, 
							\%region_hits, \%own_school_hits, \%own_region_hits, 
							\%school_by_entry, \%region_by_entry);

						my $squo_score = $entry_panel1_score + $other_panel2_score;
						my $swap_score = $entry_panel2_score + $other_panel1_score;
						my $diff = $squo_score - $swap_score;

						my $replace = pop(@panel1);  #remove me from this panel
						push (@panel2, $replace);    #put me back from whence I came

						if ( $diff > 0 && $diff > $current_diff) { 
							$current_diff = $diff;
							$swap_entry = $other_entry_id;
							$swap_panel = $other_key;
						}

					}

				}

				if ($swap_entry) { 

					my @panel2 = @{$panels{$swap_panel}};

					push (@panel1, $swap_entry);

					my $swapdex = 0;
					$swapdex++ until $panel2[$swapdex] == $swap_entry;
					splice(@panel2, $swapdex, 1);

					push (@panel2, $entry_id);

					$no_improvement++;  # Fail
					@{$panels{$panel_key}} = @panel1;
					@{$panels{$swap_panel}} = @panel2;

					@panel = @panel1;

					$entry_panel1_score = score_section(\@panel1, \%entry_hits, \%school_hits, 
						\%region_hits, \%own_school_hits, \%own_region_hits, 
						\%school_by_entry, \%region_by_entry);

					my $other_score = score_section(\@panel2, \%entry_hits, \%school_hits, 
						\%region_hits, \%own_school_hits, \%own_region_hits, 
						\%school_by_entry, \%region_by_entry);

				}
			}
		}

		last if $no_improvement < 1;

	}


	my @judges = $m->comp("/funclib/round_judges.mas", round => $round) 
		unless $m->comp("/funclib/round_entries.mas", round => $round);

	my @judge_keys;

	my %judge_panel = ();
	foreach my $judge (@judges) { 
		push (@{$judge_panel{$judge->panelid}}, $judge->id);
		push (@judge_keys, $judge->panelid);
	}

	my %jseen = (); 
	@judge_keys = grep { ! $jseen{$_} ++ } @judge_keys;

	my @rooms = $m->comp("/funclib/round_rooms.mas", round => $round);

	my @clean_rooms = $m->comp("/funclib/clean_rooms.mas", round => $round);

	#Clear out the old

	Tab::Score->set_sql( delete_round => "
		delete score from score, ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = score.ballot
	");

	Tab::Ballot->set_sql( delete_round => "
		delete ballot from ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
	");

	Tab::Panel->set_sql( delete_round => "
		delete from panel where round = ?
	");

	Tab::Score->sql_delete_round->execute($round->id);
	Tab::Ballot->sql_delete_round->execute($round->id);
	Tab::Panel->sql_delete_round->execute($round->id);

	my $letter = 1;
	$letter = "A" if $event->setting("panel_labels") eq "letters";

	# If I have a second flighted situation, track half my sections into the
	# second flight timeblock. 

	my %panel_second; 

	if ($second_round) { 

		my $switch;
	
		foreach my $panel_key (@panel_keys) { 
			next if $switch++ % 2;
			$panel_second{$panel_key}++;
		}

	}

	#Set speaker order
	foreach my $panel_key (@panel_keys) { 

		my @entries = @{$panels{$panel_key}};

		@entries = shuffle(@entries);

		@entries = sort {$total_positions_by_entry{$b} <=> $total_positions_by_entry{$a}} @entries;

		my $size_of_panel = scalar @entries;

		my $moved = 1;

		my $this_round = $round;
		$this_round = $second_round 
			if $panel_second{$panel_key}
			&& $second_round;

		foreach (1 .. 10) { 
			
			next unless $moved;

			undef $moved;
			my $position;

			foreach my $entry (@entries) { 

				$position++;

				if ($positions_by_entry{$entry."-".$position}) { 

					#Remove from place in line

					my $place;

					#Find a new home

					$place = $position;

					while ($place == $position) { 
						$place = int(rand($size_of_panel));
					}
	
					$place--;
					$place = 1 if $place < 0;
					splice(@entries,($place - 1),0,$entry);
					$moved++;
				}
			}
			
			my %seen;
			@entries = grep { ! $seen{$_} ++ } @entries;

			foreach my $entry (@entries) { 

				if ($entry_double_position{$this_round}{$entry}) {

					my $speakdex = 0;
					$speakdex++ until $entries[$speakdex] == $entry;
					splice(@entries, $speakdex, 1);

					my $place;

					if ($speaker_priority_first) { 
						$place = 1;
					} elsif ($entry_double_late{$this_round}{$entry}) { 
						$place = 7;
					} elsif ($entry_double_position{$this_round}{$entry} > 3) { 
						$place = 1;
					} else { 
						$place = 7;
					}

					$place = 1 if $place < 0;

					splice(@entries,($place - 1),0,$entry);

				}

			}


		}

		@{$panels{$panel_key}} = @entries;
	}

	foreach my $panel_key (@panel_keys) { 

		my $room = shift @rooms if @rooms;
		my $room_id = 0;
		$room_id = $room->id if $room;

		my $jpanel = shift @judge_keys if @judge_keys;
		my @judge_ids = @{$judge_panel{$jpanel}} if $jpanel;
		@judge_ids = ("0") unless @judge_ids;

		my @entries = @{$panels{$panel_key}};
		
		my $score = score_section(\@entries, \%entry_hits, \%school_hits, 
			\%region_hits, \%own_school_hits, \%own_region_hits, 
			\%school_by_entry, \%region_by_entry);

		my $this_round = $round->id;
		$this_round = $second_round if $second_round{$panel_key};

		my $panel = Tab::Panel->create({
			round  => $this_round->id,
			room   => $room_id,
			letter => $letter,
			score  => $score,
			flight => 1
		});

		foreach my $judge_id (@judge_ids) { 

			my $position;

			foreach my $entry (@entries) { 

				$position++;

				next unless $entry;
				my $ballot = Tab::Ballot->create({
					panel        => $panel->id,
					judge        => $judge_id,
					entry        => $entry,
					speakerorder => $position
				})

			}
		
		}

		if ($letter eq "Z") { 
			$letter = "AA";
		} else { 
			$letter++;
		}

	}

	my $now = DateTime->now;
	$round->created($now);
	$round->update;

	return;

	sub score_section {

		my ($panref, $entref, $schref, $regref, $ownschref, $ownregref, $schent, $regent) = @_;

		my @pan_entries = @$panref;

		my $score = 0;
		my $tick;

		foreach my $entry (@pan_entries) { 

			foreach my $other (@pan_entries) { 

				next unless $other > $entry;

				if (${ $schent }{$other} == ${ $schent }{$entry}) { 
					$score += 100000;
					$score += 100000 if ${ $ownschref }{$entry};
				}

				if (${ $regent }{$other} == ${ $regent }{$entry}) { 
					$score += 1000;
					$score += 1000 if ${ $ownregref }{$entry};
				}

				$score += 100 if ${ $entref}{$entry."-".$other};
				$score += 1 if ${ $schref }{$entry."-".${ $schent }{$other}};
				$score += 1 if ${ $regref }{$entry."-".${ $regent }{$other}};
		
			}

		}

		return $score;

	}

</%perl>
