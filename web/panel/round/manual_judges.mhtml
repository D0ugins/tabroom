<%args>
	$round_id
	$flight => 1
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $flights = $round->flighted; 

	my $wudc++ if $event->type eq "wudc";

	my $rounds_per = $event->category->setting("rounds_per");

	my $jpool_limit;
	my $jpool_table;

	my @jpools = $round->jpools;

	if (@jpools) { 
		$jpool_table = "jpool_judge, jpool_round, ";
		$jpool_limit = " and jpool_judge.judge = judge.id 
						and jpool_judge.jpool = jpool_round.jpool 
						and jpool_round.round = round.id";
	} else { 
		$jpool_limit = " and judge.category = event.category ";
	}

	my $aff_string = $event->setting("aff_string");
	my $neg_string = $event->setting("neg_string");

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my %entry_wins = $m->comp(
		"/funclib/entry_wins.mas", 
		event => $event, 
		round => $round
	);

	my %entry_losses = $m->comp(
		"/funclib/entry_losses.mas", 
		event => $event, 
		round => $round
	);

	Tab::Judge->columns(TEMP => "tab_rating");
	Tab::Judge->columns(TEMP => "parli");

	Tab::Judge->set_sql( available_judges => "

		select distinct judge.id, judge.first, judge.last, judge.obligation, judge.hired, 
			tab_rating.value tab_rating,
			parli.value parli
		from (judge, event, round, $jpool_table timeslot)
		left join judge_setting tab_rating 
			on tab_rating.tag = 'tab_rating' 
			and tab_rating.judge = judge.id

		left join judge_setting parli 
			on parli.tag = 'parli' 
			and parli.judge = judge.id

		where judge.active = 1
		and judge.active = 1
		and event.id = round.event
		and round.timeslot = timeslot.id
		".$jpool_limit."
		and round.id = ? 

		and not exists (
			select strike.id from strike
			where strike.type = 'event'
			and strike.event = event.id
			and strike.judge = judge.id
		)

		and not exists ( 
			select strike.id from strike
			where strike.type = 'time'
			and strike.judge = judge.id
			and strike.start < timeslot.end
			and strike.end > timeslot.start
		)

		and not exists (
			select panel.id
			from panel, ballot, round otherround, timeslot othertimeslot
			where ballot.judge = judge.id
			and ballot.panel = panel.id
			and panel.round = otherround.id
			and otherround.id != round.id
			and otherround.timeslot = othertimeslot.id
			and othertimeslot.start < timeslot.end
			and othertimeslot.end > timeslot.start
		)

		order by tab_rating.value, judge.last
	");

	my @all_judges = Tab::Judge->search_available_judges($round->id);
	@all_judges = sort {$a->tab_rating <=> $b->tab_rating} @all_judges;

	my %judge_by_id = map {$_->id => $_} @all_judges;

	my @round_judges = $m->comp("/funclib/round_judges.mas", round => $round);

	my $use_ref = $m->comp("/funclib/judge_use.mas", round_id => $round->id);

	foreach my $judge (@round_judges) { 
		next if $judge_by_id{$judge->id};
		$judge_by_id{$judge->id} = $judge;
	}


	my @panels = Tab::Panel->search_like( 
		flight    => $flight,
		round     => $round->id,
		{order_by => 'bracket'}
	);

	my %entry_by_id = map {$_->id => $_} $round->event->entries;

	my $prefs = $event->category->setting("prefs");
	undef $prefs if $prefs eq "none";

	my $dbh = Tab::DBI->db_Main();

	my $this_round_sth = $dbh->prepare("
		select distinct panel.id, ballot.chair, ballot.judge, 
			ballot.entry, ballot.side, ballot.speakerorder
		from panel, ballot
		where panel.round = ".$round->id."
		and panel.flight = ".$flight."
		and panel.id = ballot.panel
		group by ballot.id
	");

	my %panel_chair;
	my %panel_judge;
	my %panel_entry;
	my %entry_side;
	my %entry_order;
	my %used_judge;

	$this_round_sth->execute;

	while (
		my ($panel, $chair, $judge, $entry, $side, $order)  
		= $this_round_sth->fetchrow_array() 
	) {
		push @{$panel_chair{$panel}}, $judge if $chair;
		push @{$panel_judge{$panel}}, $judge unless $chair;
		push @{$panel_entry{$panel}}, $entry;
		$entry_side{$entry} = $side;
		$entry_order{$entry} = $order;
	}

	my %judge_constraints = $m->comp(
		"/funclib/judge_cannotsee.mas", 
		category => $round->event->category,
		round    => $round
	);

	my %judge_ratings = $m->comp(
		"/funclib/event_judgeprefs.mas", 
		event => $round->event
	);

	my $code_style = $event->setting('code_style');

	my $code_size = "threetenths";

	$code_size = "half"
		if $code_style eq "names"
		|| $code_style eq "last_names"
		|| $code_style eq "code_name"
		|| $code_style eq "names_lastfirst";

	$code_size = "full padless marno"
		if $code_style eq "school_names"
		|| $code_style eq "school_first_names"
		|| $code_style eq "school_last_names";

	my $no_school_code++
		if $code_style eq "code_name"
		|| $code_style eq "school_names"
		|| $code_style eq "school_first_names"
		|| $code_style eq "school_last_names";

</%init>

	<script>

	 	$(function() {

			$( ".droppable" ).droppable({

				hoverClass  	 : "ltyellow",
				accept			 : ":not(.ui-sortable-helper)",
				disableSelection : "true",
				drop			 : function( event, ui) {

					var draggableId = ui.draggable.attr("id");
					var droppableId = this.id;
					var isChair = $(this).attr("chair");

					$.post("manual_judge_save.mhtml", { 
						round_id : <% $round_id %>,
						flight   : <% $flight %>,
						judge_id : draggableId,
						panel_id : droppableId,
						chair    : isChair
                    }).done(function(data) { 

						console.log(data);

                        if (data.error) { 
                            alertify.warning(data.message);
                        } else { 
                            alertify.set('notifier','delay', 2);
                            alertify.notify(data.message);
                            alertify.set('notifier','delay', 5);
                        }
                    });



					// remove the original element from its origin to this
					// location, and make it visible again while destroying the
					// clone.  this is necessary because the default jquery
					// draggable behavior does not play well with scrollable
					// windows.

					ui.draggable.show();

					$(this).prepend(ui.draggable);

					$( this ).find( ".placeholder" ).remove();

				}

			}).sortable({
				items: ":not(.placeholder)",
				sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

					$( this ).removeClass( "ui-state-default" );
				}
			});

%			foreach my $judge (@all_judges) { 

%				my $judge_id = $judge->id;

					$( "#<% $judge %>" ).draggable({


						drag: function( event, ui ) { 
							$(".<% $judge %>").show();
						},

						stop: function( event, ui ) { 
							$(".<% $judge %>").hide();
<%perl>

							foreach my $key (keys %judge_constraints) { 

								my ($judgeid, $entry) = split(/\-/, $key);
								next unless $entry;
								next unless $judgeid == $judge_id;
</%perl>

								$('.<% $entry %>').removeClass('redrow');
%							}
						},

                        start: function(event, ui) {

							$('#<% $judge %>').hide();

<%perl>

							foreach my $key (keys %judge_constraints) { 

								my ($judgeid, $entry) = split(/\-/, $key);
								next unless $judgeid == $judge_id;
								next unless $entry;

</%perl>

								$('.<% $entry %>').addClass('redrow');
%							}

                        },

						disableSelection : "true",
						revert           : "invalid",
						containment      : '#wrapper',
						snap             : "true",
						snapMode         : "inner",
						helper           : "clone"
					});
%				}

		});	

	</script>

	<div class="main yscroll">

		<h2><% $round->realname %> Manual Judges</h2>

%       if ($flights > 1) { 

            <ul id="tabnav" class="rightalign">

%               foreach my $other_flight (1 .. $flights) { 

                    <li class="<% ($flight == $other_flight) ? "selected" : "" %>"> 

                        <a href="manual_judges.mhtml?round_id=<% $round_id %>&flight=<% $other_flight %>">
                            Flight <% $other_flight %>
                        </a>

                    </li>
%               }

            </ul>
%       }

		<& "/funclib/tablesorter.mas", table => "judgeme" &>

		<table id="judgeme">

			<thead>

				<tr class="yellowrow">

%					if ($event->type ne "speech" && $event->type ne "congress") { 
						<th class="smaller">
							B
						</th>
%					}

					<th class="smaller">
						Room
					</th>

					<th class="smallish">
						Entries
					</th>

					<th 
						class = "smallish"
						style = "width: 130px;"
					>
%						if ($event->type eq "congress")  { 
							Parliamentarian
%						} else { 
							Chair Judge
%						}
					</th>

					<th class="smallish">
						Other Judges
					</th>

%					if ($prefs) { 
						<th class="smallish">
							Prefs
						</th>
%					}

				</tr>

			</thead>

			<tbody>

<%perl>

			my $switch;

			foreach my $panel (@panels) { 

				my $id = $panel->id;

				my %used;

				my @entries = 
					sort {$entry_side{$a} <=> $entry_side{$b}} 
					@{$panel_entry{$id}} 
					if $panel_entry{$panel->id};

				@entries = sort {$entry_order{$a} <=> $entry_order{$b}} @entries;

				my %seen = ();

				@entries = grep { ! $seen{$_} ++ } @entries;	

				my @judges = @{$panel_judge{$id}} if $panel_judge{$id};
				my @chairs = @{$panel_chair{$id}} if $panel_chair{$id};

</%perl>
		
				<tr class="
%					foreach my $entry (@entries) { $m->print($entry." "); } 
				">

%					if ($event->type ne "speech" && $event->type ne "congress") { 
						<td class="centeralign smallish">
							<span class="hidden"><% $panel->bye ? "99999999" : "" %></span>
							<% $panel->bye ? "BYE" : $panel->bracket %>
						</td>
%					}

					<td class="smallish limit">
						<% $panel->room ? $panel->room->name : "" %>
					</td>

					<td class="limit2 padno">
<%perl>

						my $total_wins;

						foreach my $entry (@entries) { 
							$total_wins += $entry_wins{$entry};
						}

						foreach my $entry (@entries) { 

							next if $used{$entry}++;

</%perl>
							<span class="hidden">
								<% $total_wins %>
							</span>

%							if ($event->type eq "wudc") { 

								<div
									title="<% $entry_by_id{$entry} ? $entry_by_id{$entry}->name : "" %>"
									class="nospsace">

									<span class="quarter">
										<% $entry_order{$entry} == 1 ? "1G" : "" %>
										<% $entry_order{$entry} == 2 ? "1O" : "" %>
										<% $entry_order{$entry} == 3 ? "2G" : "" %>
										<% $entry_order{$entry} == 4 ? "2O" : "" %>
									</span>

									<span class="threequarters">
										<% $entry_by_id{$entry} ? $entry_by_id{$entry}->code : "None" %>
									</span>

								</div>

%							} elsif ($event->type eq "congress" || $event->type eq "speech") { 
									
								<span 
									title="<% $entry_by_id{$entry} ? $entry_by_id{$entry}->name : "" %>"
									class="<% $code_size %> nospace padvert nowrap smallish">

%									unless ($no_school_code) { 
%										if ($entry_by_id{$entry}->school->code) { 
											<span class="quarter">
												<% $entry_by_id{$entry}->school->code %>
											</span>
											<span class="threequarters">
%										}
%									}

										<% $entry_by_id{$entry} ? $entry_by_id{$entry}->code : "None" %>

%									unless ($no_school_code) { 
%										if ($entry_by_id{$entry}->school->code) { 
											</span>
%										}
%									}

								</span>

%							} else { 

								<div 
									title="<% $entry_by_id{$entry} ? $entry_by_id{$entry}->name : "" %>"
									class="nospsace"
								>

									<span class="sixth marno">
										<% $entry_wins{$entry}."-".$entry_losses{$entry} %>
									</span>

									<span class="fifth marno">
										<% $entry_side{$entry} == 1 ? ucfirst($aff_string) : "" %>
										<% $entry_side{$entry} == 2 ? ucfirst($neg_string) : "" %>
									</span>

									<span class="threefifths nowrap">
										<% $entry_by_id{$entry} ? $entry_by_id{$entry}->code : "None" %>
									</span>

								</div>

%							}

							</div>
%						}

					</td>

					<td class = "ui-droppable droppable smallerdrop chair"
						id    = "<% $id %>"
						chair = 1
					>

<%perl>
						foreach my $chair (@chairs) { 

							next if $used_judge{$chair}++;
							my $judge = $judge_by_id{$chair};
							next unless $judge;
</%perl>

							<span 
								class = "leftalign draggable nowrap
									<% $judge && $judge->parli ? "parli " : "" %>
								"
								id    = "<% $judge->id %>"
								title = "<% $judge->last.", ".$judge->first %>"
							>

%								if ($rounds_per) {

									<span class="fifth nospace">
										<% 
											${$use_ref}{$judge}{"left"} 
										%>/<% 
											($judge->obligation + $judge->hired)
										%>
									</span>
%								}

								<% $judge && $judge->parli ? "P " : "" %>
								<% $judge && $judge->tab_rating ? $judge->tab_rating  : "" %>

								<% $judge ? $judge->last.", ".$judge->first : "" %>

							</span>
%						}

					</td>

					<td class="ui-droppable droppable smallerdrop" id="<% $id %>">

<%perl>

	   					foreach my $judge_id (@judges) { 

							my $judge = $judge_by_id{$judge_id};
							next unless $judge;
							next if $used_judge{$judge}++;

</%perl>
							<span 
								class = "leftalign draggable nowrap
									<% $judge && $judge->parli ? "parli " : "" %>
								"
								id    = "<% $judge->id %>"
								title = "<% $judge->last.", ".$judge->first %>"
							>

%								if ($rounds_per) {
									<span class="fifth nospace">
										<% 
											${$use_ref}{$judge}{"left"} 
										%>/<% 
											$judge->obligation + $judge->hired
										%>
									</span>
%								}

								<% $judge && $judge->parli ? "P " : "" %>
								<% $judge && $judge->tab_rating ? $judge->tab_rating  : "" %>
								<% $judge ? $judge->last.", ".$judge->first : "" %>

							</span>

%						}

					</td>

%					if ($prefs) { 
					<td>

%						foreach my $entry (@entries) { 

%							foreach my $judge (keys %{$judge_ratings{$entry}}) { 

								<span 
									class="<% $judge %> smallish inline padless marno" 
									style="display: none;"
								> <% $judge_ratings{$entry}{$judge} %> </span>

%							}

%						}

					</td>
%					}

				</tr>

%			}

			</tbody>

		</table>

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>Round</h4>

			<a class="blue full" 
				href="/panel/schemat/show.mhtml?round_id=<% $round_id %>"
			>
				Return to <% $round->realname %>
			</a>

			<h4>Unused Judges</h4>

			<div class="centeralign bordergrey full droppable nospace" id="out">

<%perl>
				if ($rounds_per) { 
					@all_judges = 
						sort { ${$use_ref}{$b}{"left"} <=> ${$use_ref}{$a}{"left"} } 
						@all_judges;
				}

				foreach my $judge (@all_judges) { 

					next if $used_judge{$judge->id};

</%perl>
					<span 
						class = "leftalign draggable nowrap
							<% $judge && $judge->parli ? "parli " : "" %>
						"
						id    = "<% $judge->id %>"
						title = "<% $judge->last.", ".$judge->first %>"
					>

%						if ($rounds_per) {
							<span class="quarter nospace">
								<% 
									${$use_ref}{$judge}{"left"} 
								%>/<% 
									${$use_ref}{$judge}{"judged_already"} 
								%>/<%
									${$use_ref}{$judge}{"oblig"}
								%>
							</span>
							<span class="threequarter nospace marleft">
%						}

							<% $judge->tab_rating ? $judge->tab_rating  : "" %>
							<% $judge->parli ? "P " : "" %>
							<% $judge->last.", ".$judge->first %>

%						if ($rounds_per) {
							</span>
%						}

					</span>
%				}
		
			</div>

			<br />

%			my $warn = "Danger! This will ERASE existing judge assignments and re do the entire round.  Proceed?";

% 			if ($event->type eq "speech" || $round->type eq "congress") { 
				<a 
					class="yellow martop full"  
					href="/panel/round/judges.mhtml?round_id=<% $round->id %>"
					<& "/funclib/confirm.mas", warn => $warn &>  
				>
%			} else { 

				<a 
					class="yellow martop full"  
					href="/panel/round/debate_judge_assign.mhtml?round_id=<% $round->id %>"
					<& "/funclib/confirm.mas", warn => $warn &>  
				>
%           }   
				Redo Auto-paired judges
        	</a>

		</div>

	</div>

