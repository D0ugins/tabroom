<%args>
	$person
	$tourn
	$entry_id     => undef
	$panel_marker => undef
</%args>
<%init>

	$m->clear_buffer;
	$r->content_type('application/json');

	my $origin_entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my ($panel_id, $side) = split(/_/, $panel_marker) if $panel_marker;

	my $target_panel = Tab::Panel->retrieve($panel_id) if $panel_id;
	my $round = Tab::Round->retrieve($ARGS{'round_id'});

	Tab::Panel->set_sql( origin => "
		select panel.*
			from panel, ballot
			where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = ?
	");

	if ($panel_id eq "notAssigned") {


		Tab::Panel->set_sql( origin => "
			select panel.*
				from panel, ballot
				where panel.round = ?
				and panel.id = ballot.panel
				and ballot.entry = ?
		");

		my $origin_panel = Tab::Panel->search_origin($round->id, $origin_entry->id)->first;

		my $tb;

		if ($origin_panel) {
			$tb = $origin_panel->ballots( entry => $origin_entry )->first;
			$tb->delete();
		}

		my $description = $origin_entry->code." was removed from ".$round->realname;

		$m->print('{
			"error"   : false,
			"message" : "'.$description.'"
		}');

		$m->abort;
	}

	unless ($target_panel && $origin_entry) {

		$m->print('{
			"error": true,
			"message": "No debate for '.$panel_id.' or entry for '.$entry_id.' found.  Please refresh this page and start again"}
		');
		$m->abort;
	}

	unless ($side) {

		$m->print('{
			"error": true,
			"message": "No debate side sent: '.$side.'"}
		');
		$m->abort;
	}

	Tab::Entry->set_sql( target => "
		select entry.*
			from entry, ballot
			where ballot.panel = ?
			and ballot.side = ?
			and ballot.entry = entry.id
	");

	my $origin_panel = Tab::Panel->search_origin($target_panel->round->id, $origin_entry->id)->first;
	my $target_entry = Tab::Entry->search_target($target_panel->id, $side)->first;

	if ($origin_entry == $target_entry) {
		$m->print('{
			"error": true,
			"message": "No move made"}
		');
		$m->abort();
	}

	if ($origin_panel == $target_panel) {

		my $tb = $origin_panel->ballots( entry => $origin_entry )->first;
		my $target_side = $tb->side;

		my $description = $origin_entry->code." swapped sides";

		if ($target_entry) {
			$description .= " with ".$target_entry->code();
		}

		$m->comp("/funclib/swap_sides.mas", panel => $origin_panel);

		$m->print('{
			"error"        : false,
			"message"      : "'.$description.'",
			"origin_panel" : "'.$origin_panel.'",
			"origin_side"  : "'.$target_side.'",
			"target_entry" : "'.$target_entry.'"
		}');

		$m->abort();
	}

	my $origin_side;

	Tab::Score->set_sql( wipe_scores => "
		delete score.*
		from score, ballot
		where score.ballot = ballot.id
		and ballot.entry = ?
		and ballot.panel = ?
	");

	Tab::Ballot->set_sql( swap => "
		update ballot set entry = ?
			where panel = ?
			and entry = ?
	");

	my $description;

	if ($origin_panel && $origin_entry && $target_entry) {
		Tab::Score->sql_wipe_scores->execute($origin_entry, $origin_panel);
		Tab::Ballot->sql_swap->execute($target_entry, $origin_panel, $origin_entry);
		$description .= "Moved ".$target_entry->code." to ".$origin_panel->letter;

		my $ob = $origin_panel->ballots( entry => $target_entry )->first;
		$origin_side = $ob->side;

	} elsif ($target_entry) {
		$origin_panel = "notAssigned";
	}

	if ($target_panel && $target_entry && $origin_entry) {
		Tab::Score->sql_wipe_scores->execute($target_entry, $target_panel);
		Tab::Ballot->sql_swap->execute($origin_entry, $target_panel, $target_entry);
		$description .= ".  Moved ".$origin_entry->code." to ".$target_panel->letter;
	}

	if ($target_panel && $origin_entry && (not defined $target_entry) && (not defined $origin_panel)) {

		Tab::debuglog("Here I am!");

		my @judges = $m->comp("/funclib/panel_judges.mas", panel => $target_panel);

		if (@judges) {

			foreach my $judge (@judges) {
				Tab::Ballot->create({
					panel => $target_panel->id,
					side  => $side,
					judge => $judge->id,
					entry => $origin_entry
				});
			}

		} else {

			Tab::Ballot->create({
				panel => $target_panel->id,
				side  => $side,
				entry => $origin_entry
			});
		}

		$description .= "Moved ".$origin_entry->code." into debate ".$target_panel->letter;
		$origin_side = "2";
		$origin_panel = "notAssigned";
	}

	my $now = DateTime->now();

	my $changeline = Tab::ChangeLog->create({
		type        => 'tabbing',
		event       => $round->event->id,
		entry       => $origin_entry->id,
		person      => $person->id,
		tourn       => $tourn->id,
		created     => $now,
		description => $description
	});

    $m->print('{
		"error"        : false,
		"message"      : "'.$description.'",
		"origin_panel" : "'.$origin_panel.'",
		"origin_side"  : "'.$origin_side.'",
		"target_entry" : "'.$target_entry.'"
	}');

	$m->abort();

</%init>
