<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$event_id   => undef
	$round_id   => undef
	$all        => undef
	$dostring   => undef
	$doroom     => undef
	$certain    => undef
	$debug      => undef
	$whoami     => undef
	$limit_to   => undef
	$seed_basis => undef
	$clone      => undef
</%args>
<%init>

	use POSIX;

	my ($eventref, $catref) = $m->comp(
		"/funclib/allowed_events.mas", 
		tourn => $tourn,
		perms => $perms
	);

	my @events = @{$eventref};
	my @categories = @{$catref};

	my @rounds;

	my %event_rounds = ();
	my %num_panels_by_event = ();
	my %num_panels_by_round = ();
	
	my %do_it = map {$_ => 1} split(/\,/, $dostring) 
		if $dostring;

	my %do_room = map {$_ => 1} split(/\,/, $doroom) 
		if $doroom;

	my $round;

	if ($tourn_settings->{"nsda_district"}) { 

		my $timeslot = Tab::Timeslot->retrieve($ARGS{"timeslot_id"});

		unless ($timeslot && $timeslot->tourn == $tourn) { 
			$m->print('<div class="main"><h4>You did not select a time slot</h4>');
			$m->print('<p>Hit "back" on the browser, and try again.</p></div>');
			$m->abort 
		}

		my $round_type = $ARGS{"round_type"};

		my $event;
		my $round;

		if ($ARGS{"new_round"}) { 
			$event = Tab::Event->retrieve($ARGS{"event_id"});
		} else { 
			$round = Tab::Round->retrieve($round_id);
			$event = $round->event;
		}

		my $label;
		my $tiebreak_set;

		if ($event->type eq "debate"
			|| $event->type eq "big_questions"
		) { 

			if ($round_type eq "final") { 

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "Debate Final",
					tourn => $tourn->id
				)->first;

			} elsif ($round_type eq "elim") { 

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "Debate Elim",
					tourn => $tourn->id
				)->first;

			} else { 

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "Debate",
					tourn => $tourn->id
				)->first;

			}

		} elsif ($event->type eq "speech") { 

			if ($round_type eq "final") { 

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "IE Final",
					tourn => $tourn->id
				)->first;

				$label = "Final";

			} elsif ($round_type eq "semi") { 

				$round_type = "elim";
				$label = "Semi";

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "IE Semi",
					tourn => $tourn->id
				)->first;

			} elsif ($round_type eq "last_prelim") { 

				$round_type = "prelim";

				$tiebreak_set = Tab::TiebreakSet->search(
					name => "IE Break To Elims",
					tourn => $tourn->id
				)->first;

			} else {

				$tiebreak_set = Tab::TiebreakSet->search(
					name => "IE Prelim",
					tourn => $tourn->id
				)->first;

			}

		} elsif ("congress") { 

			if ($round_type eq "final") { 

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "Congress Final",
					tourn => $tourn->id
				)->first;

				$label = "Final";

			} elsif ($round_type eq "elim") { 

				$round_type = "elim";
				$label = "Semi";

				$tiebreak_set = Tab::TiebreakSet->search(
					name  => "Congress Elim",
					tourn => $tourn->id
				)->first;


			} elsif ($round_type eq "prelim") { 

				$round_type = "prelim";

				$tiebreak_set = Tab::TiebreakSet->search(
					name => "Congress Prelim",
					tourn => $tourn->id
				)->first;

			}
		}

		if ($ARGS{"new_round"}) { 

			my $event = Tab::Event->retrieve($ARGS{"event_id"});

			$m->abort unless $event;
			$m->abort unless $event->tourn == $tourn;

			my $previous_round = Tab::Round->search( 
				event => $event->id, 
				name => ($ARGS{'new_round'} - 1)
			)->first;

			my $site_id = $previous_round->site->id 
				if $previous_round 
				&& $previous_round->site;

			unless ($site_id) { 

				if ($tourn_settings->{"nsda_district"}) { 

					my $weekend_id = $event->setting('weekend');

					my $weekend = Tab::Weekend->retrieve($weekend_id) 
						if $weekend_id;

					$site_id = $weekend->site->id 
						if $weekend 
						&& $weekend->site;
				}
			}

			unless ($site_id) { 
				my @sites = $tourn->sites;
				$site_id = $sites[0]->id if @sites;
			}

			$round = Tab::Round->create({
				type         => $round_type,
				name         => $ARGS{"new_round"},
				label        => $label,
				flighted     => 1,
				start_time   => $timeslot->start,
				event        => $event->id,
				timeslot     => $timeslot->id,
				site         => $site_id,
				tiebreak_set => $tiebreak_set->id
			});

		} else { 

			$round->type($round_type);
			$round->label($label);
			$round->timeslot($timeslot->id);
			$round->start_time($timeslot->start);
			$round->tiebreak_set($tiebreak_set->id) if $tiebreak_set;
			$round->update;

		}

		my $num_judges  = $ARGS{"num_judges"};
		my $num_flights = $ARGS{"num_flights"};
		$num_judges     = 1 unless $num_judges;
		$num_flights    = 1 unless $num_flights;

		$round->setting('num_judges', $num_judges);

		$num_flights = 1 unless $num_flights > 0;

		$round->flighted($num_flights);

		$round->setting("nsda_confirmed", 0);

		$round_id = $round->id;

	}

	my $undo_doom;

	if ($all) { 

        my $description = "Sectioned/paired all events";

        Tab::ChangeLog->create({ 
            type        => 'tabbing',
            tourn       => $tourn->id,
            person      => $person->id,
            description => $description
        });

		if ($dostring) { 
		
			foreach my $event (@events) { 

				foreach my $eround ($event->rounds) { 

					if ($tourn_settings->{"nsda_district"}) { 

					} elsif ($event->type eq "congress") { 

						next if $eround->type ne "all";

					} else {

						next if $eround->type eq "elim";
						next if $eround->type eq "final";
						next if $eround->type eq "runoff";
					}

					push @rounds, $eround if $do_it{$eround->id};

					push @{$event_rounds{$event->id}}, $eround 
						if $do_it{$eround->id};

					push @events, $event if $do_it{$eround->id};
				}

			}

		} elsif ($round_id) { 
			
			my $round = Tab::Round->retrieve($round_id);
			my $event = $round->event;

			push (@events, $event);

			my $round_type = $round->type if $round;
			$round_type = "prelim" unless $round_type;
			
			$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$round->id};

			foreach my $eround ($event->rounds) { 

				next if $eround->type ne $round_type;

				push (@rounds, $eround);

				push @{$event_rounds{$event->id}}, $eround;

				$m->comp("/funclib/round_dump.mas", 
					person => $person,
					round  => $eround
				) if $ARGS{"wipe"};

			}

			$undo_doom++;

		} else { 

			my @clear;

			foreach my $event (@events) { 

				next unless $ARGS{"do_".$event->id};

				push (@clear, $event);

				foreach my $eround ($event->rounds) { 

					next if $eround->type eq "elim";
					next if $eround->type eq "final";
					next if $eround->type eq "runoff";

					push (@rounds, $eround);
					push @{$event_rounds{$event->id}}, $eround;
				}

				$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$event->id};

				$num_panels_by_event{$event->id} = $ARGS{"force_num_panels_".$event->id} 
					if $ARGS{"force_num_panels_".$event->id};

			}

			@events = @clear;

		}

	} elsif ($round || $round_id) { 

		$round = Tab::Round->retrieve($round_id) 
			unless $round;

		if ($round) { 

			my $description = "Sectioned round ".$round->realname." of ".$round->event->abbr;

			if ($ARGS{"num_panels_".$round->id}) { 
			
				$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};

			} elsif ($ARGS{"num_panels"}) { 

				$num_panels_by_round{$round->id} = $ARGS{"num_panels"};

			} elsif ($round->panels) { 

				$num_panels_by_round{$round->id} = scalar $round->panels;

			}

			push (@rounds, $round);
			push @{$event_rounds{$round->event->id}}, $round;
			push (@events, $round->event);

			Tab::ChangeLog->create({ 
				type        => 'tabbing',
				event       => $round->event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			});

		}

	} else { 

		my $event = Tab::Event->retrieve($event_id);
		$m->abort unless $event;

        my $description = "Sectioned all of ".$event->abbr;

        Tab::ChangeLog->create({ 
            type        => 'tabbing',
            event       => $event->id,
            tourn       => $tourn->id,
            person      => $person->id,
            description => $description
        });

		push (@events, $event);

		foreach my $round ($event->rounds) { 

			next if $round->type eq "elim";
			next if $round->type eq "final";
			next if $round->type eq "runoff";

			next unless $ARGS{"do_".$round->id};

			push (@rounds, $round);
			push @{$event_rounds{$event->id}}, $round;

			$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};

			$num_panels_by_round{$round->id} = $ARGS{"force_num_panels_".$round->id} 
				if $ARGS{"force_num_panels_".$round->id};

		}

	}

	my %seen = (); 
	@events = grep { ! $seen{$_->id} ++ } @events;

	my %rseen = ();
	@rounds = grep { ! $rseen{$_->id} ++ } @rounds;

	my $doom_and_destruction;
	my $even_more_doom_and_destruction;
	
	$undo_doom++ if $tourn_settings->{"nsda_nats"};
	undef $undo_doom if $ARGS{"redo"};

	# This check has already been done for the NSDA	
	unless ($undo_doom) { 

		foreach my $round (@rounds) { 

			$doom_and_destruction++ 
				if $m->comp(
					"/funclib/round_judges.mas", 
					round => $round
				);

			$even_more_doom_and_destruction++ 
				if $m->comp(
					"/funclib/round_scores.mas", 
					round => $round
				);

		}
	}


	if ( $tourn_settings->{"nsda_district"} 
		|| $whoami eq "california.mhtml"
		|| (not defined $doom_and_destruction)
	) { 

		foreach my $round (@rounds) { 
	
			my @panels = $round->panels;

			undef $doom_and_destruction if $certain eq "I am certain";

			if ($doom_and_destruction) { 
				my $err = "You did not type 'I am certain' to confirm the deletion of existing sections";
				$m->redirect("/panel/round/nsda/".$whoami."?round_id=".$round_id."&err=".$err."&default=create");

			} else { 

			}

			if ($ARGS{"jpool_id"}) {

				my $jpool = Tab::JPool->retrieve($ARGS{"jpool_id"});

				if ($jpool) { 

					unless (
						Tab::JPoolRound->search( 
							round => $round->id, 
							jpool => $jpool->id
						) 
					) { 

						Tab::JPoolRound->create({
							round => $round->id, 
							jpool => $jpool->id
						});
					}
				}
			}

			if ($ARGS{"rpool_id"}) {

				my $rpool = Tab::RPool->retrieve($ARGS{"rpool_id"});

				if ($rpool) { 

					unless (Tab::RPoolRound->search( 
							round => $round->id, 
							rpool => $ARGS{"rpool_id"}
						)
					) { 

						Tab::RPoolRound->create({
							round => $round->id, 
							rpool => $rpool->id
						});
					}
				}
			}
		}
	}

	foreach my $event (@events) { 
		$m->comp("/funclib/autopublish_round.mas", event => $event);
	}

</%init>

%	if ($doom_and_destruction && $certain ne "I am really certain") {

		<div 
			class = "padno blankfull centeralign"
			style = "text-align: center !important; min-height: 650px; padding-top: 20px;"
		>
		
			<div style="margin: auto; width: 700px; padding: none;">

				<&  "/funclib/warning.mas", person => $person &>

				<p class="strong centeralign">
					This will delete and re-assign rounds:  
				</p>

%				foreach my $round (@rounds) { 
					<div class="full redtext centeralign"> 
						<h4 class="marno padless"> 
							<% $round->event->name %> 
							<% $round->realname %>
						</h4> 
					</div>
%				}

				<p class="strong centeralign">
					You have assigned judges to those rounds!
				</p>

%				if ($even_more_doom_and_destruction) { 
					<p class="warning centeralign" style="font-size: 180%">
						AND YOU HAVE ENTERED BALLOTS!  YOU FOOL!
					</p>
%				}

				<p class="centeralign">
					All right.  Level with me here.  If you want to delete them
					and re-assign them, I guess I'll let you.  I get it, things
					happen at a tournament, you want to start from scratch. 
				</p>

				<p class="centeralign">
					But you're not going to get these back.  There's no undo
					here, there's no retreat; you're committing yourself.  I
					don't want you to come crying to me as if it's my fault,
					because it's not going to be.  
				</p>

				<p class="centeralign">
					So if you do mean this, you have to type "I am really
					certain" in the box below.  Not just "I am certain" like
					usual.  I want to check to be sure you're actually paying
					attention and not just going through the motions before,
					y'know, blowing away entire rounds of your tournament.
				</p>

%       		if ($certain) { 
					<p class="warning centeralign">
						You did not type "I am really certain", exactly like
						that.  Try again
					</p>
%       		}

<%perl>

				my $dostring;

				foreach my $round (@rounds) {   
					$dostring .= "," if $dostring;
					$dostring .= $round->id;
				}

				my $doroom;

				foreach my $event (@events) {   
					if ($ARGS{"room_".$event->id}) {
						$doroom .= "," if $doroom;
						$doroom .= $event->id;
					}
				}

</%perl>
				<form 
					action="panel_master.mhtml" 
					method="post"
				>

				<input 
					type  = "hidden"
					value = "1"
					name  = "all"
				>

				<input 
					type="hidden" 
					value="<% $dostring %>" 
					name="dostring"
				>

				<input 
					type  = "hidden"
					value = "<% $round_id %>"
					name  = "round_id"
				>

				<p class="centeralign">
					<input 
						type           = "text"
						name           = "certain"
						size           = "20"
						autocomplete   = "off"
						autocorrect    = "off"
						autocapitalize = "off"
						spellcheck     = "false"
						class          = "martop notfirst"
					>
				</p>

		        <p class="centeralign">
					<input  
						type  = "submit"
						value = "Re-Assign Rounds"
					>
					</form>
				</p> 

				<div class="martopmore marbottom full">
				</div>
				
			</div>

		</div>

%	} else { 
	
		<div class="main">

			<h2>Creating rounds for <% scalar @events %> events:</h2>

<%perl>

			foreach my $event (@events) { 


				my $num_panels = $num_panels_by_event{$event->id};

				if ($event->type eq "speech") { 

					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") 
						if @event_rounds;

					$m->print("<h6>".scalar @event_rounds." rounds</h6>") 
						if @event_rounds;

					foreach my $eround (@event_rounds) { 

						next unless $eround->event->id == $event->id;

						unless ($tourn_settings->{"nsda_district"} ) { 
							next if $eround->type eq "elim";
							next if $eround->type eq "final";
							next if $eround->type eq "runoff";
						}

						$m->comp(
							"/funclib/round_dump.mas", 
							person => $person,
							round  => $eround
						);

						$num_panels = $num_panels_by_round{$eround->id} 
							if $num_panels_by_round{$eround->id};

						unless ($num_panels) { 

							my $defaultpanelsize = $event->setting("default_panel_size");
							$defaultpanelsize = 6 unless $defaultpanelsize;

							my $num_entries = scalar $event->entries( 
								active => 1
							);

							$num_panels = ceil($num_entries / $defaultpanelsize);
						}

						$m->print("Paneling ".$eround->realname." into ".$num_panels." sections") 
							unless $round_id;

						if (
							$tourn_settings->{"nsda_district"}
							&& $tourn_settings->{"nsda_speech_method"} ne "doubledown"
							&& $eround->name > 1
						) { 

							$m->comp("/panel/round/nsda/snake_speech.mas", 
								round      => $eround,
								num_panels => $num_panels,
								limit_to   => $limit_to,
								seed_basis => $ARGS{"seed_basis"}
							) if $eround && $num_panels;

						} elsif ($eround->type eq "snaked_prelim") {

							if ($whoami eq "california.mhtml")  {

								$m->comp("/panel/round/snake_speech.mas", 
									round      => $round,
									num_panels => $num_panels,
									limit_to   => $limit_to,
								) if $eround && $num_panels;

							} else { 

								$m->comp("/panel/round/nsda/california.mhtml",
									round          => $round,
									tourn_settings => $tourn_settings,
									tourn          => $tourn,
									person         => $person,
									num_panels     => $num_panels
								) if $eround && $num_panels;

							}

						}  else { 

							$m->comp("pair_speech.mas", 
								round      => $eround,
								num_panels => $num_panels,
								nsda       => $tourn_settings->{"nsda_district"},
								limit_to   => $ARGS{"limit_to"},
								seed_basis => $ARGS{"seed_basis"}
							) if $eround && $num_panels;

						}

						if ($do_room{$event->id} || $ARGS{"room_".$event->id}) {
						
							$m->print("...and assigning rooms") unless $round_id;

							my @panels = sort {$a->letter cmp $b->letter} $eround->panels;

							foreach my $panel (@panels) { 

								my @rooms = $m->comp("/funclib/clean_rooms.mas", panel => $panel);

								my $room = shift @rooms;

								$panel->room($room->id) if $room;

								$panel->update;
							}

						}
						$m->print(" <br />") unless $round_id;
					}

					$m->print("....Done.</span>") unless $round_id;

				} elsif ($event->type eq "congress") { 
					
					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					@event_rounds = $event->rounds(
						type => "prelim"
					) unless @event_rounds;

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") 
						if @event_rounds;

					$m->flush_buffer() unless $round_id;

					my $local_wipe;

					foreach my $round (@event_rounds) { 
						$local_wipe++ if $ARGS{"wipe_".$round->id};
					}

					foreach my $round (@event_rounds) { 
							
						$m->comp("/funclib/round_dump.mas", 
							person => $person,
							round  => $round
						) if $local_wipe;

						$num_panels = $num_panels_by_round{$round->id} 
							if $num_panels_by_round{$round->id};

						if ($tourn_settings->{"nsda_district"}) { 

							$num_panels = 1 if $round->type eq "final";
							$num_panels = 1 if $round->type eq "runoff";
							$num_panels = 2 if $round->type eq "elim";

							my $previous_round = Tab::Round->search( 
								event => $event->id, 
								name => $round->name - 1
							)->first;

							my $previous_panels = $previous_round->panels if $previous_round;
							$limit_to = $ARGS{"advance"} * $previous_panels if $previous_round;

						}

						$m->print("Assigning $limit_to ".$round->realname." into ".$num_panels." chambers") 
							unless $round_id;

						if ( 
							(not defined $clone)
							&& ( $round->type eq "elim" 
								|| $round->type eq "final" 
								|| $round->type eq "runoff"
							)
						) { 
						
							$m->comp("/panel/round/nsda/snake_congress.mas", 
								round          => $round,
								tourn_settings => $tourn_settings,
								num_panels     => $num_panels,
								limit_to       => $limit_to
							) if $round && $num_panels;

						} else { 

							$m->comp("pair_congress.mas", 
								round       => $round,
								num_panels  => $num_panels,
								clone_elims => $clone
							);
						}

						if ($ARGS{"parliamentarians"}) { 

							$m->print("Placing parliamentarians into ".$round->realname)
								unless $round_id;

							$m->flush_buffer() unless $round_id;

							$m->comp("judges.mhtml",
								round_id       => $round->id,
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								person         => $person,
								parlis         => 1,
								return         => 1
							);	
						}

						if ($ARGS{"scorers"} && $ARGS{"num_judges"}) { 

							$round->setting("num_judges", $ARGS{"num_judges"});

							$m->print("Placing scorers into ".$round->realname)
								unless $round_id;

							$m->flush_buffer() unless $round_id;

							$m->comp("judges.mhtml",
								round_id       => $round->id,
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								person         => $person,
								parlis         => 2,
								return         => 1
							);	

						}

						$m->print(" <br />");
					}

					$m->print("....Done.</span>");

				} elsif ($event->type eq "wudc") { 

					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") 
						if @event_rounds;

					foreach my $round (@event_rounds) { 

						$m->print("Assigning ".$round->realname." into debates") 
							unless $round_id;
					
						$m->comp("pair_wudc.mas", round => $round);

						$m->print(" <br />");
					}

					$m->print("....Done.</span>");

				} else { 

					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") 
						if @event_rounds;

					unless (@event_rounds) { 
						@event_rounds = $event->rounds(type => "prelim");
					}

					my $done;

					foreach my $round (@event_rounds) { 


						next if $done;

						$num_panels = $num_panels_by_round{$round->id} 
							if $num_panels_by_round{$round->id};

						$m->comp("/funclib/round_dump.mas", 
							person => $person,
							round  => $round
						);

						$m->print("Assigning ".$round->realname." into debates") unless $round_id;
						
						if ($tourn_settings->{"nsda_district"} && $round->name < 3) { 

							$m->comp("pair_preset.mas", 
								round  => $round,
								person => $person,
								debug  => $debug
							);

						} elsif (
							$tourn_settings->{"nsda_district"} 
							|| ($tourn_settings->{"nsda_nats"} 
								&& ($round->type eq "elim"
									|| $round->type eq "final"
									|| $round->type eq "runoff")
								)
						) { 


							$m->comp("/panel/round/nsda/auto_debate.mas", 
								tourn          => $tourn,
								tourn_settings => $tourn_settings,
								round          => $round,
								person         => $person,
								limit_to       => $ARGS{"limit_to"},
								debug          => $debug,
							);

						} elsif ($round->type eq "snaked_prelim") {

							if ($whoami eq "california.mhtml")  {

								$m->comp("/panel/round/snake_speech.mas", 
									round      => $round,
									num_panels => $num_panels,
									limit_to   => $limit_to
								) if $round && $num_panels;

							} else { 

								$m->comp("/panel/round/nsda/california.mhtml",
									round      => $round,
									num_panels => $num_panels
								) if $round && $num_panels;

							}

						} elsif ($round->type eq "prelim") {

							$m->comp("pair_preset.mas", 
								round  => $round,
								person => $person,
								debug  => $debug
							);


						} else { 

							$m->comp("pair_debate.mas", 
								round  => $round,
								person => $person,
								debug  => $debug
							);

						}

						$m->print(" <br />");
					}
					$m->print("....Done.</span>");
				}
			}

			if ($round_id) { 

				my $round = Tab::Round->retrieve($round_id);

				if ($tourn_settings->{"nsda_district"}
					|| (
						$tourn_settings->{"nsda_nats"} 
						&& $round->type eq "elim"
						&& (not defined $clone)
					)
				) { 
					my $msg = $round->realname." has been sectioned";
					$m->redirect("/panel/round/nsda/".$whoami."?round_id=".$round_id."&msg=".$msg);
				}

				$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&disp=1") 
					unless $debug;

			}

</%perl>

		</div>

		<div class="menu">

			<div class="sidenote">

				<h4>Entry assignment done</h4>

					<a 
						class  = "yellow full"
						href   = "/panel/report/disasters.mhtml"
						target = "_blank"
					>
						Check for Disasters
					</a>

					<br />

					<a 
						class = "green full"
						href  = "/panel/judge/index.mhtml">
						Panel Judges
					</a>

			</div>

			<div class="sidenote">

				<h4>View pairings/schematics:</h4>

%				foreach my $round (@rounds) { 
					<a 
						class="blue full"
						href="/panel/schemat/show.mhtml?round_id=<% $round->id %>"
					>
						<% $round->realname %> of <% $round->event->abbr %>
					</a>
%				}

			</div>

		<& "menu.mas",
			tourn          => $tourn,
			tourn_settings => $tourn_settings,
			whoami         => "mass",
			nodiv          => 1,
			perms          => $perms &>

		</div>

%	}
