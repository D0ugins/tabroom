<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$event_id   => undef
	$round_id   => undef
	$all        => undef
	$dostring   => undef
	$doroom     => undef
	$certain    => undef
	$debug      => undef
	$whoami     => undef
	$limit_to   => undef
	$seed_basis => undef
</%args>
<%init>

	use POSIX;

	my @events;
	my @rounds;
	my %event_rounds = ();

	my %num_panels_by_event = ();
	my %num_panels_by_round = ();
	
	my %do_it = map {$_ => 1} split(/\,/, $dostring) if $dostring;
	my %do_room = map {$_ => 1} split(/\,/, $doroom) if $doroom;

	my $round;

	if ($tourn_settings->{"nsda_district"}) { 

		if ($ARGS{"new_round"}) { 

			my $event = Tab::Event->retrieve($ARGS{"event_id"});
			$m->abort unless $event;
			$m->abort unless $event->tourn == $tourn;

			my $timeslot = Tab::Timeslot->retrieve($ARGS{"timeslot_id"});
			$m->abort unless $timeslot;
			$m->abort unless $timeslot->tourn == $tourn;

			my $label = "Final" if $ARGS{"round_type"} eq "final";

			my $previous_round = Tab::Round->search( 
				event => $event->id, 
				name => ($ARGS{'new_round'} - 1)
			)->first;

			my $site_id = $previous_round->site->id 
				if $previous_round 
				&& $previous_round->site;

			unless ($site_id) { 
				my @sites = $tourn->sites;
				$site_id = $sites[0]->id if @sites;
			}

			$round = Tab::Round->create({
				type       => $ARGS{"round_type"},
				name       => $ARGS{"new_round"},
				label      => $label,
				flighted   => 1,
				start_time => $timeslot->start,
				event      => $event->id,
				timeslot   => $timeslot->id,
				site       => $site_id
			});

		} else { 

			$round = Tab::Round->retrieve($round_id);
			$round->type($ARGS{"round_type"});
			$round->update;

		}

		my $num_judges = $ARGS{"num_judges"};
		$num_judges = 1 unless $num_judges;
		$round->setting('num_judges', $num_judges);

		$round_id = $round->id;

	}

	if ($all) { 

        my $description = "Repaneled all events";

        Tab::ChangeLog->create({ 
            type        => 'tabbing',
            tourn       => $tourn->id,
            person      => $person->id,
            description => $description
        });

		if ($dostring) { 
		
			foreach my $event ($tourn->events) { 

				foreach my $eround ($event->rounds) { 

					unless ($tourn_settings->{"nsda_district"}) { 
						next if $eround->type eq "elim";
						next if $eround->type eq "final";
					}

					push @rounds, $eround if $do_it{$eround->id};

					push @{$event_rounds{$event->id}}, $eround 
						if $do_it{$eround->id};

					push @events, $event if $do_it{$eround->id};
				}

			}


		} else { 

			foreach my $event ($tourn->events) { 

				next unless $ARGS{"do_".$event->id};

				push (@events, $event);

				foreach my $eround ($event->rounds) { 
					next if $eround->type eq "elim";
					next if $eround->type eq "final";
					push (@rounds, $eround);
					push @{$event_rounds{$event->id}}, $eround;
				}

				$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$event->id};

				$num_panels_by_event{$event->id} = $ARGS{"force_num_panels_".$event->id} 
					if $ARGS{"force_num_panels_".$event->id};

			}

		}

	} elsif ($round || $round_id) { 

		$round = Tab::Round->retrieve($round_id) unless $round;

		if ($round) { 

			my $description = "Repaneled round ".$round->realname." of ".$round->event->abbr;

			if ($ARGS{"num_panels"}) { 
			
				$num_panels_by_round{$round->id} = $ARGS{"num_panels"};

			} elsif ($round->panels) { 

				$num_panels_by_round{$round->id} = scalar $round->panels;

			}

			push (@rounds, $round);
			push @{$event_rounds{$round->event->id}}, $round;
			push (@events, $round->event);

			Tab::ChangeLog->create({ 
				type        => 'tabbing',
				event       => $round->event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			});

		}

	} else { 

		my $event = Tab::Event->retrieve($event_id);
		$m->abort unless $event;

        my $description = "Repaneled all of ".$event->abbr;

        Tab::ChangeLog->create({ 
            type        => 'tabbing',
            event       => $event->id,
            tourn       => $tourn->id,
            person      => $person->id,
            description => $description
        });

		push (@events, $event);

		foreach my $round ($event->rounds) { 

			next if $round->type eq "elim";
			next if $round->type eq "final";

			next unless $ARGS{"do_".$round->id};

			push (@rounds, $round);
			push @{$event_rounds{$event->id}}, $round;

			$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};

			$num_panels_by_round{$round->id} = $ARGS{"force_num_panels_".$round->id} 
				if $ARGS{"force_num_panels_".$round->id};

		}

	}

	my %seen = (); 
	@events = grep { ! $seen{$_->id} ++ } @events;

	my %rseen = ();
	@rounds = grep { ! $rseen{$_->id} ++ } @rounds;

	my $doom_and_destruction;
	my $even_more_doom_and_destruction;

	# This check has already been done for the NSDA

	foreach my $round (@rounds) { 

		$doom_and_destruction++ 
			if $m->comp("/funclib/round_judges.mas", 
				round => $round
			);

		$even_more_doom_and_destruction++ 
			if $m->comp(
				"/funclib/round_scores.mas", 
				round => $round
			);

	}

	if ($tourn_settings->{"nsda_district"}) { 

		foreach my $round (@rounds) { 

			my @panels = $round->panels;

			$doom_and_destruction++ if @panels;

			undef $doom_and_destruction if $certain eq "I am certain";

			if ($doom_and_destruction) { 

				my $err = "You did not type 'I am certain' to confirm the deletion of existing sections";

				$m->redirect("/panel/round/nsda/".$whoami."?round_id=".$round_id."&err=".$err."&default=create");

			}

			$round->type($ARGS{"round_type"});
			$round->timeslot($ARGS{"timeslot_id"});
			$round->update;

			$round->setting('num_judges', $ARGS{"num_judges"});

			if ($ARGS{"jpool_id"}) {

				my $jpool = Tab::JPool->retrieve($ARGS{"jpool_id"});

				if ($jpool) { 

					unless (Tab::JPoolRound->search( 
							round => $round->id, 
							jpool => $jpool->id
						) 
					) { 

						Tab::JPoolRound->create({
							round => $round->id, 
							jpool => $jpool->id
						});

					}

				}
			}

			if ($ARGS{"rpool_id"}) {

				my $rpool = Tab::RPool->retrieve($ARGS{"rpool_id"});

				if ($rpool) { 

					unless (Tab::RPoolRound->search( 
							round => $round->id, 
							rpool => $ARGS{"rpool_id"}
						)
					) { 

						Tab::RPoolRound->create({
							round => $round->id, 
							rpool => $rpool->id
						});
					}
				}
			}

		}
	}

</%init>

%	if ($doom_and_destruction && $certain ne "I am really certain") {

		<div 
			class = "padno blankfull centeralign"
			style = "text-align: center !important; min-height: 650px; padding-top: 20px;"
		>
		
			<div style="margin: auto; width: 700px; padding: none;">

				<&  "/funclib/warning.mas", person => $person &>

				<p class="strong centeralign">
					This will delete and re-assign rounds:  
				</p>

%				foreach my $round (@rounds) { 
					<div class="full redtext centeralign"> 
						<h4 class="marno padless"> 
							<% $round->event->name %> 
							<% $round->realname %>
						</h4> 
					</div>
%				}

				<p class="strong centeralign">
					You have assigned judges to those rounds!
				</p>

%				if ($even_more_doom_and_destruction) { 
					<p class="warning centeralign" style="font-size: 180%">
						AND YOU HAVE ENTERED BALLOTS!  YOU FOOL!
					</p>
%				}

				<p class="centeralign">
					All right.  Level with me here.  If you want to delete them
					and re-assign them, I guess I'll let you.  I get it, things
					happen at a tournament, you want to start from scratch. 
				</p>

				<p class="centeralign">
					But you're not going to get these back.  There's no undo
					here, there's no retreat; you're committing yourself.  I
					don't want you to come crying to me as if it's my fault,
					because it's not going to be.  
				</p>

				<p class="centeralign">
					So if you do mean this, you have to type "I am really
					certain" in the box below.  Not just "I am certain" like
					usual.  I want to check to be sure you're actually paying
					attention and not just going through the motions before,
					y'know, blowing away entire rounds of your tournament.
				</p>

%       		if ($certain) { 

					<p class="warning centeralign">
						You did not type "I am really certain", exactly like
						that.  Try again
					</p>
%       		}

<%perl>

				my $dostring;

				foreach my $round (@rounds) {   
					$dostring .= "," if $dostring;
					$dostring .= $round->id;
				}

				my $doroom;

				foreach my $event (@events) {   
					if ($ARGS{"room_".$event->id}) {
						$doroom .= "," if $doroom;
						$doroom .= $event->id;
					}
				}

</%perl>
				<form action="panel_master.mhtml" method="post">

				<input 
					type  = "hidden"
					value = "1"
					name  = "all"
				>

				<input 
					type="hidden" 
					value="<% $dostring %>" 
					name="dostring"
				>

				<input 
					type  = "hidden"
					value = "<% $round_id %>"
					name  = "round_id"
				>

				<p class="centeralign">
					<input 
						type           = "text"
						name           = "certain"
						size           = "20"
						autocomplete   = "off"
						autocorrect    = "off"
						autocapitalize = "off"
						spellcheck     = "false"
						class          = "martop notfirst"
					>
				</p>

		        <p class="centeralign">
					<input  type="submit" value="Re-Assign Rounds">
					</form>
				</p> 
				
			</div>

		</div>

%	} else { 
	
		<div class="main">

			<h2>Creating rounds for <% scalar @events %> events:</h2>

<%perl>

			my @categories;

			my $event_count;
			my $round_count;

			foreach my $event (@events) { 

				$event_count++;

				my $round_robin++ if $event->setting("round_robin");

				my $num_panels = $num_panels_by_event{$event->id};

				if ($event->type eq "speech") { 

					Tab::debuglog("One");

					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") 
						if @event_rounds;

					$m->print("<h6>".scalar @event_rounds." rounds</h6>") 
						if @event_rounds;

					Tab::debuglog("I have rounds! ".scalar @event_rounds);

					foreach my $eround (@event_rounds) { 
						

						next unless $eround->event->id == $event->id;

						unless ($tourn_settings->{"nsda_district"} ) { 
							next if $eround->type eq "elim";
							next if $eround->type eq "final";
						}


						$m->comp("/funclib/round_dump.mas", round => $eround);

						$round_count++;


						$num_panels = $num_panels_by_round{$eround->id} 
							if $num_panels_by_round{$eround->id};

						unless ($num_panels) { 

							my $defaultpanelsize = $event->setting("default_panel_size");
							$defaultpanelsize = 6 unless $defaultpanelsize;

							my $num_entries = scalar $event->entries( 
								active => 1
							);

							$num_panels = ceil($num_entries / $defaultpanelsize);
						}

						$m->print("Paneling ".$eround->realname." into ".$num_panels." sections") 
							unless $round_id;

						$m->comp("pair_speech.mas", 
							round      => $eround,
							num_panels => $num_panels,
							nsda       => $tourn_settings->{"nsda_district"},
							limit_to   => $ARGS{"limit_to"},
							seed_basis => $ARGS{"seed_basis"}
						) if $eround && $num_panels;

						if ($do_room{$event->id} || $ARGS{"room_".$event->id}) {
						
							$m->print("...and assigning rooms") unless $round_id;

							my @panels = sort {$a->letter cmp $b->letter} $eround->panels;

							foreach my $panel (@panels) { 
								my @rooms = $m->comp("/funclib/clean_rooms.mas", panel => $panel);
								my $room = shift @rooms;
								$panel->room($room->id) if $room;
								$panel->update;
							}

						}

						$m->print(" <br />") unless $round_id;

					}

					$m->print("....Done.</span>") unless $round_id;

				} elsif ($event->type eq "congress") { 
					
					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					@event_rounds = $event->rounds(
						type => "prelim"
					) unless @event_rounds;

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") if @event_rounds;

					my $wipe;

					foreach my $round (@event_rounds) { 
						$wipe++ if $ARGS{"wipe_".$round->id};
					}

					my $already_wiped;

					foreach my $round (@event_rounds) { 

						undef $wipe if $already_wiped;	

						$num_panels = $num_panels_by_round{$round->id} 
							if $num_panels_by_round{$round->id};
						
						$m->print("Assigning ".$round->realname." into ".$num_panels." chambers") 
							unless $round_id;

						$m->comp("pair_congress.mas", 
								round      => $round,
								num_panels => $num_panels,
								wipe       => $wipe
						);

						$already_wiped++ if $wipe;
						$m->print(" <br />");
					}

					$m->print("....Done.</span>");

				} elsif ($event->type eq "wudc") { 

					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") 
						if @event_rounds;

					foreach my $round (@event_rounds) { 
						$m->print("Assigning ".$round->realname." into debates") unless $round_id;
						$m->comp("pair_wudc.mas", round => $round);
						$m->print(" <br />");
					}

					$m->print("....Done.</span>");

				} else { 

					my @event_rounds = @{$event_rounds{$event->id}} 
						if $event_rounds{$event->id} 
						&& @{$event_rounds{$event->id}};

					$m->print("<span class=\"top smallish third\"><h5>".$event->name."</h5>") if @event_rounds;

					unless (@event_rounds) { 
						@event_rounds = $event->rounds(type => "prelim");
					}

					my $done;

					foreach my $round (@event_rounds) { 

						next if $done;

						$num_panels = $num_panels_by_round{$round->id} 
							if $num_panels_by_round{$round->id};

						$m->print("Assigning ".$round->realname." into debates") unless $round_id;

						if ($round->type eq "prelim") {

							$m->comp("pair_preset.mas", 
								round => $round, 
								debug => $debug
							);

						} else { 
							$m->comp("pair_debate.mas", 
								round => $round, 
								debug => $debug
							);
						}
						$m->print(" <br />");
						$done++ if $round_robin;

					}

					$m->print("....Done.</span>");

				}

			}

			if ($round_id) { 

				my $round = Tab::Round->retrieve($round_id);
				my $publish_level = $round->event->setting("autopublish_results");

				if ($publish_level) { 
				
					my @rounds = $round->event->rounds;
					my @publish_rounds;

					foreach my $other_round (@rounds) { 
						push @publish_rounds, $other_round unless $other_round->name >= $round->name;
					}

					PUBLISH:
					foreach my $publish_me (@publish_rounds) { 

						my @u_panels = $m->comp(
							"/funclib/round_panels.mas", 
							round  => $publish_me,
							not_in => "1"
						);

						my $undone_panels = scalar @u_panels;
						undef @u_panels;

						unless ($undone_panels) { 
							if ($publish_me->panels) { 
								next PUBLISH if $publish_me->post_results > 0;
								$publish_me->post_results($publish_level);
								$publish_me->update;
							}
						}
					}

				} else { 

					$round->post_results(0);  #People always do this

				}

				$round->update;

				if ($tourn_settings->{"nsda_district"}) { 
					my $msg = $round->realname." has been sectioned";
					$m->redirect("/panel/round/nsda/".$whoami."?round_id=".$round_id."&msg=".$msg);
				}

				$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&disp=1") unless $debug;

			}




</%perl>

		</div>

		<div class="menu">

			<div class="sidenote">

				<h4>Entry assignment done</h4>

					<a 
						class  = "redtext buttonwhite full"
						href   = "/panel/report/disasters.mhtml"
						target = "_blank"
					>
						Check for Disasters
					</a>

					<br />

					<a 
						class = "greentext buttonwhite full"
						href  = "/panel/judge/index.mhtml">
						Panel Judges
					</a>

			</div>

			<div class="sidenote">

				<h4>View pairings/schematics:</h4>

%					foreach my $round (@rounds) { 
						<a 
							class="bluetext full buttonwhite" 
							href="/panel/schemat/show.mhtml?round_id=<% $round->id %>"
						>
							<% $round->realname %> of <% $round->event->abbr %>
						</a>
%					}


			</div>

		<& "menu.mas",
			tourn  => $tourn,
			whoami => "mass",
			nodiv  => 1,
			perms  => $perms &>

		</div>

%	}
