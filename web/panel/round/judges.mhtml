<%args>
	$tourn
	$tourn_settings
	$person
	$round_id
	$parlis => undef
	$return => undef
</%args>
<%init>

	use List::Util qw(shuffle);

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) { 
		$m->comp("/funclib/abort.mas", err => "No such round found");
	}

	my %round_settings = $round->all_settings;

	my $event = $round->event;
	my %event_settings = $event->all_settings();

	my $category = $event->category;
	my %category_settings = $category->all_settings();

	my @panels = sort {$a->letter <=> $b->letter} $round->panels;
	@panels = sort {$b->bracket <=> $a->bracket} @panels;

	my $num_judges = $round_settings{"num_judges"};
	$num_judges = 1 unless $num_judges;
	$num_judges = 1 if $parlis == 1;

	my $num_flights = $round->flighted;
	$num_flights = 1 unless $num_flights;
	$num_flights = 1 if $event_settings{"flight_rooms_only"};

	$m->comp( 
		"/funclib/round_clear_judges.mas", 
		round        => $round,
		erase_chairs => $parlis,
	);

	my %panels_by_letter = ();

	if ($parlis && $round->type eq "prelim") { 

		foreach my $round ($event->rounds(type => "prelim")) { 

			my $didit;

			foreach my $panel ($round->panels) {
				push @{$panels_by_letter{$panel->letter}}, $panel;
				$didit++;
			}

			if ($didit) { 

				$m->comp( 
					"/funclib/round_clear_judges.mas", 
					round        => $round,
					erase_chairs => $parlis,
				);

			}
		}
	}

	my $description = "Reassigned the judges in round ".$round->realname." of ".$event->abbr;

	Tab::ChangeLog->create({ 
		type        => 'tabbing',
		event       => $event->id,
		tourn       => $event->tourn->id,
		person      => $person->id,
		description => $description
	});

	my %judge_settings = $m->comp(
		"/funclib/category_judge_settings.mas",
		category => $category,
		value    => 1,
		all      => 1
	);

	if ($event->type eq "wudc" || $event->type eq "parli") { 

		my %panel_judges;
		my %panel_already_judges;
		my %used_judges;

		foreach my $panel (@panels) { 

			next if $panel->bye;

			@{$panel_judges{$panel->id}} = $m->comp(
				"/funclib/clean_judges.mas", 
				panel => $panel,
				wudc  => "true"
			);

			@{$panel_already_judges{$panel->id}} = $m->comp(
				"/funclib/panel_judges.mas", 
				panel => $panel
			);
		}

		my $order_string = $round_settings{"tab_rating_priority"};

		my @orders = split(/\,/, $order_string);

		if (@orders) { 

			my %used_schools;

			foreach my $order (@orders) { 

				foreach my $panel (@panels) {

					next if $panel->bye;

					next unless $panel->bracket == $order;
					my @cans = @{$panel_judges{$panel->id}};

					my $judge;
					my $empty;

					while (@cans && not defined $judge && not defined $empty) { 

						$empty++ if scalar @cans == 0;
						$judge = shift @cans;
						$empty++ unless $judge;
						next unless $judge;

						undef $judge if $used_judges{$judge->id};

						unless ($category_settings{"allow_school_panels"}) { 
							undef $judge 
								if $judge 
								&& $judge->school 
								&& $used_schools{$panel->id}{$judge->school->id};
						}
					}

					$m->comp("/funclib/panel_judgeadd.mas", 
						panel => $panel, 
						judge => $judge
					) if $judge;

					$used_judges{$judge->id}++ 
						if $judge;

					$used_schools{$panel->id}{$judge->school->id}++ 
						if $judge && $judge->school;

				}

				@panels = reverse(@panels);

			}

		} else { 

			$num_judges = 3 unless $num_judges;

			my %used_schools;

			foreach (1 .. $num_judges ) { 

				foreach my $panel (@panels) {
					
					next if $panel->bye;

					my @cans = @{$panel_judges{$panel->id}};

					my $judge;
					my $empty;

					while (@cans && not defined $judge && not defined $empty) { 

						$empty++ if scalar @cans == 0;

						$judge = shift @cans;
						$empty++ unless $judge;
						next unless $judge;

						undef $judge if $used_judges{$judge->id};

						unless ($category_settings{"allow_school_panels"}) { 
							undef $judge 
								if $judge 
								&& $judge->school 
								&& $used_schools{$panel->id}{$judge->school->id};
						}

					}

					$m->comp("/funclib/panel_judgeadd.mas",
						panel => $panel, judge => $judge) if $judge;

					$used_judges{$judge->id}++ if $judge;

					$used_schools{$panel->id}{$judge->school->id}++ if $judge && $judge->school;

				}

				@panels = reverse(@panels);
			
			}

		}

	} else { 
		
		my %rating_by_judge_event = ();

		if ($category_settings{"coach_ratings"} && $round->type ne "prelim") {
		
			my %tier_names = map {$_->id => $_->name} $category->rating_tiers;

			foreach my $event ($category->events) { 

				my $event_id = $event->id;

				my @ratings = $m->comp("/funclib/category_ratings.mas", event => $event);

				foreach my $rating (@ratings) { 

					$rating_by_judge_event{$rating->judge->id}{$event_id} 
						= $tier_names{$rating->rating_tier->id} 
						if $rating && $rating->rating_tier;
				}
			}
		}

		my %panel_judges = ();

		foreach my $panel (@panels) { 

			next if $panel->bye;

			my @judges = $m->comp(
				"/funclib/clean_judges.mas", 
					panel       => $panel,
					mass        => "yes",
					sort_parlis => $parlis
			);

			@{$panel_judges{$panel->id}} = @judges;
		}

		my %done = ();

		foreach my $panel (@panels) { 

			my @flights;
			push @flights, $panel;

			my %flighted;
			$flighted{$panel->id}++;

			my @judges = shuffle(@{$panel_judges{$panel->id}});

			if ($panel->round->type ne "prelim") {
				@judges = sort {$rating_by_judge_event{$a->id}{$event->id} 
					cmp $rating_by_judge_event{$b->id}{$event->id}} @judges;

				@judges = sort {length($rating_by_judge_event{$b->id}{$event->id}) 
					<=> length($rating_by_judge_event{$a->id}{$event->id})} @judges;
			}

			FLIGHT:
			foreach my $flight_number (2 .. $num_flights) { 

				OTHER:
				foreach my $other (@panels) { 

					next if $done{$other->id};
					next if $flighted{$other->id};

					my %flight_judges = map {$_->id => 1} @{$panel_judges{$other->id}};
					my @clear;

					foreach my $judge (@judges) { 
						next unless $flight_judges{$judge->id};
						next if $done{"J-".$judge->id};
						push @clear, $judge;
					}

					next OTHER unless scalar @clear > $num_judges;
					push @flights, $other; 
					@judges = @clear;
					$flighted{$other->id}++;
					next FLIGHT;
				}

			}

			my %already = ();

			my @judge_panel;

			# This sorts the parlis to the bottom; the steps that require them
			# will go and get them, but then scorers will be drawn first from
			# non-parlis so as not to absorb them all where not needed.

			foreach my $judge (@judges) { 

				next if $done{"J-".$judge->id};

				next if 
					(not defined $category_settings{"allow_school_panels"}) 
					&& (
						$judge->school > 0
						&& $judge->school->id 
						&& $already{"school"}{$judge->school->id}
					);

				next if ($tourn_settings->{"ncfl"} 
						|| $event_settings{"region_judge_forbid"} )
					&& $judge->school 
					&& $judge->school->region 
					&& $already{"region"}{$judge->school->region->id};


				next if $parlis == 1 
					&& (not defined $judge_settings{$judge->id}{"parli"});

				$done{$panel->id}{"parli"}++ if $judge_settings{$judge->id}{"parli"};

				next if $parlis == 3 && (not defined $done{$panel->id}{"parli"});

				$already{"school"}{$judge->school->id}++ if $judge->school;

				$already{"region"}{$judge->school->region->id}++ 
					if ( $tourn_settings->{"ncfl"} 
						|| $event_settings{"region_judge_forbid"} )
					&& $judge->school 
					&& $judge->school->region;

				push @judge_panel, $judge;

				last if scalar @judge_panel >= $num_judges;
			}

			my $flight_number = 1;

			foreach my $chamber (@flights) { 

				$chamber->flight($flight_number);
				$chamber->update;
				$flight_number++;

				$done{"flight"}{$chamber->id}++;

				foreach my $judge (@judge_panel) { 

					my $chair;

					if ($parlis == 1) { 
						$chair++;
					} 

					if ($parlis == 3) { 

						$chair++ 
							if $judge_settings{$judge->id}{"parli"}
							&& (not defined $done{$panel->id}{"parli_done"});
					}

					$done{$panel->id}{"parli_done"}++;

					if ($parlis) { 

						foreach my $ochamber (@{$panels_by_letter{$chamber->letter}}) { 

							$m->comp(
								"/funclib/panel_judgeadd.mas", 
								panel => $ochamber,
								judge => $judge,
								chair => $chair
							) if $judge;
						} 

					} else { 
						
						$m->comp(
							"/funclib/panel_judgeadd.mas", 
							panel => $chamber,
							judge => $judge,
							chair => $chair
						) if $judge;

					}

					$done{"J-".$judge->id}++;
				}

			}
		}
	}


	my $msg = "Judges have been assigned";
	$msg = "Parliamentarians have been assigned in all rounds" if $parlis == 1;

	return $msg if $return;

	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&disp=1&msg=$msg");

</%init>
