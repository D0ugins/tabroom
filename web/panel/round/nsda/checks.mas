<%args>
	$tourn
	$person
	$round
	$seeds => undef
</%args>
<%init>

	$m->abort unless $round;
	my $event = $round->event;
	$m->abort unless $event->tourn == $tourn->id;

	my %event_settings = $event->all_settings;

	my @panels = $round->panels;

    my @round_entries = $m->comp( '/funclib/round_entries.mas', round => $round);

    my %panel_entries = ();

	my %school_codes = ();

    foreach my $entry (@round_entries) {

		Tab::debuglog("Entry $entry is panel ".$entry->panelid." round is ".$round->id);

        push (@{$panel_entries{$entry->panelid}}, $entry);

		unless ($school_codes{$entry->school->id}) {
			$school_codes{$entry->school->id} = $entry->school->code;
		}
    }

	my %title_by_entry;

	if ($event_settings{"ask_for_titles"}) { 

		my @titles = $m->comp(
			"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "title"
		);

		%title_by_entry = 
			map {$_->entry->id => $_->value} 
			@titles;
	}

	my %cross_entries = $m->comp(
		"/funclib/event_doubled.mas", 
		round => $round 
	);

	my %event_speaker_order = $m->comp(
		"/funclib/event_speaker_order.mas",
		round => $round
	);

	my %hit_before = $m->comp(
		"/funclib/event_entry_hits.mas",
		round => $round
	);

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (@panels) { 
				averageSeeds('<% $panel->id %>');
%			}

		});

		function averageSeeds(panelID) { 

			var total = 0, counter = 0, average = 0, already = {};

			$("#panel_"+panelID).find(".seeds").each(function(index) { 

				var seedScore = parseInt(this.id);

				var entryID = $(this).attr("entry");

				if (!(entryID in already)) { 
					total = total + seedScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) { 
				average = (total / counter);
			}

			$("#average_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) { 

			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) { 
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) { 

			$(".entries").not("."+clashType+"_"+clashKey).removeClass(colorToggle);
			$(".schooltoggle").not("#"+keyID).removeClass('invert');

			$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
			$("#"+keyID).toggleClass('invert');

			if (clashType === "hits") { 
				$("."+clashType).toggleClass("hidden");
				$("."+clashType).toggleClass(colorToggle);
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").toggleClass("hidden");

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop             : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_checks.mhtml",{ 
                        entry_id     : ui.draggable.attr("id"),
                        panel_marker : this.id
                    });

                    // remove the original element from its origin to this
                    // location, and make it visible again while destroying the
                    // clone.  this is necessary because the default jquery
                    // draggable behavior does not play well with scrollable
                    // windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");
					averageSeeds(panelID);

					$("#"+this.id).removeClass("seed_"+panelID);
					

                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$( ".draggable" ).draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) { 
					$("."+this.id).hide();

					var schoolID = $("#"+this.id).attr("school");
					var titleName = $("#"+this.id).attr("title");

					$(".school_"+schoolID).removeClass("dkred");
					$(".title_"+titleName).removeClass("dkblue");
					$(".hitcounter").addClass('hidden');

				},

				start: function(event, ui) { 
			
					$(".entries").removeClass("dkred");
					$(".entries").removeClass("dkorange");
					$(".entries").removeClass("dkblue");
					$(".entries").removeClass("dkgreen");
					$(".entries").removeClass("dkgrey");

					var schoolID = $("#"+this.id).attr("school");
					var titleName = $("#"+this.id).attr("title");

					$(".school_"+schoolID).addClass("dkred");

					if (titleName) { 
						$(".title_"+titleName).addClass("dkblue");
					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");

					$(".hit_"+this.id).removeClass("hidden");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"
			});

		});

	</script>

		<div class="full nospace">

			<span class="twofifths">
				<h4><% $round->realname %> Double Checks</h4>
			</span>

			<span class="threefifths rightalign">

				<span class="strong">
					Show:
				</span>

				<span 
					id      = "schools"
					class   = "buttonwhite redtext padless"
					onClick = "toggleShow(this.id)";
				>
					Schools
				</span>

				<span 
					id      = "titles"
					class   = "buttonwhite bluetext padless"
					onClick = "toggleShow(this.id)";
				>
					Titles
				</span>

				<span 
					id      = "hits"
					class   = "buttonwhite orangetext padless"
					onClick = "toggleShow(this.id)";
				>
					Hits
				</span>

				<span 
					id      = "orders"
					class   = "buttonwhite greentext padless"
					onClick = "toggleShow(this.id)";
				>
					Order
				</span>

				<span 
					id      = "crosss"
					class   = "buttonwhite graytext padless"
					onClick = "toggleShow(this.id)";
				>
					Cross
				</span>

%				if ($round->name > 2 && $round->type ne 'final') { 

					<span 
						id      = "seeds"
						class   = "buttonwhite purpletext padless"
						onClick = "toggleShow(this.id)";
					>
						Seeds
					</span>
%				}

			</span>

		</div>

<%perl>
		my $max_speaker;
		my %entry_by_speaker = ();
		my %in_section = ();

		foreach my $panel (@panels) { 

			foreach my $entry (@{$panel_entries{$panel->id}}) { 

				push @{$entry_by_speaker{$panel->id}{$entry->speaks}}, $entry;
				$max_speaker = $entry->speaks if $entry->speaks > $max_speaker;

				$in_section{$entry->id} = $panel->id;
			}
		}

		my $count;

		foreach my $panel (@panels) { 

			my %schools;
			my %titles;
			my $order_count;
			my $last_order_count;
			my $cross_total_clash;
			my $hit_total;

</%perl>

%			unless ($count++ % 4) { 
				<br style="clear: both;">
%			}

			<div 
				class="quarter marless top"
				id = "panel_<% $panel->id %>"
			>

				<div class="yellowrow padmore smallish centeralign strong marno bordersides bordertop">
					Section <% $panel->letter %> <% $panel->id %>
				</div>

%				foreach my $speaker ( 1 .. $max_speaker) { 

					<div class="full lightrow nospace bordersides">

						<span class="sixth padless marno centeralign">
							<% $speaker %>
						</span>

						<span 
							id      = "<% $panel->id %>_<% $speaker %>"
							panel   = "<% $panel->id %>"
							class   = "marno fivesixths droppable speaker_<% $speaker %>"
						>

<%perl>
						unless ($entry_by_speaker{$panel->id}{$speaker}) {
							$m->print("</span></div>\n");
							next;
						}

						foreach my $entry (@{$entry_by_speaker{$panel->id}{$speaker}}) {

							$schools{$entry->school->id}++;
							my $title = $title_by_entry{$entry->id};
							$title =~ s/[\W_]//g;
							$titles{$title}++;

							my $order_string;
							my %orders = ();

							my $last_order;

							foreach my $round (sort keys %{$event_speaker_order{$entry->id}}) { 

								$order_string .= ", " if $order_string;
								$order_string .= $event_speaker_order{$entry->id}{$round};

								$orders{$event_speaker_order{$entry->id}{$round}}++;
								$last_order = $event_speaker_order{$entry->id}{$round};
							}

							if ($speaker == $last_order) { 
								$last_order_count++ 
							} else {
								$order_count += $orders{$speaker};
							}

							my $cross_clash;

							foreach my $other (keys %{$cross_entries{$entry->id}}) { 
													
								if ((abs $cross_entries{$entry->id}{$other}{"order"} - $speaker) < 2) {
									$cross_total_clash++;
									$cross_clash++;
								}
							}
</%perl>

							<span 
								class="
									marno
									entries
									draggable
									<% $last_order == $speaker ? "order_last" : "" %>
									<% $orders{$speaker} ? "order_normal" : "" %>
									<% $cross_clash ? "cross_normal" : "" %>
									school_<% $entry->school->id %> 
									title_<% $title %>
								"
								id         = "<% $entry->id %>"
								school     = "<% $entry->school->id %>"
								title      = "<% $title %>"
								orders     = "<% $order_string %>"
								last_order = "<% $last_order %>"
							>
								<span 
									class="nospace third borderright centeralign codes"
								>
									<% $entry->code %>	
								</span>

								<span 
									class="nospace threefifths rightalign schools hidden"
								>
									<% $school_codes{$entry->school->id} %>
								</span>

								<span class="nospace padleft rightalign wrap titles hidden"
								>
									<% $title_by_entry{$entry->id} %>
								</span>

								<span class="nospace padleft rightalign wrap seeds hidden"
									entry = "<% $entry->id %>"
									id    = "<% $seeds ? ${$seeds}{$entry->id} : ""  %>"
								>
									<% $seeds ? ${$seeds}{$entry->id} : ""  %>
								</span>

								<span class="nospace threefifths rightalign 
									hits hits_<% $panel->id %> hidden"
									>

%									foreach my $hit (sort keys %{$hit_before{$entry->id}}) {

%										next unless $in_section{$hit} == $panel->id;

%										$hit_total++;

										<span class="full nospace strong">
											<% $hit_before{$entry->id}{$hit}{"code"} %>
											<% $hit_before{$entry->id}{$hit}{"count"} %>x
										</span>
%									}

								</span>

%								foreach my $hit (sort keys %{$hit_before{$entry->id}}) {
									<span class="
										rightalign orangetext half nospace 
										strong hitcounter hit_<% $hit %> hidden
									">
										<% $hit_before{$entry->id}{$hit}{"count"} %>x
									</span>
%								}

								<span class="nospace threefifths rightalign orders code_<% $panel->id %> hidden">
%									foreach my $round (sort keys %{$event_speaker_order{$entry->id}}) { 
										<span class="half marno">
										<% $round %>-<%
											Lingua::EN::Numbers::Ordinate::ordinate(
												$event_speaker_order{$entry->id}{$round}
											)
										%>
										</span>
%									}
								</span>

								<span class="nospace threefifths rightalign crosss code_<% $panel->id %> hidden">

%									foreach my $other (keys %{$cross_entries{$entry->id}}) { 

										<span class="full nospace">

											<% $cross_entries{$entry->id}{$other}{"event"} %>-<% 	
												Lingua::EN::Numbers::Ordinate::ordinate(
													$cross_entries{$entry->id}{$other}{"order"} 
												) 
										%>

										</span>
%									}
								</span>
								</span>
%							}

						</div>
%					}

				<div class="lightrow centeralign padmore marno bordersides borderbottom">

					<p class="leftalign strong smallish marno">Status:</p>

%					if ($round->name > 2 && $round->type ne 'final') { 
	
						<div 
							class = "full padless marno purpletext"
						>
							<span class="half rightalign">
								Avg Rank:
							</span>
							<span class="half leftalign strong" id = "average_<% $panel->id %>">
							</span>
						</div>

%					}

%					my $blah;

%					foreach my $key (keys %schools) { 

%						next unless $schools{$key} > 1;
%						$blah++;

						<span 
							id      = "<% $key %>_<% $panel->id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padless smallish full"
							onClick = "toggleColor( this.id, <% $panel->id %>, <% $key %>, 'school', 'dkred');"
						>
							<% $schools{$key} %> from School <% $school_codes{$key} %>

						</span>

%					}

%					foreach my $key (keys %titles) { 

%						next unless $titles{$key} > 1;
%						next unless $key;
%						$blah++;

						<span 
							id      = "<% $key %>_<% $panel->id %>"
							class	= "titletoggle buttonwhite marbottom bluetext padless smallish full"
							onClick = "toggleColor( this.id, <% $panel->id %>, '<% $key %>', 'title', 'dkblue');"
						>
							<% $titles{$key} %> w/same title
						</span>
%					}

%					if ($order_count) { 

%						$blah++;

						<span 
							id      = "order_<% $panel->id %>"
							class	= "ordertoggle buttonwhite marbottom greentext padless smallish full"
							onClick = "toggleColor( this.id, <% $panel->id %>, 'normal', 'order', 'green');"
						>
							<% $order_count %> order repeats
						</span>
%					}

%					if ($last_order_count) { 
%						$blah++;

						<span 
							id      = "last_order_<% $panel->id %>"
							class	= "last_ordertoggle buttonwhite marbottom greentext padless smallish full"
							onClick = "toggleColor( this.id, <% $panel->id %>, 'last', 'order', 'dkgreen');"
						>
							<% $last_order_count %> same order R<% $round->name - 1 %>
						</span>
%					}

%					if ($cross_total_clash) { 

%						$blah++;

						<span 
							id      = "cross_<% $panel->id %>"
							class	= "crosstoggle buttonwhite marbottom graytext padless smallish full"
							onClick = "toggleColor( this.id, <% $panel->id %>, 'normal', 'cross', 'dkgrey');"
						>
							<% $cross_total_clash %> cross entry order
						</span>
%					}

%					if ($hit_total) { 

%						$blah++;

						<span 
							id      = "hit_<% $panel->id %>"
							class	= "hittoggle buttonwhite marbottom orangetext padless smallish full"
							onClick = "toggleColor( this.id, <% $panel->id %>, 'hits', 'hits', 'orangetext');"
						>
							<% $hit_total %> repeat hits
						</span>
%					}

%					unless ($blah) { 
		
						<span class="buttonwhite greentext padless">

							<span class="fa fa-check fa-lg greentext">
							</span>

							All OK!

						</span>

%					}

				</div>

			</div>
%		}


