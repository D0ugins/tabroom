<%args>
	$person
	$round
	$bracket            => undef
	$entries_hash_ref   => undef
	$precluded_hash_ref => undef
	$entry_to_pair      => undef
</%args>
<%init>

	#set to zero to suppress messages, 1 to enable
	my $debug = 0;

	return unless $round;
	
	# Works off of 4 basic global hash/arrays; this allows the functions to
	# access the information they need @entries is a global array of all
	# entries in the event; 
	
	# %entries is a hash with record and SOP information in it 
	
	# %precluded stores which teams can't hit each other; 
	
	# %bracket are the teams in the bracket being paired for top 3 tables, 
	
	# 0=code, 1=W, 2=seed, 3=SOP, 4=TB2, 5=seed w/o wins, 
	# 6=oppW, 7=side due, 8=pullups, 9=oppon, 10=bye button, 
	# 11=pull button, 12=entry id, 13=bracket

	# The bracket an entry is in gets stored in a field called "placements" For
	# the normal powermatcher, this is saved in an entry field, but for this it
	# gets updated at load and matched to loss total.  If a team gets pulled
	# up, that gets stored as a round_setting called team_pulled_up and that is
	# the only adjustment necessary.  This is necessary to make the bracket
	# persist across rounds.
	
	use POSIX;
	use List::Util 'shuffle';  #I think this is OK to delete....
	use Time::HiRes qw( time );

	my $event = $round->event;
	my %event_settings = $event->all_settings;

	my $aff_string = $event_setting{"aff_label"};
	my $neg_string = $event_setting{"neg_label"};

	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $start = time(); 
	
	#load the pairing hash	
	($entries_hash_ref, $precluded_hash_ref) 
		= $m->comp("/funclib/make_pairing_hash.mas", 
		round_id => $round->id
	);			

	my %entries = %{$entries_hash_ref};
	my %precluded = %{$precluded_hash_ref};

	#count losses
	my %winloss = $m->comp(
		"/funclib/entry_losses.mas", 
			event    => $event,
			elimstoo => 42,
			round    => $round
		);

	foreach my $key ( keys %entries ) {
		$entries{$key}{'losses'} = $winloss{$key}; 
		$entries{$key}{'losses'} = 0 if not defined $winloss{$key}; 
	}

	#strip teams with 2 losses and add zeros to side field, and mark as drops
	foreach my $key (keys(%entries)) {
		$entries{$key}{'n_aff'} = 0 unless $entries{$key}{'n_aff'};
		$entries{$key}{'n_neg'} = 0 unless $entries{$key}{'n_neg'};
		if ( $entries{$key}{'losses'} >=2 ) {
			delete $entries{$key};
			my $temp_entry = Tab::Entry->retrieve($key);
			$temp_entry->dropped(1);
			$temp_entry->update;
		}
	}
	
	#This call top reset_bracket.mas isn't working....so this is dead code for now
	#print "round ID=".$round_id." bracket set for=".$event_setting{"bracket_set_for"}."<br>";
	#print "placements = $bracket_set<br>";
	#set the brackets if they're not set already
	#if ( $bracket_set == 0 ) {
	#	$m->comp("/funclib/reset_bracket.mas", round_id => $round->id, winsonly => "showlosses", fromjava => "fromnsda");
	#	print "just fired the bracket resetter<br>";
	#}
	
	# So this fixes the above according to the regime described on lines 27-29;
	# placements are set to losses and if there's a team pulled up they get
	# reset

	foreach my $key (keys(%entries)) {
		$entries{$key}{'placement'} = $entries{$key}{'losses'};
	}
	if ( $round->setting("team_pulled_up") ) {
		$entries{ $round->setting("team_pulled_up") }{'placement'} = 0;
	}
	
	foreach my $key (sort {$entries{$a}->{'seed'} <=> $entries{$b}->{'seed'}} keys(%entries)) {
		next unless $entries{$key}{'opponent'} == 0;
		next unless $key > 0;
	}

	$bracket = 0;
	
	my $end = time();

	if ($debug) {
		print "hash setup time:  "; 
		printf("%.2f\n", $end - $start); print "<Br>";
	}

	my $nteams = keys %entries;
	my $dummy = keys %precluded;
	if ($debug) {	
		print "n entries from hash:".$nteams."<br>";
		print "n preclusions from hash:".$dummy."<br>";
		$end = time();
		print "Current round setup time:  "; 
		printf("%.2f\n", $end - $start); 
		print "<br>";
	}
		
#	Declare the variables to mark the number of teams in the bracket

	my $aff_teams_in_bracket = 0;
	my $neg_teams_in_bracket = 0;

#	Count paired and unpaired teams in the bracket

	my $paired_teams = 0;
	my $unpaired_teams = 0;

	foreach my $key (keys %entries) {
		if ( 
			(	$entries{$key}{'placement'} == $bracket 
				or $bracket == -1
			) 
			and $entries{$key}{'opponent'} > 0 
		) {
			$paired_teams++;
		}

		if ( 
			(
				$entries{$key}{'placement'} == $bracket 
				or $bracket == -1
			) 
			and $entries{$key}{'opponent'} < 1 
		) { 
			$unpaired_teams++; 
		}


	}
	
	sub had_bye_already {

		my ($team) = @_;

		Tab::Ballot->set_sql(  byes => "
			select distinct ballot.id
			from ballot
			where ballot.entry = ? 
			and ballot.bye = 1
		");

		Tab::Ballot->set_sql(  panel_byes => "
			select distinct ballot.id
			from ballot, panel
			where ballot.entry = ? 
			and ballot.panel = panel.id
			and panel.bye = 1
		");
	
		my @byes = Tab::Ballot->search_byes($team);
		push @byes, Tab::Ballot->search_panel_byes($team);
		my $warn = "Already received a bye." if @byes;
		return $warn;
	}
	
	print "bracket is $bracket<br>" if $debug;

	my $display_flag;
				
</%init>

	<div class="main" display="table" >
	
	<script>

		//update everything when the page loads, also enable the info box toggling on and off
		$( document ).ready(function() {
			count_paired();
			$(".flip").click(function(){
				$("#info_box").fadeToggle(500);
			});
		});
		
		count_paired = function() {
		
			//counts the teams who are and aren't paired and updates the status of the pairing tasks
			var undef_total=0; 
			var undef_unpaired=0;
			var down_one_total=0;
			var down_one_unpaired=0;
			var unpaired=false;
			var bye_assigned=false;
			
			//this will scroll through the table but not the header row
			$('#tbl_bracket > tbody > tr').each(function (i, row) {
				//window.alert( $(row).attr('class') );
				unpaired = false;
				if ( $(row).find("span.curr_oppn").text().trim() == "" ) {
					unpaired = true;
				}

				if ( $(row).find("span.curr_oppn").text().trim() == "BYE" ) {
					bye_assigned = true;
				}

				if ( $(row).attr('class') == "rightalign bracket0" ) {
					undef_total++;
					if (unpaired == true) {
						undef_unpaired++;
					}
				} else {
					down_one_total++;
					if (unpaired == true) {
						down_one_unpaired++;
					}
				}
				
			});

			//update undefeated display
			$("#0L_n_in_bracket").text( undef_total );
			$("#0L_paired_already").text( undef_total - undef_unpaired );
			$("#0L_left_to_pair").text( undef_unpaired );
			
			//update down_one display
			$("#1L_n_in_bracket").text( down_one_total );
			$("#1L_paired_already").text( down_one_total - down_one_unpaired );
			$("#1L_left_to_pair").text( down_one_unpaired );
			
			//update totals display
			$("#n_in_bracket").text( undef_total + down_one_total );
			$("#paired_already").text( undef_total + down_one_total - undef_unpaired - down_one_unpaired );
			$("#left_to_pair").text( undef_unpaired + down_one_unpaired );

			//update the bye status -- do you need to assign a bye?
			$("#bye_ok").text("Must do this!"); 
			$("#bye_ok").attr("class", "half red" );
			if ( parseInt( undef_total + down_one_total ) % 2 == 0 || bye_assigned == true ) {
				$("#bye_ok").text("OK");
				$("#bye_ok").attr("class", "half green" );
			}

			//update pullup status -- do you still need to do a pullup or are you OK?
			$("#pullup_ok").text("Must do this!"); 
			$("#pullup_ok").attr("class", "half red" );

			if ( parseInt( $("#0L_n_in_bracket").text() ) % 2 == 0 
				|| ( down_one_total == 2 && undef_total ==1 ) 
			) {
				$("#pullup_ok").text("OK");
				$("#pullup_ok").attr("class", "half green" );
			}
			
			//updated how you are on the pairings
			var dummy = undef_unpaired + " undefeated un-paired.<br>";
			dummy += down_one_unpaired + " down-one unpaired.<br>";
			if ( undef_unpaired == 0 && down_one_unpaired == 0 ) {
				dummy += "OK";
				$("#pairings_ok").attr("class", "half green" );
				$("#overall_status").text("All done!  Return to the pairing to place rooms and judges.");
				$("#overall_status").attr("class", "full green" );
			} else {
				dummy += "Must finish!";
				$("#pairings_ok").attr("class", "half red" );
			}
			$("#pairings_ok").html(dummy);
			
		}

		autopair = function() {

			//find the bracket and bail if no bracket is selected		
			var bracket = get_current_bracket();
			if ( bracket == 2 ) {
				window.alert("You have selected all teams! Use the INFO AND DISPLAY box to pick one bracket.");
				return;
			}
			
			//set it to auto so it will log correctly
			$("#manual_override").prop('checked', false);
			
			//grab the teams in it and sort by most to least conflicts
			var ctr = -1;
			var entries = [];
			var paired_already=false;
			
			$('#tbl_bracket tr').each(function (i, row) {
				var in_bracket=false;
				if ( $(row).hasClass('bracket'+bracket) ) {
				   in_bracket=true;
				}
				if ( in_bracket == true ) {

					if ( $(row).find("span.curr_oppn").text().trim().length > 3 ) { 
						paired_already = true;
					}

					var entrycode = $(row).find("span.entrycode").html();
					var team_id = $(row).find('#team_id').text().trim();
					var side_due = $(row).find("span.side_due").text().trim();
					var n_conflicts = $("#team" + team_id + "confl_oppn").text().trim() ;
					var wins = $("#team" + team_id + "losses").text().trim() ;
					var seed = $("#team" + team_id + "seed").text().trim() ;
					ctr = ctr + 1;
					entries[ctr] = [];

					//the ID number
					entries[ctr][0] = team_id;										

					//readable entry code
					entries[ctr][1] = entrycode.trim();								

					//side due
					entries[ctr][2] = side_due.trim();								

					//number of conflicts within the bracket
					entries[ctr][3] = n_conflicts.trim();							

					//are they paired yet (for use below)
					entries[ctr][4] = -99;											

					entries[ctr][5] = wins;											
					entries[ctr][6] = seed;											

					if ( $(row).find("span.curr_oppn").text().trim() == "BYE" ) { 
						entries[ctr][4]  = 999;
					}
				}
			});

			//bail if teams are already paired
			if (paired_already == true ) {
				window.alert("Teams in this bracket have been paired already; delete the matches below and try again.");
				return;
			}
			
			entries.sort(function(a, b) { return (a[3] > b[3] ? -1 : (a[3] < b[3] ? 1 : 0)); });
			
			for (var i=0, len=entries.length; i<len; i++) {
				console.log( i + " " + entries[i][1] + " " + entries[i][3] );
			}
			
			//loop through and pair
			var str_message = "Starting to pair " + bracket + "-loss bracket\n";
			for (var pass=1; pass<3; pass++) {
				console.log( "Doing pass number " + pass + " and sides only checked on first pass." );

				if (pass == 2) { 
					var str_message = str_message + " Starting second pass; will pair any unpaired teams and ignore side constraints. \n";
				}

				for (var i1=0, len=entries.length; i1<len; i1++) {
					if ( entries[i1][4] == 999 ) { str_message = str_message + entries[i1][1] + " has the bye \n"; }
					for (var i2=i1+1, len=entries.length; i2<len; i2++) {
						if ( entries[i1][4] == -99 && entries[i2][4] == -99 ) {
							var ok_to_pair = true;
							var conflict = has_conflict( entries[i1][0], entries[i2][0] );
							str_message = str_message + " Trying to pair " + i1 + " " + entries[i1][1] + " vs " + i2 + " " + entries[i2][1];
							if ( conflict != "OK" ) { str_message = str_message + " but " + conflict + ". "; ok_to_pair = false; }
							if ( entries[i1][2] == entries[i2][2] && entries[i1][2] != "--" && pass == 1 ) {
								str_message=str_message + " Teams are due on the same side. ";
								ok_to_pair = false;
							}
							if ( ok_to_pair == true ) {
								entries[i1][4] = i2;
								entries[i2][4] = i1;
								str_message=str_message + " Successfully paired " + entries[i1][1] + " vs " + entries[i2][1] +"\n";
								break;
							}
						}
					}
				}
			}
			
			//check that they're all paired
			all_paired=true;
			for (var i=0, len=entries.length; i<len; i++) {
				if ( entries[i][4] == -99 ) { all_paired = false; window.alert("Autopair failed -- you'll need to complete this manually"); }
			}
			if ( all_paired == true ) {
				str_message=str_message + " Paired all teams in the bracket!  Review the work.\n";
				//save 'em
				for (var i=0, len=entries.length; i<len; i++) {
					if ( entries[i][4] != -99 & entries[i][4] != 999 ) {
						//simulate clicking on a team
						show_opponents(entries[i][0], entries[i][1], entries[i][5], entries[i][6] );
						//do the physical save
						var oppn = entries[i][4];
						save_pairing( entries[oppn][0], entries[oppn][5], entries[oppn][6] );
						entries[oppn][4] = -99;
					}
				}
			} else {
				str_message=str_message + " AUTO-PAIR FAILED.  You will need to complete this by hand.\n";
			}
			
			display_message(str_message);

			save_to_change_log('');

			//set it back to manual so it will log changes as made by user
			$("#manual_override").prop('checked', true);

			window.alert("Computer-attempted autopair of the bracket is done; review information in the window.");
		}

		pullme = function(entry) { 

			var rd_id= <% $round_id %>;
			
			//Try to discourage a pull down
			if ($("#team"+entry+"bracket").text() == 0) {

				var mess_str="You are pulling a team down; this is very rarely the correct thing to do. ";

				mess_str += "This should ONLY be done if you have pulled the wrong team up and are correcting a mistake. ";
				mess_str += "Pull them down anyway?";
				var c = window.confirm(mess_str);
				if ( c == false ) { return; }

				//save it
				$.post("manual_pullup.mas",{ round_id: rd_id, entry_id: 0 });

				//Record it in the change_log
				$("#info_box_text").text('');

				save_to_change_log("Pulled down entry " + entry + " " + $("#team"+entry+"name").text().trim() );
			}
			
			//figure out what the new bracket will be

			// remember that <tr> class shows the number of losses, but
			// database and teamXbracket element saves number of wins

			var new_bracket= "bracket0";
			var n_wins_bracket = 0;

			if ( $("#team"+entry+"bracket").text() == 0 ) { 
				new_bracket  = "bracket1";
				n_wins_bracket=1;
			}
			
			//see if they've been pulled up before and confirm if yes; otherwise, just save
			if ( $("#team"+entry+"bracket").text() == 1 ) {
				
				var pullups = $("#team"+entry+"pullup").text();
				var x = pullups.length;

				var n_pulls = parseFloat(pullups.slice(x-2, x));

				if ( n_pulls > 0 ) {
					var c = window.confirm(
						"This entry has been pulled up " + n_pulls + " times(s) before.  Pull them up anyway?"
					);
					if ( c == false ) { return; }
				}
			
				//save it
				$.post("manual_pullup.mas",{ round_id: rd_id, entry_id: entry });

				//Record it in the change_log
				var log_message = $("#team"+entry+"name").text().trim();

				save_to_change_log("Pulled up entry " + entry + " " + log_message);

			}
			
			//update the fields
			$("#team"+entry).attr("class", "rightalign " + new_bracket );
			$("#team"+entry+"bracket").text( n_wins_bracket);
			
			//update the button
			$("#pullbutton"+entry).text( "Pull \u2193" );
			if ( new_bracket == "bracket1" ) {
				$("#pullbutton"+entry).text( "Pull \u2191" ); 
			}
			
			//refresh the screen
			change_bracket_display(0);
			
			window.alert("Bracekt changes completed, saved, and logged.");
		}

		save_to_change_log = function(desc_detail) {
		
			// this will show whether there's a manual over-ride and print
			// what's in the message box it will also save any custom message
			// passed to the fn.
			
			var desc = $("#info_box_text").text();

			desc = desc.replace('Click this message to make it go away.', '');
			desc = desc + desc_detail;

			var person_id = <% $person->id %>;
			var rd_id= <% $round_id %>;

			if ( $("#manual_override").prop('checked') == true ) {
				desc = desc + " MANUAL OVER-RIDE was used.";
			} else {
				desc = desc + " Computer auto-save was used.";
			}

			$.post("change_log_save.mas",{
				round_id    : rd_id,
				person_id   : person_id,
				description : desc
			});
		}
		
		update_screen_after_bye = function(panel_id, entry) {

			$("#team"+entry+"bye_button").css("display", "none");
			$(".bye_button").css("display", "none");
			$("#team"+entry+"pullup_button").css("display", "none");
			$("#team"+entry+"choose_button").css("display", "none");
			$("#team"+entry+"oppn").css("display", "table-cell");

			$("#team"+entry+"curr_oppn").html( 
				"<a class='white block' onclick='deletepanel( " + panel_id + ", " + entry + ", -1) '>BYE</a>"
			);

			$(".curr_oppn").css("display", "table-cell");
			
			//add it to the pairings table
			var my_table = document.getElementById("pairings");
			var my_row = my_table.insertRow();
			my_row.id = "pair"+panel_id;
			var cell1 = my_row.insertCell(0);
			var cell2 = my_row.insertCell(1);
			var cell3 = my_row.insertCell(2);

			cell1.innerHTML = "<span class='twothird nowrap'>" 
				+ $("#team"+entry+"name").text() 
				+ "</span><span class='third'>" 
				+ $("#team"+entry+"loss").text() 
				+ "losses</span>";

			cell2.innerHTML = "<span class='twothird nowrap'> BYE </span>";
			cell3.innerHTML = "<a class='dkred button' onclick='deletepanel( " + panel_id + ", " + entry + ", -1 );'>Delete</a>";
			
		}
		
		givebye = function(entry, hadbye) {

			//Give user abort option if had bye before
			if (hadbye.length > 5) {
				var doit = window.confirm(hadbye);
				if ( doit == false ) { return; }
			}

			//store the bye and call screen update
			var rd_id= <% $round_id %>;
			var bracket=<% $bracket %>;
			var panel_id; 
			$.post("/panel/manipulate/save_pairing.mas",{ 
				round_id          : rd_id,
				team1             : entry,
				wins1             : bracket,
				seed1             : bracket,
				team2             : -1,
				wins2             : 0,
				seed2             : 0,
				bracket_to_return : -42
			}, function(dummy){ 
				panel_id = parseFloat(dummy);
				update_screen_after_bye(panel_id, entry);
				count_paired();
			});
			
			//Record it in the change_log
			save_to_change_log( "Bye given to entry " + entry + " " + $("#team"+entry+"name").text().trim() );
		}
		
		deletepanel = function(panel_id, aff, neg) {

			//process in database
			$.post("/panel/manipulate/dump_panel.mas",{ panel_id: panel_id }); 
			
			//delete the row from the pairings
			$("#pair"+panel_id).remove();
			
			//update the rows of the teams involved
			
			//$("#team"+aff+"choose_button").css("display", "table-cell");
			$("#team"+aff+"curr_oppn").css("display", "none");
			$("#team"+aff+"curr_oppn").text("");
			
			//update the neg row, but not if it's a bye
			if ( neg > 0 ) {
				$("#team"+neg+"choose_button").css("display", "table-cell");
				$("#team"+neg+"curr_oppn").css("display", "none");
				$("#team"+neg+"curr_oppn").text("");
			}
			
			count_paired();
			
			//save to change log
			$("#info_box_text").text("");

			save_to_change_log("User deleted panel " + panel_id + " with aff entry " + $("#team"+aff+"name").text().trim() + " and neg entry " + $("#team"+neg+"name").text().trim() );
			
		}

		show_opponents = function(entry, entry_name, wins, seed) {

			//update header
			$("#instruction_header").html( "<h5 class=\"nospace\">Finding an opponent for " + entry_name + " </h5>" );
			$("#entry_to_pair_entry").html( entry );
			$("#entry_to_pair_wins").html( wins );
			$("#entry_to_pair_preset_seed").html( seed );
			
			//reset anchor styles -- also resets the conflict info columns
			reset_anchor_styles();

			//make the conflics columns visible
			$(".oppn_info").css("display", "table-cell");
			$(".conflict_info").css("display", "table-cell");
			
			//make the selected team blue and indent			
			$('#'+entry).addClass('dkblue limit3 nowrap marno padleft');

			//show any conflicts as red and indented
			$('#preclusion_data tr').each(function (i, row) {
				if ( $(row).find(".team1").html().trim() == entry ) {
					var oppn = $(row).find(".team2").html().trim();
					$('#'+oppn).removeClass('white');
					$('#'+oppn).addClass('dkred limit3 nowrap marno padleft');
					$("#team"+oppn+"conflict_info").text( $(row).find(".reason").html().trim() );
				}
			});

		}

		reset_anchor_styles = function() {
			
			$(".entry_anchor").removeClass('dkred');
			$(".entry_anchor").removeClass('dkblue');
			$(".entry_anchor").addClass("white limit3 padleft nowrap");
			$(".conflict_info").text("n/a");
			$("#conflict_info").text("Conflict Info");
			
		}	

		update_screen_after_pairing = function(panel_id, aff, neg, bracket) {

			//update aff row for the onscreen display, plus suppress the action buttons
			$("#team"+aff+"curr_oppn").html( "<a class='white full' onclick='deletepanel( " + panel_id + ", " + aff + ", " + neg + ") '>" + $("#team"+neg+"name").text().trim() + "</a>" );
			$("#team"+aff+"choose_button").css("display", "none");
			$("#team"+aff+"curr_oppn").css("display", "table-cell");

			//update neg row for the onscreen display and suppress action buttons
			$("#team"+neg+"curr_oppn").html( "<a class='white full' onclick='deletepanel( " + panel_id + ", " + aff + ", " + neg + ") '>" + $("#team"+aff+"name").text().trim() + "</a>" );
			$("#team"+neg+"choose_button").css("display", "none");
			$("#team"+neg+"curr_oppn").css("display", "table-cell");

			//add it to the pairings table
			var my_table = document.getElementById("pairings");
			var my_row = my_table.insertRow();
			my_row.id = "pair"+panel_id;
			var cell1 = my_row.insertCell(0);
			var cell2 = my_row.insertCell(1);
			var cell3 = my_row.insertCell(2);
			cell1.innerHTML = "<span class='twothird nowrap'>" + $("#team"+aff+"name").text().trim() + "</span><span class='third'>" + $("#team"+aff+"loss").text().trim() + " losses </span>";
			cell2.innerHTML = "<span class='twothird nowrap'>" + $("#team"+neg+"name").text().trim() + "</span><span class='third'>" + $("#team"+neg+"loss").text().trim() + " losses </span>";
			cell3.innerHTML = "<a class='dkred button' onclick='deletepanel( " + panel_id + ", " + aff + ", " + neg + ");'>Delete</a>";

			//update header
			$("#instruction_header").html = "Tap an entry code to find a match";

			//update the display of the number of paired
			reset_anchor_styles();
			change_bracket_display( bracket );

		}

		change_bracket_display = function ( bracket ) {
			
			//make visible only the teams in the bracket
			if (bracket == 0) {
				$(".bracket1").css("display", "none");
				$(".bracket0").css("display", "table-row");
				$("#bracketlabel").text("0-loss bracket");
			} else if (bracket == 1) {
				$(".bracket0").css("display", "none");
				$(".bracket1").css("display", "table-row");
				$("#bracketlabel").text("1-loss bracket");
			} else {
				//$("tr[title!='_blank']").css("display", "table-row");   *** just saving as code sample
				$("tr").css("display", "table-row");
				$("#bracketlabel").text("Both brackets");
			}
			
			count_paired();
			count_clean_opponents( bracket );
			
			//update number of teams in bracket
			//$("#n_in_bracket").text( $('tr:visible').length-2 );
			
		}
		
		display_message = function (str_message) {
			str_message = str_message + "\nClick this message to make it go away.";
			$("#info_box_text").text(str_message);
			$("#info_box").fadeIn(500);
		}
		
		show_help = function () {
			var str_message = "Use the 'display' box to the right (just below help) to select the bracket to show.\n";
			str_message += "The 'bracket status' box will show you how many teams have been paired and how many still need to be paired.\n";
			str_message += "The buttons in the 'Bracket Actions' box will let you pair the teams.\n";
			str_message += "Start with assigning the bye, then even the brackets, then pair the teams against each other.\n";
			display_message(str_message);
		}
		
		has_conflict = function(team1, team2) {
		
			var dummy = "OK";
			$('#preclusion_data tr').each(function (i, row) {
				if ( $(row).find(".team1").html().trim() == team1 && $(row).find(".team2").html().trim() == team2 ) {
					dummy = $(row).find(".reason").html().trim() ;
				}
			});
			return dummy;

		}

		count_clean_opponents = function ( bracket ) {
		
		// this shows the number conflicts against opponents in the selected bracket only
		// Can't be done at load time b/c the undefeated brackets might not be set yet. 
				
			//reset conflicts to zero	
			$('.oppn_confl').text(0);
			
			//make the column visible
			//$(".oppn_confl").css("display", "table-cell");
			
			$('#preclusion_data tr').each(function (i, row) {
				var entrycode = $(row).find(".team1").html().trim();
				var oppn = $(row).find(".team2").html().trim();
				if ( $("#team"+oppn+"bracket").text().trim() == bracket && $("#team"+oppn+"loss").text().trim() != "" ) {
					var n_conflicts = $("#team" + entrycode + "confl_oppn").text().trim() ;
					n_conflicts++;
					$("#team"+entrycode+"confl_oppn").text(n_conflicts);
				}
			});

		}
		
		fire_pullup = function() {
			
			//show the pullup buttons; hide the other action buttons
			$(".bye_button").css("display", "none");
			$(".bye_info").css("display", "none");
			$(".pull_button").css("display", "table-cell");
			$(".pair_button").css("display", "none");
			$(".pullup_info").css("display", "none");
			$(".side_info").css("display", "table-cell");
			$(".oppn_info").css("display", "none");
			$(".conflict_info").css("display", "none");
			
			//test: Do you need a pullup?
			if ($("#0L_n_in_bracket").text() % 2 == 0 ) {
				str_message = "There are " + $("#0L_n_in_bracket").text() +" teams in the undefeated bracket, and that's an even number, so you don't need a pullup.  Move to the next step.\n";
				display_message(str_message);
				return;
			}
	
			//set it to auto so it will log correctly
			$("#manual_override").prop('checked', false);

			//count the side to pull up
			var due_aff = 0;
			var due_neg = 0;
			var pull_from = "";
			$('#tbl_bracket tr').each(function (i, row) {
				var losses = $(row).find("span.losses").html();
				if ( losses == 0 ) {
					var side_due = $(row).find("span.side_due").text().trim();
					if ( side_due == "AFF" ) { due_aff++; }
					if ( side_due == "NEG" ) { due_neg++; }
				}
			});
			str_message = "In the undefeated bracket there are " + due_aff + " teams due aff and " + due_neg + " teams due neg.\n";
			if ( due_aff > due_neg ) {
				str_message += "You should pull up a team due NEG.\n" ;
				pull_from = "NEG";
			}
			if ( due_aff < due_neg ) {
				str_message += "You should pull up a team due AFF.\n" ;
				pull_from = "AFF";
			}
			if ( due_aff == due_neg ) {
				str_message += "Can pull up a team due either side.\n" ;
				pull_from = "ANY";
			}
			var candidates = [];
			var candidates_num = [];
			var ctr = 0;
			str_message += "Candidates for a pull up are: ";
			$('#tbl_bracket tr').each(function (i, row) {
				var entrycode = $(row).find("span.entrycode").html();
				var losses = $(row).find("span.losses").html();
				var side_due = $(row).find("span.side_due").text().trim();
				var has_bye = false;
				if ( $(row).find("span.curr_oppn").text().trim() == "BYE" ) { has_bye = true; }
				if ( losses == 1 && (side_due == pull_from || pull_from == "ANY" || side_due == "--" ) && has_bye == false ) {
					ctr = ctr + 1;
					str_message = str_message + " (" + ctr + ") " + entrycode.trim();
					candidates[ctr] = entrycode.trim();
					candidates_num[ctr] = $(row).find('#team_id').text().trim();
				}
			});
		
			change_bracket_display(1);
			count_clean_opponents( 0 );
			var random_pick = Math.floor((Math.random() * ctr) + 1); 
			str_message = str_message + "\nThe computer randomly selects (" + random_pick + ") " +  candidates[random_pick] + " to be pulled up; ";
			
			//save it				
			display_message(str_message);
			pullme( candidates_num[random_pick] ); //this saves to change log so you don't have to do it here
				
			//set it back to manual so it will log correctly
			$("#manual_override").prop('checked', true);
	
		}

		get_current_bracket = function () {
			
			var bracket = 2;
			if ( $("#bracketlabel").text() == "0-loss bracket" ) { bracket = 0; }
			if ( $("#bracketlabel").text() == "1-loss bracket" ) { bracket = 1; }
			return bracket; 
		
		}
		
		pair_teams = function() {

			//hide the bye and pullup info
			$(".bye_info").css("display", "none");
			$(".bye_button").css("display", "none");
			$(".pull_button").css("display", "none");
			$(".pullup_info").css("display", "none");
			
			count_clean_opponents( get_current_bracket() );
			$(".conflict_info").css("display", "table-cell");
			$(".oppn_info").css("display", "table-cell");
			$(".side_info").css("display", "table-cell");
			$(".side_due").css("display", "table-cell");
			$(".pair_button").css("display", "table-cell");

			//show either current opponent or the choose button
			$(".curr_oppn").css("display", "none");
			$(".choose_button").css("display", "none");
			$('#tbl_bracket > tbody > tr').each(function (i, row) {
				if ( $(row).find("span.curr_oppn").text().trim() == "" ) {
					$(row).find("span.choose_button").css("display", "table-cell");
				} else {
					$(row).find("span.curr_oppn").css("display", "table-cell");
				}

			});

		}
		
		draw_bye = function() {

			//show the bye; hide the other action buttons
			$(".bye_info").css("display", "table-cell");
			$(".bye_button").css("display", "table-cell");
			$(".pull_button").css("display", "none");
			$(".pair_button").css("display", "none");
			$(".pullup_info").css("display", "none");
			$(".conflict_info").css("display", "none");
			$(".oppn_info").css("display", "table-cell");
			$(".oppn_confl").css("display", "table-cell");

			//if there are an even number of teams you don't need a bye, so bail...
			var str_message = "";
			var preamble="";
			n_teams = $("#tbl_bracket tr").size() - 1;
			if (n_teams % 2 == 0 ) {
				str_message = "There are " + n_teams +" teams in this bracket, and that's an even number, so you don't need a bye.\n";
				str_message = str_message + "HOWEVER, make sure that you have both brackets displayed and the number of teams accurately counted.";
				display_message(str_message);
				return;
			}

			// If there's already a bye, bail

			var is_bye = false;
			$('#tbl_bracket tr').each(function (i, row) {
				if ( $(row).find("span.curr_oppn").text().trim() == "BYE" ) { is_bye = true; }
			});
			if ( is_bye == true ) {
				window.alert("There is already a bye!  You should NOT change the bye once it is assigned.  If you really, really must, delete the bye and try again.");
				return;
			}

			//set it to auto so it will log correctly
			$("#manual_override").prop('checked', false);
		
			// OK, you're pulling a bye, so set up a ctr varialbe so the
			// computer can skip stuff once it finds one
			var ctr = 0;
			
			// First, check to see if there are 3 left and only 1 is
			// undefeated.  If so, you're done, and just mark the ctr variable
			// to show that someone is being pulled up

			if ( n_teams == 3 && parseInt( $("#0L_n_in_bracket").text() ) == 1 ) {

				//make the down-1 bracket the one that gets displayed
				change_bracket_display( 0 );

				//this is kinda academic, but no reason to leave it hanging
				count_clean_opponents( 1 );

				//do this last so if it bonks you won't think things are OK
				display_message("There are 3 teams left and one undefeated, so the bye goes to the undefeated.\n");
				//bail from the function
				return;
			}

			//It's not that easy, so you need an array to store pullup candidates
			var candidates = [];
			var candidates_num = [];
			
			//you need a bye, so first look for teams with 1 loss, never had a bye, and HAVE hit an undefeated
			preamble="These teams have 1 loss, have not had a bye and have lost to an undefeated team:\n";
			$('#tbl_bracket tr').each(function (i, row) {
				var entrycode = $(row).find("span.entrycode").html();
				var losses = $(row).find("span.losses").html();
				var hit_undefeated = $(row).find("span.hit_undefeated").html();
				var had_bye_already = $(row).find("span.had_bye_already").html();
				if ( losses == 1 && hit_undefeated != 0 && had_bye_already == 0 ) {
					ctr = ctr + 1;
					str_message = str_message + " (" + ctr + ") " + entrycode.trim();
					candidates[ctr] = entrycode.trim();
					candidates_num[ctr] = $(row).find('#team_id').text().trim();
				}
			});
			
			//If there are no teams, drop the "hit an undefeated" requirement
			if (ctr == 0 ) {
				preamble="There were no teams with 1 loss, no bye, and a loss to an to an undefeated team; drawing from 1-loss teams with no bye:\n";
				$('#tbl_bracket tr').each(function (i, row) {
					var entrycode = $(row).find("span.entrycode").html();
					var losses = $(row).find("span.losses").html();
					var had_bye_already = $(row).find("span.had_bye_already").html();
					if ( losses == 1 && had_bye_already == 0 ) {
						ctr = ctr + 1;
						str_message = str_message + " (" + ctr + ") " + entrycode.trim();
						candidates[ctr] = entrycode.trim();
						candidates_num[ctr] = $(row).find('#team_id').text().trim();
					}
				});
			}

			//If there are still no teams, drop the 1-loss requirement -- my read is that this is implied in the NSDA rules but not explicitly stated
			if (ctr == 0 ) {
				preamble = preamble + "There were no teams with 1 loss and no bye; drawing from all teams who have not yet had a bye:\n";
				$('#tbl_bracket tr').each(function (i, row) {
					var entrycode = $(row).find("span.entrycode").html();
					var had_bye_already = $(row).find("span.had_bye_already").html();
					if ( had_bye_already == 0 ) {
						ctr = ctr + 1;
						str_message = str_message + " (" + ctr + ") " + entrycode.trim();
						candidates[ctr] = entrycode.trim();
						candidates_num[ctr] = $(row).find('#team_id').text().trim();
					}
				});
			}
			
			var random_pick = 0;
			str_message = preamble + str_message;

			if (ctr > 1) {			
				random_pick = Math.floor((Math.random() * ctr) + 1); 
				str_message = str_message + "\nThe computer randomly selects (" + random_pick + ") " +  candidates[random_pick] + " to receive the bye; ";
			} else if (ctr == 1) {
				random_pick = 1;
				str_message = str_message + "\nThere's only one eligible team, so give " +  candidates[1] + " the bye; ";
			}

			if ( $("#manual_override").prop('checked') == true ) {
				str_message = str_message + "you can manually assign the bye below.";
			} else {
				str_message = str_message + "the computer has automatically assigned the bye.";
			}

			display_message(str_message);
				
			change_bracket_display( 1 );
			count_clean_opponents( 0 );

			//save it; this will display as auto-saved				
			givebye(candidates_num[random_pick], ''); //givebye also saves to the change log, so you don't have to do it here
			window.alert("Bye has been assigned and saved; review the information on the screen.");

			//set it to manual so it will log correctly
			$("#manual_override").prop('checked', true);
			
		}
		
		save_pairing = function( entry, wins, seed ) {

			//let the user bail if there's a conflict
			if ( $("#team"+entry+"conflict_info").text().trim() != "n/a" ) {
				var doit = window.confirm("These teams have a conflict; click OK to pair them anyway or cancel to cancel:");
				if ( doit == false ) { return; }
			}
			
			//load entry_to_pair values
			var entry_to_pair_entry = $("#entry_to_pair_entry").html();
			var entry_to_pair_wins = $("#entry_to_pair_wins").html();
			var entry_to_pair_preset_seed = $("#entry_to_pair_preset_seed").html();

			//make sure there's a team selected
			if (entry_to_pair_entry.length == 0) {	 
				alert("You must choose a team to pair first from the left hand column");
				return;
			}

			//warn of side conflict
			if ( $("#team"+entry_to_pair_entry+"side_due").text().trim() == $("#team"+entry+"side_due").text().trim() && $("#team"+entry+"side_due").text().trim() != "--" ) {
				var doit = window.confirm("These teams are both due on the same side; click OK to pair them anyway or cancel to cancel:");
				if ( doit == false ) { return; }
			}
			
			//let the user know if the team is paired already
			if ( $("#team"+entry_to_pair_entry+"curr_oppn").text().trim() != "" || $("#team"+entry+"curr_oppn").text().trim() != "" ) {
				window.alert("One of these teams are already paired!  Delete the pairing below and try again, or select another team.");
				return;
			}
			
			//set sides correctly
			var team1;
			var wins1;
			var seed1;
			var team2;
			var wins2;
			var seed2;
			
			if ( $("#team"+entry_to_pair_entry+"side_due").text().trim() == "NEG" ||  $("#team"+entry+"side_due").html().trim() == "AFF" ) {
				team1 = entry;
				wins1 = wins;
				seed1 = seed;
				team2 = entry_to_pair_entry;
				wins2 = entry_to_pair_wins;
				seed2 = entry_to_pair_preset_seed;
			} else {
				team1 = entry_to_pair_entry; 
				wins1 = entry_to_pair_wins; 
				seed1 = entry_to_pair_preset_seed;
				team2 = entry; 
				wins2 = wins; 
				seed2 = seed;
			}

			//get round and bracket
			var curr_rd = <% $round_id %>;
			var bracket = $("#team"+entry_to_pair_entry+"loss").text().trim();
			
			//save it
			$.post("/panel/manipulate/save_pairing.mas",{ 
				round_id          : curr_rd,
				team1             : team1,
				wins1             : wins1,
				seed1             : seed1,
				team2             : team2,
				wins2             : wins2,
				seed2             : seed2,
				bracket_to_return : -42
			}, function(dummy){ 
				panel_id = parseFloat(dummy);
				update_screen_after_pairing(panel_id, team1, team2, bracket);
			}); 

			//log it if this is a manual change; if it's auto, that will save at the end
			if ( $("#manual_override").prop('checked') == true ) {
				$("#info_box_text").text('');
				save_to_change_log("Manual pair of " + entry_to_pair_entry + " vs " + entry);
			}
		}

	</script>

		<div class="nospace">

			<span class="twothird nospace"> 
				<h4><% $event->abbr %> <% $round->realname %> </h4>
			</span>

			<span class="third rightalign nospace right">
				<h4 id="bracketlabel">Both brackets</h4> 
			</span>

		</div>

		<div id="info_box" class="panel" style="display:none" >
			<hr>
			<center>
			<textarea 
				rows  = "4"
				cols  = "120"
				id    = "info_box_text"
				class = "flip centeralign redtext strong"
			>Nobody clears; they can all go home.  Click this text to suppress it...
			</textarea>
			</center>
		</div>

		<div class="nospace">
			<span class="twothird nospace right martop">

				<div id="instruction_header" class="nospace rightalign">
					<h5 class="nospace">Tap an entry code to find a match</h5>
				</div>	

				<a class="right pair_button hidden" id="autopair_link" onclick="autopair()">
					Autopair bracket
				</a>
			</span>
		</div>

		<& /funclib/tablesorter.mas, table => "tbl_bracket" &>
		
		<table id="tbl_bracket" class="martop">
	
			<thead>
				<tr class="yellowrow">
					<th class="smaller" title="Entry Designation">Code</th>	<!-- #0 -->
					<th class="smaller" title="Entry ID" style='display:none'>Code</th>	<!-- #0 -->					
					<th class="smaller" title="Seed">Seed</th>				<!-- #1 -->
					<th class="smaller" title="Losses">Losses</th>			<!-- #2 -->
					<th class="smaller side_info" title="Sides" style='display:none'>Side</th>			<!-- #3 -->
					<th class="smaller side_info" title="Side Due" style='display:none'>Due</th>			<!-- #3 -->
					<th class="smaller bye_info" title="HadBye" style='display:none' >Byes</th>			<!-- #4 -->
					<th class="smaller conflict_info" id="conflict_info" title="Info about conflicts with opponents" style='display:none' >conflict info</th>			<!-- #4 -->
					<th class="smaller oppn_info" id="oppn_info_hdr" title="number of conflicts with other teams in the bracket" style='display:none'>Conflicts</th>	<!-- #5 -->					
					<th class="smaller pullup_info" title="Times pulled up/pulled down" style='display:none'>Pulled Up</th>	<!-- #5 -->
					<th class="smaller" title="Action" colspan="3">Action</th>	<!-- #6 -->
				</tr>
			</thead>
			
			<tbody class="smallish">

%				my @keys = keys %entries;
%				@keys = sort {$entries{$a}->{'seed'} <=> $entries{$b}->{'seed'}} @keys;

%				foreach my $key (@keys) { 

					<tr class="rightalign bracket<% $entries{$key}{'placement'} %>" id="team<% $key %>" >

						<!-- Col 0, entry -->
						<td class="nospace leftalign" id="team<% $key %>name">
%								unless ($key == $entry_to_pair) { 
								<a class="limit3 padleft nowrap white entry_anchor" id="<% $key %>" title="<% $entries{$key}{'code'} %>"
								onclick="show_opponents( <% $key %>, '<% $entries{$key}{'code'} %>', <% $entries{$key}{'wins'} %>, <% $entries{$key}{'seed'} %> )">
%								}
								<!-- Throughout the table, the span lets you access the <td> info when you iterate -->
								<span class = "entrycode">
									<% $entries{$key}{'code'} %>
								</span>
							</a>
						</td>

						<!-- Col X, ID; there may be a cleaner way to do this, but I seem to need it -->
						<td id="team_id" style='display:none'>
							<% $key %>
						</td>
						
						<!-- Col 1, seed -->
						<td class="centeralign" id="team<% $key %>seed">
							<span class = "seed">
								<% $entries{$key}{'seed'} %>
							</span>
						</td>

						<!-- Col 2, losses -->
						<td class="centeralign" id="team<% $key %>loss">
							<span class = "losses">
								<% $entries{$key}{'losses'} %>
							</span>
						</td>
		
						<!-- Col 3, sides -->
						<td class="centeralign side_info" style='display:none' id="team<% $key %>side">
							<% $entries{$key}{'n_aff'} %> aff, 
							<% $entries{$key}{'n_neg'} %> neg
						</td>

						<!-- Col X, side due; was using had_bye_already($key) to find sides due, but I don't think that's in the rules -->
%						my $side_due="--";
%						if ( $entries{$key}{'n_aff'} - $entries{$key}{'n_neg'} > 0 ) { $side_due="NEG"; }
%						if ( $entries{$key}{'n_neg'} - $entries{$key}{'n_aff'} > 0 ) { $side_due="AFF"; }
						<td class="centeralign side_info" id="team<% $key %>side_due" style='display:none'>
							<span class = "side_due">
								<% $side_due %>
							</span>
						</td>

						<!-- Col 4, bye -->
%						my $warn = had_bye_already($key);
						<td class="centeralign bye_info" id="team<% $key %>bye" style='display:none'>
							<span class = "had_bye_already">
								<% $warn %>
							</span>
						</td>

						<!-- Col 4, bye -->
						<td 
							class = "centeralign conflict_info"
							id    = "team<% $key %>conflict_info"
							style = 'display:none'
						>
							<span class = "conflict_info">
								n/a
							</span>
						</td>

						<!-- Col X, number of conflicts with possible undefeated oppon -->
						<td 
							class = "centeralign oppn_info oppn_confl"
							id    = "team<% $key %>confl_oppn"
							style = 'display:none'
						>
							0
						</td>

						<!-- Col 5, pullup status -->			
						<td class="centeralign pullup_info" style='display:none' id="team<% $key %>pullup">
							<% $entries{$key}{'pulled_up'} %> / <% $entries{$key}{'got_pullup'} %>
						</td>

						<!-- Col 6, oppn -->
%						#set display flag for columns 10 and 11							
%						undef $display_flag;
%						$display_flag="style='display:none'" ;

						<td class="leftalign padleft nospace pair_button" id="team<% $key %>oppn">

<%perl>
							if ( $entries{$key}{'opponent'} > 0 
								|| $entries{$key}{'opponent'} == -1
							) { 
								$display_flag="style='display:table-cell'" ;
							}

</%perl>

							<span id="team<% $key %>curr_oppn" class="curr_oppn" <% $display_flag %> >

								<a 	
									class="white full" 
									onclick="deletepanel( 
										<% $entries{$key}{'panel'} %>, 
										<% $key %>, 
										<% $entries{$key}{'opponent'} %> 
									)"
								>

									<% $entries{$entries{$key}{'opponent'}}{'code'} %>
%									if ( $entries{$key}{'opponent'} == -1 ) {
										BYE
%									}
								</a>
							</span>

							<span class="choose_button" id="team<% $key %>choose_button" style='display:none' >

								<a 
									class="centeralign dkblue button" 
									onclick="save_pairing( 
										<% $key %>, 
										<% $entries{$key}{'wins'} %>, 
										<% $entries{$key}{'seed'} %> 
									)">
									Choose							
								</a>
							</span>
						</td>	

%						#	Col x, the pullup button; hidden by default
%						#   activated when by button clicked

						<td  class="nospace pull_button" id="team<% $key %>pullup_button" style='display:none'>
%							my $pull_dir_arrow = "&uarr;";
%							if ( $entries{$key}{'placement'} == 0 ) { $pull_dir_arrow = "&darr;"; }
							<a id="pullbutton<% $key %>" class="dkblue centeralign button narrow nowrap" onclick="pullme(<% $key %>);" >
								Pull <% $pull_dir_arrow %>
							</a>
						</td>		


%						# Col x, the bye button; hidden by default and activated when clicking on the bye -->							
						<td class="nospace bye_button" id="team<% $key %>bye_button" style='display:none'>
%							$warn = had_bye_already($key);
							<a id="byebutton<% $key %>" class="dkblue centeralign button narrow" onclick="givebye(<% $key %>, '<% $warn %>' );">
								Bye
							</a>
						</td>

						<td id="team<% $key %>bracket" style='display:none'>
							<% $entries{$key}{'placement'} %>
						</td>		

<%doc>

							For byes, you need to know if they have hit an
							undefeated team before; this marks whether they
							have but doesn't display it	

</%doc>
						
%						my $hit_undefeated=0;
%						foreach my $key1 (keys %precluded) {
%							if ($precluded{$key}{$key1} == 1 && ($round->name - $entries{$key1}{'wins'} - 1 ) == 0 && $entries{$key}{'school'} !=  $entries{$key1}{'school'}) { $hit_undefeated = $entries{$key1}{'code'}; }
%						}

%#		 Col x, have you hit an undefeated team

						<td id="team<% $key %>hit_undefeated" style="display:none">
							<span class = "hit_undefeated">
								<% $hit_undefeated %>
							</span>
						</td>		

					</tr>

%				}			

			</tbody>

		</table>

		<h4>Current Pairings</h4> 
		
		<table id="pairings">
		
			<thead>
				<tr class="yellowrow">
					<th class="smaller"><% $aff_string %></th>
					<th class="smaller"><% $neg_string %></th>
					<th class="smaller nosort" colspan="3">Action</th>
				</tr>
			</thead>
				
			<tbody class="smallish">

<%perl> 

			my @panels = Tab::Panel->search( round=>$round_id );			

			foreach my $panel (@panels) {

				my @ballots = Tab::Ballot->search( panel=>$panel->id );

				my $aff = 0; 
				my $neg = 0; 
				my $bye = ""; 
				my $warning = "";

				foreach my $ballot (@ballots) {

					if ($ballot->side == 1) { 
						$aff = $ballot->entry; 
					}

					if ($ballot->side == 2) { 
						$neg = $ballot->entry; 
					}

					if ($panel->bye or $ballot->bye) { 
						$aff = $ballot->entry; 
						$bye = "BYE"; 
					}

					if ($ballot->side != 1 and $ballot->side != 2 and $bye eq "" and $aff == 0) {

						$aff = $ballot->entry; 
						$warning = "SIDE ERROR";

					} elsif ($ballot->side != 1 and $ballot->side != 2 and $bye eq "" and $neg == 0) {
						
						$neg = $ballot->entry; 
						$warning = "SIDE ERROR";

					}

				}

</%perl> 

				<tr id="pair<% $panel->id %>">
					<td>
						<span class="twothird nowrap">
							<% $entries{$aff}{'code'} %>
						</span>
						
						<span class="third">
							<% $round->name - $entries{$aff}{'wins'} - 1 %> losses  <% $warning %> 
						</span>
					</td>

					<td>
%						if ($entries{$neg}) { 
							<span class="twothird nowrap">
								<% $entries{$neg}{'code'} %> 
							</span>
							<span class="third">
								<% $round->name - $entries{$neg}{'wins'} - 1 %> losses <% $warning %> 
							</span>
%						}
%						if ($bye) {
							BYE
%						}
					</td>

					<td>
						<a class="dkred button" onclick="deletepanel( <% $panel->id %>, <% $aff %>, <% $ neg %> );">
							Delete
						</a>
					</td>
				</tr>

%			}

			</tbody>
				
			</table>

%			if ($person->site_admin) { 
				<br />
%				$end = time(); 
				Total time: <% printf("%.2f\n", $end - $start) %>
%			}

<%doc>
		OK, the preclusions are only marked if they've hit before or if they
		are from the same school.  I'm marking if they are from the same
		school, so if not, they've hit before.  I'm also removing previous byes
		as a conflict, since you can get 2 byes at the NSDA.
</%doc>

	
		<table id="preclusion_data" style="display:none;" >
%		foreach my $key1 (keys %precluded) {
%			foreach my $key2 (keys %{$precluded{$key1}}) {
%				my $reason="Hit before.";
%				if ( $entries{$key1}{'school'} ==  $entries{$key2}{'school'} ) { $reason="Same school."; }
%				if ($key1 != -1 && $key2 != -1 && $key1 != $key2 ) {
					<tr>
						<td class="team1" > <% $key1 %> </td>
						<td class="team2" > <% $key2 %> </td>
						<td class="reason" > <% $reason %> </td>						
					</tr>
%				}
%			}	
%		}
		</table>
	
		<p id="entry_to_pair_entry" style="display:none;"></p>
		<p id="entry_to_pair_wins" style="display:none;"></p>
		<p id="entry_to_pair_preset_seed" style="display:none;"></p>				
</div>

	<div class="menu">
		
		<div class="sidenote center">
			<a class="dkblue padmuchmore center" onclick='show_help()'>Help -- what do I do here?</a>
		
			<a class="blue block" href="/panel/schemat/show.mhtml?round_id=<% $round_id %>">
				Return to round <% $round->realname %> Schematic
			</a>
			
			<a class="blue block" href="nsda_debate_checks_and_confirm?round_id=<% $round_id %>">
				Check for disasters and confirm round <% $round->realname %> Schematic
			</a>
			
		</div>

		
		<div class="sidenote">

			<h4>Info and Display</h4>
			
			<div class="even full padless">
			<a class="twofifths" onclick='change_bracket_display(0)' >
				Show undefeateds
			</a>
			<span class="threefifths">
				In bracket:
				<span id="0L_n_in_bracket" class="half">
					<% $aff_teams_in_bracket %>
				</span><br>
				Paired:
				<span id="0L_paired_already">
					<% $paired_teams %>
				</span><br>
				Unpaired:
				<span id="0L_left_to_pair" class="half">
					<% $unpaired_teams %> 
				</span>
			</span>
			</div>
			
			<div class="odd full padless">
			<a class="twofifths" onclick='change_bracket_display(1)'>
				Show one-loss
			</a>
			<span class="threefifths">
				In bracket:
				<span id="1L_n_in_bracket" class="half">
					<% $aff_teams_in_bracket %>
				</span><br>
				Paired:
				<span id="1L_paired_already">
					<% $paired_teams %>
				</span><br>
				Unpaired:
				<span id="1L_left_to_pair" class="half">
					<% $unpaired_teams %> 
				</span>
			</span>
			</div>

			<div class="even full padless">
			<a class="twofifths" onclick='change_bracket_display(2)'>
				Show All
			</a>
			<span class="threefifths">
				In bracket:
				<span id="n_in_bracket" class="half">
					<% $aff_teams_in_bracket %>
				</span><br>
				Paired:
				<span id="paired_already">
					<% $paired_teams %>
				</span><br>
				Unpaired:
				<span id="left_to_pair" class="half">
					<% $unpaired_teams %> 
				</span>
			</span>
			</div>
			
			<a id="clear" onclick='reset_anchor_styles()'>
				Clear Team Selection
			</a>

		</div>
		
		<div class="sidenote" id="bracket_changes" >

			<h4>Bracket Actions</h4>

				<div id="overall_status" class="red full" >
					Complete the tasks below:
				</div>
			
				<div >
				<a class="yellow half" onclick='draw_bye()'>
						STEP ONE: Draw the bye
					</a>
					<a id="bye_ok" class="half green">
						text here
					</a>
				</div>
				
				<div >
					<a id="collapse_up" class="yellow  half" onclick='fire_pullup()'>
						STEP TWO: Pull ups
					</a>
					<a id="pullup_ok" class="half red">
						text here
					</a>
				</div>
				<div>
					<a  class="yellow half" onclick='pair_teams()'>
						STEP THREE: Pair teams
					</a>
					<a id="pairings_ok" class="half red">
						text here
					</a>
				</div>
				<div style="display:none" >
					<input type="checkbox" id="manual_override" checked="true" > (manual over-ride) <br>
				</div>
		</div>

<!--
		removed this; these can all be done by going back to the pairing screen, brackets don't need to be reset anymore,
		and if we send it to dump the whole round it doesn't come back to the right spot, plus you can just click the delete
		button like 10 times if you really need to do it
-->
		<div class="sidenote" style="display:none">

			<h4>Round Changes</h4>

			<a class="yellow block" href="reset_bracket.mas?round_id=<% $round_id %>&winsonly=showlosses&fromjava=fromnsda">Reset brackets to loss totals</a>

<!--			<a class="yellow block" href="index.mhtml">Exit and assign rooms (inactive) </a>
				<a class="yellow block" href="index.mhtml">Exit and assign judges (inactive)</a>
				<a class="yellow block" href="reset_bracket.mas?round_id=<% $round_id %>&winsonly=false&fromjava=true">Reset brackets using current pairings</a>
-->

			<a class="martop dkred block" href="/funclib/round_dump.mas?round_id=<% $round_id %>&from_pairing=Redsox&fromjava=true">Dump Whole Round</a>

		</div>
		

	</div>
