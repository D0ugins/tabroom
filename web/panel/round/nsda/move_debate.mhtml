<%args>
	$person
	$tourn
	$entry_id     => undef
	$panel_marker => undef
</%args>
<%init>

	$m->clear_buffer;
	$r->content_type('application/json');

	my $origin_entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my ($panel_id, $side) = split(/_/, $panel_marker) if $panel_marker;
	my $target_panel = Tab::Panel->retrieve($panel_id) if $panel_id;

	unless ($target_panel && $origin_entry) { 

		$m->print('{ 
			"error": true,
			"message": "No debate for '.$panel_id.' or entry for '.$entry_id.' found.  Please refresh this page and start again"}
		');
		$m->abort;
	}
	unless ($side) {
		$m->print('{ 
			"error": true,
			"message": "No debate side sent: '.$side.'"}
		');
		$m->abort;
	}

	Tab::Panel->set_sql( origin => "
		select panel.* 
			from panel, ballot
			where panel.round = ? 
			and panel.id = ballot.panel
			and ballot.entry = ? 
	");

	Tab::Entry->set_sql( target => "
		select entry.* 
			from entry, ballot
			where ballot.panel = ? 
			and ballot.side = ? 
			and ballot.entry = entry.id
	");

	my $origin_panel = Tab::Panel->search_origin($target_panel->round->id, $origin_entry->id)->first;

	if ($origin_panel == $target_panel) { 
		$m->abort();
	}

	my $target_entry = Tab::Entry->search_target($target_panel->id, $side)->first;

	my $origin_side;

	Tab::Score->set_sql( wipe_scores => " 
		delete score.* 
		from score, ballot 
		where score.ballot = ballot.id
		and ballot.entry = ? 
		and ballot.panel = ? 
	");

	Tab::Ballot->set_sql( swap => "
		update ballot set entry = ? 
			where panel = ? 
			and entry = ? 
	");

	my $description;

	if ($origin_panel && $origin_entry && $target_entry) { 


		Tab::Score->sql_wipe_scores->execute($origin_entry, $origin_panel);
		Tab::Ballot->sql_swap->execute($target_entry, $origin_panel, $origin_entry);
		$description .= "Moved ".$target_entry->code." to ".$origin_panel->letter;

		my $ob = $origin_panel->ballots( entry => $target_entry )->first;
		$origin_side = $ob->side;

	}

	if ($target_panel && $target_entry && $origin_entry) { 
		Tab::Score->sql_wipe_scores->execute($target_entry, $target_panel);
		Tab::Ballot->sql_swap->execute($origin_entry, $target_panel, $target_entry);
		$description .= ".  Moved ".$origin_entry->code." to ".$target_panel->letter;
	}

	my $now = DateTime->now();

	my $changeline = Tab::ChangeLog->create({ 
		type        => 'tabbing',
		event       => $target_entry->event->id,
		entry       => $origin_entry->id,
		person      => $person->id,
		tourn       => $tourn->id,
		created     => $now,
		description => $description
	});

    $m->print('{
		"error"        : false,
		"message"      : "'.$description.'",
		"origin_panel" : "'.$origin_panel.'",
		"origin_side"  : "'.$origin_side.'",
		"target_entry" : "'.$target_entry.'"
	}');

	$m->abort();

</%init>
