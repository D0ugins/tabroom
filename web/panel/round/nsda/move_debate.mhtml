<%args>
	$person
	$tourn
	$entry_id     => undef
	$panel_marker => undef
</%args>
<%init>

	$m->clear_buffer;

	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;

	my ($panel_id, $side) = split(/_/, $panel_marker) if $panel_marker;

	my $panel = Tab::Panel->retrieve($panel_id) if $panel_id;

	Tab::Ballot->set_sql( round_and_entry => "
		select distinct ballot.*
		from ballot, panel
		where ballot.entry = ? 
		and ballot.panel = panel.id
		and panel.round = ? 
	");

	unless ($panel && $entry) { 

		$m->print("No panel or entry found.  Please refresh this page and start again");
		$m->abort;

	} else { 

		my $now = DateTime->now();

		my $round = $panel->round;

		my $err;
		my $origin;
		my $origin_id;

		foreach my $ballot (
			Tab::Ballot->search_round_and_entry(
				$entry->id,
				$round->id
			)
		) { 

			if ($ballot->audit) { 
				$err = "These ballots have scores! ";
				$err .= "Please use the entry screen interfaces to make changes
				because you can do some serious damage here!";

			} else { 

				$origin_id = $ballot->panel->id;
				$origin = "Section ".$ballot->panel->letter." speaker ".$ballot->speakerorder;
				$ballot->delete;

			}

		}

		if ($err) { 

			$m->print($err);
			$m->abort;

		} else { 

			my @judges = $m->comp(
				"/funclib/panel_judges.mas", 
				panel => $panel
			);

			my $ballot;

			if (@judges) { 

				foreach my $judge (@judges) {

					$ballot = Tab::Ballot->create({
						panel => $panel->id,
						judge => $judge->id,
						entry => $entry->id,
						side  => $side
					});
				}

			} else { 

				$ballot = Tab::Ballot->create({
					panel => $panel->id,
					judge => 0,
					entry => $entry->id,
					side  => $side
				});

			}

			my $side = "Aff";
			$side = "Neg" if $side == 2;

			my $description = "Moved ".$entry->code." to ".$panel->letter." side ".$side." from $origin";

			my $changeline = Tab::ChangeLog->create({ 
				type        => 'tabbing',
				event       => $panel->round->event->id,
				entry       => $entry->id,
				tourn       => $tourn->id,
				person      => $person->id,
				created     => $now,
				description => $description
			});

			$m->print($description);
			$m->abort;

		}

	}

	$m->abort;

</%init>
