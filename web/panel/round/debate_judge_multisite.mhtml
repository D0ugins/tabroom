<%args>
	$tourn
	$person
	$round_id
</%args>
<%init>

	use List::Util 'shuffle';

	my $round = Tab::Round->retrieve($round_id);
	my $round_type = $round->type;

	$m->comp("/funclib/round_clear_judges.mas",
		round => $round,
		nobye => 1
	);

	my $cap_repel = "10"
		if $round->event->setting("wsdc_cap_repel");

	my %priorities = (
		same_school => 1000000000000,
		conflict    => 100000000000,
		repeated    => 10000000000,
		site_move   => 1000000000,
		cap_repel   => $cap_repel,
		no_ones     => 10000000000,
		rating      => 1000000,
		avg_rating  => 100000,
		schoolmate  => 1000,
		regionmate  => 100,
		same_region => 100,
		gender      => 10,
		panelmate   => 1
	);

	my $allow_repeat_judging = $round->event->setting("allow_repeat_judging");
	$priorities{"repeated"} = .1 if $allow_repeat_judging;

	my $allow_repeat_elims = $round->event->setting("allow_repeat_elims");
	$priorities{"repeated"} = 100 if $allow_repeat_elims;

	my $disallow_repeat_drop = $round->event->setting("disallow_repeat_drop");

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $round_time = $round->timeslot->start;
	my $today_start_string = $round_time->ymd("-")." 00:00:00";
	my $today_end_string = $round_time->ymd("-")." 23:59:59";

	my $event = $round->event;
	my $category = $event->category;

	Tab::Round->set_sql( today => "
		select round.*
		from round, timeslot
		where round.timeslot = timeslot.id
		and timeslot.start > ?
		and timeslot.start < ?
		and round.event = ?
	");

	my @todays_rounds =
		Tab::Round->search_today(
			$today_start_string, $today_end_string, $round->event->id
		);

	my %is_today = map {$_->id => 1} @todays_rounds;

	my %judges;
	my %entries;
	my %panels;
	my %rounds;

	# Try to keep the judge in the same location

	foreach my $today (@todays_rounds) {

		my @round_judges = $m->comp(
			"/funclib/round_judges.mas",
			round => $today
		);

		foreach my $round_judge (@round_judges) {

			$judges{$round_judge->id}{"site"} = $round_judge->site;

			# Must undef the judge object or otherwise this judge object will
			# collide with the ones below:

			undef $round_judge;
		}
	}

	my @clear_judges;

	my @all_judges =  $m->comp(
		"/funclib/category_judges.mas",
		category => $category,
		active   => 1
	);

	my %strikes = $m->comp(
		"/funclib/category_strikes.mas",
		category => $category
	);

	foreach my $all_judge (@all_judges) {

		# Eliminate judges who are time struck, event struck or non-elim struck

		next if $strikes{$all_judge->id}{"rounds"}{$round->id};

		$judges{$all_judge->id}{"rating"} = $all_judge->tab_rating;

		$judges{$all_judge->id}{"neutral"} = $all_judge->neutral;
		$judges{$all_judge->id}{"diversity"} = $all_judge->diversity;
		$judges{$all_judge->id}{"cap"} = $all_judge->cap;

		if ($all_judge->school) {

			$judges{$all_judge->id}{"school"} = $all_judge->school->id;

			$judges{$all_judge->id}{"region"} = $all_judge->school->region->id
				if $all_judge->school->region
		}

		push @clear_judges, $all_judge->id;

	}

	my $num_judges = $round->setting("num_judges");
	$num_judges = 1 unless $num_judges;

	my @round_entries = $m->comp(
		"/funclib/round_entries.mas",
		round => $round
	);

	foreach my $entry (@round_entries) {

		push @{$panels{$entry->panelid}{"entries"}}, $entry->id;

		$entries{$entry->id}{"school"} = $entry->schname;
		$entries{$entry->id}{"region"} = $entry->regname;

	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare('

		select ballot.id, panel.id, round.id, round.name, round.type,
			judge.id, judge.school, school.region,
			entry.id, entry.school, entry_school.region,
			room.id, room.site, score.value

			from (ballot, panel, round, judge, entry)

			left join school on judge.school = school.id
			left join school entry_school on entry.school = entry_school.id
			left join room on panel.room = room.id
			left join score on score.ballot = ballot.id
				and score.tag = "winloss"
				and score.value = 1

			where judge.category = ?
			and judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and ballot.entry = entry.id
	');

	$sth->execute($category->id);

	while( my

			($ballot_id, $panel_id, $round_id, $round_name, $round_type,
				$judge_id, $judge_school, $judge_region,
				$entry_id, $entry_school, $entry_region,
				$room_id,  $site_id, $winner )

		= $sth->fetchrow_array() ) {

		if ($allow_repeat_elims && $round_type eq "elim") {

			if ($disallow_repeat_drop) {
				$judges{$judge_id}{$entry_id} += 100000 unless $winner;
			} else {
				$judges{$judge_id}{$entry_id} ++;
			}

		} else {
			$judges{$judge_id}{$entry_id}++;
		}

		$rounds{$round_id}{"number"} = $round_name;
		$rounds{$round_id}{"type"} = $round_type;
		push @{$rounds{$round_id}{"panels"}}, $panel_id;

		$panels{$panel_id}{"round"} = $round_id;
		push @{$panels{$panel_id}{"entries"}}, $entry_id;
		push @{$panels{$panel_id}{"judges"}}, $judge_id;

		$panels{$panel_id}{"room"} = $room_id;
		$panels{$panel_id}{"site"} = $site_id;

	}

	foreach my $panel_id (keys %panels) {

		foreach my $judge_id (@{$panels{$panel_id}{"judges"}}) {

			foreach my $other_id (@{$panels{$panel_id}{"judges"}}) {

				$judges{$judge_id}{"panelmate"}{$other_id}++;

			}
		}
	}

	my @this_round_panel_objs = shuffle($round->panels);
	my @this_round_panels;

	foreach my $panel (@this_round_panel_objs) {

		next if $panel->bye;

		$panels{$panel->id}{"room"} = $panel->room->id
			if $panel->room;

		$panels{$panel->id}{"site"} = $panel->room->site->id
			if $panel->room && $panel->room->site;

		push @this_round_panels, $panel->id;

	}

	my $total_ratings;
	my $count_ratings;
	my $total_needed = (scalar @this_round_panels) * $num_judges;

	@all_judges = sort {$judges{$a}{"rating"} <=> $judges{$b}{"rating"}} @all_judges;

	my $top_rating_threshold;
	my $cutoff = scalar (@this_round_panels) / 3;

	foreach my $all_judge (@all_judges) {

		next if $strikes{$all_judge->id}{"rounds"}{$round->id};

		$total_ratings += $judges{$all_judge->id}{"rating"};
		$count_ratings++;

		last if $count_ratings >= $total_needed;

		unless ($top_rating_threshold) {
			if ($count_ratings > $cutoff) {
				$top_rating_threshold = $judges{$all_judge->id}{"rating"};
			}
		}
	}

	$priorities{"top_rating_threshold"} = $top_rating_threshold;

	$judges{"all"}{"average_rating"} = sprintf("%.1f", ($total_ratings / $count_ratings));

	my %used;

	foreach my $pass (1 .. $num_judges) {

		if ($pass % 2) {

			@this_round_panels = reverse(@this_round_panels);

		} else {

			@this_round_panels = shuffle(@this_round_panels);

		}

		foreach my $panel_id (@this_round_panels) {

			my @judges = @{$panels{$panel_id}{"judges"}}
				if $panels{$panel_id}{"judges"};

			next if (scalar @judges) >= $num_judges;

			my $candidate_judge_id;
			my $best_score;

			foreach my $judge_id (@clear_judges) {

				next if $used{$judge_id};

				push @{$panels{$panel_id}{"judges"}}, $judge_id;

				my $score = multisite_score_panel(
					$panel_id, \%judges, \%panels, \%priorities, \%strikes, \%entries);

				my $nope = pop @{$panels{$panel_id}{"judges"}};

				$best_score = $score if not defined $best_score;
				$candidate_judge_id = $judge_id if not defined $candidate_judge_id;

				if ($score < $best_score) {
					$best_score = $score;
					$candidate_judge_id = $judge_id;
				}

			}

			if ($candidate_judge_id) {

				push @{$panels{$panel_id}{"judges"}}, $candidate_judge_id;
				$used{$candidate_judge_id}++;

				$panels{$panel_id}{"score"} += $best_score;
			}

		}

	}

	# Now we do the shuffle shuffle.

	foreach my $pass (1 .. 10) {

		foreach my $panel_id (shuffle(@this_round_panels)) {

			foreach my $judge (@{$panels{$panel_id}{"judges"}}) {

				my $swap_panel;

				my $swap_judge;

				my $current_improvement;

				my $own_baseline = multisite_score_panel(
					$panel_id, \%judges, \%panels, \%priorities, \%strikes, \%entries);

				my $own_now;
				my $other_original;
				my $other_now;

				@{$panels{$panel_id}{"judges"}} =
					grep { $_ != $judge } @{$panels{$panel_id}{"judges"}};

				foreach my $other_panel_id (@this_round_panels) {

					foreach my $candidate (@{$panels{$other_panel_id}{"judges"}}) {

						my $other_baseline = multisite_score_panel(
							$other_panel_id,
							\%judges,
							\%panels,
							\%priorities,
							\%strikes,
							\%entries
						);

						@{$panels{$other_panel_id}{"judges"}} =
							grep { $_ != $candidate } @{$panels{$other_panel_id}{"judges"}};

						# Do the swap and score it

						push @{$panels{$other_panel_id}{"judges"}}, $judge;
						push @{$panels{$panel_id}{"judges"}}, $candidate;

						my $other_new = multisite_score_panel(
							$other_panel_id,
							\%judges,
							\%panels,
							\%priorities,
							\%strikes,
							\%entries);

						my $own_new = multisite_score_panel(
							$panel_id,
							\%judges,
							\%panels,
							\%priorities,
							\%strikes,
							\%entries);

						# Undo the damage

						@{$panels{$panel_id}{"judges"}} =
							grep { $_ != $candidate } @{$panels{$panel_id}{"judges"}};

						@{$panels{$other_panel_id}{"judges"}} =
							grep { $_ != $judge } @{$panels{$other_panel_id}{"judges"}};

						push @{$panels{$other_panel_id}{"judges"}}, $candidate;

						# If the swap is better than what came before, then
						# register the swap

						my $improvement = $own_baseline + $other_baseline - $own_new - $other_new;

						if ($improvement > $current_improvement) {

							$swap_panel = $other_panel_id;
							$swap_judge = $candidate;

							$current_improvement = $improvement;

							$own_now = $own_new;
							$other_original =$other_baseline;
							$other_now = $other_new;

						}

					}

				}

				if ($swap_panel && $swap_judge) {

					@{$panels{$swap_panel}{"judges"}} =
						grep { $_ != $swap_judge } @{$panels{$swap_panel}{"judges"}};

					push @{$panels{$swap_panel}{"judges"}}, $judge;
					push @{$panels{$panel_id}{"judges"}}, $swap_judge;


				} else {

					# Leave the judge where they came from if no improving swap
					# exists.

					push @{$panels{$panel_id}{"judges"}}, $judge;

				}

			}

		}

	}

	foreach my $panel_id (@this_round_panels) {

		@{$panels{$panel_id}{"judges"}} =
			sort {$judges{$a}{"rating"} <=> $judges{$b}{"rating"}}
			@{$panels{$panel_id}{"judges"}};

		my $chair = 1;

		foreach my $judge (@{$panels{$panel_id}{"judges"}}) {

			$m->comp("/funclib/panel_judgeadd.mas",
				panel_id => $panel_id,
				chair    => $chair,
				judge_id => $judge
			);

			undef $chair;
		}

		my $final_score = multisite_score_panel(
			$panel_id,
			\%judges,
			\%panels,
			\%priorities,
			\%strikes,
			\%entries,
			1
		);

	}

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id);

	sub multisite_score_panel {

		my ($panel_id,
			$judges_ref,
			$panels_ref,
			$priorities_ref,
			$strikes_ref,
			$entries_ref,
			$final) = @_;

		my $score = 0;

		# Same nation, conflicts, same_region

		if (${$panels_ref}{$panel_id}{"entries"}) {

			foreach my $entry (@{${$panels_ref}{$panel_id}{"entries"}}) {

				foreach my $judge (@{${$panels_ref}{$panel_id}{"judges"}}) {

					my $judge_entry_score;

					$judge_entry_score += ${$priorities_ref}{"repeated"}
						* ${$judges_ref}{$judge}{$entry};

					$judge_entry_score += ${$priorities_ref}{"conflict"}
						if ${$strikes_ref}{$judge}{"school"}{${$entries_ref}{$entry}{"school"}};

					$judge_entry_score += ${$priorities_ref}{"conflict"}
						if ${$strikes_ref}{$judge}{"entry"}{$entry};

					next if ${$judges_ref}{$judge}{"neutral"} > 0;

					$judge_entry_score += ${$priorities_ref}{"same_school"}
						if ${$judges_ref}{$judge}{"school"} > 0
						&& ${$judges_ref}{$judge}{"school"} == ${$entries_ref}{$entry}{"school"} ;

					$judge_entry_score += ${$priorities_ref}{"same_region"}
						if ${$judges_ref}{$judge}{"region"} == ${$entries_ref}{$entry}{"region"} ;

					$judge_entry_score += ${$priorities_ref}{"same_region"}
						if ${$strikes_ref}{$judge}{"region"}{${$entries_ref}{$entry}{"region"}};

					$score += $judge_entry_score;

				}

			}

		}

		# CAP repellent

		my $has_cap;

		foreach my $judge (@{${$panels_ref}{$panel_id}{"judges"}}) {
			$has_cap++ if ${$judges_ref}{$judge}{"cap"} > 0;
		}

		if ($has_cap) {

			foreach my $other_panel_id (keys %{$panels_ref}) {

				next if $other_panel_id == $panel_id;

				next if ${$panels_ref}{$other_panel_id}{"site"}
					!= ${$panels_ref}{$panel_id}{"site"};

				foreach my $other_judge (@{${$panels_ref}{$other_panel_id}{"judges"}}) {

					next unless ${$judges_ref}{$other_judge}{"cap"} > 0;

					$score += ${$priorities_ref}{"cap_repel"} * $has_cap;

				}

			}

		}

		# Judge specific stuff

		my $number_of_ones;
		my $total_rating;

		foreach my $judge (@{${$panels_ref}{$panel_id}{"judges"}}) {

			my $judge_score;

			$total_rating += ${$judges_ref}{$judge}{"rating"};

			$number_of_ones++
				if ${$judges_ref}{$judge}{"rating"}
				<= ${$priorities_ref}{"top_rating_threshold"};

			if (${$panels_ref}{$panel_id}{"room"}) {

				$judge_score += ${$priorities_ref}{"site_move"}
					if ${$judges_ref}{$judge}{"site"}
					&& ${$judges_ref}{$judge}{"site"} != ${$panels_ref}{$panel_id}{"site"};
			}

			my $diverse_diff = 1;

			foreach my $other (@{${$panels_ref}{$panel_id}{"judges"}}) {

				next unless $other > 0;
				next unless $judge > 0;

				next if $other == $judge;

				$judge_score += ${$priorities_ref}{"regionmate"}
					if ${$judges_ref}{$judge}{"region"}
					&& ${$judges_ref}{$judge}{"region"} == ${$judges_ref}{$other}{"region"};

				$judge_score += ${$priorities_ref}{"regionmate"}
					if ${$judges_ref}{$judge}{"region"}
					&& ${$judges_ref}{$judge}{"region"} == ${$strikes_ref}{$other}{"region"};

				$judge_score += ${$priorities_ref}{"schoolmate"}
					if ${$judges_ref}{$judge}{"school"} == ${$judges_ref}{$other}{"school"};

				undef $diverse_diff if ${$judges_ref}{$judge}{"diversity"} > 0;

				$judge_score += ${$priorities_ref}{"panelmate"} * ${$judges_ref}{$judge}{"panelmate"}{$other};

			}

			$judge_score += ${$priorities_ref}{"diversity"} * $diverse_diff;

			$score += $judge_score;

		}

		$score += ${$priorities_ref}{"no_ones"} unless $number_of_ones;

		$score += ${$priorities_ref}{"avg_rating"} *
			abs($total_rating - ${$judges_ref}{"all"}{"average_rating"});

		$score += ${$priorities_ref}{"rating"} * $total_rating;

		return $score;

	}

#	$m->print('<div class="main">');

#	$m->print("<pre>".Dumper(%panels)."</pre>");

#	$m->print("<pre>".Dumper(%rounds)."</pre>");

#	$m->print("<pre>".Dumper(%strikes)."</pre>");

#	$m->print('</div>');


</%init>
