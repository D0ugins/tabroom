<%args>
	$tourn
	$perms
	$defaults    => undef
	$session     => undef
	$category_id => undef
	$jpool_id    => undef
</%args>
<%init>

	my ($eventref, $catref) = $m->comp(
		"/funclib/allowed_events.mas",
		tourn => $tourn,
		perms => $perms,
		type  => "admin"
	);

	unless ($catref) {
		$m->comp("/funclib/abort.mas",
			message => "The system found no categories that you have full access to"
		);
	}

	my $category;

	foreach my $cat (@{$catref}) {
		if ($cat->id == $category_id) {
			$category = $cat;
		}
	}

	if (not defined $category) {
		foreach my $cat (@{$catref}) {
			if ($cat->id == $defaults->{category}) {
				$category = $cat;
			}
		}
	}

	if ($defaults && $category && $defaults->{category} ne $category) {
		$defaults->{category} = $category->id;
		$session->default($defaults);
		$session->update();
	}

	if (not defined $category) {
		$category = ${$catref}[0];
	}

	my @jpools;
	my @parents;
	my $parent;

	Tab::JPool->columns(TEMP => "judgecount");

	if ($ARGS{"nsda_nats"} && $category->setting("nats_category")) {

		unless ($perms->{"owner"} || $perms->{"full_admin"}) {
			$m->comp("/funclib/abort.mas",
				message => "Only full tournament admins may access judge pooling functions"
			);
		}

		#I said to myself, that log had a child.
		Tab::JPool->set_sql( parents => "
			select jpool.*,
				count(judge.id) as judgecount
			from (jpool, jpool child)
				left join jpool_judge jpj on jpj.jpool = jpool.id
				left join judge on jpj.judge = judge.id

			where jpool.category = ?
				and child.parent = jpool.id
			group by jpool.id
			order by jpool.name
		");

		@parents = Tab::JPool->search_parents($category->id);

		# Apparently I am super inconsistent about plurals sometimes.
		if ($ARGS{"parent"} eq "orphan" || $ARGS{"parent"} eq "orphans") {

			Tab::debuglog("dingbat");

			Tab::JPool->set_sql( orphans => "
				select jpool.*,
					count(judge.id) as judgecount
				from (jpool)
					left join jpool_judge jpj on jpj.jpool = jpool.id
					left join judge on jpj.judge = judge.id

				where jpool.category = ?

				and not exists (
					select jps.id
						from jpool_setting jps
					where jps.jpool = jpool.id
						and jps.tag = 'registrant'
				)

				and (jpool.parent = 0 or jpool.parent is NULL)

				group by jpool.id
				order by jpool.name
			");

			@jpools = Tab::JPool->search_orphans($category->id);

		} elsif ($ARGS{"parent"}) {

			Tab::JPool->set_sql( children => "
				select jpool.*,
					count(judge.id) as judgecount
				from (jpool)
					left join jpool_judge jpj on jpj.jpool = jpool.id
					left join judge on jpj.judge = judge.id

				where jpool.category = ?
				and jpool.parent = ?

				and not exists (
					select jps.id
					from jpool_setting jps
					where jps.jpool = jpool.id
					and jps.tag = 'registrant'
				)

				group by jpool.id
				order by jpool.name
			");

			foreach my $cand (@parents) {
				if ($ARGS{"parent"} == $cand->id) {
					$parent = $cand;
				}
			}

			@jpools = Tab::JPool->search_children($category->id, $ARGS{"parent"});

		} else {

			@jpools = @parents;

		}


	} elsif ($category) {
		@jpools = sort {$a->name cmp $b->name} $category->jpools;
	}

	my $jpool;

	if ($jpool_id) {
		$jpool = Tab::JPool->retrieve($jpool_id);
	}

	unless ($jpool || $ARGS{"no_default"}) {
		$jpool = $jpools[0] if @jpools;
	}

	my %jpool_settings = $m->comp(
		"/funclib/jpool_settings.mas",
		category => $category
	);

	return ($category, $catref, $jpool, \@jpools, \%jpool_settings, $parent, \@parents);

</%init>
