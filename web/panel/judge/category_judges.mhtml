<%args>
	$tourn
	$tourn_settings
	$person
	$perms
	$category_id => undef
	$clear       => undef
	$panelsize   => undef
	$round_type  => undef
	$timeslot_id => undef
</%args>
<%init>

	unless ($category_id) { 
		$m->print("No judge category sent.  Hit back and try again");
		$m->abort();
	}

	my ($event, $eventsref, $category, $categoriesref, 
		$jpool, $jpoolsref, $jpool_settingsref, 
		$childrenref) = $m->comp("pools.mas", 
			tourn       => $tourn,
			nsda_nats   => $tourn_settings->{"nsda_nats"},
			perms       => $perms,
			category_id => $category_id
		);

	$m->abort() unless $category;

	my %events;
	my %category_settings = $category->all_settings();

	foreach my $event ($category->events) { 

		if ( $event->type ne "speech" 
			&& $event->type ne "congress" 
			&& (not defined $event->setting("round_robin"))
		) { 
			my $err = "You have attempted to assign judges to a debate event en masse.  ";
			$err .= "That will not work very well. <br /><br /> Pair with the Schemats menu instead";
			$m->redirect("index.mhtml?category_id=".$category->id."&err=$err");
		}

		$events{$event->id}{"region_judge_forbid"} = $event->setting("region_judge_forbid");
		$events{$event->id}{"allow_judge_own"} = $event->setting("allow_judge_own");

		%{$events{$event->id}{"settings"}} = $event->all_settings;
	}

	$m->print('<div class="main">');
	$m->print('<h2>Paneling judges in '.$category->abbr.'</h2>');
	$m->flush_buffer;

	my @panels;
	my @ballots;

	my $same_school++ if $category->setting("allow_school_panels");
	my $ncfl++ if $tourn->setting("ncfl");

	my $timeslot = 
		Tab::Timeslot->retrieve($timeslot_id) 
		if $timeslot_id 
		&& $timeslot_id ne "all";

    my $description = $person->first." ".$person->last." (".$person->email.")";
	$description .= " has repaneled the judges in category ".$category->abbr;
	$description .= " timeslot ".$timeslot->name if $timeslot;
	$description .= " (all timeslots) " if $timeslot_id eq "all";
	$description .= " round type ".$round_type if $round_type;
	$description .= ".  Existing judge assignments were wiped out." if $clear;
	$description .= ".  Existing judge assignments were preserved." unless $clear;

	my $now = DateTime->now();

    Tab::ChangeLog->create({ 
        type        => 'tabbing',
        tourn       => $category->tourn->id,
        person      => $person->id,
		created     => $now,
        description => $description
    }); 

	$m->print('<p>'.$description.'</p>');

	if ($clear) { 

		$m->print("<P>Clearing out existing judge assignments...");
		$m->flush_buffer;

		if ($timeslot_id ne "all" && $round_type ne "all") { 
	
			Tab::Ballot->set_sql( remove_judges_rtts => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id 
				and event.category = ? 
				and event.id = entry.event
				and entry.id = ballot.entry
				and round.timeslot = ?
				and round.type = ?
			");

			Tab::Ballot->set_sql( remove_scores_rtts => "
				delete score.* 
				from score, ballot, panel, round, event
				where score.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.category = ?
				and round.timeslot = ?
				and round.type = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots_rtts => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.category = ? 
					and round.timeslot = ?
					and round.type = ?
			");

			Tab::Ballot->sql_dedupe_ballots_rtts->execute($category->id, $timeslot_id, $round_type);
			Tab::Ballot->sql_remove_judges_rtts->execute($category->id, $timeslot_id, $round_type);
			Tab::Ballot->sql_remove_scores_rtts->execute($category->id, $timeslot_id, $round_type);
			Tab::Ballot->sql_dedupe_ballots_rtts->execute($category->id, $timeslot_id, $round_type);

		} elsif ($timeslot_id ne "all") { 

			Tab::Ballot->set_sql( remove_judges_ts => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id 
				and event.category = ? 
				and event.id = entry.event
				and entry.id = ballot.entry
				and round.timeslot = ?
			");

			Tab::Ballot->set_sql( remove_scores_ts => "
				delete score.* 
				from score, ballot, panel, round, event
				where score.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.category = ?
				and round.timeslot = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots_ts => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.category = ? 
					and round.timeslot = ?
			");

			Tab::Ballot->sql_dedupe_ballots_ts->execute($category->id, $timeslot_id);
			Tab::Ballot->sql_remove_judges_ts->execute($category->id, $timeslot_id);
			Tab::Ballot->sql_remove_scores_ts->execute($category->id, $timeslot_id);
			Tab::Ballot->sql_dedupe_ballots_ts->execute($category->id, $timeslot_id);

		} elsif ($round_type ne "all") { 

			Tab::Ballot->set_sql( remove_judges_rt => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id 
				and event.category = ? 
				and event.id = entry.event
				and entry.id = ballot.entry
				and round.type = ?
			");

			Tab::Ballot->set_sql( remove_scores_rt => "
				delete score.* 
				from score, ballot, panel, round, event
				where score.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.category = ?
				and round.type = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots_rt => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.category = ? 
					and round.type = ?
			");

			Tab::Ballot->sql_dedupe_ballots_rt->execute($category->id, $round_type);
			Tab::Ballot->sql_remove_judges_rt->execute($category->id, $round_type);
			Tab::Ballot->sql_remove_scores_rt->execute($category->id, $round_type);
			Tab::Ballot->sql_dedupe_ballots_rt->execute($category->id, $round_type);

		} else { 

			Tab::Ballot->set_sql( remove_judges => "
				update ballot, panel, round, event, entry
				set ballot.judge = 0
				where ballot.panel = panel.id
				and ballot.entry = entry.id
				and entry.event = event.id
				and panel.round = round.id
				and round.event = event.id 
				and event.category = ? 
			");

			Tab::Ballot->set_sql( remove_scores => "
				delete score.* 
				from score, ballot, panel, round, event
				where score.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.event = event.id
				and event.category = ?
			");

			Tab::Ballot->set_sql( dedupe_ballots => "
				delete b2.*
					from ballot b1, ballot b2, panel, round, event
					where b1.entry = b2.entry
					and b1.panel = b2.panel
					and b1.id < b2.id
					and b1.panel = panel.id
					and panel.round = round.id
					and round.event = event.id
					and event.category = ? 
			");

			Tab::Ballot->sql_dedupe_ballots->execute($category->id);
			Tab::Ballot->sql_remove_judges->execute($category->id);
			Tab::Ballot->sql_remove_scores->execute($category->id);
			Tab::Ballot->sql_dedupe_ballots->execute($category->id);

		} 
		
		$m->print("...done</p>");
		$m->flush_buffer;

	}

    my %judge_rating = (); 

    if ($category->setting("coach_ratings")) { 
		
		$m->print("<P>Sorting judges by coach rating...");
		$m->flush_buffer;

		my %tier_names = map {$_->id => $_->name} $category->rating_tiers;

		foreach my $event ($category->events) { 

			my @ratings = $m->comp("/funclib/category_ratings.mas", event => $event);

			foreach my $rating (@ratings) { 
				$judge_rating{$rating->judgeid}{$event->id} 
					= $tier_names{$rating->ratingtierid} 
					if $rating && $rating->ratingtierid;
			}
		}

		$m->print("...done</p>");
		$m->flush_buffer;
    }

	# Get an array of the panels with a score that is the number of kids who
	# belong to the teams represented in the panel.  This is a rough idea of
	# how struck the panel is. 

	$m->print("<P>Scoring panels by difficulty of finding a judge...");
	$m->flush_buffer;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare(" 
		select panel.id, judge.id, ballot.id,
			round.type, round.name, timeslot.id, event.id, round.id,
			event.type,
			round_setting.value,
			count(distinct schooljudge.id), count(distinct entry.id)
		from (panel, round, event, timeslot, ballot)

		left join judge on ballot.judge = judge.id
		left join entry on entry.id = ballot.entry
		left join judge schooljudge 
			on schooljudge.category = event.category
			and schooljudge.school = entry.id
	
		left join school on judge.school = school.id
		left join region on school.region = region.id

		left join round_setting on round_setting.round = round.id
			and round_setting.tag = 'num_judges'

		where event.category = ? 
			and (event.type = 'speech' or event.type = 'congress') 
			and event.id = round.event
			and round.id = panel.round
			and round.timeslot = timeslot.id
			and ballot.panel = panel.id

		group by ballot.id
	");

	$sth->execute($category->id);

	my %panels;

	while (
		my ($panel_id, $judge_id, $ballot_id, 
			$local_type, $round_name, $local_timeslot_id, $event_id, $round_id,
			$event_type,
			$num_judges,
			$judgecount, $entrycount
		) = $sth->fetchrow_array()
	) { 

		next if $timeslot_id ne "all" && $local_timeslot_id != $timeslot_id;
		next if $round_type ne "all" && $local_type ne $round_type;

		$panels{$panel_id}{"score"}      = $judgecount;
		$panels{$panel_id}{"num_judges"} = $num_judges;
		$panels{$panel_id}{"num_judges"} = 1 unless $num_judges;
		$panels{$panel_id}{"entries"}    = $entrycount;

		$panels{$panel_id}{"judges"}{$judge_id}++ if $judge_id > 0;
		$panels{$panel_id}{"ballots"}{$ballot_id}++;
		$panels{$panel_id}{"event"}      = $event_id;
		$panels{$panel_id}{"event_type"} = $event_type;
		$panels{$panel_id}{"round"}      = $round_id;
		$panels{$panel_id}{"round_type"} = $local_type;
		$panels{$panel_id}{"round_name"} = $round_name;
	}

	$m->print("...done. <p>Finding clean judges for ".scalar(keys %panels)." panels.");
	$m->print(" The process will take a little while.</p>");
	$m->flush_buffer();

	my $empty_panels;
	my $count;
		
	PANEL:
	foreach my $panel_id (keys %panels) { 

		$count++;

		$m->print("<p>".$count." panels done...</p>") unless $count % 50;
		$m->flush_buffer();

		my $event_id = $panels{$panel_id}{"event"};
		my $num_judges = $panels{$panel_id}{"num_judges"};

		$num_judges = 1 unless $num_judges;
		$num_judges = $panelsize if $num_judges < $panelsize;
	
		# Skip if the panel already has enough judges
		my $already = scalar(keys %{$panels{$panel_id}{"judges"}});

		next PANEL if $already >= $num_judges;

		my %round_data = ( 
			id   => $panels{$panel_id}{"round"},
			name => $panels{$panel_id}{"round_name"},
			type => $panels{$panel_id}{"round_type"},
		);

		my %event_data = ( 
			id   => $panels{$panel_id}{"event"},
			type => $panels{$panel_id}{"event_type"},
		);

		my %judges = $m->comp("/funclib/clean_judges.mas", 
			panel_id          => $panel_id,
			round_data        => \%round_data,
			event_data        => \%event_data,
			category_settings => \%category_settings,
			tourn_settings    => $tourn_settings,
			event_settings    => $events{$event_id}{"settings"}
		);

		my @clean_judges = keys %judges; 

	    @clean_judges = 
			sort {$judges{$b}{"strikes"} <=> $judges{$a}{"strikes"}} 
			@clean_judges;

		@clean_judges = 
			sort {$judges{$a}{"ballots"} <=> $judges{$b}{"ballots"}}
			@clean_judges; # Most used to the bottom 

		@clean_judges = 
			sort {$judges{$a}{"standby"} <=> $judges{$b}{"standby"}}
			@clean_judges; #Standbys to the bottom

		if ($panels{$panel_id}{"round_type"} eq "prelim") { 
			@clean_judges = 
				sort {$judge_rating{$a}{$event_id} cmp $judge_rating{$b}{$event_id}} 
				@clean_judges;
		}
	
		# Ths will become the region (diocese) if we're running NCFLs.
		my %schools_used = ();  
	
		NEED:	
		foreach ($already .. $num_judges) { 
		
			unless (@clean_judges) { 
				$empty_panels++;
				next PANEL;
			}

			my $chosen_judge;

			JUDGE:
			foreach my $clean_judge (@clean_judges) { 
	
				# If that school or region is on this panel already, move to
				# the next candidate.

				my $school_id = $judges{$clean_judge}{"school_id"};
				my $region_id = $judges{$clean_judge}{"region_id"};

				unless ($same_school) { 

					next JUDGE if $schools_used{"dio-".$region_id};

					next JUDGE if $schools_used{"region-".$region_id} 
						&& $region_id 
						&& $events{$event_id}{"region_judge_forbid"};

					next JUDGE if $schools_used{"school-".$school_id}
						&& $school_id 
						&& (not defined $events{$event_id}{"allow_judge_own"});
				}
	
				# Otherwise, we've found our judge.
				$chosen_judge = $clean_judge;

				$schools_used{"school-".$school_id}++;
				$schools_used{"dio-".$region_id}++ if $ncfl && $region_id;

				if ($region_id && $events{$event_id}{"region_judge_forbid"}) { 
					$schools_used{"region-".$region_id}++;
				}

				last JUDGE;
			}
			
			unless ($chosen_judge) { 
				$empty_panels++;
				next PANEL;
			}

			$m->comp(
				"/funclib/panel_judgeadd.mas",  
				judge_id => $chosen_judge,
				panel_id => $panel_id
			);
		}
	}

</%init>

		<h4>Judge paneling done</h4>

		<p class="bluetext semibold">
			There were <% $empty_panels %> sections that I couldn't find judges for.
		</p>
		
		<span class="third centeralign">
			<a 
				class = "fourfifths buttonwhite bluetext hover invert"
				href  = "/panel/report/disasters.mhtml"
			>
				Check for Disasters
			</a>
		</span>

		<span class="third centeralign">
			<a 
				class = "fourfifths buttonwhite bluetext hover invert" 
				href  = "/panel/judge/chart.mhtml?category_id=<% $category->id %>"
			>
				See Judge Chart
			</a>
		</span>

	</div>

	<& menu.mas, 
		tourn             => $tourn,
		category          => $category,
		whoami            => "index",
		perms             => $perms,
		tourn_settings    => $tourn_settings,
		eventsref         => $eventsref,
		childrenref       => $childrenref,
		categoriesref     => $categoriesref,
		jpoolsref         => $jpoolsref,
		jpool_settingsref => $jpool_settingsref,
	&>

