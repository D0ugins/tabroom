<%args>
	$person
	$judge_id    => undef
	$tourn_id    => undef
	$category_id => undef
</%args>
<%init>

	my $category = Tab::Category->retrieve($category_id)
		if $category_id
		&& $category_id == int($category_id);

	unless ($category && $category->tourn->id == $tourn_id) {
		$m->comp('/funclib/abort.mas', warning => "You did not send a properly formatted category ID");
	}


	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my $now = DateTime->now();

	unless ($judge) {

		$judge = Tab::Judge->create({
			first    => $person->first,
			middle   => $person->middle,
			last     => $person->last,
			active   => 0,
			hired    => $ARGS{"hired"},
			category => $category->id,
			person   => $person->id,
		});

		$judge->setting("email", $person->email);
		$judge->setting("phone", $person->phone);
		$judge->setting("notes", $ARGS{"notes"});

		$judge->setting("self_registered", 1);
		$judge->setting("public_signup", 1);
		$judge->setting("public_signup_at", "date", $now);

	} else {

		$judge->setting("notes", $ARGS{"notes"});
		$judge->hired($ARGS{"hired"});
		$judge->update();
	}

	foreach my $shift ($category->shifts()) {

		next if $shift->type eq "strike";

		my $exists = $judge->strikes( shift => $shift->id )->first;

		if ($ARGS{$shift->id}) {

			$exists->delete() if $exists;

		} else {

			unless ($exists) {

				Tab::Strike->create({
					type       => "time",
					judge      => $judge->id,
					shift      => $shift,
					start      => $shift->start,
					end        => $shift->end,
					conflictee => 1,
					tourn      => $category->tourn->id,
					entered_by => $person
				});
			}
		}
	}

	my $msg = "Judge registered and time constraints saved";

	$m->redirect("judge_signups.mhtml?tourn_id=$tourn_id&category_id=$category_id");

</%init>
