<%args>
	$tourn_id   => undef
	$country    => undef
	$state      => undef
	$circuit_id => undef
	$year       => undef
	$name       => undef
</%args>
<%init>

	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;

	my $now = DateTime->now;

	unless ($year) {
		$year = $now->year;
		$year-- if $now->month < 8;
	}

	my $fromstring = "$year-07-01 00:00:00";
	my $tostring = ($year + 1)."-07-01 00:00:00";

	if ($r->hostname eq "www.tabroom.com") {
		my $key = $tourn_id."-".$country."-".$state."-".$circuit_id."-".$year;
		return if $m->cache_self( key => $key, expires_in => '1h' );
	}

	my @published;

	Tab::Tourn->columns(TEMP => "circuit_id");
	Tab::Tourn->columns(TEMP => "circuit_abbr");

	my $limit;

	if ($state) {
		$state =~ s/[\W_]//g;
		$state = substr($state, 0, 2);

		if ($state) {
			$limit .= " and tourn.state = '".$state."'";
		}
	}

	if ($country) {
		$country =~ s/[\W_]//g;
		$country = substr($country, 0, 2);

		if ($country) {
			$limit .= " and tourn.country = '".$country."'";
		}
	}

	my $search_name = $name;

	if ($search_name) {
		$search_name =~ s/[^\w\s]//g;
	}

	$search_name = '%'.$search_name.'%';

	if ($circuit) {

		Tab::Tourn->set_sql(by_results_published => "
			select distinct tourn.*,
				GROUP_CONCAT(distinct circuit.name) as circuit_abbr
			from tourn, tourn_circuit, result_set, circuit
			where result_set.tourn = tourn.id
				and tourn.id = tourn_circuit.tourn
				and tourn.hidden != 1
				and tourn_circuit.circuit = ?
				and circuit.id = tourn_circuit.circuit
				and tourn.start > ?
				and tourn.end < ?
				and tourn.start < NOW()
				".$limit."
				and tourn.name like ?

			group by tourn.id
			order by tourn.start DESC
			limit 256
		");

		Tab::Tourn->set_sql(by_round_results_published => "
			select distinct tourn.*,
				GROUP_CONCAT(distinct circuit.name) as circuit_abbr
			from tourn, event, round, tourn_circuit, circuit
			where tourn.id = event.tourn
				and tourn.id = tourn_circuit.tourn
				and tourn.hidden != 1
				and tourn_circuit.circuit = ?
				and circuit.id = tourn_circuit.circuit
				and tourn.start > ?
				and tourn.end < ?
				and tourn.start < NOW()
				and tourn.name like ?
				and event.id = round.event
				".$limit."
				and round.post_primary > 2
			group by tourn.id
			order by tourn.start DESC
			limit 256
		");


		push @published, Tab::Tourn->search_by_round_results_published($circuit->id, $fromstring, $tostring, $search_name);
		push @published, Tab::Tourn->search_by_results_published($circuit->id, $fromstring, $tostring, $search_name);

	} else {

		Tab::Tourn->set_sql(by_results_published => "
			select distinct tourn.*,
				GROUP_CONCAT(distinct circuit.name) as circuit_abbr
			from (tourn, result_set)
				left join tourn_circuit on tourn.id = tourn_circuit.tourn
				left join circuit on tourn_circuit.circuit = circuit.id
			where result_set.tourn = tourn.id
				and tourn.hidden != 1
				and tourn.start > ?
				and tourn.end < ?
				and tourn.start < NOW()
				".$limit."
				and tourn.name like ?
			group by tourn.id
			order by tourn.start DESC
			limit 256
		");

		Tab::Tourn->set_sql(by_round_results_published => "
			select distinct tourn.*,
				GROUP_CONCAT(distinct circuit.name) as circuit_abbr
			from (tourn, event, round)
				left join tourn_circuit on tourn.id = tourn_circuit.tourn
				left join circuit on tourn_circuit.circuit = circuit.id
			where tourn.id = event.tourn
				and tourn.hidden != 1
				and tourn.start > ?
				and tourn.end < ?
				and event.id = round.event
				and round.post_secondary > 2
				and tourn.start < NOW()
				".$limit."
				and tourn.name like ?
			group by tourn.id
			order by tourn.start DESC
			limit 256
		");

		push @published, Tab::Tourn->search_by_round_results_published($fromstring, $tostring, $search_name);
		push @published, Tab::Tourn->search_by_results_published($fromstring, $tostring, $search_name);

	}

	my %seen = ();
	@published = grep { ! $seen{$_} ++ } @published;


</%init>

	<& menu.mas,
		circuit_id => $circuit_id,
		year       => $year,
		state      => $state,
		name       => $name,
		country    => $country
	&>

	<div class="main">

		<span class="half">
			<h2>Tournament Results</h2>
		</span>

		<span
			class = "half rightalign"
			id    = "results_buttonarea"
		>
		</span>

		<& "/funclib/tablesorter.mas", table => "results" &>

		<table id="results">

			<thead>

			<tr class="yellowrow">

				<th class="smaller">
					Dates
				</th>

				<th class="smaller">
					Tournament
				</th>

				<th class="smaller">
					Location
				</th>

				<th class="smaller">
					Circuit(s)
				</th>

				<th class="smaller nosort">

				</th>

			</tr>

			</thead>

			<tbody>

%			foreach my $tourn (sort {$b->start <=> $a->start} @published) {

%				my $circuits = $tourn->circuit_abbr;
%				$circuits =~ s/,/<br \/>/g;

				<tr class="row">

					<td class="smallish">
						<% Tab::pickerdate($tourn->start) %>
					</td>

					<td class="smallish">
						<a
							class="white full"
							href="/index/tourn/index.mhtml?tourn_id=<% $tourn->id %>"
						>
							<% $tourn->name %>
						</a>
					</td>

					<td class="smallish centeralign nospace">
						<a
							class="plain full marno"
							href="index.mhtml?state=<% $tourn->state ? $tourn->state : "" %>&country=<% $tourn->country ? $tourn->country : "" %>"
						>
							<% $tourn->location %>
						</a>
					</td>

					<td class="smaller nowrap">
						<% $circuits %>
					</td>

					<td class="centeralign padless marno">
						<a
							class="buttonwhite bluetext smallish normal invert"
							href="/index/tourn/results/index.mhtml?tourn_id=<% $tourn->id %>"
						>
							Results
						</a>
					</td>

				</tr>

%			}

			</tbody>

		</table>

	</div>
