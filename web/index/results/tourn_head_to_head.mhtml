<%args>
	$tourn_id
	$event_id
	$mode => undef
</%args>

<%init>

my $event = Tab::Event->retrieve($event_id);
my $tourn = Tab::Tourn->retrieve($tourn_id);
my $yr = $tourn->start->year;
if ( $tourn->start->month <= 7 ) {
    $yr = $yr - 1;
}
my $start_date = $yr.'-09-01';

##pull all entries in event

    ## send this to the funclib?
	## JB: I don't think it'll be reused so no

    my @entries =
        sort {$a->school->name cmp $b->school->name}
        $event->entries(active => 1);

    Tab::Event->set_sql( field_reports => "
		select event.* from event, event_setting
		where event.tourn = ?
		and event.id = event_setting.event
		and event_setting.tag = 'field_report'
		and event_setting.value = 1
		order by event.name
	");

	my @events = Tab::Event->search_field_reports($tourn_id);

	my %events_by_id = map { $_->id => 1} @events;

	if ($event) {

		unless ($events_by_id{$event_id}) {
			$m->print("<div class='blankfull centeralign'>");
			$m->print("<h6 class='martopmore marbottommore'>Please do not try to access information tournaments don't want published</h6>");
			$m->print("<p>Tabroom is a community resource and such shenanigans just make my life harder and therefore the site less good</p>");
			$m->print("<p>Seriously.  This shouldn't be hard.</p>");
			$m->print("</div>");
			$m->abort;
		}
	}

	##for each entry, pull all past entries this year and store them in a master list

    #entry id for current tourney stored in hash value for entries at past tourneys
    #so if entry 42 in the current tourney was entry 14 at a past tournament, past_entries{14}=42;
    my %past_entries;
	my %waitlist;

    #pull students for each entry
    foreach my $entry (@entries) {

        my @students = Tab::EntryStudent->search(
            entry => $entry->id
        );

        #pull all entries that involve
        my $student_query = "(";
            foreach my $student (@students) {
                if ($student_query ne "(" ) {
                    $student_query .= " OR ";
                }
                $student_query .= "entry_student.student=".$student->student;
            }
        $student_query .= ")";

        Tab::Entry->set_sql( entries => "
            select entry.* from entry, entry_student, event, tourn
            where tourn.start > '$start_date'
            and tourn.id=event.tourn
            and event.id=entry.event
            and entry.id=entry_student.entry
            and $student_query
        ");

        my @temp_entries = Tab::Entry->search_entries() if $student_query ne '()';

		if (@temp_entries) {

			#strip out those that don't have both students and add it to the master hash if they do
			foreach my $temp_entry (@temp_entries) {
				my @temp_students = Tab::EntryStudent->search(
					entry => $temp_entry->id
				);
				my $dummy=0;
				foreach my $student (@students) {
					foreach my $temp_student (@temp_students) {
						if ( $student->student == $temp_student->student ) { $dummy++; }
					}
				}
				if ( $dummy == scalar(@students) )  {
					$past_entries{$temp_entry->id} = $entry->id;
					$waitlist{$temp_entry->id} = $entry->waitlist;
				}
			}
        }

    }

#print "number of past_entries ".keys %past_entries; print "<br>";
#foreach my $key (keys %past_entries) {
#    print $key." ".$past_entries{$key}."<br>";
#}

my %panels; #panels{entry_id}{panel_id}{field}

</%init>
<script>

	function toggle_team_detail(team_id) {
		$(".team"+team_id).toggle();
	}

</script>

<style>

table {
  border-collapse: collapse;
}
td {
  border-bottom: 1pt solid black;
}

</style>

<h2 align="center">Head-to-Head records for teams entered in <% $event->name %> </h2>
<h3 align="center" > at <% $tourn->name %> </h3>
<h6>For the NDT, the wailisted teams are bid applicants</h6>
	<table >
		<thead>
			<tr class="yellowrow smaller">
				<th class="smallish">
					Team
				</th>
				<th class="smallish">
					Students
				</th>
				<th class="smallish">
					Win-Loss Pct
				</th>
				<th class="smallish">
					Vs waitlist
				</th>
				<th class="smallish">
					Vs Entered
				</th>
				<th class="smallish">
					Rounds
				</th>
				<th class="smallish">
					Details
				</th>
				<th class="smallish">

				</th>
				<th class="smallish">

				</th>
			</tr>
		</thead>
		<tbody>

<%perl>

##pull all panels by team (if the results are published)
my $number;

foreach my $entry (@entries) {

    my $str_entry = "(";
    foreach my $key (keys %past_entries) {
        if ( $past_entries{$key} == $entry->id && $entry->id != $key ) {
            if ( $str_entry ne "(" ) { $str_entry .= " OR "; }
            $str_entry.="ballot.entry=".$key;
        }
    }
    $str_entry .= ")";

    if ( $str_entry ne "()" ) {
		Tab::Panel->columns(TEMP => qw/entry_id/);
        Tab::Panel->set_sql( panels => "
            select panel.*, ballot.entry as entry_id
			from panel, ballot, round
            where panel.id = ballot.panel
			and round.id   = panel.round
			and round.published > 0
			and panel.bye      = 0
			and ballot.bye     = 0
			and ballot.forfeit = 0
            and $str_entry
			group by(panel.id)
        ");

        my @temp_panels = Tab::Panel->search_panels();

		my $dummy="";
		my $win = 0;
		my $loss = 0;
		my $win_vs_wl = 0;
		my $loss_vs_wl= 0 ;

        foreach my $panel ( @temp_panels ) {

            my ($str_dummy, $oppn, $outcome) = $m->comp("/funclib/panel_result_row.mas",
				panel        => $panel,
				entry_id     => $panel->entry_id,
				class_name   => "team".$entry->id,
				default_hide => 1
			);

			if ( $past_entries{$oppn} ) {
				$dummy.=$str_dummy;
				$win ++ if $outcome eq "Win";
				$loss ++ if $outcome eq "Loss";
				if ( $waitlist{$oppn} == 1 ) {
					$win_vs_wl ++ if $outcome eq "Win";
					$loss_vs_wl ++ if $outcome eq "Loss";
				}
			}
        }
		my $w_vs_entered = $win-$win_vs_wl;
		my $l_vs_entered = $loss-$loss_vs_wl;

		#team info
		$number++;
		my $row_type="class='oddblue'";
		if ( $number % 2 == 0 ) { $row_type = "class='evenblue'"; }
		print "<tr $row_type>";
		my $waitlist_flag; $waitlist_flag = " (waitlist)" if $entry->waitlist;
		print "<td>".$entry->code."$waitlist_flag</td>";
		print "<td>".$entry->name."</td>";
		print "<td>$win-$loss ";
		if ( ($win + $loss) > 0 )  {
			print sprintf("%d%%",($win/($win+$loss))*100)."</td>";
		} else {
			print "0%</td>";
		}
		print "<td>$win_vs_wl-$loss_vs_wl ";
		if ( ($win_vs_wl + $loss_vs_wl) > 0 )  {
			print sprintf("%d%%",($win_vs_wl/($win_vs_wl+$loss_vs_wl))*100)."</td>";
		} else {
			print "0%</td>";
		}
		print "<td>$w_vs_entered-$l_vs_entered ";
		if ( ($w_vs_entered + $l_vs_entered) > 0 )  {
			print sprintf("%d%%",($w_vs_entered/($w_vs_entered+$l_vs_entered))*100)."</td>";
		} else {
			print "0%</td>";
		}
		print "<td>".($win + $loss)."</td>";
		print "<td><a onclick='toggle_team_detail(".$entry->id.")'>show/hide details</a></td>";
		print "</tr>";
		#results header
		print "<tr class='evenblue smaller team".$entry->id."' style='display:none'><th class='smallish'>Tourney</th><th class='smallish'>Date</th><th class='smallish'>Round</th><th class='smallish'>Aff</th><th class='smallish'>Neg</th><th class='smallish'>Judge</th><th class='smallish'>Points</th><th class='smallish'>Decision(s)</th><th class='smallish'>Outcome</th></tr>";
		#results
		print $dummy;
    }
}

</%perl>

		</tbody>
	</table>
