<%args>
	$id1       => undef
	$id2       => undef
	$startdate => undef
	$enddate   => undef
</%args>
<%init>

	my $debug = 0;
	use Time::HiRes qw( time );
	use Data::Dumper;
	use JSON;
	use Encode qw(encode_utf8);
	my $start = time(); 
	unless ($id1) { 
		$id1 = $id2;
		undef $id2;
	}

	my $student1 = Tab::Student->retrieve( $id1 ) if $id1;
	my $student2 = Tab::Student->retrieve( $id2 ) if $id2;
		
	my ($panels_ref, $summary_ref) = $m->comp(
		"holdme_imscared.mas",
		id1 => $id1,
		id2 => $id2 
	);

	my %panels = %{$panels_ref};
	my %summary = %{$summary_ref};
	
	#print Dumper(%panels);
		
	my $json_panels = JSON->new->indent(0)->latin1(0)->canonical->allow_blessed->convert_blessed->encode( \%panels );
	my $json_summary = JSON->new->indent(0)->latin1(0)->canonical->allow_blessed->convert_blessed->encode( \%summary );

	#$m->print( $json_panels );
	
	$m->abort unless $student1 || $student2;
	$m->abort unless $student1->chapter;
	my $chpt_name = $student1->chapter->name;

	$chpt_name .= "/".$student2->chapter->name if ( 
		$student2 
		&& $student2->chapter 
		&& $student2->chapter->name ne $chpt_name
	) ;
	
</%init>

<html>

  <head>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.js"></script>
  </head>
	
	<style> 
		/*
			tiny little styling thing to alternate table row colors; should be supplanted with tabroom css but
			for now I can't figure out how to get it to run with tablesorter.mas
		*/
		
		table tbody tr:nth-child(odd) {
				background: #ccc;
		}
		
	</style>
  <body>
  	<div class="blankfull">
		<div class="full nospace">
			<span class="twothirds marno">

				<h2> Team Record <% $student1 ? $student1->first." ".$student1->last : "" %> 
					<% $student2 ? "&amp; ".$student2->first." ".$student2->last : "" %> </h2>

				<h3 class="nospace"> <% $chpt_name %> </h3>
			</span>

			<span class="twofifth rightalign marno">
				<input type="checkbox" id="show_points" checked> Show points<br>
				<input type="checkbox" id="show_judge" checked> Show judges<br>
				<input type="checkbox" id="show_past" checked> Show Prior Seasons<br>
			</span>
		<h6> For any tournament grid, click on the name of a tournament to view detailed results.</h6>
		</div>
		
		<div id="team_season_header"></div>  
		<div id="team_season"></div>
		<div id="header_seasonal_grid_together_this_yr"></div>
		<div id="show_all"></div><br><br>
		<div id="seasonal_grid_together_this_yr"></div>
		<br>
		<div id="header_tourney_detail_together_this_yr"></div>
		<div id="tourney_detail_together_this_yr"></div>
		
		<div id="spkr1_season_header"></div>
		<div id="spkr1_season"></div>
		<div id="header_seasonal_grid_spkr1_this_yr"></div>
		<div id="seasonal_grid_spkr1_this_yr"></div>
		<br>
		<div id="header_tourney_detail_spkr1_this_yr"></div>
		<div id="tourney_detail_spkr1_this_yr"></div>
		
		<div id="spkr2_season_header"></div>
		<div id="spkr2_season"></div>
		<div id="header_seasonal_grid_spkr2_this_yr"></div>
		<div id="seasonal_grid_spkr2_this_yr"></div>
		<br>
		<div id="header_tourney_detail_spkr2_this_yr"></div>
		<div id="tourney_detail_spkr2_this_yr"></div>
		
		<div id="team_season_header_past" class="past"></div>
		<div id="team_season_past" class="past"></div>
		<div id="header_seasonal_grid_together_past" class="past"></div>
		<div id="seasonal_grid_together_past" class="past"></div>
		<br>
		<div id="header_tourney_detail_together_past" class="past"></div>
		<div id="tourney_detail_together_past" class="past"></div>
		
		<div id="spkr1_header_past" class="past"></div>
		<div id="spkr1_past" class="past"></div>
		<div id="header_seasonal_grid_spkr1_past" class="past"></div>
		<div id="seasonal_grid_spkr1_past" class="past"></div>
		<br>
		<div id="header_tourney_detail_spkr1_past" class="past"></div>
		<div id="tourney_detail_spkr1_past" class="past"></div>
		
		<div id="spkr2_header_past" class="past"></div>
		<div id="spkr2_past" class="past"></div>
		<div id="header_seasonal_grid_spkr2_past" class="past"></div>
		<div id="seasonal_grid_spkr2_past" class="past"></div>
		<br>
		<div id="header_tourney_detail_spkr2_past" class="past"></div>
		<div id="tourney_detail_spkr2_past" class="past"></div>


<script type="text/babel">

function show_all() {
	ReactDOM.render(<Header3 txt_val="All rounds together as a team for the current season " />,  document.getElementById('header_tourney_detail_together_this_yr'));
	MakeDetailTable('All', 1, 'tourney_detail_together_this_yr', 3, '', '');
}

$(document).ready(function(){
    $("#show_past").click(function(){
		$(".past").toggle();
    });
});

function GetCols(myData) {

    var col=[];
    for(var propt in myData){
        for (var key in myData[propt]) {
            col.push({'key':key, 'label': key });
        }
        break;
    }

    return col;

}

var Header = React.createClass({

	render: function() {
			return (
				<h4 className="centeralign">{txt_val}</h4>
			);
	}

});

var Header2 = React.createClass({

	render: function() {
			return (
				<h5 className="alignleft">{txt_val}</h5>
			);
	}

});


var Header3 = React.createClass({

	//this function will erase the detail table
	handleClick: function(e) {
			MakeDetailTable('', 0, e.target.parentElement.parentElement.id.replace('header_','', ''), 4), '';
			MakeDetailTable('', 0, e.target.parentElement.parentElement.id, 4, '', '');
	},

	render: function() {
			
			var stuff = this;

			return (
					<h6 className="threequarter rightalign" onClick={stuff.handleClick}>{stuff.props.txt_val} &nbsp; (click here to hide) </h6>
			);
	}

});

var Table = React.createClass({

	render: function() {
			var headerComponents = this.generateHeaders(),
					rowComponents = this.generateRows();
			
			return (
					
					<table >
							<thead><tr className="yellowrow" >{headerComponents}</tr></thead>
							<tbody>{rowComponents}</tbody>
					</table>
			);
	},
	
	generateHeaders: function() {
			var cols = this.props.cols;  // [{key, label}]
	
			// generate our header (th) cell components
			return cols.map(function(colData) {
					return <th key={colData.key}>{colData.label}</th>;
			});
	},

	handleClick: function(e) {

		console.log(e);
		console.log(e.target.parentElement.cells[3].innerHTML);
		console.log("event:" + e.target.parentElement.cells[2].innerHTML);
		txt_val = e.target.innerHTML;
		if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_together_this_yr' ) {
				txt_val += " for team together on " + e.target.parentElement.cells[3].innerHTML;
				ReactDOM.render(<Header3 txt_val={txt_val} />,  document.getElementById('header_tourney_detail_together_this_yr'));
				MakeDetailTable(e.target.innerHTML, 1, 'tourney_detail_together_this_yr', 3, e.target.parentElement.cells[3].innerHTML, e.target.parentElement.cells[2].innerHTML);
		}
		if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_spkr1_this_yr' ) {
				txt_val += " for <% $student1->first." ".$student1->last %> with " + e.target.previousSibling.innerHTML + " on " + e.target.parentElement.cells[3].innerHTML;
				ReactDOM.render(<Header3 txt_val={txt_val} />,  document.getElementById('header_tourney_detail_spkr1_this_yr'));
				MakeDetailTable(e.target.innerHTML, 1, 'tourney_detail_spkr1_this_yr', 1, e.target.parentElement.cells[3].innerHTML, e.target.parentElement.cells[2].innerHTML);
		}

		if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_spkr2_this_yr' ) {
				txt_val += " for <% $student2 ? $student2->first." ".$student2->last : "" %> with " + e.target.previousSibling.innerHTML + " on " + e.target.parentElement.cells[3].innerHTML;
				ReactDOM.render(<Header3 txt_val={txt_val} />,  document.getElementById('header_tourney_detail_spkr2_this_yr'));
				MakeDetailTable(e.target.innerHTML, 1, 'tourney_detail_spkr2_this_yr', 2, e.target.parentElement.cells[3].innerHTML, e.target.parentElement.cells[2].innerHTML);
		}
		if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_together_past' ) {
				txt_val += " for team together on " + e.target.parentElement.cells[3].innerHTML;
				ReactDOM.render(<Header3 txt_val={txt_val} />,  document.getElementById('header_tourney_detail_together_past'));
				MakeDetailTable(e.target.innerHTML, 0, 'tourney_detail_together_past', 3, e.target.parentElement.cells[3].innerHTML, e.target.parentElement.cells[2].innerHTML);
		}
		if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_spkr1_past' ) {
				txt_val += " for <% $student1->first." ".$student1->last %> with " + e.target.previousSibling.innerHTML + " on " + e.target.parentElement.cells[3].innerHTML;
				ReactDOM.render(<Header3 txt_val={txt_val} />,  document.getElementById('header_tourney_detail_spkr1_past'));
				MakeDetailTable(e.target.innerHTML, 0, 'tourney_detail_spkr1_past', 1, e.target.parentElement.cells[3].innerHTML, e.target.parentElement.cells[2].innerHTML);
		}
		if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_spkr2_past' ) {
				txt_val += " for <% $student2 ? $student2->first." ".$student2->last : "" %> with " + e.target.previousSibling.innerHTML + " on " + e.target.parentElement.cells[3].innerHTML;
				ReactDOM.render(<Header3 txt_val={txt_val} />,  document.getElementById('header_tourney_detail_spkr2_past'));
				MakeDetailTable(e.target.innerHTML, 0, 'tourney_detail_spkr2_past', 2, e.target.parentElement.cells[3].innerHTML, e.target.parentElement.cells[2].innerHTML);
		}

  },
	
	generateRows: function() {
			
			var cols = this.props.cols,  // [{key, label}]
					data = this.props.data;
			var stuff = this;
			
			return data.map(function(item) {
					// handle the column data within each row
					var cells = cols.map(function(colData) {
	
							// colData.key might be "firstName"
							return <td >{item[colData.key]}</td>;
					});
					return <tr key={item.id}  onClick={ stuff.handleClick }>{cells} </tr>;
			});
	}

});


function MakeDetailTable(tourneyName, this_yr, post_to, spkr, str_date, str_event_name) {
	
	var new_arr = [];
	if ( spkr == 4 ) {
		console.log(post_to);
		ReactDOM.render(<Table cols={GetCols(new_arr)} data={new_arr}/>,  document.getElementById(post_to));
		return;
	}
	
  var found_some = false;

	for (var row in panels) {
	
			var use_me = false;

			if (spkr == 1 
				&& panels[row]['spkr1_on_entry'] == 1 
				&& panels[row]['spkr2_on_entry'] == undefined 
			) { 
				use_me = true;
			}

			if (spkr == 2 
				&& panels[row]['spkr1_on_entry'] == undefined 
				&& panels[row]['spkr2_on_entry'] == 1 
			) { 
				use_me = true;
			}

			if (spkr == 3 
				&& panels[row]['spkr1_on_entry'] == 1 
				&& panels[row]['spkr2_on_entry'] == 1 
			) { 
				use_me = true;
			}

			if ( tourneyName == 'All' ) {
				str_date = panels[row]['tourn_start'];
				str_event_name = panels[row]['event_name'];
			}
			
			if ( ( panels[row]['tourn'] == tourneyName || tourneyName == "All" )
				&& panels[row]['this_yr'] == this_yr 
				&& use_me == true 
				&& str_date == panels[row]['tourn_start']
				&& str_event_name.indexOf(panels[row]['event_name']) !== -1
			) {

				panels[row]['judge'] = panels[row]['judge'].replace(/<\/?span[^>]*>/g,"");
				found_some = true;
				
				var item = { "Tournament" : panels[row]['tourn'],
					"Round": panels[row]['round_label'],
					"Side": panels[row]['side'], 
					"Opponent": panels[row]['opponent'],
					"Judge": panels[row]['judge'],
					"<% $student1->first." ".$student1->last %>" : panels[row]['spkr1_pts'],
					"<% $student2 ? $student2->first." ".$student2->last : "" %>" : panels[row]['spkr2_pts'],
					"Judge": panels[row]['judge'],
					"Decision": panels[row]['decision_str']
				};
				
				if ( tourneyName !== 'All' ) {
					delete item.Tournament;
				}
				
				if ( spkr == 1 || $("#show_points").attr('checked') == undefined ) { 
					delete item["<% $student2 ? $student2->first." ".$student2->last : "" %>"];
				}

				if ( spkr == 2 || $("#show_points").attr('checked') == undefined ) { 
					delete item["<% $student1->first." ".$student1->last %>"];
				}

				if ( $("#show_judge").attr('checked') == undefined ) { delete item['Judge']; }
				
				new_arr.push(item);
				
			}
	}

	if (found_some == false) { 
		alert("Click on the name of a tournament to see the details");
	}

	ReactDOM.render(
		<Table cols={GetCols(new_arr)} data={new_arr}/>, 
		document.getElementById(post_to)
	);
	
}

// general use fuction that takes 2 numbers and returns a percentage as s
// string you can stick in a <td>

function MakePct(numer, denom) {

    var MakePct;
		if ( denom == null || denom == 0 || isNaN(denom) ) {
			MakePct = "0% (0/0)"; 
			return MakePct;
		}
		if (numer == null || isNaN(numer) ) { numer = 0; }
		
		MakePct = ( (numer / denom) * 100).toFixed(1)+"%";
		MakePct = MakePct + " (" + numer + "/" + denom + ")";		
	
    return MakePct;

}

//general use fuction that converts the raw JSON into a useable array

function killNulls(dummy) {
	if ( isNaN(dummy) ) {
		return 0;
	}
	return dummy;
}

function MakeArray(strDummy) {

	var prelim_wins = 0;
	var prelim_rds = 0;
	var elim_wins = 0;
	var elim_rds = 0;
	var prelim_ballots = 0;
	var prelim_ballots_won = 0;
	var elim_ballots = 0;
	var elim_ballots_won = 0;
	var myArray = [];
	var x=0;

	for (var row in summaryTable) {
		console.log(row);
		if ( row.indexOf(strDummy) !== -1 ) {

			prelim_wins += summaryTable[row]['prelim_wins'];
			prelim_rds += summaryTable[row]['prelim_rds'];
			prelim_ballots += summaryTable[row]['prelim_ballots'];
			prelim_ballots_won += summaryTable[row]['prelim_ballots_won'];
			elim_wins += summaryTable[row]['elim_wins'];
			elim_rds += summaryTable[row]['elim_rds'];
			elim_ballots += summaryTable[row]['elim_ballots'];
			elim_ballots_won += summaryTable[row]['elim_ballots_won'];
			
			var allwins = killNulls(summaryTable[row]['elim_wins']) + killNulls(summaryTable[row]['prelim_wins']);
			var allrds = killNulls(summaryTable[row]['elim_rds']) + killNulls(summaryTable[row]['prelim_rds']);
	
			myArray.push({ "Comparison": summaryTable[row]['level'],
				"Prelim Rds": MakePct(summaryTable[row]['prelim_wins'], summaryTable[row]['prelim_rds']),
				"Prelim Ballots": MakePct(summaryTable[row]['prelim_ballots_won'],  summaryTable[row]['prelim_ballots']),
				"Elim Rds": MakePct(summaryTable[row]['elim_wins'] , summaryTable[row]['elim_rds']),
				"Elim Ballots": MakePct(summaryTable[row]['elim_ballots_won'] , summaryTable[row]['elim_ballots']),
				"Total": MakePct( allwins , allrds )
			});
		}
		
	}
	
	//add summary row
	var allwins = killNulls(elim_wins) + killNulls(prelim_wins);
	var allrds = killNulls(elim_rds) + killNulls(prelim_rds);
	myArray.push({ "Comparison": "Totals",
		"Prelim Rds": MakePct(prelim_wins, prelim_rds),
		"Prelim Ballots": MakePct(prelim_ballots_won,  prelim_ballots),
		"Elim Rds": MakePct(elim_wins , elim_rds),
		"Elim Ballots": MakePct(elim_ballots_won , elim_ballots),
		"Total": MakePct( allwins , allrds )
	});

	return myArray;

}

var summaryTable = <% $json_summary %>;
var myArray=MakeArray('together-this_yr');
var txt_val="Team record for the current season";

ReactDOM.render(<div onClick={show_all}>Click here to show all rounds for the season</div>, document.getElementById('show_all'));
ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('team_season_header'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('team_season'));

//Now repeat for the other tables you want; could put in an array and loop but that just moves the code elsewhere

//speaker 1 with other partners
var myArray=MakeArray('spkr1-this_yr');

var txt_val="Record for " + <% "'".$student1->first." ".$student1->last."'" %> + " with other colleagues in the current season";

ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('spkr1_season_header'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('spkr1_season'));

//speaker 2 with other partners
var myArray=MakeArray('sprk2-this_yr');
var txt_val="Record for " + <% $student2 ? "'".$student2->first." ".$student2->last."'" : "" %> + " with other colleagues in the current season";

ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('spkr2_season_header'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('spkr2_season'));

//team record in previous years
var myArray=MakeArray('together-other_yr');
var txt_val="Record as a team in previous seasons";
ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('team_season_header_past'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('team_season_past'));

//spkr1 record in previous years
var myArray=MakeArray('spkr1-other_yr');
var txt_val="Record for " + <% "'".$student1->first." ".$student1->last."'" %> + " with other colleagues in previous years";
ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('spkr1_header_past'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('spkr1_past'));

//spkr2 record in previous years
var myArray=MakeArray('spkr2-other_yr');
var txt_val="Record for " + <% $student2 ? "'".$student2->first." ".$student2->last."'" : "" %> + " with other colleagues in previous years";
ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('spkr2_header_past'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('spkr2_past'));

//NOW THE BIG SUMMARY TABLE

//Dump the big object into one you can sort
var panels = <% $json_panels %>;
var panel_array=[];
for (var row in panels) {
	var temp_row = {};
	for (var fld in panels[row]) {
		temp_row[fld] = panels[row][fld] ;
		temp_row['panel_id'] = row;
	}
	panel_array.push(temp_row);
}

//sort panel array in reverse tourn date order; newest tournaments are now first, then sort by round_name
//Chrome does weird stuff

panel_array = panel_array.sort(function(a, b) {

  if ( parseInt(a.event_id )!= parseInt(b.event_id) ) {
	return parseInt(a.event_id)-parseInt(b.event_id);
  }

  return;

  //this is dead code -- used to sort by date, but sorting by event_id seems to work	
  a = new Date(a.tourn_start);
  b = new Date(b.tourn_start);

  if (a != b) {
	return a-b;
  }
  if (!(a && b) && parseInt(a.round_name) != parseInt(b.round_name)) {
	return parseInt(a.round_name) - parseInt(b.round_name) ;
  }

});

	console.log(panel_array);
	console.log("just finished first sort");
	
//function to make tourney-by-tourney seasaonal grid
function make_seasonal_grid(data_arr, this_yr, both, spkr) {

	var myArray = [];
	var use_it;
	var pwins=0; var prds=0; var pties=0; var ewins=0; var erds=0; var print_row; var colleague;

	//strip rows you don't want
	for (var row in data_arr) {
	
		var quads; var trips; var doubs; var octos; var qtrs; var semis; var finals; var third_speaker;

		data_arr[row]['use_it']=true;
		if (this_yr != data_arr[row]['this_yr'] ) { data_arr[row]['use_it'] = false; }
		if (typeof data_arr[row]['spkr1_on_entry'] === "undefined") { data_arr[row]['spkr1_on_entry'] = 0 };
		if (typeof data_arr[row]['spkr2_on_entry'] === "undefined") { data_arr[row]['spkr2_on_entry'] = 0 };
		if ( both == true && (data_arr[row]['spkr1_on_entry'] == 0 || data_arr[row]['spkr2_on_entry'] == 0) ) { data_arr[row]['use_it'] = false; }
		if ( both == false  && spkr == 1 &&  data_arr[row]['spkr1_on_entry'] == 0 ) { data_arr[row]['use_it'] = false; }
		if ( both == false  && spkr == 1 &&  data_arr[row]['spkr2_on_entry'] == 1 ) { data_arr[row]['use_it'] = false; }
		if ( both == false  && spkr == 2 &&  data_arr[row]['spkr2_on_entry'] == 0 ) { data_arr[row]['use_it'] = false; }
		if ( both == false  && spkr == 2 &&  data_arr[row]['spkr1_on_entry'] == 1 ) { data_arr[row]['use_it'] = false; }
		
	}

	var new_arr = data_arr.filter(function(data_arr){
	  return data_arr['use_it'] == true;
	});
	
	for (var row in new_arr) {

			var next_element = new_arr[parseInt(row) + 1];			
			
			if (new_arr[row]['elim'] == 1 ) {
					erds++;
					if ( new_arr[row]['ballots_won'] > (new_arr[row]['total_ballots']-new_arr[row]['ballots_won']) ) { ewins++; }
					if ( new_arr[row]['elim_level'] == "Quad Octo-Finals" ) { quads = new_arr[row]['decision_str']; }
					if ( new_arr[row]['elim_level'] == "Triple Octo-Finals" ) { trips = new_arr[row]['decision_str']; }
					if ( new_arr[row]['elim_level'] == "Double Octo-Finals" ) { doubs = new_arr[row]['decision_str']; }
					if ( new_arr[row]['elim_level'] == "Octo-Finals" ) { octos = new_arr[row]['decision_str']; }
					if ( new_arr[row]['elim_level'] == "Quarter-Finals" ) { qtrs = new_arr[row]['decision_str']; }
					if ( new_arr[row]['elim_level'] == "Semi-Finals" ) { semis = new_arr[row]['decision_str']; }
					if ( new_arr[row]['elim_level'] == "Finals" ) { finals = new_arr[row]['decision_str']; }
			} else {
					prds++;
					if ( new_arr[row]['ballots_won'] > (new_arr[row]['total_ballots']-new_arr[row]['ballots_won']) ) { pwins++; }
					if ( new_arr[row]['ballots_won'] == (new_arr[row]['total_ballots']-new_arr[row]['ballots_won']) ) { pties++; }
			}
	
			print_row=false;
			if ( parseInt(row) == new_arr.length - 1 ) {
				print_row = true;
			} else {
				if ( new_arr[row]['event_id'] != next_element['event_id'] ) {
					print_row = true;
					}
			}
			
			if ( print_row == true ) {

				if ( both == true ) { colleague= 'Together' ; } else { colleague = new_arr[row]['third_speaker']; }
				var prelim_record=pwins +"-"+ (prds-pwins-pties);
				if ( pties> 0 ) { prelim_record += "-" + pties };
				myArray.push({ "Colleague": colleague,
								"Tournament": new_arr[row]['tourn'],
								"Division":new_arr[row]['event_name'] + " (" + new_arr[row]['event_level'] + ")",
								"Date": new_arr[row]['tourn_start'],
								"Prelims": prelim_record,
								"Quads": quads ,
								"Trips": trips ,
								"Doubs": doubs ,
								"Octos": octos ,
								"Quarters": qtrs ,
								"Semis": semis ,
								"Finals": finals ,
								"Elims": ewins +"-"+ (erds-ewins),
								"Total": (ewins+pwins) +"-"+ (erds+prds-pwins-ewins)
							});
				octos=""; qtrs=""; semis=""; finals=""; quads=""; trips=""; doubs="";
				pwins=0; prds=0; pties=0; ewins=0; erds=0;
			}
	}

	return myArray;
	console.log("array done");

}

var myArray = make_seasonal_grid(panel_array, 1, true, 0);
var txt_val="Team tournament grid -- current season";
ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_together_this_yr'));
ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_together_this_yr'));

var myArray = make_seasonal_grid(panel_array, 1, false, 1);
if (myArray[0] != null) {
	var txt_val="Tournament grid for " + <% "'".$student1->first." ".$student1->last."'" %> + " with other colleagues -- current season";
	ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_spkr1_this_yr'));
	ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_spkr1_this_yr'));
}

var myArray = make_seasonal_grid(panel_array, 1, false, 2);
if (myArray[0] != null) {
	var txt_val="Tournament grid for " + <% $student2 ? "'".$student2->first." ".$student2->last."'" : "" %> + " with other colleagues -- current season";
	ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_spkr2_this_yr'));
	ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_spkr2_this_yr'));
}

var myArray = make_seasonal_grid(panel_array, 0, true, 0);
if (myArray[0] != null) {
	var txt_val="Team tournament grid -- previous seasons";
	ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_together_past'));
	ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_together_past'));
}

var myArray = make_seasonal_grid(panel_array, 0, false, 1);
if (myArray[0] != null) {
	var txt_val="Tournament grid for " + <% "'".$student1->first." ".$student1->last."'" %> + " with other colleagues -- previous seasons";
	ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_spkr1_past'));
	ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_spkr1_past'));
}

console.log("before last grid creation");
console.log(panel_array);
console.log("after last grid creation");
var myArray = make_seasonal_grid(panel_array, 0, false, 2);
console.log(panel_array);
if (myArray[0] != null) {
	var txt_val="Tournament grid for " + <% $student2 ? "'".$student2->first." ".$student2->last."'" : "" %> + " with other colleagues -- previous seasons";
	ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_spkr2_past'));
	ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_spkr2_past'));
}

</script>

	</div>

  </body>
</html>
