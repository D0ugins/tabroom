<%args>
	$person
	$tourn
	$tourn_settings
	$event_id => undef
</%args>
<%init>

	unless ($event_id) { 
		$m->print("No event sent.  Hit back and try again");
		$m->abort;
	}

	my $event = Tab::Event->retrieve($event_id);
	my $err;
	my $roundyell_done;

	my @sites = $tourn->sites;
	my $default_site = @sites if @sites;

	if ($tourn_settings->{"nsda_district"}) { 

		my $weekend_id = $event->setting('weekend');

		my $weekend = Tab::Weekend->retrieve($weekend_id) 
			if $weekend_id;

		$default_site = $weekend->site
			if $weekend
			&& $weekend->site;
	}

	TIMESLOT:
	foreach my $timeslot ($tourn->timeslots) { 

		my @existing_rounds = Tab::Round->search( 
			timeslot => $timeslot->id,
			event    => $event->id
		);

		my $round;

		if (@existing_rounds) { 
			# KILL THE SPARE, WORMTAIL
			$round = shift @existing_rounds;
			foreach (@existing_rounds) { $_->delete(); }
		}

		unless ($ARGS{$timeslot->id} > 0) { 

			if ($round) { 
				foreach my $parent ($round->parents) { 
					$parent->runoff("");
					$parent->update();
				}

				$round->delete()
				next TIMESLOT;
			}
		}

		my $label = $ARGS{$timeslot->id."_label"};
		my $abbr = $event->abbr;
		my $name = $event->name;

		if ( index(uc($label),uc($event->abbr)) != -1) { 

			$err = "Do not include the abbreviation of the event in the round label. Tabroom automatically does it for you. If you include it too, it will list the event twice (LD LD Round 1), and look bad.";

			$label =~ s/$abbr." "//egi;
			$label =~ s/$abbr//egi;
		}

		if ( index(uc($label),uc($event->name)) != -1) { 

			$err = "Do not include the name of the event in the round label.
			Tabroom automatically does it for you. If you include it too, it'll
			be listed as 'Duo Duo Round 1', which is kind of nonsense.";

			$label =~ s/$name." "//egi;
			$label =~ s/$name//egi;
		}

		$label =~ s/^\s+//;
		$label =~ s/\s+$//;

		$label =~ s/^Rd. //;
		$label =~ s/^Rnd. //;
		$label =~ s/^Rd //;
		$label =~ s/^Rnd //;
		$label =~ s/^Round //;
		$label =~ s/^R //;

		if ($round && $label eq $round->name) { 

			undef $label;

			unless ($roundyell_done++) { 

				$err .= "<br /><br />There is no need to label rounds with their number. Labels are only to call rounds things like Semi or Finals.  Otherwise formatting is automatic.";

			}
		}

		my $site = $ARGS{$timeslot->id."_site"};

		$site = $default_site unless $site;

		my $tiebreak_set_id = $ARGS{$timeslot->id."_tiebreak_set"};
		my $round_type = $ARGS{$timeslot->id."_type"};

		if ($tourn_settings->{"nsda_district"}) { 

			$round_type = "prelim" unless $round_type;

			unless ($tiebreak_set_id) { 

				if ($event->type eq "speech") { 

					my $tiebreak_set = 
						Tab::TiebreakSet->search(
							tourn => $tourn->id,
							name  => "IE Prelim"
						)->first;

					$tiebreak_set_id = $tiebreak_set->id if $tiebreak_set;

					unless ($tiebreak_set) { 

						my $tiebreak_set = 
							Tab::TiebreakSet->search(
								tourn => $tourn->id,
								name  => "IE Break to Elims"
							)->first;

						$tiebreak_set_id = $tiebreak_set->id if $tiebreak_set;
					}


				} elsif ($event->type eq "congress") { 

					my $tiebreak_set = 
						Tab::TiebreakSet->search(
							tourn => $tourn->id,
							name  => "Congress Prelim"
						)->first;

					$tiebreak_set_id = $tiebreak_set->id if $tiebreak_set;

				} else { 

					my $tiebreak_set = 
						Tab::TiebreakSet->search(
							tourn => $tourn->id,
							name  => "Debate"
						)->first;

					$tiebreak_set_id = $tiebreak_set->id if $tiebreak_set;
				}

			}
		}

		if ($round) { 

			$round->label($label);
			$round->site($site);
			$round->type($round_type);
			$round->tiebreak_set( $tiebreak_set_id );

			$round->flighted($ARGS{$timeslot->id."_flight"});
			$round->update;

		} else { 

			my $num_judges = 1;
			$num_judges = 3 if $ARGS{$timeslot->id."_type"} eq "elim";
			$num_judges = 3 if $ARGS{$timeslot->id."_type"} eq "final";

			$round = Tab::Round->create({ 
				event        => $event->id,
				timeslot     => $timeslot->id,
				start_time   => $timeslot->start,
				label        => $label,
				type         => $round_type, 
				tiebreak_set => $tiebreak_set_id,
				site         => $site,
				flighted     => $ARGS{$timeslot->id."_flight"}
			});

			$round->setting("num_judges", $num_judges);

		}

	}

	my $description = $person->first." ".$person->last." (".$person->email.") ";
	$description .= " has altered the schedule for ".$event->name;

	$m->comp("/funclib/log.mas",  
		type        => 'tabbing',
		event       => $event->id,
		tourn       => $tourn->id,
		person      => $person->id,
		description => $description
	);

	$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);

	my $msg = "Round assignments saved";

	$m->redirect("/setup/schedule/event.mhtml?event_id=".$event->id."&msg=$msg&err=$err");


</%init>
