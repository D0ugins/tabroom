<%args>
	$tourn
	$person
	$category_id => 0
	$name        => 0
	$abbr        => 0
</%args>
<%init>

	my $msg;
	my $category;

	if ( $ARGS{"rounds_per"} > 0 && $ARGS{"judge_per"} > 0 ) {

		my $err = "You must EITHER use number of entries per judge, OR number
		of rounds owed.  Both methods don\'t work together";

		$m->redirect("edit.mhtml?category_id=$category_id&err=$err");
	}

	if ($category_id) {

		$category = Tab::Category->retrieve($category_id);
		$category->name($name);
		$category->abbr($abbr);
		$category->update();

		$msg = "$name judge category changes saved";

	} else {

        $category = Tab::Category->create({
            tourn => $tourn->id,
            name => $name,
            abbr => $abbr,
        });

		$msg = "$name judge category created";

	}

	$ARGS{"max_rounds"} = 8 if $ARGS{"max_rounds"} < 1;

	my %existing = $category->all_settings();
	my $changes;

	foreach my $tag (
		"no_codes",
		"show_names",
		"show_affs",
		"code_start",
		"field_report",
		"judge_contacts",
		"judge_cells",
		"judge_quals",
		"first_year_outs",
		"show_judge_contacts",
		"fyo_label",
		"neutrals",
		"double_entry",
		"ask_alts",
		"linked_only",
		"drops_no_burden",
		"tab_room",
		"auto_bond",
		"ask_parli",
		"publish_paradigms",
		"dio_min",
		"missing_judge_fee",
		"attending_judge_fee",
		"max_rounds",
		"free",
		"min_burden",
		"min_burden_fine",
		"max_burden",
		"alt_max",
		"usa_wsdc",
		"commitment_bump_after",
		"commitment_bump_unit"
	) {

        my $value = $ARGS{$tag};
        $value = 0 unless $value;
        $existing{$tag} = 0 unless $existing{$tag};

        if ($value ne $existing{$tag}) {
            $changes .= $tag." changed to ".$value." <br />";
            eval{ $category->setting($tag, $value); };
        }
	}

	if ($ARGS{"details_deadline"} && $ARGS{"details_deadline_time"}) {

        my $dt = eval {
            return Tab::dtme($ARGS{"details_deadline"}, $ARGS{"details_deadline_time"}, $tourn->tz);
        };

		if ($dt) {
			$category->setting("details_deadline", "date", $dt);
		} else {
			$category->setting("details_deadline", 0);
		}
	} else {
		$category->setting("details_deadline", 0);
	}


	if ($ARGS{"weekend"} != $category->setting('weekend')) {

		my $weekend = eval {
			return Tab::Weekend->retrieve($ARGS{"weekend"});
		};

		$category->setting("weekend", $ARGS{"weekend"});

		foreach my $event ($category->events) {

			$event->setting("weekend", $ARGS{"weekend"});
			my $description;

			if ($weekend) {
				$description = "Event ".$event->abbr." weekend changed to ".$weekend->name;
			} else {
				$description = "Event ".$event->abbr." changed to not held";
			}

			$m->comp("/funclib/log.mas",
				type        => 'districts',
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);
		}
	}

	if ($ARGS{"nats_category"} > 0) {

		$category->setting("judge_per", 0);
		$category->setting("hired_rounds", 0);
		$category->setting("rounds_per", 0);
		$category->setting("judge_per", 0);
		$category->setting("hired_jpool", 0);
		$category->setting("hired_fee", 0);
		$category->setting("uncovered_entry_fee", 0);

		$category->setting("nats_category", 1);

	} elsif ($ARGS{"judge_per"} > 0) {

		$category->setting("judge_per", $ARGS{"judge_per"});
		$category->setting("hired_rounds", 0);
		$category->setting("round_hire_fee", 0);
		$category->setting("rounds_per", 0);

	} else {

		$category->setting("rounds_per", $ARGS{"rounds_per"});
		$category->setting("judge_per", 0);
		$category->setting("hired_jpool", 0);
		$category->setting("hired_fee", 0);
		$category->setting("uncovered_entry_fee", 0);

		my @keys = eval {
			return keys %{$category->setting("custom_rounds_per")};
		};

		my %customs = ();
		my $limit = scalar @keys;
		$limit++;
		$limit = 5 if $limit < 5;

		my $didit;
		foreach my $tick (1 .. $limit) {
			if (int($ARGS{"entries_".$tick}) && int($ARGS{"rounds_".$tick}) ) {
				$customs{$ARGS{"entries_".$tick}} = $ARGS{"rounds_".$tick};
				$didit++;
			}
		}

		if ($didit) { 
			$category->setting("custom_rounds_per", "json", \%customs);
		}

	}

    my @dates = (
        "open_switcheroo",
        "close_switcheroo"
    );

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

    foreach my $key (@dates) {

        my $date = $ARGS{$key};
        my $time = $ARGS{$key."_time"};

        my $dt = eval {
            return Tab::dtme($date, $time, $tz);
        };

		if ($dt) {
			$category->setting($key, "date", $dt);
		} else {
			$category->setting($key, 0);
		}
    }

	if ($ARGS{'add_quiz'}) {

		my @already = eval {
        	return @{$existing{"required_quizzes"}};
		};

		push @already, $ARGS{"add_quiz"};

		my %seen = ();
		@already = grep { ! $seen{$_} ++ } @already;

		$category->setting("required_quizzes", "json", \@already);
	}

    if ($changes) {

        my $now = DateTime->now();

		$m->comp("/funclib/log.mas",
            type        => 'tabbing',
            tourn       => $category->tourn->id,
			category    => $category->id,
            person      => $person->id,
            description => $changes
        );
    }

	$m->redirect("edit.mhtml?category_id=".$category->id."&msg=$msg");

</%init>
