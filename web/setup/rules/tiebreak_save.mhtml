<%args>
	$tourn
	$person
	$priority
	$tiebreak_set_id
	$count             => 0
	$name              => undef
	$tiebreak_id       => undef
	$count_round       => undef
	$highlow           => undef
	$truncate          => 0
	$truncate_smallest => 0
	$highlow_count     => 0
	$multiplier        => 1
	$violation         => 0
	$child             => 0
</%args>
<%init>

	unless ($name) {
		my $err = "No tiebreaker name sent";
		$m->redirect("tiebreaks.mhtml?tiebreak_set_id=".$tiebreak_set_id."&err=$err");
	}

	$multiplier = 1 if $multiplier == 0;
	$violation = 0 if (not defined $violation) || $violation == "";

	$highlow_count = 1
		if $highlow
		&& $highlow_count < 1;

	$highlow_count = 0 unless $highlow_count;
	$truncate = 0 unless $truncate;
	$child = 0 unless $child;

	my $tiebreak_set = Tab::TiebreakSet->retrieve($tiebreak_set_id);

	if ($name eq "judgepref" || $name eq "coinflip") {

		my @already = Tab::Tiebreak->search(
			tiebreak_set => $tiebreak_set->id,
			priority     => $priority
		);

		foreach my $al (@already) {

			next if $al->id == $tiebreak_id;

			my $err = "Judges Preference and Coinflips cannot be at the same priority level as other tiebreakers.  Hit back on your browser and try again.";

			$m->redirect("tiebreaks.mhtml?err=$err");

		}
	}

	undef $count_round unless $count eq "specific";

	my $tiebreak;
	my $description = "Tiebreak changed for ".$tiebreak_set->name." ";

	if ($tiebreak_id) {

		$tiebreak = Tab::Tiebreak->retrieve($tiebreak_id);

		$description .= "from ".$tiebreak->name." ".$tiebreak->priority;
		$description .= " ".$tiebreak->count." ".$tiebreak->highlow_count;

		$tiebreak->name($name);
		$tiebreak->tiebreak_set($tiebreak_set->id);
		$tiebreak->count($count);
		$tiebreak->count_round($count_round);
		$tiebreak->highlow($highlow);
		$tiebreak->highlow_count($highlow_count);
		$tiebreak->multiplier($multiplier);
		$tiebreak->violation($violation);
		$tiebreak->truncate($truncate);
		$tiebreak->truncate_smallest($truncate_smallest);
		$tiebreak->priority($priority);
		$tiebreak->child($child);

		$tiebreak->update();

	} else {

		$tiebreak = Tab::Tiebreak->create({
			name              => $name,
			tiebreak_set      => $tiebreak_set->id,
			count             => $count,
			count_round       => $count_round,
			highlow           => $highlow,
			highlow_count     => $highlow_count,
			multiplier        => $multiplier,
			violation         => $violation,
			truncate          => $truncate,
			truncate_smallest => $truncate_smallest,
			priority          => $priority,
			child             => $child
		});

	}

	$description .= " to ".$tiebreak->name." ".$tiebreak->priority;
	$description .= " ".$tiebreak->count." ".$tiebreak->highlow_count;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	Tab::ChangeLog->create({
		type        => 'tabbing',
		tourn       => $tourn->id,
		person      => $person->id,
		description => $description,
		created     => $now
	});

	my $msg = "Tiebreak saved";
	$m->redirect("tiebreaks.mhtml?tiebreak_set_id=".$tiebreak_set->id."&msg=$msg");

</%init>
