<%args>
	$name
	$count
	$priority
	$tiebreak_set_id
	$tiebreak_id       => undef
	$count_round       => undef
	$highlow           => undef
	$truncate          => undef
	$truncate_smallest => 0
	$highlow_count     => undef
	$multiplier        => 1
	$child             => undef
</%args>
<%init>

	$multiplier = 1 if $multiplier == 0;

	$highlow_count = 1 
		if $highlow 
		&& $highlow_count < 1;

	my $tiebreak_set = Tab::TiebreakSet->retrieve($tiebreak_set_id);

	if ($name eq "judgepref" || $name eq "coinflip") {

		my @already = Tab::Tiebreak->search( 
			tiebreak_set => $tiebreak_set->id,
			priority     => $priority
		);

		if (@already) { 

			my $err = "Judges Preference and Coinflips cannot be at the same priority level as other tiebreakers.  Hit back on your browser and try again.";

			$m->redirect("tiebreaks.mhtml?err=$err");

		}
	}

	undef $count_round unless $count eq "specific";

	if ($tiebreak_id) { 

		my $tiebreak = Tab::Tiebreak->retrieve($tiebreak_id);
		$tiebreak->name($name);
		$tiebreak->tiebreak_set($tiebreak_set->id);
		$tiebreak->count($count);
		$tiebreak->count_round($count_round);
		$tiebreak->highlow($highlow);
		$tiebreak->highlow_count($highlow_count);
		$tiebreak->multiplier($multiplier);
		$tiebreak->truncate($truncate);
		$tiebreak->truncate_smallest($truncate_smallest);
		$tiebreak->priority($priority);
		$tiebreak->child($child);

		$tiebreak->update();

	} else { 

		my $tiebreak = Tab::Tiebreak->create({
			name              => $name,
			tiebreak_set      => $tiebreak_set->id,
			count             => $count,
			count_round       => $count_round,
			highlow           => $highlow,
			highlow_count     => $highlow_count,
			multiplier        => $multiplier,
			truncate          => $truncate,
			truncate_smallest => $truncate_smallest,
			priority          => $priority,
			child             => $child
		});

	}

	my $msg = "Tiebreak saved";

	$m->redirect("tiebreaks.mhtml?tiebreak_set_id=".$tiebreak_set->id."&msg=$msg");	
	
</%init>
