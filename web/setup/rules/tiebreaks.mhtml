<%args>
	$tourn
	$tourn_settings
	$person
	$tiebreak_set_id => undef
</%args>
<%init>

	my $tiebreak_set = Tab::TiebreakSet->retrieve($tiebreak_set_id)
		if $tiebreak_set_id;

	my %tb_setting = $tiebreak_set->all_settings if $tiebreak_set;

</%init>

	<script>

		function showSpecificRound() {

			$(".countSelector").each(function() {

				var tbsetID = $(this).attr("tb_set");
				var count = $(this).find(":selected").val();

				if (count === "specific") {
					$(".specificbox_"+tbsetID).removeClass("hidden");
				} else {
					$(".specificbox_"+tbsetID).addClass("hidden");
				}

			});

			fixVisual();
		};

		function showComposites() {

			$(".tbSelector").each(function() {

		        var tiebreaker = $(this).find(":selected").val();
				var tbsetID = $(this).attr("tb_set");

				if (
					tiebreaker === "ranks"
					|| tiebreaker === "chair_ranks"
					|| tiebreaker === "non_chair_ranks"
					|| tiebreaker === "reciprocals"
					|| tiebreaker === "judgepref"
					|| tiebreaker === "student_rank"
					|| tiebreaker === "student_recip"
					|| tiebreaker === "downs"
				) {

					$(".ranksbox_"+tbsetID).removeClass("hidden");
					$(".oppbox_"+tbsetID).addClass("hidden");

				} else if (
					tiebreaker === "opp_seed"
					|| tiebreaker === "opp_ranks"
					|| tiebreaker === "opp_wins"
					|| tiebreaker === "opp_points"
				) {

					$(".oppbox_"+tbsetID).removeClass("hidden");
					$(".ranksbox_"+tbsetID).addClass("hidden");

				} else {

					$(".ranksbox_"+tbsetID).addClass("hidden");
					$(".oppbox_"+tbsetID).addClass("hidden");
				}
			});

			fixVisual();
		};

		function showCompositeTbs() {

			$(".compositeSelector").each(function() {
		        var checked = $(this).prop("checked");
				var tbsetID = $(this).attr("tb_set");

				if (checked) {
					$(".compositebox_"+tbsetID).removeClass("hidden");
				} else {
					$(".compositebox_"+tbsetID).addClass("hidden");
				}
			});

			fixVisual();
		};

		$(document).ready(function(){
			showSpecificRound();
			showComposites();
			showCompositeTbs();
			$(".compositebox").addClass('hidden');
			fixVisual();
		});

	</script>

	<div class="main">

		<h4><% $tourn->name %></h4>

		<& tabbar.mas,
			tourn => $tourn,
			whoami => "tiebreaks"
		&>

		<div class='pagefull nospace'>

			<span class="twothirds nospace semibold">
				<h4><% $tiebreak_set ? $tiebreak_set->name : "Create Tiebreak Set" %></h4>
			</span>

			<span class="third rightalign">

%				if ($tiebreak_set) {

%					my $warn = "You are about to delete this tiebreaker set.  That may cause terrible, terrible damage.  Are you sure?";
					<a
						class = "redtext buttonwhite centeralign nowrap hover"
						href  = "tiebreak_set_rm.mhtml?set_id=<% $tiebreak_set->id %>"
						title = "Delete <% $tiebreak_set->name %> tiebreakers"
						<& "/funclib/confirm.mas", warn => $warn &>
					>
						<span class="inline fa fa-trash"></span>
					</a>
%				}
			</span>

		</div>

		<form
			action = "tb_set_save.mhtml"
			method = "post"
		>

		<input
			type  = "hidden"
			name  = "tiebreak_set_id"
			value = "<% $tiebreak_set_id %>"
		>

		<div class="odd pagefull rightalign">

			<span class="quarter semibold bluetext">
				Name of Tiebreaker Set
			</span>
			<span class="threequarters">
				<input
					type        = "text"
					size        = "64"
					name        = "name"
					value       = "<% $tiebreak_set ? $tiebreak_set->name : "" %>"
					placeholder = "Tiebreak set name"
				>
			</span>
		</div>

		<span class="pagehalf">
			<div class="row hover">
				<label for="equal_elims">
					<span class="seveneighth">
						<span class="quarterspacer"></span>
						Advance equal entries from each section

						<p class="smallish explain marno padless">
							<span class="halfspacer"></span>
							Use only in IE Elims &amp; Congress
						</p>
					</span>

					<span class="eighth smallish">
						<input
							type  = "checkbox"
							id    = "equal_elims"
							name  = "equal_elims"
							value = "1"
							<% $tb_setting{"equal_elims"}
								? 'checked="checked"'
								: ""
							%>
						>
					</span>

				</label>
			</div>

			<div class="row hover">
				<label for="forfeits_never_break">
					<span class="seveneighth">
						<span class="quarterspacer"></span>
						No shows/forfeits place last
					</span>
					<span class="eighth">
						<input
							type  = "checkbox"
							id    = "forfeits_never_break"
							name  = "forfeits_never_break"
							value = "1"
							<% $tb_setting{"forfeits_never_break"}
								? 'checked="checked"'
								: ""
							%>
						>
					</span>
				</label>
			</div>
		</span>

		<span class="pagehalf">
			<div class="row hover">
				<label for="tie_middle_rank">
					<span class="seveneighth">
						<span class="quarterspacer"></span>
						3x Composite Ties get Middle Rank (CA)
					</span>

					<span class="eighth">
						<input
							type  = "checkbox"
							id    = "tie_middle_rank"
							name  = "tie_middle_rank"
							value = "1"
							<% $tb_setting{"tie_middle_rank"}
								? 'checked="checked"'
								: ""
							%>
						>
					</span>
				</label>
			</div>
		</span>

		<div class="liblrow pagefull marno rightalign">
			<input
				type  = "submit"
				value = "<% $tiebreak_set ? "Save Settings" : "Create Tiebreak Set" %>"
			>
			</form>
		</div>


%		if ($tiebreak_set) {

			<h4 class="martopmore">Tiebreaks in order</h4>


<%perl>

			my $prime;

	   		foreach my $tiebreak (
				sort {$a->priority <=> $b->priority}
					Tab::Tiebreak->search(tiebreak_set => $tiebreak_set->id)
			) {

				$prime = $tiebreak->priority if $tiebreak->priority > $prime;

				my $highlow;

				my $highlow_count = $tiebreak->highlow_count;
				my $highlow_threshold = $tiebreak->highlow_threshold;

				$highlow_count = 1 unless $highlow_count;

				if ($tiebreak->highlow == 1) {
					$highlow = ", except the ".$highlow_count." best &amp; worst";
				} elsif ($tiebreak->highlow == 3) {
					$highlow = ", except the ".$highlow_count." best";
				} elsif ($tiebreak->highlow == 4) {
					$highlow = ", except the ".$highlow_count." worst";
				} elsif ($tiebreak->highlow == 5) {
					$highlow = ", including only the ".$highlow_count." best";
				}

				if ($highlow_threshold && $highlow) {
					$highlow .= " if there are $highlow_threshold scores or more.";
				}

				my $name = $tiebreak->name;

				$name =~ s/diff/differential/g;
				$name =~ s/judgepref/Judges Preference on Ranks (if tied)/g;
				$name =~ s/headtohead/Head to Head wins (if tied)/g;
				$name =~ s/opp/Opponents' avg/g;
				$name =~ s/judgevar2/JVar based on Population - Z2/g;
				$name =~ s/judgevar/Judge Variance Points - Z/g;

				if ($name eq "seed") {
					$name = "Prelim Seed";
				} elsif ($name eq "3way_pts_worst") {
					$name = "Break three-way tie; remove worst points ";
				} elsif ($name eq "entry_vote_one") {
					$name = "Entry vote (count as one)";
				} elsif ($name eq "entry_vote_all") {
					$name = "Entry vote (count all)";
				} elsif ($name eq "3way_rcp_worst") {
					$name = "Break three-way tie; remove worst recips ";
				} elsif ($name eq "three_way_recip") {
					$name = "Break three-way tie; remove best recips ";
				} elsif ($name eq "three_way_point") {
					$name = "Break three-way tie; remove best points ";
				} elsif ($name eq "best_po") {
					$name = "Best Presiding Officer on Parliamentarian ballot";
				} else {
					$name =~ s/_/ /g;
					$name = ucfirst($name);
				}

				if ($tiebreak->result eq "win") {
					$name .= " in wins";
				} elsif ($tiebreak->result eq "loss") {
					$name .= " in losses";
				} elsif ($tiebreak->result eq "split") {
					$name .= " in splits";
				}

</%perl>
				<div class="pagefull row ltborder">

					<span class="threequarters">
						 <% $tiebreak->priority %>.
%						if ($name eq "Rounds") {
							Last round competed in
%						} elsif ($name eq "NSDA Points") {
							<% $name %>
%						} elsif ($name eq "Prelim Seed") {
							<% $name %>
%						} else {
%						    if ($name eq "Reciprocals") {
								Reciprocal ranks (# of 1s, # of 2s)
%							} else {
								<% $name %>
%							}
%							if ($tiebreak->count eq 'specific') {
								 from Round #<% $tiebreak->count_round %>
%							} else {
								 from <% $tiebreak->count %> round(s)
%							}
<%perl>
							if ($tiebreak->truncate && $tiebreak->truncate_smallest) {

								$m->print(", truncate to ".$tiebreak->truncate." or smallest");

							} elsif ($tiebreak->truncate) {

   								$m->print(", truncate to ".$tiebreak->truncate);

							} elsif ($tiebreak->truncate_smallest) {

   								$m->print(", truncate to smallest section");
							}

							if ($tiebreak->chair eq "nonchair") {
								$m->print(", scorers only ");
							}
							if ($tiebreak->chair eq "chair") {
								$m->print(", chair/parli only ");
							}
</%perl>
							<%
								$highlow
							%> <%
								($tiebreak->multiplier > 1)
							 		? ", multiplied by ".$tiebreak->multiplier
									: ""
							%> <%
								$tiebreak->child > 0
								 	? ", composite on ".$tiebreak->child->name
									: ""
							%> <%
								$tiebreak->violation > 0
									? ", +".$tiebreak->violation." for violation"
									: ""
							%>
%						}
					</span>

					<span class="eighth rightalign">
            	    	<a
							class="bluetext button hover buttonwhite fa fa-sm fa-edit"
							onClick="$('.<% $tiebreak->id %>').toggleClass('hidden'); fixVisual();"
						></a>
					</span>

					<span class="eighth rightalign">
            	    	<a
							class="redtext button hover buttonwhite fa fa-sm fa-trash"
							href="tiebreak_rm.mhtml?tiebreak_id=<% $tiebreak->id %>"
						></a>
					</span>

				</div>

				<div class="centeralign ltborder pagefull hidden <% $tiebreak->id %>">

					<h5 class="leftalign">Edit tiebreak <% $tiebreak->name %>:</h5>

					<& "tiebreak_edit.mas",
						tiebreak     => $tiebreak,
						tiebreak_set => $tiebreak_set
					&>
				</div>

%			}

%			$prime++;

			<div class="martopmore pagefull">

				<h5 class="martopmore">Add new tiebreaker:</h5>

				<& "tiebreak_edit.mas",
					tiebreak_set => $tiebreak_set,
					prime        => $prime
				&>
			</div>

%		}
	</div>

	<div class="menu">
<%perl>
		my @sets =
			sort {$a->name cmp $b->name}
			Tab::TiebreakSet->search(tourn => $tourn->id);
</%perl>

		<div class="sidenote">

%			if ($tourn_settings->{"nsda_district"}) {
%				my $warn = "You are about to shift all your tiebreaker sets.  Are you sure?";
				<h4>Districts Reset</h4>
				<a
					class = "yellow full"
					href  = "refresh_districts.mhtml"
					<& "/funclib/confirm.mas", warn => $warn &>
				>
					Reset Districts Tiebreakers to Defaults
				</a>
%			}

			<h4>Tiebreak sets</h4>
				<a
					class = "yellow full marbottom"
					href  = "tiebreaks.mhtml"
				>
					Add a new set
				</a>

%				foreach my $tiebreak_set (@sets) {
					<a
						class = "<% $tiebreak_set_id == $tiebreak_set->id ? "dk" : "" %>blue full"
						href  = "tiebreaks.mhtml?tiebreak_set_id=<% $tiebreak_set->id %>"
					>
						<% $tiebreak_set->name %>
					</a>
%				}

			<br />

			<h4 class="martop">Explain, Please</h4>

			<p>
				Create a tiebreak set for each type of advancement you wish to
				have; for example, one set for Debate Prelims, one for Debate
				Elims, one for IE Prelims, one for IE Elims, and one for Debate
				Top Speakers.
			</p>

			<a
				href  = "tiebreaks_explain.mhtml"
				class = "yellow full"
			>
				Guide to Tiebreakers
			</a>
		</div>
	</div>
