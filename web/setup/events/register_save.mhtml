<%args>
	$person
	$tourn
	$tourn_settings
	$event_id
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);
	my $msg;
	my $err;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $deadlinedt = eval { 
		return Tab::dtme($ARGS{"deadline"}, $ARGS{"deadlinetime"}, $tz);
	};

	if ($ARGS{"deadline"} && (not defined $deadlinedt)) { 
		$err .= "Deadline date ".$ARGS{"deadline"}." ".$ARGS{"deadlinetime"}." was not valid.";
		$err .= " Please be sure they are properly formatted using the date and time pickers";
	}

	my $reg_end = $tourn->reg_end->set_time_zone($tz);

	if ($reg_end < $deadlinedt) { 
		$err .= "A custom entry deadline can only be set BEFORE the tournament wide deadline.";
		undef $deadlinedt;
		$event->setting("deadline", 0);
	}

	if ($deadlinedt) { 
		$event->setting("deadline", "date", $deadlinedt);
	} else { 
		$event->setting("deadline", "0");
	}

	my @setting_fields = (
		"code_start",
		"cap",
		"upload_legislation",
		"legislation_cap",
		"waitlist",
		"always_tba",
		"waitlist_all",
		"waitlist_rank",
		"no_judge_burden",
		"adjust_judge_rounds_owed",
		"adjust_judges_owed",
		"self_strike",
		"field_report",
		"field_waitlist",
		"code_hide",
		"enter_me_twice",
		"no_prefs",
		"hybrids",
		"apda",
		"seed_presets",
		"ask_quals",
		"more_quals",
		"at_larges",
		"adjust_judges_fees",
		"breakouts",
		"nats_judge_burden",
		"nats_jpool"
	);

	if ($tourn_settings->{"nsda_district"} < 1 || $person->site_admin) { 

		push @setting_fields, "ask_for_titles";
		push @setting_fields, "ask_for_authors";
		push @setting_fields, "ask_for_bibliography";
		push @setting_fields, "house_chambers";
		push @setting_fields, "school_cap";
		push @setting_fields, "supp";
		push @setting_fields, "open_supp";
	}

	if ($tourn_settings->{"nsda_nats"}) { 

		push @setting_fields, "ask_for_bibliography";
		push @setting_fields, "nats_screwy_burden";
		push @setting_fields, "supp";
		push @setting_fields, "conn";
		push @setting_fields, "stefan";
	}

	foreach my $field (@setting_fields) { 

		my $value = $ARGS{$field};
		$value = 0 unless $value;
		$event->setting($field, $value);
	}

	my @text_fields = (
		"congress_entry_cards"
	);

	foreach my $text (@text_fields) { 

		my $value = $m->comp("/funclib/save_editor.mas", 
			text => $ARGS{$text}
		);

		if ($value) { 
			$event->setting($text, "text", $value);
		} else { 
			$event->setting($text, 0);
		}
	}

	foreach my $breakout (1 .. $ARGS{"breakouts"}) { 

		next if $event->setting("breakout_".$breakout."_delete");

		if ($ARGS{"breakout_".$breakout."_delete"}) { 

			$event->setting("breakout_".$breakout."_delete", 1);
			$event->setting("breakout_".$breakout."_label", "");
			$event->setting("breakout_".$breakout."_selfreg", "");
			$event->setting("breakout_".$breakout."_exclude_elims", "");

		} else { 

			$event->setting("breakout_".$breakout."_label",
				$ARGS{"breakout_".$breakout."_label"});

			$event->setting("breakout_".$breakout."_selfreg",
				$ARGS{"breakout_".$breakout."_selfreg"});

			$event->setting("breakout_".$breakout."_exclude_elims", 
				$ARGS{"breakout_".$breakout."_exclude_elims"});
		}
	}

	if ($ARGS{"breakout_new"}) { 
		my $breakout = $ARGS{"breakouts"} + 1;
		$event->setting("breakouts", $breakout);
		$event->setting("breakout_".$breakout."_label", $ARGS{"breakout_new"});
		$event->setting("breakout_".$breakout."_delete", 0);
		$event->setting("breakout_".$breakout."_selfreg", 0);
		$event->setting("breakout_".$breakout."_exclude_elims", 1);
		$msg .= "Added breakout number $breakout";
	}

	foreach my $type ("bill", "resolution") {  

		next unless $ARGS{$type};

        my $req = Apache2::Request->new($r);
        my $upload = $req->upload($type);
        my $filename  = $upload->filename;

        $filename =~ s/.*[\/\\](.*)/$1/;
        $filename =~ s/\ //g;
        $filename =~ s/\'//g;  # '  stupid vim
        my $filepath = "$Tab::file_root/files/tourns/".$tourn->id."/".$event->id."/".$type."_template/";

        my $garbage = `rm -f $filepath`;
        $garbage = `mkdir -p $filepath`;
        my $filetemp = $upload->tempname;

        system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$event->id."/".$type."_template/$filename";

        $event->setting($type."_template", $filename);
    
        $msg .= "\n\n".ucfirst($type)." template uploaded to $filepath/$filename";

	}

	$m->redirect("register.mhtml?event_id=".$event->id."&msg=$msg&err=$err");
		
</%init>
