<%args>
	$person
	$tourn
	$tourn_settings
	$event_id => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);
	$m->abort() unless $event;
	my %event_settings = $event->all_settings();
	my $now = DateTime->now();

	my @settings = (
		"wsdc_no_rfd",
		"aff_label",
		"neg_label",
		"combined_ballots",
		"congress_placard_nologo",
		"congress_placard_noschools",
		"congress_placard_designator",
		"congress_placard_title",
		"congress_placard_logo",
		"congress_seating_entrycodes",
		"congress_seating_entrynames",
		"congress_seating_schoolnames",
		"congress_seating_schoolcodes"
	);

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;

			my $description = "Setting $setting changed to $value";

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description,
				created     => $now
			});

			$event->setting($setting, $value);

		}
	}

	my @text_settings = (
		"ballot_rules",
		"ballot_rules_chair",
		"dumb_signature_line",
		"resolution",
		"point_scale",
		"speech_times",
		"strike_card_message",
		"student_vote_message",
		"registration_notice"
	);

	foreach my $setting (@text_settings) {

		my $value = $m->comp("/funclib/save_editor.mas",
			text => $ARGS{$setting}
		);

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;

			my $description;

			if ($value eq "0") {
				$description = "Setting $setting text deleted";
				$event->setting($setting, $value);
			} else {
				$description = "Setting $setting changed to $value";
				$event->setting($setting, "text", $value);
			}

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description,
				created     => $now
			});
		}
	}


    if ($ARGS{"congress_placard_logo"}) {

        my $req = Apache2::Request->new($r);
        my $upload = $req->upload("congress_placard_logo");
        my $filename  = $upload->filename;

        $filename =~ s/[^\w.]//g;
        $filename =~ s/\.(?=.*\.)//g;
        $filename =~ s/\s//g;

        my $filetemp = $upload->tempname;
        system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$event->id."/$filename";
        $event->setting("congress_placard_logo", $filename);
    }

	if ($ARGS{"delete_congress_logo"}) {
        $event->setting("congress_placard_logo", 0);
	}

	if ($tourn_settings->{'legion'}) {

		my @categories = (
			"content",
			"speaking",
			"penalties"
		);

		foreach my $category (@categories) {

			my %existing;

			%existing = %{ JSON::decode_json($event->setting($category."_points"))}
				if $event->setting($category."_points");

			my %result;
			my $counter;

			foreach my $key (sort keys %existing, "New") {

				if ($ARGS{$category."_".$key."_text"}) {

					$counter++;

					$result{$counter}{"text"} = $ARGS{$category."_".$key."_text"};
					$result{$counter}{"prepared"} = $ARGS{$category."_".$key."_prepared"};
					$result{$counter}{"assigned"} = $ARGS{$category."_".$key."_assigned"};
					$result{$counter}{"total"} = $ARGS{$category."_".$key."_total"};

				}
			}

			if (keys %result) {

				$event->setting($category."_points", "text", JSON::encode_json(\%result));

			} else {

				$event->setting($category, 0);

			}
		}
	}

	my $msg = "Ballot and website rules text saved.";

	$m->redirect("ballots.mhtml?event_id=".$event->id."&msg=$msg");

</%init>
