<%args>
	$tourn
	$event_id             => undef
	$name                 => undef
	$abbr                 => undef
	$fee                  => undef
	$min_entry            => undef
	$max_entry            => undef
	$category_id          => undef
	$code_style           => undef
	$code_start           => undef
	$type                 => undef
	$level                => undef
	$nsda_debate_category => undef
	$nsda_speech_category => undef
	$clone_event          => undef
	$description          => undef
</%args>
<%init>

	my $event;
	my $msg;

	my $big_questions = 0;
	$big_questions = 1 if $type eq "big_questions";
	$type = "debate" if $type eq "big_questions";

	if ($event_id) { 

		$event = Tab::Event->retrieve($event_id);

		$event->name($name);
		$event->type($type);
		$event->abbr($abbr);
		$event->category($category_id);
		$event->fee($fee);
		$event->update;

		$msg = "Event changes saved";

	} elsif ($name) { 

		my @code_events = Tab::Event->search( tourn => $tourn->id );

		@code_events = sort {$a->setting("code_start") <=> $b->setting("code_start")} @code_events;

		if (@code_events) { 
			my $last_code_event = pop(@code_events); 		
			my $last_code = $last_code_event->setting("code_start"); 
			$code_start = $last_code; 
			$code_start = $code_start + 100;
		} else {
			$code_start = 100; 
		}
	
		$event = Tab::Event->create({
			name        => $name,
			type        => $type,
			abbr        => $abbr,
			tourn       => $tourn->id,
			category => $category_id,
			fee         => $fee
		});
		
		$msg ="Event $name created";
	
	}

	$m->abort unless $event;

	$event->setting("code_start", $code_start);
	$event->setting("level", $level);
	$event->setting("big_questions", $big_questions);
	$event->setting("min_entry", $min_entry);
	$event->setting("max_entry", $max_entry);

	my $bfm;

	if ($event->setting('code_style')
		&& $code_style ne $event->setting('code_style')
	) { 

		$bfm = "Changing the code format here DOES NOT RECODE ENTRIES.  The potential for accidental lost data is too great.  If you wish to re-code the entries to the new format, go to Entries : Data, and select Entry Codes at right";

	} 

	$event->setting("code_style", $code_style);

	$description =~ s/\r/\n/g;
	$description =~ s/\n\n/\n/g;
	$event->setting("description", "text", $description) if $description;
	$event->setting("description", "") unless $description;


	my $nsda_cat = 0;
	$nsda_cat = $nsda_speech_category if $nsda_speech_category;
	$nsda_cat = $nsda_debate_category if $nsda_debate_category;
	$event->setting("nsda_event_category", $nsda_cat);

	if ($clone_event) { 

		my @settings = Tab::EventSetting->search( event => $clone_event);

		my %already_settings = map {$_->tag => $_} 
			Tab::EventSetting->search( event => $event->id );

		foreach my $setting (@settings) { 
			next if $setting->tag eq "level" && $level;
			next if $setting->tag eq "nsda_event_category" && $nsda_cat;
			next if $setting->tag eq "min_entry" && $min_entry;
			next if $setting->tag eq "max_entry" && $max_entry;
			next if $setting->tag eq "code_start";

			if ($already_settings{$setting->tag}) { 
				$already_settings{$setting->tag}->value($setting->value);
				$already_settings{$setting->tag}->update;
			} else { 
				my $stolen = $setting->copy({
					event => $event->id
				});
			}
		}

		my $ce = Tab::Event->retrieve($clone_event);

		$msg .= "<br />Settings from ".$ce->name." cloned";

	}

	unless ($event->setting("aff_label")) { 
		$event->setting("aff_label", "Aff");
		$event->setting("aff_label", "Pro") if $type eq "pf";
		$event->setting("aff_label", "Gov") if $type eq "parli";
	}

	unless ($event->setting("neg_label")) { 
		$event->setting("neg_label", "Neg");
		$event->setting("neg_label", "Con") if $type eq "pf";
		$event->setting("neg_label", "Opp") if $type eq "parli";
	}

	$m->redirect("edit.mhtml?event_id=".$event->id."&msg=$msg&err=$bfm");
		
</%init>
