<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$event_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my $event = Tab::Event->retrieve($event_id);
	$m->abort unless $event;
	my %event_settings = $event->all_settings();

	my @settings = (
		"allow_judge_own",
		"allow_repeat_elims",
		"allow_repeat_judging",
		"allow_repeat_prelim_side",
		"anonymous_public",
		"autopublish_results",
		"autobye_nojudge",
		"avoid_school_hits",
		"best_judges_highest_seed",
		"blind_mode",
		"invert_postings",
		"bracket_by_ballots",
		"bracket_rooms",
		"double_elimination",
		"repeat_rooms",
		"no_autopair",
		"break_point",
		"default_panel_size",
		"disallow_repeat_drop",
		"elim_method",
		"hybrids_can_hit",
		"judge_publish_results",
		"judge_codes_only",
		"live_updates",
		"max_nobreak_pref",
		"max_panel_size",
		"max_pref",
		"min_panel_size",
		"nobreak_noprefs",
		"no_first_years",
		"panel_labels",
		"powermatch",
		"prep_offset",
		"prevent_hitting_pullup_twice",
		"pullup_method",
		"pullup_minimize",
		"pullup_repeat",
		"region_avoid",
		"region_constrain",
		"region_judge_forbid",
		"round_robin",
		"schem_designation",
		"schem_orientation",
		"school_debates_self",
		"school_percent_limit",
		"seed_presets",
		"sort_precedence",
		"separate_codes",
		"snake_sides_huge_schools",
		"speaker_priority_first",
		"sidelock_elims",
		"wsdc_cap_repel",
		"wsdc_multiple_sites"
	);

	if ($tourn_settings->{"nsda_district"}) {

		push @settings, "nsda_min_prelims";

		if ($person->site_admin || $person_settings->{"nsda_admin"}) {
			push @settings, "no_side_constraints";
		}

		if ($tourn_settings->{"nsda_pilot_debate"} && $event->type eq "debate") {

			push @settings, "pilot_method";
			push @settings, "pilot_advance";

			my $robin_set = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "Round Robin"
			)->first;

			my $elim_tiebreak_set = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "Debate Elim"
			)->first;

			my $first_elim_tiebreak = $elim_tiebreak_set->tiebreaks(priority => 1)->first;

			if ($ARGS{"pilot_method"} eq "single") {

				$ARGS{"round_robin"} = 0;
				$ARGS{"double_elimination"} = 0;

				$first_elim_tiebreak->name("winloss");
				$first_elim_tiebreak->count("previous");
				$first_elim_tiebreak->update();

			} elsif ($ARGS{"pilot_method"} eq "double") {

				$ARGS{"round_robin"} = 0;
				$ARGS{"double_elimination"} = 1;

				$first_elim_tiebreak->name("losses");
				$first_elim_tiebreak->count("elim");
				$first_elim_tiebreak->update();

			} elsif ($ARGS{"pilot_method"} eq "robin") {

				$ARGS{"round_robin"} = 1;
				$ARGS{"double_elimination"} = 0;

				unless ($robin_set) {

					$robin_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "Round Robin"
					});

					Tab::Tiebreak->create({
						name          => "winloss",
						tiebreak_set  => $robin_set->id,
						count         => "prelim",
						multiplier    => 1,
						priority      => 1
					});

					Tab::Tiebreak->create({
						name          => "headtohead",
						tiebreak_set  => $robin_set->id,
						highlow       => 1,
						highlow_count => 1,
						count         => "prelim",
						multiplier    => 1,
						priority      => 2
					});
				}
			}
		}

	} else {
		push @settings, "no_side_constraints";
	}

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;
			my $description = "Setting $setting changed to $value";

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description,
				created     => $now
			});

			$event->setting($setting, $value);

		}
	}

	my $msg = "Pairing settings saved";
	$m->redirect("sectioning.mhtml?event_id=".$event->id."&msg=$msg");

</%init>
