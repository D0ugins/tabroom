<%args>
	$tourn
	$person
</%args>
<%init>

	my %seen;
	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;

	my @perms = Tab::Permission->search( tourn => $tourn->id );

	my $num_owners;
	my $num_contacts;
	my %admin_perms;
	my $err;

	foreach my $perm (@perms) { 
		$admin_perms{$perm->person->id}{$perm->tag} = $perm;
	}

	# Tournament Owners.  Supersedes all other permissions except contacts;
	# Only accessible to site admins and tournament owners themselves.

	if ($admin_perms{$person->id}{"owner"} || $person->site_admin) { 

		my $owner_count; # Do not allow the tournament to delete the last owner

		foreach my $admin (@admins) { 
			if ($ARGS{$admin->id."_level"} eq "owner" || $admin_perms{$admin->id}{"owner"}) { 
				$owner_count++;
			}
		}

		foreach my $admin (@admins) { 
			

			if ($ARGS{$admin->id."_level"} eq "owner") { 

				if ($admin_perms{$person->id}{"owner"} || $person->site_admin) { 

					$admin_perms{$admin->id}{"owner"} = Tab::Permission->create({
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "owner"
					});

				}

				# If I'm an owner I need no other permissions;

				foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
					next if $key eq "owner";
					next if $key eq "contact";
					$admin_perms{$admin->id}{$key}->delete;
					undef $admin_perms{$admin->id}{$key};
				}

			} elsif ($admin_perms{$admin->id}{"owner"}) { 

				if ($owner_count > 1) { 

					$owner_count--;
					$admin_perms{$admin->id}{"owner"}->delete;
					undef $admin_perms{$admin->id}{"owner"};

				} else { 

					$err .= " You attempted to delete the last tournament owner.  ";
					$err .= "At least one user must be marked as tournament owner.";

				}
			}
		}
	}

	# Tournament Contacts.  Contacts can delete themselves.  
	# Owners can delete everyone else.   But there must be at least one. 

	if ($admin_perms{$person->id}{"owner"} 
		|| $admin_perms{$person->id}{"contact"} 
		|| $person->site_admin
	) { 

		# Do not allow the tournament to delete the last contact
		my $contact_count; 

		foreach my $admin (@admins) { 
			if ($ARGS{$admin->id."_contact"} || $admin_perms{$admin->id}{"contact"}) { 
				$contact_count++;
			}
		}

		ADMIN:
		foreach my $admin (@admins) { 

			if ($ARGS{$admin->id."_contact"}) { 
			
				unless ($admin_perms{$admin->id}{"contact"}) { 
					Tab::Permission->create({ 
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "contact" });
				}

			} elsif ($admin_perms{$admin->id}{"contact"}) { 

				next ADMIN unless ($admin_perms{$person->id}{"owner"} 
					|| $admin_perms{$person->id}{"contact"} 
					|| $person->site_admin);


				if ($contact_count > 1) { 

					$contact_count--;
					$admin_perms{$admin->id}{"contact"}->delete;
					undef  $admin_perms{$admin->id}{"contact"};

				} else { 

					$err .= " You attempted to delete the last tournament contact.  ";
					$err .= "At least one user must be marked as tournament contact.";

				}

			}

		}

	}

	if ($admin_perms{$person->id}{"owner"} 
		|| $admin_perms{$person->id}{"full_admin"} 
		|| $person->site_admin) { 

		ADMIN:
		foreach my $admin (@admins) { 


			# Full admin rights are redundant
			next if $admin_perms{$admin->id}{"owner"};  

			if ($ARGS{$admin->id."_level"} eq "full_admin") { 
			
				unless ($admin_perms{$admin->id}{"full_admin"}) { 
					Tab::Permission->create({ 
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "full_admin" 
					});
				}

				# If I'm a full admin I need no other permissions;
				foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
					next if $key eq "owner";
					next if $key eq "contact";
					next if $key eq "full_admin";
					$admin_perms{$admin->id}{$key}->delete;
					undef $admin_perms{$admin->id}{$key};
				}

				next ADMIN;

			} elsif ($admin_perms{$admin->id}{"full_admin"}) { 
				$admin_perms{$admin->id}{"full_admin"}->delete;
				undef $admin_perms{$admin->id}{"full_admin"};
			}

			if ($ARGS{$admin->id."_level"} eq "limited") { 

				unless ($admin_perms{$admin->id}{"limited"}) { 
					Tab::Permission->create({ 
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "limited" });
				}

				# Registration access
				if ($ARGS{$admin->id."_registration"}) { 
					Tab::Permission->create({ 
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "registration"
					}) unless $admin_perms{$admin->id}{"registration"};

				} elsif ($admin_perms{$admin->id}{"registration"}) {  
					$admin_perms{$admin->id}{"registration"}->delete;
					undef $admin_perms{$admin->id}{"registration"};
				}

				# Tabulation access
				if ($ARGS{$admin->id."_tabbing"}) { 
					Tab::Permission->create({ 
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "tabbing"
					}) unless $admin_perms{$admin->id}{"tabbing"};

				} elsif ($admin_perms{$admin->id}{"tabbing"}) {  
					$admin_perms{$admin->id}{"tabbing"}->delete;
					undef $admin_perms{$admin->id}{"tabbing"};
				}

				#Judge Category Specific
				if ($ARGS{$admin->id."_category_tab"} && $ARGS{$admin->id."_category"}) { 

					my $category = Tab::Category->retrieve($ARGS{$admin->id."_category"});
					$m->abort unless $category->tourn->id == $tourn->id;

					if ($admin_perms{$admin->id}{"category_tab"}) { 

						$admin_perms{$admin->id}{"category_tab"}->category($category->id);
						$admin_perms{$admin->id}{"category_tab"}->update;

					} else { 

						$admin_perms{$admin->id}{"category_tab"} = 
							Tab::Permission->create({ 
								tourn    => $tourn->id,
								person   => $admin->id,
								category => $category->id,
								tag      => "category_tab",
							}) unless $admin_perms{$admin->id}{"category_tab"};

					}

				} elsif ($admin_perms{$admin->id}{"category_tab"}) {  
					$admin_perms{$admin->id}{"category_tab"}->delete;
					undef $admin_perms{$admin->id}{"category_tab"};
				}

				if ($admin_perms{$admin->id}{"entry_only"}) { 
					$admin_perms{$admin->id}{"entry_only"}->delete;
					undef $admin_perms{$admin->id}{"entry_only"};
				}

				next ADMIN;

			} elsif ($admin_perms{$admin->id}{"limited"}) { 

				$admin_perms{$admin->id}{"limited"}->delete;
				undef $admin_perms{$admin->id}{"limited"};

				$admin_perms{$admin->id}{"registration"}->delete 
					if $admin_perms{$admin->id}{"registration"};

				undef $admin_perms{$admin->id}{"registration"} 
					if $admin_perms{$admin->id}{"registration"};


				$admin_perms{$admin->id}{"tabbing"}->delete 
					if $admin_perms{$admin->id}{"tabbing"};

				undef $admin_perms{$admin->id}{"tabbing"} 
					if $admin_perms{$admin->id}{"tabbing"};

				$admin_perms{$admin->id}{"category_tab"}->delete 
					if $admin_perms{$admin->id}{"category_tab"};

				undef $admin_perms{$admin->id}{"category_tab"} 
					if $admin_perms{$admin->id}{"category_tab"};

			}

			if ($ARGS{$admin->id."_level"} eq "entry_only") { 
			
				unless ($admin_perms{$admin->id}{"entry_only"}) { 

					Tab::Permission->create({ 
						tourn  => $tourn->id,
						person => $admin->id,
						tag    => "entry_only" 
					});
					next ADMIN;
				}

			} elsif ($admin_perms{$admin->id}{"entry_only"}) { 
				$admin_perms{$admin->id}{"entry_only"}->delete;
				undef $admin_perms{$admin->id}{"entry_only"};
			}
			
		}
	}

	my $msg = "Permissions saved";
	$m->redirect("access.mhtml?err=$err&msg=$msg");

</%init>
