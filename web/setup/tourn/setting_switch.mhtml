<%args>
	$person
	$tourn
	$target_id      => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => 0
	$logtype        => "tabbing"
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	unless ($tourn) {
		$m->print('{ "error": true, "message": "No tourn found for ID '.$target_id.'"}');
		$m->abort();
	}

	my $message;
	my $nsda;

	my $logmsg;

	if ($setting_name) {

		$tourn->setting($setting_name, $property_value);
		$message = "Setting $setting_name changed to $property_value";

		if (
			(substr($setting_name, 0, 4) eq "nsda")
		) {

			my $award = $setting_name;
			$award =~ s/nsda_//g;
			$award =~ s/_trophy/ award/g;

			if ($property_value) {
				$logmsg = ucfirst($award)." changed to ORDERED";
			} else {
				$logmsg = ucfirst($award)." changed to NOT ordered";
			}

			$logtype = "districts";

		} elsif ($setting_name eq "shipping_address") {
			$logtype = "districts";
			$logmsg = "Shipping address changed";
		}

	} elsif ($property_name) {

		if ($property_name eq "hidden") {
			if ($property_value > 0) {
				$property_value = "1";
			} else {
				$property_value = "0";
			}
		}

		$tourn->$property_name($property_value);
		$tourn->update();
		$message = "Property $property_name changed to $property_value";

	}

    my %response = (
		error   => 0,
		message => $message
    );

	my $now = DateTime->now();

	$logmsg = $message unless $logmsg;

	Tab::ChangeLog->create({
		type        => $logtype,
		tourn       => $tourn->id,
		person      => $person->id,
		description => $logmsg,
		created     => $now
	});

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>
