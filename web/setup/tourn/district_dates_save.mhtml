<%args>
	$tourn
	$tourn_settings
	$person
	$weekend
	$name                => undef
	$start               => undef
	$starttime           => undef
	$end                 => undef
	$endtime             => undef
	$reg_start           => undef
	$reg_starttime       => undef
	$reg_end             => undef
	$reg_endtime         => undef
	$drop_deadline       => undef
	$drop_deadlinetime   => undef
	$judge_deadline      => undef
	$judge_deadlinetime  => undef
	$freeze_deadline     => undef
	$freeze_deadlinetime => undef
	$fine_deadline       => undef
	$fine_deadlinetime   => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $startdt;
	my $enddt;

	my $reg_startdt;
	my $reg_enddt;

	eval { 
		$startdt = Tab::dtme($start, $starttime, $tz);
		$enddt = Tab::dtme($end, $endtime, $tz);

		$reg_startdt = Tab::dtme($reg_start,$reg_starttime, $tz);
		$reg_enddt = Tab::dtme($reg_end,$reg_endtime, $tz);
	};

	unless ($startdt) { 
		my $err = "Start date was not valid";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}
	unless ($enddt) { 
		my $err = "End date was not valid";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	unless ($reg_startdt) { 
		my $err = "Registration start date was not valid";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	if ($tourn_settings->{"nsda_district"}) { 
		my $seven_days_ago = $startdt->clone;
		$seven_days_ago->subtract(days => 7);

		if ($reg_enddt > $seven_days_ago && !$person->site_admin) { 
			my $err = "Registration must be due no less than 7 days before the start of your District tournament";
			$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
		}
	}

	unless ($reg_enddt) { 
		my $err = "Registration deadline was not valid";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	if ($startdt->year < 400 || $enddt->year < 400) {
		my $err = "Those tournament start or end dates are set to occur during the early Roman Empire.";
		$err .= "<br /><br />Please use full years (2014 instead of 14).";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	if ($startdt->year < 2000 || $enddt->year < 2000) {
		my $err = "The year you chose for your start or end date ";
		$err .= "is several years in the past. <br /> <br />I doubt ";
		$err .= "that's what you want.  Try again?";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	if ($startdt->year > 2100 || $enddt->year > 2100) {
		my $err = "The year you chose for your start or end date is ";
		$err .= "in the far distant future.<br />As much as I like to be an ";
		$err .= "optimist, I doubt Tabroom will be around that long.  Try again?";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	if ($startdt->epoch > $enddt->epoch) { 
		my $err = "Your tournament starts after it ends.  ";
		$err .= "The laws of time and space are not pleased at your arrogance.  ";
		$err .= "Please preserve the universe and try again.";
		$m->redirect("dates.mhtml?weekend=$weekend&err=$err");
	}

	if ($startdt < $tourn_start) { 
		$tourn->start($startdt);
	}

	if ($reg_startdt < $tourn_reg_start) { 
		$tourn->reg_start($reg_startdt);
	}

	if ($enddt > $tourn_end) { 
		$tourn->end($enddt);
	}

	if ($reg_enddt > $tourn_reg_end) { 
		$tourn->reg_end($reg_enddt);
	}

	$tourn->update();

	my $drop_deadlinedt;
	my $judge_deadlinedt;
	my $freeze_deadlinedt;
	my $fine_deadlinedt;

	eval { 
		$drop_deadlinedt   = Tab::dtme($drop_deadline,$drop_deadlinetime, $tz);
		$judge_deadlinedt  = Tab::dtme($judge_deadline,$judge_deadlinetime, $tz);
		$freeze_deadlinedt = Tab::dtme($freeze_deadline,$freeze_deadlinetime, $tz);
		$fine_deadlinedt   = Tab::dtme($fine_deadline,$fine_deadlinetime, $tz);
	};

	$drop_deadlinedt = $reg_enddt->clone unless $drop_deadlinedt;
	$judge_deadlinedt = $reg_enddt->clone unless $judge_deadlinedt;
	$freeze_deadlinedt = $reg_enddt->clone unless $freeze_deadlinedt;
	$fine_deadlinedt = $reg_enddt->clone unless $fine_deadlinedt;

	$tourn->setting("drop_deadline_$waitlist", "date", $drop_deadlinedt);
	$tourn->setting("judge_deadline_$waitlist", "date", $judge_deadlinedt);
	$tourn->setting("freeze_deadline_$waitlist", "date", $freeze_deadlinedt);
	$tourn->setting("fine_deadline_$waitlist", "date", $fine_deadlinedt);

	my $msg = "Date changes have been saved for date set $weekend";

	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);

	$m->redirect("dates.mhtml?msg=$msg");

</%init>
