<%args>
	$tourn
	$tourn_settings
	$person
	$name                         => undef
	$start                        => undef
	$starttime                    => undef
	$end                          => undef
	$endtime                      => undef
	$reg_start                    => undef
	$reg_starttime                => undef
	$reg_end                      => undef
	$reg_endtime                  => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my $startdt = eval { return Tab::dtme($start, $starttime, $tz); };
	my $enddt   = eval { return Tab::dtme($end, $endtime, $tz); };

	my $reg_startdt = eval { return Tab::dtme($reg_start,$reg_starttime, $tz); };
	my $reg_enddt = eval { return Tab::dtme($reg_end,$reg_endtime, $tz); };

	unless ($startdt) {
		my $err = "Start date was not valid ($start $starttime)";
		$m->redirect("dates.mhtml?err=$err");
	}
	unless ($enddt) {
		my $err = "End date was not valid ($end $endtime)";
		$m->redirect("dates.mhtml?err=$err");
	}

	unless ($reg_startdt) {
		my $err = "Registration start date was not valid ($reg_start $reg_starttime)";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($tourn_settings->{"nsda_district"}) {

		my $seven_days_ago = $startdt->clone;
		$seven_days_ago->subtract(days => 7);

		if ($reg_enddt > $seven_days_ago && !$person->site_admin) {
			my $err = "Registration must be due no less than 7 days before the start of your District tournament";
			$m->redirect("dates.mhtml?err=$err");
		}
	}

	unless ($reg_enddt) {
		my $err = "Registration deadline was not valid";
		$m->redirect("dates.mhtml?err=$err");
	}

	my $tourn_start = $tourn->start;
	$tourn_start->set_time_zone("UTC");

	unless ($person->site_admin) { 
		if (
			$tourn_settings->{nsda_campus_purchased} > 0
			&& ($startdt->epoch ne $tourn_start->epoch)
			&& ($tourn_start->epoch < $now->epoch)
		) {
			my $err = "You may not change the start time/date of an online tournament after it has already begun";
			$m->redirect("dates.mhtml?err=$err");
		}
	}

	if ($startdt->year < 400 || $enddt->year < 400) {
		my $err = "Those tournament start and end dates are set to occur during the time of the Roman Empire.  <br /><br />I doubt that's what you want.  <br /><br />Please use full years (2019 instead of 19).";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->year < 2000 || $enddt->year < 2000) {
		my $err = "The year you chose for your start or end date is several years in the past. <br /> <br />I doubt that's what you want.  Try again?";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->year > 2100 || $enddt->year > 2100) {
		my $err = "The year you chose for your start or end date is in the far distant future.<br />I like to plan ahead and all, but I doubt that's what you want.  Try again?";
		$m->redirect("dates.mhtml?err=$err");
	}

	if ($startdt->epoch > $enddt->epoch) {
		my $err = "Your tournament starts after it ends.  The laws of time and space are not pleased at your arrogance.  Please preserve the universe and try again.";
		$m->redirect("dates.mhtml?err=$err");
	}

	$tourn->start($startdt);
	$tourn->end($enddt);

	$tourn->reg_end($reg_enddt);
	$tourn->reg_start($reg_startdt);

	$tourn->update;

	my @deadlines = (
		"drop",
		"judge",
		"freeze",
		"fine",
		"supp",
		"bill",
		"script",
		"release",
		"refund",
		"fifty_percent",
		"hundred_percent"
	);

	foreach my $key (@deadlines) {

		my $date = $ARGS{$key."_deadline"};
		my $time = $ARGS{$key."_deadlinetime"};

		my $dt = eval {
			return Tab::dtme($date, $time, $tz);
		};

		$dt = $reg_enddt->clone unless $dt;
		$dt = $enddt->clone if $dt > $enddt;
		$tourn->setting($key."_deadline", "date", $dt);
	}


	my $msg = "Date changes have been saved";
	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);
	$m->redirect("dates.mhtml?msg=$msg");

</%init>
