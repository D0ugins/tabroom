<%args>
	$tourn
	$tourn_settings
	$method
	$person
</%args>
<%init>

	my $msg;
	my $err;

	$m->comp("/funclib/log.mas",
		tourn       => $tourn->id,
		type        => "districts",
		person      => $person->id,
		description => "NSDA Method Switcher Called"
	);

	if ($ARGS{"nsda_pilot_debate"} != $tourn_settings->{"nsda_pilot_debate"}) {

		if ($ARGS{"nsda_pilot_debate"}) {
			$ARGS{"nsda_pilot_debate"} = 1;
		} else {
			$ARGS{"nsda_pilot_debate"} = 0;
		}

		if ($ARGS{"nsda_pilot_debate"}) {
			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				type        => "districts",
				person      => $person->id,
				description => "Switched to pilot rules for Debate"
			);
		} else {
			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				type        => "districts",
				person      => $person->id,
				description => "Switched to double-drop rules for Debate"
			);
		}

		$tourn->setting("nsda_pilot_debate", $ARGS{"nsda_pilot_debate"});
	}

	if ($ARGS{"nsda_pilot_speech"} != $tourn_settings->{"nsda_pilot_speech"}) {

		if ($ARGS{"nsda_pilot_speech"}) {
			$ARGS{"nsda_pilot_speech"} = 1;
		} else {
			$ARGS{"nsda_pilot_speech"} = 0;
		}

		$tourn->setting("nsda_pilot_speech", $ARGS{"nsda_pilot_speech"});
		$tourn->setting("nsda_speech_method", 0);

		if ($ARGS{"nsda_pilot_speech"}) {
			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				type        => "districts",
				person      => $person->id,
				description => "Switched to pilot rules for Speech"
			);
		}
	}

	unless ($ARGS{"nsda_pilot_speech"}) {

		if ($method &&
			($method eq "doubledown"
			|| $method eq "california_3"
			|| $method eq "california_2")
		) {

			unless ($method eq $tourn_settings->{"nsda_speech_method"}) {

				$m->comp("/funclib/log.mas",
					tourn       => $tourn->id,
					type        => "districts",
					person      => $person->id,
					description => "IE Rules changed to ".$method
				);

				$msg .= "<br />" if $msg;
				$msg .= "IE Rules changed to ".$method;
				$tourn->setting("nsda_speech_method", $method);
			}

		} else {
			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				type        => "districts",
				person      => $person->id,
				description => "No valid IE rules selected!"
			);

			$tourn->setting("nsda_speech_method", 0);
			$err .= "Traditional rules selected but no method has been chosen!  This district tournament cannot run until rules are chosen!";
		}
	}

	$m->comp("/funclib/district_tiebreakers.mas",
		tourn  => $tourn,
		person => $person
	);

	if ($ARGS{"nsda_strikes"} ne $tourn_settings->{"nsda_strikes"}) {

		$msg .= "<br />" if $msg;

		if ($ARGS{"nsda_strikes"}) {
			$ARGS{"nsda_strikes"} = 1;
			$msg .= "Strikes were enabled";
			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				type        => "districts",
				person      => $person->id,
				description => "District tournament strikes enabled"
			);
		} else {
			$ARGS{"nsda_strikes"} = 0;
			$msg .= "Strikes were disabled";
			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				type        => "districts",
				person      => $person->id,
				description => "District tournament strikes disabled"
			);
		}

		$tourn->setting("nsda_strikes", $ARGS{"nsda_strikes"});
	}

	if ($ARGS{"software"} ne $tourn_settings->{"nsda_tabbing_software"}) {

		$tourn->setting("nsda_tabbing_software", lc($ARGS{"software"})) if $ARGS{"software"};
		$msg .= "<br />" if $msg;
		$msg .= "Software set to ".$ARGS{"software"};

		$m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			type        => "districts",
			person      => $person->id,
			description => "Software set to ".uc($ARGS{"software"})
		);
	}

	$m->redirect("main.mhtml?err=$err&msg=$msg");

</%init>
