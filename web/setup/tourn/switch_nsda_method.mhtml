<%args>
	$tourn
	$method
</%args>
<%init>

	my $msg;

	if ($method eq "doubledown" 
		|| $method eq "california_3" 
		|| $method eq "california_2"
	) {

		unless ($method eq $tourn->setting("nsda_speech_method")) { 

			$tourn->setting("nsda_speech_method", $method);

			# Delete the old stuff
			
			foreach my $set (
				Tab::TiebreakSet->search(
					tourn => $tourn->id,
					name  => "IE Prelim Composite"
				),
				Tab::TiebreakSet->search(
					tourn => $tourn->id,
					name  => "IE Prelim"
				),
				Tab::TiebreakSet->search(
					tourn => $tourn->id,
					name  => "IE Prelim Seeding"
				),
				Tab::TiebreakSet->search(
					tourn => $tourn->id,
					name  => "IE Break To Elims"
				),
				Tab::TiebreakSet->search(
					tourn => $tourn->id,
					name  => "IE Semi"
				),
				Tab::TiebreakSet->search(
					tourn => $tourn->id,
					name  => "IE Final"
				)
			) { 
				$set->delete();
			}

			if ($method && $method eq "doubledown") {

                my $prelim_composite_set = Tab::TiebreakSet->create({
                    tourn => $tourn->id,
                    name  => "IE Prelim Composite"
                });

                $prelim_composite_set->setting("forfeits_never_break", 1);

                my $tiebreak_set = Tab::TiebreakSet->create({
                    tourn => $tourn->id,
                    name  => "IE Prelim",
                });

				# Updown gives a W for the first half of a section and a L for
				# the second half

				Tab::Tiebreak->create({
					name          => "downs",
					tiebreak_set  => $tiebreak_set->id,
					count         => "all",
					child         => $prelim_composite_set->id,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# The composite is determined by ranks first 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					truncate      => 5,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Judges' preference is the second

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					truncate      => 5,
					multiplier    => 1,
					priority      => 2
				}); 

				# Reciprocals is the third

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					truncate      => 5,
					multiplier    => 1,
					priority      => 3
				}); 

				# Adjusted ranks is fourth 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					truncate      => 5,
					multiplier    => 1,
					priority      => 1
				}); 

				# This tiebreaker set is not used in rounds, but is used to
				# determine seeding position in rounds after Round 2.

				my $seeding_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Seeding"
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $seeding_tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					truncate      => 5,
					multiplier    => 1,
					priority      => 1
				}); 

				# Final round placement tiebreakers. 

				my $final_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Final",
				}); 

				$final_tiebreak_set->setting("forfeits_never_break", 1);

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "elim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				});


				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				});

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				});

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				});

			} else { 

				# Create the composite scorer

				my $prelim_composite_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Composite"
				});

				$prelim_composite_set->setting("forfeits_never_break", 1);

				Tab::Tiebreak->create({ 
					name          => "ranks",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1,
					truncate      => 5,

				});

				Tab::Tiebreak->create({ 
					name          => "judgepref",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2

				});

				my $tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim"
				}); 

				Tab::Tiebreak->create({ 
					name          => "ranks",
					tiebreak_set  => $tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1

				});

				# Seeds for prelims to prelims are just composite ranks

				my $seed_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Seeding"
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $seed_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Seeds to advance to semis are more complicated

				my $first_break_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Break To Elims"
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $first_break_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 


				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $first_break_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $first_break_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $first_break_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				});

				# Break Semis to Finals

				my $semi_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Semi"
				});

				$semi_tiebreak_set->setting("truncate_to_smallest", 1);

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				my $tb = Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# 2nd: Judge pref of semifinal round

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				}); 

				# 3rd: Ranks of semi alone

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				}); 

				# 4th: Recips of semi alone

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				}); 

				# 5th: Raw ranks of all rounds (no re-rankings)

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				}); 

				# 6th is composite recips from prelims and raw recips from
				# semis

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "prelim",
					child         => $prelim_composite_set->id,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 

				# Rank the Finals

				my $final_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Final"
				});

				$final_tiebreak_set->setting("forfeits_never_break", 1);

				# First is rank totals from finals and semis, together with
				# composite ranks from prelims. 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Second is ranks from finals only

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				}); 

				# Third is Judge Prefs in the final 

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				}); 

				# Fourth is recips in the final 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				}); 

				# Fifth: Finals + Semis

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				}); 

				# Sixth is Judge Prefs in the final  + semis

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 

				# Seventh is recips in the final + semi

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 7
				}); 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 7
				}); 

				# Eighth: Finals + Semis + Unadjusted Prelims

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 8
				}); 

			} 

			$msg = "Method switched to $method \n";

		} 

	}

	unless ($ARGS{"software"} eq $tourn->setting("nsda_tabbing_software")) { 
		$tourn->setting("nsda_tabbing_software", lc($ARGS{"software"})) if $ARGS{"software"};
		$msg .= "Software set to ".$ARGS{"software"};
		$m->comp("/user/admin/nsda/update_dt_dates.mas", tourn => $tourn);
	}

	$m->redirect("main.mhtml?msg=$msg");
	
</%init>
