<%args>
	$username    => undef
	$password    => undef
	$tourn_id    => undef
	$event_id    => undef
	$no_prefs    => undef
	$session_id  => undef
	$category_id => undef
</%args>
<%init>

	################################################################
	#
	#               HEY PALMER YOU FRIGGIN MORON
	#
	#  When you add a field to the XML, you also have to add it to
	#   the XML.pm definition file in the library.  As you have
	#        forgotten to do about eight million times.   
	#
	################################################################

	use Tab::XML;
	use Crypt::PasswdMD5;
	use JSON;

	my $dbh = Tab::DBI->db_Main();

	my ($person, $tourn) = $m->comp("login_api.mas", 
		tourn_id   => $tourn_id,
		username   => $username,
		password   => $password,
		session_id => $session_id
	); 

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	my $xml_tourn = {
		id       => $tourn->id,
		name     => $tourn->name,
		start    => $tourn->start->datetime()."+00:00",
		end      => $tourn->end->datetime()."+00:00",
		timezone => $tz
	};

	my @events;
	my @categories; 

	if ($event_id) { 

		push @events, Tab::Event->retrieve($event_id);
		unless (@events) { 
			$m->clear_buffer();
			$m->print("No event found for ID $event_id");
			$m->abort;
		}

		push @categories, $events[0]->category if @events;

	} elsif ($category_id) { 

		push (@categories, Tab::Category->retrieve($category_id));

		unless (@categories) { 
			$m->clear_buffer();
			$m->print("No judge category found for ID $category_id");
			$m->abort;
		}

		foreach my $event ($categories[0]->events) { 
			push @events, $event if $ARGS{$event->id};
			push @events, $event if $event_id == $event->id;
		}

	} else { 
		push @categories, $tourn->categories;
		push @events, $tourn->events;
	}

	my @timeslots;

	foreach my $event (@events) { 
		push (@timeslots, $m->comp("/funclib/event_timeslots.mas", event => $event));
	}

	my %tseen = (); 
	@timeslots = grep { ! $tseen{$_->id} ++ } @timeslots;

	my $xml_timeslots = [];

	foreach my $ts (@timeslots) { 

		my $xml_ts = {
			id    => $ts->id,
			name  => $ts->name,
			start => $ts->start->datetime()."+00:00",
			end   => $ts->end->datetime()."+00:00"
		};

		push (@{$xml_timeslots}, $xml_ts);
	}
	
	my $xml_rooms = [];
	my %rated_already;
	my %used_site;

	foreach my $site ($tourn->sites) { 

		next if $used_site{$site->id}++;

		my %used_rooms;

		foreach my $room ($site->rooms(deleted => 0)) { 

			next if $used_rooms{$room->id}++;

			my $xml_room = {
				id   => $room->id,
				name => $room->name,
			};

			$xml_room->{quality} = $room->quality if $room->quality;
			$xml_room->{capacity} = $room->capacity if $room->capacity;
			$xml_room->{notes} = $room->notes if $room->notes;

			if ($room->inactive) { 
				$xml_room->{inactive} = "true";
			} else { 
				$xml_room->{inactive} = "false";
			}

			push (@{$xml_rooms}, $xml_room);
		}
	}

	my $tourn_settings = [];

	foreach my $tourn_setting ($tourn->settings) { 

		my $xml_tset = {
			TAG   => $TOURN_SETTING->TAG,
			VALUE => SETTING_VALUE($TOURN_SETTING),
			TOURN => $TOURN->ID
		};

		push (@{$tourn_settings}, $xml_tset);
	}

	my $xml_categories = [];

	foreach my $category (@categories) { 

		my $xml_category = {
			id   => $category->id,
			name => $category->name,
			abbr => $category->abbr
		};

		push (@{$xml_categories}, $xml_category);
	}

	my $xml_events = [];
	my $xml_event_settings = [];

	foreach my $event (@events) { 

		my $category_id = $event->category->id;
		
		my $xml_event = {
			id          => $event->id,
			name        => $event->name,
			abbr        => $event->abbr,
			type        => $event->type,
			category    => $category_id
		};

		push (@{$xml_events}, $xml_event);

		foreach my $event_setting ($event->settings) { 
		
			my $xml_eset = { 
				tag   => $event_setting->tag,
				value => setting_value($event_setting),
				event => $event_id
			};

			push (@{$xml_event_settings}, $xml_eset);
		}
	}

	my $sth = $dbh->prepare(" 
		select 
			entry_student.id,
			student.id, student.first, student.middle, student.last, 
				student.nsda, student.phonetic, student.chapter,
			entry.id, entry.code, entry.name, entry.event, entry.school, 
				entry.ada, entry.active, entry.dropped, entry.waitlist,
			school.id, school.name, school.chapter, school.code, 
				school.onsite, school.state, school.region, school.district,
			chapter.nsda, pairing_seed.value

			from (student, entry_student, entry, school, chapter) 

			left join entry_setting pairing_seed 
				where pairing_seed.tag = 'pairing_seed' 
				and pairing_seed.entry = entry.id

			where entry.event = ? 
				and entry.id = entry_student.entry
				and student.id = entry_student.student
				and entry.school = school.id 
				and student.chapter = chapter.id
			group by entry_student.id
	");

	my %done_school;
	my %done_student;
	my %done_entries;

	my $xml_schools = [];
	my $xml_entries = [];
	my $xml_students = [];

	foreach my $event (@events) { 

		$sth->execute($event->id);

		while ( 
			my ( 
				$entry_student_id,
				$student_id, $student_first, $student_middle, $student_last, 
				$student_nsda, $student_phonetic, $student_chapter, 
				$entry_id, $entry_code, $entry_name, $entry_event, $entry_school, 
				$entry_ada, $entry_active, $entry_dropped, $entry_waitlist, 
				$school_id, $school_name, $school_chapter, $school_code, $school_onsite, 
				$school_state, $school_region, $school_district,
				$chapter_nsda, $entry_seed
			) = $sth->fetchrow_array()
		) { 

			unless ($done_schools{$school_id}++) { 

				my $xml_school = { 
					id      => $school_id,
					name    => $school_name,
					chapter => $school_chapter
				};

				$xml_school->{code} = $school_code if $school_code;
				$xml_school->{nsda} = $chapter_nsda if $chapter_nsda;
				$xml_school->{region} = $school_region if $school_region;
				$xml_school->{district} = $school_district if $school_district;

				push (@{$xml_schools}, $xml_school);
			}

			unless ($done_entries{$entry_id}++) { 

				my $xml_entry = {
					id     => $entry_id,
					school => $school_id,
					event  => $event_id,
					code   => $entry_code,
					name   => $entry_name
				};

				$xml_school->{ada}      => "true" if $ada;
				$xml_school->{rating}   => "true" if $entry_seed;
				$xml_school->{dropped}  => "true" if $entry_dropped;
				$xml_school->{waitlist} => "true" if $entry_waitlist;

				push (@{$xml_entries}, $xml_entry);
			}

			unless ($done_student{$entry_id}{$student_id}) { 

				my $xml_student = {
					id     => $student_id,
					school => $school_id,
					entry  => $entry_id,
					first  => $student_first,
					last   => $student_last
				};

				$xml_student->{nsda} = $nsda if $nsda;
				$xml_student->{middle} = $student_middle if $student_middle;

				push (@{$xml_students}, $xml_student);

			}
		}
	}

	$sth = $dbh->prepare(" 
		select
			judge.id, judge.first, judge.middle, judge.last, judge.person,
			judge.code, judge.ada, judge.active, judge.obligation, judge.hired,
			judge.alt_category, judge.covers, judge.chapter_judge,
			judge.school,
			person.id, person.email, person.phone,
			tab_rating.value

		from judge
		left join person on person.id = judge.person
		left join judge_setting tab_rating 
			on tab_rating.tag = 'tab_rating' 
			and tab_rating.judge = judge.id

		where judge.category = ? 
	");

	my $rating_sth = $dbh->prepare(" 
		select
			rating.id, rating.type, rating.entry, rating.judge,
			rating.ordinal, rating.percentile,
			rating_tier.name

		from (rating, judge) 

		left join rating_tier on rating_tier.id = rating.rating_tier

		where rating.judge = judge.id
		and judge.category = ? 
	");

	my $strike_sth = $dbh->prepare(" 
		select
			strike.id, strike.type, strike.start, strike.end, 
			strike.judge, strike.entry, strike.event, strike.school, 
			strike.region, strike.district, strike.timeslot, 
			strike.shift, strike.registrant, strike.conflictee

		from (strike, judge) 

		where strike.judge = judge.id
		and judge.category = ? 
	");

	my $xml_judges = [];
	my $xml_ratings = [];
	my $xml_strikes = [];

	foreach my $category (@categories) { 

		$sth->execute($category->id);

		while (
			my (
				$judge_id, $judge_first, $judge_middle, $judge_last,
				$judge_person, $judge_code, $judge_ada, $judge_active,
				$judge_obligation, $judge_hired, $judge_alt_category,
				$judge_covers, $judge_chapter_judge, $judge_school,
				$tab_rating

			) = $sth->fetchrow_array()
		) { 

			my $xml_judge = {
				id             => $judge_id,
				first          => $judge_first,
				last           => $judge_last
			};

			$xml_judge->{school}     = $judge_school if $judge_school;
			$xml_judge->{inactive}   = "true" unless $judge_active;
			$xml_judge->{ada}        = "true" if $ada;
			$xml_judge->{email}      = $email if $email;
			$xml_judge->{obligation} = $obligation if $obligation;
			$xml_judge->{hired}      = $hired if $hired;
			$xml_judge->{rating}     = $tab_rating if $tab_rating;

			push (@{$xml_judges}, $xml_judge);
		}

		unless ($no_prefs) { 

			$rating_sth->execute($category->id);

			while ( 
				my ( 
					$rating_id, $rating_type, $rating_entry, $rating_judge,
					$rating_ordinal, $rating_percentile, $rating_tier_name
				) = $sth->fetchrow_array()
			) { 

				next unless $rating_ordinal || $rating_tier_name;

				my $xml_rating = {
					ID    => $rating->id,
					ENTRY => $rating_entry,
					JUDGE => $rating_judge
				};

				if ($rating_tier_name) { 
					$xml_rating->{RATING} = $rating_tier_name;
				} else { 
					$xml_rating->{RATING} = $rating_ordinal;
					$xml_rating->{PERCENTILE} = $rating_percentile;
				}

				push (@{$xml_ratings}, $xml_rating);
			}
		}

		$strike_sth->execute($category->id);

		while ( 
			my ( 
				$strike_id, $strike_type, $strike_start, $strike_end, $strike_judge,
				$strike_entry, $strike_event, $strike_school, $strike_region, $strike_district,
				$strike_timeslot, $strike_shift, $strike_registrant, $strike_conflictee
			) = $sth->fetchrow_array()
		) { 

			
		}
	}

	$sth = $dbh->prepare(" 
		select 
			score.id, score.tag, score.student, score.value, score.speech, score.position, score.topic, score.content,
			ballot.id, ballot.panel, ballot.judge, ballot.entry, ballot.bye, 
				ballot.forfeit, ballot.side, ballot.speakerorder, ballot.audit, ballot.chair,
			panel.id, panel.letter, panel.round, panel.room, panel.bye, panel.flight, panel.bracket,
			round.id, round.name, round.event, round.flighted, round.tiebreak_set, 
				round.label, round.type, round.timeslot, runoff.id

			from (round)

			left join panel on panel.round = round.id 
			left join ballot on ballot.panel = panel.id
			left join score on score.ballot = ballot.id 
			left join round runoff on runoff.id = round.runoff

			where round.event = ? 

			group by score.id
	");

	my $rs_sth = $dbh->prepare("
		select
			round.id, round_setting.id, round_setting.tag, 
			round_setting.value, round_setting.value_date, round_setting.value_text
		from (round, round_setting)

		where round.event = ? 
			and round.id = round_setting.round
	");

	my $xml_rounds = [];

	my %round_done;
	my %panel_done;
	my %ballot_done;

	foreach my $event (@events) { 

		my %rounds; 
		my %panels;
		my %ballots;

		$sth->execute($event->id);

		while (
			my (
				$score_id, $score_tag, $score_student, $score_value, $score_speech,
				$score_position, $score_topic, $score_content,
				$ballot_id, $ballot_panel, $ballot_judge, $ballot_entry, $ballot_bye,
				$ballot_forfeit, $ballot_side, $ballot_speakerorder, $ballot_audit, $ballot_chair,
				$panel_id, $panel_letter, $panel_round, $panel_room, $panel_bye, $panel_flight, $panel_bracket,
				$round_id, $round_name, $round_event, $round_flighted, $round_tiebreak_set,
				$round_label, $round_type, $round_timeslot, $num_judges, $motion, $runoff_id
			) = $sth->fetchrow_array() 
		) { 

			unless ($round_done{$round_id}++) { 

				my $xml_round = {
					id           => $round_id,
					event        => $event->id,
					timeslot     => $round_timeslot,
					tiebreak_set => $round_tiebreak_set,
					name         => $round_name,
					type         => $round_type
				};

				$xml_round->{label }  = $round_label if $round_label;
				$xml_round->{flights} = $round_flighted if $round_flighted;
				$xml_round->{runoff}  = $runoff_id if $runoff_id;

				$rounds{$round_id} = $xml_round;

				my $rs_sth->execute($event->id);

				while ( 
					my ( $round_id, $id, $tag, $value, $value_date, $value_text ) = $rs_sth->fetchrow_array()
				) { 

					if ($value eq "date") { 
						$value_date =~ s/ /T/g;
						$value = $value_date."-00:00";
					} elsif ($value eq "text") { 
						$value = $value_text;
					}

					my $xml_rs = { 
						id    => $id,
						round => $round_id,
						tag   => $tag,
						value => $value
					};

					push @{$xml_round->{settings}}, $xml_rs;

				}
				push @{$xml_rounds}, $xml_round;
			}

			unless ($panel_done{$panel_id}++ || (not defined $panel_id)) { 

				my $xml_panel = {	
					id      => $panel_id,
					round   => $round_id,
					room    => $panel_room,
					letter  => $panel_letter
				};

				$xml_panel->{bye} = "true" if $panel_bye;
				$xml_panel->{bracket} = $panel_bracket if $panel_bracket;

				if ($panel_flight) { 
					$xml_panel->{flight} = $panel_flight;
				} else { 
					$xml_panel->{flight} = 1;
				}

				$panels{$panel_id} = $xml_panel;
			}

			unless ($ballot_done{$ballot_id}++ || (not defined $ballot_id)) { 

				my $xml_ballot = {
					id           => $ballot_id,
					panel        => $panel_id,
					entry        => $ballot_entry
				};

				$xml_ballot->{speakerorder} = $ballot_speakerorder if $ballot_speakerorder;

				$xml_ballot->{judge}   = $ballot_judge if $ballot_judge;
				$xml_ballot->{side}    = $ballot_side if $ballot_side;
				$xml_ballot->{bye}     = "true" if $ballot_bye;
				$xml_ballot->{chair}   = "true" if $ballot_chair;
				$xml_ballot->{audit}   = "true" if $ballot_audit;
				$xml_ballot->{forfeit} = "true" if $ballot_forfeit;

				$ballots{$ballot_id} = $xml_ballot;

			}

			if ($score_id) { 

				my $xml_score = {
					id       => $score_id,
					type     => $score_tag,
					ballot   => $ballot_id,
					value    => $score_value,
				};

				$xml_score->{speaker}  = $score_student if $score_student;
				$xml_score->{topic}    = $score_topic if $score_topic;
				$xml_score->{speech}   = $score_speech if $score_speech;
				$xml_score->{position} = $score_position if $score_position;
				$xml_score->{content}  = $score_content if $score_content;

				push @{$ballots{$ballot_id}{"scores"}}, $xml_score;
			}
		}

		foreach my $ballot_id (keys %ballots) { 
			push @{$panels{$ballots{$ballot_id}{panel}}}, $ballots{$ballot_id};
		}

		foreach my $panel_id (keys %panels) { 
			push @{$rounds{$panels{$panel_id}{round}}}, $panels{$panel_id};
		}

		foreach my $round_id (keys %rounds) { 
			push @{$xml_rounds}, $rounds{$round_id};
		}
	}

	my $xml_tiebreaks = [];

	foreach my $tiebreak_set ($tourn->tiebreak_sets) { 

		my $xml_tiebreak_set = {
			id   => $tiebreak_set->id,
			name => $tiebreak_set->name
		};

		foreach my $setting ($tiebreak_set->settings) { 

			my $xml_tiebreak_set_setting = { 
				tiebreak_set => $tiebreak_set->id,
				tag          => $setting->tag,
				value        => setting_value($setting)
			};

			push (@{$xml_tiebreak_set->{settings}}, $xml_tiebreak_set_setting);
		}

		foreach my $tiebreak ($tiebreak_set->tiebreaks) { 

			my $xml_tb = {
				id                => $tiebreak->id,
				priority          => $tiebreak->priority,
				name              => $tiebreak->name,
				highlow           => $tiebreak->highlow,
				highlow_count     => $tiebreak->highlow_count,
				count             => $tiebreak->count,
				count_round       => $tiebreak->count_round,
				truncate          => $tiebreak->truncate,
				truncate_smallest => $tiebreak->truncate_smallest,
				multiplier        => $tiebreak->multiplier,
				child             => $tiebreak->child,
				tiebreak_set      => $tiebreak_set->id
			};

			push (@{$xml_tiebreak_set->{tiebreaks}}, $xml_tb);
		}

		push (@{$xml_tiebreak_sets}, $xml_tiebreak_set);
	}

#	Elimination bracket
	my $xml_brackets = [];

	foreach my $event (@events) { 

		next if 1 == 1;
		my $elim_id++;

		my @brackets = Tab::ResultSet->search(
			event   => $event->id,
			bracket => 1
		);

		foreach my $bracket (@brackets) { 

			#all right, so I was bored with descriptive sql function names.  Sue me.
			Tab::Result->set_sql( fluglehorn => "
				select distinct result.*, result_value.value as value
				from result, result_value
				where result.result_set = ?
				and result.id = result_value.result
				and result_value.priority = 1"
			);

			my @results = sort {$a->round->name <=> $b->round->name} Tab::Result->search_fluglehorn($bracket->id);

			my @elim_rounds;

			foreach my $result (@results) { 
				push (@elim_rounds, $result->round->id);
			}

			my %seen = (); 
			@elim_rounds = grep { ! $seen{$_} ++ } @elim_rounds;

			foreach my $round (@elim_rounds) { 

				my $round_count;
			
				foreach my $result (@results) { 

					next unless $round == $result->round->id;

					$round_count++;

					my $event_id = $bracket->event->id if $bracket && $bracket->event;
					my $round_id = $result->round->id if $result && $result->round; 
					my $entry_id = $result->entry->id if $result && $result->entry;

					next unless $event_id && $round_id && $entry_id;

					my $xml_elimseed = { 
						id    => $elim_id,
						event => $event_id,
						round => $round_id,
						entry => $entry_id,
						seed  => $result->value
					};

					push (@{$xml_brackets}, $xml_elimseed);
				}

				next if $round_count * 2 == (2 << log($round_count) / log(2));

				foreach my $seed ( ($round_count + 1) .. (2 << log($round_count) / log(2))   ) { 
				
					$elim_id++;

					my $xml_elimseed = { 
						id    => $elim_id,
						event => $bracket->event->id,
						round => $round,
						entry => 0,
						seed  => $seed
					};

					push (@{$xml_brackets}, $xml_elimseed);

				}
			}
		}
	}

	$m->clear_buffer();
	$m->print("Content-Type: application/json");

	my %json_hash = ( 
		tourn         => $xml_tourn,
		tourn_setting => $xml_tourn_settings,
		timeslot      => $xml_timeslots,
		room          => $xml_rooms,
		category      => $xml_categories,
		event         => $xml_events,
		entry         => $xml_entries,
		student       => $xml_students,
		judge         => $xml_judges,
		rating        => $xml_ratings,
		strike        => $xml_strikes,
		school        => $xml_schools,
		round         => $xml_rounds,
		panel         => $xml_panels,
		ballot        => $xml_ballots,
		score         => $xml_scores,
		elimseed      => $xml_brackets,
		tiebreak_set  => $xml_tiebreak_sets
	);

	my $filename = $tourn->name;
	$filename =~ s/[\W_]//g;
	$filename = $filename."-".$now->ymd('-')."-at-".$now->hms('-').".json";

	my $json = JSON->new->allow_nonref;

	$r->content_type('application/json');
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	$m->print($json->pretty->encode( \%json_hash ));
	$m->abort();


	sub setting_value { 

		my $setting = shift; 

		if ($setting->value eq "date") { 
			return Tab::pickerdate($setting->value_date);
		} elsif ($setting->value eq "text") { 
			return $setting->value_text;
		} elsif ($setting->value) { 
			return $setting->value;
		} else { 
			return 0;
		}

	}
	
</%init>
