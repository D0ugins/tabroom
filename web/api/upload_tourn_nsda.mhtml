<%args>
	$username   => undef
	$password   => undef
	$tourn_id	=> undef
	$debug      => undef
	$account_id => undef
	$session_id => undef
	$event_id => undef
	$round_name => undef
</%args>
<%init>

	$m->print("Made it to the tabroom code");
	$m->print("event_id is ".$event_id." and round_name is ".$round_name."<br>");
	
#	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;

	use strict;
	use warnings;
	use Data::Dumper; 
	binmode STDOUT, ":utf8";
	use utf8;
	use DateTime;
	use Time::HiRes qw( time );
	use JSON;
	use Encode qw(encode_utf8);

	my $start = time(); 

	my ($person, $tourn, $session, $perms) = $m->comp("login_api.mas", 
		tourn_id   => $tourn_id,
		username   => $username,
		password   => $password,
		session_id => $session_id
	); 

	if ($person && $tourn) { 
		#Everything's OK!
	} elsif ($person) { 
		$m->print("No tournament found for ID $tourn_id");
		$m->abort();
	} else($person) { 
		$m->print("No valid user found for $username with that password");
		$m->abort();
	}
	
	my $tz = $tourn->tz if $tourn->tz;
	$tz = "UTC" unless $tz;
	
	my $dbh = Tab::DBI->db_Main();

	##upload sequence

	my $now = DateTime->now;
	$now->set_time_zone($tz);

	my $req = Apache2::Request->new($r, DISABLE_UPLOADS => 0);
	my @json_handles = $r->upload;
	my $json_file = $req->upload($json_handles[0]);
	unless ($json_file) { print $r." Couldn't find file<br>"; $m->abort };

	my $json_filename = $json_file->tempname;
	my $filename = $json_filename;
	$m->print("file name is ".$filename);

	#### This reads the file and converts the JSON to a hash called %data ###
		
	my $json;
	#my $filename = '/www/tabroom/web/register/data/NSDA.json';

	{
	  local $/; #Enable 'slurp' mode
	  open my $fh, "<", $filename;
	  $json = <$fh>;
	  close $fh;
	}

	my $HashReferenceDecoded = decode_json($json);
	my %data = %$HashReferenceDecoded;

	print "Time to load JSON file into a hash:"; printf("%.2f\n", time() - $start) ; print "<br>";

	$m->print("Upload successful");
	
	foreach my $rec (sort keys %{ $data{'event'} } ) {
	
		# Assuming $rec is an event id, this checks if the person has event access.
		# If they have overall access, the "details" has not existing suffices.
		# login_api.mas will already kick them out if they're entry only.  -CLP
		next if $perms->{'details'} && $perms->{"details"}{$rec} ne "admin";

		$m->print( $data{'event'}{$rec}{'name'} );
	}

</%init>
