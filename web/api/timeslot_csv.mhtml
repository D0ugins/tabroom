<%args>
	$api_key     => undef
	$api_id      => undef
	$timeslot_id => undef
	$tourn_id    => undef
</%args>
<%init>

    $m->clear_buffer();
    $r->content_type('application/csv');

	my $person;
	my $timeslot;
	my $tourn;

	unless ($r->hostname eq "local.tabroom.com") {

		($person, $tourn) = $m->comp("login_api.mas",
			method    => "api_key",
			person_id => $api_id,
			api_key   => $api_key,
			tourn_id  => $tourn_id,
		);

		unless ($person && $tourn) {
			$m->print("No valid API user or key sent");
			$m->abort();
		}

		$timeslot = Tab::Timeslot->retrieve($timeslot_id);

		unless ($timeslot && $timeslot->tourn == $tourn) {
			$m->print("Timeslot $timeslot_id does not belong to tournament $tourn_id");
			$m->abort();
		}

	} else {

		$person   = Tab::Person->retrieve(1);
		$timeslot = Tab::Timeslot->retrieve($timeslot_id);
		$tourn    = $timeslot->tourn;
		$tourn_id = $tourn->id;
	}

    my $filename = "Timeslot-$timeslot_id.csv";
    $r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	my %rounds = $m->comp("/funclib/round_data.mas",
		timeslot_id => $timeslot_id,
		no_name     => 1
	);

	foreach my $round_id (
		sort {
			$rounds{$a}{"event_abbr"} cmp $rounds{$b}{"event_abbr"}
			|| $rounds{$a}{"number"} <=> $rounds{$b}{"number"}
		} keys %rounds
	) {

		my $round = $rounds{$round_id};

		foreach my $panel_id (sort {
			length($round->{"panels"}{$a}{"letter"}) <=> length($round->{"panels"}{$b}{"letter"})
			|| $round->{"panels"}{$a}{"letter"} cmp $round->{"panels"}{$b}{"letter"}
		} keys %{$round->{panels}}) {

			my $panel = $round->{panels}{$panel_id};

			if ($ARGS{"mode"} eq "vertical") {

				$m->print('"');
				$m->print($panel_id);
				$m->print('","');
				$m->print($panel->{"letter"});
				$m->print('","');

				if ($panel->{bye}) {
					$m->print("BYE");
					$m->print('","');
				} else {
					$m->print($panel->{"room_name"});
					$m->print('","');
					$m->print($panel->{"room_api"});
				}

				$m->print('","');

				if ($round->{flights}) {
					$m->print("Flt ".$panel->{"flight"});
				}
				$m->print('","');
				$m->print($round->{start});
				$m->print('","');

				unless ($panel->{"not_done"}) {
					$m->print("DONE");
				}

				$m->print('"'."\n");

				foreach my $entry_id (
					sort {
						$panel->{entries}{$a}{"side"} <=> $panel->{entries}{$b}{"side"}
						|| $panel->{entries}{$a}{"order"} <=> $panel->{entries}{$b}{"order"}
						|| $panel->{entries}{$a}{"code"} cmp $panel->{entries}{$b}{"code"}
					} keys %{$panel->{entries}}
				) {

					my $entry = $panel->{entries}{$entry_id};
					$m->print('"');
					$m->print($entry->{"side_name"});
					$m->print('","');
					$m->print($entry->{"code"});
					$m->print('","');
					$m->print($entry->{"name"});
					$m->print('"'."\n");
				}

				my $notfirst;

				foreach my $judge_id (
					sort {
						$panel->{judges}{$a}{"code"} cmp $panel->{judges}{$b}{"code"}
						|| $panel->{judges}{$a}{"last_name"} cmp $panel->{judges}{$b}{"last_name"}
					} keys %{$panel->{judges}}
				) {

					my $judge = $panel->{judges}{$judge_id};

					$m->print('"');
					unless ($notfirst++) {
						$m->print('Judges');
					}

					$m->print('","');
					$m->print($judge_id);
					$m->print('","');

					if ($judge->{code}) {
						$m->print($judge->{"code"});
						$m->print('","');
						$m->print($judge->{"first_name"}." ");
						$m->print($judge->{"last_name"});
					} else {
						$m->print($judge->{"last_name"}.", ");
						$m->print($judge->{"first_name"});
					}

					$m->print('"'."\n");
				}

			} else {

				$m->print('"');
				$m->print($round->{"event_abbr"});
				$m->print('","');
				$m->print($round->{"name"});
				$m->print('","');
				$m->print($round->{start});
				$m->print('","');
				$m->print($panel_id);
				$m->print('","');
				$m->print($panel->{"bracket"});
				$m->print('","');

				if ($panel->{bye}) {
					$m->print("BYE");
				} else {
					$m->print($panel->{"room_name"});
					$m->print('","');
					$m->print($panel->{"room_api"});
				}

				$m->print('","');
				$m->print("Flt".$panel->{"flight"});
				$m->print('","');

				my @entries = sort {
						$panel->{entries}{$a}{"side"} <=> $panel->{entries}{$b}{"side"}
						|| $panel->{entries}{$a}{"order"} <=> $panel->{entries}{$b}{"order"}
						|| $panel->{entries}{$a}{"code"} cmp $panel->{entries}{$b}{"code"}
					} keys %{$panel->{entries}};

				foreach (1 .. $round->{"max_entries"}) {

					my $entry;

					if (@entries) {
						my $eid = shift @entries;
						$entry = $panel->{entries}{$eid};
					}

					$m->print($entry->{"code"}) if $entry;
					$m->print('","');
					$m->print($entry->{"name"}) if $entry;
					$m->print('","');
					$m->print('","');
				}

				$m->print('","');

				foreach my $judge_id (
					sort {
						$panel->{judges}{$a}{"code"} cmp $panel->{judges}{$b}{"code"}
						|| $panel->{judges}{$a}{"last_name"} cmp $panel->{judges}{$b}{"last_name"}
					} keys %{$panel->{judges}}
				) {

					my $judge = $panel->{judges}{$judge_id};

					$m->print($judge_id);
					$m->print('","');

					if ($judge->{code}) {
						$m->print($judge->{"code"});
						$m->print('","');
						$m->print($judge->{"first_name"}." ");
						$m->print($judge->{"last_name"});
					} else {
						$m->print($judge->{"last_name"}.", ");
						$m->print($judge->{"first_name"});
					}

					$m->print('","');

				}
			}

			$m->print('"'."\n");
		}
	}

	$m->flush_buffer();
	$m->abort();

</%init>
