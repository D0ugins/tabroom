<%args>
	#Pass in a school by chapter ID code in the URL parameters
	$chapter_id => undef

</%args>
<%init>

	#Retrieve the chapter object by the chapter_id code
	my $chapter = Tab::Chapter->retrieve($chapter_id);
	my $from_dt = Tab::school_year();

	#If chapter wasn't found, print an error and abort
	unless ($chapter) {
		$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<ERROR>School not found.</ERROR>");
		$m->abort;
 	}

	#Initiate new XML
	use XML::Simple;
	my $xs = new XML::Simple();

	#Print the start of the XML
	$m->clear_buffer();
	$r->content_type("application/xml");
	$m->print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n");
	$m->print("<TEAMS>\r\n");

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select entry.id, entry.name,
			student1.id, student1.first, student1.last,
			student2.id, student2.first, student2.last

		from (entry, school, tourn)

		left join entry_student es1 on es1.entry = entry.id
		left join student student1 on es1.student = student1.id

		left join entry_student es2 on es2.entry = entry.id and es2.id != es1.id
		left join student student2 on es2.student = student2.id

		where entry.school = school.id
		and school.chapter = ?
		and entry.active = 1
		and school.tourn = tourn.id
		and tourn.start > ?
		order by entry.timestamp DESC

	");

	$sth->execute($chapter->id, DateTime::Format::MySQL->format_datetime($from_dt));

	my %teams;
	my %teamlist;

	my $order;
	my $chapter_name = $m->comp("/funclib/short_name.mas", name => $chapter->name);

	while (
		my (
			$entry_id, $entry_name,
			$student1_id, $student1_first, $student1_last,
			$student2_id, $student2_first, $student2_last
		) = $sth->fetchrow_array()
	) {

		next if $teams{$student1_id}{$student2_id}++;
		next unless $student2_first && $student2_last;

		$teamlist{$entry_name}{"order"} = $order++;

		$teamlist{$entry_name}{"name"} = $chapter_name." ".$student1_last." & ".$student2_last;

		$teamlist{$entry_name}{"1"} = $student1_first." ".$student1_last;
		$teamlist{$entry_name}{"2"} = $student2_first." ".$student2_last;
	}

	#Loop through each team in the unique team list
	foreach my $team (sort {$teamlist{$a}{"order"} <=> $teamlist{$b}{"order"}} keys %teamlist) {

		#Set variables for the XML
		my $xml_team = {
			TEAM_NAME => $teamlist{$team}{"name"},
			DEBATER1 => $teamlist{$team}{1},
			DEBATER2 => $teamlist{$team}{2}
		};

		#Print XML
		$m->print("<TEAM>\n");
		$m->print($xs->XMLout($xml_team, RootName => "", NoAttr => 1, XMLDecl => 0));
		$m->print("</TEAM>\n");
	}

	#Close XML
	$m->print("</TEAMS>");
</%init>
