<%args>
	$panel_id => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	my $limit;

	if (int($panel_id) > 0) {
		$limit = " and panel.id = ".int($panel_id);
	}

	my $sth = $dbh->prepare("
		select
			panel.id,
			flip_status.value,
			flip.value_text,
			flip_team_order.value, flip_anyone_chooses.value, flip_deadline.value

		from (panel, round, panel_setting flip, panel_setting.flip_at, panel_setting.flip_status)


			left join event_setting flip_team_order
				on flip_team_order.event = round.event
				and flip_team_order.tag = 'flip_team_order'

			left join event_setting flip_anyone_chooses
				on flip_anyone_chooses.event = round.event
				and flip_anyone_chooses.tag = 'flip_anyone_chooses'

			left join event_setting flip_deadline
				on flip_deadline.event = round.event
				and flip_deadline.tag = 'flip_deadline'

		where flip_at.value_date <= now()
			and flip_status.value != 'done'
			and panel.round = round.id

			and flip.panel = panel.id and flip.tag = 'flip'
			and flip_status.panel = panel.id and flip_status.tag = 'flip_status'
			and flip_at.panel = panel.id and flip_at.tag = 'flip_at'

			$limit
	");

	my $now = DateTime->now();

	$sth->execute();


	while (
		my (
			$panel_id, $flip_status, $flip,
			$team_order, $anyone_chooses, $deadline
		) = $sth->fetchrow_array()
	)  {

		my $new_dt = $now->clone();

		my %flips = eval {
			return %{JSON::decode_json($flip)};
		};

		unless ($deadline) {
			$deadline = 5;
		}

		unless ($team_order) {
			$flips{"order_locked"}++;
		}

		$new_dt->add(minutes => $deadline);
		my $new_deadline = DateTime::Format::MySQL->format_datetime($new_dt);

		my $new_status;

		if ($flip_status eq "winner") {

			if ($flips{"side_locked"} > 0 && $flips{"order_locked"} > 0) {

				$new_status = "done";

			} elsif ($team_order) {

				if ($ARGS{"decision"}) {
					Tab::debuglog("I have a decision so loser");
					$new_status = "loser";
				} elsif ($flips{"side_locked"} > 0 || $flips{"order_locked"} > 0) {
					Tab::debuglog("A choice was made so loser");
					$new_status = "loser";
				} elsif ($anyone_chooses) {
					Tab::debuglog("Anyone setting is $anyone_chooses so anyone");
					$new_status = "anyone";
				} else {
					Tab::debuglog("Time expired so loser choice");
					$new_status = "loser";
				}

			} elsif ($anyone_chooses) {
				$new_status = "anyone";

			} else {
				$new_status = "loser";
			}

		} elsif ($flip_status eq "loser") {

			if ($flips{"side_locked"} > 0 && $flips{"order_locked"} > 0) {
				$new_status = "done";
			} elsif ($ARGS{"decision"}) {
				$new_status = "winner";
			} else {
				$new_status = "anyone";
			}

		} elsif ($flip_status eq "anyone") {

			unless ($team_order) {
				$flips{"order_locked"}++;
			}

			unless ($flips{"side_locked"}) {

				$flips{"side_locked"} = 1;
				$flips{"side_auto_chosen"} = 1;
				$flips{"side_chosen_at"} = DateTime::Format::MySQL->format_datetime($now);

				my @flips = List::Util::shuffle(1, 2);

				if ($flips[0] == 2) {
					$m->comp("/funclib/swap_sides.mas", panel_id => $panel_id);
				}
			}

			unless ($flips{"order_locked"}) {

				$flips{"order_locked"} = 1;
				$flips{"order_auto_chosen"} = 1;
				$flips{"order_chosen_at"} = DateTime::Format::MySQL->format_datetime($now);

				my @flips = List::Util::shuffle(1, 2);

				#The fed side will be 2nd speaker
				$m->comp("/funclib/swap_orders.mas",
					panel_id => $panel_id,
					side     => $flips[0]
				);

			}

			$new_status = "done";
		}

		if ($new_status) {

			my $wipe_sth = $dbh->prepare("
				delete panel_setting.*
				from panel_setting
				where panel_setting.panel = ?
				and panel_setting.tag in ('flip', 'flip_at', 'flip_status')
			");

			my $create_sth = $dbh->prepare("insert into panel_setting (panel, tag, value) values (?, ?, ?)");
			my $create_date_sth = $dbh->prepare("insert into panel_setting (panel, tag, value, value_date) values ( ?, ?, 'date', ? )");
			my $create_json_sth = $dbh->prepare("insert into panel_setting (panel, tag, value, value_text) values ( ?, ?, 'json', ? )");

			my $json = JSON::encode_json(\%flips);

			$wipe_sth->execute($panel_id);
			$create_sth->execute($panel_id, "flip_status", $new_status);
			$create_date_sth->execute($panel_id, "flip_at", $new_deadline);
			$create_json_sth->execute($panel_id, "flip", $json);

			$wipe_sth->finish();
			$create_sth->finish();
			$create_date_sth->finish();
			$create_json_sth->finish();

			$m->comp("/funclib/blast_flips.mas",
				panel_id    => $panel_id
			);
		}
	}

	return;

</%init>
