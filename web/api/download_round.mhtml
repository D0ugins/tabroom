<%args>
	$person   => undef
	$tourn    => undef
	$round    => undef
	$username => undef
	$password => undef
	$round_id => undef
	$tourn_id => undef
</%args>
<%init>

	use Crypt::PasswdMD5;
	use XML::Simple;

	unless ($person) {

		my $login = Tab::Login->search( username => lc($username) )->first;

		unless ($login) {
			$m->print("<error>No person with the username ".$username." was found.</error>");
			$m->abort;
		}

		$password =~ s/\s+$//g;
		my $db_password = $login->password;
		my $verify_password = unix_md5_crypt($password,$db_password);

		unless ($verify_password eq $db_password) {
			$m->print("<error>Password incorrect for ".$username.".</error>");
			$m->abort;
		}

		$person = $login->person;

	}

	$round = Tab::Round->retrieve($round_id) unless $round;
	$tourn = Tab::Tourn->retrieve($tourn_id) unless $tourn;

	unless ($round) {
		$m->print("NO_SUCH_ROUND");
		$m->abort;
	}

	my $event = $round->event;

	unless ($tourn) {
		$tourn = $event->tourn;
	}

    my %perms = ();

	unless ($tourn) {
		$m->print("NO_SUCH_TOURNAMENT");
		$m->abort;
	}

	if ($person->site_admin) {

		$perms{"owner"}++;

	} else {

		my @tourn_access = Tab::Permission->search(
			person => $person->id,
			tourn  => $tourn->id
		);

		%perms = map {$_->tag => $_} @tourn_access;
	}

    if ($person) {
        if ($person->site_admin) {
            $perms{"owner"}++;
        } elsif ($tourn) {
            my @tourn_access = Tab::Permission->search( person => $person->id, tourn => $tourn->id );
            %perms = map {$_->tag => $_} @tourn_access;
        }
    }

	unless ($perms{"owner"} || $perms{"full_admin"} || $perms{"tabbing"} || $perms{"category_tab"}) {
		$m->print("TOURN_ACCESS_DENIED");
		$m->abort;
	}


	if ($perms{"category_tab"} && $perms{"category_tab"}->category->id != $event->category->id) {
		$m->print("JUDGE_GROUP_ACCESS_DENIED");
		$m->abort;
	}

	unless ($event->tourn->id == $tourn->id) {
		$m->print("ROUND_NOT_IN_TOURNAMENT");
		$m->abort;
	}

	Tab::JudgeSetting->set_sql(upload_id => "
		select distinct judge_setting.*
		from judge_setting, judge
		where judge.category = ?
			and judge.id = judge_setting.judge
			and judge_setting.tag = 'upload_id'
	");

	my %judge_id_translator = ();

	foreach my $setting (Tab::JudgeSetting->search_upload_id( $event->category->id )) {
		$judge_id_translator{$setting->judge->id} = $setting->value;
	}

	my $xml_panels = [];
	my $xml_ballots = [];
	my $xml_values = [];

	foreach my $panel ($round->panels) {

		my $room = $panel->room->id if $panel->room;

		my $flight = 1;
		$flight = $panel->flight if $panel->flight > 1;

		my $bye = 0;
		$bye = 1 if $panel->bye;

		my $xml_panel = {
			ID     => $panel->id,
			ROUND  => $round->id,
			ROOM   => $room,
			BYE    => $bye,
			FLIGHT => $flight
		};

		push (@{$xml_panels}, $xml_panel);

		foreach my $ballot ($panel->ballots) {

			my $entry = $ballot->entry->id if $ballot->entry;

			next unless $entry;

			my $judge_id = $ballot->judge->id if $ballot->judge;
			$judge_id = $judge_id_translator{$judge_id} if $judge_id_translator{$judge_id};
			$judge_id = 0 unless $judge_id;

			my $side = $ballot->side;
			$side = -1 unless $side;

			my $bye = 0;
			$bye = 1 if $ballot->bye;

			my $forfeit = 0;
			$forfeit = 1 if $ballot->forfeit;

			my $xml_ballot = {
				ID     => $ballot->id,
				JUDGE  => $judge_id,
				PANEL  => $panel->id,
				ENTRY  => $entry,
				SIDE   => $side,
				BYE    => $bye,
				NOSHOW => $forfeit
			};

			push (@{$xml_ballots}, $xml_ballot);

			foreach my $score ($ballot->values) {

				if ($score->tag eq "ballot") {

					my $xml_score = {
						ID        => $score->id,
						BALLOT    => $ballot->id,
						RECIPIENT => $entry,
						SCORE_ID  => 1,
						SCORE     => $score->value
					};

					push (@{$xml_values}, $xml_score);

				} elsif ($score->tag eq "rank") {

					my $student = $score->student->id if $score->student;

					my $xml_score = {
						ID        => $score->id,
						BALLOT    => $ballot->id,
						RECIPIENT => $student,
						SCORE_ID  => 3,
						SCORE     => $score->value
					};

					push (@{$xml_values}, $xml_score);

				} elsif ($score->tag eq "points") {

					my $student = $score->student->id if $score->student;

					my $xml_score = {
						ID        => $score->id,
						BALLOT    => $ballot->id,
						RECIPIENT => $student,
						SCORE_ID  => 2,
						SCORE     => $score->value
					};

					push (@{$xml_values}, $xml_score);

				} else {

					my $xml_score = {
						ID        => $score->id,
						BALLOT    => $ballot->id,
						TAG       => $score->tag,
						SCORE     => $score->value,
						CONTENT   => $score->content
					};

					push (@{$xml_values}, $xml_score);
				}
			}

		}

	}

	my $xml_scores = [];
	my $xml_score_settings = [];

	my $wins;
	my $points;
	my $ranks;

	my $tiebreak_set = $round->tiebreak_set;

	if ($tiebreak_set) {

		foreach my $tiebreak ($tiebreak_set->tiebreaks) {

			if ($tiebreak->name eq "winloss") {
				$wins++;
			}

			if ($tiebreak->name eq "points") {
				$points++;
			}

			if ($tiebreak->name eq "opp_wins") {
				$wins++;
			}

			if ($tiebreak->name eq "opp_points") {
				$points++;
			}

			if ($tiebreak->name eq "ranks") {
				$ranks++;
			}

			if ($tiebreak->name eq "judgevar" || $tiebreak->name eq "coinflip") {
				$points++;
			}

			if ($tiebreak->name eq "MBA") {
				$wins++;
				$points++;
			}

		}

	}

	if ($wins) {

		my $xml_wins = {
			ID         => 1,
			SCORE_NAME => "Ballot",
			SCOREFOR   => "Team",
			SORTORDER  => "DESC"
		};

		push (@{$xml_scores}, $xml_wins);

	}

	if ($points) {

		my $xml_points = {
			ID         => 2,
			SCORE_NAME => "Speaker Points",
			SCOREFOR   => "Speaker",
			SORTORDER  => "DESC"
		};

		my $xml_team_points = {
			ID         => 4,
			SCORE_NAME => "Team Points",
			SCOREFOR   => "Team",
			SORTORDER  => "DESC"
		};

		push (@{$xml_scores}, $xml_points);
		push (@{$xml_scores}, $xml_team_points);

	}

	if ($ranks) {

		my $xml_ranks = {
			ID         => 3,
			SCORE_NAME => "Speaker Rank",
			SCOREFOR   => "Speaker",
			SORTORDER  => "ASC"
		};

		my $xml_team_ranks = {
			ID         => 5,
			SCORE_NAME => "Team Ranks",
			SCOREFOR   => "Team",
			SORTORDER  => "ASC"
		};

		push (@{$xml_scores}, $xml_ranks);
		push (@{$xml_scores}, $xml_team_ranks);

	}

	my $xml_hash = {
		PANEL        => $xml_panels,
		BALLOT       => $xml_ballots,
		BALLOT_SCORE => $xml_values,
	};

	my $now = DateTime->now;
	my $xs = new XML::Simple();

	my $name = $round->realname;
	$name =~ s/[\W_]//g;
	$name .= "-".$event->abbr;
	my $filename = "RoundData-$name-".$now->epoch.".xml";

	if ($ARGS{"file"}) {

		my $filepath = $Tab::file_root."tmp/".$filename;
		`rm -f $filepath.*`;

		my $xml = $xs->XMLout($xml_hash,
			RootName   => 'TOURNLIST',
			NoAttr     => 1,
			XMLDecl    => 1,
			OutputFile => $filepath
		);

		return $filepath;
	}

    $m->clear_buffer;
    $r->content_type('application/xml');
    $r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	my $xml = $m->print(
		$xs->XMLout($xml_hash,
			RootName   => 'ROUNDALONE',
			NoAttr     => 1,
			XMLDecl    => 1
		)
	);

	undef $xml;
	undef $xs;

	$m->flush_buffer;
	$m->abort();

</%init>
