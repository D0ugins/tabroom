<%args>

</%args>
<%init>

	my $now = DateTime->now();
	my $counter;

	my $dbh = Tab::DBI->db_Main();

	Tab::Autoqueue->set_sql(pending => "
		select autoqueue.*
		from autoqueue
		where
		(autoqueue.active_at < NOW() OR autoqueue.active_at IS NULL)
		order by
		 FIELD(tag,'blast','publish','blast_publish','pair_prelim', 'pair_elim', 'prelim_results', 'final_results'),
		created_at
	");

	AQ:
	foreach my $aq (Tab::Autoqueue->search_pending) {

		$counter++;

		my $aq_tag = $aq->tag;
		my $message = $aq->message;
		my $round = $aq->round;
		my $event = $aq->event;

		$aq->delete();

		if ($round && (not defined $event)) {
			$event = $round->event;
		}

		next AQ unless $event;
		my $tourn = $event->tourn;
		my %tourn_settings = $tourn->all_settings();

		if (
			$aq_tag eq "blast"
			|| $aq_tag eq "publish"
			|| $aq_tag eq "blast_publish"
		) {

			my $text;

			unless ($aq_tag eq "blast") {
				eval {
					$m->print("Publishing ".$round->realname." of ".$event->name."\n");
					$m->flush_buffer();

					$round->published(1);
					$round->update();

					$m->comp('/funclib/publish_flips.mas', round => $round);
					$m->comp('/funclib/cache_invalidate.mas', round => $round);
					$m->comp("/funclib/autopublish_round.mas", event => $event);

					$text .= "published ";
				};
			}

			unless ($aq_tag eq "publish") {

				eval {
					$m->print("Blasting ".$round->realname." of ".$event->name."\n");
					$m->flush_buffer();

                    $m->comp("/panel/schemat/blast.mhtml",
                        scheduled => 1,
                        tourn     => $tourn,
                        round_id  => $round->id,
                        confirm   => "yup",
                        message   => $message
                    );
                };

				$text .= "and " if $text;
				$text .= "blasted ";
			}

			my $time = $m->comp("/funclib/showdt.mas", now => 1, tz => $tourn->tz, return => 1);
			$text = $event->abbr." ".$round->realname." auto ".$text." at ".$time;

			if ($message) {
				$text .= "\n\n";
				$text .= "Message: ".$message;
			}

			$m->comp("/funclib/blast_tabbers.mas",
				event   => $event,
				subject => "Autoblast",
				message => $text
			);

		} elsif ($aq_tag eq "pair_prelim") {

			if ( (not defined $round) || $round->panels) {
				next AQ;
			}

			if ($tourn_settings{'nsda_district'}) {
				next AQ;
			}

			my $description = "Auto-sectioned round ".$round->realname." of ".$event->abbr;

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => 0,
				created     => $now,
				description => $description
			});

			if ($event->type eq "speech") {

				my $previous_round = $event->rounds(name => ($round->name - 1))->first;
				my @panels = $previous_round->panels;
				my $num_panels = scalar @panels;

				if ($round->type eq "snaked_prelim") {

					$m->comp("/panel/round/snake_speech.mas",
						round          => $round,
						num_panels     => $num_panels,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings
					);

				} elsif ($round->type eq "prelim") {

					$m->comp("/panel/round/pair_speech.mas",
						round          => $round,
						num_panels     => $num_panels,
						tourn_settings => \%tourn_settings
					);
				}

				$m->comp("/panel/round/judges.mhtml",
					round          => $round,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					person         => 0,
					return         => 1
				);

				$m->comp("/panel/round/rooms.mhtml",
					round           => $round,
					return          => 1,
					person          => 0,
					tourn           => $tourn,
					tourn_settings => \%tourn_settings
				);

			} elsif ($event->type eq "debate" || $event->type eq "wsdc") {

				my $category = $event->category;
				my $prefs = $category->setting("prefs");
				my $num_judges = $category->setting("num_judges");

				undef $prefs if $prefs eq "none";
				$num_judges = 1 unless $num_judges;

				if ($round->type eq "prelim") {

					$m->comp("/panel/round/pair_preset.mas",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0
					);

				} elsif ($round->type eq "highhigh" || $round->type eq "highlow") {

					$m->comp("/panel/round/pair_debate.mas",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0
					);
				}

				if ($prefs && $num_judges > 1) {

					$m->comp("/panel/round/debate_judge_panel.mhtml",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0,
						return         => 1
					);

				} else {

					$m->comp("/panel/round/debate_judge_assign.mhtml",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0,
						return         => 1
					);
				}

				$m->comp("/panel/round/rooms.mhtml",
					round          => $round,
					return         => 1,
					person         => 0,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
				);

			} elsif ($event->type eq "wudc") {

				$m->comp("/panel/round/pair_wudc.mas",
					round          => $round,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					person         => 0,
					return         => 1
				);

				$m->comp("/panel/round/judges.mhtml",
					round          => $round,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					person         => 0,
					return         => 1
				);

				$m->comp("/panel/round/rooms.mhtml",
					round          => $round,
					return         => 1,
					person         => 0,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
				);

			} else {

				# This feature does not make sense for congress or other categories
			}

		} elsif ($aq_tag eq "pair_elim") {

			if ( (not defined $round) || $round->panels) {
				next AQ;
			}

			if ($tourn_settings{'nsda_district'}) {
				next AQ;
			}

			my $description = "Auto-sectioned elim round ".$round->realname." of ".$event->abbr;

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => 0,
				created     => $now,
				description => $description
			});

			my $previous_round = $event->rounds( name => ($round->name - 1))->first;

			if ($event->type eq "congress") {

				# Congress usually clears 6 per chamber from the previous so
				# we'll take that as a default.

				my $num_panels;

				if ($round->type eq "final") {
					$num_panels = 1;
				} else {
					my @panels     = $previous_round->panels();
					$num_panels = POSIX::ceil((scalar @panels) / 3);
				}

				$m->comp("/tabbing/break/break_congress.mhtml",
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					from_id        => $previous_round->id,
					into_id        => $round->id,
					end            => 6,
					return         => 1,
					panels         => $num_panels
				);

			} elsif ($event->type eq "wudc") {

				my @panels  = $previous_round->panels();
				my $num_entries = (scalar @panels) * 2;

				$m->comp("/tabbing/break/break_wudc.mhtml",
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					from_id        => $previous_round->id,
					into_id        => $round->id,
					start          => 1,
					return         => 1,
					end            => $num_entries
				);

			} elsif ($event->type eq "speech") {

				my @panels = $previous_round->panels();
				my @entries = $m->comp("/funclib/round_entries.mas", round => $previous_round);

				my $num_entries = POSIX::ceil(  (scalar @entries) / 2);
				my $num_panels  = POSIX::ceil(  (scalar @panels) / 2);

				$m->comp("/tabbing/break/break_speech.mhtml",
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					from_id        => $previous_round->id,
					into_id        => $round->id,
					panels         => $num_panels,
					start          => 1,
					return         => 1,
					end            => $num_entries
				);

				$m->comp("/panel/round/judges.mhtml",
					round          => $round,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					person         => 0,
					return         => 1
				);

			} else {

				my $category = $event->category;
				my $prefs = $category->setting("prefs");
				my $num_judges = $category->setting("num_judges");
				$num_judges = 1 unless $num_judges;

				if ($previous_round && $round) {

					$m->comp("/tabbing/break/break_debate.mhtml",
						tourn   => $tourn,
						from_id => $previous_round->id,
						into_id => $round->id,
						return  => 1,
						person  => 0
					);

					if ($prefs && $num_judges > 1) {

						$m->comp("/panel/round/debate_judge_panel.mhtml",
							round  => $round,
							person => 0,
							return => 1
						);

					} else{

						$m->comp("/panel/round/debate_judge_assign.mhtml",
							round          => $round,
							tourn          => $tourn,
							tourn_settings => \%tourn_settings,
							person         => 0,
							return         => 1
						);
					}

					$m->comp("/panel/round/rooms.mhtml",
						round          => $round,
						return         => 1,
						person         => 0,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
					);
				}
			}

		} elsif (
			$aq_tag eq "prelim_results"
			&& (not defined $tourn_settings{'nsda_district'})
		) {

			my $description = "Auto-created prelim results sheets for ".$event->abbr;

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => 0,
				created     => $now,
				description => $description
			});

			# Prelim seeds for everyone

			$m->comp("/tabbing/publish/generate_results.mhtml",
				event          => $event,
				tourn          => $tourn,
				tourn_settings => \%tourn_settings,
				result_type    => "prelim_seed",
				return         => 1
			);

			#Speakers if that's a thing
			if ($event->setting("speaker_tbset")) {
				$m->comp("/tabbing/publish/generate_results.mhtml",
					event          => $event,
					tourn          => $tourn,
					tourn_settings => \%tourn_settings,
					return         => 1,
					result_type    => "speakers"
				);
			}

		} elsif (
			$aq_tag eq "final_results"
			&& $tourn_settings{'nsda_district'}
		) {

			my $description = "Auto-created District Qualifiers sheets for ".$event->abbr;

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => 0,
				created     => $now,
				description => $description
			});

			$m->comp("/tabbing/results/nsda_qualifiers.mhtml",
				event_id       => $event->id,
				tourn          => $tourn,
				format         => "post",
				return         => 1,
				tourn_settings => \%tourn_settings,
				result_type    => "final"
			);

		} elsif ($aq_tag eq "final_results") {

			my $description = "Auto-created final results sheets for ".$event->abbr;

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => 0,
				created     => $now,
				description => $description
			});

			$m->comp("/tabbing/publish/generate_results.mhtml",
				event          => $event,
				tourn          => $tourn,
				return         => 1,
				tourn_settings => \%tourn_settings,
				result_type    => "final"
			);

			$m->comp("/tabbing/publish/generate_results.mhtml",
				event          => $event,
				tourn          => $tourn,
				return         => 1,
				tourn_settings => \%tourn_settings,
				result_type    => "ndca"
			);

		} elsif ($aq_tag eq "toc_bids") {

			my $description = "Auto-created TOC bid sheets for ".$event->abbr;

			Tab::ChangeLog->create({
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => 0,
				created     => $now,
				description => $description
			});

			$m->comp("/tabbing/publish/generate_results.mhtml",
				event          => $event,
				tourn          => $tourn,
				return         => 1,
				tourn_settings => \%tourn_settings,
				result_type    => "toc"
			);

		} elsif ($aq_tag eq "flip") {

			$m->print("flight online flip for round $round ".$round->realname);
			$m->flush_buffer();

			my $result = $m->comp('/panel/schemat/flips.mhtml',
				target_id      => $round,
				property_name  => "round",
				setting_name   => "doall",
				tourn          => $tourn,
				auto           => 1
			);

			$m->print("Result: ".$result);
			$m->flush_buffer();

		} elsif ($aq_tag eq "flip_1") {

			$m->print("flight one flip for round $round ".$round->realname);
			$m->flush_buffer();

			my $result = $m->comp('/panel/schemat/flips.mhtml',
				target_id     => $round->id,
				property_name => "round",
				setting_name  => "doall",
				tourn         => $tourn,
				auto          => 1,
				related_thing => 1
			);

			$m->print("Result: ".$result);
			$m->flush_buffer();

		} elsif ($aq_tag eq "flip_2") {

			$m->print("flight two flip for round $round ".$round->realname);
			$m->flush_buffer();

			my $result = $m->comp('/panel/schemat/flips.mhtml',
				target_id     => $round->id,
				property_name => "round",
				setting_name  => "doall",
				tourn         => $tourn,
				auto          => 1,
				related_thing => 2
			);

			$m->print("Result: ".$result);
			$m->flush_buffer();
		}
	}

	$m->print("<p>Processed $counter autoqueue jobs</p>");
	$m->abort();

</%init>
