<%args>
	$api_key  => undef
	$api_id   => undef
	$tourn_id => undef
	$event_id => undef
	$format   => "csv"
</%args>
<%init>

	my $person;
	my $tourn;

	unless ($r->hostname eq "local.tabroom.com") {

		($person, $tourn) = $m->comp("login_api.mas",
			method    => "api_key",
			person_id => $api_id,
			api_key   => $api_key,
			tourn_id  => $tourn_id,
		);

		unless ($person && $tourn) {
			$m->print("No valid API user or key sent");
			$m->abort();
		}

	} else {

		$person = Tab::Person->retrieve(1);
		$tourn  = Tab::Tourn->retrieve($tourn_id);
	}

	my $limit;

	if ($event_id) {
		$limit = " and event.id = ".int($event_id);
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			event.id, event.name, event.abbr, round.id, round.name, round.label
		from event, round
			where event.tourn = ?
			and round.event = event.id
			and round.name = (
				select max(r2.name) from round r2
				where r2.event = event.id
				and r2.published = 1
			)
			$limit

		group by event.id
		order by round.name DESC
	");

	$sth->execute($tourn_id);

	if ($format eq "csv") {

		my $tname = $tourn->name;
		$tname =~ s/[\W_]//g;

		$m->clear_buffer();
		$r->content_type('application/csv');
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=CurrentRounds-$tname.csv";


		while (
			my (
				$eid, $ename, $eabbr, $rid, $rname, $rlabel
			) = $sth->fetchrow_array()
		) {

			$m->print('"');
			$m->print($eid);
			$m->print('","');

			$m->print($ename);
			$m->print('","');

			$m->print($eabbr);
			$m->print('","');

			$m->print($rid);
			$m->print('","');

			$m->print($rname);
			$m->print('","');

			$m->print($rlabel);
			$m->print('"'."\n");
		}

		$m->flush_buffer;
		$m->abort();

	} elsif ($format eq "json") {

		$m->clear_buffer();
		$r->content_type('application/json');

		my @rounds = ();

		while (
			my (
				$eid, $ename, $eabbr, $rid, $rname, $rlabel
			) = $sth->fetchrow_array()
		) {

			my %round = (
				id         => $rid,
				number     => $rname,
				label      => $rlabel,
				event_id   => $eid,
				event_name => $ename,
				event_abbr => $eabbr
			);

			push @rounds, \%round;
		}

		$m->print(JSON::encode_json(\@rounds));
	}

	$m->abort();

</%init>
