<%args>
	$tourn_id   => undef
	$username   => undef
	$password   => undef
	$debug      => undef
	$no_prefs   => undef
	$person_id  => undef
	$session_id => undef
</%args>
<%init>

	undef $debug if $Tab::hostname eq "www.tabroom.com";

	use XML::Simple;
	use Crypt::PasswdMD5;
	use Data::Dumper;

	my $now = DateTime->now;

	my ($person, $tourn, $session) = $m->comp("login_api.mas",
		tourn_id   => $tourn_id,
		username   => $username,
		password   => $password,
		session_id => $session_id
	);

	#PROCESS THE XML

	my $xml = new XML::Simple (
		SuppressEmpty => 1,
		ForceArray => [ qw(EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION JUDGE) ]);

	my $data;

	if ($debug) {

		$data = $xml->XMLin("/tmp/DataTest.xml");

	} else {

		eval{
			my $req = Apache2::Request->new($r);
			my @xml_handles = $r->upload;
			my $xml_file = $req->upload($xml_handles[0]);
			my $xml_filename = $xml_file->tempname;

			my $epoch = $now->epoch;

			system "/bin/mkdir -p ".$Tab::file_root."tmp/$epoch";

			if ($session_id) {
				system "mv $xml_filename ".$Tab::file_root."tmp/$epoch/TourneyData.xml";
			} else {
				system "mv $xml_filename ".$Tab::file_root."tmp/$epoch/me.zip";
				system "cd ".$Tab::file_root."tmp/$epoch/; /usr/bin/unzip ".$Tab::file_root."tmp/$epoch/me.zip";
			}

			$data = $xml->XMLin($Tab::file_root."tmp/$epoch/TourneyData.xml");
		};

		unless ($data) {
			$m->print("NO DATA IN FILE");
			$m->abort
		}

	}

	unless ($person) {
		$m->print("Error: you are not logged in");
		$m->abort;
	}


	$tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
	$tourn = Tab::Tourn->retrieve($data->{TOURN}->{ID}) unless $tourn;

	unless ($tourn) {
		$m->print("No tournament ID found.  Please try again");
		$m->abort;
	}

	my %perms;

	if ($person->site_admin) {
		$perms{"owner"}++;
	} else {
		my @tourn_access =
			Tab::Permission->search(
			person => $person->id,
			tourn  => $tourn->id )
		if $tourn && $person;

		%perms = map {$_->tag => $_} @tourn_access;
	}

	unless ($perms{"owner"}
		|| $perms{"full_admin"}
		|| $perms{"tabbing"}
		|| $perms{"category_tab"}
	) {
		$m->print("You do not have access to change that tournament");
		$m->abort;
	}

	$tourn->name($data->{TOURN}->{TOURNNAME});
	$tourn->update;

	my @tourn_settings = @{$data->{TOURN_SETTING}}
		if $data->{TOURN_SETTING};

	foreach my $setting (@tourn_settings) {

		if ($setting->{TAG} eq "DownloadSite"
			|| $setting->{TAG} eq "Online"
			|| $setting->{TAG} eq "TourneyType"
			|| $setting->{TAG} eq "SuppressNavMessages"
			|| $setting->{TAG} eq "UseActualTime"
			|| $setting->{TAG} eq "CrossEventEntry"
		) {
			$tourn->setting($setting->{TAG}, lc($setting->{VALUE}) );
		}
	}

	my %timeslot_by_id = ();

	foreach my $timeslot ($tourn->timeslots) {
		$timeslot_by_id{$timeslot->id} = $timeslot;
	}

	my %used_timeslots;
	my $stepper = $tourn->start;

	foreach my $xml_timeslot (@{$data->{TIMESLOT}}) {

		my $timeslot = $timeslot_by_id{$xml_timeslot->{ID}};

		unless ($timeslot && $timeslot->tourn->id == $tourn->id) {

			my $tz = $tourn->tz;
			$tz = "UTC" unless $tz;

			my $start;
			my $end;

			$start = Tab::xmldtme($xml_timeslot->{START}, $tz)
				if $xml_timeslot->{START};

			$end = Tab::xmldtme($xml_timeslot->{END}, $tz)
				if $xml_timeslot->{END};

			unless ($start) {
				$start = $stepper->clone;
				$stepper->add( hours => 2 );
			}

			unless ($end) {
				$end = $start->clone;
				$end->add(
					hours   => 1,
					minutes => 55
				);
			}

			$timeslot = Tab::Timeslot->search(
				start => $start,
				end   => $end,
				tourn => $tourn->id
			)->first;

			$timeslot = Tab::Timeslot->create({
				name  => $xml_timeslot->{TIMESLOTNAME},
				start => $start,
				end   => $end,
				tourn => $tourn->id
			}) unless $timeslot;

			$timeslot_by_id{$xml_timeslot->{ID}} = $timeslot;
			$used_timeslots{$xml_timeslot->{ID}}++;

		} else {

			$used_timeslots{$timeslot->id}++;

			my $tz = $tourn->tz;
			$tz = "UTC" unless $tz;

			my $end;
			my $start;

			eval {
				$start = Tab::xmldtme($xml_timeslot->{START}, $tz);
				$end = Tab::xmldtme($xml_timeslot->{END}, $tz);
			};

			$timeslot->start($start) if $start;
			$timeslot->end($end) if $end;
			$timeslot->name( $xml_timeslot->{TIMESLOTNAME} );
			$timeslot->update;

		}
	}

	my %school_by_id = ();

	foreach my $school ($tourn->schools) {
		$school_by_id{$school->id} = $school;
	}

	foreach my $xml_school (@{$data->{SCHOOL}}) {

		next if $xml_school->{ID} == -1;

		my $school = $school_by_id{$xml_school->{ID}};

		unless ($school && $school->tourn->id == $tourn->id) {

			my $chapter;

			if ($xml_school->{CHAPTER}) {
				$chapter = Tab::Chapter->retrieve($xml_school->{CHAPTER});
			}

			unless ($chapter) {
				my $chapter = Tab::Chapter->search(
					name => $xml_school->{SCHOOLNAME}
				)->first;
			}

			unless ($chapter) {
				$chapter = Tab::Chapter->create({
					name => $xml_school->{SCHOOLNAME}
				});
			}

			my $school = Tab::School->search(
				name => $xml_school->{SCHOOLNAME},
				tourn => $tourn->id
			)->first;

			unless ($school) {
				$school = Tab::School->create({
					name    => $xml_school->{SCHOOLNAME},
					code    => $xml_school->{CODE},
					chapter => $chapter->id,
					tourn   => $tourn->id,
				});
			}

			$school_by_id{$xml_school->{ID}} = $school;

		} else {

			$school->name( $xml_school->{SCHOOLNAME} );
			$school->code( $xml_school->{CODE} );
			$school->update
		}

	}

	my %student_by_id = ();
	my %student_by_entry = ();

	foreach my $student ($m->comp(
		"/funclib/tourn_students.mas",
		tourn => $tourn)
	) {
		$student_by_id{$student->id} = $student;
	}

	foreach my $xml_student (@{$data->{ENTRY_STUDENT}}) {

		my $student = $student_by_id{$xml_student->{ID}};
		my $school = $school_by_id{@{$xml_student->{SCHOOL}}[0]};

		next unless $school;

		unless ($student) {

			$student = Tab::Student->search(
				first   => $xml_student->{FIRST},
				last    => $xml_student->{LAST},
				chapter => $school->chapter->id )->first;

			unless ($student) {

				$student = Tab::Student->create({
					 first   => $xml_student->{FIRST},
					 last    => $xml_student->{LAST},
					 chapter => $school->chapter->id
				});

			}

			$student_by_id{$xml_student->{ID}} = $student;
			push @{$student_by_entry{$xml_student->{ENTRY}}}, $student;

		} else {

			$student->first( $xml_student->{FIRST} );
			$student->last( $xml_student->{LAST} );
			$student->update();

			push @{$student_by_entry{$xml_student->{ENTRY}}}, $student;

		}

	}

	my %event_by_id = ();

	foreach my $event ($tourn->events) {
		$event_by_id{$event->id} = $event;
	}

	my @rounds;

	my $category;
	my @used_events;

	EVENT:
	foreach my $xml_event (@{$data->{EVENT}}) {

		my $event = $event_by_id{$xml_event->{ID}};

		unless ($event) {

			my $category_id = $xml_event->{JUDGE_GROUP};

			next EVENT if $perms{"category_tab"}
				&& $perms{"category_tab"}->category->id != $category_id;

			$category = Tab::Category->retrieve($category_id);

			next EVENT unless $category
				&& $category->tourn->id == $tourn->id;

			$event = Tab::Event->create({
				 abbr     => $xml_event->{ABBR},
				 name     => $xml_event->{EVENTNAME},
				 category => $category_id,
				 tourn    => $tourn->id,
				 type     => lc($xml_event->{TYPE}),
			});

			$event_by_id{$xml_event->{ID}} = $event;

		} else {

			$category = $event->category;
			$event->name( $xml_event->{EVENTNAME} );
			$event->abbr( $xml_event->{ABBR} );
			$event->type( lc $xml_event->{TYPE} );
			$event->update;
			push (@rounds, $event->rounds);

		}

		push @used_events, $event;

		my @event_settings = @{$data->{EVENT_SETTING}}
			if $data->{EVENT_SETTING};

		foreach my $setting (@event_settings) {
			next unless $setting->{EVENT} == $event->id;
			$event->setting($setting->{TAG}, lc($setting->{VALUE}) );
		}

	}

	my %entry_by_id = ();
	my %used_entries = ();

	foreach my $event (@used_events) {
		foreach my $entry ($event->entries( )) {
			$entry_by_id{$entry->id} = $entry;
		}
	}

	foreach my $xml_entry (@{$data->{ENTRY}}) {

		my $entry = $entry_by_id{$xml_entry->{ID}};
		my $event = $event_by_id{${$xml_entry->{EVENT}}[0]};
		my $school = $school_by_id{${$xml_entry->{SCHOOL}}[0]};

		next unless $event;
		next unless $school;

		$entry = Tab::Entry->search(
			event => $event->id,
			code  => $xml_entry->{CODE}
		)->first unless $entry;

		my $waitlist = $xml_entry->{WAITLIST};
		$waitlist = 0 unless $waitlist;

		unless ($entry && $entry->event->tourn->id == $tourn->id) {

			my $dropped = 0;
			$dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";

			my $ada = 0;
			$ada = 1 if lc($xml_entry->{ADA}) eq "true";

			$entry = Tab::Entry->create({
				 code     => $xml_entry->{CODE},
				 dropped  => $dropped,
				 event    => $event->id,
				 waitlist => $waitlist,
				 name     => $xml_entry->{FULLNAME},
				 school   => $school->id,
				 ada      => $ada
			});

			$entry->setting("pairing_seed", $xml_entry->{RATING});
			$entry->setting("cat_id", $xml_entry->{ID});

			$used_entries{$xml_entry->{ID}}++;
			$entry_by_id{$xml_entry->{ID}} = $entry;

		} else {

			$entry_by_id{$xml_entry->{ID}} = $entry;
			$used_entries{$xml_entry->{ID}}++;
			$used_entries{$entry->id}++;

			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
			my $dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";

			$entry->code($xml_entry->{CODE});
			$entry->name($xml_entry->{FULLNAME});
			$entry->waitlist($waitlist);
			$entry->school($school->id);
			$entry->event($event->id);
			$entry->ada($ada);
			$entry->dropped($dropped);
			$entry->update;

			$entry->setting("pairing_seed", $xml_entry->{RATING});
			$entry->setting("cat_id", $xml_entry->{ID});

		}

		my %es_yup = ();

		my @students = @{$student_by_entry{$xml_entry->{ID}}}
			if $student_by_entry{$xml_entry->{ID}};


		foreach my $entry_student ($entry->entry_students) {

			my $ok;

			foreach my $student (@students) {
				$ok++ if $student->id == $entry_student->student->id;
			}

			$entry_student->delete unless $ok;
		}

		my %ok_students = map {$_->id => 1} $entry->students;

		foreach my $student (@students) {

			next if $ok_students{$student->id};

			Tab::EntryStudent->create({
				entry   => $entry,
				student => $student
			});

		}
	}

	foreach my $entry_id (keys %entry_by_id) {
		next if $used_entries{$entry_id};
		$entry_by_id{$entry_id}->delete;
		delete $entry_by_id{$entry_id};
	}

	my %judge_by_id = ();

	if ($category) {

		foreach my $judge ($m->comp(
			"/funclib/tourn_judges.mas",
			tourn => $tourn )
		) {
			$judge_by_id{$judge->id} = $judge;
		}

	} else {

		$m->print("JUDGE CATEGORY NOT FOUND.  NAMES MUST MATCH?");
		$m->abort();
	}

	my %used_judge = ();

	my $rating_type;

	Tab::JudgeSetting->set_sql(cat_id => "
		select distinct judge_setting.*
		from judge_setting, judge, category
		where judge.category = category.id
		and category.tourn = ?
		and judge.id = judge_setting.judge
		and judge_setting.tag = 'cat_id'
	");

	my %judge_id_translator = ();

	if ($category) {
		foreach my $setting (Tab::JudgeSetting->search_cat_id( $tourn->id )) {

			$judge_id_translator{$setting->value} = $judge_by_id{$setting->judge->id};

		}
	}

	if ($data->{JUDGE} && @{$data->{JUDGE}}) {

		foreach my $xml_judge (@{$data->{JUDGE}}) {

			my $judge;

			$judge = $judge_id_translator{$xml_judge->{ID}};
			$judge = $judge_by_id{$xml_judge->{ID}} unless $judge;


			my $school = $school_by_id{@{$xml_judge->{SCHOOL}}[0]};
			$school = 0 unless $school;
			my $dropped = 1 if $xml_judge->{STOPSCHEDULING} eq "true";

			my $first = $xml_judge->{FIRST};
			my $last = $xml_judge->{LAST};
			$first = " " unless $first;
			$last = " " unless $last;

			my $diverse = 0;
			$diverse = 1 if $xml_judge->{DIVERSE} && lc($xml_judge->{DIVERSE}) eq "true";

			my $ada = 0;
			$ada = 1 if $xml_judge->{ADA} && lc($xml_judge->{ADA}) eq "true";

			my $active = 0;
			$active = 1 if lc($xml_judge->{ACTIVE}) eq "true";
			$active = 1 if ($dropped < 1) && (not defined $xml_judge->{ACTIVE});

			unless ($judge && $category && $judge->category->id == $category->id) {

				$judge = Tab::Judge->create({
					first      => $first,
					last       => $last,
					school     => $school,
					category   => $category->id,
					obligation => $xml_judge->{OBLIGATION},
					hired      => $xml_judge->{HIRED},
					ada        => $ada,
					active     => $active,
				});

				$judge->setting("cat_id", $xml_judge->{ID});
				$judge->setting("notes", $xml_judge->{NOTES});

				$judge_by_id{$xml_judge->{ID}} = $judge;
				$used_judge{$xml_judge->{ID}}++;

			} else {

				$rating_type = $judge->category->setting("prefs") unless $rating_type;

				$judge->first($xml_judge->{FIRST});
				$judge->last($xml_judge->{LAST});
				$judge->school($school);
				$judge->obligation($xml_judge->{OBLIGATION});
				$judge->hired($xml_judge->{HIRED});
				$judge->setting("notes", $xml_judge->{NOTES});
				$judge->ada($ada);
				$judge->active($active);
				$judge->update;

				$judge->setting("cat_id", $xml_judge->{ID});
				$used_judge{$judge->id}++;
			}

			if ($judge && $xml_judge->{EMAIL}) {

				my $person = Tab::Person->search(
					email => $xml_judge->{EMAIL}
				)->first;

				unless ($person) {
					my $login = Tab::Login->search(
						username => $xml_judge->{EMAIL}
					)->first;

					$person = $login->person if $login;
				}

				if ($person) {
					$judge->person($person->id);
					$judge->update();
				}

				$judge->setting("email", $xml_judge->{"EMAIL"});

			}

			$judge->setting("diverse", $diverse);
			my @time_strikes =  $tourn->strikes( judge => $judge->id, type => "time");
			my %used_strikes;

			foreach my $id (keys %timeslot_by_id) {

				next unless $used_timeslots{$id};

				my $timeslot = $timeslot_by_id{$id};
				next unless $timeslot;
				next unless $timeslot->id;
				my $key = "TIMESLOT".$timeslot->id;

				if ($xml_judge->{$key} && lc($xml_judge->{$key}) eq "false") {

					my $already;

					foreach my $ts (@time_strikes) {
						$already++ if ($ts->start < $timeslot->end && $ts->end > $timeslot->start);
						$used_strikes{$ts->id}++ if $already;
						last if $already;
					}

					unless ($already) {

						Tab::Strike->create({
							judge => $judge->id,
							type  => "time",
							tourn => $tourn->id,
							start => $timeslot->start->set_time_zone($tourn->tz),
							end   => $timeslot->end->set_time_zone($tourn->tz)
						});

					}

				}

			}

			foreach my $ts (@time_strikes) {
				$ts->delete unless $used_strikes{$ts->id};
			}

			my %event_strikes = ();

			foreach my $es (Tab::Strike->search(
				judge => $judge->id,
				type  => "event" )
			) {
				$event_strikes{$es->id} = $es;
			}

			EVENT:
			foreach my $event ($tourn->events) {

				my $key = "EVENT".$event->id;
				my $already = $event_strikes{$event->id};

				if ($xml_judge->{$key} && lc($xml_judge->{$key}) eq "false") {

					next EVENT if $already;

					Tab::Strike->create({
						event => $event->id,
						judge => $judge->id,
						type  => "event",
						tourn => $tourn->id
					});

				} else {

					$already->delete if $already;

				}
			}
		}
	}

	foreach my $judge_id (keys %judge_by_id) {
		next if $used_judge{$judge_id};
		next unless $judge_by_id{$judge_id}->category->id == $category->id;
		$judge_by_id{$judge_id}->delete;
		delete $judge_by_id{$judge_id};
	}

	unless ($no_prefs) {

		my %rating_by_id = ();
		my %used_rating = ();

		foreach my $event (@used_events) {
			foreach my $rating ($m->comp(
				"/funclib/event_ratings.mas",
				event => $event)
			) {
				$rating_by_id{$rating->id} = $rating;
			}
		}

		my %tier_by_name = ();

		foreach my $tier ($m->comp(
			"/funclib/tourn_rating_tiers.mas",
			tourn => $tourn)
		) {
			$tier_by_name{$tier->name} = $tier;
		}

		if ($data->{JUDGEPREF}) {

			foreach my $xml_rating (@{$data->{JUDGEPREF}}) {

				my $rating = $rating_by_id{$xml_rating->{ID}};

				undef $rating
					if $rating
					&& $rating_type eq "ndt"
					&& $rating->rating_tier;

				unless ($rating && $rating->judge->category->tourn->id == $tourn->id) {

					next if $xml_rating->{RATING} == 333;
					my $conflict++ if $xml_rating->{RATING} == 999;

					my $ordinal = $xml_rating->{RATING}
						if $rating_type eq "ordinals"
						|| $rating_type eq "ndt";

					my $percentile = $xml_rating->{ORDPCT}
						if $rating_type eq "ordinals"
						|| $rating_type eq "ndt";

					my $tier = $tier_by_name{$xml_rating->{RATING}}
						if $rating_type eq "tiered";

					$tier = 0 unless $tier;

					my $entry = $entry_by_id{$xml_rating->{TEAM}}->id
						if $entry_by_id{$xml_rating->{TEAM}};

					my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id
						if $judge_by_id{$xml_rating->{JUDGE}};

					next unless $entry && $judge;

					if ($conflict) {

						unless (Tab::Strike->search(
							judge => $judge,
							entry => $entry,
							type  => "conflict")
						) {

							Tab::Strike->create({
								tourn => $tourn->id,
								judge => $judge,
								entry => $entry,
								type  => "conflict",
							});

						}

					} else {

						$rating = Tab::Rating->create({
							tourn       => $tourn->id,
							entry       => $entry,
							rating_tier => $tier,
							ordinal     => $ordinal,
							percentile  => $percentile,
							judge       => $judge
						});

					}

					$rating_by_id{$xml_rating->{ID}} = $rating;
					$used_rating{$xml_rating->{ID}}++;

				} else {

					if ($xml_rating->{RATING} == 333) {
						$rating->delete;
					} else {

						my $ordinal = $xml_rating->{RATING}
							if $rating_type eq "ordinals" || $rating_type eq "ndt";

						my $percentile = $xml_rating->{ORDPCT}
							if $rating_type eq "ordinals" || $rating_type eq "ndt";

						my $tier = $tier_by_name{$xml_rating->{RATING}}->id
							if ($rating_type eq "tiered");

						my $entry = $entry_by_id{$xml_rating->{TEAM}}->id
							if $entry_by_id{$xml_rating->{TEAM}};

						my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id
							if $judge_by_id{$xml_rating->{JUDGE}};

						unless ($entry && $judge) {

							$rating->delete;

						} else {

							$rating->entry($entry);
							$rating->judge($judge);
							$rating->rating_tier($tier);
							$rating->ordinal($ordinal);
							$rating->percentile($percentile);
							$rating->update;
						}

					}

					$used_rating{$xml_rating->{ID}}++;

				}
			}
		}

		foreach my $rating_id (keys %rating_by_id) {
			next if $used_rating{$rating_id};
		#	$rating_by_id{$rating_id}->delete;
		}
	}

	my %ok_sites = ();
	my $default_site_id;

	my @rooms;

	foreach my $site ($tourn->sites) {
		push @rooms, $site->rooms;
		$ok_sites{$site->id}++;
		$default_site_id = $site->id unless $default_site_id;
	}

	my %room_by_id = ();
	my %rooms_by_name = ();

	foreach my $room (@rooms) {
		$room_by_id{$room->id} = $room;
		$rooms_by_name{$room->name} = $room;
	}

	foreach my $xml_room (@{$data->{ROOM}}) {

		my $room = $room_by_id{$xml_room->{ID}};

		$room = $rooms_by_name{$xml_room->{ROOMNAME}} unless $room;

		unless ($room && $ok_sites{$room->site->id} ) {

			my $inactive = 0;
			$inactive = 1 if $xml_room->{INACTIVE} eq "true";

			$room = Tab::Room->create({
				name     => $xml_room->{ROOMNAME},
				capacity => $xml_room->{CAPACITY},
				quality  => $xml_room->{QUALITY},
				inactive => $inactive,
				notes    => $xml_room->{NOTES},
				site     => $default_site_id
			});

			$room_by_id{$xml_room->{ID}} = $room;

		} else {
			my $inactive = 1 if $xml_room->{INACTIVE} eq "true";
			$room->name( $xml_room->{ROOMNAME} );
			$room->capacity( $xml_room->{CAPACITY} );
			$room->quality( $xml_room->{QUALITY} );
			$room->inactive( $inactive );
			eval {
				$room->update;
			};
			$room_by_id{$xml_room->{ID}} = $room;
		}
	}

	my %used_rounds = ();
	my %round_by_id = ();
	my %round_by_cat_id = ();

	foreach my $round (@rounds) {
		$round_by_id{$round->id} = $round;
		$round_by_cat_id{$round->setting("cat_id")} = $round;
	}

	my %runoff_pairs;

	ROUND:
	foreach my $xml_round (@{$data->{ROUND}}) {

		my $round = $round_by_id{$xml_round->{ID}};
		$round = $round_by_cat_id{$xml_round->{ID}} unless $round;

		my $event = $event_by_id{${$xml_round->{EVENT}}[0]};

		my $timeslot = $timeslot_by_id{$xml_round->{TIMESLOT}};

		my $tiebreak_set = Tab::TiebreakSet->search(
			tourn => $tourn->id,
			id    => $xml_round->{TB_SET}
		)->first;

		$tiebreak_set = Tab::TiebreakSet->search(
			tourn => $tourn->id,
		)->first unless $tiebreak_set;

		my $tiebreak_set_id = $tiebreak_set->id if $tiebreak_set;

		next ROUND unless $event && $timeslot;

		if ($round) {

			my $other_round = $event->rounds(
				name => $xml_round->{RD_NAME}
			)->first;

			if (
				$other_round
				&& $other_round->id != $round->id
			) {
				$other_round->name($other_round->id);
				$other_round->update();
			}
		}

		$round = Tab::Round->search(
			name  => $xml_round->{RD_NAME},
			event => $event->id
		)->first unless $round;

		unless ($round
			&& $round->event == $event->id
			&& $round->event->tourn->id == $tourn->id
		) {

			my $label = $xml_round->{LABEL};
			$label =~ s/^Open//;

			my $round_type = lc($xml_round->{PAIRINGSCHEME});
			$round_type = "prelim" if $round_type eq "preset";

			$round = Tab::Round->create({
				name         => $xml_round->{RD_NAME},
				flighted     => $xml_round->{FLIGHTING},
				label        => $label,
				type         => $round_type,
				event        => $event->id,
				timeslot     => $timeslot->id,
				tiebreak_set => $tiebreak_set_id,
				site         => $default_site_id,
				created      => $now
			});

			$round->setting('cat_id', $xml_round->{ID});
			$round->setting("num_judges", $xml_round->{JUDGESPERPANEL});
			$round->setting('start_time', $timeslot->start);

			$round_by_id{$xml_round->{ID}} = $round;
			$used_rounds{$round->id}++;
			$used_rounds{$xml_round->{ID}}++;

		} else {

			$round_by_id{$xml_round->{ID}} = $round;
			$used_rounds{$round->id}++;
			$used_rounds{$xml_round->{ID}}++;

			my $label = $xml_round->{LABEL};
			$label =~ s/^Open//;

			$round->name($xml_round->{RD_NAME});
			$round->label( $label );
			$round->event($event->id);
			$round->tiebreak_set($tiebreak_set_id);
			$round->timeslot($timeslot->id);

			$round->flighted( $xml_round->{FLIGHTING} );
			$round->setting("num_judges", $xml_round->{JUDGESPERPANEL} );
			$round->name($xml_round->{RD_NAME});

			my $round_type = lc($xml_round->{PAIRINGSCHEME});
			$round_type = "prelim" if $round_type eq "preset";
			$round->type($round_type);
			$round->site($default_site_id) unless $round->site;

			$round->update();

		}

		if ($xml_round->{RUNOFF}) {
			$runoff_pairs{$round->id} = $xml_round->{RUNOFF};
		}

	}

	foreach my $round_id (keys %runoff_pairs) {

		my $round = Tab::Round->retrieve($round_id);

		if ($round) {

			my $runoff = Tab::Round->search(
				event => $round->event->id,
				name => $runoff_pairs{$round->id}
			)->first;

			if ($runoff) {
				$round->runoff($runoff->id);
				$round->update();
			}
		}
	}

	foreach my $round_id (keys %round_by_id) {
		next if $used_rounds{$round_id};
		$round_by_id{$round_id}->delete;
		delete $round_by_id{$round_id};
	}

	Tab::Round->set_sql("high_lett" => "select max(cast(letter as signed)) from panel where round = ?");

	my %panel_by_cat_id = ();

	foreach my $event (@used_events) {
		foreach my $panel ($m->comp('/funclib/event_panels.mas', event => $event)) {
			$panel_by_cat_id{$panel->cat_id} = $panel if $panel->cat_id;
			$panel->delete unless $panel->cat_id;
		}
	}

	my %used_panels = ();

	PANEL:
	foreach my $xml_panel (@{$data->{PANEL}}) {

		my $panel = $panel_by_cat_id{$xml_panel->{ID}};
		my $round = $round_by_id{$xml_panel->{ROUND}};
		my $room = $room_by_id{$xml_panel->{ROOM}};
		$room = $room->id if $room;
		$room = 0 unless $room;

		next unless $round && $round->id;

		unless ($panel && $round_by_id{$panel->round->id} && $panel->round->id == $round->id) {

			my $letter = Tab::Round->sql_high_lett->select_val($round->id);
			$letter++;

			my $bye = 0;
			$bye = $xml_panel->{BYE} if $xml_panel->{BYE} == 1;

			my $flight = $xml_panel->{FLIGHT};
			$flight = 1 unless $flight;

			$panel = Tab::Panel->create({
				letter => $letter,
				round  => $round->id,
				room   => $room,
				bye    => $bye,
				flight => $flight,
				cat_id => $xml_panel->{ID}
			});

			$panel_by_cat_id{$xml_panel->{ID}} = $panel;
			$used_panels{$xml_panel->{ID}}++;

		} else {

			$panel_by_cat_id{$xml_panel->{ID}} = $panel;
			$used_panels{$xml_panel->{ID}}++;

			my $flight = $xml_panel->{FLIGHT};
			$flight = 1 unless $flight;

			$panel->room($room);
			$panel->flight($flight);
			$panel->cat_id($xml_panel->{ID});
			$panel->update;

		}

	}

	foreach my $panel_id (keys %panel_by_cat_id) {
		next if $used_panels{$panel_id};
		$panel_by_cat_id{$panel_id}->delete;
	}

	my %result_by_entry = ();
	my %seed_set_by_event = ();

	foreach my $event (@used_events) {

		foreach my $result_set ($event->result_sets) {

			next unless $result_set->bracket;

			my $notfirst;

			$seed_set_by_event{$event->id} = $result_set;

			foreach my $result ($result_set->results) {

				next unless $result->entry;
				next unless $result->round;

				$result_by_entry{$result->entry->id."-".$result->round->id} = $result;
				$notfirst++;
			}

		}
	}

	my %used_results = ();

	ELIMSEED:
	foreach my $xml_elimseed (@{$data->{ELIMSEED}}) {

		my $entry_id = $xml_elimseed->{ENTRY};
		next if $entry_id == "-99";

		my $entry = $entry_by_id{$entry_id};
		next unless $entry;

		my $round_id = $xml_elimseed->{ROUND};
		my $event_id = @{$xml_elimseed->{EVENT}}[0];

		next unless $event_id && $round_id;

		my $result = $result_by_entry{$entry_id."-".$round_id};
		my $set = $seed_set_by_event{$event_id};

		unless ($set) {

			$set = Tab::ResultSet->create({
				tourn     => $tourn->id,
				event     => $event_id,
				bracket   => 1,
				label     => "Bracket",
				generated => $now
			});

			$seed_set_by_event{$event_id} = $set;
		}

		my $seed_done;

		if ($result) {

			$used_results{$result->id}++;

			foreach my $value ($result->values) {

				unless ($value->tag eq "Seed") {
					$value->delete;
				} elsif ($value && $value->tag eq "Seed") {
					$value->value($xml_elimseed->{SEED});
					$value->update;
					$seed_done++;
				}

			}

		} else {

			$result = Tab::Result->create({
				result_set => $set->id,
				entry      => $entry_id,
				round      => $round_id
			});
		}

		unless ($seed_done) {

			Tab::ResultValue->create({
				result    => $result->id,
				value     => $xml_elimseed->{SEED},
				priority  => 1,
				tag       => "Seed",
				sort_desc => 0,
				no_sort   => 0
			});
		}

	}

	foreach my $key (keys %result_by_entry) {
		next if $used_results{$result_by_entry{$key}->id};
		$result_by_entry{$key}->delete;
	}

	my %ballot_by_id = ();
	my %ballot_by_cat_id = ();
	my %ballot_event_type = ();

	foreach my $event (@used_events) {

		my $type = $event->type;

		foreach my $ballot ($m->comp('/funclib/event_ballots.mas', event => $event)) {
			$ballot_by_id{$ballot->id} = $ballot;
			$ballot_by_cat_id{$ballot->cat_id} = $ballot;
			$ballot_event_type{$ballot->id} = $type;
			$ballot_event_type{$ballot->cat_id} = $type;
		}
	}

	my %used_ballots = ();
	my %used_cat_ballots = ();

	foreach my $xml_ballot (@{$data->{BALLOT}}) {

		my $ballot = $ballot_by_cat_id{$xml_ballot->{ID}};
		$ballot = $ballot_by_id{$xml_ballot->{ID}} unless $ballot;

		my $judge_id = eval {
			return shift @{$xml_ballot->{JUDGE}};
		};

		$judge_id = 0 unless $judge_id;
		next if $xml_ballot->{ENTRY} == -99;
		my $panel = $panel_by_cat_id{$xml_ballot->{PANEL}};

		my $bye = 0;
		$bye++ if $judge_id == -1;
		$bye++ if $xml_ballot->{BYE} == 1;

		$judge_id = 0 if $judge_id < 0;

		my $fft = 0;
		$fft++ if $xml_ballot->{NOSHOW};

		my $chair = 0;
		$chair++ if $xml_ballot->{CHAIR};

		my $judge;

		unless ($judge_id == -99 || $bye || $fft) {

			$judge = $judge_by_id{$judge_id}
				if $judge_by_id{$judge_id};

			$judge = $judge_id_translator{$judge_id}
				if $judge_id_translator{$judge_id}
				&& (not defined $judge);
		}

		$judge = 0 unless $judge > 0;
		my $entry = $entry_by_id{$xml_ballot->{ENTRY}};
		next unless ($panel && ($fft > 0 || $bye > 0 || $judge > 0 || $entry > 0));

		my $entry_id = $entry->id if $entry && $entry > 0;
		$entry_id = 0 unless $entry_id;

		unless ($ballot && $ballot->panel && $ballot->panel->id == $panel->id) {

			$ballot = Tab::Ballot->search(
				judge => $judge,
				panel => $panel,
				entry => $entry_id
			)->first;
		}

		my $event_type = $panel->round->event->type;

		unless ($ballot && $ballot->panel && $ballot->panel->id == $panel->id) {

			my $side = 0;
			$side = $xml_ballot->{SIDE} if $xml_ballot->{SIDE};

			my $speakerorder = 0;
			$speakerorder = $xml_ballot->{SIDE} if $xml_ballot->{SIDE};

			$ballot = Tab::Ballot->create({
				judge        => $judge,
				panel        => $panel,
				entry        => $entry_id,
				side         => $side,
				speakerorder => $speakerorder,
				bye          => $bye,
				forfeit      => $fft,
				chair        => $chair,
				cat_id       => $xml_ballot->{ID}
			});

			$ballot_by_id{$ballot->id} = $ballot;
			$ballot_by_cat_id{$xml_ballot->{ID}} = $ballot;

			$used_ballots{$ballot->id}++;
			$used_ballots{$xml_ballot->{ID}}++;
			$used_cat_ballots{$ballot->cat_id}++;

			$ballot_event_type{$ballot->id} = $event_type;
			$ballot_event_type{$xml_ballot->{ID}} = $event_type;

		} else {

			$ballot->judge($judge);
			$ballot->panel($panel);
			$ballot->chair($chair);
			$ballot->entry($entry_id);
			$ballot->side($xml_ballot->{SIDE});
			$ballot->speakerorder($xml_ballot->{SPEAKERORDER});
			$ballot->cat_id($xml_ballot->{ID});
			$ballot->bye($bye);
			$ballot->forfeit($fft);
			$ballot->update;

			$ballot_by_id{$ballot->id} = $ballot;
			$ballot_by_cat_id{$xml_ballot->{ID}} = $ballot;

			$used_ballots{$ballot->id}++;
			$used_ballots{$xml_ballot->{ID}}++;
			$used_cat_ballots{$ballot->cat_id}++;

		}

		if ($event_type eq "congress" && $chair) {
			$ballot->audit(1);
			$ballot->update();
		}
	}

	foreach my $ballot_id (keys %ballot_by_id, keys %ballot_by_cat_id) {
		next if $used_ballots{$ballot_id};
		next if $used_cat_ballots{$ballot_id};
		$ballot_by_id{$ballot_id}->delete if $ballot_by_id{$ballot_id};
	}

	my %score_type = ();
	my %score_by_id = ();
	my %score_by_cat_id = ();

	foreach my $event (@used_events) {

		my $type = $event->type;

		if ($type eq "congress") {

			Tab::Score->set_sql( dump_speeches => "
				delete score.*
					from score, ballot, panel, round
					where round.event = ?
					and round.id = panel.round
					and panel.id = ballot.panel
					and ballot.id = score.ballot
					and score.tag = 'congress_speech'
			");

			Tab::Score->sql_dump_speeches->execute($event->id);

		}

		foreach my $score ($m->comp('/funclib/event_scores.mas', event => $event)) {
			$score_by_id{$score->id} = $score;
			$score_by_cat_id{$score->cat_id} = $score;
		}
	}

	my %used_scores;
	my %scored_ballot;

	SCORE:
	foreach my $xml_score (@{$data->{BALLOT_SCORE}}) {

		my $score = $score_by_cat_id{$xml_score->{ID}};
		my $ballot = $ballot_by_cat_id{$xml_score->{BALLOT}};

		my $type = $xml_score->{SCORE_ID};
		my $event_type = $ballot_event_type{$xml_score->{BALLOT}};

		my $tag = "ballot" if $type == 1;
		$tag = "points" if $type == 2 || $type == 4;
		$tag = "rank" if $type == 3 || $type == 5;

		my $speech;

		if ($event_type eq "congress") {
			$tag = "congress_speech" if $type == 2;
			$speech = $xml_score->{SPEECH};
		}

		next SCORE if $xml_score->{SCORE} < 0;

		unless ($tag eq "ballot") {
			next SCORE if $xml_score->{SCORE} == 0;
		}

		my $student;
		my $entry;

		if ($event_type eq "speech" || $event_type eq "congress") {

			$entry = $entry_by_id{$xml_score->{RECIPIENT}};

		} else {

			$student = $student_by_id{$xml_score->{RECIPIENT}}
				if ( $type == 2 || $type == 3 );

			$entry = $entry_by_id{$xml_score->{RECIPIENT}}
				if ($type == 1 || $type == 4 || $type == 5 )
		}

		next unless ($ballot && $ballot->id && ($student || $entry));

		next SCORE if $ballot->panel->bye && $tag eq "ballot";

		$scored_ballot{$ballot->id}++;

		unless ($score && $score->ballot && $score->ballot->id == $ballot->id) {

			my $value   = $xml_score->{SCORE};
			$value = 0 unless $value;

			next if $scored_ballot{"already"}{$ballot->id}{$tag}{$student}++;

			eval {

				$score = Tab::Score->create({
					tag     => $tag,
					ballot  => $ballot->id,
					student => $student,
					value   => $value,
					speech  => $speech,
					cat_id  => $xml_score->{ID}
				}) if $student;

			};

			eval {

				$score = Tab::Score->create({
					tag    => $tag,
					ballot => $ballot->id,
					value  => $value,
					speech => $speech,
					cat_id => $xml_score->{ID}
				}) unless $student;

			};

			$score_by_id{$xml_score->{ID}} = $score;
			$score_by_cat_id{$xml_score->{ID}} = $score;
			$used_scores{$xml_score->{ID}}++;

		} else {

			next if $scored_ballot{"already"}{$ballot->id}{$tag}{$student}++;

			my $sid = 0;
			$sid = $student->id if $student;

			$score_by_cat_id{$xml_score->{ID}} = $score;
			$used_scores{$xml_score->{ID}}++;

			$score->tag($tag);
			$score->student($sid);
			$score->speech($speech);
			$score->ballot($ballot->id);
			$score->value($xml_score->{SCORE});
			$score->cat_id($xml_score->{ID});
			eval {
				$score->update();
			};
			$used_scores{$score->id}++;

		}
	}

	foreach my $score_id (keys %score_by_id) {
		next if $used_scores{$score_id};
		my $score = $score_by_id{$score_id};
		next unless $scored_ballot{$score->ballot->id};
		next if $score->tag eq "rfd" || $score->tag eq "comments";
		$score_by_id{$score_id}->delete;
	}

	foreach my $round_id (%used_rounds) {
		$m->comp("/funclib/round_audit.mas", round_id => $round_id);
	}

	$m->print("Upload successful");

	if ($session_id) {
		my $msg = "Data imported into ".$tourn->name;
		$m->redirect("/register/data/import_native.mhtml?msg=$msg");
	}

	$m->print("Upload successful");

</%init>
