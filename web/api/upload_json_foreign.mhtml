<%args>
	$tourn_id
	$person_id
	$session_id
	$restore_mode						#valid values are school_reg, round, event, tourn
</%args>

<%init>

## add errors here -- bounce if not values for both round_id & round_import_id

########################################################################################
#		read local JSON file into a hash that goes { table }{ record }{ field }
#		HERE'S THE DEAL: When it's downloaded, each record is listed by the original tabroom ID, and
#		every record ALSO has a redundant sub-field that stores the same information.
#		So I'm gonna write one chunk of code to sync up the tabroom ID numbers in the
#		redundant field, and then a second chunk of code to write that back to the database
#########################################################################################

		#### STEP ONE: Load in the file
		#### This finds the file 

use strict;
use warnings;
use Data::Dumper; 
binmode STDOUT, ":utf8";
use utf8;
use DateTime;
use Time::HiRes qw( time );
my $start = time(); 

my $tourn = Tab::Tourn->retrieve($tourn_id);
my $person = Tab::Person->retrieve($person_id);
my $session = Tab::Session->retrieve($session_id);

my $tz = $tourn->tz if $tourn->tz;
$tz = "UTC" unless $tz;
	
my $dbh = Tab::DBI->db_Main();
use JSON;
use Encode qw(encode_utf8);

#upload sequence
my $now = DateTime->now;
$now->set_time_zone($tz);
my $req = Apache2::Request->new($r, DISABLE_UPLOADS => 0);
my $json_file = $req->upload('json_data');
unless ($json_file) { print $r." Couldn't find file<br>"; $m->abort };
my $json_filename = $json_file->tempname;
my $filename = $json_filename;

		#### This reads the file and converts the JSON to a hash called %data ###
		
my $json;
#my $filename = '/www/tabroom/web/register/data/NSDA.json';

{
  local $/; #Enable 'slurp' mode
  open my $fh, "<", $filename;
  $json = <$fh>;
  close $fh;
}

my $HashReferenceDecoded = decode_json($json);
my %data = %$HashReferenceDecoded;

print "Time to load JSON file into a hash:"; printf("%.2f\n", time() - $start) ; print "<br>";

#set up some global utility variables
my $sql;
my $ctr = 0;
my $matched;
my $new_rec;
my $comparisons;
my $skip_for_now;
my %table_updated;
my $sth = $dbh;

		### erase SCORE field from panel and judge in the $data hash -- they are just temporary things and don't need to be restored
		### This is just random cleanup

foreach my $rec (sort keys %{ $data{'judge'} } ) {
	delete $data{'judge'}{$rec}{'score'};
}
foreach my $rec (sort keys %{ $data{'panel'} } ) {
	delete $data{'panel'}{$rec}{'score'};
}

#foreach my $table (sort keys %data) {
#	if ($table eq 'round' or $table eq 'timeslot' ) {
#		foreach my $rec (sort keys %{ $data{$table} }) {
#			print "$rec<br>";
#			foreach my $field (sort keys %{ $data{$table}{$rec} }) {
#				print "  $field:".$data{$table}{$rec}{$field}."<br>";
#			}
#		}
#	}
#}	

		#### STEP TWO: Delete things you don't want from the hash and delete whatever you'll update in the live database
		### For each restore mode, clean everything out of the database that is currenlty associated with whatever you are restoring
		### and remove from the hash everything in an non-permanent table that you don't want restored.  You only need to do this for the highest-level
		### field, so for ENTRY just delete ENTRY and the next routine will delete everything that points to ENTRY, such as the ENTRY_STUDENT, etc.

if (42==37) {

	$m->comp("/register/data/reset_panels.mas", fire_as_function => 42, tourn => $tourn, person => $person, certain => "I am certain");
	$m->comp("/register/data/reset_everything.mas", fire_as_function => 42, tourn => $tourn, person => $person, certain => "I am certain");
	$m->comp("/register/data/reset_registration.mas",  fire_as_function => 42, tourn => $tourn, person => $person, certain => "I am certain");
	my $sth = $dbh->prepare( "DELETE from tourn_circuit where tourn=".$tourn->id );
	$sth->execute();
	$sth = $dbh->prepare( "DELETE from tourn_site where tourn=".$tourn->id );
	$sth->execute();
	$sth = $dbh->prepare( "DELETE from tourn_ignore where tourn=".$tourn->id );
	$sth->execute();
	$sth = $dbh->prepare( "DELETE from tourn_fee where tourn=".$tourn->id );
	$sth->execute();
	$sth = $dbh->prepare( "DELETE tiebreak.* from tiebreak, tiebreak_set where tiebreak.tiebreak_set=tiebreak_set.id and tiebreak_set.tourn=".$tourn->id );
	$sth->execute();
	$sth = $dbh->prepare( "DELETE tiebreak_set_setting.* from tiebreak_set_setting, tiebreak_set where tiebreak_set_setting.tiebreak_set=tiebreak_set.id and tiebreak_set.tourn=".$tourn->id );
	$sth->execute();
	$sth = $dbh->prepare( "DELETE from tiebreak_set where tourn=".$tourn->id );
	$sth->execute();
	foreach my $category ($tourn->categories) {
		my $sth = $dbh->prepare( "DELETE from category_setting where category=".$category->id );
		$sth->execute();
	}
}
					#delete-o-rama
#First pass
$sql = 'DELETE score.* FROM score, ballot, entry, event WHERE score.ballot=ballot.id and ballot.entry=entry.id and entry.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE ballot.* FROM ballot, entry, event WHERE ballot.entry=entry.id and entry.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM tourn_setting WHERE tourn_setting.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM tourn_site WHERE tourn_site.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM judge_hire WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM pattern WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM rating WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;

#second pass
$sql = 'DELETE panel.* FROM panel, round, event WHERE panel.round=round.id and round.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE jpool_round.* FROM jpool_round, jpool, category WHERE jpool_round.jpool=jpool.id and jpool.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;

#third pass
$sql = 'DELETE entry_setting.* FROM entry_setting, entry WHERE entry_setting.entry=entry.id and entry.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE entry_student.* FROM entry_student, event, entry WHERE entry_student.entry=entry.id and entry.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE entry.* FROM entry, event WHERE entry.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE jpool_judge.* FROM jpool_judge, jpool, category WHERE jpool_judge.jpool=jpool.id and jpool.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE jpool.* FROM jpool, category WHERE jpool.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE room.* FROM room, site, tourn_site WHERE room.site=site.id and tourn_site.site=site.id and tourn_site.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE round_setting.* FROM round_setting, round, event WHERE round_setting.round=round.id and round.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE round.* FROM round, event WHERE round.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE rpool_room.* FROM rpool_room, rpool WHERE rpool_room.rpool=rpool.id and rpool.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE rpool_setting.* FROM rpool_setting, rpool WHERE rpool_setting.rpool=rpool.id and rpool.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM rpool WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM strike WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE tiebreak.* FROM tiebreak, tiebreak_set WHERE tiebreak.tiebreak_set=tiebreak_set.id and tiebreak_set.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;

#fourth pass
$sql = 'DELETE event_setting.* FROM event_setting, event WHERE event_setting.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE jpool_setting.* FROM jpool_setting, jpool, category WHERE jpool_setting.jpool=jpool.id and jpool.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE judge_setting.* FROM judge_setting, judge, category WHERE judge_setting.judge=judge.id and judge.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE judge.* FROM judge, category WHERE judge.category=category.id and category.tourn = '.$tourn_id;$sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE rating_subset.* FROM rating_subset, category WHERE rating_subset.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE rating_tier.* FROM rating_tier, category WHERE rating_tier.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM region WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM region_fine WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE result.* FROM result, entry WHERE result.entry=entry.id and entry.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM result_set WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE result_value.* FROM result_value, result, entry WHERE result_value.result=result.id and result.entry=entry.id and entry.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM tourn_site WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE room_strike.* FROM room_strike, room, site, tourn_site WHERE room_strike.room=room.id and room.site=site.id and tourn_site.site=site.id and tourn_site.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE school_setting.* FROM school_setting, school WHERE school_setting.school=school.id and school.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM school WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE chapter.* FROM chapter, school WHERE chapter.id=school.chapter and school.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE strike_timeslot.* FROM strike_timeslot, category WHERE strike_timeslot.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE sweep_event.* FROM sweep_event, event WHERE sweep_event.event=event.id and event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM sweep_set WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE sweep_rule.* FROM sweep_rule, sweep_set WHERE sweep_rule.sweep_set=sweep_set.id and sweep_set.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM tiebreak_set WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE tiebreak_set_setting.* FROM tiebreak_set, tiebreak_set_setting WHERE tiebreak_set_setting.tiebreak_set=tiebreak_set.id and tiebreak_set.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM timeslot WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE FROM tourn_circuit WHERE tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE category_setting.* FROM category_setting, category WHERE category_setting.category=category.id and category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE category.* FROM category WHERE category.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;
$sql = 'DELETE event.* FROM event WHERE event.tourn = '.$tourn_id; $sth = $dbh->prepare( $sql ); $sth->execute() ;

print "Time to complete deletion:"; printf("%.2f\n", time() - $start) ; print "<br>";

	#### STEP THREE: match schools to existing chapters and students to existing students, schools/chapters first		

#match schools to chapters
foreach my $rec (sort keys %{ $data{'school'}}) {
	$sql = "Select id, name from chapter WHERE name='".$data{'school'}{$rec}{'name'}."'" ;
	$sql = $sql . " AND district=".$data{'school'}{$rec}{'district'} if $data{'school'}{$rec}{'district'} ;
	my $sth = $dbh->prepare( $sql );
	$sth->execute();
	$matched=0;
	while (my ($chapter_id, $chapter_name)  = $sth->fetchrow_array() ) {
		#print "matched school ".$data{'school'}{$rec}{'name'}." with chapter $chapter_name<br>";
		$matched = $chapter_id;
	}
	#print "NO match for ".$data{'school'}{$rec}{'name'}."<br>" if $matched==0;
	$sql = 'INSERT INTO school (name, chapter, district, tourn) VALUES ( ?, ?, ?, ? )' ;
	$sth = $dbh->prepare( $sql );
	$sth->execute( $data{'school'}{$rec}{'name'}, $matched, $data{'school'}{$rec}{'district'}, $tourn_id );
	#Now grab the current id and store it in the hash
	$data{'school'}{$rec}{'id'} = $dbh->{'mysql_insertid'};
	$data{'school'}{$rec}{'chapter'} = $matched;
	#print $rec." updated to ".$data{'school'}{$rec}{'id'}."<br>";
}
print "Time to match schools:"; printf("%.2f\n", time() - $start) ; print "<br>";

#print "<br>STUDENTS<BR><BR>";

#match students in local hash to students in master database
my $school_dummy;
my $chpt_dummy;
my $entry_dummy;
foreach my $rec (sort keys %{ $data{'student'}}) {
	#This is to find the chapter; loop through entry_student until you find the student
	$entry_dummy = 0;
	$chpt_dummy = 0;
	foreach my $rec2 (sort keys %{ $data{'entry_student'}} ) {
		if ( $data{'entry_student'}{$rec2}{'student'} == $rec ) {
			$entry_dummy = $data{'entry_student'}{$rec2}{'entry'};
			last;
		}
	}
	my $school_dummy = $data{'entry'}{$entry_dummy}{'school'};
	my $chpt_dummy = $data{'school'}{$school_dummy}{'chapter'};
	
	$sql = "Select id from student WHERE first='".$data{'student'}{$rec}{'first'}."' and last='".$data{'student'}{$rec}{'last'}."'" ;
	$sql = $sql . " AND chapter=".$chpt_dummy if $chpt_dummy ;
	my $sth = $dbh->prepare( $sql );
	$sth->execute();
	$matched=0;
	while (my ($id)  = $sth->fetchrow_array() ) {
		#print "matched student ".$data{'student'}{$rec}{'last'}." with student $id and chapter=$chpt_dummy<br>";
		$matched = $id ;
	}

	$data{'student'}{$rec}{'id'} = $matched if $matched ;
	unless ( $matched ) {
		$sql = 'INSERT INTO student (first, last, chapter) VALUES ( ?, ?, ? )' ;
		$sth = $dbh->prepare( $sql );
		$sth->execute( $data{'student'}{$rec}{'first'}, $data{'student'}{$rec}{'last'}, $chpt_dummy );
		$data{'student'}{$rec}{'id'} = $dbh->{'mysql_insertid'};
		#print $rec." ".$data{'student'}{$rec}{'last'}." updated to ".$data{'student'}{$rec}{'id'}." with an INSERT<br>";
	}
}
print "Time to match students:"; printf("%.2f\n", time() - $start) ; print "<br>";

		#### STEP FOUR: Insert the records you want to restore in to the database
		#### Now scroll through the hash, add the records to the database, and store the new
		#### id numbers in $data{$table}{$rec}{'id'}

my $field_name;
my $field_str;
my $counter_counts;
my $all_updated;

#these are already matched so no new insert
$table_updated{'student'} = 1;
$table_updated{'school'} = 1;

while ( $counter_counts < 5 ) {
	
	$counter_counts++;
	print "<br><br>PASS NUMBER $counter_counts<br><br>";
	my $all_updated=1;
	foreach my $table (sort keys %data) {
		if ( $table_updated{$table} == 0 ) {
			$all_updated=0;
		}
	}
	print "All updated!" if $all_updated;
	last if $all_updated;
	
	foreach my $table (sort keys %data) {
	
		next if $table_updated{$table};
			
		foreach my $rec (sort keys %{ $data{$table} }) {

				#don't do the insert if this depend on another table that needs inserting first
				$skip_for_now = 0;
				foreach my $field (sort keys %{ $data{$table}{$rec} }) {
					if ( $data{$field} && $table_updated{$field} == 0 ) {
						print $table." depends on another table called ".$field." that has not yet been updated<br>";
						$skip_for_now = 1;
					}
				}
				last if $skip_for_now;
	
				$ctr=0;
				my @field_values;
				foreach my $field (sort keys %{ $data{$table}{$rec} }) {
					if ($field ne 'id') {
						if ( $ctr == 0 ) {
							$field_name = $field ;
							$field_str = "?" ;
						} else {
							$field_name = $field_name.", ".$field;
							$field_str = $field_str.", ?" ;
						}
						$field_values[$ctr] = $data{$table}{$rec}{$field};
						unless ( $table eq 'score' && $field eq 'tiebreak' ) {
							$field_values[$ctr] = $data{$field}{ $data{$table}{$rec}{$field} }{'id'} if $data{$field} && $data{$table}{$rec}{$field} ;
							if ( $table eq 'score' && $field eq 'tiebreak' ) { print "Why the hell are you here?<br>"; }
						}
						$field_values[$ctr] = $tourn_id if $field eq 'tourn' ;
						$ctr++;
					}
				}
				
				$sql = 'INSERT INTO '.$table.' ('.$field_name.') VALUES ('.$field_str.')' ;
				my $sth = $dbh->prepare( $sql );
				$sth->execute(@field_values);
				#Now grab the current id and store it in the hash
				$data{$table}{$rec}{'id'} = $dbh->{'mysql_insertid'};
				if ( $table eq 'flying_unicorns' ) {
					print $sql;
					foreach my $fld_val (@field_values) {
						print " ".$fld_val;
					}
					print "<br>";
				}
				$table_updated{$table} = 1;
		}
		print "$table updated=".$table_updated{$table}."<br>";
	}
}

print "Time to create records:"; printf("%.2f\n", time() - $start) ; print "<br>";

#clean up the speaker tiebreak settings
foreach my $rec (sort keys %{ $data{'event_setting'} }) {
	if ( $data{'event_setting'}{$rec}{'tag'} eq 'speaker_tbset' ) {
		$sql = 'UPDATE event_setting SET value ='.$data{'tiebreak_set'}{ $data{'event_setting'}{$rec}{'value'} }{'id'}.' WHERE id='.$data{'event_setting'}{$rec}{'id'} ; 
		my $sth = $dbh->prepare( $sql ) ;
		$sth->execute();
		print $sql."<br>";
	}
}
print "Time to update speaker tiebreak sets:"; printf("%.2f\n", time() - $start) ; print "<br>";

# } # end of test

print "And now we're done!";

</%init>