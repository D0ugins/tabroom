<%args>

</%args>
<%init>

	my @tiebreakers = Tab::Tiebreak->search( name => "rankinround");

	push @tiebreakers, Tab::Tiebreak->search( name => "roundrank");

	foreach my $tiebreak (@tiebreakers) { 

		unless ($tiebreak->tiebreak_set) { 
			$m->print("Tiebreak $tiebreak has not set <br />");
			$m->flush_buffer;
			next;
		}

		my $used_for = Tab::Round->search( 
			tiebreak_set => $tiebreak->tiebreak_set->id
		)->first;

		if ($used_for) { 

			$m->print("Tiebreaker ".$tiebreak->name." is used for ".$used_for->id." of ".$used_for->event);
			$m->print("<br />");

			my $composite_child;

			if ($tiebreak->count eq "all") { 

				$composite_child = Tab::Round->search(
					event => $used_for->event->id
				)->first;

			} else { 

				$composite_child = Tab::Round->search(
					event => $used_for->event->id,
					type  => $tiebreak->count
				)->first;

			}

			$m->print("Child round ".$composite_child." found of type ".$tiebreak->count);
			$m->print("<br />");
			$m->flush_buffer;

			if ($composite_child) { 
				$tiebreak->child($composite_child->tiebreak_set->id);
				$tiebreak->name("ranks");
				$tiebreak->update;

				$m->print("updated orphan tiebreaker ".$tiebreak);
				$m->flush_buffer;

			} else { 
			
				$m->print("deleting orphan tiebreaker ".$tiebreak);
				$m->flush_buffer;
				$tiebreak->delete;

			}

		} else { 

			$m->print("deleting orphan tiebreaker ".$tiebreak);
			$m->flush_buffer;

			$tiebreak->delete;

		}
	}

	my @recip_tiebreakers = Tab::Tiebreak->search( 
		name => "recipinround" 
	);

	foreach my $tiebreak (@recip_tiebreakers) { 

		my $used_for = Tab::Round->search( 
			tiebreak_set => $tiebreak->tiebreak_set->id
		)->first;

		if ($used_for) { 
			my $composite_child = Tab::Round->search(
				event => $used_for->event->id,
				name  => $tiebreak->count
			)->first;

			if ($composite_child) { 
				$tiebreak->child($composite_child->tiebreak_set->id);
				$tiebreak->name("reciprocals");
				$tiebreak->update;
			}
		}
	}

	Tab::Tiebreak->set_sql( delete_unused => "
		delete tiebreak.*
		from tiebreak
		where tiebreak_set = ? 
	");

	Tab::TiebreakSet->set_sql( unused => "
		select tiebreak_set.*
		from tiebreak_set
		where not exists (
			select round.id
			from round
			where round.tiebreak_set = tiebreak_set.id
		)
		and tiebreak_set.timestamp < '2016-07-01 00:00:00'
	");

	foreach my $tb_set (Tab::TiebreakSet->search_unused) { 

		$m->print("Set ".$tb_set->id." is unused");
		$m->print("<br />");
		$m->flush_buffer;
	
		Tab::Tiebreak->sql_delete_unused->execute($tb_set->id);
		$tb_set->delete;
	}

	my @scores = Tab::Score->search( tag => "rfd");

	my $scrubber = HTML::Scrubber->new( allow => [ qw[ p strong b i u hr br ol ul li] ] );

	my $counter;

	foreach my $score (@scores) { 
		$score->content( $scrubber->scrub( $score->content ));
		$score->update;

		if ($counter++ > 100) { 
			$m->print("Did another 100 ");
			$m->flush_buffer;
			undef $counter;
		}
	}

	@scores = Tab::Score->search( tag => "comments");

	undef $counter;

	foreach my $score (@scores) { 
		$score->content( $scrubber->scrub( $score->content ));
		$score->update;

		if ($counter++ > 100) { 
			$m->print("Did another 100 ");
			$m->flush_buffer;
			undef $counter;
		}
	}

</%init>
	
	
