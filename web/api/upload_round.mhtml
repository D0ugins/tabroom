<%args>
	$username   => undef
	$password   => undef
	$session_id => undef
	$confirm    => undef
	$myepoch    => undef
</%args>
<%init>

	use XML::Simple;
	use Crypt::PasswdMD5;
	use Data::Dumper;

	my $now = DateTime->now;
	my $epoch = $now->epoch;

	my ($person, $tourn, $session) = $m->comp("login_api.mas",
		username   => $username,
		password   => $password,
		session_id => $session_id
	);

	#PROCESS THE XML

	my $xml = new XML::Simple (
		SuppressEmpty => 1,
		ForceArray => [ qw(PANEL BALLOT ELIMSEED) ]
	);

	my $data;

	if ($myepoch) {

		$data = $xml->XMLin($Tab::file_root."tmp/$myepoch/RoundData.xml");

	} else {

		my $req = Apache2::Request->new($r);
		my @xml_handles = $r->upload;
		my $xml_file = $req->upload($xml_handles[0]);
		my $xml_filename = $xml_file->tempname;

		system "/bin/mkdir -p ".$Tab::file_root."tmp/$epoch";

		if ($session_id) {
			system "mv $xml_filename ".$Tab::file_root."tmp/$epoch/RoundData.xml";
		} else {
			system "mv $xml_filename ".$Tab::file_root."tmp/$epoch/me.zip";
			system "cd ".$Tab::file_root."tmp/$epoch/; /usr/bin/unzip ".$Tab::file_root."tmp/$epoch/me.zip";
		}

		$data = eval {
			return $xml->XMLin($Tab::file_root."tmp/$epoch/RoundData.xml");
		};

		unless ($data) {
			$m->clear_buffer();
			$m->print("No data file found, or data file could not be parsed.");
			$m->abort;
		}

	}

	my $msg;
	my %round_by_id;
	my @rounds;

	my @xml_rounds;

	eval {
		@xml_rounds = @{$data->{ROUND}} if @{$data->{ROUND}};
	};

	push @xml_rounds, $data->{ROUND} unless @xml_rounds;

	foreach my $xml_round (@xml_rounds) {
		my $round = Tab::Round->retrieve($xml_round->{ID});
		$round_by_id{$xml_round->{ID}} = $round;
		next unless $round;
		push @rounds, $round;
	}

	if ($confirm) {

		foreach my $xml_round (@xml_rounds) {

			my $round = $round_by_id{$xml_round->{ID}};

			next unless $round;

			my $event = $round->event;
			$tourn = $event->tourn;

			my %perms = ();

			if ($person->site_admin) {

				$perms{"owner"}++;

			} else {

				my @tourn_access = Tab::Permission->search(
					person => $person->id,
					tourn  => $tourn->id
				);

				%perms = map {$_->tag => $_} @tourn_access;
			}

			unless ($perms{"owner"}
				|| $perms{"full_admin"}
				|| $perms{"tabbing"}
			) {
				$m->print("TOURN_ACCESS_DENIED");
				$m->abort;
			}

			if ($perms{"category_limits"}
					&& $perms{"category_limits"}->category->id
					!= $event->category->id
			) {
				$m->print("EVENT_ACCESS_DENIED");
				$m->print("No permission to edit ".$event->category->name." events");
				$m->abort;
			}

			$round->created($now);
			$round->update;

			$msg .= $round->realname." replaced and uploaded.<br />";

			$m->comp( "/funclib/round_dump.mas",
				round  => $round,
				person => $person
			);

			foreach my $result ($round->results) {
				$result->delete;
			}

		}

		my %round_letter;
		my %panel_by_id = ();

		PANEL:
		foreach my $xml_panel (@{$data->{PANEL}}) {

			my $round = $round_by_id{$xml_panel->{ROUND}};
			next unless $round && $round->id;

			my $letter = $round_letter{$round->id};
			$letter++;
			$round_letter{$round->id} = $letter;

			my $room_id = $xml_panel->{ROOM};
			$room_id = 0 unless $room_id;

			my $bye = 0;
			$bye = $xml_panel->{BYE} if $xml_panel->{BYE} == 1;

			my $flight = 0;
			$flight = $xml_panel->{FLIGHT} if $xml_panel->{FLIGHT};

			my $bracket = 0;
			$bracket = $xml_panel->{BRACKET} if $xml_panel->{BRACKET};

			my $panel = Tab::Panel->create({
				letter  => $letter,
				round   => $round->id,
				room    => $room_id,
				bye     => $bye,
				bracket => $bracket,
				flight  => $flight
			});

			$panel_by_id{$xml_panel->{ID}} = $panel;

		}

		my %set_by_event_id;

		ELIMSEED:
		foreach my $xml_elimseed (@{$data->{ELIMSEED}}) {

			my $entry_id = $xml_elimseed->{ENTRY};
			next if $entry_id == "-99";

			my $round_id = $xml_elimseed->{ROUND};

			my $round = $round_by_id{$round_id};
			next unless $round;

			my $event_id = @{$xml_elimseed->{EVENT}}[0];
			next unless $event_id == $round->event->id;

			my $set = $set_by_event_id{$event_id};

			unless ($set) {
				$set = Tab::ResultSet->create({
					tourn     => $tourn->id,
					event     => $event_id,
					bracket   => 1,
					label     => "Bracket",
					generated => $now
				});
			}

			my $result = Tab::Result->create({
				result_set => $set->id,
				entry      => $entry_id,
				round      => $round_id
			});

			Tab::ResultValue->create({
				result    => $result->id,
				value     => $xml_elimseed->{SEED},
				priority  => 1,
				tag       => "Seed",
				sort_desc => 0,
				no_sort   => 0
			});
		}

		my %ballot_by_id = ();

		foreach my $xml_ballot (@{$data->{BALLOT}}) {

			my $ballot_id = $xml_ballot->{ID};

			next if $xml_ballot->{ENTRY} == -99;
			next if $xml_ballot->{JUDGE} == 0;

			my $panel = $panel_by_id{${$xml_ballot->{PANEL}}[0]};

			next unless $panel;

			my $bye = 0;
			$bye++ if $xml_ballot->{JUDGE} == -1;
			$bye++ if $xml_ballot->{JUDGE} == -99;
			$bye++ if $xml_ballot->{BYE} == 1;


			my $fft = 0;
			$fft++ if $xml_ballot->{NOSHOW};

			my $judge_id = 0;

			unless ($xml_ballot->{JUDGE} == -99) {
				$judge_id = $xml_ballot->{JUDGE} if $xml_ballot->{JUDGE};
			} else {
				$panel->bye($bye);
				$panel->update();
			}

			my $entry_id =$xml_ballot->{ENTRY};

			next unless $panel;

			my $ballot = Tab::Ballot->create({
				judge   => $judge_id,
				panel   => $panel,
				entry   => $entry_id,
				side    => $xml_ballot->{SIDE},
				bye     => $bye,
				forfeit => $fft
			});

			$ballot_by_id{$xml_ballot->{ID}} = $ballot;

		}

		my %score_by_id = ();

		SCORE:
		foreach my $xml_score (@{$data->{BALLOT_SCORE}}) {


			my $score_id = $xml_score->{ID};
			my $ballot = $ballot_by_id{$xml_score->{BALLOT}[0]};

			next unless $ballot;
			next if $xml_score->{SCORE} < 0;

			my $type = $xml_score->{SCORE_ID};

			my $tag = "ballot" if $type == 1;
			$tag = "points" if $type == 2 || $type == 4;
			$tag = "rank" if $type == 3 || $type == 5;

			my $student = $xml_score->{RECIPIENT} unless $tag eq "ballot";
			my $value = $xml_score->{SCORE};
			$value = 0 unless $value;

			eval {
				my $score = Tab::Score->create({
					tag     => $tag,
					ballot  => $ballot->id,
					student => $student,
					value   => $value,
					cat_id  => $xml_score->{ID}
				});
			};

		}

		foreach my $round (@rounds) {
			$m->comp("/funclib/round_audit.mas", round => $round);
		}

		if ($session_id) {

			my $round = pop @rounds if @rounds;

			if ($round) {
				$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&msg=$msg");
			}

			$m->redirect("/register/data/import_native.mhtml?msg=$msg");
		}

		$m->print("Upload successful");

	}

</%init>

	<div class="main">

		<h2>Are you sure...?</h2>

		<p>
			This process will completely delete and re-post the following
			rounds.  It will trust the ID numbers for judges and entries you
			have supplied.  If you have changed names or rooms or judge data,
			you must instead repost the full XML, or I have no idea what will
			happen but it probably won't be pretty or remotely correct.
		</p>

%		foreach my $round (@rounds) {

			<h4>
				<% $round->event->name." ".$round->realname %> will be deleted & replaced
			</h4>
%		}

		<div class="oddrow centeralign">

			<form action="upload_round.mhtml" method="post">

			<input
				type  = "hidden"
				name  = "myepoch"
				value = "<% $epoch %>"
			>
			<input
				type  = "hidden"
				name  = "session_id"
				value = "<% $session %>"
			>
			<input
				type  = "hidden"
				name  = "person_id"
				value = "<% $person %>"
			>
			<input
				type  = "submit"
				name  = "confirm"
				value = "I Want To Do This.  Scout's Honor"
			>
			</form>

		</div>

	</div>

