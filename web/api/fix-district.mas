<%args>
</%args>
<%init>

	Tab::Tourn->set_sql(districts => "
		select tourn.*
		from tourn, tourn_setting, tourn_setting tab_method
		where tourn.id = tourn_setting.tourn
		and tourn_setting.tag = 'nsda_district'
		and tourn_setting.value > 0

		and tourn.id = tab_method.tourn
		and tab_method.tag = 'nsda_speech_method'
		and tab_method.value = 'doubledown'
	");

	$m->clear_buffer;

	foreach my $tourn (Tab::Tourn->search_districts) { 

		$m->print("<p>Tournament ".$tourn->name."</p>");

		my @seeding_tiebreaks = Tab::TiebreakSet->search({
			tourn => $tourn->id,
			name  => "IE Prelim Seeding"
		});

		$m->print("Applying fix one:");

		foreach my $st (@seeding_tiebreaks) { 

			unless ($st->tiebreaks( count => "elims")) { 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $st->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					truncate      => 5,
					multiplier    => 1,
					priority      => 1 
				});

			}
		}

		$m->print("Done<br />");

		my @prelim_composite = Tab::TiebreakSet->search({ 
			tourn => $tourn->id,
			name  => "IE Prelim Composite"
		});

		$m->print("Applying fix two:");

		foreach my $pc (@prelim_composite) { 

			my @tier_one_tbs = $pc->tiebreaks(	
				name     => "ranks",
				priority => 1,
				count    => "previous"
			);

			my $keeper = shift @tier_one_tbs;

			next unless scalar @tier_one_tbs;

			foreach my $remainder (@tier_one_tbs) { 
				$remainder->delete();
			}

			unless ($pc->tiebreaks( 
				count    => "elims",
				highlow  => 1,
				name     => "ranks",
				priority => 4)
			) {

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $pc->id,
					count         => "previous",
					highlow       => 1,
					highlow_count => 1,
					truncate      => 5,
					multiplier    => 1,
					priority      => 4
				});
			}
		}

		$m->print("Done<br />");

		$m->print("fixed tournament ".$tourn->name." <br /> <br />");
		$m->flush_buffer();
	}


	$m->print("Done");
	$m->abort;

</%init>
