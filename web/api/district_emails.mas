<%args>

</%args>
<%init>

	my $tz = "America/Chicago";

	my $now = DateTime->now( 
		time_zone => $tz
	);

	my $warning_start = $now->clone();
	my $warning_end = $now->clone();

	$warning_start->set(
		hour  => 00,
		minute => 00,
		second => 00
	);

	$warning_end->set(
		hour  => 23,
		minute => 59,
		second => 59 
	);

	$warning_start->add(days => 9);
	$warning_end->add(days   => 16);

	Tab::Weekend->set_sql( upcoming_warnings => "
		select weekend.*
		from weekend, tourn_setting
		where weekend.tourn = tourn_setting.tourn
		and tourn_setting.tag = 'nsda_district'
		and weekend.start < ? 
		and weekend.end > ? 
		order by weekend.tourn
	");

	my $notification_text;

	foreach my $weekend (
		Tab::Weekend->search_upcoming_warnings(
			Tab::DBI::date_deflate($warning_end),
			Tab::DBI::date_deflate($warning_start)
		)
	) { 

		my $tourn = $weekend->tourn;

		if ($notification_text) { 
			$notification_text .= "\n\n<br /><br />";
		} else { 
			$notification_text .= "<strong>Next week's district tournaments.</strong> Notices go out Wednesday afternoon!\n\n";
		}

		$notification_text .= $tourn->name."<br />".$weekend->name." \n\n";

		my $tz = $tourn->tz;
		$tz = "America/Chicago" unless $tz;

		$notification_text .= "Starts: \t".Tab::nicedt(
			$weekend->start->set_time_zone($tz)
		);

		$notification_text .= "<br />";

		$notification_text .= "Ends: &nbsp;\t".Tab::nicedt(
			$weekend->end->set_time_zone($tz)
		);
		$notification_text .= "<br />";

		$notification_text .= "Time Zone: ".Tab::tzname($tz);
		$notification_text .= "\n\n";

		$notification_text .= "Platform: ";

		$notification_text .= "Tabroom \n\n" 
			if $tourn->setting("nsda_tabbing_software") eq "tabroom";

		$notification_text .= "Joy of Tournaments \n\n" 
			if $tourn->setting("nsda_tabbing_software") eq "jot";

		$notification_text .= "Events: ";

		foreach my $event ($tourn->events) { 
			next unless $event->setting('weekend') == $weekend->id;
			$notification_text .= " ".$event->abbr;
		}

		$notification_text .= "\n\n";

		$notification_text .= " Contact staff:";
		$notification_text .= "<br />";

		foreach my $tag (1 .. 3) { 

			my $contact_id = $tourn->setting("nsda_contact_".$tag);

			my $contact;

			$contact = Tab::Person->retrieve($contact_id) if $contact_id;
				
			$notification_text .= $tag.". ";

			if ($contact) { 
				$notification_text .= $contact->first." ".$contact->last;
				$notification_text .= "\t\t".Tab::phone($contact->phone)."";
			} else { 
				$notification_text .= " NOT FILLED IN! ";
			}
		
			$notification_text .= "<br />";

		}

		$notification_text .= "\n\n";

		if ($tourn->setting("nsda_no_notifications")) { 

			$notification_text .= "NO NOTIFICATIONS WILL BE SENT. ";
			$notification_text .= "To enable them, uncheck the ";
			$notification_text .= '"No Notices" box under District ';
			$notification_text .= "Tourns: Settings";

		} else { 

			$notification_text .= " Notifications going to: <br />";

			my %used;

			foreach my $ownership (
				Tab::Permission->search(
					tourn => $tourn->id,
					tag => "owner"
				)
			) { 

				my $owner = $ownership->person;
				next if $used{$owner->id}++;

				$notification_text .= " ".$owner->first." ".$owner->last;
				$notification_text .= " (".$owner->email.")";
				$notification_text .= "<br />";

			}
		}
	}

	$m->abort unless $notification_text;

    my $from_string = "Tabroom <help\@tabroom.com>";
    my $to_string   = "palmer\@tabroom.com,bmanuel\@stanford.edu,clariondebate\@gmail.com,lisa.vossekuil\@speechanddebate.org, scott.wunn\@speechanddebate.org, lauren.mccool\@speechanddebate.org, lauren.burdt\@speechanddebate.org, erik.dominguez\@speechanddebate.org, deano.pape\@speechanddebate.org, kirsten.ellerman\@speechanddebate.org"; 

    my $subject     = "Upcoming District Tournament Notices";

    my $type = "text/html";

    use HTML::FromText;

    my $html = text2html(
		$notification_text, 
		paras     => 1,
		metachars => 0
	); 

    my $msg = MIME::Lite->new(
        From    => $from_string,
        To      => $to_string,
        Subject => $subject,
        Type    => $type,
        Data    => $html."\n\n"
    );  

    MIME::Lite->send(
		'smtp', 
		$Tab::smtp_server,
		Timeout => 60
	);

    my $result = eval { 
		$msg->send;
	};

    $m->print($html);
    $m->print($result);

</%init>
