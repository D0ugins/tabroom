<%args>
	$person
	$tourn_id
	$circuit_id
</%args>
<%init>

	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;

	$m->abort unless $tourn && $circuit;

	my %seen;
	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;

	my @perms = Tab::Permission->search( tourn => $tourn->id );

	my $num_owners;
	my $num_contacts;
	my %admin_perms;
	my $err;

	foreach my $perm (@perms) {
		$admin_perms{$perm->person->id}{$perm->tag} = $perm;
	}

	# Tournament Owners.  Supersedes all other permissions except contacts;
	# Only accessible to site admins and tournament owners themselves.

	my $owner_count; # Do not allow the tournament to delete the last owner

	foreach my $admin (@admins) {
		if ($ARGS{$admin->id."_level"} eq "owner" || $admin_perms{$admin->id}{"owner"}) {
			$owner_count++;
		}
	}

	foreach my $admin (@admins) {

		if ($ARGS{$admin->id."_level"} eq "owner") {

			unless ($admin_perms{$admin->id}{"owner"}) {

				$m->comp("/funclib/log.mas",
					person      => $admin->id,
					tourn       => $tourn->id,
					type        => "access",
					description => "Tournament ownership granted by ".$person->email
				);

				$admin_perms{$admin->id}{"owner"} = Tab::Permission->create({
					tourn   => $tourn->id,
					person => $admin->id,
					tag     => "owner"
				});

			}

			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) {

				next if $key eq "owner";
				next if $key eq "contact";
				$admin_perms{$admin->id}{$key}->delete;
				undef $admin_perms{$admin->id}{$key};
			}

		} elsif ($admin_perms{$admin->id}{"owner"}) {

			if ($owner_count > 1) {
				$owner_count--;
				$admin_perms{$admin->id}{"owner"}->delete;
				undef $admin_perms{$admin->id}{"owner"};
			} else {
				$err .= " You attempted to delete the last tournament owner.  At least one user must be marked as tournament owner.";
			}
		}
	}

	# Tournament Contacts.  Contacts can delete themselves.  Owners can delete
	# everyone else.   But there must be at least one.

	my $contact_count; # Do not allow the tournament to delete the last contact

	foreach my $admin (@admins) {
		if ($ARGS{$admin->id."_contact"} || $admin_perms{$admin->id}{"contact"}) {
			$contact_count++;
		}
	}

	ADMIN:
	foreach my $admin (@admins) {

		if ($ARGS{$admin->id."_contact"}) {

			unless ($admin_perms{$admin->id}{"contact"}) {

				Tab::Permission->create({
					tourn  => $tourn->id,
					person => $admin->id,
					tag    => "contact"
				});

			}

		} elsif ($admin_perms{$admin->id}{"contact"}) {

		next ADMIN unless (
			$admin_perms{$person->id}{"owner"}
			|| $admin_perms{$person->id}{"contact"}
			|| $person->site_admin
		);

			if ($contact_count > 1) {
				$contact_count--;
				$admin_perms{$admin->id}{"contact"}->delete;
				undef  $admin_perms{$admin->id}{"contact"};
			} else {
				$err .= " You attempted to delete the last tournament contact.  At least one user must be marked as tournament contact.";
			}

		}

	}

	ADMIN:
	foreach my $admin (@admins) {

		next if $admin_perms{$admin->id}{"owner"};  # Full admin rights are redundant

		if ($ARGS{$admin->id."_level"} eq "tabber") {

			unless ($admin_perms{$admin->id}{"tabber"}) {
				Tab::Permission->create({
					tourn  => $tourn->id,
					person => $admin->id,
					tag    => "tabber"
				});

				$m->comp("/funclib/log.mas",
					person      => $admin->id,
					tourn       => $tourn->id,
					type        => "access",
					description => "Tournament admin rights granted by ".$person->email
				);
			}

			# If I'm a full admin I need no other permissions;
			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) {
				next if $key eq "owner";
				next if $key eq "contact";
				next if $key eq "tabber";
				$admin_perms{$admin->id}{$key}->delete;
				undef $admin_perms{$admin->id}{$key};
			}

			next ADMIN;

		} elsif ($admin_perms{$admin->id}{"tabber"}) {
			$admin_perms{$admin->id}{"tabber"}->delete;
			undef $admin_perms{$admin->id}{"tabber"};
		}

		if ($ARGS{$admin->id."_level"} eq "checker") {

			unless ($admin_perms{$admin->id}{"checker"}) {
				Tab::Permission->create({
					tourn  => $tourn->id,
					person => $admin->id,
					tag    => "checker"
				});
				next ADMIN;
			}

		} elsif ($admin_perms{$admin->id}{"checker"}) {
			$admin_perms{$admin->id}{"checker"}->delete;
			undef $admin_perms{$admin->id}{"checker"};
		}

	}

	my $msg = "Permissions saved";
	$m->redirect("access.mhtml?circuit_id=$circuit_id&tourn_id=$tourn_id&msg=$msg&err=$err");


</%init>
