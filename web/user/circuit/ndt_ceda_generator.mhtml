<%args>
	$event_id
	$circuit_id
	$person      => undef
    $came_from   => undef
    $delete_only => undef
	$ada         => undef
</%args>

<%init>

	## Yeah, so, I kinda red-id this on 5-12-2019.  Big change but I think the logic is much better.  --JB
	## Haven't tested beyond NDT points for 2019 ADA nats.
	
    my $debug=0;
    use Time::HiRes qw( time );
    my $start = time();

    my $event = Tab::Event->retrieve( $event_id );
	my $tourn = $event->tourn;

	# Pull all ballots for event into an array

	Tab::Ballot->columns(TEMP => qw/round_name/);
    Tab::Ballot->columns(TEMP => qw/round_label/);
    Tab::Ballot->columns(TEMP => qw/round_type/);
	Tab::Ballot->columns(TEMP => qw/round_id/);
    Tab::Ballot->columns(TEMP => qw/ballot_vote/);
    Tab::Ballot->columns(TEMP => qw/panel_bye/);
    Tab::Ballot->columns(TEMP => qw/entry_chapter/);
    Tab::Ballot->columns(TEMP => qw/entry_name/);

	Tab::Ballot->set_sql(pull_ballots => "
        SELECT ballot.*,
			round.name as round_name, round.type as round_type,
			panel.bye as panel_bye, panel.round as round_id,
			score.value as ballot_vote, school.chapter as entry_chapter, entry.code as entry_name, round.label as round_label
		FROM ballot
			INNER JOIN panel ON ballot.panel = panel.id
			INNER JOIN round ON panel.round  = round.id
			INNER JOIN entry ON entry.id     = ballot.entry
			INNER JOIN school ON school.id   = entry.school
			LEFT JOIN score ON score.ballot  = ballot.id
			WHERE round.published > 0
				and round.event = ?
				and (
					score.tag         = 'ballot'
					or panel.bye      = 1
					or ballot.bye     = 1
					or ballot.forfeit = 1
				)
			order by ballot.entry asc, round_name desc, ballot.panel asc
	");

	my @ballots = Tab::Ballot->search_pull_ballots($event->id);

	# Create a hash that stores all ceda, ndt, & ada points per entry

	my %ballot_counter;					#$ballot_counter{entry}{round}{'name' .., 'bal_for' ... 'tot_bal' ... 'is_elim' ... 'round_label'}
	my %entry; 							#$entry{entry}{'code' ... 'entry_chapter' ... 'prelim_win' .., 'prelim_str' ... 'prelim_tot_L6' ... 'prelim_tot' ... 'elim_str'...
										#'ceda_elims' ... 'ceda_tb' ... 'ceda_prelims' ... 'ceda_tot' ... 'ndt_prelims' ... 'ndt_elims' ... 'ada_prelims' ... 'ada_elims'}
	my $curr_round;
	my $tot_bal;
	my $bal_for;
	my $is_elim;
	my $curr_entry;
	my $rd_label;
	my $six_baseline = 6;
	$six_baseline = 8 if $tourn->setting("ceda_nationals");
	my $last_six = $six_baseline;

	my $ada_elim = 0;
	my $clearing_record;
	#necessary for ada; marks the record necessary to clear in an event

	$clearing_record = 99 unless $clearing_record;
	
	### STEP ONE: COUNT BALLOTS FOR EACH ROUND ###
	
	foreach my $ballot (@ballots) {

		$entry{$ballot->entry}{'code'} = $ballot->entry_name ;
		$entry{$ballot->entry}{'entry_chapter'} = $ballot->entry_chapter ;
		
		$ballot_counter{$ballot->entry}{$ballot->round_name}{'round_label'} = $ballot->round_label;
		$ballot_counter{$ballot->entry}{$ballot->round_name}{'tot_bal'}++;
		$ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'} = 0 unless $ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'};
		$ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'} += $ballot->ballot_vote ;
		if ( $ballot->panel_bye && defined($ballot->ballot_vote) !=1 ) {
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'} = 3;
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'tot_bal'} = 3;
		}
		if ( $ballot->panel_bye && $ballot->ballot_vote == 1 ) {
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'} = 3;
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'tot_bal'} = 3;
		}
		if ( $ballot->bye == 1 ) {
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'} = 3;
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'tot_bal'} = 3;
		}
		if ( $ballot->forfeit == 1 ) { 
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'bal_for'} = 0;
			$ballot_counter{$ballot->entry}{$ballot->round_name}{'tot_bal'} = 3;
		}
		$is_elim = 0 ;
		if ( $ballot->round_type eq "final" || $ballot->round_type eq "elim" ) {
			$is_elim = 1 ;
			if (index(lc($rd_label), "sem") != -1) { $is_elim = 2; }
			if ( $ballot->round_type eq "final") { $is_elim = 3 ;}
			if (index(lc($rd_label), "final") != -1) { $is_elim = 3; }
		}
		$ballot_counter{$ballot->entry}{$ballot->round_name}{'is_elim'} = $is_elim;
	}
	
	### STEP TWO: COUNT TOURNAMENT TOTALS AND ASSIGN ELIM POINTS ###
	
	foreach my $entry_key (keys %entry) {
	
		my $last_six = 6;
				
		foreach my $rd_key (sort {$b <=> $a} keys %{$ballot_counter{$entry_key}} ) {

			my $bal_for = $ballot_counter{$entry_key}{$rd_key}{'bal_for'};
			my $bal_lost = $ballot_counter{$entry_key}{$rd_key}{'tot_bal'} - $bal_for;
			my $tot_bal = $ballot_counter{$entry_key}{$rd_key}{'tot_bal'};
			my $is_elim = $ballot_counter{$entry_key}{$rd_key}{'is_elim'};
			
			#PRELIMS
			if ( $is_elim == 0 ) {
				#All prelims
				$entry{$entry_key}{'prelim_tot'}++;
				if ( $last_six > 0 ) {
					$entry{$entry_key}{'prelim_tot_L6'}++;
				}
				#prelim wins
				if ($bal_for > $bal_lost) {
					$entry{$entry_key}{'prelim_win'}++;
					$entry{$entry_key}{'prelim_str'}= "W".$entry{$entry_key}{'prelim_str'};
					if ( $last_six > 0 ) {
						$entry{$entry_key}{'prelim_win_L6'}++;
					}
				}
				#prelim losses
				if ($bal_for < $bal_lost) {
					$entry{$entry_key}{'prelim_str'}= "L".$entry{$entry_key}{'prelim_str'};
				}
				$last_six --;
			}
			
			#ELIMS
			if ( $is_elim > 0 ) {

				$ada_elim=3; #if you clear, you get your 3 points

				$entry{$entry_key}{'elim_str'} .= $ballot_counter{$entry_key}{$rd_key}{'round_label'};
				$entry{$entry_key}{'elim_str'} .= " ".$bal_for."-";
				$entry{$entry_key}{'elim_str'} .= $bal_lost;
				$entry{$entry_key}{'elim_str'} .= "<br>";

				#assign CEDA points
				my $dummy = $bal_for;
				if ( $dummy > 3 ) { $dummy = 3 };
				if ( $dummy == 3 && $bal_for < $tot_bal ) { $dummy = 2 };
				if ( $dummy > 1 && ($tot_bal-$bal_for) > $bal_for ) { $dummy = 1 };
				$entry{$entry_key}{'ceda_elims'} += $dummy;
				if ( $is_elim == 2 && $entry{$entry_key}{'ceda_tb'} < 1 ) { $entry{$entry_key}{'ceda_tb'} = 1; }
				if ( $is_elim == 3 && $bal_for > ($tot_bal-$bal_for) ) { $entry{$entry_key}{'ceda_tb'} = 5; }
				if ( $is_elim == 3 && $bal_for < ($tot_bal-$bal_for) ) { $entry{$entry_key}{'ceda_tb'} = 3; }

				$dummy = 0;

				if ( $bal_for >= $tot_bal ) { $dummy = 6; }
				if ( $bal_for > $bal_lost && $bal_for != $tot_bal && $tot_bal > 1 ) { $dummy = 5; }
				if ( $bal_for < $bal_lost && $bal_for > 0 ) { $dummy = 4; }
				if ( $bal_for == 0  ) { $dummy = 3; }
				$entry{$entry_key}{'ndt_elims'} += $dummy;
				if ( $bal_for > $bal_lost ) { $entry{$entry_key}{'ada_elims'} += 3; }

			}	# End elims
			
		}		#End round loop

	}			#End entry loop


	### STEP THREE: COUNT PRELIM POINTS POINTS ###
	
	foreach my $entry_key (keys %entry) {
	
		#CEDA points
		$entry{$entry_key}{'ceda_prelims'} = $entry{$entry_key}{'prelim_win_L6'};
		$entry{$entry_key}{'ceda_prelims'} = 1 unless $entry{$entry_key}{'ceda_prelims'};
		$entry{$entry_key}{'ceda_elims'} = 0 unless $entry{$entry_key}{'ceda_elims'};
		$entry{$entry_key}{'ceda_tot'} = $entry{$entry_key}{'ceda_prelims'}+$entry{$entry_key}{'ceda_elims'};

		#NDT Points
		my $dummy = 0; $entry{$entry_key}{'ndt_prelims'} = 0;
		$dummy = ($entry{$entry_key}{'prelim_win'} / $entry{$entry_key}{'prelim_tot'}) if $entry{$entry_key}{'prelim_tot'};
		if ($dummy == 1 ) { $entry{$entry_key}{'ndt_prelims'} = 16 };
		if ($dummy >= .8 && $dummy < 1 ) { $entry{$entry_key}{'ndt_prelims'} = 15 };
		if ($dummy >= .7 && $dummy < .8 ) { $entry{$entry_key}{'ndt_prelims'} = 14 };
		if ($dummy >= .55 && $dummy < .7 ) { $entry{$entry_key}{'ndt_prelims'} = 13 };
		if ($dummy == .5 ) { $entry{$entry_key}{'ndt_prelims'} = 12 };
		if ($dummy >= .28 && $dummy < .5 ) { $entry{$entry_key}{'ndt_prelims'} = 11 };
		if ($dummy >= .25 && $dummy < .28 ) { $entry{$entry_key}{'ndt_prelims'} = 10 };
		if ($dummy > 0 && $dummy < .25 ) { $entry{$entry_key}{'ndt_prelims'} = 9 };
		if ($dummy == 0 ) { $entry{$entry_key}{'ndt_prelims'} = 8 };
		$entry{$entry_key}{'ndt_tot'} = $entry{$entry_key}{'ndt_prelims'}+$entry{$entry_key}{'ndt_elims'};

		#ADA Points
		$entry{$entry_key}{'ada_prelims'} = 0;
		my $wins=$entry{$entry_key}{'prelim_win'};
		my $losses=$entry{$entry_key}{'prelim_tot'}-$entry{$entry_key}{'prelim_win'};
		if ($wins >= 6 && $losses == 0 ) { $entry{$entry_key}{'ada_prelims'} = 10 };
		if ($wins == 8 && $losses == 1 ) { $entry{$entry_key}{'ada_prelims'} = 9 };
		if ($wins == 7 && $losses == 1 ) { $entry{$entry_key}{'ada_prelims'} = 8 };
		if ($wins == 7 && $losses == 2 ) { $entry{$entry_key}{'ada_prelims'} = 8 };
		if ($wins == 6 && $losses == 1) { $entry{$entry_key}{'ada_prelims'} = 8 };
		if ($wins == 6 && $losses == 2) { $entry{$entry_key}{'ada_prelims'} = 8 };
		if ($wins == 6 && $losses == 3) { $entry{$entry_key}{'ada_prelims'} = 7 };
		if ($wins == 5 && $losses == 1 ) { $entry{$entry_key}{'ada_prelims'} = 7 };
		if ($wins == 5 && $losses == 2 ) { $entry{$entry_key}{'ada_prelims'} = 7 };
		if ($wins == 5 && $losses == 3 ) { $entry{$entry_key}{'ada_prelims'} = 6 };
		if ($wins == 5 && $losses == 4 ) { $entry{$entry_key}{'ada_prelims'} = 6 };
		if ($wins == 4 && $losses == 2 ) { $entry{$entry_key}{'ada_prelims'} = 6 };
		if ($wins == 4 && $losses == 3 ) { $entry{$entry_key}{'ada_prelims'} = 6 };
		if ($wins > 0 && $losses == $wins ) { $entry{$entry_key}{'ada_prelims'} = 5 };
		if ($wins == 4 && $losses == 5 ) { $entry{$entry_key}{'ada_prelims'} = 4 };
		if ($wins == 3 && $losses == 4 ) { $entry{$entry_key}{'ada_prelims'} = 4 };
		if ($wins == 3 && $losses == 5 ) { $entry{$entry_key}{'ada_prelims'} = 4 };
		if ($wins == 2 && $losses == 4 ) { $entry{$entry_key}{'ada_prelims'} = 4 };
		if ($wins == 3 && $losses == 6 ) { $entry{$entry_key}{'ada_prelims'} = 3 };
		if ($wins == 2 && $losses == 5 ) { $entry{$entry_key}{'ada_prelims'} = 3 };
		if ($wins == 2 && $losses == 6 ) { $entry{$entry_key}{'ada_prelims'} = 3 };
		if ($wins == 2 && $losses == 7 ) { $entry{$entry_key}{'ada_prelims'} = 2 };
		if ($wins == 1 && $losses == 5 ) { $entry{$entry_key}{'ada_prelims'} = 3 };
		if ($wins == 1 && $losses == 6 ) { $entry{$entry_key}{'ada_prelims'} = 2 };
		if ($wins == 1 && $losses == 7 ) { $entry{$entry_key}{'ada_prelims'} = 2 };
		if ($wins == 1 && $losses == 8 ) { $entry{$entry_key}{'ada_prelims'} = 1 };
		if ($wins == 0 && $losses > 0 ) { $entry{$entry_key}{'ada_prelims'} = 1 };
		$entry{$entry_key}{'ada_total'} = $entry{$entry_key}{'ada_prelims'}+$entry{$entry_key}{'ada_elims'};
		if ( $entry{$entry_key}{'ada_elims'} > 0 && $entry{$entry_key}{'prelim_win'} < $clearing_record ) {
			$clearing_record = $entry{$entry_key}{'prelim_win'};
		}
	
	}	

	### STEP THREE.FIVE: Give ADA point for having a clearing record ###
	foreach my $entry_key (keys %entry) {
		if ( $entry{$entry_key}{'prelim_win'} >= $clearing_record && $entry{$entry_key}{'ada_elims'} == 0 ) {
			$entry{$entry_key}{'ada_elims'} = 1;
			$entry{$entry_key}{'ada_total'} += 1;
		}
	}

	### STEP FOUR: SPEAKERS FOR ADA POINTS ###
	Tab::Result->columns(TEMP => qw/spkr_order/);
	Tab::Result->columns(TEMP => qw/student_first/);
	Tab::Result->columns(TEMP => qw/student_last/);
	Tab::Result->set_sql(pull_speakers => "
        SELECT result.id, entry, student, result_value.value as spkr_order, student.first as student_first, student.last as student_last
		FROM result, result_set, result_value, student
		WHERE result_set.event=? and result.result_set=result_set.id and result_set.label='Speaker Awards' and result_value.result=result.id
		and result_value.tag='order' and student.id=result.student
	");
	my @speakers = Tab::Result->search_pull_speakers($event_id);

	foreach my $speaker (@speakers) {
		my $ada_speaker_pts;
		if ( $speaker->spkr_order == 1) {
			$entry{$speaker->entry}{'ada_speaker'} += 3;
			$ada_speaker_pts=3;
		}

		if ( $speaker->spkr_order == 2) {
			$entry{$speaker->entry}{'ada_speaker'} += 2;
			$ada_speaker_pts=2;
		}
		if ( $speaker->spkr_order == 3) {
			$entry{$speaker->entry}{'ada_speaker'} += 1;
			$ada_speaker_pts=1;
		}

		if ( $speaker->spkr_order >=4
			&& $speaker->spkr_order <= 5
			&& scalar(@speakers) >= 21
		) {
			$entry{$speaker->entry}{'ada_speaker'} += 1;
			$ada_speaker_pts=1;
		}

		if ( $speaker->spkr_order >=6
			&& $speaker->spkr_order <= 10
			&& scalar(@speakers) >= 31
		) {
			$entry{$speaker->entry}{'ada_speaker'} += 1;
			$ada_speaker_pts=1;
		}

		$entry{$speaker->entry}{'ada_total'} +=  $ada_speaker_pts;
		if ($ada_speaker_pts) {
			$entry{$speaker->entry}{'ada_speaker_str'} = $speaker->student_first." ".$speaker->student_last." was speaker #".$speaker->spkr_order." and received $ada_speaker_pts points for ".$entry{$speaker->entry}{'code'}." total is now ".$entry{$speaker->entry}{'ada_speaker'};
		}
	}

	#ADD 1.5 for ADA nationals
	if ( index($event->tourn->name,"ADA Nationals") != -1 ) {
		foreach my $key (keys %entry) {
			$entry{$key}{'ada_total'} = $entry{$key}{'ada_total'} * 1.5;
		}
	}

	#CEDA save: Create a result set or delete existing records if one already exists

    my @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ceda_pts" );
    my $result_set_id;

    #if a result_set exists, clear out the result and result_value tables; otherwise, create it
    if ( scalar(@result_set) > 0 ) {

        $result_set_id = $result_set[0]->id;

        Tab::ResultValue->set_sql( delete_value => "
			 delete result_value from result_value, result
			 where result.result_set = ?
			 and result_value.result=result.id
         ");

         Tab::Result->set_sql( delete_result => "
                 delete from result
                 where result_set = ?
         ");

         Tab::ResultValue->sql_delete_value->execute($result_set_id);
         Tab::Result->sql_delete_result->execute($result_set_id);

    } else {

        Tab::ResultSet->create({
            tourn     => $event->tourn,
            event     => $event_id,
            published => 1,
            label     => "ceda_pts"
        });

        @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ceda_pts" );
        $result_set_id = $result_set[0]->id;
    }

	#CEDA save: store the values

    foreach my $key (keys %entry) {

        #mark a team as hybrid if they are
        my $hybrid=0; my $school=0;
        my @entry_student = Tab::EntryStudent->search( entry => $key );
        foreach my $entry_student (@entry_student) {
            if ( $school == 0 ) {
                $school = $entry_student->student->chapter
            } else {
                if ( $entry_student->student->chapter != $school ) { $hybrid=1; }
            }
        }


        if ( $key > 0 && $delete_only != 1 ) {

            Tab::Result->create({
                entry  => $key,
                result_set  => $result_set_id
            });

            my @result_ids = Tab::Result->search( entry => $key, result_set => $result_set_id );
            my $result_id = $result_ids[0]->id;

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_tot",
                value   =>  $entry{$key}{'ceda_tot'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_prelims",
                value   =>  $entry{$key}{'ceda_prelims'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_elims",
                value   =>  $entry{$key}{'ceda_elims'}
            });

            $entry{$key}{'ceda_tb'} = 0 unless $entry{$key}{'ceda_tb'};
            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ceda_tb",
                value   =>  $entry{$key}{'ceda_tb'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "hybrid",
                value   =>  $hybrid
            });

        }

    }

	#NDT save: Create a result set or delete existing records if one already exists

    @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ndt_pts" );
    $result_set_id = 0;

    #if a result_set exists, clear out the result and result_value tables; otherwise, create it
    if ( scalar(@result_set) > 0 ) {

        $result_set_id = $result_set[0]->id;

        Tab::ResultValue->set_sql( delete_value => "
                 delete result_value from result_value, result
                 where result.result_set = ?
                 and result_value.result=result.id
         ");

         Tab::Result->set_sql( delete_result => "
                 delete from result
                 where result_set = ?
         ");

         Tab::ResultValue->sql_delete_value->execute($result_set_id);
         Tab::Result->sql_delete_result->execute($result_set_id);

    } else {

        Tab::ResultSet->create({
            tourn  => $event->tourn,
            event  => $event_id,
            published  => 1,
            label  => "ndt_pts"
        });

        @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ndt_pts" );
        $result_set_id = $result_set[0]->id;
    }

	#NDT save: store the values

    foreach my $key (keys %entry) {

        if ( $key > 0 && $delete_only != 1 ) {

            Tab::Result->create({
                entry  => $key,
                result_set  => $result_set_id
            });

            my @result_ids = Tab::Result->search( entry => $key, result_set => $result_set_id );
            my $result_id = $result_ids[0]->id;

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ndt_tot",
                value   =>  $entry{$key}{'ndt_tot'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ndt_prelims",
                value   =>  $entry{$key}{'ndt_prelims'}
            });

            Tab::ResultValue->create({
                result  => $result_id,
                tag     => "ndt_elims",
                value   =>  $entry{$key}{'ndt_elims'}
            });

        }

    }

	#ADA save: Create a result set or delete existing records if one already exists

    @result_set = Tab::ResultSet->search( event=> $event_id, label=>"ada_pts" );
    $result_set_id = 0;

    #if a result_set exists, clear out the result and result_value tables; otherwise, create it
    if ( scalar(@result_set) > 0 ) {

        $result_set_id = $result_set[0]->id;

        Tab::ResultValue->set_sql( delete_value => "
                 delete result_value from result_value, result
                 where result.result_set = ?
                 and result_value.result=result.id
         ");

         Tab::Result->set_sql( delete_result => "
                 delete from result
                 where result_set = ?
         ");

         Tab::ResultValue->sql_delete_value->execute($result_set_id);
         Tab::Result->sql_delete_result->execute($result_set_id);

    } else {

		#create a new result_set unless it's in delete only mode
		#and only if you're running ADA points

		if ( $delete_only != 1 && $ada eq "true") {

			Tab::ResultSet->create({
				tourn  => $event->tourn,
				event  => $event_id,
				published  => 1,
				label  => "ada_pts"
			});

			@result_set = Tab::ResultSet->search( event=> $event_id, label=>"ada_pts" );
			$result_set_id = $result_set[0]->id;
		}
    }

	#ADA save: store the values

	if ($ada eq "true") {

		foreach my $key (keys %entry) {

			if ( $key > 0 && $delete_only != 1 ) {

				Tab::Result->create({
					entry  => $key,
					result_set  => $result_set_id
				});

				my @result_ids = Tab::Result->search( entry => $key, result_set => $result_set_id );
				my $result_id = $result_ids[0]->id;

				Tab::ResultValue->create({
					result  => $result_id,
					tag     => "ada_total",
					value   =>  $entry{$key}{'ada_total'}
				});

				Tab::ResultValue->create({
					result  => $result_id,
					tag     => "ada_prelims",
					value   =>  $entry{$key}{'ada_prelims'}
				});

				Tab::ResultValue->create({
					result  => $result_id,
					tag     => "ada_elims",
					value   =>  $entry{$key}{'ada_elims'}
				});

				Tab::ResultValue->create({
					result  => $result_id,
					tag     => "ada_speaker",
					value   =>  $entry{$key}{'ada_speaker'}
				});
			}
		}
	} #end of ADA save


    if ( $came_from eq "manager" && $debug == 0 ) {
        my $msg="points saved";
        if ($delete_only) { $msg="points deleted" }
        $m->redirect("/user/circuit/ndtceda_pt_manager.mhtml?circuit_id=".$circuit_id."&msg=$msg");
    }
	

</%init>