./nsda/link.mhtml:	my @chapters = $person->chapters;
./nsda/link.mhtml:	my @logins = $person->logins( source => "nsda" );
./nsda/link.mhtml:			password to connect <% $person->email %>'s Tabroom.com account
./nsda/link.mhtml:			co-coach's, or anyone else's.  Doing so will screw up your online
./nsda/link.mhtml:				Auto-posting of NSDA points.  Yay!  Hurrah!
./nsda/link.mhtml:			and click the Auto-Post button that will appear above your coaches'
./nsda/link.mhtml:			points will auto-post.
./nsda/autopoint_post.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./nsda/autopoint_post.mhtml:	my $now = DateTime->now();
./nsda/autopoint_post.mhtml:	my $usa_wsdc++ if $tourn->setting("usa_wsdc");
./nsda/autopoint_post.mhtml:	if ($tourn->setting("nsda_points_posted")) { 
./nsda/autopoint_post.mhtml:		my $err = $tourn->name."'s NSDA points have already been posted";
./nsda/autopoint_post.mhtml:		$m->redirect("autopoint.mhtml?tourn_id=$tourn_id&err=$err");
./nsda/autopoint_post.mhtml:	$tourn->setting("nsda_points_posted", 1);
./nsda/autopoint_post.mhtml:	my $tz = $tourn->tz;
./nsda/autopoint_post.mhtml:	my $start = $tourn->start->set_time_zone($tz);
./nsda/autopoint_post.mhtml:	my $end = $tourn->end->set_time_zone($tz);
./nsda/autopoint_post.mhtml:	my $site = $tourn->sites->first;
./nsda/autopoint_post.mhtml:	my $location = $site->name if $site;
./nsda/autopoint_post.mhtml:    my $dbh = Tab::DBI->db_Main(); 
./nsda/autopoint_post.mhtml:    my $sth = $dbh->prepare('
./nsda/autopoint_post.mhtml:        where school.tourn = '.$tourn->id.'
./nsda/autopoint_post.mhtml:    $sth->execute();
./nsda/autopoint_post.mhtml:	while( my ($entry_id, $student_id, $chapter_id, $student_ualt_id, $school_id, $first, $last, $state, $name) = $sth->fetchrow_array()) { 	
./nsda/autopoint_post.mhtml:				my @person_schools = Tab::NSDA::PersonSchool->search( ualt_id => $student_ualt_id);
./nsda/autopoint_post.mhtml:				@person_schools = sort {$b->startdate->epoch <=> $a->startdate->epoch} @person_schools;
./nsda/autopoint_post.mhtml:				$entry_nsda{$entry_id}{"chapter"} = $person_school->school_id->school_id;
./nsda/autopoint_post.mhtml:				$student_nsda{$student_id}{"chapter"} = $person_school->school_id->school_id;
./nsda/autopoint_post.mhtml:			my @alts = Tab::NSDA::AltStudent->search( nfl_school_id => $chapter_id );
./nsda/autopoint_post.mhtml:				$alt_student{$alt->alt_id} = $alt->nfl_student_id if $alt->nfl_student_id;
./nsda/autopoint_post.mhtml:				$alt_student{$alt->alt_id} = "exists" unless $alt->nfl_student_id;
./nsda/autopoint_post.mhtml:			my $student = Tab::Student->retrieve($student_id);
./nsda/autopoint_post.mhtml:			$student->ualt_id($alt_student{$student_id});
./nsda/autopoint_post.mhtml:			$student->update();
./nsda/autopoint_post.mhtml:		my $instance = Tab::NSDA::Instance->create({
./nsda/autopoint_post.mhtml:			tourn_id   => $tourn->id,
./nsda/autopoint_post.mhtml:			start_date => $start->year."-".$start->strftime('%m')."-".$start->strftime('%d'),
./nsda/autopoint_post.mhtml:			end_date   => $end->year."-".$end->strftime('%m')."-".$end->strftime('%d'),
./nsda/autopoint_post.mhtml:			tournament => $tourn->name,
./nsda/autopoint_post.mhtml:			state      => $tourn->state,
./nsda/autopoint_post.mhtml:			my $nsda_school = Tab::NSDA::School->create({
./nsda/autopoint_post.mhtml:				instance_id   => $instance->id,
./nsda/autopoint_post.mhtml:		foreach my $event ($tourn->events) { 
./nsda/autopoint_post.mhtml:			next if $ARGS{"exclude_".$event->id};
./nsda/autopoint_post.mhtml:			if ($event->type eq "congress") { 
./nsda/autopoint_post.mhtml:				next EVENT unless $ARGS{$event->id};
./nsda/autopoint_post.mhtml:				$nsda_event_category = Tab::NSDA::EventCategories->retrieve($ARGS{$event->id});
./nsda/autopoint_post.mhtml:				$event->setting("nsda_event_category", $ARGS{$event->id});
./nsda/autopoint_post.mhtml:				$nsda_cat = 1 if $event->type eq "speech";
./nsda/autopoint_post.mhtml:				$nsda_subcat = $nsda_event_category->nsda_id;
./nsda/autopoint_post.mhtml:			my $size = $event->setting('max_entry');
./nsda/autopoint_post.mhtml:			Tab::NSDA::Event->create({
./nsda/autopoint_post.mhtml:				instance_id   => $instance->id,
./nsda/autopoint_post.mhtml:				event_id      => $event->id,
./nsda/autopoint_post.mhtml:				type          => uc($nsda_event_category->type),
./nsda/autopoint_post.mhtml:				name          => $event->name,
./nsda/autopoint_post.mhtml:				category      => -1,
./nsda/autopoint_post.mhtml:				alt_id        => $event->id,
./nsda/autopoint_post.mhtml:			Tab::Student->set_sql( spoke_in_round => "
./nsda/autopoint_post.mhtml:			foreach my $round ($event->rounds) { 
./nsda/autopoint_post.mhtml:				next if $event->type eq "congress"; 
./nsda/autopoint_post.mhtml:				if ($event->type eq 'wsdc') { 
./nsda/autopoint_post.mhtml:					my @spoke = Tab::Student->search_spoke_in_round($round->id);
./nsda/autopoint_post.mhtml:					%spoke_in_round = map {$_->id => 1} @spoke;
./nsda/autopoint_post.mhtml:					= $m->comp("/tabbing/results/order_entries.mas", round => $round, nsda => 1);
./nsda/autopoint_post.mhtml:					= $m->comp("/funclib/entry_byes.mas", event => $event, round => $round, last => 1, forfeits => 1);
./nsda/autopoint_post.mhtml:				if ($event->type eq "speech") { 
./nsda/autopoint_post.mhtml:						my $base_points = 7 - $nsda_event_category->nat_category;
./nsda/autopoint_post.mhtml:								$entry_points{$entry} = $base_points - $rank;
./nsda/autopoint_post.mhtml:				} elsif ($event->type eq "wsdc") { 
./nsda/autopoint_post.mhtml:						my $win_points = 6 - ($nsda_event_category->nat_category * 2);
./nsda/autopoint_post.mhtml:						my $win_points = 6 - ($nsda_event_category->nat_category * 2);
./nsda/autopoint_post.mhtml:							if ($event->type eq "wsdc") { 
./nsda/autopoint_post.mhtml:							Tab::NSDA::Points->create({
./nsda/autopoint_post.mhtml:								instance_id    => $instance->id,
./nsda/autopoint_post.mhtml:								type           => uc($nsda_event_category->type),
./nsda/autopoint_post.mhtml:								round          => $round->name,
./nsda/autopoint_post.mhtml:								event_id       => $event->id,
./nsda/autopoint_post.mhtml:								Tab::NSDA::APT->create({
./nsda/autopoint_post.mhtml:									instance_id      => $instance->id,
./nsda/autopoint_post.mhtml:									round            => $round->name,
./nsda/autopoint_post.mhtml:									alt_event_id     => $event->id,
./nsda/autopoint_post.mhtml:									type             => uc($nsda_event_category->type),
./nsda/autopoint_post.mhtml:								Tab::NSDA::AltStudent->create({
./nsda/autopoint_post.mhtml:	$tourn->setting("nsda_points_posted", 1);
./nsda/autopoint_post.mhtml:	$m->redirect("autopoint.mhtml?msg=".$tourn->name." points posted");
./nsda/chapter_link.mhtml:	my $is_admin++ if Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $chapter_id);
./nsda/chapter_link.mhtml:	$m->abort unless $is_admin;
./nsda/chapter_link.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/chapter_link.mhtml:	foreach my $login ($person->logins) { 
./nsda/chapter_link.mhtml:		next unless $login->ualt_id;
./nsda/chapter_link.mhtml:		my @candidates = $m->comp("/funclib/nsda_school_by_person.mas", nsda_login => $login);
./nsda/chapter_link.mhtml:			$nsda_chapter = $candidate if $candidate->school_id == $nsda_chapter_id;
./nsda/chapter_link.mhtml:		$m->redirect("index.mhtml?err=$err");
./nsda/chapter_link.mhtml:	$chapter->name($nsda_chapter->school_name);
./nsda/chapter_link.mhtml:	$chapter->city($nsda_chapter->school_city);
./nsda/chapter_link.mhtml:	$chapter->state($nsda_chapter->school_state);
./nsda/chapter_link.mhtml:	$chapter->level("highschool") if $nsda_chapter->realm eq "NFL";
./nsda/chapter_link.mhtml:	$chapter->level("university") if $nsda_chapter->realm eq "PKD";
./nsda/chapter_link.mhtml:	$chapter->level("middle") if $nsda_chapter->realm eq "MID";
./nsda/chapter_link.mhtml:	$chapter->nsda($nsda_chapter_id);
./nsda/chapter_link.mhtml:	$chapter->update;
./nsda/chapter_link.mhtml:	$m->redirect("student_roster.mhtml?chapter_id=$chapter_id")
./nsda/import_nsda_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/import_nsda_roster.mhtml:	my $now = DateTime->now;
./nsda/import_nsda_roster.mhtml:	my $grad_year_limit = $now->year;
./nsda/import_nsda_roster.mhtml:	$grad_year_limit++ if $now->month > 8;
./nsda/import_nsda_roster.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./nsda/import_nsda_roster.mhtml:    @students = sort {$a->last cmp $b->last} @students;
./nsda/import_nsda_roster.mhtml:    @students = sort {length($a->ualt_id) <=> length($b->ualt_id)} @students;  #sorts already linked people to the bottom;
./nsda/import_nsda_roster.mhtml:	Tab::NSDA::Person->set_sql( students => "
./nsda/import_nsda_roster.mhtml:		and NEW_USERS_TO_SCHOOLS.enddate = \"0000-00-00 00:00:00\"
./nsda/import_nsda_roster.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./nsda/import_nsda_roster.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./nsda/import_nsda_roster.mhtml:	my %student_name = map {$_->first." ".$_->last." ".$_->grad_year} @students;
./nsda/import_nsda_roster.mhtml:			next if $used_students{$nsda_student->ualt_id};
./nsda/import_nsda_roster.mhtml:			next if $ARGS{"exclude_".$nsda_student->ualt_id};
./nsda/import_nsda_roster.mhtml:			my $name = $nsda_student->ufname." ".$nsda_student->umname." ".$nsda_student->ulname." ".$nsda_student->grad_yr;
./nsda/import_nsda_roster.mhtml:			Tab::Student->create({
./nsda/import_nsda_roster.mhtml:				first     => $nsda_student->ufname,
./nsda/import_nsda_roster.mhtml:				last      => $nsda_student->ulname,
./nsda/import_nsda_roster.mhtml:				chapter   => $chapter->id,
./nsda/import_nsda_roster.mhtml:				grad_year => $nsda_student->grad_yr,
./nsda/import_nsda_roster.mhtml:				ualt_id   => $nsda_student->ualt_id
./nsda/import_nsda_roster.mhtml:			$used_students{$nsda_student->ualt_id}++;
./nsda/import_nsda_roster.mhtml:		$m->redirect("/user/chapter/students.mhtml?chapter_id=$chapter_id&msg=$msg");
./nsda/import_nsda_roster.mhtml:%					next if $used_students{$nsda_student->ualt_id};
./nsda/import_nsda_roster.mhtml:							<% $nsda_student->ufname %>
./nsda/import_nsda_roster.mhtml:							<% $nsda_student->ulname %>
./nsda/import_nsda_roster.mhtml:							<% $nsda_student->grad_yr %>
./nsda/import_nsda_roster.mhtml:							<label for="exclude_<% $nsda_student->ualt_id %>">
./nsda/import_nsda_roster.mhtml:									Exclude: <input type="checkbox" value="1" id="exclude_<% $nsda_student->ualt_id %>" name="exclude_<% $nsda_student->ualt_id %>">
./nsda/student_link.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/student_link.mhtml:	my $now = DateTime->now;
./nsda/student_link.mhtml:	my $grad_year_limit = $now->year;
./nsda/student_link.mhtml:	$grad_year_limit++ if $now->month > 8;
./nsda/student_link.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./nsda/student_link.mhtml:    @students = sort {$a->last cmp $b->last} @students;
./nsda/student_link.mhtml:	Tab::NSDA::Person->set_sql( students => "
./nsda/student_link.mhtml:		and NEW_USERS_TO_SCHOOLS.enddate = \"0000-00-00 00:00:00\"
./nsda/student_link.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./nsda/student_link.mhtml:	my %student_by_ualt_id = map {$_->ualt_id => $_} @nsda_students;
./nsda/student_link.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./nsda/student_link.mhtml:		if ($student->ualt_id) { 
./nsda/student_link.mhtml:			if ($ARGS{"delink_".$student->id}) { 
./nsda/student_link.mhtml:				$student->ualt_id("");
./nsda/student_link.mhtml:				$student->update;
./nsda/student_link.mhtml:			if ($ARGS{"confirm_".$student->id}) {
./nsda/student_link.mhtml:				my $nsda_student_id = $ARGS{"student_".$student->id};
./nsda/student_link.mhtml:					$student->grad_year($nsda_student->grad_yr);  
./nsda/student_link.mhtml:					$student->ualt_id($nsda_student->ualt_id);
./nsda/student_link.mhtml:					$student->update;
./nsda/student_link.mhtml:	$msg .= "<br /><br />$unlinked students de-linked to NSDA autopointing.  I hope you know what you are doing..." if $unlinked;
./nsda/student_link.mhtml:	$m->redirect("student_roster.mhtml?chapter_id=$chapter_id&msg=$msg");
./nsda/student_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/student_roster.mhtml:	$ok++ if $person->site_admin;
./nsda/student_roster.mhtml:	foreach my $admin ($chapter->admins) { 
./nsda/student_roster.mhtml:		$ok++ if $admin->id == $person->id;
./nsda/student_roster.mhtml:		$m->print("<div class=\"blankfull\">You have no access to that school.</div>");
./nsda/student_roster.mhtml:		$m->abort;
./nsda/student_roster.mhtml:	my $now = DateTime->now;
./nsda/student_roster.mhtml:	my $grad_year_limit = $now->year;
./nsda/student_roster.mhtml:	$grad_year_limit++ if $now->month > 8;
./nsda/student_roster.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./nsda/student_roster.mhtml:    @students = sort {$a->last cmp $b->last} @students;
./nsda/student_roster.mhtml:    @students = sort {length($a->ualt_id) <=> length($b->ualt_id)} @students;  #sorts already linked people to the bottom;
./nsda/student_roster.mhtml:	Tab::NSDA::Person->set_sql( students => "
./nsda/student_roster.mhtml:		and NEW_USERS_TO_SCHOOLS.enddate = \"0000-00-00 00:00:00\"
./nsda/student_roster.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./nsda/student_roster.mhtml:	my %student_mid = map {$_->ufname." ".$_->umname." ".$_->ulname => $_->ualt_id} @nsda_students;
./nsda/student_roster.mhtml:	my %student_name = map {$_->ufname." ".$_->ulname => $_->ualt_id} @nsda_students;
./nsda/student_roster.mhtml:	my %student_by_ualt_id = map {$_->ualt_id => $_} @nsda_students;
./nsda/student_roster.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./nsda/student_roster.mhtml:							<% $student->first %>
./nsda/student_roster.mhtml:							<% $student->last %>
./nsda/student_roster.mhtml:							<% $student->grad_year %>
./nsda/student_roster.mhtml:%							if ($student->ualt_id) { 
./nsda/student_roster.mhtml:%								my $nsda_student = $student_by_ualt_id{$student->ualt_id};
./nsda/student_roster.mhtml:										#<% $nsda_student->ualt_id %>
./nsda/student_roster.mhtml:										<% $nsda_student->ufname." ".$nsda_student->umname." ".$nsda_student->ulname %>
./nsda/student_roster.mhtml:										'<% $nsda_student->grad_yr %>
./nsda/student_roster.mhtml:										<% int($nsda_student->total_pts) %> pts
./nsda/student_roster.mhtml:								<select name="student_<% $student->id %>" class="fixedbig">
./nsda/student_roster.mhtml:%										next if $used_students{$nsda_student->ualt_id};
./nsda/student_roster.mhtml:%										my $selected++ if $student_name{$student->first." ".$student->last} == $nsda_student->id;
./nsda/student_roster.mhtml:%										$selected++ if $student_mid{$student->first." ".$student->last} == $nsda_student->id;
./nsda/student_roster.mhtml:										<option value="<% $nsda_student->id %>" <% $selected ? 'selected="selected"' : "" %>>#<% $nsda_student->ualt_id %> <% $nsda_student->ufname." ".$nsda_student->umname." ".$nsda_student->ulname." '".$nsda_student->grad_yr %></option>
./nsda/student_roster.mhtml:%							if ($student->ualt_id) { 
./nsda/student_roster.mhtml:%								my $warn = "Doing this will disable auto-posting points for this competitor.  Are you sure?";
./nsda/student_roster.mhtml:								<label for="delink_<% $student->id %>">
./nsda/student_roster.mhtml:										Delink: <input type="checkbox" value="1" id="delink_<% $student->id %>" name="delink_<% $student->id %>" <& "/funclib/confirm.mas", warn => $warn &> >
./nsda/student_roster.mhtml:								<label for="confirm_<% $student->id %>">
./nsda/student_roster.mhtml:										Confirm: <input type="checkbox" value="1" id="confirm_<% $student->id %>" name="confirm_<% $student->id %>">
./nsda/index.mhtml:	my @logins = $person->logins;
./nsda/index.mhtml:		next unless $login->ualt_id;
./nsda/index.mhtml:		$nsda_people{$login->id} = Tab::NSDA::Person->search( ualt_id => $login->ualt_id )->first;
./nsda/index.mhtml:		my @candidates = $m->comp("/funclib/nsda_school_by_person.mas", nsda_person => $nsda_people{$login->id});
./nsda/index.mhtml:			$nsda_by_id{$candidate->school_id} = $candidate;
./nsda/index.mhtml:			next if Tab::Chapter->search(nsda => $candidate->school_id);
./nsda/index.mhtml:			Association account to auto-post NSDA points and degrees, pull in
./nsda/index.mhtml:			and click the Auto-Post button that will appear above your coaches'
./nsda/index.mhtml:			points will auto-post.
./nsda/index.mhtml:%			next unless $login->ualt_id;
./nsda/index.mhtml:					<% $login->name %>
./nsda/index.mhtml:					Username: <% $login->username %>
./nsda/index.mhtml:					Merit #<% $nsda_people{$login->id} ? $nsda_people{$login->id}->ualt_id : "Non-NSDA Login" %>
./nsda/index.mhtml:					<a class="dkred block" href="unlink_login.mhtml?login_id=<% $login->id %>" <& "/funclib/confirm.mas", warn => $warn &>>
./nsda/index.mhtml:%		foreach my $chapter ($person->chapters) { 
./nsda/index.mhtml:%			next if $chapter->level && $chapter->level ne "highschool";
./nsda/index.mhtml:			<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./nsda/index.mhtml:					<% $chapter->name %>
./nsda/index.mhtml:%					if ($chapter->nsda) { 
./nsda/index.mhtml:						<% $nsda_by_id{$chapter->nsda} ? "Linked to ".$nsda_by_id{$chapter->nsda}->school_name : "" %>
./nsda/index.mhtml:								<option value="<% $school->id %>"><% $school->school_name %></option>
./nsda/index.mhtml:%					if ($chapter->nsda && $nsda_by_id{$chapter->nsda}) { 
./nsda/index.mhtml:						<a href="unlink_chapter.mhtml?chapter_id=<% $chapter->id %>" class="dkred block" <& "/funclib/confirm.mas", warn => $warn &> >
./nsda/autopoint.mhtml:	my $now = DateTime->now();
./nsda/autopoint.mhtml:	my @categories = sort {$a->name cmp $b->name} Tab::NSDA::EventCategories->retrieve_all;
./nsda/autopoint.mhtml:		"lincoln-douglas"                   => 87,
./nsda/autopoint.mhtml:		"lincoln-douglass"                  => 87,
./nsda/autopoint.mhtml:		"lincoln-douglas debate"            => 87,
./nsda/autopoint.mhtml:		"lincoln-douglass debate"           => 87,
./nsda/autopoint.mhtml:%		my $tourn = Tab::Tourn->retrieve($tourn_id);
./nsda/autopoint.mhtml:%			$m->print("no tournament found");
./nsda/autopoint.mhtml:%			$m->abort;
./nsda/autopoint.mhtml:%		my $tz = $tourn->tz;
./nsda/autopoint.mhtml:		<h2><% $tourn->name %> autopoint</h2>
./nsda/autopoint.mhtml:		<p><% $tourn->start->set_time_zone($tz) %> - <% $tourn->start->set_time_zone($tz) %> <% Tab::tzname($tz) %> </p>
./nsda/autopoint.mhtml:		<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./nsda/autopoint.mhtml:%		foreach my $event ($tourn->events) { 
./nsda/autopoint.mhtml:%			my $event_name = $event->name;
./nsda/autopoint.mhtml:%			my $nsda_category = $event->setting("nsda_event_category");
./nsda/autopoint.mhtml:					<% $event->name %>
./nsda/autopoint.mhtml:					<% ucfirst($event->type) %>
./nsda/autopoint.mhtml:%					unless ($event->type eq "congress") { 
./nsda/autopoint.mhtml:						<select name="<% $event->id %>" class="fixedbig">
./nsda/autopoint.mhtml:								<option value="<% $category->id %>" <% $category->id == $nsda_category ? 'selected="selected"' : "" %>><% $category->id %> <% $category->name %></option>
./nsda/autopoint.mhtml:				<label for="<% $event->id %>">
./nsda/autopoint.mhtml:						Exclude: <input type="checkbox" name="exclude_<% $event->id %>" value="1" id="<% $event->id %>">
./nsda/autopoint.mhtml:	Tab::Tourn->set_sql( recent_over => "
./nsda/autopoint.mhtml:	my $start = $now->clone;
./nsda/autopoint.mhtml:	$start->subtract(days => 30);
./nsda/autopoint.mhtml:	my @tourns = Tab::Tourn->search_recent_over( $now, $start);
./nsda/autopoint.mhtml:				<a class="<% $tourn_id == $tourn->id ? "dk" : "" %>blue block" href="autopoint.mhtml?tourn_id=<% $tourn->id %>">
./nsda/autopoint.mhtml:						<% $tourn->name %>
./nsda/autopoint.mhtml:						<% Tab::shortdate($tourn->end) %>
./nsda/link_confirm.mhtml:		$m->redirect("link.mhtml?reconfirm=1");
./nsda/link_confirm.mhtml:	my $now = DateTime->now();
./nsda/link_confirm.mhtml:		$m->redirect("link.mhtml?err=$err");
./nsda/link_confirm.mhtml:	my $nsda_login = Tab::NSDA::Login->search( username => $nsda_username )->first;
./nsda/link_confirm.mhtml:		$m->redirect("link.mhtml?err=$err");
./nsda/link_confirm.mhtml:	unless ($nsda_login && ($encoded_password eq $nsda_login->password) ) { 
./nsda/link_confirm.mhtml:		Tab::log("NSDA link from ".$person->email." to NSDA username $nsda_username failed. Password hash is $encoded_password versus ".$nsda_login->password.".  Salt $Tab::points_salt");
./nsda/link_confirm.mhtml:		$m->redirect("link.mhtml?err=$err");
./nsda/link_confirm.mhtml:	my $nsda_person = Tab::NSDA::Person->search( user_id => $nsda_login->person_id )->first;
./nsda/link_confirm.mhtml:	my $salt = $m->comp("/funclib/generate_randomstring.mas"); 
./nsda/link_confirm.mhtml:	unless (Tab::Login->search( username => $nsda_login->username )) { 
./nsda/link_confirm.mhtml:		Tab::Login->create({ 
./nsda/link_confirm.mhtml:			username      => $nsda_login->username,
./nsda/link_confirm.mhtml:			name          => $nsda_login->name,
./nsda/link_confirm.mhtml:			person        => $person->id,
./nsda/link_confirm.mhtml:			ualt_id 	  => $nsda_person->ualt_id,
./nsda/link_confirm.mhtml:			nsda_login_id => $nsda_login->id
./nsda/link_confirm.mhtml:		my @logins = $person->logins;
./nsda/link_confirm.mhtml:			$login->ualt_id($nsda_person->ualt_id);
./nsda/link_confirm.mhtml:			$login->update;
./nsda/link_confirm.mhtml:			$winner = $login if $login->username eq $nsda_username;
./nsda/link_confirm.mhtml:		$winner->nsda_login_id($nsda_login->id);
./nsda/link_confirm.mhtml:	$m->redirect("index.mhtml?msg=$msg");
./nsda/menu.mas:	my $tz = $person->tz if $person;
./nsda/menu.mas:%			foreach my $chapter ($person->chapters) { 
./nsda/menu.mas:%				next unless $chapter->nsda;
./nsda/menu.mas:				<h4><% $chapter->name %></h4>
./nsda/menu.mas:				<a href="/user/chapter/students.mhtml?chapter_id=<% $chapter->id %>" class="blue full">
./nsda/menu.mas:				<a href="student_roster.mhtml?chapter_id=<% $chapter->id %>" class="<% $whoami eq "link" ? "dk" : "" %>blue full">
./nsda/menu.mas:					Link Students for Auto-Pointing
./nsda/menu.mas:				<a href="import_nsda_roster.mhtml?chapter_id=<% $chapter->id %>" class="<% $whoami eq "import" ? "dk" : "" %>blue full">
./login/login_block.mas:	<a href="#login-box" class="login-window">Login</a>
./login/login_block.mas:	<div id="login-box" class="login-popup">
./login/login_block.mas:			<a href="#" class="close fa fa-times-circle fa-lg">
./login/login_block.mas:	<a tabindex="-1" href="/user/login/new_user.mhtml">
./login/new_user_save.mhtml:		$m->redirect("/user/login/new_user.mhtml?first=$first&last=$last&email=$email&phone=$phone&domain=$domain&err=$err");
./login/new_user_save.mhtml:    my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/new_user_save.mhtml:	$email =~tr/[A-Z]/[a-z]/;
./login/new_user_save.mhtml:	my @existing_person = Tab::Person->search( email => $email );
./login/new_user_save.mhtml:	my @existing_login = Tab::Login->search( username => $email );
./login/new_user_save.mhtml:		$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
./login/new_user_save.mhtml:		$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
./login/new_user_save.mhtml:			$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
./login/new_user_save.mhtml:		my $emailok = Email::Valid->address( -address => $email, -mxcheck => 0 ) ? 'yes' : 'no';
./login/new_user_save.mhtml:			$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
./login/new_user_save.mhtml:		my $now = DateTime->now;
./login/new_user_save.mhtml:		my $person = Tab::Person->create({ 
./login/new_user_save.mhtml:		my $login = Tab::Login->create({ 
./login/new_user_save.mhtml:			person   => $person->id
./login/new_user_save.mhtml:		Tab::log("NEW ACCCOUNT: $email was created with id ".$person->id." from IP address ".$ENV{REMOTE_ADDR});
./login/new_user_save.mhtml:		$m->comp("/funclib/ldap_person.mas", login => $login, ad_password => $pass1);
./login/new_user_save.mhtml:		$m->redirect("/user/login/login_save.mhtml?username=$email&password=$pass1&first=yippee");
./login/profile.mhtml:		$m->redirect("/index/index.mhtml?err=Your account does not appear to exist.  Please log in");
./login/profile.mhtml:				<input type="text" name="email" value="<% $person->email %>" size="32">
./login/profile.mhtml:				<input type="text" name="googleplus" value="<% $person->googleplus %>" size="32" maxlength=127>
./login/profile.mhtml:				<input type="text" name="first" value="<% $person->first %>" size="32">
./login/profile.mhtml:				<input type="text" name="last" value="<% $person->last %>" size="32">
./login/profile.mhtml:				<input type="text" name="street" value="<% $person->street %>" size="32">
./login/profile.mhtml:				<input type="text" name="city" value="<% $person->city %>" size="32">
./login/profile.mhtml:					<& /funclib/state_select.mas, state => $person->state &>
./login/profile.mhtml:					<& /funclib/country_select.mas, country => $person->country &>
./login/profile.mhtml:				<input type="text" name="zip" value="<% sprintf("%05d", $person->zip) %>" size="32">
./login/profile.mhtml:				<input type="tel" name="phone" value="<% Tab::phone($person->phone) %>" size="32">
./login/profile.mhtml:					<& /funclib/cell_domains.mas, provider => $person->provider &>
./login/profile.mhtml:					<& /funclib/timezones.mas, tz => $person->tz &>
./login/profile.mhtml:				<input type="text" name="pronoun" value="<% $person ? $person->pronoun : "" %>" size="32">
./login/profile.mhtml:				<input type="checkbox"  id="shaddap" value="1" name="no_email" <% ($person->no_email) ? "checked" : "" %>>
./login/profile.mhtml:			<td class="explain" colspan="4" style="padding-top: 32px;">
./login/profile.mhtml:			<td class="explain" colspan="4" style="padding-top: 32px;">
./login/profile.mhtml:%			foreach my $login ($person->logins) { 
./login/profile.mhtml:				<input type="hidden" name="login_id" value="<% $login->id %>">
./login/profile.mhtml:						<input type="text" name="username" size="16" value="<% $login->username %>">
./login/profile.mhtml:		<p class="padleft" style="font-size: 14px; line-height: 18px;">
./login/profile.mhtml:		<p class="padleft" style="font-size: 14px; line-height: 18px;">
./login/forgot_send.mhtml:		$m->print("You must enter an username or email address to get your login password.  Hit back and try again");
./login/forgot_send.mhtml:		$m->abort;
./login/forgot_send.mhtml:	my $login = Tab::Login->search( username => $username )->first;
./login/forgot_send.mhtml:	my $person = Tab::Person->search( email => $username )->first;
./login/forgot_send.mhtml:		$m->redirect("/user/login/forgot.mhtml?err=$err");
./login/forgot_send.mhtml:		$login = $person->logins->first;
./login/forgot_send.mhtml:		$person = $login->person;
./login/forgot_send.mhtml:	my $id = $login->id;
./login/forgot_send.mhtml:	my $key =  $m->comp("/funclib/generate_randomstring.mas", length => 30);
./login/forgot_send.mhtml:	my $expires = DateTime->now;
./login/forgot_send.mhtml:	$expires->add(hours => '2');
./login/forgot_send.mhtml:	$login->pass_changekey($key);
./login/forgot_send.mhtml:	$login->pass_change_expires($expires);
./login/forgot_send.mhtml:	$login->update;
./login/forgot_send.mhtml:    -- Tabroom.com
./login/forgot_send.mhtml:	# creating new "base"-object for an email
./login/forgot_send.mhtml:	my $msg = MIME::Lite->new(
./login/forgot_send.mhtml:	    To      => $person->email,
./login/forgot_send.mhtml:	MIME::Lite->send('smtp', $Tab::smtp_server, Timeout=>60);
./login/forgot_send.mhtml:	$msg->send;
./login/forgot_send.mhtml:%		if ($person && $person->site_admin) { 
./login/login.mhtml:			<td colspan="2" class="explain" style="padding-top: 15px; text-align: right;">
./login/person_required.mas:		$m->redirect("/index/index.mhtml?err=$err");
./login/passwd.mhtml:	$m->abort unless $person;
./login/passwd.mhtml:	my $login = Tab::Login->retrieve($login_id);
./login/passwd.mhtml:	unless ($person->id == $login->person->id) {
./login/passwd.mhtml:		$m->print("<h1>I call shenanigans</h1>");
./login/passwd.mhtml:		$m->abort;
./login/passwd.mhtml:	if ($username != $login->username) { 
./login/passwd.mhtml:		my @others =  Tab::Login->search( username => $username);
./login/passwd.mhtml:			$m->redirect("/user/login/profile.mhtml?err=$err");
./login/passwd.mhtml:	my $new_salt = $m->comp("/funclib/generate_randomstring.mas");
./login/passwd.mhtml:    my $db_md5_hash = $login->password;  #This gets the salt from the MD5 combined password hash
./login/passwd.mhtml:    my $db_sha2_hash = $login->sha512;  #This gets the salt from the MD5 combined password hash
./login/passwd.mhtml:		$m->redirect("/user/login/profile.mhtml?err=$err");
./login/passwd.mhtml:	my $now = DateTime->now;
./login/passwd.mhtml:	$login->pass_timestamp($now);
./login/passwd.mhtml:	$login->pass_changekey("");
./login/passwd.mhtml:	$login->sha512($new_sha2_hash);
./login/passwd.mhtml:	$login->password("");
./login/passwd.mhtml:	$login->update;
./login/passwd.mhtml:	Tab::log("PASSWORD CHANGE: Login ID ".$login->id." (".$login->username.") for ".$person->id." ".$person->first." ".$person->last." password was changed from IP address ".$ENV{REMOTE_ADDR});
./login/passwd.mhtml:	$m->comp("/funclib/ldap_person.mas", login => $login, ad_password => $newpass);
./login/passwd.mhtml:	$m->redirect("/user/login/profile.mhtml?msg=$msg");
./login/logout.mhtml:	my $tokencookie = Apache2::Cookie->new($r,
./login/logout.mhtml:        -name => 'Tab-AuthToken',
./login/logout.mhtml:        -value => '',
./login/logout.mhtml:        -expires => '+1m',
./login/logout.mhtml:        -path => '/'
./login/logout.mhtml:	my $passwordcookie = Apache2::Cookie->new($r,
./login/logout.mhtml:        -name => 'Tab-AuthKey',
./login/logout.mhtml:        -value => '',
./login/logout.mhtml:       -expires => '+1m',
./login/logout.mhtml:        -path => '/' 
./login/logout.mhtml:    $tokencookie->bake($r);
./login/logout.mhtml:    $passwordcookie->bake($r);
./login/logout.mhtml:    $m->redirect("/index/index.mhtml?msg=$msg");
./login/forgot.mhtml:		<!--function sf(){document.f.email.focus();} -->
./login/forgot_save.mhtml:	$m->abort unless $id;
./login/forgot_save.mhtml:	$m->abort unless $key;
./login/forgot_save.mhtml:	$m->abort unless $pass1;
./login/forgot_save.mhtml:	$m->abort unless $pass2;
./login/forgot_save.mhtml:	my $now = DateTime->now();
./login/forgot_save.mhtml:	my $login = Tab::Login->retrieve($id);
./login/forgot_save.mhtml:	unless ($login->pass_change_expires && $login->pass_changekey) { 
./login/forgot_save.mhtml:	} elsif ($login->pass_change_expires && $login->pass_change_expires->epoch < $now->epoch) {
./login/forgot_save.mhtml:	} elsif ($login->pass_changekey != $key) { 
./login/forgot_save.mhtml:	$m->redirect("/user/login/forgot.mhtml?err=$err") if $err;
./login/forgot_save.mhtml:	my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/forgot_save.mhtml:	$login->pass_timestamp($now);
./login/forgot_save.mhtml:	$login->pass_changekey("");
./login/forgot_save.mhtml:	$login->sha512($new_sha2_hash);
./login/forgot_save.mhtml:	$login->password("");
./login/forgot_save.mhtml:	$login->update;
./login/forgot_save.mhtml:	$m->comp("/funclib/ldap_person.mas", login => $login, ad_password => $pass1);
./login/forgot_save.mhtml:	$m->redirect("/user/login/login.mhtml?username=".$login->person->email."&msg=$msg");
./login/new_user.mhtml:		<p style="margin-top: 25px" class="explain">  <!-- EU notice -->
./login/new_user.mhtml:	<div class="menu" style="padding-left: 8px; font-size: 95%;">
./login/forgot_change.mhtml:	my $now = DateTime->now();
./login/forgot_change.mhtml:	$m->abort() unless $id;
./login/forgot_change.mhtml:	$m->abort() unless $key;
./login/forgot_change.mhtml:	my $login = Tab::Login->retrieve($id);
./login/forgot_change.mhtml:	my $person = $login->person;
./login/forgot_change.mhtml:		$m->redirect("/");
./login/forgot_change.mhtml:	unless ($login->pass_change_expires && $login->pass_changekey) { 
./login/forgot_change.mhtml:	} elsif ($login->pass_change_expires->epoch < $now->epoch) {
./login/forgot_change.mhtml:	} elsif ($login->pass_changekey != $key) { 
./login/forgot_change.mhtml:	$m->redirect("/user/login/forgot.mhtml?err=$err") if $err;
./login/forgot_change.mhtml:		<h2>Change <% $login->username %>'s password</h2>
./login/login_save.mhtml:	my $now = DateTime->now;
./login/login_save.mhtml:	my $log = $now->mdy('/')." ".$now->hms;
./login/login_save.mhtml:		$session = Tab::Session->retrieve($session_id);
./login/login_save.mhtml:		$person = $session->person;
./login/login_save.mhtml:		$log .= " Login attempt via cookie by ".$person->email." from ".$ENV{REMOTE_ADDR}."...." if $session->person;
./login/login_save.mhtml:		$username =~ tr/[A-Z]/[a-z]/;
./login/login_save.mhtml:			$m->redirect("/index/index.mhtml?err=$err");
./login/login_save.mhtml:			$m->redirect("/index/index.mhtml?err=$err");
./login/login_save.mhtml:		$login = Tab::Login->search(username => $username)->first;
./login/login_save.mhtml:			$m->redirect("/index/index.mhtml?err=$err");
./login/login_save.mhtml:		my $db_sha_crypt = $login->sha512;
./login/login_save.mhtml:			my $db_md5_crypt = $login->password;
./login/login_save.mhtml:				my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/login_save.mhtml:				$login->sha512($sha_crypt);
./login/login_save.mhtml:				$login->password("");
./login/login_save.mhtml:				$login->update;
./login/login_save.mhtml:				# has changed.  If so and is correct, re-sync them. 
./login/login_save.mhtml:				if ($login->source eq "nsda") { 
./login/login_save.mhtml:					my $nsda_login = Tab::NSDA::Login->search( username => $username )->first;
./login/login_save.mhtml:					my $nsda_db_password = $nsda_login->password;
./login/login_save.mhtml:						my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/login_save.mhtml:						$login->sha512($sha_crypt);
./login/login_save.mhtml:						$login->password("");
./login/login_save.mhtml:						$login->update;
./login/login_save.mhtml:			$person = $login->person;
./login/login_save.mhtml:			my $salt = $m->comp("/funclib/generate_randomstring.mas", length => 16);
./login/login_save.mhtml:			$sha_user = crypt($person->email, '$6$'.$salt);
./login/login_save.mhtml:			$session = Tab::Session->create( { 
./login/login_save.mhtml:				person  => $person->id,
./login/login_save.mhtml:			$m->redirect("/index/index.mhtml?err=$err");
./login/login_save.mhtml:	$allowed_sessions = 6 if $person->site_admin;
./login/login_save.mhtml:	$allowed_sessions = 10 if $person->id == 1; 
./login/login_save.mhtml:	foreach my $sess ( sort {$b->id <=> $a->id} $person->sessions) {
./login/login_save.mhtml:		$sess->delete unless $allowed_sessions;
./login/login_save.mhtml:		$allowed_sessions--;
./login/login_save.mhtml:	my $tokencookie = Apache2::Cookie->new(
./login/login_save.mhtml:        -name    => 'Tab-AuthToken',
./login/login_save.mhtml:        -value   => $sha_user,
./login/login_save.mhtml:        -expires => '+96h',
./login/login_save.mhtml:        -path    => '/'
./login/login_save.mhtml:    $tokencookie->bake($r);
./login/login_save.mhtml:	unless ($person->email && $person->first && $person->last) { 
./login/login_save.mhtml:		$m->redirect("/user/login/profile.mhtml?idebate=1"); 
./login/login_save.mhtml:	$login->accesses($login->accesses + 1);
./login/login_save.mhtml:	$login->last_access($now);
./login/login_save.mhtml:	$login->update;
./login/login_save.mhtml:    $m->redirect("http://$url") if $url;
./login/login_save.mhtml:    $m->redirect("/index/register.mhtml?tourn_id=$tourn_id") if $tourn_id;
./login/login_save.mhtml:    $m->redirect("/user/home.mhtml");
./login/profile_save.mhtml:	$m->abort unless $person;
./login/profile_save.mhtml:	$m->abort unless $first;
./login/profile_save.mhtml:	$m->abort unless $last;
./login/profile_save.mhtml:	$m->abort unless $email;
./login/profile_save.mhtml:	unless ($email eq $person->email) { 
./login/profile_save.mhtml:		my @existing_emails = Tab::Person->search( email => $email);
./login/profile_save.mhtml:			my $err = "Email address $email already has an person: ".$existing_emails[0]->first." ".$existing_emails[0]->last;
./login/profile_save.mhtml:			$m->redirect("/user/login/profile.mhtml?err=$err");			
./login/profile_save.mhtml:	foreach my $login ($person->logins) { 
./login/profile_save.mhtml:		next unless $login->username eq $person->email;
./login/profile_save.mhtml:		if ($login->username ne $email) { 
./login/profile_save.mhtml:			$login->username($email);
./login/profile_save.mhtml:			$login->update;
./login/profile_save.mhtml:			$m->comp("/funclib/ldap_person.mas", login => $login);
./login/profile_save.mhtml:	$person->first($first);
./login/profile_save.mhtml:	$person->last($last);
./login/profile_save.mhtml:	$person->street($street);
./login/profile_save.mhtml:	$person->city($city);
./login/profile_save.mhtml:	$person->email($email);
./login/profile_save.mhtml:	$person->googleplus($googleplus);
./login/profile_save.mhtml:	$person->state($state);
./login/profile_save.mhtml:	$person->no_email($no_email);
./login/profile_save.mhtml:	$person->zip($zip);
./login/profile_save.mhtml:	$person->pronoun($pronoun);
./login/profile_save.mhtml:	$person->phone($phone);
./login/profile_save.mhtml:	$person->provider($provider);
./login/profile_save.mhtml:	$person->tz($timezone);
./login/profile_save.mhtml:	$person->update;
./login/profile_save.mhtml:	Tab::log("PROFILE CHANGE: Account ID ".$person->id." ($email) was modified from IP address ".$ENV{REMOTE_ADDR});
./login/profile_save.mhtml:	$m->redirect("/user/login/profile.mhtml?msg=$msg");
./login/authenticate.mas:	my %cookies = Apache2::Cookie->fetch;
./login/authenticate.mas:	if ( defined eval{$cookies{'Tab-AuthToken'}->value} ) { 
./login/authenticate.mas:		my $user_key = $cookies{'Tab-AuthToken'}->value;
./login/authenticate.mas:		my $session = Tab::Session->search( userkey => $user_key )->first;
./login/authenticate.mas:			my $person = $session->person;
./login/authenticate.mas:			unless ($person && $person->email) { 
./login/authenticate.mas:				$session->delete;
./login/authenticate.mas:				$m->redirect("/index/index.mhtml?msg=$msg");
./admin/ldap_renew.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./admin/ldap_renew.mhtml:	foreach my $login ($edit->logins) { 
./admin/ldap_renew.mhtml:		$m->comp("/funclib/ldap_person.mas", login => $login);
./admin/ldap_renew.mhtml:	$m->redirect("person_edit.mhtml?edit_id=".$edit_id."&msg=$msg");
./admin/chapter_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./admin/chapter_save.mhtml:		$chapter->name($name);
./admin/chapter_save.mhtml:		$chapter->state($state);
./admin/chapter_save.mhtml:		$chapter->level($level);
./admin/chapter_save.mhtml:		$chapter->ipeds($ipeds);
./admin/chapter_save.mhtml:		$chapter->nces($nces);
./admin/chapter_save.mhtml:		$chapter->nsda($nsda);
./admin/chapter_save.mhtml:		$chapter->country($country);
./admin/chapter_save.mhtml:		$chapter->coaches($coaches);
./admin/chapter_save.mhtml:		$chapter->self_prefs($self_prefs);
./admin/chapter_save.mhtml:		$chapter->update;	
./admin/chapter_save.mhtml:				my $region = Tab::Region->retrieve($naudl_league);
./admin/chapter_save.mhtml:				my $circuit = $region->circuit if $region;
./admin/chapter_save.mhtml:				$err = "That league is not in a NAUDL circuit.  Please try again" unless $circuit->setting("naudl");
./admin/chapter_save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $circuit->id, chapter => $chapter_id)->first;
./admin/chapter_save.mhtml:					$membership = Tab::ChapterCircuit->create({  
./admin/chapter_save.mhtml:						circuit => $circuit->id,
./admin/chapter_save.mhtml:					$membership->region($region->id);
./admin/chapter_save.mhtml:					$membership->update;
./admin/chapter_save.mhtml:					$chapter->naudl(1);
./admin/chapter_save.mhtml:					$chapter->update;
./admin/chapter_save.mhtml:				$chapter->naudl("");
./admin/chapter_save.mhtml:				$chapter->update;
./admin/chapter_save.mhtml:				foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./admin/chapter_save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./admin/chapter_save.mhtml:					$membership->delete if $membership;
./admin/chapter_save.mhtml:			$chapter->naudl("");
./admin/chapter_save.mhtml:			$chapter->update;
./admin/chapter_save.mhtml:			foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./admin/chapter_save.mhtml:				my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./admin/chapter_save.mhtml:				$membership->delete if $membership;
./admin/chapter_save.mhtml:	$m->redirect("chapter_edit.mhtml?chapter_id=".$chapter->id."&err=$err&naudl_err=$naudl_err");
./admin/chapter_roster_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_roster_save.mhtml:	foreach my $student ($chapter->students) { 
./admin/chapter_roster_save.mhtml:		$student->first($ARGS{$student->id."_first"});
./admin/chapter_roster_save.mhtml:		$student->middle($ARGS{$student->id."_middle"});
./admin/chapter_roster_save.mhtml:		$student->last($ARGS{$student->id."_last"});
./admin/chapter_roster_save.mhtml:		$student->grad_year($ARGS{$student->id."_grad_year"});
./admin/chapter_roster_save.mhtml:		$student->ualt_id($ARGS{$student->id."_ualt_id"}) if defined $ARGS{$student->id."_ualt_id"};
./admin/chapter_roster_save.mhtml:		$student->retired($ARGS{$student->id."_retired"});
./admin/chapter_roster_save.mhtml:		$student->chapter($ARGS{$student->id."_chapter"});
./admin/chapter_roster_save.mhtml:		$student->update;
./admin/chapter_roster_save.mhtml:	$m->redirect("chapter_roster.mhtml?chapter_id=".$chapter->id."&msg=$msg");
./admin/circuit_edit.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./admin/circuit_edit.mhtml:		<h2><% ($circuit) ? $circuit->name : "Create Circuit" %></h2> 
./admin/circuit_edit.mhtml:					<input type="text" size="25" name="name" value="<% ($circuit) ? $circuit->name : "" %>">
./admin/circuit_edit.mhtml:					<input type="text" size="25" name="abbr" value="<% ($circuit) ? $circuit->abbr : "" %>">
./admin/circuit_edit.mhtml:						<& /funclib/state_select.mas, state => $circuit ? $circuit->state : "" &>
./admin/circuit_edit.mhtml:						<& /funclib/country_select.mas, country => $circuit ? $circuit->country : "" &>
./admin/circuit_edit.mhtml:					<input type="text" size="25" name="url" value="<% ($circuit) ? $circuit->setting('url') : "" %>">
./admin/circuit_edit.mhtml:							<& /funclib/timezones.mas, tz => $circuit->tz &>
./admin/circuit_edit.mhtml:					<input 	type="radio" name="active" value="1" <% ($circuit) ? ($circuit->active) ? "checked" : "" : "" %> > 
./admin/circuit_edit.mhtml:					<input type="radio" name="active" value="" <% ($circuit) ? ($circuit->active) ? "" : "checked" : "" %> > 
./admin/circuit_edit.mhtml:					<input type="radio" name="full_members" value="1" <% ($circuit) ? ($circuit->setting("full_members")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="full_members" value="" <% ($circuit) ? ($circuit->setting('full_members')) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:				<td colspan="2">Open to non-members</td>
./admin/circuit_edit.mhtml:					<input type="radio" name="tourn_only" value="1" <% ($circuit) ? ($circuit->setting("tourn_only")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="tourn_only" value="" <% ($circuit) ? ($circuit->setting("tourn_only")) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="track_bids" value="1" <% ($circuit) ? ($circuit->setting("track_bids")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="track_bids" value="" <% ($circuit) ? ($circuit->setting("track_bids")) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="demographics" value="1" <% ($circuit) ? ($circuit->setting("demographics")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="demographics" value="" <% ($circuit) ? ($circuit->setting("demographics")) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="regions" value="1" <% ($circuit) ? ($circuit->setting("regions")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="regions" value="" <% ($circuit) ? ($circuit->setting("regions")) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="ncfl" value="1" <% ($circuit) ? ($circuit->setting("ncfl")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="ncfl" value="" <% ($circuit) ? ($circuit->setting("ncfl")) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="naudl" value="1" <% ($circuit) ? ($circuit->setting("naudl")) ? "checked" : "" : "" %> >
./admin/circuit_edit.mhtml:					<input type="radio" name="naudl" value="" <% ($circuit) ? ($circuit->setting("naudl")) ? "" : "checked" : "" %> >
./admin/circuit_edit.mhtml:		<div class="right half" style="margin-right: -10px;">
./admin/circuit_edit.mhtml:% 			foreach my $admin (sort {$a->last cmp $b->last} $circuit->admins) { 
./admin/circuit_edit.mhtml:						<a class="white full padmore" href="mailto:<% $admin->email %>">
./admin/circuit_edit.mhtml:							<% $admin->first." ".$admin->last %> (<% $admin->email %>)
./admin/circuit_edit.mhtml:						<a class="dkred padmore full" href="admin_rm.mhtml?admin_id=<% $admin->id %>&circuit_id=<% $circuit_id %>">
./admin/admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./admin/admin_add.mhtml:	my $person = Tab::Person->search( email => $email)->first;
./admin/admin_add.mhtml:        $m->redirect("circuit_edit.mhtml?err=$err&circuit_id=$circuit_id");
./admin/admin_add.mhtml:	my @existing = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id );
./admin/admin_add.mhtml:	foreach (@existing) { $_->delete; }
./admin/admin_add.mhtml:	my $circuit_admin = Tab::Permission->create({
./admin/admin_add.mhtml:		person  => $person->id,
./admin/admin_add.mhtml:	my $msg = $person->first." ".$person->last." is now an admin for ".$circuit->abbr;
./admin/admin_add.mhtml:	$m->redirect("circuit_edit.mhtml?msg=$msg&circuit_id=$circuit_id");
./admin/chapter_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_roster.mhtml:	my @circuits = $chapter->circuits;
./admin/chapter_roster.mhtml:		next if $circuit->id == 6;
./admin/chapter_roster.mhtml:		push @candidate_chapters, $circuit->chapters;
./admin/chapter_roster.mhtml:	@candidate_chapters = grep { ! $seen{$_->id} ++ } @candidate_chapters;
./admin/chapter_roster.mhtml:				<h4><% $chapter->name %></h4> 
./admin/chapter_roster.mhtml:					<option value="<% $candidate->id %>" <% $candidate->id == $chapter->id ? 'selected="selected"' : "" %>> <% $candidate->name." ".$candidate->location %>  </option>
./admin/chapter_roster.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./admin/chapter_roster.mhtml:%			foreach my $student ($chapter->students) { 
./admin/chapter_roster.mhtml:						<span class="hidden"><% $student->first%></span>
./admin/chapter_roster.mhtml:						<input type="text" name="<% $student->id %>_first" size="16" value="<% $student->first %>">
./admin/chapter_roster.mhtml:						<span class="hidden"><% $student->middle%></span>
./admin/chapter_roster.mhtml:						<input type="text" name="<% $student->id %>_middle" size="16" value="<% $student->middle %>">
./admin/chapter_roster.mhtml:						<span class="hidden"><% $student->last%></span>
./admin/chapter_roster.mhtml:						<input type="text" name="<% $student->id %>_last" size="16" value="<% $student->last %>">
./admin/chapter_roster.mhtml:						<span class="hidden"><% $student->grad_year %></span>
./admin/chapter_roster.mhtml:						<input type="number" name="<% $student->id %>_grad_year" size="4" min="2010" max="3000" value="<% $student->grad_year %>">
./admin/chapter_roster.mhtml:						<input type="number" name="<% $student->id %>_ualt_id" size="6" value="<% $student->ualt_id %>">
./admin/chapter_roster.mhtml:						<span class="hidden"><% $student->retired ? "0" : "1" %></span>
./admin/chapter_roster.mhtml:						<input type="checkbox" name="<% $student->id %>_retired" value="1" <% $student->retired ? 'checked="checked"' : "" %>>
./admin/chapter_roster.mhtml:						<select name="<% $student->id %>_chapter" class="fixedmed">
./admin/chapter_roster.mhtml:								<option value="<% $candidate->id %>" <% $candidate->id == $chapter->id ? 'selected="selected"' : "" %>> <% $candidate->name." ".$candidate->location %>  </option>
./admin/calendar_admin.mhtml:	my $now = DateTime->now();
./admin/calendar_admin.mhtml:	Tab::Calendar->set_sql( future => "
./admin/calendar_admin.mhtml:	my @items = Tab::Calendar->search_future($now->year."-".$now->strftime("%m")."-".$now->day);
./admin/calendar_admin.mhtml:						<% $item->title %> <br />
./admin/calendar_admin.mhtml:							<% Tab::nicedate($item->start_date) %>
./admin/calendar_admin.mhtml:						<% $item->contact %> 
./admin/calendar_admin.mhtml:						<a class="dkblue block" href="/index/wsdc_calendar.mhtml?calendar_id=<% $item->calendar_id %>">
./admin/calendar_admin.mhtml:							<% $item->hidden ? "1" : "2" %>
./admin/calendar_admin.mhtml:							$(function() { switchme(<% $item->calendar_id %>, "<% ($item->hidden) ? "off" : "on" %>" ); });
./admin/calendar_admin.mhtml:						<div class="phoneswitch" id="<% $item->calendar_id %>"></div>
./admin/persons.mhtml:		@persons = Tab::Person->search_like( email => $email."%", last => $last."%" );
./admin/persons.mhtml:		@persons = Tab::Person->search_like( last => $last."%" );
./admin/persons.mhtml:		@persons = Tab::Person->search_like( email => $email."%" );
./admin/persons.mhtml:	@persons = sort {$a->first cmp $b->first} @persons;
./admin/persons.mhtml:	@persons = sort {$a->last cmp $b->last} @persons;
./admin/persons.mhtml:								<% $acct->first." ".$acct->last %>
./admin/persons.mhtml:								<% $acct->email %>
./admin/persons.mhtml:								<% $acct->state ? $acct->state."/" : "" %><% $acct->country %>
./admin/persons.mhtml:								<a class="dkblue button" href="person_edit.mhtml?edit_id=<% $acct->id %>">
./admin/persons.mhtml:								<a class="dkblue button" href="su.mhtml?su_id=<% $acct->id %>">
./admin/persons.mhtml:					<object style="height: 195px; width: 320px"><param name="movie" value="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage&autoplay=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="320" height="195"></object>
./admin/chapter_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_edit.mhtml:	$m->comp("/user/chapter/auth.mas", chapter => $chapter, person => $person, session => $session);
./admin/chapter_edit.mhtml:	my @regions = $m->comp("/funclib/chapter_regions.mas", chapter => $chapter);
./admin/chapter_edit.mhtml:	my %region_yes = map {$_->id => 1} @regions;
./admin/chapter_edit.mhtml:        <!-- 
./admin/chapter_edit.mhtml:        //--> 
./admin/chapter_edit.mhtml:		<h4><% $chapter->name %></h4>
./admin/chapter_edit.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./admin/chapter_edit.mhtml:					<input type="text" name="name" size="24" value="<% $chapter->name %>">
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "university" ? "selected" : "" %> value="university">College/University</option>
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "highschool" ? "selected" : "" %> value="highschool">High School/Secondary</option>
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "middle" ? "selected" : "" %> value="middle">Middle/Junior High</option>
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "elementary" ? "selected" : "" %> value="elementary">Elementary</option>
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "homeschool" ? "selected" : "" %> value="homeschool">Home School</option>
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "independent" ? "selected" : "" %> value="independent">Independent</option>
./admin/chapter_edit.mhtml:						<option <% $chapter->level eq "private" ? "selected" : "" %> value="private">Private Organization</option>
./admin/chapter_edit.mhtml:						<& /funclib/country_select.mas, country => $chapter->country &>
./admin/chapter_edit.mhtml:						<& /funclib/state_select.mas, state => $chapter->state &>
./admin/chapter_edit.mhtml:					<input type="text" name="coaches" size="24" value="<% $chapter->coaches %>">
./admin/chapter_edit.mhtml:						<input type="checkbox" id="self_prefs" name="self_prefs" class="padmore" value="1" <% $chapter->self_prefs ? 'checked="checked"' : "" %>>
./admin/chapter_edit.mhtml:					<input type="text" name="nces" size="5" class="thin" value="<% $chapter->nces %>">
./admin/chapter_edit.mhtml:					<input type="text" size="5" class="thin" name="ipeds"  value="<% $chapter->ipeds %>">
./admin/chapter_edit.mhtml:					<input type="text" size="5" class="thin" name="nsda"  value="<% $chapter->nsda %>">
./admin/chapter_edit.mhtml:						value="1" <% $naudl_err || $chapter->naudl ? 'checked="checked"' : "" %>>
./admin/chapter_edit.mhtml:			<div id="league" class="<% $naudl_err ? "dkred" : "row" %>" <% $chapter->naudl || $naudl_err ? "" : 'style="display: none;"' %>>
./admin/chapter_edit.mhtml:%						foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) { 
./admin/chapter_edit.mhtml:%							foreach my $region ($ns->circuit->regions) { 
./admin/chapter_edit.mhtml:								<option value="<% $region->id %>" <% $region_yes{$region->id} ? 'selected="selected"' : "" %>>
./admin/chapter_edit.mhtml:									<% $region->name %>
./admin/chapter_edit.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id%>">
./admin/chapter_edit.mhtml:%		foreach my $permission ($chapter->permissions) { 
./admin/chapter_edit.mhtml:%			my $coach = $permission->person;
./admin/chapter_edit.mhtml:      	    	    <% $coach->first." ".$coach->last %>
./admin/chapter_edit.mhtml:					<a class="white" href="mailto:<% $coach->email %>">
./admin/chapter_edit.mhtml:              			<% $coach->email %>
./admin/chapter_edit.mhtml:					<select name="<% $coach->id %>_access_level" class="fixedsmall plain">
./admin/chapter_edit.mhtml:						<option value="chapter" <% $permission->tag eq "chapter" ? 'selected="selected"' : "" %>> Full Access </option>
./admin/chapter_edit.mhtml:						<option value="prefs" <% $permission->tag eq "prefs" ? 'selected="selected"' : "" %>> Pref Sheets Only </option>
./admin/chapter_edit.mhtml:					<a class="dkred button" href="chapter_admin_rm.mhtml?coach_id=<% $coach->id%>&chapter_id=<% $chapter->id%>">
./admin/admin_rm.mhtml:	my @admins = Tab::Permission->search ( tag => "circuit", person => $admin_id, circuit => $circuit_id);
./admin/admin_rm.mhtml:		$msg .= $admin->person->first." ".$admin->person->last." has been removed from that circuit" if $admin->person;
./admin/admin_rm.mhtml:		$admin->delete;
./admin/admin_rm.mhtml:	$m->redirect("circuit_edit.mhtml?msg=$msg&circuit_id=$circuit_id");
./admin/su_return.mhtml:	my $become = $session->su;
./admin/su_return.mhtml:	my $log = $person->email." (".$person->last.") has returned to ".$become->email." (".$become->last.")";
./admin/su_return.mhtml:	unless ($become->id > 0 && $become->site_admin) { 
./admin/su_return.mhtml:		$session->delete;
./admin/su_return.mhtml:		$m->redirect("/index/index.mhtml?err=$err");
./admin/su_return.mhtml:	$session->person($become->id);
./admin/su_return.mhtml:	$session->su("");
./admin/su_return.mhtml:	$session->update;
./admin/su_return.mhtml:	$m->redirect("/user/home.mhtml?msg=$msg");
./admin/naudl/students.mhtml:	my $now = DateTime->now;
./admin/naudl/students.mhtml:		$end = $start->clone;
./admin/naudl/students.mhtml:		$end->subtract(days => 7);
./admin/naudl/students.mhtml:	Tab::School->columns(TEMP => qw/region_code/);
./admin/naudl/students.mhtml:	Tab::School->set_sql( naudl_competed => "
./admin/naudl/students.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./admin/naudl/students.mhtml:		DateTime::Format::MySQL->format_datetime($start), 
./admin/naudl/students.mhtml:		DateTime::Format::MySQL->format_datetime($end) 
./admin/naudl/students.mhtml:    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";
./admin/naudl/students.mhtml:	$r->content_type('application/csv');
./admin/naudl/students.mhtml:	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
./admin/naudl/students.mhtml:	$m->print("circuitname,teamid,teamlevel,teamname,globalcompid,compname,firstname,lastname,studentschoolid,birthdate,graduationyear,gender,ethnicity,udl code,tournament\r\n");
./admin/naudl/students.mhtml:		my @students = $m->comp("/funclib/school_students.mas", school => $school, by_result => 1);
./admin/naudl/students.mhtml:		my $tourn = $school->tourn;
./admin/naudl/students.mhtml:		my $circuit_name = $tourn_circuit{$tourn->id};
./admin/naudl/students.mhtml:			foreach my $circuit ($tourn->circuits) { 
./admin/naudl/students.mhtml:				$circuit_name .= " ".$circuit->name;
./admin/naudl/students.mhtml:			$tourn_circuit{$tourn->id} = $circuit_name;
./admin/naudl/students.mhtml:			my $birthday_dt = $student->birthdate; 
./admin/naudl/students.mhtml:			$race = "White, non-Hispanic/Latino" if $student->race eq "white";
./admin/naudl/students.mhtml:			$race = "Black, non-Hispanic/Latino" if $student->race eq "black";
./admin/naudl/students.mhtml:			$race = "Hispanic/Latino" if $student->race eq "latino";
./admin/naudl/students.mhtml:			$race = "American Indian/Native Alaskan" if $student->race eq "amerindian";
./admin/naudl/students.mhtml:			$race = "Asian" if $student->race eq "asian";
./admin/naudl/students.mhtml:			$race = "Native Hawaiian or other Pacific Islander" if $student->race eq "pacific";
./admin/naudl/students.mhtml:			$race = "Two or more races" if $student->race eq "dual";
./admin/naudl/students.mhtml:			$race = "Other" if $student->race eq "other";
./admin/naudl/students.mhtml:			my $gender = $student->gender if $internal;
./admin/naudl/students.mhtml:			my $bps_id = $student->school_sid if $internal;
./admin/naudl/students.mhtml:			$bps_id = $student->region unless $bps_id;
./admin/naudl/students.mhtml:			$m->print('"'.$circuit_name.'","TR'.$student->code.'","'.$student->event.'","'.$student->school.'","TR'.$student->id.'","'.$student->first.' '.$student->last.'","'.$student->first.'","'.$student->last.'","'.$bps_id.'","'.$birthstring.'","'.$student->grad_year.'","'.$gender.'","'.$race.'","'.$school->region_code.'","'.$tourn->name.'"'."\r\n");
./admin/naudl/sta.mhtml:	my $now = DateTime->now;
./admin/naudl/sta.mhtml:		$end = $start->clone;
./admin/naudl/sta.mhtml:		$end->subtract(days => 7);
./admin/naudl/sta.mhtml:	Tab::School->set_sql( naudl_competed => "
./admin/naudl/sta.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./admin/naudl/sta.mhtml:		DateTime::Format::MySQL->format_datetime($start), 
./admin/naudl/sta.mhtml:		DateTime::Format::MySQL->format_datetime($end) 
./admin/naudl/sta.mhtml:    my $filename = "NAUDL-STA-$start-$end.csv";
./admin/naudl/sta.mhtml:	$r->content_type('application/csv');
./admin/naudl/sta.mhtml:	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
./admin/naudl/sta.mhtml:	my %is_naudl = map {$_->id => 1} @schools;
./admin/naudl/sta.mhtml:		push @tourns, $school->tourn;
./admin/naudl/sta.mhtml:		foreach my $entry ($school->entries( waitlist => 0 )) { 
./admin/naudl/sta.mhtml:			push @{$tourn_events{$school->tourn->id}}, $entry->event;
./admin/naudl/sta.mhtml:			push @{$event_entries{$entry->event->id}}, $entry;
./admin/naudl/sta.mhtml:	$m->print("recordid,tournid,tournname,tournstartdate,eventid,eventname,eventabbr,divisionid,divisionname,divisionabbr,studentid,pairid,speakerorder,elimplace,prelimseed\n");
./admin/naudl/sta.mhtml:	@tourns = grep { ! $seen{$_->id} ++ } @tourns;
./admin/naudl/sta.mhtml:		my $start = $tourn->start;
./admin/naudl/sta.mhtml:		my $start_string = $start->year."-".$start->month."-".$start->day;
./admin/naudl/sta.mhtml:		foreach my $event (@{$tourn_events{$tourn->id}}) { 
./admin/naudl/sta.mhtml:			my $event_name = ucfirst($event->type)."-".$event->name;
./admin/naudl/sta.mhtml:			my $division_name = ucfirst($event->setting("level"))."-".$event->name;
./admin/naudl/sta.mhtml:			my @rounds = sort {$b->name <=> $a->name} $event->rounds;
./admin/naudl/sta.mhtml:					$last_prelim = $round if ($round->type ne "final" && $round->type ne "elim");
./admin/naudl/sta.mhtml:				push @elims, $round if $round->type eq "final";
./admin/naudl/sta.mhtml:				push @elims, $round if $round->type eq "elim";
./admin/naudl/sta.mhtml:			my ($final_entries_ref, @crap) = $m->comp("/tabbing/results/order_entries.mas", round => $final) if $final && $final->tiebreak_set;
./admin/naudl/sta.mhtml:			my ($prelim_entries_ref, $prelim_tbs_ref, $prelim_desc_ref, $prelim_forfeit_ref, $prelim_meh, $prelim_panrank_ref, $prelim_panletter_ref, $prelim_long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $last_prelim) if $last_prelim && $last_prelim->tiebreak_set;
./admin/naudl/sta.mhtml:			my ($speakers_students_ref, $speakers_tbs_ref, $speakers_desc_ref, $speakers_forfeit_ref, $speakers_meh, $speakers_long_desc_ref, $speakers_novice_ref, $speakers_name_ref, $speakers_code_ref, $speakers_school_ref) = $m->comp("/tabbing/results/order_speakers.mas", round => $last_prelim) if $event->setting("speaker_tbset");
./admin/naudl/sta.mhtml:					my @all_entries = $m->comp("/funclib/round_entries.mas", round => $round);
./admin/naudl/sta.mhtml:						push @entries, $ae if $is_naudl{$ae->school->id};
./admin/naudl/sta.mhtml:							next if $entry_finish{$entry->id};
./admin/naudl/sta.mhtml:							$entry_finish{$entry->id} = $finish;
./admin/naudl/sta.mhtml:			foreach my $entry (@{$event_entries{$event->id}}) { 
./admin/naudl/sta.mhtml:				my @students = sort {$a->id <=> $b->id} $entry->students;
./admin/naudl/sta.mhtml:				my $first_team = $m->comp("/funclib/first_entry.mas", entry => $entry);
./admin/naudl/sta.mhtml:				foreach my $student ($entry->students) { 
./admin/naudl/sta.mhtml:					$m->print("TR".$entry."-".$student->id.",TR".$tourn.",\"".$tourn->name."\",".$start_string.",".$event.",\"".$event_name."\",\"".$event->abbr."\",0,\"".$division_name."\",0,TR".$student->id.",".$first_team.",".$student_speaker_key{$student}.",".$entry_finish{$entry}.",".$entry_seed_key{$entry}."\n");
./admin/naudl/sta_pairs.mhtml:	my $now = DateTime->now;
./admin/naudl/sta_pairs.mhtml:		$end = $start->clone;
./admin/naudl/sta_pairs.mhtml:		$end->subtract(days => 7);
./admin/naudl/sta_pairs.mhtml:	Tab::School->set_sql( naudl_competed => "
./admin/naudl/sta_pairs.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./admin/naudl/sta_pairs.mhtml:		DateTime::Format::MySQL->format_datetime($start), 
./admin/naudl/sta_pairs.mhtml:		DateTime::Format::MySQL->format_datetime($end) 
./admin/naudl/sta_pairs.mhtml:    my $filename = "NAUDL-STA-$start-$end.csv";
./admin/naudl/sta_pairs.mhtml:	$r->content_type('application/csv');
./admin/naudl/sta_pairs.mhtml:	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
./admin/naudl/sta_pairs.mhtml:		foreach my $entry ($school->entries) { 
./admin/naudl/sta_pairs.mhtml:	$m->print("pairid,member_1,member_2\n");
./admin/naudl/sta_pairs.mhtml:	@entries = grep { ! $seen{$_->id} ++ } @entries;
./admin/naudl/sta_pairs.mhtml:		my $first_team = $m->comp("/funclib/first_entry.mas", entry => $entry);
./admin/naudl/sta_pairs.mhtml:		if ($first_team == $entry->id) { 
./admin/naudl/sta_pairs.mhtml:			$m->print("TR".$first_team.",");
./admin/naudl/sta_pairs.mhtml:			foreach my $student ($entry->students) { 
./admin/naudl/sta_pairs.mhtml:				$m->print("TR".$student->id.",");
./admin/naudl/sta_pairs.mhtml:			$m->print("\n");
./admin/naudl/sta_pairs.mhtml:	$m->abort;
./admin/naudl/sections.mhtml:	my $now = DateTime->now;
./admin/naudl/sections.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./admin/naudl/sections.mhtml:		$end = $start->clone;
./admin/naudl/sections.mhtml:		$end->subtract(days => 7);
./admin/naudl/sections.mhtml:	Tab::School->columns(TEMP => qw/region_code/);
./admin/naudl/sections.mhtml:	Tab::School->set_sql( naudl_competed => "
./admin/naudl/sections.mhtml:	my @schools = Tab::School->search_naudl_competed( $circuit->id, DateTime::Format::MySQL->format_datetime($start), DateTime::Format::MySQL->format_datetime($end));
./admin/naudl/sections.mhtml:    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";
./admin/naudl/sections.mhtml:	$r->content_type('application/csv');
./admin/naudl/sections.mhtml:	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
./admin/naudl/sections.mhtml:	$m->print("tourn.id,tourn.name,tourn.startdate,tourn.location,section.id,judge.name,round,section.name,section.unique,event.name,division,pdi.id,speechwire.id,speaker.points,rank,side,winloss\r\n");
./admin/naudl/sections.mhtml:		my $tourn = $school->tourn;
./admin/naudl/sections.mhtml:		my $dbh = Tab::DBI->db_Main();
./admin/naudl/sections.mhtml:		my $sth = $dbh->prepare("
./admin/naudl/sections.mhtml:			and entry.school = ".$school->id."
./admin/naudl/sections.mhtml:		$sth->execute(); 
./admin/naudl/sections.mhtml:			= $sth->fetchrow_array() ) { 
./admin/naudl/sections.mhtml:				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "Bye"
./admin/naudl/sections.mhtml:				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "Bye"
./admin/naudl/sections.mhtml:				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "FFT"
./admin/naudl/sections.mhtml:				push @{$entry_round_judges{$entryid."-".$roundname}}, $judge;
./admin/naudl/sections.mhtml:				$entry_round_side{$entryid."-".$roundname."-".$judge} = "Aff" if $side == 1;
./admin/naudl/sections.mhtml:				$entry_round_side{$entryid."-".$roundname."-".$judge} = "Neg" if $side == 2;
./admin/naudl/sections.mhtml:				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "-" if $value == 0;
./admin/naudl/sections.mhtml:				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "L" if $value == 0;
./admin/naudl/sections.mhtml:				$entry_round_decision{$entryid."-".$roundname."-".$judge} = "W" if $value == 1;
./admin/naudl/sections.mhtml:				$entry_round_section{$entryid."-".$roundname."-".$judge} = $panel;
./admin/naudl/sections.mhtml:				$entry_round_section_letter{$entryid."-".$roundname."-".$judge} = $letter;
./admin/naudl/sections.mhtml:				$student_round_points{$studentid."-".$roundname."-".$judge} .= ", " if $student_round_points{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:				$student_round_points{$studentid."-".$roundname."-".$judge} .= $value;
./admin/naudl/sections.mhtml:				$student_round_ballot{$studentid."-".$roundname."-".$judge} = $id;
./admin/naudl/sections.mhtml:				$student_round_ranks{$studentid."-".$roundname."-".$judge} .= $value." ";
./admin/naudl/sections.mhtml:		my $tourn_id = "TR".$tourn->id;
./admin/naudl/sections.mhtml:		my $tourn_name = $tourn->name;
./admin/naudl/sections.mhtml:		my $tourn_start = $tourn->start->set_time_zone($tourn->tz);
./admin/naudl/sections.mhtml:		$tourn_start->set_time_zone("UTC");
./admin/naudl/sections.mhtml:		my $start_string = $tourn_start->year."-".$tourn_start->month."-".$tourn_start->day."T00:00:00.00Z";
./admin/naudl/sections.mhtml:		my $tourn_place = $tourn->state;
./admin/naudl/sections.mhtml:		foreach my $event ($tourn->events) { 
./admin/naudl/sections.mhtml:			next if $event->type eq "speech";
./admin/naudl/sections.mhtml:			next if $event->type eq "congress";
./admin/naudl/sections.mhtml:			my @all_rounds = sort {$a->name <=> $b->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");
./admin/naudl/sections.mhtml:			my @judges = $m->comp("/funclib/event_judges.mas", event => $event);
./admin/naudl/sections.mhtml:			my %judge_name_by_id = map { $_->id => $_->first." ".$_->last } @judges;
./admin/naudl/sections.mhtml:			my $event_name = $event->type."-".$event->name;
./admin/naudl/sections.mhtml:			my $event_level = $event->setting("level");
./admin/naudl/sections.mhtml:			my $level = $event->name;
./admin/naudl/sections.mhtml:			foreach my $student ($m->comp("/funclib/event_students.mas", event => $event, by_results => 1)) { 
./admin/naudl/sections.mhtml:				my $entry_id = $student->entry;
./admin/naudl/sections.mhtml:				my $studentid = $student->id;
./admin/naudl/sections.mhtml:					my $roundname = $round->name;
./admin/naudl/sections.mhtml:					next if $round->type eq "elim";
./admin/naudl/sections.mhtml:					next if $round->type eq "final";
./admin/naudl/sections.mhtml:					foreach my $judge (@{$entry_round_judges{$entry_id."-".$roundname}}) { 
./admin/naudl/sections.mhtml:						my $side = substr($entry_round_side{$entry_id."-".$roundname."-".$judge},0,1);
./admin/naudl/sections.mhtml:						my $rank = $student_round_ranks{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $points = $student_round_points{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $result = $entry_round_decision{$entry_id."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $section = $entry_round_section{$entry_id."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $letter = $entry_round_section_letter{$entry_id."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $ballot = $student_round_ballot{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						$m->print('"'.$tourn_id.'","'.$tourn_name.'","'.$start_string.'","'.$tourn_place.'","TR'.$section.'","'.$judge_name_by_id{$judge}.'","'.$roundname.'","'.$letter.'","T'.$tourn_id."S".$section.'","'.$event_name.'","'.$level.'","TR'.$ballot.'","TR'.$studentid.'","'.$points.'","'.$rank.'","'.$side.'","'.$result.'"'."\r\n");
./admin/naudl/sections.mhtml:				push @elims, $round if $round->type eq "final";
./admin/naudl/sections.mhtml:				push @elims, $round if $round->type eq "elim";
./admin/naudl/sections.mhtml:			@elims = sort {$b->name <=> $a->name} @elims;
./admin/naudl/sections.mhtml:				my $roundname = substr($round->label,0,1);
./admin/naudl/sections.mhtml:				foreach my $panel ($round->panels) { 
./admin/naudl/sections.mhtml:					next if $panel->bye;
./admin/naudl/sections.mhtml:					my $letter = $panel->letter;
./admin/naudl/sections.mhtml:					my $section = $panel->id;
./admin/naudl/sections.mhtml:					my ($winner, $winningside) = $m->comp("/funclib/panel_winner.mas", panel => $panel, noob => 1);
./admin/naudl/sections.mhtml:					foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
./admin/naudl/sections.mhtml:						next unless $entry->school == $school->id;
./admin/naudl/sections.mhtml:						$result = "W" if $winner == $entry->id;
./admin/naudl/sections.mhtml:						$side = "N" if $entry->side == 2;
./admin/naudl/sections.mhtml:						my $ballot = $entry->ballot;
./admin/naudl/sections.mhtml:						foreach my $student ($entry->students) { 
./admin/naudl/sections.mhtml:							my $studentid = $student->id;
./admin/naudl/sections.mhtml:							$m->print('"'.$tourn_id.'","'.$tourn_name.'","'.$start_string.'","'.$tourn_place.'","TR'.$section.'","ELIM","'.$roundname.'","'.$letter.'","T'.$tourn_id."S".$section.'","'.$event_name.'","'.$level.'","TR'.$ballot.'-'.$counter.'","TR'.$studentid.'",..,..,"'.$side.'","'.$result.'"'."\r\n");
./admin/naudl/tournaments.mhtml:	my $now = DateTime->now;
./admin/naudl/tournaments.mhtml:		$end = $start->clone;
./admin/naudl/tournaments.mhtml:		$end->subtract(days => 7);
./admin/naudl/tournaments.mhtml:	Tab::Tourn->set_sql( naudl_competed => "
./admin/naudl/tournaments.mhtml:	my @tourns = Tab::Tourn->search_naudl_competed( 
./admin/naudl/tournaments.mhtml:		DateTime::Format::MySQL->format_datetime($start), 
./admin/naudl/tournaments.mhtml:		DateTime::Format::MySQL->format_datetime($end) 
./admin/naudl/tournaments.mhtml:    my $filename = "NAUDL-Tournaments-$start-$end.csv";
./admin/naudl/tournaments.mhtml:	$m->clear_buffer;
./admin/naudl/tournaments.mhtml:	$r->content_type('application/csv');
./admin/naudl/tournaments.mhtml:	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
./admin/naudl/tournaments.mhtml:	$m->print("Tournament Name,tournid,Location,Date,League ID\n");
./admin/naudl/tournaments.mhtml:		next if $used{$tourn->id."-".$tourn->schoolid}++;
./admin/naudl/tournaments.mhtml:		my @sites = $tourn->sites;
./admin/naudl/tournaments.mhtml:		my $site_name = $site->name if $site;
./admin/naudl/tournaments.mhtml:		my $start = $tourn->start;
./admin/naudl/tournaments.mhtml:		$start->set_time_zone($tourn->tz) if $tourn->tz;
./admin/naudl/tournaments.mhtml:		$start->set_time_zone("UTC");
./admin/naudl/tournaments.mhtml:		$m->print('"'.$tourn->name.'",');
./admin/naudl/tournaments.mhtml:		$m->print('"TR'.$tourn->id.'",');
./admin/naudl/tournaments.mhtml:		$m->print('"'.$site_name.'",');
./admin/naudl/tournaments.mhtml:		$m->print('"'.$start->year."-".$start->month."-".$start->day."T".$start->hour.":".$start->strftime("%M").":".$start->strftime("%S").'Z",');
./admin/naudl/tournaments.mhtml:		$m->print('"'.$tourn->schoolid.'"');
./admin/naudl/tournaments.mhtml:		$m->print("\n");
./admin/naudl/tournaments.mhtml:	$m->flush_buffer;
./admin/naudl/tournaments.mhtml:	$m->abort;
./admin/tourns.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./admin/tourns.mhtml:			Tab::Tourn->set_sql( tourn_name => "
./admin/tourns.mhtml:			@tourns = Tab::Tourn->search_tourn_name($circuit_id, "%".$name."%");
./admin/tourns.mhtml:			@tourns = Tab::Tourn->search_like( name => "%".$name."%", {order_by => 'start DESC, name'});
./admin/tourns.mhtml:			$circuit->tourns;
./admin/tourns.mhtml:	my $now = DateTime->now;
./admin/tourns.mhtml:	my $start = $now->clone;
./admin/tourns.mhtml:	my $end = $now->clone;
./admin/tourns.mhtml:	$start->add(days => 2);
./admin/tourns.mhtml:	$end->subtract(days => 2);
./admin/tourns.mhtml:	$search_hash{"start"} = { '<', DateTime::Format::MySQL->format_datetime($start) };
./admin/tourns.mhtml:	$search_hash{"end"} = { '>', DateTime::Format::MySQL->format_datetime($end) };
./admin/tourns.mhtml:	@tourns_now = Tab::Tourn->search_where(\%search_hash, \%search_attrs);
./admin/tourns.mhtml:%					foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->retrieve_all) {
./admin/tourns.mhtml:						<option value="<% $circuit->id%>" <% $circuit->id == $circuit_id ? "selected" : "" %>>
./admin/tourns.mhtml:							<% $circuit->name %>
./admin/tourns.mhtml:			<h4>Tournaments <% $name ? "matching \"".$name."\"" : ""  %> <% $circuit ? "in ".$circuit->abbr : "" %>:</h4>
./admin/tourns.mhtml:								<% $m->comp("/funclib/tourn_circuits.mas", tourn => $tourn, print_abbr => 1) %>
./admin/tourns.mhtml:								<% $tourn->name %>
./admin/tourns.mhtml:%								foreach my $admin ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => 1)) { 
./admin/tourns.mhtml:									<a class="white nowrap padless" href="mailto:<% $admin->email %>">
./admin/tourns.mhtml:										<span style="text-decoration: none;">
./admin/tourns.mhtml:										<% $admin->first." ".$admin->last %> <br />
./admin/tourns.mhtml:								<% $tourn->location %>
./admin/tourns.mhtml:								<% Tab::shortdate($tourn->start) %>
./admin/tourns.mhtml:								<a class="dkblue button" href="/user/tourn/select.mhtml?tourn_id=<% $tourn->id %>">
./admin/tourns.mhtml:%           				my $warn = "This will delete the tournament ".$tourn->name." utterly.  There is no going back.  Be sure";
./admin/tourns.mhtml:								<a class="dkred padmore" href="tourn_delete.mhtml?tourn_id=<% $tourn->id %>" 
./admin/tourns.mhtml:					<object style="height: 195px; width: 320px"><param name="movie" value="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage&autoplay=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="320" height="195"></object>
./admin/tourns.mhtml:							<% $m->comp("/funclib/tourn_circuits.mas", tourn => $tourn_now, print_abbr => 1) %>
./admin/tourns.mhtml:							<% $tourn_now->name %>
./admin/tourns.mhtml:%							foreach my $admin_now ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn_now, contact => 1)) {
./admin/tourns.mhtml:								<a class="white nowrap padless" href="mailto:<% $admin_now->email %>">
./admin/tourns.mhtml:									<span style="text-decoration: none;">
./admin/tourns.mhtml:									<% $admin_now->first." ".$admin_now->last %> <br />
./admin/tourns.mhtml:							<% $tourn_now->location %>
./admin/tourns.mhtml:							<% Tab::shortdate($tourn_now->start) %>
./admin/tourns.mhtml:							<a class="dkblue button" href="/user/tourn/select.mhtml?tourn_id=<% $tourn_now->id %>">
./admin/circuits.mhtml:			@circuits = Tab::Circuit->search_like( name => "%".$name."%", country => $country, state => $state );
./admin/circuits.mhtml:			push @circuits, Tab::Circuit->search_like( abbr => "%".$name."%", country => $country, state => $state );
./admin/circuits.mhtml:			@circuits = Tab::Circuit->search_like( name => "%".$name."%", country => $country);
./admin/circuits.mhtml:			push @circuits, Tab::Circuit->search_like( abbr => "%".$name."%", country => $country);
./admin/circuits.mhtml:			@circuits = Tab::Circuit->search_like( name => "%".$name."%", state => $state );
./admin/circuits.mhtml:			push @circuits, Tab::Circuit->search_like( abbr => "%".$name."%", state => $state);
./admin/circuits.mhtml:			@circuits = Tab::Circuit->search_like( name => "%".$name."%");
./admin/circuits.mhtml:			push @circuits, Tab::Circuit->search_like( abbr => "%".$name."%");
./admin/circuits.mhtml:		@circuits = Tab::Circuit->search( active => 1, country => $country, state => $state);
./admin/circuits.mhtml:		@circuits = Tab::Circuit->search( active => 1, country => $country);
./admin/circuits.mhtml:		@circuits = Tab::Circuit->search( active => 1, state => $state);
./admin/circuits.mhtml:								<% $circuit->name %>
./admin/circuits.mhtml:								<% $circuit->abbr %>
./admin/circuits.mhtml:								<% scalar $circuit->tourns %>
./admin/circuits.mhtml:								<% $circuit->location %>
./admin/circuits.mhtml:								<a class="dkblue button" href="circuit_edit.mhtml?circuit_id=<% $circuit->id %>">
./admin/circuits.mhtml:					<object style="height: 195px; width: 320px"><param name="movie" value="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="320" height="195"></object>
./admin/tourn_delete.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./admin/tourn_delete.mhtml:	my $msg = "Tournament ".$tourn->name." has been completely and utterly wiped from the face of the earth.  I hope you meant to do that because if you did not, it\'s your funeral.";
./admin/tourn_delete.mhtml:	$tourn->delete;
./admin/tourn_delete.mhtml:	$m->redirect("/user/admin/tourns.mhtml?msg=$msg");
./admin/chapter_circuit_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./admin/chapter_circuit_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./admin/chapter_circuit_add.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./admin/chapter_circuit_add.mhtml:		my $cl = Tab::ChapterCircuit->create({
./admin/chapter_circuit_add.mhtml:			circuit => $circuit->id,
./admin/chapter_circuit_add.mhtml:			chapter => $chapter->id,
./admin/chapter_circuit_add.mhtml:	my $msg = $chapter->name." has been joined to ".$circuit->abbr;
./admin/chapter_circuit_add.mhtml:	$m->redirect("chapter_edit.mhtml?chapter_id=".$chapter->id."&msg=$msg");
./admin/circuit_save.mhtml:		$circuit = Tab::Circuit->retrieve($circuit_id);
./admin/circuit_save.mhtml:		$circuit->name($name);
./admin/circuit_save.mhtml:		$circuit->abbr($abbr);
./admin/circuit_save.mhtml:		$circuit->state($state);
./admin/circuit_save.mhtml:		$circuit->country($country);
./admin/circuit_save.mhtml:		$circuit->active($active);
./admin/circuit_save.mhtml:		$circuit->tz($timezone);
./admin/circuit_save.mhtml:		$circuit->update;
./admin/circuit_save.mhtml:		$circuit = Tab::Circuit->create({
./admin/circuit_save.mhtml:		$circuit_id = $circuit->id;
./admin/circuit_save.mhtml:	$circuit->setting("url", $url);
./admin/circuit_save.mhtml:	$circuit->setting("demographics", $demographics);
./admin/circuit_save.mhtml:	$circuit->setting("full_members", $full_members);
./admin/circuit_save.mhtml:	$circuit->setting("tourn_only", $tourn_only);
./admin/circuit_save.mhtml:	$circuit->setting("track_bids", $track_bids);
./admin/circuit_save.mhtml:	$circuit->setting("regions", $regions);
./admin/circuit_save.mhtml:	$circuit->setting("ncfl", $ncfl);
./admin/circuit_save.mhtml:	$circuit->setting("naudl", $naudl);
./admin/circuit_save.mhtml:	$m->redirect("circuit_edit.mhtml?circuit_id=$circuit_id&msg=$msg");
./admin/chapter_merge.mhtml:	my $target = Tab::Chapter->retrieve($target_id) if $target_id;
./admin/chapter_merge.mhtml:		$name = $target->short_name if $target;
./admin/chapter_merge.mhtml:		@candidates = Tab::Chapter->search_where( name => { "like", "%".$name."%"} );
./admin/chapter_merge.mhtml:		Tab::Tourn->set_sql( last_five => "
./admin/chapter_merge.mhtml:		<h2>Merge Chapter<% $target ? " with ".$target->name : "s"%></h2>
./admin/chapter_merge.mhtml:%			next if $done{$candidate->id}++;
./admin/chapter_merge.mhtml:%			my @circuits = $candidate->circuits;
./admin/chapter_merge.mhtml:%			next if scalar @circuits == 1 && $circuits[0]->id == 3;
./admin/chapter_merge.mhtml:						<% $candidate->id %> - <% $candidate->name %>
./admin/chapter_merge.mhtml:							<% $candidate->state %>/<% $candidate->country %>
./admin/chapter_merge.mhtml:%							foreach my $circuit ($candidate->circuits) {  
./admin/chapter_merge.mhtml:									<% $circuit->abbr %>
./admin/chapter_merge.mhtml:%							foreach my $contact ($candidate->admins) { 
./admin/chapter_merge.mhtml:									<% $contact->email %>
./admin/chapter_merge.mhtml:%							foreach my $tourn (Tab::Tourn->search_last_five($candidate->id)) { 
./admin/chapter_merge.mhtml:									<% $tourn->name %>
./admin/chapter_merge.mhtml:					<label for="prefer_<% $candidate->id %>">
./admin/chapter_merge.mhtml:						<div class="full leftalign <% $target_id == $candidate->id ? "dk" : ""%>green radiomerge hover padless martop" id="div_prefer_<% $candidate->id %>">
./admin/chapter_merge.mhtml:								<input type="radio" class="merge" name="prefer" id="prefer_<% $candidate->id %>" value="<% $candidate->id %>" <% $target_id == $candidate->id ? 'checked="checked"' : ""%>>
./admin/chapter_merge.mhtml:					<label for="<% $candidate->id %>">
./admin/chapter_merge.mhtml:						<div class="full green leftalign hover padless martop" id="div_<% $candidate->id %>">
./admin/chapter_merge.mhtml:								<input type="checkbox" class="merge" name="merge" value="<% $candidate->id %>" id="<% $candidate->id %>">
./admin/chapter_merge.mhtml:					<label for="exclude_<% $candidate->id %>">
./admin/chapter_merge.mhtml:						<div class="full green leftalign hover padless martop" id="div_exclude_<% $candidate->id %>">
./admin/chapter_merge.mhtml:								<input type="checkbox" class="merge" name="exclude_<% $candidate->id %>" id="exclude_<% $candidate->id %>">
./admin/chapter_admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./admin/chapter_admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./admin/chapter_admin_rm.mhtml:	foreach (@ca) {  $_->delete; } 
./admin/chapter_admin_rm.mhtml:	my $msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./admin/chapter_admin_rm.mhtml:	$m->redirect("chapter_edit.mhtml?chapter_id=$chapter_id&msg=$msg");
./admin/autohandler:	unless (  ($person && $person->site_admin) || $r->uri =~ /su_return.mhtml/) { 
./admin/autohandler:		$m->redirect("/user/home.mhtml?err=$msg");
./admin/autohandler:	$m->call_next;
./admin/person_edit.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./admin/person_edit.mhtml:		$m->print("No user was found with that ID");
./admin/person_edit.mhtml:		$m->abort();
./admin/person_edit.mhtml:		<h2>Edit <% $edit->first." ".$edit->last %>'s details</h2>
./admin/person_edit.mhtml:					<input type="hidden" name="edit_id" value="<% $edit->id %>">
./admin/person_edit.mhtml:					<input type="text" name="email" value="<% $edit->email %>" size="25">
./admin/person_edit.mhtml:					<input type="text" name="first" value="<% $edit->first %>" size="25">
./admin/person_edit.mhtml:					<input type="text" name="last" value="<% $edit->last %>" size="25">
./admin/person_edit.mhtml:					<input type="text" name="street" value="<% $edit->street %>" size="25">
./admin/person_edit.mhtml:					<input type="text" name="city" value="<% $edit->city %>" size="25">
./admin/person_edit.mhtml:						<& /funclib/state_select.mas, state => $edit->state &>
./admin/person_edit.mhtml:						<& /funclib/country_select.mas, country => $edit->country &>
./admin/person_edit.mhtml:					<input type="text" name="zip" value="<% sprintf("%05d", $edit->zip) %>" size="25">
./admin/person_edit.mhtml:					<input type="text" name="phone" value="<% $edit->phone %>" size="10">
./admin/person_edit.mhtml:						<& /funclib/cell_domains.mas, provider => $edit->provider &>
./admin/person_edit.mhtml:						<input type="checkbox" id="no_email" value="1" name="no_email" <% ($edit->no_email) ? "checked" : "" %>>
./admin/person_edit.mhtml:						Tabroom Site Admin (God-like powers)
./admin/person_edit.mhtml:						<input type="checkbox"  value="1" id="site_admin" name="site_admin" <% ($edit->site_admin) ? "checked" : "" %>>
./admin/person_edit.mhtml:%			foreach my $login ($edit->logins) { 
./admin/person_edit.mhtml:					<h5 class="nospace button marbottomless padtopless" >Login <% $counter %>: <% $login->username %></h5>
./admin/person_edit.mhtml:						<input type="text" name="<% $login->id %>_username" size="24" value="<% $login->username %>">
./admin/person_edit.mhtml:						<input type="text" size="24" name="<% $login->id %>_ualt" value="<% $login->ualt_id %>">
./admin/person_edit.mhtml:						<input type="text" disabled size="24" value="<% $login->accesses %>">
./admin/person_edit.mhtml:						<input type="text" disabled size="24" value="<% Tab::xmldt($login->last_access) %>">
./admin/person_edit.mhtml:					<a target="_blank" class="dkblue button" href="/user/login/forgot_send.mhtml?username=<% $login->username %>">
./admin/person_save.mhtml:	my $emailok = Email::Valid->address( -address => $email, -mxcheck => 0 ) ? 'yes' : 'no';
./admin/person_save.mhtml:		$m->redirect("person_edit.mhtml?edit_id=$edit_id&err=$err");
./admin/person_save.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./admin/person_save.mhtml:	unless ($email eq $edit->email) { 
./admin/person_save.mhtml:		my @existing_emails = Tab::Person->search( email => $email);
./admin/person_save.mhtml:			my $err = "Email address $email already has an account: ".$existing_emails[0]->first." ".$existing_emails[0]->last;
./admin/person_save.mhtml:			$m->redirect("person_edit.mhtml?edit_id=$edit_id&err=$err");
./admin/person_save.mhtml:		my $taken = Tab::Login->search( username => $email)->first;
./admin/person_save.mhtml:		if ($taken && $taken->person->id != $edit->id) { 
./admin/person_save.mhtml:			$m->redirect("person_edit.mhtml?edit_id=$edit_id&err=$err");
./admin/person_save.mhtml:		my $login = Tab::Login->search( person => $edit->id, username => $edit->email )->first;
./admin/person_save.mhtml:		$login->username($email) if $login;
./admin/person_save.mhtml:		$login->update if $login;
./admin/person_save.mhtml:	foreach my $login ($edit->logins) { 
./admin/person_save.mhtml:		$login->username($ARGS{$login->id."_username"});
./admin/person_save.mhtml:		$login->ualt_id($ARGS{$login->id."_ualt"});
./admin/person_save.mhtml:		$login->update;
./admin/person_save.mhtml:	$edit->first($first);
./admin/person_save.mhtml:	$edit->last($last);
./admin/person_save.mhtml:	$edit->street($street);
./admin/person_save.mhtml:	$edit->city($city);
./admin/person_save.mhtml:	$edit->email($email);
./admin/person_save.mhtml:	$edit->state($state);
./admin/person_save.mhtml:	$edit->country($country);
./admin/person_save.mhtml:	$edit->no_email($no_email);
./admin/person_save.mhtml:	$edit->zip($zip);
./admin/person_save.mhtml:	$edit->site_admin($site_admin);
./admin/person_save.mhtml:	$edit->phone($phone);
./admin/person_save.mhtml:	$edit->provider($provider);
./admin/person_save.mhtml:	$edit->update;
./admin/person_save.mhtml:	$m->redirect("person_edit.mhtml?edit_id=$edit_id&msg=$msg");
./admin/su.mhtml:	my $become = Tab::Person->retrieve($su_id);
./admin/su.mhtml:	$m->abort unless $become && $become->id;
./admin/su.mhtml:	my $log = $person->first." ".$person->last." has become ".$become->first." ".$become->last;
./admin/su.mhtml:	$session->su($person->id);
./admin/su.mhtml:	$session->person($become->id);
./admin/su.mhtml:	$session->update;
./admin/su.mhtml:	my $msg = "Presto!  You are become ".$become->first." ".$become->last.".  Use the Return to Self link above to undo it";
./admin/su.mhtml:	$m->redirect("/user/home.mhtml?msg=$msg");
./admin/about_save.mhtml:	my $webpage = Tab::Webpage->search( sitewide => 1 )->first;
./admin/about_save.mhtml:	my $now = DateTime->now;
./admin/about_save.mhtml:	$webpage->content($content);
./admin/about_save.mhtml:	$webpage->title($title);
./admin/about_save.mhtml:	$webpage->last_editor($person);
./admin/about_save.mhtml:	$webpage->update;
./admin/about_save.mhtml:	$m->redirect("about.mhtml?msg=$msg");
./admin/chapter_circuit_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_circuit_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id); 
./admin/chapter_circuit_rm.mhtml:	my @cc = Tab::ChapterCircuit->search( circuit => $circuit_id, chapter => $chapter->id);
./admin/chapter_circuit_rm.mhtml:	foreach (@cc) {  $_->delete; } 
./admin/chapter_circuit_rm.mhtml:	my $msg = $chapter->name." was removed from the circuit ".$circuit->name;
./admin/chapter_circuit_rm.mhtml:	$m->redirect("chapter_edit.mhtml?chapter_id=$chapter_id&msg=$msg");
./admin/chapter_merge_save.mhtml:	Tab::Entry->set_sql(school_merge => " update entry set school = ? where school = ? ");
./admin/chapter_merge_save.mhtml:	Tab::Judge->set_sql(school_merge => " update judge set school = ? where school = ? ");
./admin/chapter_merge_save.mhtml:	Tab::Strike->set_sql(school_merge => " update strike set school = ? where school = ? ");
./admin/chapter_merge_save.mhtml:	Tab::SchoolFine->set_sql(school_merge => " update school_fine set school = ? where school = ? ");
./admin/chapter_merge_save.mhtml:	Tab::ChapterJudge->set_sql(name_judge_merge => "
./admin/chapter_merge_save.mhtml:	my @candidates = Tab::Chapter->search_where( name => { "like", "%".$name."%"} );
./admin/chapter_merge_save.mhtml:	push @candidates, Tab::Chapter->retrieve($target_id) if $target_id;
./admin/chapter_merge_save.mhtml:	@merge_me = grep { ! $seen{$_->id}++ } @merge_me;
./admin/chapter_merge_save.mhtml:	@merge_me = grep { $_->id ne $prefer->id } @merge_me;
./admin/chapter_merge_save.mhtml:	my %admins = map {$_->id => $_} $prefer->admins;
./admin/chapter_merge_save.mhtml:	my %circuits = map {$_->id => $_} $prefer->circuits;
./admin/chapter_merge_save.mhtml:	my %tourns = map {$_->tourn->id => $_} $prefer->schools;
./admin/chapter_merge_save.mhtml:	if ($ARGS{"exclude_".$prefer->id}) { 
./admin/chapter_merge_save.mhtml:		foreach my $ca ($prefer->permissions) { 
./admin/chapter_merge_save.mhtml:			$ca->delete;
./admin/chapter_merge_save.mhtml:		my $exclude = $ARGS{"exclude_".$merge_me->id};
./admin/chapter_merge_save.mhtml:			foreach my $ca ($merge_me->permissions) { 
./admin/chapter_merge_save.mhtml:				if ($admins{$ca->person->id}) { 
./admin/chapter_merge_save.mhtml:					$ca->delete;
./admin/chapter_merge_save.mhtml:					$admins{$ca->person->id}++;
./admin/chapter_merge_save.mhtml:					$ca->chapter($prefer->id);
./admin/chapter_merge_save.mhtml:					$ca->update;
./admin/chapter_merge_save.mhtml:			foreach my $ca ($merge_me->permissions) { 
./admin/chapter_merge_save.mhtml:				$ca->delete;
./admin/chapter_merge_save.mhtml:		foreach my $cc ($merge_me->chapter_circuits) { 
./admin/chapter_merge_save.mhtml:			if ($circuits{$cc->circuit->id}) { 
./admin/chapter_merge_save.mhtml:				$cc->delete;
./admin/chapter_merge_save.mhtml:					$cc->chapter($prefer->id);
./admin/chapter_merge_save.mhtml:					$cc->update;
./admin/chapter_merge_save.mhtml:		my @others = $merge_me->schools;
./admin/chapter_merge_save.mhtml:		foreach my $school ($merge_me->schools) { 
./admin/chapter_merge_save.mhtml:			if ($tourns{$school->tourn->id}) { 
./admin/chapter_merge_save.mhtml:				my $school_dest = $tourns{$school->tourn->id};
./admin/chapter_merge_save.mhtml:				Tab::Entry->sql_school_merge($school_dest->id, $school->id);
./admin/chapter_merge_save.mhtml:				Tab::Judge->sql_school_merge($school_dest->id, $school->id);
./admin/chapter_merge_save.mhtml:				Tab::Strike->sql_school_merge($school_dest->id, $school->id);
./admin/chapter_merge_save.mhtml:				Tab::SchoolFine->sql_school_merge($school_dest->id, $school->id);
./admin/chapter_merge_save.mhtml:				$school->delete;
./admin/chapter_merge_save.mhtml:				$school->chapter($prefer->id);
./admin/chapter_merge_save.mhtml:				$school->update;
./admin/chapter_merge_save.mhtml:		foreach my $student ($merge_me->students) { 
./admin/chapter_merge_save.mhtml:			$student->chapter($prefer->id);
./admin/chapter_merge_save.mhtml:			$student->update;
./admin/chapter_merge_save.mhtml:		foreach my $chapter_judge ($merge_me->chapter_judges) { 
./admin/chapter_merge_save.mhtml:			$chapter_judge->chapter($prefer->id);
./admin/chapter_merge_save.mhtml:			$chapter_judge->update;
./admin/chapter_merge_save.mhtml:		$merge_string .= " ID ".$merge_me->id." ".$merge_me->name;
./admin/chapter_merge_save.mhtml:		Tab::ChapterJudge->sql_name_judge_merge->execute($prefer->id);
./admin/chapter_merge_save.mhtml:		$merge_me->delete;
./admin/chapter_merge_save.mhtml:	foreach my $student ($prefer->students) { 
./admin/chapter_merge_save.mhtml:		push @{$students_by_name{$student->first."-".$student->last}}, $student;
./admin/chapter_merge_save.mhtml:			$m->comp("/funclib/student_merge.mas", person => $person, mergee => $mergee, destination => $destination, check_grad => 1);
./admin/chapter_merge_save.mhtml:	foreach my $judge ($prefer->chapter_judges) { 
./admin/chapter_merge_save.mhtml:		push @{$judges_by_name{$judge->first."-".$judge->last}}, $judge;
./admin/chapter_merge_save.mhtml:			$m->comp("/funclib/chapter_judge_merge.mas", person => $person, mergee => $mergee, destination => $destination);
./admin/chapter_merge_save.mhtml:	my $msg .= "School ".$prefer->name." has merged $merge_string into $prefer ".$prefer->name;
./admin/chapter_merge_save.mhtml:	$m->redirect("chapter_merge.mhtml?target_id=$target_id&name=$name&msg=$msg");
./admin/chapter_admins.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_admins.mhtml:	foreach my $permission ($chapter->permissions) { 
./admin/chapter_admins.mhtml:		$permission->tag("prefs") if $ARGS{$permission->id."_access_level"} eq "prefs";
./admin/chapter_admins.mhtml:		$permission->tag("chapter") if $ARGS{$permission->id."_access_level"} eq "chapter";
./admin/chapter_admins.mhtml:		$permission->update;
./admin/chapter_admins.mhtml:		$email =~tr/[A-Z]/[a-z]/;
./admin/chapter_admins.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./admin/chapter_admins.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $person, tag => "chapter" });
./admin/chapter_admins.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $person, tag => "prefs" });
./admin/chapter_admins.mhtml:						$ap->delete;
./admin/chapter_admins.mhtml:						$ac->delete;
./admin/chapter_admins.mhtml:						$already->tag("prefs");
./admin/chapter_admins.mhtml:						$already->update;
./admin/chapter_admins.mhtml:						$ac->delete;
./admin/chapter_admins.mhtml:						$ap->delete;
./admin/chapter_admins.mhtml:						$already->tag("chapter");
./admin/chapter_admins.mhtml:						$already->update;
./admin/chapter_admins.mhtml:				$already = Tab::Permission->create({
./admin/chapter_admins.mhtml:					person => $admin->id,
./admin/chapter_admins.mhtml:			$msg .= $admin->first." ".$admin->last." has been given full access to ". $chapter->name if $access_level eq "chapter"; 	
./admin/chapter_admins.mhtml:			$msg .= $admin->first." ".$admin->last." has been given pref sheet access to ". $chapter->name if $access_level eq "prefs";	
./admin/chapter_admins.mhtml:	$m->redirect("chapter_edit.mhtml?chapter_id=$chapter_id&msg=$msg&err=$err");
./admin/about.mhtml:	my $webpage = Tab::Webpage->search( sitewide => 1)->first;
./admin/about.mhtml:				<input type="text" name="title" size="50" value="<% ($webpage) ? $webpage->title : "" %>">
./admin/about.mhtml:			<th style="vertical-align: top; padding-top: 10px;"> 
./admin/about.mhtml:				<textarea name="content" rows="30" cols="65"><% ($webpage) ? $webpage->content : "" %></textarea>
./admin/chapters.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./admin/chapters.mhtml:			Tab::Chapter->set_sql( chapter_name => "
./admin/chapters.mhtml:			@chapters = Tab::Chapter->search_chapter_name($circuit_id, "%".$name."%");
./admin/chapters.mhtml:			@chapters = Tab::Chapter->search_like( name => "%".$name."%", {order_by => 'name'});
./admin/chapters.mhtml:			$circuit->chapters;
./admin/chapters.mhtml:%						foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->retrieve_all) {
./admin/chapters.mhtml:							<option value="<% $circuit->id%>" <% $circuit->id == $circuit_id ? "selected" : "" %>>
./admin/chapters.mhtml:								<% $circuit->name %>
./admin/chapters.mhtml:			<h4>Schools <% $name ? "matching \"".$name."\"" : ""  %> <% $circuit ? "in ".$circuit->abbr : "" %>:</h4>
./admin/chapters.mhtml:%								foreach my $circuit ($chapter->circuits) { 
./admin/chapters.mhtml:									<% $circuit->abbr %>
./admin/chapters.mhtml:								<% $chapter->name %>
./admin/chapters.mhtml:%								foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, contact => 1)) { 
./admin/chapters.mhtml:									<a class="nowrap white marless padless" href="mailto:<% $admin->email %>" title="<% $admin->email %>">
./admin/chapters.mhtml:										<% $admin->first." ".$admin->last %> 
./admin/chapters.mhtml:								<% $chapter->state ? $chapter->state."/" : "" %><% $chapter->country %>
./admin/chapters.mhtml:								<a class="dkblue button" href="chapter_edit.mhtml?chapter_id=<% $chapter->id %>">
./admin/chapters.mhtml:%							if ($person->site_admin) { 
./admin/chapters.mhtml:									<a class="dkgreen button" href="chapter_roster.mhtml?chapter_id=<% $chapter->id %>">
./admin/chapters.mhtml:								<a class="dkred button" href="chapter_merge.mhtml?target_id=<% $chapter->id %>">
./admin/chapters.mhtml:					<object style="height: 195px; width: 320px"><param name="movie" value="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage&autoplay=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/1ytCEuuW2_A?version=3&feature=player_detailpage" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="320" height="195"></object>
./admin/judge_merge.mas:	Tab::ChapterJudge->set_sql( switch_judges => "
./admin/judge_merge.mas:	Tab::ChapterJudge->sql_switch_judges->execute;
./admin/judge_merge.mas:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./admin/judge_merge.mas:	$chapter_judge->delete;
./admin/calendar_switch.mhtml:	my $calendar = Tab::Calendar->retrieve($calendar_id);
./admin/calendar_switch.mhtml:		$calendar->hidden($inactive);
./admin/calendar_switch.mhtml:		$calendar->update;
./admin/menu.mas:		<h4>God-like powers</h4>
./admin/menu.mas:			<a class="yellow full" href="/user/home.mhtml" style="margin-top: 8px;">
./lib/login_block.mas:						<a href="<% $Tab::url_prefix %>/user/home.mhtml"><% $person->first." ".$person->last %></a>
./lib/login_block.mas:					<th colspan="3" align="right" style="padding-top: 10px;">
./lib/login_block.mas:					<th colspan="3" align="right" style="padding-top: 10px;">
./lib/person_required.mas:		$m->redirect("$Tab::url_prefix/user/login.mhtml");
./circuit/cooke_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/cooke_save.mhtml:	foreach my $diocese ($circuit->regions) {
./circuit/cooke_save.mhtml:		$diocese->cooke_pts($ARGS{$diocese->id});
./circuit/cooke_save.mhtml:		$diocese->update;
./circuit/cooke_save.mhtml:	$m->redirect("cooke_points.mhtml?circuit_id=$circuit_id&msg=$msg");
./circuit/result_fix_launch.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/result_fix_launch.mhtml:	my @weight = Tab::TournSetting->search( tourn => $tourn_id, tag => 'weight');
./circuit/result_fix_launch.mhtml:	$tournweight = $dummy->value;
./circuit/result_fix_launch.mhtml:	<h2>fix tournament results for <% $tourn->name %></h2>
./circuit/result_fix_launch.mhtml:		<li><h4><a href="chapter_by_tourn.mhtml?circuit_id=<% $circuit_id %>&tourn_id=<% $tourn_id %>">Alter a final result</a></h4></li>DESCRIPTION:  Rounds and ballots may be stored in the database, but a RESULT is final outcome that is generated on the basis of the ballot scores and permanently stored in the database (not just calculated in real time).  Examples include speaker awards, final prelim seeds, final tournament finish, etc.  To have these results automatically re-calculated, go to the directors page and click Reults->Web Publish.  To edit individual outcomes, click this link.
./circuit/result_fix_launch.mhtml:%			my @events = Tab::Event->search( tourn => $tourn_id);
./circuit/result_fix_launch.mhtml:<a href="edit_final_rank.mhtml?circuit_id=<% $circuit_id %>&tourn_id=<% $tourn_id %>&entrytype=ShowEntries&event_id=<% $event->id %>"><% $event->name %></a> 
./circuit/result_fix_launch.mhtml:		<li><h4>Recalculate WUDC scores</a></h4></li>DESCRIPTION:  WUDC points are calculated on the basis of final ranks and tournament weights.  This function will delete all existing WUDC points and re-calculate them based on the weight you enter in the box below.  Before this function will work you must have the final ranks set; this is done by creating the "Final Places" result (go to directors page and click Reults->Web Publish).  You can manually edit the final ranks using the function listed immediatley above.  
./circuit/result_fix_launch.mhtml:			Tourney Weight (1-10):<input type="text" size="2" name="weight" value="<% $tournweight %>"> 
./circuit/approve.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/approve.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/approve.mhtml:	my @admin_circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./circuit/approve.mhtml:	my %permissions = map {$_->id => 1} @admin_circuits;
./circuit/approve.mhtml:	unless ($person->site_admin || $permissions{$circuit_id})  { 
./circuit/approve.mhtml:		$m->print("<h2>Shenanigans!</h2> <p>I call shenanigans.  You do not have permissions to approve tournaments in that circuit.</p>");
./circuit/approve.mhtml:		$m->abort;
./circuit/approve.mhtml:	foreach my $tc (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->id)) { 
./circuit/approve.mhtml:		$tc->approved(1);
./circuit/approve.mhtml:		$tc->update;
./circuit/approve.mhtml:	my $msg = "Tournament ".$tourn->name." has been approved.";
./circuit/approve.mhtml:	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);
./circuit/approve.mhtml:	$m->redirect("approvals.mhtml?circuit_id=".$circuit_id."&msg=".$msg) if $circuit_id;
./circuit/approve.mhtml:	$m->redirect("approvals.mhtml?msg=".$msg) if $person->site_admin;
./circuit/chapter_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./circuit/chapter_save.mhtml:		$chapter->name($name);
./circuit/chapter_save.mhtml:		$chapter->state($state);
./circuit/chapter_save.mhtml:		$chapter->country($country);
./circuit/chapter_save.mhtml:		$chapter->coaches($coaches);
./circuit/chapter_save.mhtml:		$chapter->update;	
./circuit/chapter_save.mhtml:	$m->redirect("chapter_edit.mhtml?chapter_id=".$chapter->id."&circuit_id=".$circuit->id);
./circuit/admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/admin_add.mhtml:	my $person = Tab::Person->search( email => $email)->first;
./circuit/admin_add.mhtml:        $m->redirect("index.mhtml?err=$err&circuit_id=$circuit_id");
./circuit/admin_add.mhtml:	my @existing = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id );
./circuit/admin_add.mhtml:	foreach (@existing) { $_->delete; }
./circuit/admin_add.mhtml:	my $circuit_admin = Tab::Permission->create({
./circuit/admin_add.mhtml:		person => $person->id,
./circuit/admin_add.mhtml:	my $msg = $person->first." ".$person->last." is now an administrator for ".$circuit->abbr;
./circuit/admin_add.mhtml:	$m->redirect("index.mhtml?msg=$msg&circuit_id=$circuit_id");
./circuit/report.mhtml:	$m->redirect("/user/admin/naudl/".$form."?startdate=$startdate&enddate=$enddate&circuit_id=$circuit_id");
./circuit/codes.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/codes.mhtml:	$m->abort() unless $circuit;
./circuit/codes.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/codes.mhtml:%					next if $used{$chapter->id};
./circuit/codes.mhtml:%					$used{$chapter->id}++;
./circuit/codes.mhtml:							<% $chapter->name %>
./circuit/codes.mhtml:							<input type="text" size="10" maxlength="10" name="<% $chapter->id %>" value="<% $chapter->code %>">
./circuit/region_admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_admin_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./circuit/region_admin_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./circuit/region_admin_add.mhtml:	my $already = Tab::Permission->search( tag => "region", region => $region->id, person => $person->id ) if $person;
./circuit/region_admin_add.mhtml:			my $admin = Tab::Permission->create({
./circuit/region_admin_add.mhtml:				person => $person->id,
./circuit/region_admin_add.mhtml:				region  => $region->id,
./circuit/region_admin_add.mhtml:			$msg = "Account ".$person->email." has been granted access to ".$region->name;
./circuit/region_admin_add.mhtml:	$m->redirect("region_admin.mhtml?region_id=".$region->id."&circuit_id=".$circuit->id."&msg=$msg");
./circuit/chapter_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_edit.mhtml:	$m->abort unless $chapter;
./circuit/chapter_edit.mhtml:		<h2><% $chapter->name %></h2>
./circuit/chapter_edit.mhtml:					<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./circuit/chapter_edit.mhtml:					<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/chapter_edit.mhtml:					<input type="text" name="name" size="42" value="<% $chapter->name %>">
./circuit/chapter_edit.mhtml:						<& /funclib/country_select.mas, country => $chapter->country &>
./circuit/chapter_edit.mhtml:						<& /funclib/state_select.mas, state => $chapter->state &>
./circuit/chapter_edit.mhtml:					<input type="text" name="coaches" size="42" value="<% $chapter->coaches %>">
./circuit/chapter_edit.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./circuit/chapter_edit.mhtml:		<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/chapter_edit.mhtml:%		foreach my $coach ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter)) {
./circuit/chapter_edit.mhtml:					<% $coach->first." ".$coach->last %>
./circuit/chapter_edit.mhtml:    	        <span class="quarter nowrap" title="<% $coach->email %>">
./circuit/chapter_edit.mhtml:					<a class="white" href="mailto:<% $coach->email %>">
./circuit/chapter_edit.mhtml:               			<% $coach->email %>
./circuit/chapter_edit.mhtml:					<select name="<% $coach->id %>_access_level" class="fixedsmall">
./circuit/chapter_edit.mhtml:						<option value="chapter" <% $coach->prefs eq "chapter" ? 'selected="selected"' : "" %>> Full Access </option>
./circuit/chapter_edit.mhtml:						<option value="prefs" <% $coach->prefs eq "prefs" ? 'selected="selected"' : "" %>> Pref Sheets Only </option>
./circuit/chapter_edit.mhtml:					<a class="dkred button" href="chapter_admin_rm.mhtml?coach_id=<% $coach->id%>&chapter_id=<% $chapter->id%>&circuit_id=<% $circuit->id %>">	
./circuit/join.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/join.mhtml:	$m->comp("/user/chapter/auth.mas", chapter => $chapter, session => $session, person => $person);
./circuit/join.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/join.mhtml:	my $cl = Tab::ChapterCircuit->create({
./circuit/join.mhtml:	my $err = "Choose a region " if $tourn->setting("regions");
./circuit/join.mhtml:	$err .= "Choose a membership class " if $circuit->memberships;
./circuit/join.mhtml:	$m->redirect("/user/chapter/chapter_circuit.mhtml?chapter_id=$chapter_id&circuit_id=$circuit_id&err=$err") if $err;
./circuit/join.mhtml:	$err = "You may now register for tournaments in the ".$circuit->name;
./circuit/join.mhtml:	$m->redirect("/user/home.mhtml?chapter_id=$chapter_id&err=$err");
./circuit/access_rm.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/access_rm.mhtml:	$m->abort unless $tourn && $circuit;
./circuit/access_rm.mhtml:	my $admin = Tab::Person->retrieve($admin_id);
./circuit/access_rm.mhtml:	my @access = Tab::Permission->search( tourn => $tourn->id, person => $admin->id);
./circuit/access_rm.mhtml:	my @owners = Tab::Permission->search( tourn => $tourn->id, tag => "owner");
./circuit/access_rm.mhtml:	my @contacts = Tab::Permission->search( tourn => $tourn->id, tag => "contact");
./circuit/access_rm.mhtml:		if ($access->tag eq "owner" && scalar @owners == 1) { 
./circuit/access_rm.mhtml:			$err .= "You may not delete the last ".$access->tag." from the tournament.  There must be at least one.<br />";
./circuit/access_rm.mhtml:		if ($access->tag eq "contact" && scalar @contacts == 1) {
./circuit/access_rm.mhtml:			$err .= "You may not delete the last ".$access->tag." from the tournament.  There must be at least one.<br />";
./circuit/access_rm.mhtml:		$msg .= $admin->first." ".$admin->last."'s ".$access->tag." access to ".$tourn->name." has been revoked by ".$person->email;
./circuit/access_rm.mhtml:		$access->delete; 
./circuit/access_rm.mhtml:	$m->comp("/funclib/update_calendar.mas", tourn => $tourn);
./circuit/access_rm.mhtml:	$m->redirect("access.mhtml?circuit_id=".$circuit->id."&tourn_id=$tourn_id&msg=$msg&err=$err");
./circuit/admin_rm.mhtml:	my @admins = Tab::Permission->search ( tag => 'circuit', person => $admin_id, circuit => $circuit_id);
./circuit/admin_rm.mhtml:		$msg .= $admin->person->first." ".$admin->person->last." has been removed from that circuit" if $admin->person;
./circuit/admin_rm.mhtml:		$admin->delete;
./circuit/admin_rm.mhtml:	$m->redirect("index.mhtml?msg=$msg&circuit_id=$circuit_id");
./circuit/regions.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/regions.mhtml:	my $naudl++ if $circuit->setting("naudl");
./circuit/regions.mhtml:		<h2><% $circuit->abbr %> <% $naudl ? "Leagues" : "Regions" %></h2>
./circuit/regions.mhtml:			<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/regions.mhtml:%			foreach my $region (sort {$a->name cmp $b->name} $circuit->regions) {
./circuit/regions.mhtml:						<input type="text" class="notfirst" name="name_<% $region->id %>" size="32" value="<% $region->name %>">
./circuit/regions.mhtml:						<span class="hidden"><% length($region->code) %><% $region->code %></span>
./circuit/regions.mhtml:						<input type="text" class="notfirst" name="code_<% $region->id %>" size="12" value="<% $region->code %>">
./circuit/regions.mhtml:						<% scalar $region->chapters %>
./circuit/regions.mhtml:%						foreach my $admin ($region->admins) { 
./circuit/regions.mhtml:							<a href="region_admin.mhtml?region_id=<% $region->id %>&circuit_id=<% $circuit->id %>" class="white button padless">
./circuit/regions.mhtml:								<% $admin->first." ".$admin->last." (".$admin->email.")" %>
./circuit/regions.mhtml:%						unless ($region->admins) { 
./circuit/regions.mhtml:							<a href="region_admin.mhtml?region_id=<% $region->id %>&circuit_id=<% $circuit->id %>" class="dkred button padless">
./circuit/regions.mhtml:			<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/email_view.mhtml:	my $email = Tab::Email->retrieve($email_id);
./circuit/email_view.mhtml:	my $year = $email->sent_at->year;
./circuit/email_view.mhtml:	$year-- if $email->sent_at->month < 7;
./circuit/email_view.mhtml:				<% $email->subject %>
./circuit/email_view.mhtml:				<% $email->sender->first." ".$email->sender->last %>
./circuit/email_view.mhtml:				<% $email->sent_to ? $email->sent_to : "Everyone" %>
./circuit/email_view.mhtml:%			my $tz = $email->tourn->tz if $email->tourn;
./circuit/email_view.mhtml:%			my $sent = $email->sent_at;
./circuit/email_view.mhtml:				<% Tab::nicedt($sent->set_time_zone($tz)) %>
./circuit/email_view.mhtml:				(<% $sent->time_zone->short_name_for_datetime($sent) %>)
./circuit/email_view.mhtml:				<% $email->content %>
./circuit/contacts.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/contacts.mhtml:	my $name = $circuit->name;
./circuit/contacts.mhtml:	my $filename = $name."-contacts-".$session->id.".csv";
./circuit/contacts.mhtml:	my $garbage = `rm -f $filepath`;
./circuit/contacts.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/contacts.mhtml:		$member = "Y" if $chapter->member;
./circuit/contacts.mhtml:		foreach my $admin ($chapter->admins) { 
./circuit/contacts.mhtml:			print CSVOUT "\"".$chapter->name."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$chapter->code."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$chapter->state."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->first."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->last."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->email."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->phone."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->street."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".uc($admin->state)."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->zip."\",";
./circuit/contacts.mhtml:			print CSVOUT "\"".$admin->country."\"\r\n";
./circuit/contacts.mhtml:	$m->redirect("/tmp/$filename");
./circuit/approvals.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/approvals.mhtml:	my @approvals = $m->comp("/funclib/circuit_tourns.mas", approval => 1, circuit => $circuit);
./circuit/approvals.mhtml:	my $school_year = Tab->school_year;
./circuit/approvals.mhtml:		<h2><% $circuit->abbr %> Tournaments Pending Approval</h2>
./circuit/approvals.mhtml:%			foreach my $tourn (sort {$a->start->epoch <=> $b->start->epoch} @approvals ) { 
./circuit/approvals.mhtml:%				my $tz = $tourn->tz;
./circuit/approvals.mhtml:						<a class="white" href="/index/tourn/index.mhtml?tourn_id=<% $tourn->id %>">
./circuit/approvals.mhtml:							<% $tourn->name %>
./circuit/approvals.mhtml:						<% $tourn->start ? Tab::niceshortdate($tourn->start->set_time_zone($tz)) : "" %>
./circuit/approvals.mhtml:						<% ($tourn->start->mdy('') == $tourn->end->mdy('')) ? "" : "-".Tab::niceshortdate($tourn->end->set_time_zone($tz)) %>
./circuit/approvals.mhtml:%						foreach my $director ($tourn->admins) { 
./circuit/approvals.mhtml:%							next if $already{$director->id}++;
./circuit/approvals.mhtml:							<a href="mailto:<% $director->email %>" class="plain full padless marno hover">
./circuit/approvals.mhtml:								<span class="twofifths nowrap" title="<% $director->first." ".$director->last %>">
./circuit/approvals.mhtml:									<% $director->first." ".$director->last %> 
./circuit/approvals.mhtml:									<% $director->email %>
./circuit/approvals.mhtml:						<a class="dkgreen button full" href="approve.mhtml?tourn_id=<% $tourn->id %>&circuit_id=<% $circuit_id %>">
./circuit/approvals.mhtml:						<a class="dkblue button full marbottommore" href="/user/circuit/access.mhtml?tourn_id=<% $tourn->id %>&circuit_id=<% $circuit->id %>">
./circuit/approvals.mhtml:%						my $warn = "This will remove the tournament from your circuit. Are you sure you want to so banish ".$tourn->name."?";
./circuit/approvals.mhtml:						<a class="dkred button full martopmore" href="deny.mhtml?circuit_id=<% $circuit_id %>&tourn_id=<% $tourn->id %>"
./circuit/deny.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/deny.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/deny.mhtml:	my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./circuit/deny.mhtml:	unless ($person->site_admin || (grep $_->id == $circuit_id, @circuits)) {
./circuit/deny.mhtml:		$m->print("<h2>Shenanigans!</h2> <p>I call shenanigans.  You do not have permissions to deny approval to that tournament.  Stop trying.</p>");
./circuit/deny.mhtml:		$m->abort;
./circuit/deny.mhtml:	foreach my $tc (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->id)) { 
./circuit/deny.mhtml:		$tc->delete;
./circuit/deny.mhtml:	my $msg = "Tournament ".$tourn->name." has been removed from your circuit's calendar.";
./circuit/deny.mhtml:	$m->redirect("tourns.mhtml?circuit_id=".$circuit_id."&msg=".$msg) if $circuit_id && $from eq "tourns";
./circuit/deny.mhtml:	$m->redirect("approvals.mhtml?circuit_id=".$circuit_id."&msg=".$msg) if $circuit_id;
./circuit/deny.mhtml:	$m->redirect("approvals.mhtml?msg=".$msg) if $person->site_admin;
./circuit/access.mhtml:	$m->abort unless $tourn_id;
./circuit/access.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/access.mhtml:	my %tourn_circuits = map {$_->id => 1} $tourn->circuits;
./circuit/access.mhtml:	$m->abort unless $tourn_circuits{$circuit->id};
./circuit/access.mhtml:	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;
./circuit/access.mhtml:		my @perms = Tab::Permission->search( tourn => $tourn->id, person => $admin );
./circuit/access.mhtml:			$admin_perms{$admin}{$perm->tag} = $perm;
./circuit/access.mhtml:			if ($perm->tag eq "event_tabbing") { 
./circuit/access.mhtml:				push @{$admin_perms{$admin}{"events"}}, $perm->event;
./circuit/access.mhtml:				$admin_perms{$admin}{$perm->event}++;
./circuit/access.mhtml:	@admins = sort {$admin_perms{$b->id}{"entry_only"} <=> $admin_perms{$a->id}{"entry_only"}} @admins;
./circuit/access.mhtml:	@admins = sort {$admin_perms{$b->id}{"limited"} <=> $admin_perms{$a->id}{"limited"}} @admins;
./circuit/access.mhtml:	@admins = sort {$admin_perms{$b->id}{"full_admin"} <=> $admin_perms{$a->id}{"full_admin"}} @admins;
./circuit/access.mhtml:	@admins = sort {$admin_perms{$b->id}{"owner"} <=> $admin_perms{$a->id}{"owner"}} @admins;
./circuit/access.mhtml:	@admins = sort {$admin_perms{$b->id}{"contact"} <=> $admin_perms{$a->id}{"contact"}} @admins;
./circuit/access.mhtml:		<h2><% $tourn->name %></h2>
./circuit/access.mhtml:		<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./circuit/access.mhtml:		<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/access.mhtml:						<td title="<% $admin->email %>">
./circuit/access.mhtml:							<% $admin->first." ".$admin->last %>
./circuit/access.mhtml:						<label for="<% $admin->id %>_contact">
./circuit/access.mhtml:									<% $admin_perms{$admin->id}{"contact"} ? '1' : "" %>
./circuit/access.mhtml:								<input type="checkbox" name="<% $admin->id %>_contact" value="1" id="<% $admin->id %>_contact"
./circuit/access.mhtml:								<% $admin_perms{$admin->id}{"contact"} ? 'checked="checked"' : "" %>>
./circuit/access.mhtml:							<span class="hidden">  <!-- for sorting -->
./circuit/access.mhtml:								<% $admin_perms{$admin->id}{"owner"} ? '1' : "" %>
./circuit/access.mhtml:								<% $admin_perms{$admin->id}{"full_admin"} ? '2' : "" %>
./circuit/access.mhtml:								<% $admin_perms{$admin->id}{"limited"} ? '3' : "" %>
./circuit/access.mhtml:								<% $admin_perms{$admin->id}{"entry_only"} ? '4' : "" %>
./circuit/access.mhtml:							<label for="<% $admin->id %>_owner">
./circuit/access.mhtml:									id="<% $admin->id %>_ownerbox" 
./circuit/access.mhtml:									class="quarter hover leveler_<% $admin->id %> <% $admin_perms{$admin->id}{"owner"} ? 'green' : "" %>">
./circuit/access.mhtml:									Owner <input type="radio" id="<% $admin->id %>_owner" name="<% $admin->id %>_level" value="owner" 
./circuit/access.mhtml:									<% $admin_perms{$admin->id}{"owner"} ? 'checked="checked"' : "" %>
./circuit/access.mhtml:									onclick="hideLimits(<% $admin->id %>, this, 'owner')" >
./circuit/access.mhtml:							<label for="<% $admin->id %>_full_admin">
./circuit/access.mhtml:									id="<% $admin->id %>_full_adminbox" 
./circuit/access.mhtml:									class="quarter  hover leveler_<% $admin->id %> <% $admin_perms{$admin->id}{"full_admin"} ? 'green' : "" %>">
./circuit/access.mhtml:									Admin <input type="radio" id="<% $admin->id %>_full_admin" name="<% $admin->id %>_level" value="full_admin"
./circuit/access.mhtml:									<% $admin_perms{$admin->id}{"full_admin"} ? 'checked="checked"' : "" %>
./circuit/access.mhtml:									onclick="hideLimits(<% $admin->id %>, this, 'full_admin')" >
./circuit/access.mhtml:							<label for="<% $admin->id %>_limited">
./circuit/access.mhtml:									id="<% $admin->id %>_limitedbox"
./circuit/access.mhtml:									class="quarter  hover leveler_<% $admin->id %> <% $admin_perms{$admin->id}{"limited"} ? 'green' : "" %>">
./circuit/access.mhtml:									Limited <input type="radio" id="<% $admin->id %>_limited" name="<% $admin->id %>_level" value="limited" 
./circuit/access.mhtml:										<% $admin_perms{$admin->id}{"limited"} ? 'checked="checked"' : "" %>
./circuit/access.mhtml:										onclick="showLimits(<% $admin->id %>, this, 'limited')">
./circuit/access.mhtml:							<label for="<% $admin->id %>_entry_only">
./circuit/access.mhtml:									id="<% $admin->id %>_entry_onlybox"
./circuit/access.mhtml:									class="quarter  hover leveler_<% $admin->id %> nowrap <% $admin_perms{$admin->id}{"entry_only"} ? 'green' : "" %>">
./circuit/access.mhtml:									Entry Only <input type="radio" id="<% $admin->id %>_entry_only" name="<% $admin->id %>_level" value="entry_only" 
./circuit/access.mhtml:									<% $admin_perms{$admin->id}{"entry_only"} ? 'checked="checked"' : "" %>
./circuit/access.mhtml:									onclick="hideLimits(<% $admin->id %>, this, 'entry_only')" >
./circuit/access.mhtml:							<div class="bordertop nospace smallish" id="<% $admin->id %>" style="<% $admin_perms{$admin->id}{"limited"} ? "" : 'display: none;' %>">
./circuit/access.mhtml:								<label for="<% $admin->id %>_registration">
./circuit/access.mhtml:											<input type="checkbox" name="<% $admin->id %>_registration" value="1" id="<% $admin->id %>_registration" 
./circuit/access.mhtml:											<% $admin_perms{$admin->id}{"registration"} ? 'checked="checked"' : "" %>>
./circuit/access.mhtml:								<label for="<% $admin->id %>_tabbing">
./circuit/access.mhtml:										Tabbing <input type="checkbox" name="<% $admin->id %>_tabbing" value="1" id="<% $admin->id %>_tabbing"
./circuit/access.mhtml:										<% $admin_perms{$admin->id}{"tabbing"} ? 'checked="checked"' : "" %>> 
./circuit/access.mhtml:								<label for="<% $admin->id %>_category_tabbing">
./circuit/access.mhtml:										Some Events <input type="checkbox" name="<% $admin->id %>_category_tabbing" value="1" id="<% $admin->id %>_category_tabbing"
./circuit/access.mhtml:											onclick="showLimits('<% $admin->id."_categories" %>', this)" <% $admin_perms{$admin->id}{"category_tabbing"} ? 'checked="checked"' : "" %> >
./circuit/access.mhtml:							<div id="<% $admin->id %>_categories" class="bordertop nospace" style="<% $admin_perms{$admin->id}{"category_tabbing"} ? "" : 'display: none;' %>">
./circuit/access.mhtml:									<select name="<% $admin->id %>_category" class="fixedmed plain">
./circuit/access.mhtml:%										foreach my $category ($tourn->categories) { 
./circuit/access.mhtml:											<option value="<% $category->id %>" 
./circuit/access.mhtml:												<% $admin_perms{$admin->id}{"category_tabbing"} && $category->id == $admin_perms{$admin->id}{"category_tabbing"}->category->id ? 'selected="selected"': "" %>>
./circuit/access.mhtml:												<% $category->name %>
./circuit/access.mhtml:%							unless ($admin_perms{$admin->id}{"owner"} &! ($admin_perms{$admin->id}{"owner"} || $person->site_admin)) { 
./circuit/access.mhtml:								<a class="dkred button" href="access_rm.mhtml?tourn_id=<% $tourn_id %>&circuit_id=<% $circuit->id %>&admin_id=<% $admin->id %>">Remove</a>
./circuit/access.mhtml:			<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./circuit/access.mhtml:			<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/tourns.mhtml:	my $tz = $person->tz;
./circuit/tourns.mhtml:	my $now = DateTime->now(time_zone => $tz);
./circuit/tourns.mhtml:	$year = $now->year unless $year;
./circuit/tourns.mhtml:	if ($now->month > 6 && $foo)  {
./circuit/tourns.mhtml:	my $begin = DateTime->new( 
./circuit/tourns.mhtml:		year => $year - 1,
./circuit/tourns.mhtml:	my $stop = DateTime->new(
./circuit/tourns.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./circuit/tourns.mhtml:		push (@tourns, $at) if ($at->start > $begin && $at->end < $stop);
./circuit/tourns.mhtml:	@tourns = sort {$a->start <=> $b->start } @tourns;
./circuit/tourns.mhtml:	$m->redirect("/index/index.mhtml?err=No circuit found") unless $circuit;
./circuit/tourns.mhtml:		<h2>The <% $circuit->abbr." ".$year." season "%></h2>
./circuit/tourns.mhtml:% 					my $start = $tourn->start;
./circuit/tourns.mhtml:% 					my $end = $tourn->end;
./circuit/tourns.mhtml:%					$start->set_time_zone($tz);
./circuit/tourns.mhtml:%					$end->set_time_zone($tz);
./circuit/tourns.mhtml:						<a href="access.mhtml?circuit_id=<% $circuit->id %>&tourn_id=<% $tourn->id %>" class="white">
./circuit/tourns.mhtml:							<% $tourn->name %>
./circuit/tourns.mhtml:% 						foreach my $contact ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => "yep" )) { 
./circuit/tourns.mhtml:							<a class="padless nowrap white white" href="mailto:<% $contact->email %>" title="<% $contact->email %>">
./circuit/tourns.mhtml:								<% $contact->first." ".$contact->last %>
./circuit/tourns.mhtml:						<% ($start->day != $end->day) ? " - ".Tab::niceshortdate($end) : "" %>
./circuit/tourns.mhtml:						<a class="dkblue button" href="access.mhtml?circuit_id=<% $circuit->id %>&tourn_id=<% $tourn->id %>">Access</a>
./circuit/tourns.mhtml:						<a class="dkred button" href="deny.mhtml?from=tourns&circuit_id=<% $circuit->id %>&tourn_id=<% $tourn->id %>">Remove</a>
./circuit/tourns.mhtml:						<a class="dkblue nowrap button" href="result_fix_launch.mhtml?circuit_id=<% $circuit->id %>&tourn_id=<% $tourn->id %>">Fix Results</a>
./circuit/tourns.mhtml:				<input type="hidden" name="circuit_id" size="5" value="<% $circuit->id %>"> 
./circuit/diocese_admin_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/diocese_admin_rm.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./circuit/diocese_admin_rm.mhtml:	my @already = Tab::Permission->search( tag => 'region', region => $diocese->id, person => $admin_id );
./circuit/diocese_admin_rm.mhtml:		$alr->delete if $alr;
./circuit/diocese_admin_rm.mhtml:	$m->redirect("diocese_admin.mhtml?diocese_id=".$diocese->id."&circuit_id=".$circuit->id."&msg=$msg");
./circuit/region_admin.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_admin.mhtml:	my $region = Tab::Region->retrieve($region_id);
./circuit/region_admin.mhtml:				<h4>Access to <% $region->name %> (<% $circuit->abbr %>)</h4>
./circuit/region_admin.mhtml:				<a href="regions.mhtml?region_id=<% $region->id %>&circuit_id=<% $circuit->id %>" class="dkblue block centeralign">
./circuit/region_admin.mhtml:%		foreach my $admin ($region->admins) { 
./circuit/region_admin.mhtml:					<% $admin->first." ".$admin->last %>
./circuit/region_admin.mhtml:					<% $admin->email %>
./circuit/region_admin.mhtml:					<a class="dkred padmuchmore" href="region_admin_rm.mhtml?region_id=<% $region->id %>&circuit_id=<% $circuit->id %>&admin_id=<% $admin->id %>">
./circuit/region_admin.mhtml:			<input type="hidden" name="region_id" value="<% $region->id %>">
./circuit/region_admin.mhtml:			<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/judge_training.mhtml:	my $person = Tab::Person->search( email => $person_email)->first if $person_email;
./circuit/judge_training.mhtml:	$person = Tab::Person->retrieve($person_id) if $person_id && not defined $person;
./circuit/judge_training.mhtml:			<% $circuit->name  %>
./circuit/judge_training.mhtml:		<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/judge_training.mhtml:					value="<% $person ? $person->email : "" %>" size="60">
./circuit/judge_training.mhtml:%			my $key = "judge_training_".$circuit->id;
./circuit/judge_training.mhtml:			<h4 class="martop">Training notes for <% $person->first." ".$person->last %></h4>
./circuit/judge_training.mhtml:				<input type="hidden" name="person_id" value="<% $person->id %>">
./circuit/judge_training.mhtml:				<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/judge_training.mhtml:				<textarea name="training_status" rows="20" cols="60"><% $person->setting($key) %></textarea>
./circuit/chapter_admin_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./circuit/chapter_admin_save.mhtml:		$chapter_count++ if $ARGS{$permission->person->id."_access_level"} eq "chapter"; 
./circuit/chapter_admin_save.mhtml:		$m->redirect("chapter_edit.mhtml?circuit_id=".$circuit->id."&chapter_id=$chapter_id&msg=$msg&err=$err");
./circuit/chapter_admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./circuit/chapter_admin_save.mhtml:		$permission->tag("prefs") if $ARGS{$permission->person->id."_access_level"} eq "prefs";
./circuit/chapter_admin_save.mhtml:		$permission->tag("chapter") if $ARGS{$permission->person->id."_access_level"} eq "chapter";
./circuit/chapter_admin_save.mhtml:		$permission->update;
./circuit/chapter_admin_save.mhtml:		$email =~tr/[A-Z]/[a-z]/;
./circuit/chapter_admin_save.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./circuit/chapter_admin_save.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "chapter" });
./circuit/chapter_admin_save.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "prefs" });
./circuit/chapter_admin_save.mhtml:						$ap->delete;
./circuit/chapter_admin_save.mhtml:						$ac->delete;
./circuit/chapter_admin_save.mhtml:						$already->tag("prefs");
./circuit/chapter_admin_save.mhtml:						$already->update;
./circuit/chapter_admin_save.mhtml:						$ac->delete;
./circuit/chapter_admin_save.mhtml:						$ap->delete;
./circuit/chapter_admin_save.mhtml:						$already->tag("chapter");
./circuit/chapter_admin_save.mhtml:						$already->update;
./circuit/chapter_admin_save.mhtml:				$already = Tab::Permission->create({
./circuit/chapter_admin_save.mhtml:					person => $admin->id,
./circuit/chapter_admin_save.mhtml:			$msg .= $admin->first." ".$admin->last." ".$admin->email." has been given full access to ". $chapter->name if $access_level eq "chapter"; 	
./circuit/chapter_admin_save.mhtml:			$msg .= $admin->first." ".$admin->last." ".$admin->email." has been given pref sheet access to ". $chapter->name if $access_level eq "prefs";	
./circuit/chapter_admin_save.mhtml:	$m->redirect("chapter_edit.mhtml?circuit_id=".$circuit->id."&chapter_id=$chapter_id&msg=$msg&err=$err");
./circuit/results_massager_save.mas:	#my $entry_student = Tab::EntryStudent->retrieve($student_out);
./circuit/results_massager_save.mas:        #$chapter->name($name);
./circuit/results_massager_save.mas:	#$chapter->update;	
./circuit/results_massager_save.mas:        my @entry_students = Tab::EntryStudent->search( entry => $entry_id, student => $student_out);
./circuit/results_massager_save.mas:            $entry_student->student($student_in);
./circuit/results_massager_save.mas:            $entry_student->update;
./circuit/results_massager_save.mas:        my @ballots = Tab::Ballot->search( entry => $entry_id);
./circuit/results_massager_save.mas:            my @scores = Tab::Score->search( ballot => $ballot, student => $student_out);
./circuit/results_massager_save.mas:                $score->student($student_in);
./circuit/results_massager_save.mas:                $score->update;
./circuit/results_massager_save.mas:	$m->redirect("results_massager.mhtml?circuit_id=".$circuit_id."&msg=done saved that there data");
./circuit/results_massager.mhtml:    my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/email_compose.mhtml:	my $email = Tab::Email->retrieve($email_id) if $email_id;
./circuit/email_compose.mhtml:	my $now = DateTime->now;
./circuit/email_compose.mhtml:	my @tourns = $m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, approved => "yes");
./circuit/email_compose.mhtml:	my $year = $now->year;
./circuit/email_compose.mhtml:	$year-- if $now->month < 8;
./circuit/email_compose.mhtml:	my $limit_date = $year."-07-01";
./circuit/email_compose.mhtml:	my $limit = DateTime::Format::MySQL->parse_date($limit_date);
./circuit/email_compose.mhtml:		<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/email_compose.mhtml:					<input type="text" name="subject" size="32" value="<% ($email) ? $email->subject : "" %>" >
./circuit/email_compose.mhtml:						Send to all <% $circuit->abbr %> members:
./circuit/email_compose.mhtml:%		foreach my $tourn (sort {$b->start <=> $a->start} @tourns) { 
./circuit/email_compose.mhtml:%			next unless $tourn->name;
./circuit/email_compose.mhtml:%			next if $tourn->end && $tourn->end->epoch < $limit->epoch;
./circuit/email_compose.mhtml:% 			next if $tourn->reg_start && $tourn->reg_start->epoch > $now->epoch;
./circuit/email_compose.mhtml:% 			my $tourn_key = "tourn_".$tourn->id;
./circuit/email_compose.mhtml:			<label for="<% $tourn->id %>">
./circuit/email_compose.mhtml:						<% $tourn->name %> entrants
./circuit/email_compose.mhtml:						<input id="<% $tourn->id %>" type="checkbox" name="<% $tourn_key %>" value="1">
./circuit/email_compose.mhtml:		<textarea name="content" cols="55" rows="20"><% ($email) ? $email->content : "" %></textarea>
./circuit/diocese_admin.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/diocese_admin.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./circuit/diocese_admin.mhtml:				<h2>Access to <% $diocese->name %> (<% $circuit->abbr %>)</h2>
./circuit/diocese_admin.mhtml:				<a href="dioceses.mhtml?diocese_id=<% $diocese->id %>&circuit_id=<% $circuit->id %>" class="dkblue button">
./circuit/diocese_admin.mhtml:%		foreach my $admin ($diocese->admins) { 
./circuit/diocese_admin.mhtml:					<% $admin->first." ".$admin->last %>
./circuit/diocese_admin.mhtml:					<% $admin->email %>
./circuit/diocese_admin.mhtml:					<a class="dkred button" href="diocese_admin_rm.mhtml?diocese_id=<% $diocese->id %>&circuit_id=<% $circuit->id %>&admin_id=<% $admin->id %>">
./circuit/diocese_admin.mhtml:			<input type="hidden" name="diocese_id" value="<% $diocese->id %>">
./circuit/diocese_admin.mhtml:			<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/region_admin_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_admin_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./circuit/region_admin_rm.mhtml:	my @already = Tab::Permission->search( tag => "region", region => $region->id, person => $admin_id );
./circuit/region_admin_rm.mhtml:		$alr->delete if $alr;
./circuit/region_admin_rm.mhtml:	$m->redirect("region_admin.mhtml?region_id=".$region->id."&circuit_id=".$circuit->id."&msg=$msg");
./circuit/dioceses.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/dioceses.mhtml:		<h2><% $circuit->abbr %> Dioceses</h2>
./circuit/dioceses.mhtml:		<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/dioceses.mhtml:%				foreach my $diocese (sort {$a->name cmp $b->name} $circuit->regions) {
./circuit/dioceses.mhtml:							<input type="text" name="name_<% $diocese->id %>" size="20" value="<% $diocese->name %>">
./circuit/dioceses.mhtml:							<span class="hidden"><% $diocese->arch %></span>
./circuit/dioceses.mhtml:							<input type="checkbox" name="arch_<% $diocese->id %>" size="25" value="1" <% $diocese->arch ? 'checked="checked"' : "" %> >
./circuit/dioceses.mhtml:							<span class="hidden"><% length($diocese->code) %><% $diocese->code %></span>
./circuit/dioceses.mhtml:							<input type="text" name="code_<% $diocese->id %>" size="4" value="<% $diocese->code %>">
./circuit/dioceses.mhtml:							<span class="hidden"><% $diocese->quota %></span>
./circuit/dioceses.mhtml:							<input type="text" name="quota_<% $diocese->id %>" size="4" value="<% $diocese->quota %>">
./circuit/dioceses.mhtml:%							foreach my $admin ($diocese->admins) { 
./circuit/dioceses.mhtml:								<a href="diocese_admin.mhtml?diocese_id=<% $diocese->id %>&circuit_id=<% $circuit->id %>" class="white padless">
./circuit/dioceses.mhtml:									<% $admin->first." ".$admin->last." (".$admin->email.")" %>
./circuit/dioceses.mhtml:%							unless ($diocese->admins) { 
./circuit/dioceses.mhtml:								<a href="diocese_admin.mhtml?diocese_id=<% $diocese->id %>&circuit_id=<% $circuit->id %>" class="dkred block padless">
./circuit/chapter_circuit_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/chapter_circuit_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./circuit/chapter_circuit_add.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./circuit/chapter_circuit_add.mhtml:		my $cl = Tab::ChapterCircuit->create({
./circuit/chapter_circuit_add.mhtml:			circuit => $circuit->id,
./circuit/chapter_circuit_add.mhtml:			chapter => $chapter->id,
./circuit/chapter_circuit_add.mhtml:	my $msg = $chapter->name." has been joined to ".$circuit->abbr;
./circuit/chapter_circuit_add.mhtml:	$m->redirect("chapter_edit.mhtml?circuit_id=".$circuit_id."&chapter_id=".$chapter->id."&msg=$msg");
./circuit/circuit_save.mhtml:		$circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/circuit_save.mhtml:		$circuit->name($name);
./circuit/circuit_save.mhtml:		$circuit->abbr($abbr);
./circuit/circuit_save.mhtml:		$circuit->state($state);
./circuit/circuit_save.mhtml:		$circuit->country($country);
./circuit/circuit_save.mhtml:		$circuit->tz($timezone);
./circuit/circuit_save.mhtml:		$circuit->update;
./circuit/circuit_save.mhtml:		$circuit->setting("url", $url);
./circuit/circuit_save.mhtml:		$circuit->setting("naudl", $naudl);
./circuit/circuit_save.mhtml:		$circuit->setting("ncfl", $ncfl);
./circuit/circuit_save.mhtml:		$circuit->setting("full_members", $full_members);
./circuit/circuit_save.mhtml:		$circuit->setting("tourn_only", $tourn_only);
./circuit/circuit_save.mhtml:		$circuit->setting("track_bids", $track_bids);
./circuit/circuit_save.mhtml:		$circuit->setting("regions", $regions);
./circuit/circuit_save.mhtml:		$circuit->setting("demographics", $demographics);
./circuit/circuit_save.mhtml:		$circuit->setting("judge_demographics", $judge_demographics);
./circuit/circuit_save.mhtml:		$circuit->setting("judge_training", $judge_training);
./circuit/circuit_save.mhtml:		$circuit->setting("tourns_no_add", $tourns_no_add);
./circuit/circuit_save.mhtml:	$m->redirect("index.mhtml?circuit_id=$circuit_id&msg=$msg");
./circuit/judge_training_save.mhtml:	my $now = DateTime->now;
./circuit/judge_training_save.mhtml:	my $judge_person = Tab::Person->retrieve($person_id);
./circuit/judge_training_save.mhtml:	my $key = "judge_training_".$circuit->id;
./circuit/judge_training_save.mhtml:	my $meta_key = "judge_tr_meta_".$circuit->id;
./circuit/judge_training_save.mhtml:	my $meta = "Entered by ".$person->first." ".$person->last." at ".Tab::nicedt($now)." UTC";
./circuit/judge_training_save.mhtml:	$judge_person->setting($key, "text", $training_status) if $training_status;
./circuit/judge_training_save.mhtml:	$judge_person->setting($meta_key, "text", $meta) if $training_status;
./circuit/judge_training_save.mhtml:	$judge_person->setting($key, "") unless $training_status;
./circuit/judge_training_save.mhtml:	$judge_person->setting($meta_key, "") unless $training_status;
./circuit/judge_training_save.mhtml:	$m->redirect("judge_training.mhtml?person_id=$person_id&circuit_id=".$circuit->id."&msg=$msg");
./circuit/email_send.mhtml:	my $now = DateTime->now;
./circuit/email_send.mhtml:	$subject = "[".$circuit->abbr."] ".$subject;
./circuit/email_send.mhtml:	my $email = Tab::Email->create({ 	
./circuit/email_send.mhtml:		sender  => $person->id });
./circuit/email_send.mhtml:	my $email_id = $email->id;
./circuit/email_send.mhtml:   		foreach my $chapter ($m->comp('/funclib/circuit_chapters.mas', circuit => $circuit, full => 1)) {
./circuit/email_send.mhtml:			push (@sendto_persons, $m->comp("/funclib/chapter_admins.mas", chapter => $chapter));
./circuit/email_send.mhtml:		my $nowkey = DateTime::Format::MySQL->format_date($now);
./circuit/email_send.mhtml:		my @tourns = $circuit->tourns;
./circuit/email_send.mhtml:			my $tourn_key = "tourn_".$tourn->id;
./circuit/email_send.mhtml:			$sent_to = $sent_to." ".$tourn->name." entrants";
./circuit/email_send.mhtml:			foreach my $school ($tourn->schools) { 
./circuit/email_send.mhtml:				push (@sendto_persons, $school->chapter->admins);
./circuit/email_send.mhtml:		next if $sendto_person->no_email;
./circuit/email_send.mhtml:		next if $seen{$sendto_person->email}++;
./circuit/email_send.mhtml:		$send_string .= $sendto_person->email;
./circuit/email_send.mhtml:	$m->comp( "/funclib/send_email.mas", from => $person, raw => $send_string, subject => $subject, body => $content );
./circuit/email_send.mhtml:	$m->redirect("email_view.mhtml?circuit_id=".$circuit->id."&email_id=$email_id&msg=$msg");
./circuit/chapter_admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./circuit/chapter_admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./circuit/chapter_admin_rm.mhtml:	foreach (@ca) {  $_->delete; } 
./circuit/chapter_admin_rm.mhtml:	$msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./circuit/chapter_admin_rm.mhtml:	$m->redirect("chapter_edit.mhtml?circuit_id=".$circuit->id."&chapter_id=$chapter_id&msg=$msg");
./circuit/dues_invoice.mhtml:	my $cl = Tab::ChapterCircuit->retrieve($cl_id);
./circuit/dues_invoice.mhtml:	my $chapter = $cl->chapter;
./circuit/dues_invoice.mhtml:	my $circuit = $cl->circuit;
./circuit/dues_invoice.mhtml:	my $filename = "dues-invoice-".$chapter->id."-".$session->id;
./circuit/dues_invoice.mhtml:	my $filepath = "files/".$circuit->id."/invoices";
./circuit/dues_invoice.mhtml:	my $garbage = `mkdir -p $Tab::file_root/$filepath`;
./circuit/dues_invoice.mhtml:	$garbage = `rm -f $Tab::file_root/$filepath/$filename.*`;
./circuit/dues_invoice.mhtml:\\addtolength{\\hoffset}{-.2in}
./circuit/dues_invoice.mhtml:	$m->comp("/user/circuit/dues_print.mas", 
./circuit/dues_invoice.mhtml:#	$garbage = `cd $Tab::file_root/$filepath; rm -f $filename.tex $filename.log $filename.dvi $filename.aux`;
./circuit/dues_invoice.mhtml:	$m->redirect("$Tab::url_prefix/$filepath/$filename.pdf");
./circuit/diocese_admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/diocese_admin_add.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./circuit/diocese_admin_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./circuit/diocese_admin_add.mhtml:	my $already = Tab::Permission->search( tag => "region", region => $diocese->id, person => $person->id ) if $person;
./circuit/diocese_admin_add.mhtml:			my $admin = Tab::Permission->create({
./circuit/diocese_admin_add.mhtml:				person => $person->id,
./circuit/diocese_admin_add.mhtml:				region  => $diocese->id,
./circuit/diocese_admin_add.mhtml:			$msg = "Account ".$person->email." has been granted access to ".$diocese->name;
./circuit/diocese_admin_add.mhtml:	$m->redirect("diocese_admin.mhtml?diocese_id=".$diocese->id."&circuit_id=".$circuit->id."&msg=$msg");
./circuit/chapter_by_tourn.mhtml:	my $tournvar = Tab::Tourn->retrieve($tourn_id);
./circuit/chapter_by_tourn.mhtml:	my @school = Tab::School->search( tourn => $tourn_id);
./circuit/chapter_by_tourn.mhtml:#	print $event->name;
./circuit/chapter_by_tourn.mhtml:#        my @clear = Tab::Entry->search( event => $event->id,  dropped => 0, waitlist => 0 );
./circuit/chapter_by_tourn.mhtml:	<h2>Match schools to chapters for "<% $tournvar->name %>"</h4>
./circuit/chapter_by_tourn.mhtml:	<strong>INSTRUCTIONS:</strong>A "school" is an entry at a tournament.  A "chapter" is the stable, persistent record in the master  tabroom database.  If there is a real, physical chapter called "Palmer U," then every time that chapter enters a tournament the 	tournament "school" entry should be linked to the Palmer U chapter.  Below is the list of schools entries for <% $tournvar->name %>; if any chapter value is 0 you should click on the name of the school and you'll be taken to a page to match that school entry to a chapter.  (Note that a physical university or secondary school can have multiple chapters, for example, Oxford can have a policy debate team and a parlimentary debate team and each can maintain a separate chapter.  You want to match the school to the chapter in your circuit.)<br><hr>
./circuit/chapter_by_tourn.mhtml:				 <a class="white" href="/user/circuit/chapter_school_match.mhtml?school_id=<% $school->id %>&circuit_id=<% $circuit_id %>&SearchText=<% $school->name %>&tourn_id=<% $tourn_id %>">
./circuit/chapter_by_tourn.mhtml:                                   <% $school->name %>
./circuit/chapter_by_tourn.mhtml:				<td><% $school->chapter %></td>
./circuit/autohandler:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/autohandler:		my @ca = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id);
./circuit/autohandler:		unless ($person->site_admin || @ca) { 
./circuit/autohandler:			$m->print("<p>I call shenanigans</p>");
./circuit/autohandler:			$m->abort;
./circuit/autohandler:		$m->call_next( circuit => $circuit, person => $person );
./circuit/autohandler:		$m->call_next;
./circuit/codes_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/codes_save.mhtml:	$m->abort() unless $circuit;
./circuit/codes_save.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/codes_save.mhtml:		my $code = $ARGS{$chapter->id};
./circuit/codes_save.mhtml:		$chapter->circuit_code($circuit, $code) if $code;
./circuit/codes_save.mhtml:	$m->redirect("codes.mhtml?circuit_id=$circuit_id&msg=$msg");
./circuit/emails.mhtml:	my $tz = $person->tz;
./circuit/emails.mhtml:	my @is_admin = Tab::Permission->search( tag => "circuit",  circuit => $circuit->id, person => $person->id );
./circuit/emails.mhtml:	my $now = DateTime->now;
./circuit/emails.mhtml:	$year = $now->year unless $year;
./circuit/emails.mhtml:	$year-- unless $now->month > 7;
./circuit/emails.mhtml:	my $start_range = DateTime->new({
./circuit/emails.mhtml:	my $end_range = DateTime->new({
./circuit/emails.mhtml:	my @emails = Tab::Email->search_where(
./circuit/emails.mhtml:		<h2><% $circuit->abbr %> Emails</h2>
./circuit/emails.mhtml:			<h4>Emails sent in <% $year."-".($year + 1) %> school year</h4>
./circuit/emails.mhtml:%					my $sent_at = $email->sent_at->set_time_zone($tz);
./circuit/emails.mhtml:							<% $sent_at->mdy('/') %>
./circuit/emails.mhtml:							<% $email->subject %>
./circuit/emails.mhtml:							<% $email->sender->first." ".$email->sender->last %>
./circuit/emails.mhtml:							<% $email->tourn ? $email->tourn->name.":<br />" : "" %>
./circuit/emails.mhtml:							<% $email->sent_to ? $email->sent_to : "Everyone" %>
./circuit/emails.mhtml:							<a class="dkblue button" href="email_view.mhtml?circuit_id=<% $circuit->id %>&email_id=<% $email->id %>">
./circuit/tourn_results.mhtml:	my $tz = $person->tz;
./circuit/tourn_results.mhtml:	my $now = DateTime->now(time_zone => $tz);
./circuit/tourn_results.mhtml:	$year = $now->year unless $year;
./circuit/tourn_results.mhtml:	if ($now->month > 6 && $foo)  {
./circuit/tourn_results.mhtml:	my $begin = DateTime->new( 
./circuit/tourn_results.mhtml:		year  => $year - 1,
./circuit/tourn_results.mhtml:	my $stop = DateTime->new(
./circuit/tourn_results.mhtml:	my $circuit=Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/tourn_results.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./circuit/tourn_results.mhtml:		push (@tourns, $at) if ($at->start > $begin && $at->end < $stop);
./circuit/tourn_results.mhtml:	@tourns = sort {$a->start <=> $b->start } @tourns;
./circuit/tourn_results.mhtml:	$m->redirect("/index/index.mhtml?err=No circuit found") unless $circuit;
./circuit/tourn_results.mhtml:		<h2>The <% $circuit->abbr." ".$year." season "%></h2>
./circuit/tourn_results.mhtml:%				my @events = Tab::Event->search( tourn=> $tourn->id);
./circuit/tourn_results.mhtml:% 					my $start = $tourn->start;
./circuit/tourn_results.mhtml:% 					my $end = $tourn->end;
./circuit/tourn_results.mhtml:%					$start->set_time_zone($tz);
./circuit/tourn_results.mhtml:%					$end->set_time_zone($tz);
./circuit/tourn_results.mhtml:							<% $tourn->name %>
./circuit/tourn_results.mhtml:							<% ($start->day != $end->day) ? " - ".Tab::niceshortdate($end) : "" %>
./circuit/tourn_results.mhtml:						<% $event->name %>
./circuit/tourn_results.mhtml:%						my @result_set=Tab::ResultSet->search( tourn => $tourn->id, event => $event->id, label => 'Final Places' );
./circuit/tourn_results.mhtml:%						my @entries=Tab::Entry->search( event => $event->id, dropped => 0, waitlist => 0,  );
./circuit/tourn_results.mhtml:%						my @results; if ( scalar(@result_set) > 0) { @results = Tab::Result->search( result_set=> $result_set[0]->id); }
./circuit/tourn_results.mhtml:						<a class="dkblue button" href="/tabbing/publish/generate_results.mhtml?event_id=<% $event->id %>&set_tourn_id=<% $tourn %>&result_type=final&circuit_id=<% $circuit_id %>">Generate Final Places</a>
./circuit/tourn_results.mhtml:		<input type="hidden" name="circuit_id" size="5" value="<% $circuit->id %>"> 
./circuit/dioceses_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/dioceses_save.mhtml:		Tab::Region->create({
./circuit/dioceses_save.mhtml:	foreach my $diocese (sort {$a->name cmp $b->name} $circuit->regions) {
./circuit/dioceses_save.mhtml:		$diocese->name($ARGS{"name_".$diocese->id});
./circuit/dioceses_save.mhtml:		$diocese->arch($ARGS{"arch_".$diocese->id});
./circuit/dioceses_save.mhtml:		$diocese->code($ARGS{"code_".$diocese->id});
./circuit/dioceses_save.mhtml:		$diocese->quota($ARGS{"quota_".$diocese->id});
./circuit/dioceses_save.mhtml:		$diocese->update;
./circuit/dioceses_save.mhtml:	$m->redirect("dioceses.mhtml?circuit_id=$circuit_id&msg=$msg");
./circuit/access_save.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/access_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/access_save.mhtml:	$m->abort unless $tourn && $circuit;
./circuit/access_save.mhtml:	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;
./circuit/access_save.mhtml:	my @perms = Tab::Permission->search( tourn => $tourn->id );
./circuit/access_save.mhtml:		$admin_perms{$perm->person->id}{$perm->tag} = $perm;
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_level"} eq "owner" || $admin_perms{$admin->id}{"owner"}) { 
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_level"} eq "owner") { 
./circuit/access_save.mhtml:			unless ($admin_perms{$admin->id}{"owner"}) { 
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"owner"} = Tab::Permission->create({
./circuit/access_save.mhtml:					tourn   => $tourn->id,
./circuit/access_save.mhtml:					person => $admin->id,
./circuit/access_save.mhtml:			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{$key}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{$key};
./circuit/access_save.mhtml:		} elsif ($admin_perms{$admin->id}{"owner"}) { 
./circuit/access_save.mhtml:				$owner_count--;
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"owner"}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{"owner"};
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_contact"} || $admin_perms{$admin->id}{"contact"}) { 
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_contact"}) { 
./circuit/access_save.mhtml:			unless ($admin_perms{$admin->id}{"contact"}) { 
./circuit/access_save.mhtml:				Tab::Permission->create({ tourn => $tourn->id, person => $admin->id, tag => "contact" });
./circuit/access_save.mhtml:		} elsif ($admin_perms{$admin->id}{"contact"}) { 
./circuit/access_save.mhtml:		next ADMIN unless ($admin_perms{$person->id}{"owner"} || $admin_perms{$person->id}{"contact"} || $person->site_admin);
./circuit/access_save.mhtml:				$contact_count--;
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"contact"}->delete;
./circuit/access_save.mhtml:				undef  $admin_perms{$admin->id}{"contact"};
./circuit/access_save.mhtml:		next if $admin_perms{$admin->id}{"owner"};  # Full admin rights are redundant
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_level"} eq "full_admin") { 
./circuit/access_save.mhtml:			unless ($admin_perms{$admin->id}{"full_admin"}) { 
./circuit/access_save.mhtml:				Tab::Permission->create({ tourn => $tourn->id, person => $admin->id, tag => "full_admin" });
./circuit/access_save.mhtml:			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{$key}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{$key};
./circuit/access_save.mhtml:		} elsif ($admin_perms{$admin->id}{"full_admin"}) { 
./circuit/access_save.mhtml:			$admin_perms{$admin->id}{"full_admin"}->delete;
./circuit/access_save.mhtml:			undef $admin_perms{$admin->id}{"full_admin"};
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_level"} eq "limited") { 
./circuit/access_save.mhtml:			unless ($admin_perms{$admin->id}{"limited"}) { 
./circuit/access_save.mhtml:				Tab::Permission->create({ tourn => $tourn->id, person => $admin->id, tag => "limited" });
./circuit/access_save.mhtml:			if ($ARGS{$admin->id."_registration"}) { 
./circuit/access_save.mhtml:				Tab::Permission->create({ 
./circuit/access_save.mhtml:					tourn   => $tourn->id,
./circuit/access_save.mhtml:					person => $admin->id,
./circuit/access_save.mhtml:				}) unless $admin_perms{$admin->id}{"registration"};
./circuit/access_save.mhtml:			} elsif ($admin_perms{$admin->id}{"registration"}) {  
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"registration"}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{"registration"};
./circuit/access_save.mhtml:			if ($ARGS{$admin->id."_tabbing"}) { 
./circuit/access_save.mhtml:				Tab::Permission->create({ 
./circuit/access_save.mhtml:					tourn   => $tourn->id,
./circuit/access_save.mhtml:					person => $admin->id,
./circuit/access_save.mhtml:				}) unless $admin_perms{$admin->id}{"tabbing"};
./circuit/access_save.mhtml:			} elsif ($admin_perms{$admin->id}{"tabbing"}) {  
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"tabbing"}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{"tabbing"};
./circuit/access_save.mhtml:			if ($ARGS{$admin->id."_category_tabbing"} && $ARGS{$admin->id."_category"}) { 
./circuit/access_save.mhtml:				my $category = Tab::Category->retrieve($ARGS{$admin->id."_category"});
./circuit/access_save.mhtml:				$m->abort unless $category->tourn->id == $tourn->id;
./circuit/access_save.mhtml:				if ($admin_perms{$admin->id}{"category_tabbing"}) { 
./circuit/access_save.mhtml:					$admin_perms{$admin->id}{"category_tabbing"}->category($category->id);
./circuit/access_save.mhtml:					$admin_perms{$admin->id}{"category_tabbing"}->update;
./circuit/access_save.mhtml:					$admin_perms{$admin->id}{"category_tabbing"} = 
./circuit/access_save.mhtml:						Tab::Permission->create({ 
./circuit/access_save.mhtml:							tourn       => $tourn->id,
./circuit/access_save.mhtml:							person     => $admin->id,
./circuit/access_save.mhtml:							category => $category->id,
./circuit/access_save.mhtml:						}) unless $admin_perms{$admin->id}{"category_tabbing"};
./circuit/access_save.mhtml:			} elsif ($admin_perms{$admin->id}{"category_tabbing"}) {  
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"category_tabbing"}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{"category_tabbing"};
./circuit/access_save.mhtml:			if ($admin_perms{$admin->id}{"entry_only"}) { 
./circuit/access_save.mhtml:				$admin_perms{$admin->id}{"entry_only"}->delete;
./circuit/access_save.mhtml:				undef $admin_perms{$admin->id}{"entry_only"};
./circuit/access_save.mhtml:		} elsif ($admin_perms{$admin->id}{"limited"}) { 
./circuit/access_save.mhtml:			$admin_perms{$admin->id}{"limited"}->delete;
./circuit/access_save.mhtml:			undef $admin_perms{$admin->id}{"limited"};
./circuit/access_save.mhtml:			$admin_perms{$admin->id}{"registration"}->delete if $admin_perms{$admin->id}{"registration"};
./circuit/access_save.mhtml:			undef $admin_perms{$admin->id}{"registration"} if $admin_perms{$admin->id}{"registration"};
./circuit/access_save.mhtml:			$admin_perms{$admin->id}{"tabbing"}->delete if $admin_perms{$admin->id}{"tabbing"};
./circuit/access_save.mhtml:			undef $admin_perms{$admin->id}{"tabbing"} if $admin_perms{$admin->id}{"tabbing"};
./circuit/access_save.mhtml:			$admin_perms{$admin->id}{"category_tabbing"}->delete if $admin_perms{$admin->id}{"category_tabbing"};
./circuit/access_save.mhtml:			undef $admin_perms{$admin->id}{"category_tabbing"} if $admin_perms{$admin->id}{"category_tabbing"};
./circuit/access_save.mhtml:		if ($ARGS{$admin->id."_level"} eq "entry_only") { 
./circuit/access_save.mhtml:			unless ($admin_perms{$admin->id}{"entry_only"}) { 
./circuit/access_save.mhtml:				Tab::Permission->create({ tourn => $tourn->id, person => $admin->id, tag => "entry_only" });
./circuit/access_save.mhtml:		} elsif ($admin_perms{$admin->id}{"entry_only"}) { 
./circuit/access_save.mhtml:			$admin_perms{$admin->id}{"entry_only"}->delete;
./circuit/access_save.mhtml:			undef $admin_perms{$admin->id}{"entry_only"};
./circuit/access_save.mhtml:	$m->redirect("access.mhtml?circuit_id=$circuit_id&tourn_id=$tourn_id&msg=$msg&err=$err");
./circuit/bdl_student_export.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/bdl_student_export.mhtml:	my $tz = $circuit->tz;
./circuit/bdl_student_export.mhtml:    my $now = DateTime->now(time_zone => $tz);    
./circuit/bdl_student_export.mhtml:	my $nowstring = $now->year."-".$now->month."-".$now->day."-".$now->hour."-".$now->strftime('%M');
./circuit/bdl_student_export.mhtml:	my $name = $circuit->name;
./circuit/bdl_student_export.mhtml:    my $filename = "BDL-AllStudentsReport-INTERNAL-$name-$nowstring";
./circuit/bdl_student_export.mhtml:    `rm -f $filepath.*`; 
./circuit/bdl_student_export.mhtml:	foreach my $tourn ($circuit->tourns) { 
./circuit/bdl_student_export.mhtml:		my %event_by_id = map { $_->id => $_ } $tourn->events;
./circuit/bdl_student_export.mhtml:			$event_level{$key} = $event_by_id{$key}->setting('level');
./circuit/bdl_student_export.mhtml:		my @students = $m->comp("/funclib/tourn_students.mas", tourn => $tourn, by_result => 1);
./circuit/bdl_student_export.mhtml:		my $start_dt = $tourn->start;
./circuit/bdl_student_export.mhtml:			my $event = $event_by_id{$student->entry};
./circuit/bdl_student_export.mhtml:			print CSVOUT $tourn->id.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $tourn->name.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $event->id.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $event->name.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $event_level{$event->id}.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT 'TR'.$student->code.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $student->event.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $student->school.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT 'TR'.$student->id.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $student->first.' '.$student->last.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $student->first.'","';
./circuit/bdl_student_export.mhtml:			print CSVOUT $student->last.'","';
./circuit/bdl_student_export.mhtml:				$race = "White, non-Hispanic/Latino" if $student->race eq "white";
./circuit/bdl_student_export.mhtml:				$race = "Black, non-Hispanic/Latino" if $student->race eq "black";
./circuit/bdl_student_export.mhtml:				$race = "Hispanic/Latino" if $student->race eq "latino";
./circuit/bdl_student_export.mhtml:				$race = "American Indian/Native Alaskan" if $student->race eq "amerindian";
./circuit/bdl_student_export.mhtml:				$race = "Asian" if $student->race eq "asian";
./circuit/bdl_student_export.mhtml:				$race = "Native Hawaiian or other Pacific Islander" if $student->race eq "pacific";
./circuit/bdl_student_export.mhtml:				$race = "Two or more races" if $student->race eq "dual";
./circuit/bdl_student_export.mhtml:				$race = "Other" if $student->race eq "other";
./circuit/bdl_student_export.mhtml:				my $gender = $student->gender;
./circuit/bdl_student_export.mhtml:				my $bps_id = $student->school_sid;
./circuit/bdl_student_export.mhtml:				$bps_id = $student->region unless $bps_id;
./circuit/bdl_student_export.mhtml:				my $birthday_dt = $student->birthdate; 
./circuit/bdl_student_export.mhtml:				print CSVOUT $student->grad_year.'","';
./circuit/bdl_student_export.mhtml:	$m->redirect("$Tab::url_prefix/tmp/$filename.csv");
./circuit/index.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/index.mhtml:	$m->abort unless $circuit;
./circuit/index.mhtml:	my $tz = $circuit->tz if $circuit;
./circuit/index.mhtml:			<% $circuit->name  %>
./circuit/index.mhtml:					<input type="text" size="25" name="name" value="<% ($circuit) ? $circuit->name : "" %>">
./circuit/index.mhtml:					<input type="text" size="25" name="abbr" value="<% ($circuit) ? $circuit->abbr : "" %>">
./circuit/index.mhtml:						<& /funclib/state_select.mas, state => $circuit ? $circuit->state : "" &>
./circuit/index.mhtml:						<& /funclib/country_select.mas, country => $circuit ? $circuit->country : "" &>
./circuit/index.mhtml:					<input type="text" size="25" name="url" value="<% ($circuit) ? $circuit->setting('url') : "" %>">
./circuit/index.mhtml:							<input type="radio" id="fully" name="full_members" value="1" <% ($circuit) ? ($circuit->setting("full_members")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" name="fulln" name="full_members" value="" <% ($circuit) ? ($circuit->setting('full_members')) ? "" : "checked" : "" %> >
./circuit/index.mhtml:					Tournaments open to non-members
./circuit/index.mhtml:							<input type="radio" id="tourny" name="tourn_only" value="1" <% ($circuit) ? ($circuit->setting("tourn_only")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:							<input type="radio" id="tournn" name="tourn_only" value="" <% ($circuit) ? ($circuit->setting("tourn_only")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="tracky" name="track_bids" value="1" <% ($circuit) ? ($circuit->setting("track_bids")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="trackn" name="track_bids" value="" <% ($circuit) ? ($circuit->setting("track_bids")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="demoy" name="demographics" value="1" <% ($circuit) ? ($circuit->setting("demographics")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="demon" name="demographics" value="" <% ($circuit) ? ($circuit->setting("demographics")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="judgey" name="judge_demographics" value="1" <% ($circuit) ? ($circuit->setting("judge_demographics")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="judgen" name="judge_demographics" value="" <% ($circuit) ? ($circuit->setting("judge_demographics")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:							<input type="radio" id="noaddy" name="tourns_no_add" value="1" <% ($circuit) ? ($circuit->setting("tourns_no_add")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="noaddn" name="tourns_no_add" value="" <% ($circuit) ? ($circuit->setting("tourns_no_add")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="trainy" name="judge_training" value="1" <% ($circuit) ? ($circuit->setting("judge_training")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="trainn" name="judge_training" value="" <% ($circuit) ? ($circuit->setting("judge_training")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="regiony" name="regions" value="1" <% ($circuit) ? ($circuit->setting("regions")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:					<input type="radio" id="regionn" name="regions" value="" <% ($circuit) ? ($circuit->setting("regions")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:							<input type="radio" id="ncfly" name="ncfl" value="1" <% ($circuit) ? ($circuit->setting("ncfl")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:							<input type="radio" id="ncfln" name="ncfl" value="" <% ($circuit) ? ($circuit->setting("ncfl")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:						<input type="radio" id="naudly" name="naudl" id="naudl_1" value="1" <% ($circuit) ? ($circuit->setting("naudl")) ? "checked" : "" : "" %> >
./circuit/index.mhtml:						<input type="radio" id="naudln" name="naudl" id="naudl_2" value="" <% ($circuit) ? ($circuit->setting("naudl")) ? "" : "checked" : "" %> >
./circuit/index.mhtml:% 			foreach my $admin (sort {$a->last cmp $b->last} $circuit->admins) { 
./circuit/index.mhtml:						<% $admin->first." ".$admin->last %> 
./circuit/index.mhtml:						<a class="white" href="mailto:<% $admin->email %>">
./circuit/index.mhtml:							<% $admin->email %>
./circuit/index.mhtml:						<a class="dkred button" href="admin_rm.mhtml?admin_id=<% $admin->id %>&circuit_id=<% $circuit_id %>">Delete</a>
./circuit/chapter_circuit_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_circuit_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id); 
./circuit/chapter_circuit_rm.mhtml:	my @cc = Tab::ChapterCircuit->search( circuit => $circuit_id, chapter => $chapter->id);
./circuit/chapter_circuit_rm.mhtml:	foreach (@cc) {  $_->delete; } 
./circuit/chapter_circuit_rm.mhtml:	my $msg = $chapter->name." was removed from the circuit ".$circuit->name;
./circuit/chapter_circuit_rm.mhtml:	$m->redirect("chapter_edit.mhtml?circuit_id=".$circuit_id."&chapter_id=".$chapter->id."&msg=$msg");
./circuit/ndtceda_pt_manager.mhtml:	my $tz = $person->tz;
./circuit/ndtceda_pt_manager.mhtml:	my $now = DateTime->now(time_zone => $tz);
./circuit/ndtceda_pt_manager.mhtml:	$year = $now->year unless $year;
./circuit/ndtceda_pt_manager.mhtml:	if ($now->month > 6 && $foo)  {
./circuit/ndtceda_pt_manager.mhtml:	my $begin = DateTime->new( 
./circuit/ndtceda_pt_manager.mhtml:		year => $year - 1,
./circuit/ndtceda_pt_manager.mhtml:	my $stop = DateTime->new(
./circuit/ndtceda_pt_manager.mhtml:	my $circuit=Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/ndtceda_pt_manager.mhtml:	$m->abort unless $circuit;
./circuit/ndtceda_pt_manager.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./circuit/ndtceda_pt_manager.mhtml:		push (@tourns, $at) if ($at->start > $begin && $at->end < $stop);
./circuit/ndtceda_pt_manager.mhtml:	@tourns = sort {$a->start <=> $b->start } @tourns;
./circuit/ndtceda_pt_manager.mhtml:	$m->redirect("/index/index.mhtml?err=No circuit found") unless $circuit;
./circuit/ndtceda_pt_manager.mhtml:		<h2>The <% $circuit->abbr." ".$year." season "%></h2>
./circuit/ndtceda_pt_manager.mhtml:		This also supports ADA points as of 12-26-15; clicking the appropriate column will calculate ADA ponits as well.  Nobody but the
./circuit/ndtceda_pt_manager.mhtml:		ADA circuit manager should click that column.  Updated 12-26-15.<br><br>
./circuit/ndtceda_pt_manager.mhtml:					non-Dropped Entries
./circuit/ndtceda_pt_manager.mhtml:%				my @events = Tab::Event->search( tourn=> $tourn->id);
./circuit/ndtceda_pt_manager.mhtml:% 					my $start = $tourn->start;
./circuit/ndtceda_pt_manager.mhtml:% 					my $end = $tourn->end;
./circuit/ndtceda_pt_manager.mhtml:%					$start->set_time_zone($tz);
./circuit/ndtceda_pt_manager.mhtml:%					$end->set_time_zone($tz);
./circuit/ndtceda_pt_manager.mhtml:						<% $tourn->name %>
./circuit/ndtceda_pt_manager.mhtml:						<% ($start->day != $end->day) ? " - ".Tab::niceshortdate($end) : "" %>
./circuit/ndtceda_pt_manager.mhtml:						<a href="/index/tourn/fields.mhtml?tourn_id=<% $tourn->id %>&event_id=<% $event->id %>" >
./circuit/ndtceda_pt_manager.mhtml:						<% $event->name %>
./circuit/ndtceda_pt_manager.mhtml:%						my @entries=Tab::Entry->search( event => $event->id, dropped => 0 );
./circuit/ndtceda_pt_manager.mhtml:%						my @result_set=Tab::ResultSet->search( event => $event->id, label => "ceda_pts" );
./circuit/ndtceda_pt_manager.mhtml:%						my @results=Tab::Result->search( result_set => $result_set[0]->id );
./circuit/ndtceda_pt_manager.mhtml:%						my @ada_result_set=Tab::ResultSet->search( event => $event->id, label => "ada_pts" );
./circuit/ndtceda_pt_manager.mhtml:%						my @results=Tab::Result->search( result_set => $ada_result_set[0]->id ); 
./circuit/ndtceda_pt_manager.mhtml:						<a class="dkblue nowrap block" href="/index/results/ndt_ceda_generator.mas?event_id=<% $event->id %>&came_from=manager&ada=false&circuit_id=<% $circuit->id %>">NDT/CEDA only</a>
./circuit/ndtceda_pt_manager.mhtml:						<a class="dkblue nowrap block" href="/index/results/ndt_ceda_generator.mas?event_id=<% $event->id %>&came_from=manager&ada=true&circuit_id=<% $circuit->id %>">NDT/CEDA/ADA</a>
./circuit/ndtceda_pt_manager.mhtml:						<a class="dkblue nowrap block" href="/index/results/ndt_ceda_generator.mas?event_id=<% $event->id %>&came_from=manager&delete_only=1&circuit_id=<% $circuit->id %>">Delete</a>
./circuit/ndtceda_pt_manager.mhtml:				<input type="hidden" name="circuit_id" size="5" value="<% $circuit->id %>"> 
./circuit/regions_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/regions_save.mhtml:	foreach my $region ($circuit->regions)  {
./circuit/regions_save.mhtml:		$region->name($ARGS{"name_".$region->id});
./circuit/regions_save.mhtml:		$region->code($ARGS{"code_".$region->id});
./circuit/regions_save.mhtml:		$region->update;
./circuit/regions_save.mhtml:	$m->redirect("regions.mhtml?circuit_id=$circuit_id&msg=$msg");
./circuit/chapter_school_match.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./circuit/chapter_school_match.mhtml:	  $school->chapter($Chpt);
./circuit/chapter_school_match.mhtml:	  $school->update();
./circuit/chapter_school_match.mhtml:	  $m->redirect("chapter_by_tourn.mhtml?tourn_id=$tourn_id&circuit_id=$circuit_id");
./circuit/chapter_school_match.mhtml:	  my $object = Tab::Chapter->create( 
./circuit/chapter_school_match.mhtml:           name => $school->name,
./circuit/chapter_school_match.mhtml:	  my $object2 = Tab::ChapterCircuit->create( 
./circuit/chapter_school_match.mhtml:	   chapter => $object->id,
./circuit/chapter_school_match.mhtml:	   code => $school->name,
./circuit/chapter_school_match.mhtml:   	  $school->chapter($object->id);
./circuit/chapter_school_match.mhtml:	  $school->update();
./circuit/chapter_school_match.mhtml:	  $m->redirect("chapter_by_tourn.mhtml?tourn_id=$tourn_id&circuit_id=$circuit_id");
./circuit/chapter_school_match.mhtml: 	 {@chapters = Tab::Chapter->retrieve_all;}
./circuit/chapter_school_match.mhtml:	 {@chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);}
./circuit/chapter_school_match.mhtml:	#my $dummy=substr($school->name, 0,3);
./circuit/chapter_school_match.mhtml:<h2>Seeking to find a chapter for the school entry "<% $school->name %>"</h2>
./circuit/chapter_school_match.mhtml:%	  if (ShowIt($SearchText, $chapter->name) >-1 ) 			
./circuit/chapter_school_match.mhtml:              <td><% $chapter->id %></td>
./circuit/chapter_school_match.mhtml:              <td><a href="chapter_school_match.mhtml?Save=TRUE&Chpt=<% $chapter->id %>&circuit=<% TrimIt ($circuit_id) %>&school_id=<% TrimIt($school_id) %>&circuit_id=<% $circuit_id %>&tourn_id=<% $tourn_id %>"><% $chapter->name %></a></td>
./circuit/chapter_school_match.mhtml:<br><hr><strong>Still no match?</strong> <a href="chapter_school_match.mhtml?Save=NEW&Chpt=-99&circuit_id=<% TrimIt ($circuit_id) %>&school_id=<% TrimIt($school_id) %>&tourn_id=<% TrimIt($tourn_id) %>">CREATE A NEW CHAPTER IN THE DATABSAE</a>, and please don't click this unless you are really, REALLY sure that there isn't a chapter already.
./circuit/region_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_add.mhtml:		my $region = Tab::Region->create({
./circuit/region_add.mhtml:			my $login = Tab::Login->search( username => $admin)->first;
./circuit/region_add.mhtml:				Tab::Permission->create({
./circuit/region_add.mhtml:					person => $login->person->id,
./circuit/region_add.mhtml:					region => $region->id,
./circuit/region_add.mhtml:		$m->redirect("regions.mhtml?circuit_id=$circuit_id&msg=$msg");
./circuit/region_add.mhtml:		$m->redirect("regions.mhtml?circuit_id=$circuit_id&err=$err");
./circuit/chapters.mhtml:		Tab::Chapter->set_sql( chapter_name => "
./circuit/chapters.mhtml:			@chapters = Tab::Chapter->search_chapter_name($circuit->id, "%".$name."%");
./circuit/chapters.mhtml:		@chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/chapters.mhtml:		<h2>School Search: <% $circuit->abbr %></h2>
./circuit/chapters.mhtml:					<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/chapters.mhtml:								<% $chapter->name %>
./circuit/chapters.mhtml:%								foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, contact => 1)) { 
./circuit/chapters.mhtml:									<a class="nowrap full padless marless white" href="mailto:<% $admin->email %>" title="<% $admin->email %>">
./circuit/chapters.mhtml:											<% $admin->first." ".$admin->last %> 
./circuit/chapters.mhtml:											(<% $admin->email %>)
./circuit/chapters.mhtml:								<% $chapter->state ? $chapter->state."/" : "" %><% $chapter->country %>
./circuit/chapters.mhtml:								<a class="dkblue button" href="chapter_edit.mhtml?chapter_id=<% $chapter->id %>&circuit_id=<% $circuit->id %>">
./circuit/menu.mas:	return unless $circuit && $circuit->id;
./circuit/menu.mas:	my $now = DateTime->now;
./circuit/menu.mas:	my $end = $now->clone;
./circuit/menu.mas:	my $start = $now->clone;
./circuit/menu.mas:	$start->subtract(days => 7);
./circuit/menu.mas:	my $top_year = $now->year;
./circuit/menu.mas:				<% $circuit->abbr %>
./circuit/menu.mas:%			if ($m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, approval => 1)) { 
./circuit/menu.mas:				<a class="yellow full" href="/user/circuit/approvals.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:			<a class="<% $whoami eq "edit" ? "dk" : "" %>blue full" href="index.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:				Edit <% $circuit->name %>
./circuit/menu.mas:			<a class="<% $whoami eq "email" ? "dk" : "" %>blue full" href="emails.mhtml?circuit_id=<% $circuit->id %>&year=<% $year %>">
./circuit/menu.mas:			<a class="<% $whoami eq "compose" ? "dk" : "" %>blue full" href="email_compose.mhtml?circuit_id=<% $circuit->id %>&year=<% $year %>">
./circuit/menu.mas:			<a class="<% $whoami eq "chapters" ? "dk" : "" %>blue full" href="chapters.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:			<a class="<% $whoami eq "tourns" || $whoami eq "tourn_edit" ? "dk" : "" %>blue full" href="tourns.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:				<a class="blue full" href="tourn_results.mhtml?circuit_id=<% $circuit->id %>">Final Places</a>
./circuit/menu.mas:%			if ( $circuit->id == 43 ) {
./circuit/menu.mas:				<a class="blue full" href="ndtceda_pt_manager.mhtml?circuit_id=<% $circuit->id %>">CEDA/NDT point manager</a>
./circuit/menu.mas:%			if ( $circuit->id == 103 ) {
./circuit/menu.mas:				<a class="blue full" href="ndtceda_pt_manager.mhtml?circuit_id=<% $circuit->id %>">ADA point manager</a>
./circuit/menu.mas:			<a class="<% $whoami eq "codes" ? "dk" : "" %>blue full" href="codes.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:			<a class="<% $whoami eq "contacts" ? "dk" : "" %>blue full" href="contacts.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:%			if ($circuit->setting("naudl")) { 
./circuit/menu.mas:				<a class="<% $whoami eq "regions" ? "dk" : "" %>yellow full" href="regions.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:					<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/menu.mas:%			} elsif ($circuit->setting("regions")) { 
./circuit/menu.mas:				<a class="<% $whoami eq "regions" ? "dk" : "" %>yellow full" href="regions.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:%			if ($circuit->id == 58) { 
./circuit/menu.mas:				<a class="martop blue full" href="bdl_student_export.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:%			if ($circuit->setting("ncfl")) { 
./circuit/menu.mas:				<a class="<% $whoami eq "dioceses" ? "dk" : "" %>yellow full" href="dioceses.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:				<a class="<% $whoami eq "cooke" ? "dk" : "" %>yellow full" href="cooke_points.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:%			if ($circuit->setting("judge_training")) { 
./circuit/menu.mas:				<a class="<% $whoami eq "cooke" ? "dk" : "" %>blue nowrap martop full" href="judge_training.mhtml?circuit_id=<% $circuit->id %>">
./circuit/menu.mas:			my $now = DateTime->now;
./circuit/menu.mas:			my $earliest_email = Tab::Email->search_where(
./circuit/menu.mas:				{circuit => $circuit->id},
./circuit/menu.mas:				limit => 1 })->first;
./circuit/menu.mas:			my $start_year = $earliest_email->sent_at->year if $earliest_email;
./circuit/menu.mas:			$start_year-- if $earliest_email && $earliest_email->sent_at->month < 7;
./circuit/menu.mas:					<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/menu.mas:%						foreach my $menu_year ( $start_year .. $now->year ) { 
./circuit/menu.mas:								<% ($year == $menu_year) ? "selected" : "" %> ><% $menu_year."-".($menu_year + 1) %>
./circuit/menu.mas:				<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/permissions_switch.mhtml:	my $admin = Tab::Person->retrieve($admin_id);
./circuit/permissions_switch.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/permissions_switch.mhtml:	my $already = Tab::Permission->search(tourn => $tourn->id, person => $admin->id, tag => $tag);
./circuit/permissions_switch.mhtml:		$already->delete if $inactive;
./circuit/permissions_switch.mhtml:		Tab::Permission->create({
./circuit/permissions_switch.mhtml:			tourn  => $tourn->id,
./circuit/permissions_switch.mhtml:			person => $admin->id,
./circuit/cooke_points.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/cooke_points.mhtml:		<h2><% $circuit->abbr %> Standing Cooke points</h2>
./circuit/cooke_points.mhtml:		<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./circuit/cooke_points.mhtml:%				foreach my $diocese (sort {$b->cooke_pts <=> $a->cooke_pts} $circuit->regions) {
./circuit/cooke_points.mhtml:							<% $diocese->name %>
./circuit/cooke_points.mhtml:%							my $admin = $diocese->admins->first if $diocese->admins;
./circuit/cooke_points.mhtml:								<a class="white" href="mailto:<% $admin->email %>">
./circuit/cooke_points.mhtml:									<% $admin->first." ".$admin->last %>
./circuit/cooke_points.mhtml:							<span class="hidden"><% $diocese->cooke_pts %></span>
./circuit/cooke_points.mhtml:							<input type="number" name="<% $diocese->id %>" size="10" min="0" max="999999" value="<% $diocese->cooke_pts %>">
./circuit/access_add.mhtml:		my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/access_add.mhtml:		$m->abort unless $tourn;
./circuit/access_add.mhtml:		my $staff = Tab::Person->search( email => $email )->first;
./circuit/access_add.mhtml:			$m->redirect("access.mhtml?err=$err");
./circuit/access_add.mhtml:		my $already = Tab::Permission->search( tag => "tourn", person => $staff->id, tourn => $tourn_id )->first;
./circuit/access_add.mhtml:			my $access = Tab::Permission->create({
./circuit/access_add.mhtml:				person => $staff->id,
./circuit/access_add.mhtml:			$msg = $staff->first." ".$staff->last." has been added to your tournament staff as data entry only";
./circuit/access_add.mhtml:		$m->comp("/funclib/update_calendar.mas", tourn => $tourn);
./circuit/access_add.mhtml:	$m->redirect("access.mhtml?circuit_id=".$circuit->id."&tourn_id=$tourn_id&msg=$msg");
./tourn/location.mhtml:	foreach my $circuit (Tab::Circuit->search( active => 1) ) { 
./tourn/location.mhtml:		if ($ARGS{$circuit->id}) { 
./tourn/location.mhtml:			$circuit_string .= "-" if $circuit_string;
./tourn/location.mhtml:			$circuit_string .= $circuit->id;
./tourn/location.mhtml:			push (@sites, $circuit->sites);
./tourn/location.mhtml:	foreach my $circuit_id (split(/-/, $circuit_string)) { 
./tourn/location.mhtml:		my $circuit = Tab::Circuit->retrieve($circuit_id);
./tourn/location.mhtml:		push (@sites, $circuit->sites);
./tourn/location.mhtml:    @sites = grep { ! $seen{$_->id} ++ } @sites;
./tourn/location.mhtml:	@sites = sort {$a->name cmp $b->name} @sites;
./tourn/location.mhtml:    @circuits = grep { ! $seen{$_->id} ++ } @circuits;
./tourn/location.mhtml:	@circuits = sort {$a->name cmp $b->name} @circuits;
./tourn/location.mhtml:  	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
./tourn/location.mhtml:    my $enddt = DateTime::Format::MySQL->parse_datetime($end);
./tourn/location.mhtml:    my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
./tourn/location.mhtml:    my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
./tourn/location.mhtml:    my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
./tourn/location.mhtml:    my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
./tourn/location.mhtml:    my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
./tourn/location.mhtml:    my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);
./tourn/location.mhtml:    $startdt->set_time_zone($tz);
./tourn/location.mhtml:    $enddt->set_time_zone($tz);
./tourn/location.mhtml:    $reg_startdt->set_time_zone($tz);
./tourn/location.mhtml:    $reg_enddt->set_time_zone($tz);
./tourn/location.mhtml:    $frozendt->set_time_zone($tz);
./tourn/location.mhtml:    $finesdt->set_time_zone($tz);
./tourn/location.mhtml:    $judgedt->set_time_zone($tz);
./tourn/location.mhtml:    $dropsdt->set_time_zone($tz);
./tourn/location.mhtml:		$m->redirect("circuits.mhtml?name=$name&webname=$webname&start=".Tab::DBI::date_deflate($startdt)."&end=".Tab::DBI::date_deflate($enddt)."&reg_start=".Tab::DBI::date_deflate($reg_startdt)."&reg_end=".Tab::DBI::date_deflate($reg_enddt)."&drops=".Tab::DBI::date_deflate($dropsdt)."&judge=".Tab::DBI::date_deflate($judgedt)."&frozen=".Tab::DBI::date_deflate($frozendt)."&fines=".Tab::DBI::date_deflate($finesdt)."&spam=1");
./tourn/location.mhtml:					This will auto-import existing rooms:
./tourn/location.mhtml:%					foreach my $site (sort {$a->name cmp $b->name} (@sites)) { 
./tourn/location.mhtml:						<option value="<% $site->id %>"> <% $site->name %> </option>
./tourn/location.mhtml:						<% $notfirst++ ? "," : "" %> <% $circuit->abbr %>
./tourn/upload_tourn.mhtml:	Tab::Student->columns(TEMP => qw/cat_id/);
./tourn/upload_tourn.mhtml:	my $now = DateTime->now;
./tourn/upload_tourn.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/upload_tourn.mhtml:	$now->set_time_zone($tz);
./tourn/upload_tourn.mhtml:	my $req = Apache2::Request->new($r);
./tourn/upload_tourn.mhtml:	my @xml_handles = $r->upload;
./tourn/upload_tourn.mhtml:	my $xml_file = $req->upload($xml_handles[0]);
./tourn/upload_tourn.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/upload_tourn.mhtml:	my $epoch = $now->epoch;
./tourn/upload_tourn.mhtml:	system "/bin/mkdir -p ".$Tab::file_root."tmp/$epoch";
./tourn/upload_tourn.mhtml:	my $data = $xml->XMLin($Tab::file_root."tmp/$epoch/TourneyData.xml");
./tourn/upload_tourn.mhtml:		unless (Tab::Permission->search_where( person => $person->id, tourn => $tourn->id,  tag => {"!=", "entry_only" }))  { 
./tourn/upload_tourn.mhtml:			$m->print("NOT_AUTHORIZED");
./tourn/upload_tourn.mhtml:			$m->abort;
./tourn/upload_tourn.mhtml:		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{STARTDATE});
./tourn/upload_tourn.mhtml:			$start = Tab::dateme($data->{TOURN}->{STARTDATE});
./tourn/upload_tourn.mhtml:			$end = Tab::dateme($data->{TOURN}->{ENDDATE});
./tourn/upload_tourn.mhtml:			$start = DateTime->now;
./tourn/upload_tourn.mhtml:			while ($start->day_of_week != 6) { 
./tourn/upload_tourn.mhtml:				$start->subtract( days => 1);
./tourn/upload_tourn.mhtml:			$end = $start->clone;
./tourn/upload_tourn.mhtml:			$end->add(days => 2);
./tourn/upload_tourn.mhtml:		$start->set_time_zone($tz);
./tourn/upload_tourn.mhtml:		$end->set_time_zone($tz);
./tourn/upload_tourn.mhtml:		$start->set( hour => 8, minute => 0);
./tourn/upload_tourn.mhtml:		$end->set( hour => 22, minute => 0);
./tourn/upload_tourn.mhtml:		my $reg_start = $start->clone;
./tourn/upload_tourn.mhtml:		$reg_start->subtract( months => 2);
./tourn/upload_tourn.mhtml:		my $reg_end = $end->clone;
./tourn/upload_tourn.mhtml:		$reg_end->subtract( weeks => 1);
./tourn/upload_tourn.mhtml:		my %tournament_settings = map {$_->{TAG}, $_->{VALUE}} @{$data->{TOURN_SETTING}};
./tourn/upload_tourn.mhtml:			$tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/upload_tourn.mhtml:			$tourn = Tab::Tourn->create({
./tourn/upload_tourn.mhtml:				name         => $data->{TOURN}->{TOURNNAME},
./tourn/upload_tourn.mhtml:			my $contact = Tab::Permission->create({ person => $person->id, tourn => $tourn->id, tag => "contact" });
./tourn/upload_tourn.mhtml:			my $owner = Tab::Permission->create({ person => $person->id, tourn => $tourn->id, tag => "owner" });
./tourn/upload_tourn.mhtml:			my $sname = $tourn->name;
./tourn/upload_tourn.mhtml:			my $site = Tab::Site->search( name => $sname )->first;
./tourn/upload_tourn.mhtml:				$site = Tab::Site->create({
./tourn/upload_tourn.mhtml:					host => $person->id
./tourn/upload_tourn.mhtml:			my $tsite = Tab::TournSite->create({
./tourn/upload_tourn.mhtml:				site  => $site->id,
./tourn/upload_tourn.mhtml:				tourn => $tourn->id
./tourn/upload_tourn.mhtml:		$category = Tab::Category->create({
./tourn/upload_tourn.mhtml:			tourn => $tourn->id,
./tourn/upload_tourn.mhtml:		$category->setting("no_codes", 1); #for debate this is almost always sensible
./tourn/upload_tourn.mhtml:		$category->setting("prefs", "tiered"); #this is the most common import style for TRPC
./tourn/upload_tourn.mhtml:   		my @events = @{$data->{EVENT}};
./tourn/upload_tourn.mhtml:			my $type = lc($xml_event->{TYPE});
./tourn/upload_tourn.mhtml:			$type = "ld" if $type eq "lincoln-douglas";
./tourn/upload_tourn.mhtml:			$type = "ld" if $type eq "lincoln-douglass";
./tourn/upload_tourn.mhtml:			my $event = Tab::Event->create({
./tourn/upload_tourn.mhtml:				tourn       => $tourn->id,
./tourn/upload_tourn.mhtml:				name        => $xml_event->{EVENTNAME},
./tourn/upload_tourn.mhtml:				abbr        => $xml_event->{ABBR},
./tourn/upload_tourn.mhtml:				category => $category->id
./tourn/upload_tourn.mhtml:			$event_by_id{$xml_event->{ID}} = $event;
./tourn/upload_tourn.mhtml:			$event_by_id{$event->id} = $event;
./tourn/upload_tourn.mhtml:			$m->print("Event ".$xml_event->{EVENTNAME}." has been created<br />") if $debug;
./tourn/upload_tourn.mhtml:			$event->setting("code_style", "initials"); #for debate this is almost always sensible
./tourn/upload_tourn.mhtml:			$event->setting("min_points", 1);
./tourn/upload_tourn.mhtml:			$event->setting("max_points", 30);
./tourn/upload_tourn.mhtml:			$event->setting("point_increments", "tenths");  #this allows us to accept whatever
./tourn/upload_tourn.mhtml:	my @tournament_settings = @{$data->{TOURN_SETTING}};
./tourn/upload_tourn.mhtml:		if ($setting->{TAG} eq "DownloadSite" || $setting->{TAG} eq "Online" || $setting->{TAG} eq "TourneyType" ||
./tourn/upload_tourn.mhtml:			$setting->{TAG} eq "SuppressNavMessages" || $setting->{TAG} eq "UseActualTime" || $setting->{TAG} eq "CrossEventEntry") { 
./tourn/upload_tourn.mhtml:			$tourn->setting($setting->{TAG}, lc($setting->{VALUE}) );
./tourn/upload_tourn.mhtml:	foreach my $tiebreak_set ($tourn->tiebreak_sets) { 
./tourn/upload_tourn.mhtml:		$tiebreak_set_by_id{$tiebreak_set->id} = $tiebreak_set;
./tourn/upload_tourn.mhtml:		foreach my $tb ($tiebreak_set->tiebreaks) { 
./tourn/upload_tourn.mhtml:			$tb->delete;
./tourn/upload_tourn.mhtml:	my @tiebreak_sets = @{$data->{TIEBREAK_SET}};
./tourn/upload_tourn.mhtml:		my $id = $xml_tiebreak_set->{ID};
./tourn/upload_tourn.mhtml:		my $name = $xml_tiebreak_set->{TBSET_NAME};
./tourn/upload_tourn.mhtml:		my $type = $xml_tiebreak_set->{SCOREFOR};
./tourn/upload_tourn.mhtml:		my $elim = $xml_tiebreak_set->{ELIM};
./tourn/upload_tourn.mhtml:		$name = "Debate Prelims" if $name eq "2 teams - Team Prelims";
./tourn/upload_tourn.mhtml:		$name = "Debate Speakers" if $name eq "2 teams - Speakers";
./tourn/upload_tourn.mhtml:		my $tiebreak_set = Tab::TiebreakSet->search( name => $name, tourn => $tourn->id)->first;
./tourn/upload_tourn.mhtml:		$tiebreak_set = Tab::TiebreakSet->create({
./tourn/upload_tourn.mhtml:			tourn => $tourn->id,
./tourn/upload_tourn.mhtml:		$tiebreak_set_by_id{$tiebreak_set->id} = $tiebreak_set;
./tourn/upload_tourn.mhtml:	my @tbs = @{$data->{TIEBREAK}};
./tourn/upload_tourn.mhtml:		my $name = $xml_tb->{LABEL};
./tourn/upload_tourn.mhtml:		my $priority = $xml_tb->{SortOrder};
./tourn/upload_tourn.mhtml:		my $tiebreak_set_id = $xml_tb->{TB_SET};
./tourn/upload_tourn.mhtml:		} elsif ($name eq "High-Low Speaker Points") { 
./tourn/upload_tourn.mhtml:		} elsif ($name eq "2x High-Low Speaker Points") { 
./tourn/upload_tourn.mhtml:		my $tb = Tab::Tiebreak->create({
./tourn/upload_tourn.mhtml:			tiebreak_set        => $tiebreak_set->id,
./tourn/upload_tourn.mhtml:		$elim_tiebreak_set = Tab::TiebreakSet->search({ name => "Debate Elims", tourn => $tourn->id })->first;
./tourn/upload_tourn.mhtml:		$elim_tiebreak_set = Tab::TiebreakSet->create({
./tourn/upload_tourn.mhtml:			tourn => $tourn->id,
./tourn/upload_tourn.mhtml:		my @tiebreaks = $elim_tiebreak_set->tiebreaks if $elim_tiebreak_set;;
./tourn/upload_tourn.mhtml:			my $tiebreak = Tab::Tiebreak->create({
./tourn/upload_tourn.mhtml:				tiebreak_set        => $elim_tiebreak_set->id,
./tourn/upload_tourn.mhtml:	foreach my $timeslot ($tourn->timeslots) { 
./tourn/upload_tourn.mhtml:		$timeslot_by_id{$timeslot->id} = $timeslot;
./tourn/upload_tourn.mhtml:	my $stepper = $tourn->start;
./tourn/upload_tourn.mhtml:	foreach my $xml_timeslot (@{$data->{TIMESLOT}}) { 
./tourn/upload_tourn.mhtml:		my $timeslot = $timeslot_by_id{$xml_timeslot->{ID}};
./tourn/upload_tourn.mhtml:		unless ($timeslot && $timeslot->tourn->id == $tourn->id) { 
./tourn/upload_tourn.mhtml:			my $tz = $tourn->tz;
./tourn/upload_tourn.mhtml:			$start = Tab::xmldtme($xml_timeslot->{START}, $tz) if $xml_timeslot->{START};
./tourn/upload_tourn.mhtml:			$end = Tab::xmldtme($xml_timeslot->{END}, $tz) if $xml_timeslot->{END};
./tourn/upload_tourn.mhtml:				$start = $stepper->clone;
./tourn/upload_tourn.mhtml:				$stepper->add( hours => 2 );
./tourn/upload_tourn.mhtml:			if ($start->hour > 20) { 
./tourn/upload_tourn.mhtml:				$start->add( days => 1 );
./tourn/upload_tourn.mhtml:				$start->set( hour => 8, minute => 0);
./tourn/upload_tourn.mhtml:				$stepper->set( hour => 10, minute => 0);
./tourn/upload_tourn.mhtml:				$stepper->add( days => 1 );
./tourn/upload_tourn.mhtml:				$end = $start->clone;
./tourn/upload_tourn.mhtml:				$end->add( hours => 1, minutes => 55 );
./tourn/upload_tourn.mhtml:			$timeslot = Tab::Timeslot->search( start => $start, end => $end, tourn => $tourn->id)->first;
./tourn/upload_tourn.mhtml:			$timeslot = Tab::Timeslot->create({
./tourn/upload_tourn.mhtml:				name => $xml_timeslot->{TIMESLOTNAME},
./tourn/upload_tourn.mhtml:				tourn => $tourn->id
./tourn/upload_tourn.mhtml:			$timeslot_by_id{$xml_timeslot->{ID}} = $timeslot;
./tourn/upload_tourn.mhtml:			$used_timeslots{$xml_timeslot->{ID}}++;
./tourn/upload_tourn.mhtml:			$used_timeslots{$timeslot->id}++;
./tourn/upload_tourn.mhtml:			my $tz = $tourn->tz;
./tourn/upload_tourn.mhtml:			my $start = Tab::xmldtme($xml_timeslot->{START}, $tz);
./tourn/upload_tourn.mhtml:			my $end = Tab::xmldtme($xml_timeslot->{END}, $tz);
./tourn/upload_tourn.mhtml:			$timeslot->start($start);
./tourn/upload_tourn.mhtml:			$timeslot->end($end);
./tourn/upload_tourn.mhtml:			$timeslot->name( $xml_timeslot->{TIMESLOTNAME} );
./tourn/upload_tourn.mhtml:			$timeslot->update;
./tourn/upload_tourn.mhtml:	foreach my $school ($tourn->schools) { 
./tourn/upload_tourn.mhtml:		$school_by_id{$school->id} = $school;
./tourn/upload_tourn.mhtml:	foreach my $xml_school (@{$data->{SCHOOL}}) { 
./tourn/upload_tourn.mhtml:		next if $xml_school->{ID} == -1;
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{$xml_school->{ID}};
./tourn/upload_tourn.mhtml:		unless ($school && $school->tourn->id == $tourn->id) { 
./tourn/upload_tourn.mhtml:			my $chapter = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} )->first;
./tourn/upload_tourn.mhtml:				$chapter = Tab::Chapter->create({
./tourn/upload_tourn.mhtml:					name => $xml_school->{SCHOOLNAME}
./tourn/upload_tourn.mhtml:			my $school = Tab::School->search( name => $xml_school->{SCHOOLNAME}, tourn => $tourn->id )->first;
./tourn/upload_tourn.mhtml:				$school = Tab::School->create({
./tourn/upload_tourn.mhtml:					name    => $xml_school->{SCHOOLNAME},
./tourn/upload_tourn.mhtml:					code    => $xml_school->{CODE},
./tourn/upload_tourn.mhtml:					chapter => $chapter->id,
./tourn/upload_tourn.mhtml:					tourn   => $tourn->id,
./tourn/upload_tourn.mhtml:			$school_by_id{$xml_school->{ID}} = $school;
./tourn/upload_tourn.mhtml:			$school->name( $xml_school->{SCHOOLNAME} );
./tourn/upload_tourn.mhtml:			$school->code( $xml_school->{CODE} );
./tourn/upload_tourn.mhtml:			$school->update
./tourn/upload_tourn.mhtml:	foreach my $student ($m->comp("/funclib/tourn_students.mas", tourn => $tourn)) { 
./tourn/upload_tourn.mhtml:		$student_by_id{$student->id} = $student;
./tourn/upload_tourn.mhtml:	foreach my $xml_student (@{$data->{ENTRY_STUDENT}}) { 
./tourn/upload_tourn.mhtml:		my $student = $student_by_id{$xml_student->{ID}};
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_student->{SCHOOL}}[0]};
./tourn/upload_tourn.mhtml:			$student = Tab::Student->search(   
./tourn/upload_tourn.mhtml:				first   => $xml_student->{FIRST},
./tourn/upload_tourn.mhtml:				last    => $xml_student->{LAST},
./tourn/upload_tourn.mhtml:				chapter => $school->chapter->id )->first;
./tourn/upload_tourn.mhtml:				my $first = $xml_student->{FIRST};
./tourn/upload_tourn.mhtml:				my $last = $xml_student->{LAST};
./tourn/upload_tourn.mhtml:				$first = "-" unless $first;
./tourn/upload_tourn.mhtml:				$student = Tab::Student->create({
./tourn/upload_tourn.mhtml:					 last    => $xml_student->{LAST},
./tourn/upload_tourn.mhtml:					 chapter => $school->chapter->id
./tourn/upload_tourn.mhtml:			$student_by_id{$student->id} = $student;
./tourn/upload_tourn.mhtml:			$student->first( $xml_student->{FIRST} );
./tourn/upload_tourn.mhtml:			$student->last( $xml_student->{LAST} );
./tourn/upload_tourn.mhtml:			$student->update;
./tourn/upload_tourn.mhtml:		$student_by_cat_id{$xml_student->{ID}} = $student;
./tourn/upload_tourn.mhtml:		push @{$students_by_entry{$xml_student->{ENTRY}}}, $student;
./tourn/upload_tourn.mhtml:		$student->cat_id($xml_student->{ID});
./tourn/upload_tourn.mhtml:	foreach my $event ($tourn->events) { 
./tourn/upload_tourn.mhtml:		$event_by_id{$event->id} = $event;
./tourn/upload_tourn.mhtml:	foreach my $xml_event (@{$data->{EVENT}}) { 
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{$xml_event->{ID}};
./tourn/upload_tourn.mhtml:			my $type = lc($xml_event->{TYPE});
./tourn/upload_tourn.mhtml:			$type = "ld" if $type eq "lincoln-douglas";
./tourn/upload_tourn.mhtml:			$category = $event->category;
./tourn/upload_tourn.mhtml:			$event->name( $xml_event->{EVENTNAME} );
./tourn/upload_tourn.mhtml:			$event->abbr( $xml_event->{ABBR} );
./tourn/upload_tourn.mhtml:			$event->type($type);
./tourn/upload_tourn.mhtml:			$event->update;
./tourn/upload_tourn.mhtml:			push (@rounds, $event->rounds);
./tourn/upload_tourn.mhtml:		my @event_settings = @{$data->{EVENT_SETTING}};
./tourn/upload_tourn.mhtml:			next unless $setting->{EVENT} == $event->id;
./tourn/upload_tourn.mhtml:			$event->setting($setting->{TAG}, lc($setting->{VALUE}) );
./tourn/upload_tourn.mhtml:		$event->setting("speaker_tbset", $speaker_tiebreak_set->id) if $speaker_tiebreak_set;
./tourn/upload_tourn.mhtml:		foreach my $entry ($event->entries( waitlist => 0,  dropped => 0)) {
./tourn/upload_tourn.mhtml:			$entry_by_id{$entry->id} = $entry;
./tourn/upload_tourn.mhtml:	foreach my $xml_entry (@{$data->{ENTRY}}) { 
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_entry->{ID}};
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{@{$xml_entry->{EVENT}}[0]};
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_entry->{SCHOOL}}[0]};
./tourn/upload_tourn.mhtml:		$entry = Tab::Entry->search( event => $event->id, code => $xml_entry->{CODE} )->first unless $entry;
./tourn/upload_tourn.mhtml:		unless ($entry && $entry->event->tourn->id == $tourn->id) { 
./tourn/upload_tourn.mhtml:			$dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";
./tourn/upload_tourn.mhtml:			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
./tourn/upload_tourn.mhtml:			$entry = Tab::Entry->create({
./tourn/upload_tourn.mhtml:				 code    => $xml_entry->{FULLNAME},
./tourn/upload_tourn.mhtml:				 event   => $event->id,
./tourn/upload_tourn.mhtml:				 school  => $school->id,
./tourn/upload_tourn.mhtml:			$entry->setting("pairing_seed", $xml_entry->{RATING});
./tourn/upload_tourn.mhtml:			$used_entries{$xml_entry->{ID}}++;
./tourn/upload_tourn.mhtml:			$entry_by_id{$xml_entry->{ID}} = $entry;
./tourn/upload_tourn.mhtml:			$entry_by_id{$xml_entry->{ID}} = $entry;
./tourn/upload_tourn.mhtml:			$used_entries{$xml_entry->{ID}}++;
./tourn/upload_tourn.mhtml:			$used_entries{$entry->id}++;
./tourn/upload_tourn.mhtml:			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
./tourn/upload_tourn.mhtml:			my $dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";
./tourn/upload_tourn.mhtml:			$entry->code($xml_entry->{FULLNAME}); 
./tourn/upload_tourn.mhtml:			$entry->setting("pairing_seed", $xml_entry->{RATING});
./tourn/upload_tourn.mhtml:			$entry->school($school->id);
./tourn/upload_tourn.mhtml:			$entry->event($event->id);
./tourn/upload_tourn.mhtml:			$entry->ada($ada);
./tourn/upload_tourn.mhtml:			$entry->dropped($dropped);
./tourn/upload_tourn.mhtml:			$entry->update;
./tourn/upload_tourn.mhtml:		my @students = @{$students_by_entry{$xml_entry->{ID}}} if $students_by_entry{$xml_entry->{ID}};
./tourn/upload_tourn.mhtml:		foreach my $entry_student ($entry->entry_students) { 
./tourn/upload_tourn.mhtml:				$ok++ if $student->id == $entry_student->student->id;
./tourn/upload_tourn.mhtml:			$entry_student->delete unless $ok;
./tourn/upload_tourn.mhtml:			$first = $student->first;
./tourn/upload_tourn.mhtml:			$last .= $student->last;
./tourn/upload_tourn.mhtml:			foreach my $entry_student ($entry->entry_students) { 
./tourn/upload_tourn.mhtml:				$ok++ if $student->id == $entry_student->student->id;
./tourn/upload_tourn.mhtml:				Tab::EntryStudent->create({ entry => $entry, student => $student});
./tourn/upload_tourn.mhtml:		$entry->name($first." ".$last) if $first;
./tourn/upload_tourn.mhtml:		$entry->name($last) unless $last;
./tourn/upload_tourn.mhtml:		$entry->update;
./tourn/upload_tourn.mhtml:		$m->comp("/funclib/event_rename.mas",  event => $event_by_id{$id}, from => "importer");
./tourn/upload_tourn.mhtml:		$entry_by_id{$entry_id}->delete;
./tourn/upload_tourn.mhtml:	foreach my $judge ($category->judges) { 
./tourn/upload_tourn.mhtml:		$judge_by_id{$judge->id} = $judge;
./tourn/upload_tourn.mhtml:    Tab::JudgeSetting->set_sql(upload_id => "
./tourn/upload_tourn.mhtml:    foreach my $setting (Tab::JudgeSetting->search_upload_id( $category->id )) { 
./tourn/upload_tourn.mhtml:        $judge_id_translator{$setting->judge->id} = $setting->value;
./tourn/upload_tourn.mhtml:	foreach my $xml_judge (@{$data->{JUDGE}}) { 
./tourn/upload_tourn.mhtml:		my $judge = $judge_by_id{$xml_judge->{ID}};
./tourn/upload_tourn.mhtml:		if ($judge_id_translator{$xml_judge->{ID}}) { 
./tourn/upload_tourn.mhtml:			my $judge_me_maybe = Tab::Judge->retrieve($xml_judge->{ID});
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_judge->{SCHOOL}}[0]};
./tourn/upload_tourn.mhtml:		$active = 0 if $xml_judge->{STOPSCHEDULING} eq "true";
./tourn/upload_tourn.mhtml:		my $first = $xml_judge->{FIRST};
./tourn/upload_tourn.mhtml:		my $last = $xml_judge->{LAST};
./tourn/upload_tourn.mhtml:		unless ($judge && $judge->category->id == $category->id) { 
./tourn/upload_tourn.mhtml:			$judge = Tab::Judge->create({
./tourn/upload_tourn.mhtml:				category => $category->id,
./tourn/upload_tourn.mhtml:				obligation  => $xml_judge->{OBLIGATION},
./tourn/upload_tourn.mhtml:				hired       => $xml_judge->{HIRED},
./tourn/upload_tourn.mhtml:			$judge->setting("upload_id", $xml_judge->{ID});
./tourn/upload_tourn.mhtml:			$judge_by_id{$xml_judge->{ID}} = $judge;
./tourn/upload_tourn.mhtml:			$used_judge{$xml_judge->{ID}}++;
./tourn/upload_tourn.mhtml:			$rating_type = $judge->category->setting("prefs") unless $rating_type;
./tourn/upload_tourn.mhtml:			$judge->first($xml_judge->{FIRST});
./tourn/upload_tourn.mhtml:			$judge->last($xml_judge->{LAST});
./tourn/upload_tourn.mhtml:			$judge->school($school);
./tourn/upload_tourn.mhtml:			$judge->obligation($xml_judge->{OBLIGATION});
./tourn/upload_tourn.mhtml:			$judge->hired($xml_judge->{HIRED});
./tourn/upload_tourn.mhtml:			$judge->update;
./tourn/upload_tourn.mhtml:			$judge->setting("notes", $xml_judge->{NOTES});
./tourn/upload_tourn.mhtml:			$used_judge{$judge->id}++;
./tourn/upload_tourn.mhtml:	    my @time_strikes =  $tourn->strikes( judge => $judge->id, type => "time"); 
./tourn/upload_tourn.mhtml:			next unless $timeslot->id;
./tourn/upload_tourn.mhtml:			my $key = "TIMESLOT".$timeslot->id;
./tourn/upload_tourn.mhtml:			if ($xml_judge->{$key} && lc($xml_judge->{$key}) eq "false") {
./tourn/upload_tourn.mhtml:					$already++ if ($ts->start < $timeslot->end && $ts->end > $timeslot->start);
./tourn/upload_tourn.mhtml:					$used_strikes{$ts->id}++ if $already;
./tourn/upload_tourn.mhtml:					Tab::Strike->create({
./tourn/upload_tourn.mhtml:						judge => $judge->id,
./tourn/upload_tourn.mhtml:						tourn => $tourn->id,
./tourn/upload_tourn.mhtml:						start => $timeslot->start->set_time_zone($tourn->tz),
./tourn/upload_tourn.mhtml:						end   => $timeslot->end->set_time_zone($tourn->tz)
./tourn/upload_tourn.mhtml:			$ts->delete unless $used_strikes{$ts->id};
./tourn/upload_tourn.mhtml:		foreach my $es (Tab::Strike->search( judge => $judge->id, type => "event" )) { 
./tourn/upload_tourn.mhtml:			$event_strikes{$es->id} = $es;
./tourn/upload_tourn.mhtml:		foreach my $event ($tourn->events) { 
./tourn/upload_tourn.mhtml:			my $key = "EVENT".$event->id;
./tourn/upload_tourn.mhtml:			my $already = $event_strikes{$event->id};
./tourn/upload_tourn.mhtml:			if ($xml_judge->{$key} && lc($xml_judge->{$key}) eq "false") {
./tourn/upload_tourn.mhtml:				Tab::Strike->create({
./tourn/upload_tourn.mhtml:					event => $event->id,
./tourn/upload_tourn.mhtml:					judge => $judge->id,
./tourn/upload_tourn.mhtml:					tourn => $tourn->id
./tourn/upload_tourn.mhtml:				$already->delete if $already;
./tourn/upload_tourn.mhtml:		$judge_by_id{$judge_id}->delete;
./tourn/upload_tourn.mhtml:		foreach my $rating ($m->comp("/funclib/event_ratings.mas", event => $event)) { 
./tourn/upload_tourn.mhtml:			$rating_by_id{$rating->id} = $rating;
./tourn/upload_tourn.mhtml:	foreach my $tier ($m->comp("/funclib/tourn_rating_tiers.mas", tourn => $tourn)) { 
./tourn/upload_tourn.mhtml:		$tier_by_name{$tier->name} = $tier;
./tourn/upload_tourn.mhtml:		foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 
./tourn/upload_tourn.mhtml:			next unless $xml_rating->{RATING};
./tourn/upload_tourn.mhtml:			next if $tier_by_name{$xml_rating->{RATING}};
./tourn/upload_tourn.mhtml:			my $tier = Tab::RatingTier->create({
./tourn/upload_tourn.mhtml:				name        => $xml_rating->{RATING},
./tourn/upload_tourn.mhtml:				category => $category->id,
./tourn/upload_tourn.mhtml:			$tier_by_name{$xml_rating->{RATING}} = $tier;
./tourn/upload_tourn.mhtml:	foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 
./tourn/upload_tourn.mhtml:		my $rating = $rating_by_id{$xml_rating->{ID}};
./tourn/upload_tourn.mhtml:		unless ($rating && $rating->judge->category->tourn->id == $tourn->id) { 
./tourn/upload_tourn.mhtml:			next if $xml_rating->{RATING} == 333;
./tourn/upload_tourn.mhtml:			my $conflict++ if $xml_rating->{RATING} == 999;
./tourn/upload_tourn.mhtml:			$ordinal = $xml_rating->{RATING} if $rating_type eq "ordinals";
./tourn/upload_tourn.mhtml:			my $tier = $tier_by_name{$xml_rating->{RATING}} if $rating_type eq "tiered";
./tourn/upload_tourn.mhtml:			my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
./tourn/upload_tourn.mhtml:			my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};
./tourn/upload_tourn.mhtml:				unless (Tab::Strike->search( judge => $judge, entry => $entry, type => "conflict")) { 
./tourn/upload_tourn.mhtml:					Tab::Strike->create({
./tourn/upload_tourn.mhtml:						tourn => $tourn->id,
./tourn/upload_tourn.mhtml:				$rating = Tab::Rating->create({
./tourn/upload_tourn.mhtml:					tourn       => $tourn->id,
./tourn/upload_tourn.mhtml:			$rating_by_id{$xml_rating->{ID}} = $rating;
./tourn/upload_tourn.mhtml:			$used_rating{$xml_rating->{ID}}++;
./tourn/upload_tourn.mhtml:			if ($xml_rating->{RATING} == 333) { 
./tourn/upload_tourn.mhtml:				$rating->delete;
./tourn/upload_tourn.mhtml:				my $ordinal = $xml_rating->{RATING} if $rating_type eq "ordinals";
./tourn/upload_tourn.mhtml:				my $percentile = $xml_rating->{ORDPCT} if $rating_type eq "ordinals";
./tourn/upload_tourn.mhtml:				my $tier = $tier_by_name{$xml_rating->{RATING}}->id if ($rating_type eq "tiered");
./tourn/upload_tourn.mhtml:				my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
./tourn/upload_tourn.mhtml:				my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};
./tourn/upload_tourn.mhtml:					$rating->delete;
./tourn/upload_tourn.mhtml:					$rating->entry($entry);
./tourn/upload_tourn.mhtml:					$rating->judge($judge);
./tourn/upload_tourn.mhtml:					$rating->rating_tier($tier);
./tourn/upload_tourn.mhtml:					$rating->ordinal($ordinal);
./tourn/upload_tourn.mhtml:					$rating->percentile($percentile);
./tourn/upload_tourn.mhtml:					$rating->update;
./tourn/upload_tourn.mhtml:			$used_rating{$xml_rating->{ID}}++;
./tourn/upload_tourn.mhtml:		$rating_by_id{$rating_id}->delete;
./tourn/upload_tourn.mhtml:	foreach my $site ($tourn->sites) { 
./tourn/upload_tourn.mhtml:		push @rooms, $site->rooms;
./tourn/upload_tourn.mhtml:		$ok_sites{$site->id}++;
./tourn/upload_tourn.mhtml:		$default_site_id = $site->id unless $default_site_id;
./tourn/upload_tourn.mhtml:		$room_by_id{$room->id} = $room;
./tourn/upload_tourn.mhtml:		$rooms_by_name{$room->name} = $room;
./tourn/upload_tourn.mhtml:	foreach my $xml_room (@{$data->{ROOM}}) { 
./tourn/upload_tourn.mhtml:		my $room = $room_by_id{$xml_room->{ID}};
./tourn/upload_tourn.mhtml:		$room = $rooms_by_name{$xml_room->{ROOMNAME}} unless $room;
./tourn/upload_tourn.mhtml:		unless ($room && $ok_sites{$room->site->id} ) { 
./tourn/upload_tourn.mhtml:			$inactive = 1 if $xml_room->{INACTIVE} eq "true";
./tourn/upload_tourn.mhtml:			$room = Tab::Room->create({
./tourn/upload_tourn.mhtml:				name     => $xml_room->{ROOMNAME},
./tourn/upload_tourn.mhtml:				capacity => $xml_room->{CAPACITY},
./tourn/upload_tourn.mhtml:				quality  => $xml_room->{QUALITY},
./tourn/upload_tourn.mhtml:				building => $xml_room->{BUILDING},
./tourn/upload_tourn.mhtml:				notes    => $xml_room->{NOTES},
./tourn/upload_tourn.mhtml:			$room_by_id{$xml_room->{ID}} = $room;
./tourn/upload_tourn.mhtml:			my $inactive = 1 if $xml_room->{INACTIVE} eq "true";
./tourn/upload_tourn.mhtml:			$room->name( $xml_room->{ROOMNAME} );
./tourn/upload_tourn.mhtml:			$room->capacity( $xml_room->{CAPACITY} );
./tourn/upload_tourn.mhtml:			$room->quality( $xml_room->{QUALITY} );
./tourn/upload_tourn.mhtml:			$room->building( $xml_room->{BUILDING} );
./tourn/upload_tourn.mhtml:			$room->inactive( $inactive );
./tourn/upload_tourn.mhtml:			$room->update;
./tourn/upload_tourn.mhtml:			$room_by_id{$xml_room->{ID}} = $room;
./tourn/upload_tourn.mhtml:		$round_by_id{$round->id} = $round;
./tourn/upload_tourn.mhtml:		$round_by_cat_id{$round->setting("cat_id")} = $round;
./tourn/upload_tourn.mhtml:	foreach my $xml_round (@{$data->{ROUND}}) { 
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_round->{ID}};
./tourn/upload_tourn.mhtml:		$round = $round_by_cat_id{$xml_round->{ID}} unless $round;
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{${$xml_round->{EVENT}}[0]};
./tourn/upload_tourn.mhtml:		my $timeslot = $timeslot_by_id{$xml_round->{TIMESLOT}};
./tourn/upload_tourn.mhtml:		my $type = lc($xml_round->{PAIRINGSCHEME});
./tourn/upload_tourn.mhtml:		my $tiebreak_set = $tiebreak_set_by_id{$xml_round->{TB_SET}};
./tourn/upload_tourn.mhtml:		$tiebreak_set = $tiebreak_set_by_cat_id{$xml_round->{TB_SET}} unless $tiebreak_set;
./tourn/upload_tourn.mhtml:		unless ($round && $round->event == $event->id && $round->event->tourn->id == $tourn->id) { 
./tourn/upload_tourn.mhtml:			my $e_name = $event->name." ";
./tourn/upload_tourn.mhtml:			my $label = $xml_round->{LABEL};
./tourn/upload_tourn.mhtml:			$round = Tab::Round->create({
./tourn/upload_tourn.mhtml:				name     => $xml_round->{RD_NAME},
./tourn/upload_tourn.mhtml:				flighted => $xml_round->{FLIGHTING},
./tourn/upload_tourn.mhtml:				type     => lc($xml_round->{PAIRINGSCHEME}),
./tourn/upload_tourn.mhtml:			$round->setting("cat_id", $xml_round->{ID});
./tourn/upload_tourn.mhtml:			$round->setting("num_judges", $xml_round->{JUDGESPERPANEL}),
./tourn/upload_tourn.mhtml:			my $label = $xml_round->{LABEL};
./tourn/upload_tourn.mhtml:			$round->name($xml_round->{RD_NAME});
./tourn/upload_tourn.mhtml:			$round->label( $label );
./tourn/upload_tourn.mhtml:			$round->event($event->id);
./tourn/upload_tourn.mhtml:			$round->tiebreak_set($tiebreak_set->id);
./tourn/upload_tourn.mhtml:			$round->timeslot($timeslot->id);
./tourn/upload_tourn.mhtml:			$round->flighted( $xml_round->{FLIGHTING} );
./tourn/upload_tourn.mhtml:			$round->setting("num_judges", $xml_round->{JUDGESPERPANEL} );
./tourn/upload_tourn.mhtml:			$round->name( $xml_round->{RD_NAME} );
./tourn/upload_tourn.mhtml:			$round->type( lc($xml_round->{PAIRINGSCHEME}) );
./tourn/upload_tourn.mhtml:			$round->site($default_site_id) unless $round->site;
./tourn/upload_tourn.mhtml:			$round->update
./tourn/upload_tourn.mhtml:		$round_by_name{$xml_round->{LABEL}} = $round;
./tourn/upload_tourn.mhtml:		$round_by_id{$xml_round->{ID}} = $round;
./tourn/upload_tourn.mhtml:		$round_by_id{$round->id} = $round;
./tourn/upload_tourn.mhtml:		$used_rounds{$round->id}++;
./tourn/upload_tourn.mhtml:		$used_rounds{$xml_round->{ID}}++;
./tourn/upload_tourn.mhtml:		$round_by_id{$round_id}->delete;
./tourn/upload_tourn.mhtml:	Tab::Round->set_sql("high_lett" => "select max(letter) from panel where round = ?");
./tourn/upload_tourn.mhtml:		foreach my $panel ($m->comp('/funclib/event_panels.mas', event => $event)) { 
./tourn/upload_tourn.mhtml:			$panel_by_cat_id{$panel->cat_id} = $panel if $panel->cat_id;
./tourn/upload_tourn.mhtml:			$panel->delete unless $panel->cat_id;
./tourn/upload_tourn.mhtml:	foreach my $xml_panel (@{$data->{PANEL}}) { 
./tourn/upload_tourn.mhtml:		my $id = $xml_panel->{ID};
./tourn/upload_tourn.mhtml:		$id = $xml_panel->{PanelID} unless $id;
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_panel->{ROUND}};
./tourn/upload_tourn.mhtml:		my $room = $room_by_id{$xml_panel->{ROOM}};
./tourn/upload_tourn.mhtml:		$room = $room->id if $room;
./tourn/upload_tourn.mhtml:		next unless $round && $round->id;
./tourn/upload_tourn.mhtml:		unless ($panel && $round_by_id{$panel->round->id} && $panel->round->id == $round->id) { 
./tourn/upload_tourn.mhtml:			my $letter = Tab::Round->sql_high_lett->select_val($round->id);
./tourn/upload_tourn.mhtml:			$panel = Tab::Panel->create({
./tourn/upload_tourn.mhtml:				round  => $round->id,
./tourn/upload_tourn.mhtml:				flight => $xml_panel->{FLIGHT},
./tourn/upload_tourn.mhtml:			$panel->room($room);
./tourn/upload_tourn.mhtml:			$panel->flight($xml_panel->{FLIGHT});
./tourn/upload_tourn.mhtml:			$panel->cat_id($id);
./tourn/upload_tourn.mhtml:			$panel->update;
./tourn/upload_tourn.mhtml:		$panel_by_cat_id{$panel_id}->delete;
./tourn/upload_tourn.mhtml:		foreach my $result_set ($event->result_sets) { 
./tourn/upload_tourn.mhtml:			next unless $result_set->bracket;
./tourn/upload_tourn.mhtml:			$seed_set_by_event{$event->id} = $result_set;
./tourn/upload_tourn.mhtml:			foreach my $result ($result_set->results) { 
./tourn/upload_tourn.mhtml:				$result_by_entry{$result->entry->id."-".$result->round->id} = $result;
./tourn/upload_tourn.mhtml:	foreach my $xml_result (@{$data->{ROUNDRESULT}}) { 
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_result->{RoundId}};	
./tourn/upload_tourn.mhtml:		$round = $round_by_name{$xml_result->{RoundName}} unless $round; 	
./tourn/upload_tourn.mhtml:		next unless $xml_result->{RESULT_BALLOT};
./tourn/upload_tourn.mhtml:		foreach my $xml_panel (@{$xml_result->{RESULT_BALLOT}}) { 
./tourn/upload_tourn.mhtml:			my $id = $xml_panel->{Panel};
./tourn/upload_tourn.mhtml:			$id = $xml_panel->{PanelID} unless $id;
./tourn/upload_tourn.mhtml:				$room = $room_by_id{$xml_panel->{RoomID}} if $room_by_id{$xml_panel->{RoomID}};
./tourn/upload_tourn.mhtml:				$panel = Tab::Panel->create({
./tourn/upload_tourn.mhtml:					flight => $xml_panel->{Flight},
./tourn/upload_tourn.mhtml:					cat_id => $xml_panel->{ID}
./tourn/upload_tourn.mhtml:            unless ($xml_panel->{JudgeID} < 1) {
./tourn/upload_tourn.mhtml:                    $judge_id = $judge_by_id{$xml_panel->{JudgeID}}->id;
./tourn/upload_tourn.mhtml:			my @xml_results = @{$xml_panel->{RESULT_SCORE}};
./tourn/upload_tourn.mhtml:                next unless $xml_ballot->{Score_Name} eq "Ballot";
./tourn/upload_tourn.mhtml:                my $entry = $entry_by_id{$xml_ballot->{Recipient}};
./tourn/upload_tourn.mhtml:                next unless $entry && $entry->id;
./tourn/upload_tourn.mhtml:                my $value = $xml_ballot->{content};
./tourn/upload_tourn.mhtml:                my $side = $xml_ballot->{Side};
./tourn/upload_tourn.mhtml:                if (($side == -1) || $judge_id == 0) { 
./tourn/upload_tourn.mhtml:				$ballot = Tab::Ballot->create({
./tourn/upload_tourn.mhtml:					entry  => $entry->id,
./tourn/upload_tourn.mhtml:					panel  => $panel->id,
./tourn/upload_tourn.mhtml:                $panel->room(0) if $bye;
./tourn/upload_tourn.mhtml:                $panel->room(0) if $forfeit;
./tourn/upload_tourn.mhtml:                $ballot_by_entry{$xml_ballot->{Recipient}} = $ballot;
./tourn/upload_tourn.mhtml:                foreach my $student (@{$students_by_entry{$xml_ballot->{Recipient}}}) {
./tourn/upload_tourn.mhtml:                    $ballot_by_student{$student->cat_id} = $ballot;
./tourn/upload_tourn.mhtml:				$used_ballots{$ballot->id}++;
./tourn/upload_tourn.mhtml:				$entry_ballot{$round."-".$entry} = $ballot;
./tourn/upload_tourn.mhtml:                $panel->bye(1);
./tourn/upload_tourn.mhtml:                $panel->room(0);
./tourn/upload_tourn.mhtml:            if ($byes && ($round->type eq "elim" || $round->type eq "final")) {
./tourn/upload_tourn.mhtml:                $panel->bye(1);
./tourn/upload_tourn.mhtml:                $panel->room(0);
./tourn/upload_tourn.mhtml:            $panel->update;
./tourn/upload_tourn.mhtml:                my $tag = lc($xml_value->{Score_Name});
./tourn/upload_tourn.mhtml:                my $value = $xml_value->{content};
./tourn/upload_tourn.mhtml:                if ($xml_value->{ScoreFor} eq "Speaker") {
./tourn/upload_tourn.mhtml:                    $student = $student_by_cat_id{$xml_value->{Recipient}}->id if $student_by_cat_id{$xml_value->{Recipient}};
./tourn/upload_tourn.mhtml:                    $ballot = $ballot_by_student{$xml_value->{Recipient}}->id if $ballot_by_student{$xml_value->{Recipient}};
./tourn/upload_tourn.mhtml:                    $ballot = $ballot_by_entry{$xml_value->{Recipient}}->id if $ballot_by_entry{$xml_value->{Recipient}};
./tourn/upload_tourn.mhtml:                my $score = Tab::Score->create({
./tourn/upload_tourn.mhtml:	foreach my $xml_elimseed (@{$data->{ELIMSEED}}) { 
./tourn/upload_tourn.mhtml:		my $entry_id = $xml_elimseed->{ENTRY};
./tourn/upload_tourn.mhtml:		next if $entry_id == "-99";
./tourn/upload_tourn.mhtml:		my $round_id = $xml_elimseed->{ROUND};
./tourn/upload_tourn.mhtml:		my $event_id = ${$xml_elimseed->{EVENT}}[0];
./tourn/upload_tourn.mhtml:		my $result = $result_by_entry{$entry->id."-".$round->id};
./tourn/upload_tourn.mhtml:		my $set = $seed_set_by_event{$event->id};
./tourn/upload_tourn.mhtml:			$set = Tab::ResultSet->create({
./tourn/upload_tourn.mhtml:				tourn     => $tourn->id,
./tourn/upload_tourn.mhtml:				event     => $event->id,
./tourn/upload_tourn.mhtml:			$seed_set_by_event{$event->id} = $set;
./tourn/upload_tourn.mhtml:			$used_results{$result->id}++;
./tourn/upload_tourn.mhtml:			foreach my $value ($result->values) { 
./tourn/upload_tourn.mhtml:				$value->delete unless $value->tag eq "Seed";
./tourn/upload_tourn.mhtml:				if ($value->tag eq "Seed") { 
./tourn/upload_tourn.mhtml:					$value->value($xml_elimseed->{SEED});
./tourn/upload_tourn.mhtml:					$value->update;
./tourn/upload_tourn.mhtml:			$result = Tab::Result->create({
./tourn/upload_tourn.mhtml:				result_set => $set->id,
./tourn/upload_tourn.mhtml:				entry => $entry->id,
./tourn/upload_tourn.mhtml:				round => $round->id
./tourn/upload_tourn.mhtml:			$result_value = Tab::ResultValue->create({
./tourn/upload_tourn.mhtml:				result => $result->id,
./tourn/upload_tourn.mhtml:				value => $xml_elimseed->{SEED},
./tourn/upload_tourn.mhtml:		my $type = $event->type;
./tourn/upload_tourn.mhtml:		foreach my $ballot ($m->comp('/funclib/event_ballots.mas', event => $event)) { 
./tourn/upload_tourn.mhtml:			$ballot_by_id{$ballot->id} = $ballot;
./tourn/upload_tourn.mhtml:			$ballot_by_cat_id{$ballot->cat_id} = $ballot;
./tourn/upload_tourn.mhtml:			$ballot_event_type{$ballot->id} = $type;
./tourn/upload_tourn.mhtml:			$ballot_event_type{$ballot->cat_id} = $type;
./tourn/upload_tourn.mhtml:	foreach my $xml_ballot (@{$data->{BALLOT}}) { 
./tourn/upload_tourn.mhtml:		my $ballot = $ballot_by_cat_id{$xml_ballot->{ID}};
./tourn/upload_tourn.mhtml:		$ballot = $ballot_by_id{$xml_ballot->{ID}} unless $ballot;
./tourn/upload_tourn.mhtml:		next if $xml_ballot->{ENTRY} == -99;
./tourn/upload_tourn.mhtml:		next if $xml_ballot->{JUDGE} == 0;
./tourn/upload_tourn.mhtml:		my $panel = $panel_by_cat_id{$xml_ballot->{PANEL}};
./tourn/upload_tourn.mhtml:		$panel = $panel_by_cat_id{$xml_ballot->{PANEL}} unless $panel;
./tourn/upload_tourn.mhtml:		$bye++ if $xml_ballot->{JUDGE} == -1;
./tourn/upload_tourn.mhtml:		$bye++ if $xml_ballot->{SIDE} == -1;
./tourn/upload_tourn.mhtml:		unless ($xml_ballot->{JUDGE} == -99 || $bye) { 
./tourn/upload_tourn.mhtml:			$judge = $judge_by_id{$xml_ballot->{JUDGE}} if $judge_by_id{$xml_ballot->{JUDGE}};
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_ballot->{ENTRY}};
./tourn/upload_tourn.mhtml:		my $entry_id = $entry->id if $entry;
./tourn/upload_tourn.mhtml:		unless ($ballot && $ballot->panel && $ballot->panel->id == $panel->id) { 
./tourn/upload_tourn.mhtml:			$ballot = Tab::Ballot->create({
./tourn/upload_tourn.mhtml:				side   => $xml_ballot->{SIDE},
./tourn/upload_tourn.mhtml:				cat_id => $xml_ballot->{ID}
./tourn/upload_tourn.mhtml:			$ballot_by_id{$ballot->id} = $ballot;
./tourn/upload_tourn.mhtml:			$ballot_by_cat_id{$xml_ballot->{ID}} = $ballot;
./tourn/upload_tourn.mhtml:			$used_ballots{$ballot->id}++;
./tourn/upload_tourn.mhtml:			$used_ballots{$xml_ballot->{ID}}++;
./tourn/upload_tourn.mhtml:			$used_cat_ballots{$ballot->cat_id}++;
./tourn/upload_tourn.mhtml:			$ballot_event_type{$ballot->id} = $panel->round->event->type;
./tourn/upload_tourn.mhtml:			$ballot_event_type{$xml_ballot->{ID}} = $panel->round->event->type;
./tourn/upload_tourn.mhtml:			$ballot->judge($judge);
./tourn/upload_tourn.mhtml:			$ballot->panel($panel);
./tourn/upload_tourn.mhtml:			$ballot->entry($entry_id);
./tourn/upload_tourn.mhtml:			$ballot->side($xml_ballot->{SIDE});
./tourn/upload_tourn.mhtml:			$ballot->cat_id($xml_ballot->{ID});
./tourn/upload_tourn.mhtml:			$ballot->bye($bye);
./tourn/upload_tourn.mhtml:			$ballot->update;
./tourn/upload_tourn.mhtml:			$ballot_by_id{$ballot->id} = $ballot;
./tourn/upload_tourn.mhtml:			$ballot_by_cat_id{$xml_ballot->{ID}} = $ballot;
./tourn/upload_tourn.mhtml:			$used_ballots{$ballot->id}++;
./tourn/upload_tourn.mhtml:			$used_ballots{$xml_ballot->{ID}}++;
./tourn/upload_tourn.mhtml:			$used_cat_ballots{$ballot->cat_id}++;
./tourn/upload_tourn.mhtml:		$ballot_by_id{$ballot_id}->delete if $ballot_by_id{$ballot_id};
./tourn/upload_tourn.mhtml:		my $type = $event->type;
./tourn/upload_tourn.mhtml:		foreach my $value ($m->comp('/funclib/event_values.mas', event => $event)) { 
./tourn/upload_tourn.mhtml:			$score_by_id{$value->id} = $value;
./tourn/upload_tourn.mhtml:			$score_by_cat_id{$value->cat_id} = $value;
./tourn/upload_tourn.mhtml:	foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 
./tourn/upload_tourn.mhtml:		my $score = $score_by_cat_id{$xml_score->{ID}};
./tourn/upload_tourn.mhtml:		my $ballot = $ballot_by_cat_id{$xml_score->{BALLOT}};
./tourn/upload_tourn.mhtml:		my $type = $xml_score->{SCORE_ID};
./tourn/upload_tourn.mhtml:		my $event_type = $ballot_event_type{$xml_score->{BALLOT}};
./tourn/upload_tourn.mhtml:			next SCORE if $xml_score->{SCORE} == 0;
./tourn/upload_tourn.mhtml:		my $student = $student_by_id{$xml_score->{RECIPIENT}} if ( $type == 2 || $type == 3 ) && $event_type ne "speech";
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_score->{RECIPIENT}} if ($type == 1 || $type == 4 || $type == 5 ) || $event_type eq "speech";
./tourn/upload_tourn.mhtml:		$scored_ballot{$ballot->id}++;
./tourn/upload_tourn.mhtml:		unless ($score && $score->ballot && $score->ballot->id == $ballot->id) { 
./tourn/upload_tourn.mhtml:			$score = Tab::Score->create({
./tourn/upload_tourn.mhtml:				ballot  => $ballot->id,
./tourn/upload_tourn.mhtml:				value   => $xml_score->{SCORE},
./tourn/upload_tourn.mhtml:				cat_id  => $xml_score->{ID}
./tourn/upload_tourn.mhtml:			$score = Tab::Score->create({
./tourn/upload_tourn.mhtml:				ballot => $ballot->id,
./tourn/upload_tourn.mhtml:				value  => $xml_score->{SCORE},
./tourn/upload_tourn.mhtml:				cat_id => $xml_score->{ID}
./tourn/upload_tourn.mhtml:			$score_by_id{$xml_score->{ID}} = $score;
./tourn/upload_tourn.mhtml:			$score_by_cat_id{$xml_score->{ID}} = $score;
./tourn/upload_tourn.mhtml:			$used_scores{$xml_score->{ID}}++;
./tourn/upload_tourn.mhtml:			$sid = $student->id if $student;
./tourn/upload_tourn.mhtml:			$score_by_cat_id{$xml_score->{ID}} = $score;
./tourn/upload_tourn.mhtml:			$used_scores{$xml_score->{ID}}++;
./tourn/upload_tourn.mhtml:			$score->ballot($ballot->id);
./tourn/upload_tourn.mhtml:			$score->student($sid);
./tourn/upload_tourn.mhtml:			$score->tag($tag);
./tourn/upload_tourn.mhtml:			$score->value($xml_score->{SCORE});
./tourn/upload_tourn.mhtml:			$score->cat_id($xml_score->{ID});
./tourn/upload_tourn.mhtml:			$score->update;
./tourn/upload_tourn.mhtml:			$used_scores{$score->id}++;
./tourn/upload_tourn.mhtml:		next unless $scored_ballot{$score->ballot->id};
./tourn/upload_tourn.mhtml:		$score_by_id{$score_id}->delete;
./tourn/upload_tourn.mhtml:		$m->comp("/funclib/round_audit.mas", round => $round);
./tourn/upload_tourn.mhtml:	$m->redirect("/user/tourn/select.mhtml?tourn_id=".$tourn->id."&msg=$msg");
./tourn/request.mhtml:	my $tz = $person->tz;
./tourn/request.mhtml:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./tourn/request.mhtml:								<option value="<% $tourn->id %>">
./tourn/request.mhtml:									<% $tourn->start->year %> <% substr($tourn->name,0,40) %>
./tourn/request.mhtml:           	<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="xml" action="upload_tourn.mhtml" method="post">
./tourn/request.mhtml:		<p>Not all options are covered by the pre-approval forms; be sure to go
./tourn/deadlines.mhtml:	$name =~ s/-/ /g;
./tourn/deadlines.mhtml:	$name =~ tr/a-zA-Z0-9 //cd;
./tourn/deadlines.mhtml:	my $now = DateTime->now;
./tourn/deadlines.mhtml:	my $year = $now->year;
./tourn/deadlines.mhtml:	unless ($startdt && $startdt->year) { 
./tourn/deadlines.mhtml:	unless ($enddt && $enddt->year) { 
./tourn/deadlines.mhtml:	if ($startdt && $startdt->year && $enddt && $enddt->year) {
./tourn/deadlines.mhtml:		if ($startdt->year < 200 || $enddt->year < 200) {
./tourn/deadlines.mhtml:		} elsif ($startdt->year < 2000 || $enddt->year < 2000) {
./tourn/deadlines.mhtml:		#Remove all non-alphanumeric characters
./tourn/deadlines.mhtml:		my @webname_tourns = Tab::Tourn->search( webname => $webname );
./tourn/deadlines.mhtml:				my @admins = Tab::Permission->search( person => $person->id, tourn => $wt->id, tag => "contact" );
./tourn/deadlines.mhtml:				push @admins, Tab::Permission->search( person => $person->id, tourn => $wt->id, tag => "owner" );
./tourn/deadlines.mhtml:				$ok++ if $person->site_admin;
./tourn/deadlines.mhtml:			$return = "The web name ".$webname." is taken by someone else.  You must be listed as the main contact to re-use a webname.\n" unless $ok;
./tourn/deadlines.mhtml:		$m->redirect("request.mhtml?name=$name&webname=$webname&start=$start&end=$end&starttime=$starttime&endtime=$endtime&error=$return&tz=$tz");
./tourn/deadlines.mhtml:	my $base_year = $startdt->year;
./tourn/deadlines.mhtml:	my $deadlinedt = $startdt->clone;
./tourn/deadlines.mhtml:	$deadlinedt->set( hour => "17", minute => "00", second => "00") if $deadlinedt;
./tourn/deadlines.mhtml:		$m->comp("clone_tournament.mas", 
./tourn/deadlines.mhtml:		$reg_start = $deadlinedt->clone;
./tourn/deadlines.mhtml:		$reg_start->subtract( months => 1);
./tourn/deadlines.mhtml:		$reg_end = $deadlinedt->clone;
./tourn/deadlines.mhtml:		$reg_end->subtract( weeks => 1);
./tourn/deadlines.mhtml:		$frozen = $deadlinedt->clone;
./tourn/deadlines.mhtml:		$frozen->subtract( days => 3);
./tourn/deadlines.mhtml:		$judge = $deadlinedt->clone;
./tourn/deadlines.mhtml:		$judge->subtract( days => 3);
./tourn/deadlines.mhtml:		$drops = $deadlinedt->clone;
./tourn/deadlines.mhtml:		$drops->subtract( days => 3);
./tourn/deadlines.mhtml:		$fines = $deadlinedt->clone;
./tourn/deadlines.mhtml:		$fines->subtract( days => 3);
./tourn/deadlines.mhtml:					<input type="text" name="reg_start" id="reg_start" size="10" value="<% ($reg_start) ? $reg_start->mdy('/') : "" %>">
./tourn/deadlines.mhtml:					<input type="text" name="reg_end" id="reg_end" size="10" value="<% ($reg_end) ? $reg_end->mdy('/') : "" %>">
./tourn/deadlines.mhtml:					You can also later set up per-event deadlines once your tournament
./tourn/deadlines.mhtml:					dropped, name-changed, or judges added. 
./tourn/deadlines.mhtml:                    <input type="text" name="frozen" id="frozen" size="10" value="<% ($frozen) ? $frozen->mdy('/') : "" %>">
./tourn/deadlines.mhtml:                    <input type="text" name="judge" id="judge" size="10" value="<% ($judge) ? $judge->mdy('/') : "" %>">
./tourn/deadlines.mhtml:                    <input type="text" name="drops" id="drops" size="10" value="<% ($drops) ? $drops->mdy('/') : "" %>">
./tourn/deadlines.mhtml:                    <input type="text" name="fines" id="fines" size="10" value="<% ($fines) ? $fines->mdy('/') : "" %>">
./tourn/tournaman_teamoverview.mhtml:	my $now = DateTime->now;
./tourn/tournaman_teamoverview.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/tournaman_teamoverview.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/tournaman_teamoverview.mhtml:	$m->abort unless $tourn;
./tourn/tournaman_teamoverview.mhtml:	$tourn_id = $tourn->id;
./tourn/tournaman_teamoverview.mhtml:	$now->set_time_zone($tz);
./tourn/tournaman_teamoverview.mhtml:	my $req = Apache2::Request->new($r);
./tourn/tournaman_teamoverview.mhtml:	my $xml_file = $req->upload("teamtab");
./tourn/tournaman_teamoverview.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/tournaman_teamoverview.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./tourn/tournaman_teamoverview.mhtml:		$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn_id&msg=$msg");
./tourn/tournaman_teamoverview.mhtml:	my $webname=$xml_file->filename;
./tourn/tournaman_teamoverview.mhtml:	`perl -pi -e s/'&'/'&amp;'/g  $xml_filename`;
./tourn/tournaman_teamoverview.mhtml:	my $te = HTML::TableExtract->new( headers => ['Name', 'Institution', 'Speaker 1', 'Speaker 2'] );
./tourn/tournaman_teamoverview.mhtml:	$te->parse($data);
./tourn/tournaman_teamoverview.mhtml:	#$row->[0] will be Name, [1] will be Institution, [2] will be Speaker 1, [3] will be Speaker 2
./tourn/tournaman_teamoverview.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_teamoverview.mhtml:	  #print "Table (", join(',', $ts->coords), "):<br>";
./tourn/tournaman_teamoverview.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_teamoverview.mhtml:	   #print $row->[0]." ". @$row[1]." ". @$row[2]." ". @$row[3]."<br>";
./tourn/tournaman_teamoverview.mhtml:#	   @$row[0] = $m->comp('/funclib/destupidify.mas', strDummy => @$row[0] );
./tourn/tournaman_teamoverview.mhtml:	my $category = Tab::Category->search( tourn => $tourn_id )->first;
./tourn/tournaman_teamoverview.mhtml:	my $event_id = CreateEvent($tourn_id, $category->id);
./tourn/tournaman_teamoverview.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_teamoverview.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_teamoverview.mhtml:$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn_id");	
./tourn/tournaman_teamoverview.mhtml:		Tab::EntryStudent->create( {
./tourn/tournaman_teamoverview.mhtml:		$last = substr($dummy, $x+1, $L-$x-1);
./tourn/tournaman_teamoverview.mhtml:		my $sch = Tab::School->retrieve($school);
./tourn/tournaman_teamoverview.mhtml:			$chapter = $sch->chapter if $sch;
./tourn/tournaman_teamoverview.mhtml:			my @student = Tab::Student->search( chapter => $sch->chapter, first => $first, last => $last );
./tourn/tournaman_teamoverview.mhtml:			if (scalar(@student) == 1) {return $student[0]->id;}
./tourn/tournaman_teamoverview.mhtml:		my $entryobject = Tab::Student->create( {
./tourn/tournaman_teamoverview.mhtml:		return $entryobject->id;
./tourn/tournaman_teamoverview.mhtml:		my $entryobject = Tab::Entry->create( {
./tourn/tournaman_teamoverview.mhtml:		return $entryobject->id;
./tourn/tournaman_teamoverview.mhtml:		my $eventobject = Tab::Event->create( {
./tourn/tournaman_teamoverview.mhtml:		Tab::EventSetting->create( {
./tourn/tournaman_teamoverview.mhtml:			event => $eventobject->id,
./tourn/tournaman_teamoverview.mhtml:		Tab::EventSetting->create( {
./tourn/tournaman_teamoverview.mhtml:			event => $eventobject->id,
./tourn/tournaman_teamoverview.mhtml:		Tab::EventSetting->create( {
./tourn/tournaman_teamoverview.mhtml:			event => $eventobject->id,
./tourn/tournaman_teamoverview.mhtml:		return $eventobject->id;
./tourn/tournaman_teamoverview.mhtml:		my $newschool = Tab::School->create({
./tourn/tournaman_teamoverview.mhtml:		return $newschool->id;
./tourn/tournaman_teamoverview.mhtml:		my @chapters = Tab::Chapter->search( name => $schoolname);
./tourn/tournaman_teamoverview.mhtml:			$chapter=$candidate->id;	
./tourn/disclaimer.mhtml:	my $school = Tab::School->retrieve($school_id);
./tourn/disclaimer.mhtml:	my $tourn = $school->tournament;
./tourn/disclaimer.mhtml:	$m->redirect("$Tab::url_prefix/user/tourn/entry/entry.mhtml?school_id=".$school->id) unless $tourn->disclaimer > 0;
./tourn/disclaimer.mhtml:	my $t2h = HTML::FromText->new({
./tourn/disclaimer.mhtml:	my $html = $t2h->parse($tourn->disclaimer);
./tourn/disclaimer.mhtml:	<div class="menu" style="padding-top: 20px;">
./tourn/disclaimer.mhtml:			<input type="hidden" name="school_id" value="<% $school->id %>">
./tourn/upload_launch.mhtml:		click the button in the right-hand column that says "Import XML."</li>
./tourn/upload_launch.mhtml:		button in the right-hand column that says "Import iDebate XML."</p>
./tourn/upload_launch.mhtml:				<a class="blue block" href="/user/tourn/wudc_upload.mhtml?tourn=-99">
./tourn/import_wudc_xml.mhtml:	my $now = DateTime->now;
./tourn/import_wudc_xml.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/import_wudc_xml.mhtml:	$now->set_time_zone($tz);
./tourn/import_wudc_xml.mhtml:	my $req = Apache2::Request->new($r);
./tourn/import_wudc_xml.mhtml:	my $xml_file = $req->upload("xml");
./tourn/import_wudc_xml.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/import_wudc_xml.mhtml:	my $webname=$xml_file->filename;
./tourn/import_wudc_xml.mhtml:	`perl -pi -e s/'&'/'&amp;'/g  $xml_filename`;
./tourn/import_wudc_xml.mhtml:	my $data = $xml->XMLin($xml_filename);
./tourn/import_wudc_xml.mhtml:	foreach my $xml_tourn (@{$data->{TOURN}}) {
./tourn/import_wudc_xml.mhtml:		$tournname = $xml_tourn->{TOURNNAME};
./tourn/import_wudc_xml.mhtml:		$location  = $xml_tourn->{LOCATION};
./tourn/import_wudc_xml.mhtml:		$startdate = $xml_tourn->{STARTDATE};
./tourn/import_wudc_xml.mhtml:		$weight    = $xml_tourn->{WEIGHT};
./tourn/import_wudc_xml.mhtml:	print "Straight from data object=".$data->{TOURN}[0]."<br>";
./tourn/import_wudc_xml.mhtml:	foreach my $xml_school (@{$data->{SCHOOL}}) {
./tourn/import_wudc_xml.mhtml:		$schoolrec[$x][0]=$xml_school->{SCHOOLNAME};
./tourn/import_wudc_xml.mhtml:		$schoolrec[$x][1]=$xml_school->{ID};
./tourn/import_wudc_xml.mhtml:	foreach my $xml_entry (@{$data->{ENTRY}}) {
./tourn/import_wudc_xml.mhtml:		$entry[$x][0]=$xml_entry->{FULLNAME};
./tourn/import_wudc_xml.mhtml:		$entry[$x][1]=$xml_entry->{ID};
./tourn/import_wudc_xml.mhtml:		$entry[$x][2]=$xml_entry->{SCHOOLID};
./tourn/import_wudc_xml.mhtml:		$entry[$x][3]=$xml_entry->{POINTS};
./tourn/import_wudc_xml.mhtml:		$entry[$x][4]=$xml_entry->{RANK};
./tourn/import_wudc_xml.mhtml:#		print $x."-".$entry[$x][0]." xml school=".$entry[$x][2]." Tabroom school=".$entry[$x][6]."<br>";
./tourn/import_wudc_xml.mhtml:	$m->redirect("/user/circuit/chapter_by_tourn.mhtml?tourn_id=$tourn_id&circuit_id=50");	
./tourn/import_wudc_xml.mhtml:		my $object = Tab::ResultValue->create( {
./tourn/import_wudc_xml.mhtml:		my $pct = round((($nentries-$rank+1)/$nentries)*1000);
./tourn/import_wudc_xml.mhtml:		my $result = Tab::Result->create( {
./tourn/import_wudc_xml.mhtml:		return $result->id;
./tourn/import_wudc_xml.mhtml:		my $now = DateTime->now( time_zone => $tz);
./tourn/import_wudc_xml.mhtml:		my $RSobject = Tab::ResultSet->create( {
./tourn/import_wudc_xml.mhtml:		return $RSobject->id;
./tourn/import_wudc_xml.mhtml:		my $entryobject = Tab::Entry->create( {
./tourn/import_wudc_xml.mhtml:		return $entryobject->id;
./tourn/import_wudc_xml.mhtml:		my $eventobject = Tab::Event->create( {
./tourn/import_wudc_xml.mhtml:		Tab::EventSetting->create( {
./tourn/import_wudc_xml.mhtml:			event => $eventobject->id,
./tourn/import_wudc_xml.mhtml:		Tab::EventSetting->create( {
./tourn/import_wudc_xml.mhtml:			event => $eventobject->id,
./tourn/import_wudc_xml.mhtml:		Tab::EventSetting->create( {
./tourn/import_wudc_xml.mhtml:			event => $eventobject->id,
./tourn/import_wudc_xml.mhtml:		return $eventobject->id;
./tourn/import_wudc_xml.mhtml:		my @chapters = Tab::Chapter->search( name => $schoolname);
./tourn/import_wudc_xml.mhtml:			$chapter=$candidate->id;	
./tourn/import_wudc_xml.mhtml:		my $newschool = Tab::School->create({
./tourn/import_wudc_xml.mhtml:		return $newschool->id;
./tourn/import_wudc_xml.mhtml:		my $tourn = Tab::Tourn->create( {
./tourn/import_wudc_xml.mhtml:		$tourn->setting("freeze_deadline", "date", $startdate);
./tourn/import_wudc_xml.mhtml:		$tourn->setting("fine_deadline", "date", $startdate);
./tourn/import_wudc_xml.mhtml:		$tourn->setting("judge_deadline", "date", $startdate);
./tourn/import_wudc_xml.mhtml:		$tourn->setting("drops_deadline", "date", $startdate);
./tourn/import_wudc_xml.mhtml:		$tourn->setting("school_codes", "shortname");
./tourn/import_wudc_xml.mhtml:		Tab::Permission->create ({ tourn => $tourn->id, person => $person, tag => "contact"});
./tourn/import_wudc_xml.mhtml:		Tab::Permission->create ({ tourn => $tourn->id, person => $person, tag => "owner"});
./tourn/import_wudc_xml.mhtml:		Tab::TournCircuit->create ({ tourn => $tourn->id, circuit => 50 });
./tourn/import_wudc_xml.mhtml:		my $category = Tab::Category->create( {
./tourn/import_wudc_xml.mhtml:			tourn => $tourn->id,
./tourn/import_wudc_xml.mhtml:		Tab::TournSetting->create( {
./tourn/import_wudc_xml.mhtml:			tourn => $tourn->id,
./tourn/import_wudc_xml.mhtml:		Tab::TournSetting->create( {
./tourn/import_wudc_xml.mhtml:			tourn => $tourn->id,
./tourn/import_wudc_xml.mhtml:		return ($tourn->id, $category->id);
./tourn/show_past_prefs.mhtml:	my @admin = Tab::Permission->search( person=>$person->id );
./tourn/show_past_prefs.mhtml:		$chpt_str = $admin->chapter if $admin->chapter;
./tourn/show_past_prefs.mhtml:		my @judges = Tab::ChapterJudge->search( person=>$person->id );
./tourn/show_past_prefs.mhtml:			$chpt_str = $judge->chapter if $judge->chapter;
./tourn/show_past_prefs.mhtml:		my @students = Tab::Student->search( person=>$person->id );
./tourn/show_past_prefs.mhtml:			$chpt_str = $student->chapter if $student->chapter;
./tourn/show_past_prefs.mhtml:		$m->print("I could not find a school corresponding to your account.  Are you logged in?");
./tourn/show_past_prefs.mhtml:		$m->abort();
./tourn/show_past_prefs.mhtml:	Tab::Rating->columns(TEMP => qw/entry_name/);
./tourn/show_past_prefs.mhtml:	Tab::Rating->set_sql(pull_ratings => "
./tourn/show_past_prefs.mhtml:	my @ratings = Tab::Rating->search_pull_ratings;
./tourn/show_past_prefs.mhtml:	Tab::Rating->columns(TEMP => qw/entry_name/);
./tourn/show_past_prefs.mhtml:	Tab::Rating->columns(TEMP => qw/rating_tier_name/);
./tourn/show_past_prefs.mhtml:	Tab::Rating->set_sql(pull_tiered_ratings => "
./tourn/show_past_prefs.mhtml:	my @tiered_ratings = Tab::Rating->search_pull_tiered_ratings;
./tourn/show_past_prefs.mhtml:	my $judge_person = Tab::Person->retrieve($judge_person_id);
./tourn/show_past_prefs.mhtml:		<h4>Your past ratings for <% $judge_person->first." ".$judge_person->last %></h4>
./tourn/show_past_prefs.mhtml:						<% $rating->entry->event->tourn->name %>
./tourn/show_past_prefs.mhtml:						<% $rating->entry_name %>
./tourn/show_past_prefs.mhtml:						<% $rating->rating_tier %>
./tourn/show_past_prefs.mhtml:						<% $rating->ordinal %>
./tourn/show_past_prefs.mhtml:						<% $rating->percentile %>
./tourn/show_past_prefs.mhtml:						<% $rating->entry->event->tourn->name %>
./tourn/show_past_prefs.mhtml:						<% $rating->entry_name %>
./tourn/show_past_prefs.mhtml:						<% $rating->rating_tier_name %>
./tourn/show_past_prefs.mhtml:						<% $rating->ordinal %>
./tourn/show_past_prefs.mhtml:						<% $rating->percentile %>
./tourn/circuit.mhtml:		$m->redirect("deadlines.mhtml?name=$name&webname=$webname&start=".Tab::DBI::date_deflate($startdt)."&end=".Tab::DBI::date_deflate($enddt)."&reg_start=".Tab::DBI::date_deflate($reg_startdt)."&reg_end=".Tab::DBI::date_deflate($reg_enddt)."&drops=".Tab::DBI::date_deflate($dropsdt)."&judge=".Tab::DBI::date_deflate($judgedt)."&frozen=".Tab::DBI::date_deflate($frozendt)."&fines=".Tab::DBI::date_deflate($finesdt)."&error=$return");
./tourn/circuit.mhtml:	$dropsdt = $reg_enddt->clone unless $dropsdt;
./tourn/circuit.mhtml:	$judgedt = $reg_enddt->clone unless $judgedt;
./tourn/circuit.mhtml:	$frozendt = $reg_enddt->clone unless $frozendt;
./tourn/circuit.mhtml:	$finesdt = $reg_enddt->clone unless $finesdt;
./tourn/circuit.mhtml:		my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./tourn/circuit.mhtml:		push @circuits, $m->comp("/funclib/person_tourn_circuits.mas", person => $person);
./tourn/circuit.mhtml:		my @all_circuits = Tab::Circuit->search(active => 1);
./tourn/circuit.mhtml:%			foreach my $circuit (sort {$a->name cmp $b->name} @circuits) { 
./tourn/circuit.mhtml:%				next if $circuit->setting("tourns_no_add");
./tourn/circuit.mhtml:%				next if $done_already{$circuit->id};
./tourn/circuit.mhtml:%				$done_already{$circuit->id}++;
./tourn/circuit.mhtml:					<input type="checkbox" name="<% $circuit->id %>" id="<% $circuit->id %>">
./tourn/circuit.mhtml:					<label class="hover block" for="<% $circuit->id %>">
./tourn/circuit.mhtml:						<% substr($circuit->name,0,40) %>
./tourn/circuit.mhtml:%			foreach my $circuit (sort {$a->name cmp $b->name} @all_circuits) { 
./tourn/circuit.mhtml:%				next if $circuit->setting("tourns_no_add");
./tourn/circuit.mhtml:%				if ($circuit->setting("ncfl")) { 
./tourn/circuit.mhtml:%					$done_already{$circuit->id}++;
./tourn/circuit.mhtml:%				next if $done_already{$circuit->id};
./tourn/circuit.mhtml:%				$done_already{$circuit->id}++;
./tourn/circuit.mhtml:					<input type="checkbox" name="<% $circuit->id %>" id="<% $circuit->id %>">
./tourn/circuit.mhtml:					<label class="block" for="<% $circuit->id %>">
./tourn/circuit.mhtml:						<% substr($circuit->name,0,50) %>
./tourn/tournaman_teamtab.mhtml:	my $now = DateTime->now;
./tourn/tournaman_teamtab.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/tournaman_teamtab.mhtml:	$now->set_time_zone($tz);
./tourn/tournaman_teamtab.mhtml:	my $req = Apache2::Request->new($r);
./tourn/tournaman_teamtab.mhtml:	my $xml_file = $req->upload("teamtab");
./tourn/tournaman_teamtab.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/tournaman_teamtab.mhtml:	my $webname=$xml_file->filename;
./tourn/tournaman_teamtab.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./tourn/tournaman_teamtab.mhtml:		$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn_id&msg=$msg");
./tourn/tournaman_teamtab.mhtml:	`perl -pi -e s/'&'/'&amp;'/g  $xml_filename`;
./tourn/tournaman_teamtab.mhtml:	my $te = HTML::TableExtract->new( headers => ['Position', 'Name', 'Total Rank', 'Total Speaker'] );
./tourn/tournaman_teamtab.mhtml:	$te->parse($data);
./tourn/tournaman_teamtab.mhtml:	#$row->[0] will be Position, [1] will be Name, [2] Total Ranks, [3] will be total speaker points
./tourn/tournaman_teamtab.mhtml:	my @entry = Tab::Entry->search( tourn => $tourn_id);
./tourn/tournaman_teamtab.mhtml:		$entry{$row->name} = $row->id;
./tourn/tournaman_teamtab.mhtml:#	prints out the loaded values -- for debugging
./tourn/tournaman_teamtab.mhtml:	my $RSobject = Tab::ResultSet->create( {
./tourn/tournaman_teamtab.mhtml:		event => $entry[0]->event,
./tourn/tournaman_teamtab.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_teamtab.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_teamtab.mhtml:	   	#print $row->[0]." ". @$row[1]." ". @$row[2]." ". @$row[3]." ".$entry{@$row[1]};
./tourn/tournaman_teamtab.mhtml:		my $pct = round((($nentries-@$row[0]+1)/$nentries)*1000);
./tourn/tournaman_teamtab.mhtml:		my $entryrecord = Tab::Entry->retrieve( $entry{ "@$row[1]" } );
./tourn/tournaman_teamtab.mhtml:		#print "entry rec:".$entryrecord->id if $entryrecord;
./tourn/tournaman_teamtab.mhtml:		my $result = Tab::Result->create( {
./tourn/tournaman_teamtab.mhtml:			entry => $entryrecord->id,
./tourn/tournaman_teamtab.mhtml:			result_set => $RSobject->id,
./tourn/tournaman_teamtab.mhtml:			school => $entryrecord->school
./tourn/tournaman_teamtab.mhtml:		Tab::ResultValue->create( {
./tourn/tournaman_teamtab.mhtml:			result => $result->id,
./tourn/tournaman_teamtab.mhtml:		Tab::ResultValue->create( {
./tourn/tournaman_teamtab.mhtml:			result => $result->id,
./tourn/tournaman_teamtab.mhtml:		Tab::ResultValue->create( {
./tourn/tournaman_teamtab.mhtml:			result => $result->id,
./tourn/tournaman_teamtab.mhtml:$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn_id");	
./tourn/clone_tournament.mas:	my $old_tourn = Tab::Tourn->retrieve($clone);
./tourn/clone_tournament.mas:	my $ostart = $old_tourn->start;
./tourn/clone_tournament.mas:	$name =~ tr/a-zA-Z0-9 //cd;
./tourn/clone_tournament.mas:	my $diff = $start->delta_days($ostart);  
./tourn/clone_tournament.mas:	my $reg_start = $old_tourn->reg_start->clone;
./tourn/clone_tournament.mas:	$reg_start->add_duration($diff);
./tourn/clone_tournament.mas:	my $reg_end = $old_tourn->end->clone;
./tourn/clone_tournament.mas:	$reg_end->add_duration($diff);
./tourn/clone_tournament.mas:	my $already = Tab::Tourn->search( name => $name, start => $start, end => $end )->first;
./tourn/clone_tournament.mas:		$m->print("<p>That tournament already exists.  Click your email address above and you'll see it on the right</p>");
./tourn/clone_tournament.mas:		$m->abort;
./tourn/clone_tournament.mas:		my $tourn = Tab::Tourn->create({ 
./tourn/clone_tournament.mas:			country   => $old_tourn->country,
./tourn/clone_tournament.mas:			state     => $old_tourn->state,
./tourn/clone_tournament.mas:			tz        => $old_tourn->tz,
./tourn/clone_tournament.mas:		$tourn->setting('created_by', $person->id);
./tourn/clone_tournament.mas:		my $owner = Tab::Permission->create({ 
./tourn/clone_tournament.mas:			tourn  => $tourn->id,
./tourn/clone_tournament.mas:			person => $person->id,
./tourn/clone_tournament.mas:		my $contact = Tab::Permission->create({ 
./tourn/clone_tournament.mas:			tourn  => $tourn->id,
./tourn/clone_tournament.mas:			person => $person->id,
./tourn/clone_tournament.mas:		foreach my $setting ($old_tourn->settings) {
./tourn/clone_tournament.mas:			next if $setting->tag eq "invite";
./tourn/clone_tournament.mas:			next if $setting->tag eq "bills";
./tourn/clone_tournament.mas:			next if $setting->tag eq "created_by";
./tourn/clone_tournament.mas:			my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			if ($nsetting->value eq "date") { 
./tourn/clone_tournament.mas:				my $new_date = $nsetting->value_date->clone;
./tourn/clone_tournament.mas:				$new_date->add_duration($diff);
./tourn/clone_tournament.mas:				$nsetting->value_date($new_date);
./tourn/clone_tournament.mas:				$nsetting->update;
./tourn/clone_tournament.mas:		foreach my $circuit ($old_tourn->tourn_circuits) { 
./tourn/clone_tournament.mas:			my $ncircuit = $circuit->copy({
./tourn/clone_tournament.mas:				tourn    => $tourn->id,
./tourn/clone_tournament.mas:		foreach my $housing ($old_tourn->housing_slots) { 
./tourn/clone_tournament.mas:			my $nhousing = $housing->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			my $new_night = $housing->night;
./tourn/clone_tournament.mas:			$new_night->add_duration($diff);
./tourn/clone_tournament.mas:			$nhousing->night($new_night);
./tourn/clone_tournament.mas:			$nhousing->update;
./tourn/clone_tournament.mas:		foreach my $ed ($old_tourn->patterns) { 
./tourn/clone_tournament.mas:			my $ned = $ed->copy ({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			$pattern_translator{$ed->id} = $ned->id;
./tourn/clone_tournament.mas:		foreach my $tournsite ($old_tourn->tourn_sites) {
./tourn/clone_tournament.mas:			my $ntournsite = $tournsite->copy ({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:		if ($tourn->webname eq $old_tourn->webname) { 
./tourn/clone_tournament.mas:			foreach my $webpage ($tourn->webpages) {
./tourn/clone_tournament.mas:				my $nwebpage = $webpage->copy ({
./tourn/clone_tournament.mas:					tourn => $tourn->id
./tourn/clone_tournament.mas:		foreach my $concession ($old_tourn->concessions) {
./tourn/clone_tournament.mas:			my $nconcession = $concession->copy ({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			my $new_deadline = $concession->deadline;
./tourn/clone_tournament.mas:			$new_deadline->add_duration($diff) if $new_deadline;
./tourn/clone_tournament.mas:			$nconcession->deadline($new_deadline) if $new_deadline;
./tourn/clone_tournament.mas:			$nconcession->update;
./tourn/clone_tournament.mas:		foreach my $tourn_fee ($old_tourn->tourn_fees) {
./tourn/clone_tournament.mas:			my $ntourn_fee = $tourn_fee->copy ({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			my $new_start = $ntourn_fee->start;
./tourn/clone_tournament.mas:			$new_start->add_duration($diff) if $new_start;
./tourn/clone_tournament.mas:			$ntourn_fee->start($new_start) if $new_start;
./tourn/clone_tournament.mas:			my $new_end = $ntourn_fee->end;
./tourn/clone_tournament.mas:			$new_end->add_duration($diff) if $new_end;
./tourn/clone_tournament.mas:			$ntourn_fee->end($new_end) if $new_end;
./tourn/clone_tournament.mas:			$ntourn_fee->update;
./tourn/clone_tournament.mas:		if ($webname eq $old_tourn->webname) {
./tourn/clone_tournament.mas:			foreach my $follower (Tab::Follower->search( tourn => $old_tourn->id, type => "tourn" )) { 
./tourn/clone_tournament.mas:				my $nfollow = $follower->copy ({
./tourn/clone_tournament.mas:					tourn => $tourn->id
./tourn/clone_tournament.mas:		foreach my $ts ($old_tourn->timeslots) { 
./tourn/clone_tournament.mas:			my $nts = $ts->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			my $ntstart = $nts->start;
./tourn/clone_tournament.mas:			$ntstart->add_duration($diff);
./tourn/clone_tournament.mas:			$nts->start($ntstart);
./tourn/clone_tournament.mas:			my $ntend = $nts->end;
./tourn/clone_tournament.mas:			$ntend->add_duration($diff);
./tourn/clone_tournament.mas:			$nts->end($ntend);
./tourn/clone_tournament.mas:			$nts->update;
./tourn/clone_tournament.mas:			$timeslot_translator{$ts->id} = $nts->id;
./tourn/clone_tournament.mas:		foreach my $jg ($old_tourn->categories) { 
./tourn/clone_tournament.mas:			my $njg = $jg->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			$category_translator{$jg->id} = $njg->id;
./tourn/clone_tournament.mas:			foreach my $setting ($jg->settings) {
./tourn/clone_tournament.mas:				my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:					category => $njg->id
./tourn/clone_tournament.mas:				if ($nsetting->value eq "date") { 
./tourn/clone_tournament.mas:					if ($nsetting->value_date) { 
./tourn/clone_tournament.mas:						my $new_date = $nsetting->value_date->clone;
./tourn/clone_tournament.mas:						$new_date->add_duration($diff);
./tourn/clone_tournament.mas:						$nsetting->value_date($new_date);
./tourn/clone_tournament.mas:				$nsetting->update;
./tourn/clone_tournament.mas:			foreach my $jpool ($jg->jpools) { 
./tourn/clone_tournament.mas:				my $npool = $jpool->copy({
./tourn/clone_tournament.mas:					category => $njg->id
./tourn/clone_tournament.mas:				$jpool_translator{$jpool->id} = $npool->id;
./tourn/clone_tournament.mas:			foreach my $rs ($jg->rating_subsets) { 
./tourn/clone_tournament.mas:				my $nrs = $rs->copy({
./tourn/clone_tournament.mas:					category => $njg->id
./tourn/clone_tournament.mas:				$rating_subset_translator{$rs->id} = $nrs->id;
./tourn/clone_tournament.mas:				foreach my $rating_tier ($rs->rating_tiers) {
./tourn/clone_tournament.mas:					my $nrating_tier = $rating_tier->copy({
./tourn/clone_tournament.mas:						rating_subset => $nrs->id
./tourn/clone_tournament.mas:			foreach my $rt ($jg->rating_tiers) { 
./tourn/clone_tournament.mas:				my $nrt = $rt->copy({
./tourn/clone_tournament.mas:					category => $njg->id
./tourn/clone_tournament.mas:			foreach my $strike_timeslot ($jg->strike_timeslots) { 
./tourn/clone_tournament.mas:				my $nstrike_timeslot = $strike_timeslot->copy({
./tourn/clone_tournament.mas:					category => $njg->id
./tourn/clone_tournament.mas:				my $new_start = $strike_timeslot->start;
./tourn/clone_tournament.mas:				$new_start->add_duration($diff);
./tourn/clone_tournament.mas:				$nstrike_timeslot->start($new_start);
./tourn/clone_tournament.mas:				my $new_end = $strike_timeslot->end;
./tourn/clone_tournament.mas:				$new_end->add_duration($diff);
./tourn/clone_tournament.mas:				$nstrike_timeslot->end($new_end);
./tourn/clone_tournament.mas:				$nstrike_timeslot->update;
./tourn/clone_tournament.mas:		foreach my $tiebreak_set ($old_tourn->tiebreak_sets) {
./tourn/clone_tournament.mas:			my $ntiebreak_set = $tiebreak_set->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			foreach my $tb ($tiebreak_set->tiebreaks) { 
./tourn/clone_tournament.mas:				my $ntb = $tb->copy({
./tourn/clone_tournament.mas:					tiebreak_set => $ntiebreak_set->id
./tourn/clone_tournament.mas:			$tiebreak_set_translator{$tiebreak_set->id} = $ntiebreak_set->id;
./tourn/clone_tournament.mas:		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) { 
./tourn/clone_tournament.mas:			my $nevent = $event->copy({
./tourn/clone_tournament.mas:				tourn       => $tourn->id,
./tourn/clone_tournament.mas:				category => $category_translator{$event->category->id}
./tourn/clone_tournament.mas:			$nevent->pattern($pattern_translator{$event->pattern->id}) if $event->pattern;
./tourn/clone_tournament.mas:			$nevent->rating_subset($rating_subset_translator{$event->rating_subset->id}) if $event->rating_subset;
./tourn/clone_tournament.mas:			$nevent->update;
./tourn/clone_tournament.mas:			$event_translator{$event->id} = $nevent->id;
./tourn/clone_tournament.mas:			foreach my $setting ($event->settings) { 
./tourn/clone_tournament.mas:				next if $setting->tag eq "round_notified";
./tourn/clone_tournament.mas:				next if $setting->tag eq "first_round_notified";
./tourn/clone_tournament.mas:				my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:					event => $nevent->id
./tourn/clone_tournament.mas:				if ($setting->tag eq "speaker_tbset") { 
./tourn/clone_tournament.mas:					$nsetting->value($tiebreak_set_translator{$setting->value});
./tourn/clone_tournament.mas:					$nsetting->update;
./tourn/clone_tournament.mas:				if ($nsetting->value eq "date") { 
./tourn/clone_tournament.mas:					my $new_date = $nsetting->value_date->clone;
./tourn/clone_tournament.mas:					$new_date->add_duration($diff);
./tourn/clone_tournament.mas:					$nsetting->value_date($new_date);
./tourn/clone_tournament.mas:					$nsetting->update;
./tourn/clone_tournament.mas:			system "$Tab::s3_cmd cp -r $Tab::s3_bucket/tourns/".$old_tourn->id."/events/".$event->id." $Tab::s3_bucket/tourns/".$tourn->id."/events/".$nevent->id;
./tourn/clone_tournament.mas:			foreach my $round ($event->rounds) { 
./tourn/clone_tournament.mas:				my $nround = $round->copy({
./tourn/clone_tournament.mas:					event => $nevent->id,
./tourn/clone_tournament.mas:				$nround->timeslot($timeslot_translator{$round->timeslot->id}) if $round->timeslot;
./tourn/clone_tournament.mas:				$nround->tiebreak_set($tiebreak_set_translator{$round->tiebreak_set->id}) if $round->tiebreak_set;
./tourn/clone_tournament.mas:				$nround->update;
./tourn/clone_tournament.mas:				$round_translator{$round->id} = $nround->id;
./tourn/clone_tournament.mas:				foreach my $setting ($round->settings) {
./tourn/clone_tournament.mas:					next if $setting->value eq "date";
./tourn/clone_tournament.mas:					next if $setting->tag eq "entry_list_published";
./tourn/clone_tournament.mas:					next if $setting->tag eq "motion";
./tourn/clone_tournament.mas:					next if $setting->tag eq "cat_id";
./tourn/clone_tournament.mas:					my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:						round => $nround->id
./tourn/clone_tournament.mas:			if ($nevent->setting("bid_round")) { 
./tourn/clone_tournament.mas:				my $new_bid = $round_translator{$nevent->setting("bid_round")};
./tourn/clone_tournament.mas:				$nevent->setting("bid_round",  $new_bid);
./tourn/clone_tournament.mas:		foreach my $jpool ($old_tourn->jpools) { 
./tourn/clone_tournament.mas:			my $njpool = $jpool->copy({ tourn => $tourn->id });
./tourn/clone_tournament.mas:			foreach my $round ($jpool->rounds) { 
./tourn/clone_tournament.mas:				Tab::JPoolRound->create({
./tourn/clone_tournament.mas:					round => $round_translator{$round->id},
./tourn/clone_tournament.mas:					jpool => $njpool->id
./tourn/clone_tournament.mas:		foreach my $rpool ($old_tourn->rpools) { 
./tourn/clone_tournament.mas:			my $nrpool = $rpool->copy({ tourn => $tourn->id });
./tourn/clone_tournament.mas:			foreach my $round ($rpool->rounds) { 
./tourn/clone_tournament.mas:				next unless $round_translator{$round->id};
./tourn/clone_tournament.mas:				Tab::RPoolRound->create({
./tourn/clone_tournament.mas:					round => $round_translator{$round->id},
./tourn/clone_tournament.mas:					rpool => $nrpool->id
./tourn/clone_tournament.mas:    Tab::Round->set_sql(clear_publish => "
./tourn/clone_tournament.mas:    Tab::Round->set_sql(clear_publish_fields => "
./tourn/clone_tournament.mas:    Tab::Round->sql_clear_publish->execute($tourn->id);
./tourn/clone_tournament.mas:    Tab::Round->sql_clear_publish_fields->execute($tourn->id);
./tourn/clone_tournament.mas:		foreach my $room_strike ($old_tourn->room_strikes) { 
./tourn/clone_tournament.mas:			next if $room_strike->type eq "entry";
./tourn/clone_tournament.mas:			next if $room_strike->type eq "judge";
./tourn/clone_tournament.mas:			my $nroom_strike = $room_strike->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			$nroom_strike->event($event_translator{$room_strike->event->id}) if $room_strike->event;
./tourn/clone_tournament.mas:			if ($nroom_strike->start) { 
./tourn/clone_tournament.mas:				my $new_start = $nroom_strike->start;
./tourn/clone_tournament.mas:				$new_start->add_duration($diff);
./tourn/clone_tournament.mas:				$nroom_strike->start($new_start);
./tourn/clone_tournament.mas:			if ($nroom_strike->end) { 
./tourn/clone_tournament.mas:				my $new_end = $nroom_strike->end;
./tourn/clone_tournament.mas:				$new_end->add_duration($diff);
./tourn/clone_tournament.mas:				$nroom_strike->end($new_end);
./tourn/clone_tournament.mas:			$nroom_strike->update;
./tourn/clone_tournament.mas:		foreach my $sweep_set ($old_tourn->sweep_sets) {
./tourn/clone_tournament.mas:			my $nsweep_set = $sweep_set->copy({
./tourn/clone_tournament.mas:				tourn => $tourn->id
./tourn/clone_tournament.mas:			$sweep_set_translator{$sweep_set->id} = $nsweep_set->id;
./tourn/clone_tournament.mas:			foreach my $sweep_event (Tab::SweepEvent->search( sweep_set => $sweep_set->id)) { 
./tourn/clone_tournament.mas:				my $nsweep_event = $sweep_event->copy({  
./tourn/clone_tournament.mas:					event     => $event_translator{$sweep_event->event},
./tourn/clone_tournament.mas:					sweep_set => $nsweep_set->id 
./tourn/clone_tournament.mas:			foreach my $sweep_rule (Tab::SweepRule->search( sweep_set => $sweep_set->id)) { 
./tourn/clone_tournament.mas:				if ($sweep_rule->tag eq "ignore_round") { 
./tourn/clone_tournament.mas:					my $nsweep_rule = $sweep_rule->copy({  
./tourn/clone_tournament.mas:						sweep_set => $nsweep_set->id,
./tourn/clone_tournament.mas:						value     => $round_translator{$sweep_rule->value}
./tourn/clone_tournament.mas:					my $nsweep_rule = $sweep_rule->copy({  
./tourn/clone_tournament.mas:						sweep_set => $nsweep_set->id 
./tourn/clone_tournament.mas:		foreach my $sweep_set ($old_tourn->sweep_sets) {
./tourn/clone_tournament.mas:			my @links = Tab::SweepInclude->search( parent => $sweep_set );
./tourn/clone_tournament.mas:				my $nlink = $link->copy({ 
./tourn/clone_tournament.mas:					parent => $sweep_set_translator{$link->parent->id},
./tourn/clone_tournament.mas:					child => $sweep_set_translator{$link->child->id},
./tourn/clone_tournament.mas:		$m->comp("/funclib/update_calendar.mas", tourn => $tourn) unless $tourn->hidden;
./tourn/clone_tournament.mas:		$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);
./tourn/wudc_upload.mhtml:				<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="xml" action="import_wudc_xml.mhtml" method="post">
./tourn/results/entry_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./tourn/results/entry_print.mhtml:	my $tourn = $school->tourn;
./tourn/results/entry_print.mhtml:	my $filename = "registration-".$school_id."-".$session->id;
./tourn/results/entry_print.mhtml:	`rm -f $filepath.*`;
./tourn/results/entry_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1 );
./tourn/results/entry_print.mhtml:	my $now = DateTime->now;	
./tourn/results/entry_print.mhtml:	$now->set_time_zone($tourn->tz);
./tourn/results/entry_print.mhtml:	print TEXOUT "{\\bf Circuits:} & ".&Tab::texify($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn, print_abbr => 1))." & ";
./tourn/results/entry_print.mhtml:	print TEXOUT "{\\bf Tournament:} & ".&Tab::texify(substr($tourn->name,0,30))." \\\\ \n ";
./tourn/results/entry_print.mhtml:	print TEXOUT &Tab::texify($school->code) if $tourn->setting("school_code");
./tourn/results/entry_print.mhtml:	print TEXOUT " ". &Tab::texify($school->name);
./tourn/results/entry_print.mhtml:	print TEXOUT " (".&Tab::texify($school->chapter->country." ".$school->chapter->state).")";
./tourn/results/entry_print.mhtml:	$m->comp("/register/school/print/registration.mas", school_id => $school->id, filename => $filename);
./tourn/results/entry_print.mhtml:    $m->comp("/register/school/print/housing.mas", school_id => $school->id, filename => $filename) if $tourn->setting("housing");
./tourn/results/entry_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./tourn/results/autohandler:		$school = Tab::School->retrieve($school_id) if $school_id;
./tourn/results/autohandler:		$session->update;
./tourn/results/autohandler:		my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./tourn/results/autohandler:		my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./tourn/results/autohandler:		$m->abort unless $chapter && $tourn;
./tourn/results/autohandler:		$school = $chapter->school($tourn);
./tourn/results/autohandler:	$m->abort unless $school;
./tourn/results/autohandler:	my $tourn = $school->tourn;
./tourn/results/autohandler:	$m->comp("/user/login/person_required.mas", person => $person, session => $session);
./tourn/results/autohandler:    $m->comp("/user/chapter/auth.mas", chapter => $school->chapter, person => $person, session => $session);
./tourn/results/autohandler:	$m->call_next(school => $school, tourn => $tourn);
./tourn/results/index.mhtml:%		if ($tourn->results) {
./tourn/results/index.mhtml:			<& "/public_site/results/".$tourn->circuit->id."/".$tourn->id."/index.mhtml" &>
./tourn/results/print_school_report.mhtml:	$m->comp("/results/prep_ballots.mas", tourn => $tourn);
./tourn/results/print_school_report.mhtml:    $m->comp("/results/sweep_entries.mas", tourn => $tourn, no_prep => 1);
./tourn/results/print_school_report.mhtml:	foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)( type => "speech")) { 
./tourn/results/print_school_report.mhtml:		my @finalists = $m->comp(
./tourn/results/print_school_report.mhtml:		push (@{$finalists_by_event{$event->id}}, @finalists);
./tourn/results/print_school_report.mhtml:	my $basename = "/tmp/school-reports-school-".$school->id."-".$session->id;
./tourn/results/print_school_report.mhtml:    my $garbage = `rm -f $filename.*`;
./tourn/results/print_school_report.mhtml:\\addtolength{\\hoffset}{-.1in}
./tourn/results/print_school_report.mhtml:	my %entries_counted = $m->comp("/results/school_count.mas", school => $school, tourn => $tourn);
./tourn/results/print_school_report.mhtml:	foreach my $entry ($school->entries) {
./tourn/results/print_school_report.mhtml:	   	$school_points = $school_points + $entry->setting("sweeps") if $entries_counted{$entry->id};
./tourn/results/print_school_report.mhtml:	print TEXOUT "{\\Large ".&Tab::texify($school->chapter->name) ."'s results at ".&Tab::texify($tourn->name)."} & ";
./tourn/results/print_school_report.mhtml:	foreach my $entry (sort {$a->code <=> $b->code} $school->entries) {
./tourn/results/print_school_report.mhtml:		next if $entry->waitlist == 1|| $entry->dropped == 1;
./tourn/results/print_school_report.mhtml:		my @ballots = Tab::Ballot->search_ordered_by_round($entry->id); 
./tourn/results/print_school_report.mhtml:		print TEXOUT $entry->code." & ";
./tourn/results/print_school_report.mhtml:		print TEXOUT $entry->event->abbr." & ";
./tourn/results/print_school_report.mhtml:		print TEXOUT ($entry->event->team == 1) ? substr($entry->student->last.", ".$entry->student->first,0,20) : "";
./tourn/results/print_school_report.mhtml:		print TEXOUT ($entry->event->team == 2) ? substr($entry->student->last." \\& ".$entry->partner->last,0,20) : "";
./tourn/results/print_school_report.mhtml:		my $c_name = $entry->name if $entry->event->team;
./tourn/results/print_school_report.mhtml:		print TEXOUT ($entry->event->team == 3) ? substr($c_name,0,20) : "";
./tourn/results/print_school_report.mhtml:		print TEXOUT  "*" if $entry->event->team == 1 && $entry->student->novice;
./tourn/results/print_school_report.mhtml:		print TEXOUT  "*" if $entry->event->team == 2 && ($entry->student->novice || $entry->partner->novice);
./tourn/results/print_school_report.mhtml:		print TEXOUT ($entries_counted{$entry->id}) ? "{\\bf".$entry->setting("sweeps")."}" : $entry->setting("sweeps") unless $entry->dropped;
./tourn/results/print_school_report.mhtml:		print TEXOUT "DROP" if $entry->dropped;
./tourn/results/print_school_report.mhtml:		if ($entry->event->type eq "speech") {
./tourn/results/print_school_report.mhtml:				print TEXOUT $ballot->rank."/".$ballot->points;
./tourn/results/print_school_report.mhtml:				print TEXOUT " \\emph{(".$ballot->real_rank."/".$ballot->real_points.") }" 
./tourn/results/print_school_report.mhtml:					if $ballot->real_rank != $ballot->rank;
./tourn/results/print_school_report.mhtml:		foreach my $finalist (@{$finalists_by_event{$entry->event->id}}) {
./tourn/results/print_school_report.mhtml:			next if $finalist->id != $entry->id;
./tourn/results/print_school_report.mhtml:	`rm -f $filename.tex $filename.log $filename.dvi $filename.aux` unless $debug;
./tourn/results/print_school_report.mhtml:	$m->redirect($Tab::url_prefix."".$basename.".pdf");
./tourn/results/invoice_print.mhtml:#	my $school = Tab::School->retrieve($school_id);
./tourn/results/invoice_print.mhtml:	my $filename = $Tab::file_root."/tmp/invoice-".$school->id."-".$session->id;
./tourn/results/invoice_print.mhtml:	my $garbage = `rm -f $filename.*`;
./tourn/results/invoice_print.mhtml:	$name =~ tr/[a-z]/[A-Z]/;
./tourn/results/invoice_print.mhtml:\\addtolength{\\hoffset}{-.1in}
./tourn/results/invoice_print.mhtml:	$m->comp("/funclib/fees_print.mas", 
./tourn/results/invoice_print.mhtml:		school_id => $school->id,
./tourn/results/invoice_print.mhtml:`rm -f $filename.tex $filename.log $filename.dvi $filename.aux` unless $debug;
./tourn/results/invoice_print.mhtml:$m->redirect("$Tab::url_prefix/tmp/invoice-".$school->id."-".$session->id.".pdf");
./tourn/confirm.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/confirm.mhtml:	my @sites = $tourn->sites;
./tourn/confirm.mhtml:	foreach my $tourn_circuit ($tourn->tourn_circuits) { 
./tourn/confirm.mhtml:		next if $tourn_circuit->approved;
./tourn/confirm.mhtml:		next if Tab::Permission->search( tag => "circuit", circuit => $tourn_circuit->circuit->id, person => $person->id);
./tourn/confirm.mhtml:		my $circuit = $tourn_circuit->circuit;
./tourn/confirm.mhtml:		foreach my $admin ($circuit->admins) { 
./tourn/confirm.mhtml:			my $subject =  $circuit->abbr." Tournament Requested";
./tourn/confirm.mhtml:			$body .=$person->first." ".$person->last." <".$person->email."> has requested approval to list a tournament ";
./tourn/confirm.mhtml:			$body .= "on tabroom.com in your circuit:\n\n".$circuit->name."\n\n";
./tourn/confirm.mhtml:			$body .= "\tName: ".$tourn->name."\n";
./tourn/confirm.mhtml:			$body .= "\tStart Date: ".Tab::nicedate($tourn->start)."\n";
./tourn/confirm.mhtml:			$body .= "\tEnd Date: ".Tab::nicedate($tourn->end)."\n";
./tourn/confirm.mhtml:				$body .= " ".$site->name;
./tourn/confirm.mhtml:			$body .= "\tOnline Registration opens ".Tab::nicedt($tourn->reg_start->set_time_zone($tourn->tz))." (".$tourn->tz.")\n\n";
./tourn/confirm.mhtml:			$body .= "/user/circuit/approvals.mhtml?circuit_id=".$circuit->id."\n\n";
./tourn/confirm.mhtml:			$m->comp( "/funclib/send_email.mas", from => $person, to => $admin, subject => $subject, body => $body );
./tourn/confirm.mhtml:			Your requested tabroom.com tournament, <strong><% $tourn->name
./tourn/confirm.mhtml:%			if ($tourn->setting("tourn_notes")) { 
./tourn/confirm.mhtml:				<p><% $tourn->setting("tourn_notes") %></p>
./tourn/all.mhtml:	Tab::Tourn->set_sql( by_director => "
./tourn/all.mhtml:	my @tourns = Tab::Tourn->search_by_director($person->id);
./tourn/all.mhtml:	my $now = DateTime->now;
./tourn/all.mhtml:%			   my $open++ if ($tourn->reg_start && $tourn->reg_end && $tourn->reg_start->epoch < $now->epoch &&  
./tourn/all.mhtml:%					$tourn->reg_end->epoch > $now->epoch);
./tourn/all.mhtml:						<% Tab::pickerdate($tourn->start) %>
./tourn/all.mhtml:						<% $tourn->start->year %>
./tourn/all.mhtml:%					   foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) {
./tourn/all.mhtml:								<% $circuit->abbr %>
./tourn/all.mhtml:						<a class="button white leftalign" href="select.mhtml?tourn_id=<% $tourn->id %>">
./tourn/all.mhtml:					   		<% $tourn->name %>
./tourn/all.mhtml:						<% $tourn->location %>
./tourn/tournaman_speakertab.mhtml:	my $now = DateTime->now;
./tourn/tournaman_speakertab.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/tournaman_speakertab.mhtml:	$now->set_time_zone($tz);
./tourn/tournaman_speakertab.mhtml:	my $req = Apache2::Request->new($r);
./tourn/tournaman_speakertab.mhtml:	my $xml_file = $req->upload("speakertab");
./tourn/tournaman_speakertab.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/tournaman_speakertab.mhtml:	my $webname=$xml_file->filename;
./tourn/tournaman_speakertab.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./tourn/tournaman_speakertab.mhtml:		$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn_id&msg=$msg");
./tourn/tournaman_speakertab.mhtml:	`perl -pi -e s/'&'/'&amp;'/g  $xml_filename`;
./tourn/tournaman_speakertab.mhtml:	my $te = HTML::TableExtract->new( headers => ['Position', 'Name', 'Team', 'Total Points'] );
./tourn/tournaman_speakertab.mhtml:	$te->parse($data);
./tourn/tournaman_speakertab.mhtml:	#$row->[0] will be Position, [1] will be Name, [2] will be Team, [3] will be total speaker points
./tourn/tournaman_speakertab.mhtml:	my @event = Tab::Event->search( tourn => $tourn_id );
./tourn/tournaman_speakertab.mhtml:#	$event[0]->id(21354);
./tourn/tournaman_speakertab.mhtml:	my @entry_student = $m->comp('/funclib/entry_student_by_event.mas', event => $event[0]->id );
./tourn/tournaman_speakertab.mhtml:#		print "student id=".$row->student;
./tourn/tournaman_speakertab.mhtml:#		my $s = Tab::Student->retrieve($dummy);  WHY THE FUCK DOESN'T THIS WORK?
./tourn/tournaman_speakertab.mhtml:		my @student = Tab::Student->search( id => $row->student );
./tourn/tournaman_speakertab.mhtml:		$dummy = $student[0]->first." ".$student[0]->last;
./tourn/tournaman_speakertab.mhtml:		$entry_student{$dummy} = $row->id;
./tourn/tournaman_speakertab.mhtml:	my $RSobject = Tab::ResultSet->create( {
./tourn/tournaman_speakertab.mhtml:		event => $event[0]->id,
./tourn/tournaman_speakertab.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_speakertab.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_speakertab.mhtml:	   	#print $row->[0]." ". @$row[1]." ". @$row[2]." ". @$row[3]." ".$entry{@$row[1]};
./tourn/tournaman_speakertab.mhtml:		my $entryrecord = Tab::EntryStudent->retrieve( $entry_student{ @$row[1] } );
./tourn/tournaman_speakertab.mhtml:#		print "entry rec:".$entryrecord->id if $entryrecord;
./tourn/tournaman_speakertab.mhtml:		my $result = Tab::Result->create( {
./tourn/tournaman_speakertab.mhtml:			student => $entryrecord->student,
./tourn/tournaman_speakertab.mhtml:			entry => $entryrecord->entry,
./tourn/tournaman_speakertab.mhtml:			result_set => $RSobject->id,
./tourn/tournaman_speakertab.mhtml:		Tab::ResultValue->create( {
./tourn/tournaman_speakertab.mhtml:			result => $result->id,
./tourn/tournaman_speakertab.mhtml:		Tab::ResultValue->create( {
./tourn/tournaman_speakertab.mhtml:			result => $result->id,
./tourn/tournaman_speakertab.mhtml:$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn_id");	
./tourn/tournaman_save_create.mhtml:		my $tourn = Tab::Tourn->create( {
./tourn/tournaman_save_create.mhtml:		$tourn->setting("freeze_deadline", "date", $start);
./tourn/tournaman_save_create.mhtml:		$tourn->setting("fine_deadline", "date", $start);
./tourn/tournaman_save_create.mhtml:		$tourn->setting("judge_deadline", "date", $start);
./tourn/tournaman_save_create.mhtml:		$tourn->setting("drops_deadline", "date", $start);
./tourn/tournaman_save_create.mhtml:		$tourn->setting("school_codes", "shortname");
./tourn/tournaman_save_create.mhtml:		Tab::Permission->create ({ tourn   => $tourn->id, person => $person, tag => "contact" });
./tourn/tournaman_save_create.mhtml:		Tab::Permission->create ({ tourn   => $tourn->id, person => $person, tag => "owner" });
./tourn/tournaman_save_create.mhtml:		Tab::TournCircuit->create ({ tourn => $tourn->id, circuit => 50 });
./tourn/tournaman_save_create.mhtml:		my $category = Tab::Category->create( {
./tourn/tournaman_save_create.mhtml:			tourn => $tourn->id,
./tourn/tournaman_save_create.mhtml:		Tab::TournSetting->create( {
./tourn/tournaman_save_create.mhtml:			tourn => $tourn->id,
./tourn/tournaman_save_create.mhtml:		$m->redirect("/user/tourn/tournaman_upload.mhtml?tourn_id=$tourn");	
./tourn/tournaman_save_create.mhtml:		#return ($tourn->id, $category->id);
./tourn/save.mhtml:		$m->redirect("location.mhtml?name=$name&start=$start&end=$end&reg_start=$reg_start&reg_end=$reg_end&drops=$drops&judge=$judge&frozen=$frozen&fines=$fines&circuit_string=$circuit_string&city=$city&state=$state&tz=$tz&country=$country&error=$return");
./tourn/save.mhtml:	foreach my $circuit_id (split(/-/, $circuit_string)) { 
./tourn/save.mhtml:		 push(@circuits, Tab::Circuit->retrieve($circuit_id));
./tourn/save.mhtml:	$default_circuit = Tab::Circuit->retrieve("6") unless $default_circuit;
./tourn/save.mhtml:	my $default_circuit_id = $default_circuit->id if $default_circuit;
./tourn/save.mhtml:	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
./tourn/save.mhtml:	my $enddt = DateTime::Format::MySQL->parse_datetime($end) if $end;
./tourn/save.mhtml:	my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
./tourn/save.mhtml:	my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
./tourn/save.mhtml:	my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
./tourn/save.mhtml:	my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
./tourn/save.mhtml:	my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
./tourn/save.mhtml:	my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);
./tourn/save.mhtml:	$startdt->set_time_zone($tz);
./tourn/save.mhtml:	$enddt->set_time_zone($tz);
./tourn/save.mhtml:	$reg_startdt->set_time_zone($tz);
./tourn/save.mhtml:	$reg_enddt->set_time_zone($tz);
./tourn/save.mhtml:	$frozendt->set_time_zone($tz);
./tourn/save.mhtml:	$finesdt->set_time_zone($tz);
./tourn/save.mhtml:	$judgedt->set_time_zone($tz);
./tourn/save.mhtml:	$dropsdt->set_time_zone($tz);
./tourn/save.mhtml:	my $site = Tab::Site->retrieve($site_id) if $site_id;
./tourn/save.mhtml:		$site = Tab::Site->create({
./tourn/save.mhtml:			host    => $person->id,
./tourn/save.mhtml:		$site_id = $site->id;
./tourn/save.mhtml:	my $tourn = Tab::Tourn->create( { 
./tourn/save.mhtml:	$tourn->setting("freeze_deadline", "date", $frozendt);
./tourn/save.mhtml:	$tourn->setting("fine_deadline", "date", $finesdt);
./tourn/save.mhtml:	$tourn->setting("judge_deadline", "date", $judgedt);
./tourn/save.mhtml:	$tourn->setting("drops_deadline", "date", $dropsdt);
./tourn/save.mhtml:	$tourn->setting("created_by", $person->id);
./tourn/save.mhtml:	my $join = Tab::TournSite->create ({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	Tab::Permission->create ({ tourn   => $tourn->id, person => $person->id, tag => 'contact' });
./tourn/save.mhtml:	Tab::Permission->create ({ tourn   => $tourn->id, person => $person->id, tag => 'owner' });
./tourn/save.mhtml:		$approved = 1 if Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit->id );
./tourn/save.mhtml:		my $join = Tab::TournCircuit->create ({
./tourn/save.mhtml:			tourn    => $tourn->id,
./tourn/save.mhtml:			circuit  => $circuit->id,
./tourn/save.mhtml:	$tourn->setting("school_codes", "shortname");
./tourn/save.mhtml:	my $tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	$tiebreak_set->setting("equal_elims", "1");
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	$tiebreak_set->setting("truncate_to_smallest", 1);
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	$tiebreak_set->setting("equal_elims", "1");
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	$tiebreak_set->setting("equal_elims", "1");
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	$tiebreak_set->setting("equal_elims", "1");
./tourn/save.mhtml:	$tiebreak_set = Tab::TiebreakSet->create({
./tourn/save.mhtml:		tourn => $tourn->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	Tab::Tiebreak->create({
./tourn/save.mhtml:		tiebreak_set        => $tiebreak_set->id,
./tourn/save.mhtml:	$tiebreak_set->setting("forfeits_never_break", "1");
./tourn/save.mhtml:	$tiebreak_set->setting("equal_elims", "1");
./tourn/save.mhtml:	$m->comp("/funclib/update_calendar.mas", tourn => $tourn) unless $tourn->hidden;
./tourn/save.mhtml:	$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);
./tourn/select.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/select.mhtml:    Tab::Tourn->set_sql( by_director => "
./tourn/select.mhtml:	my @auth_tourns = Tab::Tourn->search_by_director($person->id);
./tourn/select.mhtml:    Tab::Circuit->set_sql(by_admin => "
./tourn/select.mhtml:	my @auth_circuits = Tab::Circuit->search_by_admin($person->id);
./tourn/select.mhtml:		$ok++ if $person->site_admin;
./tourn/select.mhtml:		$ok++ if grep $_->id eq $tourn->id, @auth_tourns;
./tourn/select.mhtml:		foreach my $circuit ($tourn->circuits) { 
./tourn/select.mhtml:			$ok++ if grep $_->id eq $circuit->id, @auth_circuits;
./tourn/select.mhtml:			my @ta = Tab::Permission->search( tourn => $tourn->id, person => $person->id );
./tourn/select.mhtml:				$no_reg++ if $_->tag eq "no_registration";
./tourn/select.mhtml:				$no_reg++ if $_->tag eq "entry_only";
./tourn/select.mhtml:			undef $no_reg if $person->site_admin;
./tourn/select.mhtml:			$session->tourn($tourn->id);
./tourn/select.mhtml:			$session->update;
./tourn/select.mhtml:				$m->redirect("/tabbing/entry/index.mhtml");
./tourn/select.mhtml:				$m->redirect("/register/index.mhtml");
./tourn/select.mhtml:			$m->redirect("/user/home.mhtml?err=$err");
./tourn/select.mhtml:		$m->print("<p>That tournament doesn't exist.  Quit messing around with the system.</p>");
./tourn/select.mhtml:		$m->abort;
./tourn/tournaman_create_tourney.mhtml:	my $tz = $person->tz;
./tourn/tournaman_create_tourney.mhtml:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./tourn/tournaman_upload.mhtml:	my $tourney = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./tourn/tournaman_upload.mhtml:	my @entries = Tab::Entry->search( tourn => $tourn_id);
./tourn/tournaman_upload.mhtml:	my @resultset = Tab::ResultSet->search( tourn => $tourn_id);
./tourn/tournaman_upload.mhtml:		if ($resultset->label eq "Final Places") {$teamresults=1;}
./tourn/tournaman_upload.mhtml:		if ($resultset->label eq "Speaker Awards") {$speakerresults=1;}
./tourn/tournaman_upload.mhtml:			<p>The best way to get your Tournaman results to tabroom is via the <a href="https://www.tabroom.com//jbruschke/CATDownloads/UniversalDataStructure.rtf">Universal Data Structure</a>, which can be accomplished in 3 steps.  First, download the <a href="https://www.tabroom.com/jbruschke/CATDownloads/CAT20.exe">CAT</a> (see the full CAT page from the top ribbon on the Tabroom.com homepage).  Second, run the CAT, click the "Utilities" button in the bottom-right, and then the "Import Tournaman" button in the top-right.  In your documents folder there is now a directory called CAT which stores a file called TourneyData.xml.  Third, go to the tournament <a href="/request.mhtml">creation page</a> and use the section titled "upload a tournament from an idebate XML File," and upload the TourneyData.xml file.  When it uploads, you're done, and you do NOT need to upload any information through this page.</p>
./tourn/tournaman_upload.mhtml:			<p>An alternative is to upload the results directly from the tournaman folder using this page; doing so will upload the final places and speaker awards, but will not include any round-by-round information.  To do so, complete the steps below in order. The step you need to complete next will appear in bold.</p>
./tourn/tournaman_upload.mhtml:%		if ($tourn_id > 0 and $#entries == -1) {
./tourn/tournaman_upload.mhtml:		STEP ONE: Complete -- tournament created and named <% $tourney->name %>
./tourn/tournaman_upload.mhtml:			<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="teamtab" action="tournaman_teamoverview.mhtml" method="post">
./tourn/tournaman_upload.mhtml:%		if ($tourn_id > 0 and $#entries > -1  and $teamresults == 0) {
./tourn/tournaman_upload.mhtml:		STEP ONE: Complete -- tournament created and named <% $tourney->name %>
./tourn/tournaman_upload.mhtml:		<br><br>STEP TWO: Complete -- Upload the team overview
./tourn/tournaman_upload.mhtml:		  Navigate to find the folder for the last round completed.  For example, if 5 rounds have been completed, find the folder called "Round 5 - Main."  Inside that folder will be a file labeled with the phrase Team Tab and the name of the round.  For Example, if the folder is for round 5, the file will be called "Team Tab After Round 5.html".  Identify that team tab file and click upload<br><br>
./tourn/tournaman_upload.mhtml:			<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="teamtab" action="tournaman_teamtab.mhtml" method="post">
./tourn/tournaman_upload.mhtml:%		if ($tourn_id > 0 and $#entries > -1  and $teamresults > 0 and $speakerresults == 0) {
./tourn/tournaman_upload.mhtml:		STEP ONE: Complete -- tournament created and named <% $tourney->name %>
./tourn/tournaman_upload.mhtml:		<br><br>STEP TWO: Complete -- Upload the team overview
./tourn/tournaman_upload.mhtml:		<br><br>Step THREE: Complete -- Upload the team results
./tourn/tournaman_upload.mhtml:		  Navigate to find the folder for the last round completed.  For example, if 5 rounds have been completed, find the folder called "Round 5 - Main."  This will be the same folder you used to upload the team tab.  Inside that folder will be a file labeled with the phrase Speaker Tab and the name of the round.  For Example, if the folder is for round 5, the file will be called "Speaker Tab After Round 5.html".  Identify that speaker tab file and click upload<br><br>
./tourn/tournaman_upload.mhtml:			<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="speakertab" action="tournaman_speakertab.mhtml" method="post">
./tourn/tournaman_upload.mhtml:%		if ($tourn_id > 0 and $#entries > -1  and $teamresults > 0 and $speakerresults > 0) {
./region/school_entry.mhtml:	my $school = Tab::School->retrieve($school_id);
./region/school_entry.mhtml:	my $tourn = $school->tournament;
./region/school_entry.mhtml:	my $region = $school->region;
./region/school_entry.mhtml:	unless ($region->director->id == $person->id) { 
./region/school_entry.mhtml:		$m->print("Stop messing around.  You are not authorized to view that region");
./region/school_entry.mhtml:		$m->abort;
./region/school_entry.mhtml:	my @entries = sort {$a->code <=> $b->code} $school->entries;
./region/school_entry.mhtml:	@entries = sort {$a->event->abbr cmp $b->event->abbr} @entries;
./region/school_entry.mhtml:		<h2><% $tourn->name %></h2>
./region/school_entry.mhtml:		<h4><% $school->name %></h4>
./region/school_entry.mhtml:						<% $entry->event->abbr %>
./region/school_entry.mhtml:						<% $entry->code %>
./region/school_entry.mhtml:						<% $entry->team_name %>
./region/school_entry.mhtml:						<% $entry->qualifier %> <% $entry->qualexp %>
./region/school_entry.mhtml:						<% $entry->qual2 %> <% $entry->qual2exp %>
./region/school_entry.mhtml:		<a class="yellow full" href="region.mhtml?region_id=<% $region->id %>&tourn_id=<% $tourn->id %>">
./region/school_entry.mhtml:%		foreach my $school ($tourn->schools(region => $region->id)) {
./region/school_entry.mhtml:			<a class="<% ($school->id == $school_id) ? "dk" : "" %>blue full" href="school_entry.mhtml?school_id=<% $school->id %>">
./region/school_entry.mhtml:				<% $school->name %> 
./region/admin_add.mhtml:	$email =~tr/[A-Z]/[a-z]/;
./region/admin_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./region/admin_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./region/admin_add.mhtml:	unless (Tab::ChapterCircuit->search( region => $region_id, chapter => $chapter_id)) { 
./region/admin_add.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./region/admin_add.mhtml:        $m->redirect("/user/region/tournaments.mhtml?region_id=$region_id&err=$err");
./region/admin_add.mhtml:	my $login = Tab::Login->search( username => $email )->first;
./region/admin_add.mhtml:        $m->redirect("/user/region/tournaments.mhtml?region_id=$region_id&err=$err");
./region/admin_add.mhtml:	my $admin_person = $login->person;
./region/admin_add.mhtml:	my $coach = Tab::Permission->search( chapter => $chapter_id, person => $admin_person->id )->first;
./region/admin_add.mhtml:		$coach->tag('chapter');
./region/admin_add.mhtml:		$coach->update;
./region/admin_add.mhtml:		$coach = Tab::Permission->create({
./region/admin_add.mhtml:			person => $admin_person->id,
./region/admin_add.mhtml:	my $msg = $admin_person->first." ".$admin_person->last." has been given access to ". $chapter->name;	
./region/admin_add.mhtml:    $m->redirect("/user/region/tournaments.mhtml?region_id=$region_id&chapter_id=$chapter_id&msg=$msg");
./region/admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./region/admin_rm.mhtml:	my $admin = Tab::Person->retrieve($admin_id); 
./region/admin_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./region/admin_rm.mhtml:	unless (Tab::ChapterCircuit->search( region => $region_id, chapter => $chapter_id)) { 
./region/admin_rm.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./region/admin_rm.mhtml:        $m->redirect("/user/region/tournaments.mhtml?region_id=$region_id&err=$err");
./region/admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $admin_id, chapter => $chapter->id);
./region/admin_rm.mhtml:	foreach (@ca) {  $_->delete; } 
./region/admin_rm.mhtml:	my $msg = $admin->first." ".$admin->last." has been removed from ". $chapter->name;	
./region/admin_rm.mhtml:    $m->redirect("/user/region/tournaments.mhtml?region_id=$region_id&chapter_id=$chapter_id&msg=$msg");
./region/tournaments.mhtml:	my $region = Tab::Region->retrieve($region_id);
./region/tournaments.mhtml:	unless (Tab::Permission->search( region => $region_id, person => $person->id )) { 
./region/tournaments.mhtml:		$m->print("Stop messing around.  You are not authorized to view that region");
./region/tournaments.mhtml:		$m->abort;
./region/tournaments.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./region/tournaments.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./region/tournaments.mhtml:	my $circuit = $region->circuit;
./region/tournaments.mhtml:	my $tz = $person->tz;
./region/tournaments.mhtml:	$region_name = "League" if $circuit->setting("naudl");
./region/tournaments.mhtml:	<h2><% $circuit->abbr %>: <% $region->name %> </h2>
./region/tournaments.mhtml:		<h4>Entries for <% $tourn->name %> <% $tourn->start->year %></h4>
./region/tournaments.mhtml:%			foreach my $school ($tourn->schools(region => $region_id)) { 
./region/tournaments.mhtml:						<% $school->name %>
./region/tournaments.mhtml:						<% scalar ($school->entries) %>
./region/tournaments.mhtml:						<a class="white" href="school_entry.mhtml?school_id=<% $school->id %>">
./region/tournaments.mhtml:		<h4>Admin access for <% $chapter->name %></h4>
./region/tournaments.mhtml:%			foreach my $admin ($chapter->admins) { 
./region/tournaments.mhtml:						<% $admin->first." ".$admin->last %>
./region/tournaments.mhtml:						<a href="mailto: <% $admin->email %>" class="white nospace">
./region/tournaments.mhtml:							<% $admin->email %>
./region/tournaments.mhtml:						<a class="full dkred" href="admin_rm.mhtml?region_id=<% $region_id %>&chapter_id=<% $chapter_id %>&admin_id=<% $admin->id %>">
./region/tournaments.mhtml:			<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./region/tournaments.mhtml:			<input type="hidden" name="region_id" value="<% $region->id %>">
./region/tournaments.mhtml:		<h4>Tournaments for <% $chapter->name %> this year</h4>
./region/tournaments.mhtml:%		my @schools = $m->comp("/funclib/chapter_schools.mas", chapter => $chapter);
./region/tournaments.mhtml:%					my $tourn = $school->tourn;
./region/tournaments.mhtml:%					my $start = $tourn->start->set_time_zone($tz);
./region/tournaments.mhtml:%					my $end = $tourn->end->set_time_zone($tz);
./region/tournaments.mhtml:							<% $start->year %>
./region/tournaments.mhtml:							<% $tourn->name %>
./region/tournaments.mhtml:%							foreach my $circuit ($tourn->circuits) { 
./region/tournaments.mhtml:									<% $circuit->abbr %>
./region/tournaments.mhtml:							<% scalar $school->entries( waitlist => 0, dropped => 0, ) %>
./region/tournaments.mhtml:							<% $start->ymd ne $end->ymd ? "- ".Tab::niceshortdate($end) : "" %>
./region/tournaments.mhtml:%			if ($circuit->setting("naudl")) { 
./region/tournaments.mhtml:%				foreach my $chapter ($region->chapters) { 
./region/tournaments.mhtml:					<a class="<% $chapter->id == $chapter_id ? "dk" : "" %>blue full" href="tournaments.mhtml?region_id=<% $region_id %>&chapter_id=<% $chapter->id %>">
./region/tournaments.mhtml:						<% $chapter->name %>
./region/tournaments.mhtml:%				foreach my $tourn ($circuit->tourns) { 
./region/tournaments.mhtml:					<a class="blue full" href="tournaments.mhtml?region_id=<% $region_id %>&tourn_id=<% $tourn->id %>">
./region/tournaments.mhtml:						<% $tourn->name %> <% $tourn->start->year %>
./enter/entry.mhtml:	$school->disclaimed($person->id) if $disclaimed;
./enter/entry.mhtml:	$school->update;
./enter/entry.mhtml:	my $tourn = $school->tourn;
./enter/entry.mhtml:	my $tz = $tourn->tz;
./enter/entry.mhtml:    my $now = DateTime->now(time_zone => $tz);
./enter/entry.mhtml:	my $adult++ if ( $school->setting("contact_number") && $school->setting("contact_name") && $school->setting("contact_email"));
./enter/entry.mhtml:	$adult++ unless $tourn->setting("require_adult_contact");
./enter/entry.mhtml:			<% $tourn->name %>
./enter/entry.mhtml:%		if ($tourn->setting("ask_regions")) { 
./enter/entry.mhtml:			<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/entry.mhtml:%						foreach my $region ($tourn->regions) { 
./enter/entry.mhtml:							<option value="<% $region->id %>" <% $region->id == $school->region ? 'selected="selected"' : "" %>><% $region->name %></option>
./enter/entry.mhtml:		<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/entry.mhtml:		<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./enter/entry.mhtml:				<input size="24" type="text" name="contact_name" value="<% $school->setting("contact_name") %>">
./enter/entry.mhtml:				<input size="24" type="text" name="contact_number" value="<% $school->setting("contact_number")  %>">
./enter/entry.mhtml:				<input size="24" type="text" name="contact_email" value="<% $school->setting("contact_email")  %>">
./enter/entry.mhtml:%		if ($tourn->setting("per_person_fee")) { 
./enter/entry.mhtml:%			my $bodies = $m->comp("/funclib/school_bodies.mas", school => $school);
./enter/entry.mhtml:%			if ($school->setting("individuals") < $bodies) { 
./enter/entry.mhtml:%				$school->setting("individuals", $bodies);
./enter/entry.mhtml:					<input size="5" type="number" min=0 max=9999 name="individuals" value="<% $school->setting("individuals") %>">
./enter/entry.mhtml:%			if ($tourn->setting("school_codes") eq "registrant") { 
./enter/entry.mhtml:						<input size="10" type="text" name="school_code" value="<% ($school->code) ? $school->code : "" %>" maxlength="6">
./enter/entry.mhtml:						<% ($tourn->reg_end) ? Tab::nicedt($tourn->reg_end->set_time_zone($tz)) : "Not Set" %>
./enter/entry.mhtml:%						my $freeze_deadline = $tourn->setting("freeze_deadline");
./enter/entry.mhtml:%						$freeze_deadline = $tourn->reg_end unless $freeze_deadline;
./enter/entry.mhtml:						<% ($freeze_deadline && $freeze_deadline->year) ? Tab::nicedt($freeze_deadline->set_time_zone($tz)) : "Not Set" %>
./enter/entry.mhtml:%						my $drop_deadline = $tourn->setting("drop_deadline");
./enter/entry.mhtml:						<% ($drop_deadline) ? Tab::nicedt($drop_deadline->set_time_zone($tz)) : "Not Set" %>
./enter/entry.mhtml:%						my $judge_deadline = $tourn->setting("judge_deadline");
./enter/entry.mhtml:						<% ($judge_deadline) ? Tab::nicedt($judge_deadline->set_time_zone($tz)) : "Not Set" %>
./enter/entry.mhtml:%						my $fine_deadline = $tourn->setting("fine_deadline");
./enter/entry.mhtml:						<% ($fine_deadline) ? Tab::nicedt($fine_deadline->set_time_zone($tz)) : "Not Set" %>
./enter/entry.mhtml:%				foreach my $category ($tourn->categories) {
./enter/entry.mhtml:%					if ($category->setting("deadline")) { 
./enter/entry.mhtml:								<% $category->name %> judges are due by:
./enter/entry.mhtml:								<% &Tab::nicedt($category->setting("deadline")->set_time_zone($tourn->tz)) %>
./enter/entry.mhtml:%					if ($category->setting("strike_start")) { 
./enter/entry.mhtml:								<% $category->name %> strikes/ratings open:
./enter/entry.mhtml:								<% &Tab::nicedt($category->setting("strike_start")->set_time_zone($tourn->tz)) %>
./enter/entry.mhtml:%					my $strike_end = $category->setting("strike_end");
./enter/entry.mhtml:								<% $category->name %> strikes/ratings due by:
./enter/entry.mhtml:								<% &Tab::nicedt($strike_end->set_time_zone($tourn->tz)) %>
./enter/entry.mhtml:%				foreach my $concession ($tourn->concessions) {
./enter/entry.mhtml:%					next unless $concession->deadline;
./enter/entry.mhtml:							<% $concession->name %> orders are due by:
./enter/entry.mhtml:							<% &Tab::nicedt($concession->deadline->set_time_zone($tourn->tz)) %>
./enter/entry.mhtml:			<a href="entry_print.mhtml?school_id=<% $school->id %>" class="blue block">
./enter/entry.mhtml:			<a href="invoice_print.mhtml?school_id=<% $school->id %>" class="blue block">
./enter/entry.mhtml:			<a href="export_csv.mhtml?school_id=<% $school->id %>" class="blue block">
./enter/entry.mhtml:%		unless ( $now > $tourn->setting("freeze_deadline") ) { 
./enter/entry.mhtml:			<a href="drop_school.mhtml?school_id=<% $school->id %>" <& "/funclib/confirm.mas", warn => $warn &>  class="dkred block">
./enter/entry.mhtml:%			my @followers = Tab::Follower->search( school => $school->id, type => 'school' );
./enter/entry.mhtml:				<a class="blue full" href="school_unfollow.mhtml?follower_id=<% $follower->id %>&school_id=<% $school->id %>">
./enter/entry.mhtml:					<% $follower->follower->first." ".$follower->follower->last %>
./enter/entry.mhtml:				<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/entry.mhtml:				<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./enter/judge_housing_plz.mhtml:	my $now = DateTime->now();
./enter/judge_housing_plz.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_housing_plz.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_housing_plz.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/judge_housing_plz.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./enter/judge_housing_plz.mhtml:	unless ($judge->setting('gender')) { 
./enter/judge_housing_plz.mhtml:		$m->redirect("housing.mhtml?hijud=$judge_id&err=$err&school_id=$school_id");
./enter/judge_housing_plz.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./enter/judge_housing_plz.mhtml:	my $num_slots = $slots[0]->slots;
./enter/judge_housing_plz.mhtml:	my @requests =  Tab::Housing->search( night => $night->ymd, tourn => $tourn->id );
./enter/judge_housing_plz.mhtml:	my $existing_request = $m->comp("/funclib/judge_housing.mas", judge => $judge, day => $night);
./enter/judge_housing_plz.mhtml:	my $housing_request = Tab::Housing->create({
./enter/judge_housing_plz.mhtml:		requestor => $person->id,
./enter/judge_housing_plz.mhtml:		tourn     => $tourn->id,
./enter/judge_housing_plz.mhtml:	if ($tourn->setting("track_reg_changes")) {
./enter/judge_housing_plz.mhtml:		my $description = $person->first." ".$person->last." requested housing for judge ".$judge->first." ".$judge->last;
./enter/judge_housing_plz.mhtml:        my $change = Tab::ChangeLog->create({
./enter/judge_housing_plz.mhtml:           tourn       => $tourn->id,
./enter/judge_housing_plz.mhtml:	my $msg = "Housing for ".$judge->first." ".$judge->last." on ".$night->day_name." confirmed.";
./enter/judge_housing_plz.mhtml:	my $err = "The housing for this tournament is currently full on ".$night->day_name.".  ".$judge->first." ".$judge->last." has been placed on the waitlist on a first-come, first-served basis." if $waitlist;
./enter/judge_housing_plz.mhtml:	$m->redirect("housing.mhtml?school_id=$school_id&msg=$msg&err=$err");
./enter/hire_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/hire_save.mhtml:	my $now = DateTime->now();
./enter/hire_save.mhtml:	my $judge_per = $category->setting("judge_per");
./enter/hire_save.mhtml:		my $covers = $hired_number * $judge_per if $category->setting("hired_fee") && $judge_per;
./enter/hire_save.mhtml:		$request = Tab::JudgeHire->create({
./enter/hire_save.mhtml:			tourn        => $school->tourn,
./enter/hire_save.mhtml:			school       => $school->id,
./enter/hire_save.mhtml:			category  => $category->id,
./enter/hire_save.mhtml:		my $available_slots = $category->setting("hired_jpool") * $judge_per;
./enter/hire_save.mhtml:			foreach my $acc (Tab::JudgeHire->search( category => $category->id )) { 
./enter/hire_save.mhtml:				$available_slots -= $acc->accepted;
./enter/hire_save.mhtml:			if ($request && $available_slots < $request->covers && $request->accepted < $request->covers) { 
./enter/hire_save.mhtml:				$request->accepted($available_slots) if $available_slots > 0;
./enter/hire_save.mhtml:				$request->accepted( $request->covers ) if $request && $available_slots >= $request->covers;
./enter/hire_save.mhtml:			$request->update;
./enter/hire_save.mhtml:		$request = Tab::JudgeHire->create({
./enter/hire_save.mhtml:			tourn => $school->tourn,
./enter/hire_save.mhtml:			school => 	$school->id,
./enter/hire_save.mhtml:			category => $category->id,
./enter/hire_save.mhtml:		my $available_rounds = $category->setting("hired_rounds");
./enter/hire_save.mhtml:			foreach my $acc (Tab::JudgeHire->search( category => $category->id )) { 
./enter/hire_save.mhtml:				$available_rounds -= $acc->rounds_accepted;
./enter/hire_save.mhtml:			if ($request && $available_rounds < $request->rounds && $request->rounds_accepted < $request->rounds) { 
./enter/hire_save.mhtml:				$request->rounds_accepted($available_rounds) if $available_rounds > 0;
./enter/hire_save.mhtml:				$request->rounds_accepted( $request->rounds ) if $request && $available_rounds >= $request->rounds;
./enter/hire_save.mhtml:			$request->update;
./enter/hire_save.mhtml:	$m->redirect("judges.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");
./enter/housing_tba.mhtml:	my $now = DateTime->now();
./enter/housing_tba.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_tba.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/housing_tba.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./enter/housing_tba.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./enter/housing_tba.mhtml:	my $num_slots = $slots[0]->slots;
./enter/housing_tba.mhtml:			$num_slots--;
./enter/housing_tba.mhtml:			my $housing_request = Tab::Housing->create({
./enter/housing_tba.mhtml:				tourn     => $tourn->id,
./enter/housing_tba.mhtml:				requestor => $person->id,
./enter/housing_tba.mhtml:	if ($tourn->setting("track_reg_changes")) {
./enter/housing_tba.mhtml:       my $description = $person->first." ".$person->last." Requested $count housing for TBA entries";
./enter/housing_tba.mhtml:        my $change = Tab::ChangeLog->create({
./enter/housing_tba.mhtml:           tourn       => $tourn->id,
./enter/housing_tba.mhtml:	my $msg = "$count Housing slots for TBAs on ".$night->day_name." requested.";
./enter/housing_tba.mhtml:	$m->redirect("housing.mhtml?school_id=$school_id&msg=$msg");
./enter/region_save.mhtml:		my $school = Tab::School->retrieve($school_id);
./enter/region_save.mhtml:		foreach my $region ($school->tourn->regions) {
./enter/region_save.mhtml:			if ($region->id == $region_id) { 
./enter/region_save.mhtml:				$school->region($region_id);
./enter/region_save.mhtml:				$school->update;
./enter/region_save.mhtml:				$msg = $school->name." region updated to ".$school->region->name;
./enter/region_save.mhtml:	$m->redirect("entry.mhtml?school_id=$school_id&msg=$msg");
./enter/hire_delete.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./enter/hire_delete.mhtml:	$m->abort unless $hire;
./enter/hire_delete.mhtml:	my $category = $hire->category;
./enter/hire_delete.mhtml:	if ($hire->school->id == $school->id) { 
./enter/hire_delete.mhtml:		$hire->delete;
./enter/hire_delete.mhtml:	$m->redirect("judges.mhtml?category_id=".$category."&school_id=".$school->id."&msg=$msg");
./enter/details_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details_save.mhtml:	my $event = $entry->event;
./enter/details_save.mhtml:	my $tourn = $event->tourn;
./enter/details_save.mhtml:	my $school = $entry->school;
./enter/details_save.mhtml:	my $code_style = $event->setting("code_style");
./enter/details_save.mhtml:	my $max = $event->setting("max_entry");
./enter/details_save.mhtml:	my $min = $event->setting("min_entry");
./enter/details_save.mhtml:	if ($event->setting("ask_for_titles")) {
./enter/details_save.mhtml:		$entry->setting("title", $title);
./enter/details_save.mhtml:	my @quals = $entry->qualifiers;
./enter/details_save.mhtml:	my $quals = $event->setting('ask_quals');
./enter/details_save.mhtml:	$quals = 15 if $event->setting("more_quals");
./enter/details_save.mhtml:			if ($qual->name eq $name) { 
./enter/details_save.mhtml:				$used_quals{$qual->id}++ ;
./enter/details_save.mhtml:				$qual->result($result);
./enter/details_save.mhtml:				$qual->update;
./enter/details_save.mhtml:			Tab::Qualifier->create({
./enter/details_save.mhtml:				entry => $entry->id,
./enter/details_save.mhtml:		$qual->delete unless $used_quals{$qual->id};
./enter/details_save.mhtml:	my $other = Tab::Entry->search_where({ name => $name, school => $school->id, event => $event->id, id => {'!=', $entry->id} })->first;
./enter/details_save.mhtml:		$entry->name($name);
./enter/details_save.mhtml:	my @students = $entry->students;
./enter/details_save.mhtml:		$students_by_id{$student->id} = $student;
./enter/details_save.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/details_save.mhtml:			unless (Tab::EntryStudent->search( entry => $entry->id, student => $student_id)->first) { 
./enter/details_save.mhtml:				Tab::EntryStudent->create({
./enter/details_save.mhtml:					entry   => $entry->id,
./enter/details_save.mhtml:		$first_name = $student->first;
./enter/details_save.mhtml:		$last_name .= $student->last;
./enter/details_save.mhtml:		next if $used_student{$student->id};
./enter/details_save.mhtml:		my $es = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
./enter/details_save.mhtml:		$es->delete;
./enter/details_save.mhtml:		my @housing = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./enter/details_save.mhtml:			$housed .= "-" if $housed;
./enter/details_save.mhtml:			$housed .= $student->id;
./enter/details_save.mhtml:	my @count = $entry->students;
./enter/details_save.mhtml:	if ($code && $code ne $entry->code) { 
./enter/details_save.mhtml:		my $other = Tab::Entry->search_where({
./enter/details_save.mhtml:			school => $school->id, 
./enter/details_save.mhtml:			event => $event->id,
./enter/details_save.mhtml:			id => {'!=', $entry->id}	
./enter/details_save.mhtml:		})->first;
./enter/details_save.mhtml:			$entry->code($code);
./enter/details_save.mhtml:	} elsif ($code ne $entry->code) { 
./enter/details_save.mhtml:		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
./enter/details_save.mhtml:	$entry->name($name);
./enter/details_save.mhtml:	$entry->ada($ada);
./enter/details_save.mhtml:	$entry->setting("registered_seed", $seed);
./enter/details_save.mhtml:		$entry->setting("pairing_seed", 1);
./enter/details_save.mhtml:		$entry->setting("pairing_seed", 2);
./enter/details_save.mhtml:		$entry->setting("pairing_seed", 3);
./enter/details_save.mhtml:	} elsif ($event->setting("apda")) { 
./enter/details_save.mhtml:		$entry->setting("pairing_seed", 4);
./enter/details_save.mhtml:	$entry->setting("atlarge", $atlarge);
./enter/details_save.mhtml:		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
./enter/details_save.mhtml:	$entry->update;
./enter/details_save.mhtml:	$m->redirect("details.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&err=$err") if $err;
./enter/details_save.mhtml:		$m->redirect("details_housing.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&housed=$housed&msg=$msg");
./enter/details_save.mhtml:	my $msg = "Entry ".$entry->name." details saved";
./enter/details_save.mhtml:	$m->redirect("onsite.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg") if $from eq "onsite";
./enter/details_save.mhtml:	$m->redirect("students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");
./enter/judge_sex_change.mhtml:		$m->redirect("housing.mhtml?histu=$judge_id&err=$err&school_id=$school_id");
./enter/judge_sex_change.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_sex_change.mhtml:	$judge->setting('gender', $gender);
./enter/judge_sex_change.mhtml:	$judge->update;
./enter/judge_sex_change.mhtml:	$m->redirect("housing.mhtml?school_id=$school_id");
./enter/students.mhtml:	my $tourn = $school->tourn;
./enter/students.mhtml:	my $event = Tab::Event->retrieve($event_id) if $event_id;	
./enter/students.mhtml:	my @events = $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./enter/students.mhtml:	$event_id = $event->id if scalar @events == 1;
./enter/students.mhtml:	my $tz = $tourn->tz;
./enter/students.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./enter/students.mhtml:	$drop_deadline = $tourn->reg_end unless $drop_deadline;
./enter/students.mhtml:	$drop_deadline->set_time_zone($tz);
./enter/students.mhtml:    my $now = DateTime->now;
./enter/students.mhtml:		my @already_entered = Tab::Entry->search( 
./enter/students.mhtml:			school => $school->id, 
./enter/students.mhtml:		my @waitlist = Tab::Entry->search( 
./enter/students.mhtml:			school => $school->id, 
./enter/students.mhtml:		my @hybrides = $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school);
./enter/students.mhtml:		@already_entered = grep { ! $seen{$_->id} ++ } @already_entered;
./enter/students.mhtml:		my $deadline = $event->setting("deadline");
./enter/students.mhtml:		$cap = $event->setting("cap");
./enter/students.mhtml:		$school_cap = $event->setting("school_cap");
./enter/students.mhtml:		$tourn_cap = $tourn->setting("overall_cap");
./enter/students.mhtml:		<h2><% $tourn->name %></h2>
./enter/students.mhtml:		<h4><% $event->name %> Entries</h4>
./enter/students.mhtml:%			if ($tourn->setting("ask_two_quals")) { 
./enter/students.mhtml:%					next if $used{$already->id};
./enter/students.mhtml:%					$used{$already->id}++;
./enter/students.mhtml:%						foreach my $student ($already->students) { 
./enter/students.mhtml:%							next if $student->chapter->id == $school->chapter->id;
./enter/students.mhtml:%							$other = Tab::School->search( chapter => $student->chapter->id, tourn => $tourn->id)->first;
./enter/students.mhtml:%					if ($already->waitlist &! $waitlist_done) { 
./enter/students.mhtml:							<% $already->dropped ? "DROP" : $tourn->setting("hide_codes") ? "" : $already->code %>
./enter/students.mhtml:						<td class="leftalign <% $already->dropped ? "strike" : "" %> nowrap"> 
./enter/students.mhtml:							<a class="white" href="<% $already->tba ? "tba_assign" : "details" %>.mhtml?entry_id=<% $already->id %>&school_id=<% $school->id %>">
./enter/students.mhtml:							<% $already->name %>
./enter/students.mhtml:%							if ($event->setting("apda")) { 
./enter/students.mhtml:									<a class="white padless" href="details.mhtml?entry_id=<% $already->id %>&school_id=<% $school->id %>">
./enter/students.mhtml:										<% $already->setting("registered_seed") ? ucfirst($already->setting("registered_seed")) : "No"  %> seed
./enter/students.mhtml:								<% $other->short_name %> Hybrid		
./enter/students.mhtml:%							if ($already->ada) { 
./enter/students.mhtml:%						if ($now < $tourn->reg_end && ($now < $deadline || not defined $deadline)) { 
./enter/students.mhtml:								<a class="dkblue button" href="<% $already->tba ? "tba_assign" : "details" %>.mhtml?entry_id=<% $already->id %>&school_id=<% $school->id %>">
./enter/students.mhtml:%							if ($already->dropped) {
./enter/students.mhtml:									<a class="dkblue button" <& "/funclib/confirm.mas", warn => $warn &>  href="entry_drop.mhtml?school_id=<% $school->id %>&entry_id=<% $already->id %>">
./enter/students.mhtml:%								$warn = "This entry is waitlisted and will lose its place in line if you drop.  Cancel, then edit and swap the entry to another student to keep the place in line.  Otherwise, hit OK to continue" if $already->waitlist;
./enter/students.mhtml:									<a class="dkred button" <& "/funclib/confirm.mas", warn => $warn &> href="entry_drop.mhtml?school_id=<% $school->id %>&entry_id=<% $already->id %>">
./enter/students.mhtml:% 					if ($event->setting("ask_for_titles")) {
./enter/students.mhtml:								<a class="white" href="details.mhtml?entry_id=<% $already->id %>&school_id=<% $school->id %>">
./enter/students.mhtml:									<% $already->setting("title") ? $already->setting("title") : "Click to Enter Title" %>
./enter/students.mhtml:%					my @qualifiers = $already->qualifiers;
./enter/students.mhtml:							<td class="smallish rightalign" style="padding-left: 10px;" colspan="7">
./enter/students.mhtml:											<a class="button white" href="details.mhtml?entry_id=<% $already->id %>&school_id=<% $school->id %>" placeholder="Name">
./enter/students.mhtml:												<% $qualifier ? $qualifier->result." at ".$qualifier->name : "" %>
./enter/students.mhtml:% 			if ($event->setting("description")) { 
./enter/students.mhtml:				<h4>Description and rules for <% $event->name %> </h4>
./enter/students.mhtml:					<% $event->setting("description") %>
./enter/students.mhtml:			<h2>Entries at <% $tourn->name %></h2>
./enter/students.mhtml:			my $event_deadline = $event->setting("deadline");
./enter/students.mhtml:				 ((scalar Tab::Entry->search( school => $school->id, event => $event->id,  waitlist => 0)) 
./enter/students.mhtml:				((scalar Tab::Entry->search(event => $event->id, dropped => 0, waitlist => 0, )) 
./enter/students.mhtml:				((scalar $m->comp('/funclib/tourn_entries.mas', tourn => $tourn)) >= ($tourn_cap)) && ($tourn_cap > 0)
./enter/students.mhtml:			$caphit.= " Waitlist open." if $caphit && $event->setting("waitlist");
./enter/students.mhtml:			$caphit .= "All new entries will be waitlisted pending admission by director." if $event->setting("waitlist_all");
./enter/students.mhtml:						<% Tab::niceshortdt($event_deadline->set_time_zone($tz)) %>
./enter/students.mhtml:						<% Tab::niceshortdt($tourn->reg_end->set_time_zone($tz)) %>
./enter/students.mhtml:%		unless (  ( $now > $tourn->reg_end ) 
./enter/students.mhtml:%					|| ( $caphit && ($event->setting("waitlist") < 1 && $event->setting("waitlist_all") < 1) )
./enter/students.mhtml:%		    my @clean_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./enter/students.mhtml:%				if ($event->setting("max_entry") > 2) {
./enter/students.mhtml:					<a href="student_save.mhtml?school_id=<% $school->id %>&event_id=<% $event->id %>" class="dkblue full">
./enter/students.mhtml:					<h4 style="padding-bottom: 1px; margin-bottom: 1px;">
./enter/students.mhtml:					<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/students.mhtml:					<input type="hidden" name="event_id" value="<% $event->id %>">
./enter/students.mhtml:						<select name="student_id" data-placeholder="Competitor..." class="fixedmed chosen" >
./enter/students.mhtml:								<option value="<% $student->id %>"> <% $student->last.", ".$student->first %> </option>
./enter/students.mhtml:%					if ($event->setting("max_entry") == 2) { 
./enter/students.mhtml:							<select name="partner_id" data-placeholder="Competitor..." class="fixedmed chosen">
./enter/students.mhtml:%								if ($event->setting("min_entry") == 1) { 
./enter/students.mhtml:									<option value="">--Single/Maverick--</option>
./enter/students.mhtml:									<option value="<% $student->id %>"> <% $student->last.", ".$student->first %> </option>
./enter/students.mhtml:%				if ($event->setting("hybrids")) { 
./enter/students.mhtml:					<a class="yellow full" href="hybrid_entry.mhtml?event_id=<% $event->id %>&school_id=<% $school->id %>&waitlist=<% $waitlist %>">
./enter/students.mhtml:				<a class="yellow full martop" href="/user/chapter/students.mhtml?chapter_id=<% $school->chapter->id %>">
./enter/students.mhtml:					<h4 style="padding-bottom: 1px; margin-bottom: 1px;">TBA Slots</h4>
./enter/students.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/students.mhtml:						<input type="hidden" name="event_id" value="<% $event->id %>">
./enter/students.mhtml:%					$m->print("Tournament registration deadline has passed") if ($now > $tourn->reg_end);
./enter/students.mhtml:%					$m->print("Event registration deadline has passed") if ($event_deadline && $now > $event_deadline);
./enter/students.mhtml:%					$m->print("Event wide limit has been reached") if ($caphit && ($event->setting("waitlist") < 1));
./enter/students.mhtml:			<a class="full <% ($event->id == $event_id) ? "dk" : "" %>blue"
./enter/students.mhtml:				href="students.mhtml?school_id=<% $school->id %>&event_id=<% $event->id %>">
./enter/students.mhtml:				<% scalar($school->entries(event => $event->id)) +
./enter/students.mhtml:				scalar $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school)%> - <% $event->name %>
./enter/team_members_rm.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/team_members_rm.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/team_members_rm.mhtml:	my @team_members = Tab::EntryStudent->search( student => $student->id, entry => $entry_id );
./enter/team_members_rm.mhtml:	my $msg .= $student->first." ".$student->last." has been removed from ".$entry->name;
./enter/team_members_rm.mhtml:	foreach (@team_members) { $_->delete; }
./enter/team_members_rm.mhtml:	$m->redirect("team_members.mhtml?entry_id=$entry_id&school_id=".$entry->school->id."&msg=$msg");
./enter/hire_reduce.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./enter/hire_reduce.mhtml:		$m->print("<p>Hire request no longer exists, could not delete it</p> <p>Hit back and try again </p>");
./enter/hire_reduce.mhtml:		$m->abort;
./enter/hire_reduce.mhtml:	my $category = $hire->category;
./enter/hire_reduce.mhtml:	my $school = $hire->school;
./enter/hire_reduce.mhtml:	my $reduction = $category->setting("judge_per") if $category->setting("hired_fee") && $category->setting("judge_per");
./enter/hire_reduce.mhtml:	if ($hire->covers) { 
./enter/hire_reduce.mhtml:		$hire->covers($hire->covers - $reduction);
./enter/hire_reduce.mhtml:		$hire->accepted($hire->covers) if $hire->accepted > $hire->covers;
./enter/hire_reduce.mhtml:	if ($hire->rounds) { 
./enter/hire_reduce.mhtml:		$hire->rounds($hire->rounds - $reduction);
./enter/hire_reduce.mhtml:		$hire->rounds_accepted($hire->rounds) if $hire->rounds_accepted > $hire->rounds;
./enter/hire_reduce.mhtml:	$hire->update;
./enter/hire_reduce.mhtml:	$hire->delete if $hire->covers < 1 && $hire->rounds < 1; 
./enter/hire_reduce.mhtml:	$m->redirect("judges.mhtml?category_id=".$category->id."&school_id=".$school->id."&msg=$msg");
./enter/housing.mhtml:	my $tourn = $school->tourn;
./enter/housing.mhtml:	my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn, add_one => "aye");
./enter/housing.mhtml:	my $now = DateTime->now;
./enter/housing.mhtml:	my $reg_end = $tourn->reg_end;
./enter/housing.mhtml:		<h2><% $school->name %> at the <% $tourn->name %></h2> 
./enter/housing.mhtml:			my @students = $m->comp("/funclib/school_students.mas", school => $school);
./enter/housing.mhtml:			my @judges = $school->judges;
./enter/housing.mhtml:			foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./enter/housing.mhtml:					my $housing = $m->comp("/funclib/student_housing.mas", tourn => $tourn, student => $stu, day => $day);
./enter/housing.mhtml:						next unless $housing->waitlist;
./enter/housing.mhtml:					push (@{$students_sans_housing{$day->ymd}}, $stu);
./enter/housing.mhtml:					my $housing = $m->comp("/funclib/judge_housing.mas", judge => $jud, day => $day);
./enter/housing.mhtml:						next unless $housing->waitlist;
./enter/housing.mhtml:					push (@{$judges_sans_housing{$day->ymd}}, $jud);
./enter/housing.mhtml:%			foreach my $student (sort {$a->last cmp $b->last} $school->students) {
./enter/housing.mhtml:%				foreach my $event ($m->comp("/funclib/student_entries.mas", tourn => $tourn, student => $student, event => 1)) {
./enter/housing.mhtml:%					$event_names .= $event->abbr;
./enter/housing.mhtml:%				if ($histu == $student->id) { 
./enter/housing.mhtml:					<a class="white" href="/user/chapter/student_edit.mhtml?student_id=<% $student->id %>">
./enter/housing.mhtml:						<% $student->first %>
./enter/housing.mhtml:					<a class="white" href="/user/chapter/student_edit.mhtml?student_id=<% $student->id %>">
./enter/housing.mhtml:						<% $student->last %>
./enter/housing.mhtml:					<% ($student->gender) ? $student->gender : "" %>
./enter/housing.mhtml:%				unless ($student->gender) { 
./enter/housing.mhtml:						<input type="hidden" name="student_id" value="<% $student->id %>">
./enter/housing.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/housing.mhtml:						<input type="radio" name="gender" value="M" <% ($student->gender eq "M") ? "checked" : "" %> >
./enter/housing.mhtml:						<input type="radio" name="gender" value="F" <% ($student->gender eq "F") ? "checked" : "" %> >
./enter/housing.mhtml:%					foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./enter/housing.mhtml:%						next unless Tab::HousingSlots->search( night => $day->ymd, tourn => $tourn->id );
./enter/housing.mhtml:									<% $student->first %>
./enter/housing.mhtml:									<% $student->last %>
./enter/housing.mhtml:									<% ($student->gender) ? $student->gender : "" %>
./enter/housing.mhtml:							<% $day->day_abbr %>
./enter/housing.mhtml:%						my $housing = $student->housing($tourn, $day); 
./enter/housing.mhtml:								<% ($housing->waitlist) ? "Waitlist" : "Yes" %>
./enter/housing.mhtml:%								if ($now->epoch < $reg_end->epoch) {
./enter/housing.mhtml:									<a class="dkred block" href="housing_revoke.mhtml?housing_id=<% $housing->id %>&school_id=<% $school->id %>">
./enter/housing.mhtml:%							if ($judges_sans_housing{$day->ymd} || $students_sans_housing{$day->ymd}) { 
./enter/housing.mhtml:%									if ($now->epoch < $reg_end->epoch) {
./enter/housing.mhtml:										<a class="dkblue block" href="housing_transfer.mhtml?housing_id=<% $housing->id %>&school_id=<% $school->id %>">
./enter/housing.mhtml:%								if ($now->epoch < $reg_end->epoch) {
./enter/housing.mhtml:									<a class="dkblue block" href="housing_plz.mhtml?student_id=<% $student->id %>&tourn_id=<% $tourn->id %>&school_id=<% $school->id %>&day=<% $day->ymd %>">
./enter/housing.mhtml:			<td colspan="100" style="line-height: 20px; border: 1px solid red;">
./enter/housing.mhtml:%		foreach my $judge ($school->judges) {
./enter/housing.mhtml:%					if ($judge->chapter_judge) { 
./enter/housing.mhtml:						<a class="white" href="/user/chapter/chapter_judge_edit.mhtml?chapter_judge_id=<% $judge->chapter_judge->id %>">
./enter/housing.mhtml:						<% $judge->first." ".$judge->last %>
./enter/housing.mhtml:						(<% $judge->category->abbr %>)
./enter/housing.mhtml:%			unless ($judge->setting('gender')) { 
./enter/housing.mhtml:					<input type="hidden" name="judge_id" value="<% $judge->id %>">
./enter/housing.mhtml:					<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/housing.mhtml:					<input type="radio" name="gender" value="M" <% ($judge->setting('gender') eq "M") ? "checked" : "" %> >
./enter/housing.mhtml:					<input type="radio" name="gender" value="F" <% ($judge->setting('gender') eq "F") ? "checked" : "" %> >
./enter/housing.mhtml:					<% $judge->setting('gender') %>
./enter/housing.mhtml:%				foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./enter/housing.mhtml:%					next unless Tab::HousingSlots->search( night => $day->ymd, tourn => $tourn->id );
./enter/housing.mhtml:						<% $day->day_abbr %>
./enter/housing.mhtml:%					my $housing = $m->comp("/funclib/judge_housing.mas", tourn => $tourn, judge => $judge, day => $day);
./enter/housing.mhtml:							<% ($housing->waitlist) ? "Waitlist" : "Yes" %>
./enter/housing.mhtml:%							if ($now->epoch < $reg_end->epoch) {
./enter/housing.mhtml:								<a class="dkred block" href="housing_revoke.mhtml?housing_id=<% $housing->id %>&school_id=<% $school->id %>">
./enter/housing.mhtml:%						if ($judges_sans_housing{$day->ymd} || $students_sans_housing{$day->ymd}) { 
./enter/housing.mhtml:%								if ($now->epoch < $reg_end->epoch) {
./enter/housing.mhtml:									<a class="dkblue block" href="housing_transfer.mhtml?housing_id=<% $housing->id %>&school_id=<% $school->id %>">
./enter/housing.mhtml:%							if ($now->epoch < $reg_end->epoch) {
./enter/housing.mhtml:								<a class="dkblue block" href="judge_housing_plz.mhtml?judge_id=<% $judge->id %>&tourn_id=<% $tourn->id %>&school_id=<% $school->id %>&day=<% $day->ymd %>">
./enter/housing.mhtml:%		if ($tourn->setting("housing_message")) { 
./enter/housing.mhtml:					<% $tourn->setting("housing_message") %>
./enter/housing.mhtml:%		my @tbas = Tab::Entry->search( tba => 1, school => $school->id );
./enter/housing.mhtml:%		my @tba_housing = Tab::Housing->search( tba => 1, school => $school->id );
./enter/housing.mhtml:%					my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day );
./enter/housing.mhtml:%					my @tbas = Tab::Housing->search( tba => 1, school => $school->id, night => $day );
./enter/housing.mhtml:					<h5><% scalar @tbas %> <% $day->day_name %> slots</h5>
./enter/housing.mhtml:							<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/housing.mhtml:							<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./enter/housing.mhtml:							<input type="hidden" name="day" value="<% $day->ymd %>">
./enter/housing.mhtml:						<a class="martop dkblue block" href="housing_transfer.mhtml?housing_id=<% $tbas[0]->id %>&school_id=<% $school->id %>">
./enter/tba_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./enter/tba_save.mhtml:	unless ($event->tourn->id == $school->tourn->id) { 
./enter/tba_save.mhtml:		$m->redirect("students.mhtml?school_id=".$school->id."&event_id=$event_id&err=Something odd happened. Try again.");
./enter/tba_save.mhtml:	my $tz = $school->tourn->tz;
./enter/tba_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./enter/tba_save.mhtml:	my @alreadys = $school->entries( event => $event_id,  );
./enter/tba_save.mhtml:	my @all_event = $event->entries( event => $event_id,  waitlist => 0);
./enter/tba_save.mhtml:	my @all = $m->comp("/funclib/tourn_entries.mas", tourn => $event->tourn); 
./enter/tba_save.mhtml:	my $cap = $event->setting("cap");
./enter/tba_save.mhtml:	my $school_cap = $event->setting("school_cap");
./enter/tba_save.mhtml:	my $tourn_cap = $event->tourn->setting("overall_cap");
./enter/tba_save.mhtml:	my $wl = $event->setting("waitlist");
./enter/tba_save.mhtml:	$wl++ if $event->setting("waitlist_all");
./enter/tba_save.mhtml:	my $wl_all++ if $event->setting("waitlist_all");
./enter/tba_save.mhtml:		$cap -= scalar @all_event;
./enter/tba_save.mhtml:		$school_cap -= scalar @alreadys;
./enter/tba_save.mhtml:		$tourn_cap -= scalar @all;
./enter/tba_save.mhtml:	if ($event->tourn->setting("track_reg_changes")) { 
./enter/tba_save.mhtml:		my $description = $person->first." ".$person->last." entered $slots TBA slots in ".$event->abbr;
./enter/tba_save.mhtml:		my $change = Tab::ChangeLog->create({
./enter/tba_save.mhtml:			tourn       => $school->tourn->id,
./enter/tba_save.mhtml:			school      => $school->id,
./enter/tba_save.mhtml:		my $person_id = $person->id if $person;
./enter/tba_save.mhtml:		my $entry = Tab::Entry->create({
./enter/tba_save.mhtml:			tourn      => $school->tourn->id,
./enter/tba_save.mhtml:			school     => $school->id,
./enter/tba_save.mhtml:		$entry->setting("registered_by", $person->id);
./enter/tba_save.mhtml:		$school_cap--;
./enter/tba_save.mhtml:		$cap--;
./enter/tba_save.mhtml:	$m->redirect("students.mhtml?school_id=".$school->id."&event_id=$event_id&msg=$slots slots saved");
./enter/details_housing_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details_housing_save.mhtml:	$m->abort unless $entry;
./enter/details_housing_save.mhtml:	my $event = $entry->event;
./enter/details_housing_save.mhtml:	my $tourn = $event->tourn;
./enter/details_housing_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/details_housing_save.mhtml:	my @student_ids = split(/-/, $housed);
./enter/details_housing_save.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/details_housing_save.mhtml:		my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./enter/details_housing_save.mhtml:			my $night = $housing->night;
./enter/details_housing_save.mhtml:			my $args = $ARGS{$housing->id};
./enter/details_housing_save.mhtml:			my ($type, $id) = split(/-/, $args);
./enter/details_housing_save.mhtml:				$housing->delete;
./enter/details_housing_save.mhtml:				my $judge = Tab::Judge->retrieve($id);
./enter/details_housing_save.mhtml:				my @already_housed = $m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn, night => $night);
./enter/details_housing_save.mhtml:						$ah->delete;
./enter/details_housing_save.mhtml:						$msg .= "Waitlisted slot deleted from judge ".$judge->last." <br />";
./enter/details_housing_save.mhtml:				$housing->type("judge");
./enter/details_housing_save.mhtml:				$housing->judge($id);
./enter/details_housing_save.mhtml:				$msg .= "Housing slot transferred to ".$judge->last." <br />";
./enter/details_housing_save.mhtml:				$housing->update;
./enter/details_housing_save.mhtml:				my $student = Tab::Student->retrieve($id);
./enter/details_housing_save.mhtml:				my @already_housed = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn, night => $night);
./enter/details_housing_save.mhtml:						$ah->delete if $ah;
./enter/details_housing_save.mhtml:						$msg .= "Waitlisted slot deleted from student ".$student->last." <br />";
./enter/details_housing_save.mhtml:				$housing->type("student");
./enter/details_housing_save.mhtml:				$housing->student($id);
./enter/details_housing_save.mhtml:				$msg .= "Housing slot transferred to ".$student->last." <br />";
./enter/details_housing_save.mhtml:				$housing->update;
./enter/details_housing_save.mhtml:	$m->redirect("/user/enter/students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");
./enter/housing_plz.mhtml:	my $now = DateTime->now();
./enter/housing_plz.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/housing_plz.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_plz.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/housing_plz.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./enter/housing_plz.mhtml:	unless ($student->gender) { 
./enter/housing_plz.mhtml:		$m->redirect("housing.mhtml?histu=$student_id&err=$err&school_id=$school_id");
./enter/housing_plz.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./enter/housing_plz.mhtml:	my $num_slots = $slots[0]->slots;
./enter/housing_plz.mhtml:	my @requests =  Tab::Housing->search( night => $night->ymd, tourn => $tourn->id );
./enter/housing_plz.mhtml:	foreach my $entry ($m->comp("/funclib/student_entries.mas", student => $student, tourn => $tourn)) { 
./enter/housing_plz.mhtml:		$only_waitlisted = 0 unless $entry->waitlist;
./enter/housing_plz.mhtml:		$err .= "s" if $student->gender eq "F"; 
./enter/housing_plz.mhtml:	my $existing_request = $student->housing($tourn, $night);
./enter/housing_plz.mhtml:	my $housing_request = Tab::Housing->create({
./enter/housing_plz.mhtml:		tourn     => $tourn->id,
./enter/housing_plz.mhtml:		requestor => $person->id,
./enter/housing_plz.mhtml:	if ($tourn->setting("track_reg_changes")) {
./enter/housing_plz.mhtml:       my $description = $person->first." ".$person->last." Requested housing for ".$student->first." ".$student->last;
./enter/housing_plz.mhtml:       my $change = Tab::ChangeLog->create({
./enter/housing_plz.mhtml:           tourn       => $tourn->id,
./enter/housing_plz.mhtml:	$err = "Housing for ".$student->first." ".$student->last." on ".$night->day_name." confirmed." unless $waitlist;
./enter/housing_plz.mhtml:	$m->redirect("housing.mhtml?err=$err&school_id=$school_id");
./enter/concessions_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/concessions_save.mhtml:	my $tourn = $school->tourn;
./enter/concessions_save.mhtml:	my $now = DateTime->now;
./enter/concessions_save.mhtml:	foreach my $concession ($tourn->concessions) { 
./enter/concessions_save.mhtml:		my $total_order = $m->comp("/funclib/concession_stats.mas", total => 1, concession => $concession);
./enter/concessions_save.mhtml:		my $cap = $concession->cap;
./enter/concessions_save.mhtml:		my $quantity = $ARGS{$concession->id."_amount"};
./enter/concessions_save.mhtml:		my $purchase = Tab::ConcessionPurchase->search( concession => $concession->id, school => $school->id )->first;
./enter/concessions_save.mhtml:		next if ($purchase && $purchase->quantity == $quantity);
./enter/concessions_save.mhtml:		$quantity = $quantity - $purchase->quantity  if $purchase;
./enter/concessions_save.mhtml:			$purchase->quantity($purchase->quantity + $quantity) if $purchase;
./enter/concessions_save.mhtml:			$purchase->update;
./enter/concessions_save.mhtml:			my $remainder = $cap - $total_order;
./enter/concessions_save.mhtml:				$err .= "You hit the limit of availability for ".$concession->name."  Your order has been reduced to $quantity <br />";
./enter/concessions_save.mhtml:				$err .= "No ".$concession->name." remain to be ordered. <br />";
./enter/concessions_save.mhtml:			$purchase->quantity( $purchase->quantity + $quantity );
./enter/concessions_save.mhtml:			$purchase->update;
./enter/concessions_save.mhtml:			$purchase = Tab::ConcessionPurchase->create({ 
./enter/concessions_save.mhtml:				concession => $concession->id,
./enter/concessions_save.mhtml:				school => $school->id,
./enter/concessions_save.mhtml:	$m->redirect("concessions.mhtml?school_id=$school_id&msg=$msg&err=$err");
./enter/hybrid_entry.mhtml:	my $event = Tab::Event->retrieve($event_id);
./enter/hybrid_entry.mhtml:	my $tourn = $event->tourn;
./enter/hybrid_entry.mhtml:	my $tz = $tourn->tz;
./enter/hybrid_entry.mhtml:	my $now = DateTime->now(time_zone => $tz);
./enter/hybrid_entry.mhtml:		Tab::Chapter->set_sql( by_name => "
./enter/hybrid_entry.mhtml:		@candidates = Tab::Chapter->search_by_name("%".$chapter_search."%", $tourn->id);
./enter/hybrid_entry.mhtml:		$other_school = Tab::School->retrieve($other_school_id);
./enter/hybrid_entry.mhtml:		@other_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $other_school);
./enter/hybrid_entry.mhtml:		$other_chapter = Tab::Chapter->retrieve($other_chapter_id);
./enter/hybrid_entry.mhtml:		@other_students = $m->comp("/funclib/students_evententer.mas", event => $event, chapter => $other_chapter);
./enter/hybrid_entry.mhtml:	my @students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./enter/hybrid_entry.mhtml:		<h2><% $tourn->name %></h2>
./enter/hybrid_entry.mhtml:		<h4>Hybrid Entry in <% $event->name %></h4>
./enter/hybrid_entry.mhtml:					<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/hybrid_entry.mhtml:%						foreach my $other_school (sort {$a->name cmp $b->name} $tourn->schools) { 
./enter/hybrid_entry.mhtml:%							next if $other_school->id == $school->id;
./enter/hybrid_entry.mhtml:							<option value="<% $other_school->id %>">
./enter/hybrid_entry.mhtml:								<% $other_school->name %>
./enter/hybrid_entry.mhtml:							<% $cand->short_name %>
./enter/hybrid_entry.mhtml:							<% $cand->location %>
./enter/hybrid_entry.mhtml:							<% scalar $cand->students(retired => 0) %>
./enter/hybrid_entry.mhtml:%							foreach my $contact ($cand->admins) { 
./enter/hybrid_entry.mhtml:								<a class="white padless" href="mailto:<% $contact->email %>"><% $contact->first." ".$contact->last %></a>
./enter/hybrid_entry.mhtml:%							foreach my $circuit ($cand->circuits) { 
./enter/hybrid_entry.mhtml:								<% $circuit->abbr %>
./enter/hybrid_entry.mhtml:							<a class="dkblue block" href="hybrid_entry.mhtml?school_id=<% $school->id %>&event_id=<% $event_id %>&waitlist=<% $waitlist %>&other_chapter_id=<% $cand->id %>">
./enter/hybrid_entry.mhtml:			<h4>Enter hybrid with <% $other_school ? $other_school->name : $other_chapter->name %></h4>
./enter/hybrid_entry.mhtml:%			if ($event->setting("max_entry") ) { 
./enter/hybrid_entry.mhtml:							<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/hybrid_entry.mhtml:							<% $school->name %>:
./enter/hybrid_entry.mhtml:									<option value="<% $student->id %>">
./enter/hybrid_entry.mhtml:										<% $student->first." ".$student->last %>
./enter/hybrid_entry.mhtml:							<% $other_school ? $other_school->name : $other_chapter->name %>:
./enter/hybrid_entry.mhtml:									<option value="<% $other->id %>">
./enter/hybrid_entry.mhtml:										<% $other->first." ".$other->last %>
./enter/hybrid_entry.mhtml:%	        my $deadline = $event->setting("deadline");
./enter/hybrid_entry.mhtml:%		    my $cap = $event->setting("cap");
./enter/hybrid_entry.mhtml:%		    my $school_cap = $event->setting("school_cap");
./enter/hybrid_entry.mhtml:%		    my $tourn_cap = $tourn->setting("overall_cap");
./enter/hybrid_entry.mhtml:					 ((scalar Tab::Entry->search( school => $school->id, event => $event->id,  waitlist => 0)) 
./enter/hybrid_entry.mhtml:					((scalar Tab::Entry->search(event => $event->id, dropped => 0, waitlist => 0, )) 
./enter/hybrid_entry.mhtml:					((scalar $m->comp('/funclib/tourn_entries.mas', tourn => $tourn)) >= ($tourn_cap)) && ($tourn_cap > 0)
./enter/hybrid_entry.mhtml:				$caphit.= " You may add to the waitlist." if $caphit && $event->setting("waitlist");
./enter/hybrid_entry.mhtml:				$caphit .= "All entries are waitlisted pending admission by director" if $event->setting("waitlist_all");
./enter/hybrid_entry.mhtml:%			if ($event->setting("deadline") && $now > $event->setting("deadline")) { 
./enter/hybrid_entry.mhtml:					Add deadline <% Tab::niceshortdt($event->setting("deadline")->set_time_zone($tz)) %>
./enter/hybrid_entry.mhtml:					Add Deadline:  <% Tab::niceshortdt($tourn->reg_end->set_time_zone($tz)) %>
./enter/hybrid_entry.mhtml:%		unless (($now > $tourn->reg_end) 
./enter/hybrid_entry.mhtml:%				 || (  $event->setting("deadline") && $now > $event->setting("deadline")  ) 
./enter/hybrid_entry.mhtml:%				 || (  $caphit && $event->setting("waitlist") < 1) ) { 
./enter/hybrid_entry.mhtml:%			    my @clean_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./enter/hybrid_entry.mhtml:					<h4><% $event->abbr %></h4>
./enter/hybrid_entry.mhtml:					<a class="blue block" href="students.mhtml?school_id=<% $school->id %>&event_id=<% $event->id %>">
./enter/hybrid_entry.mhtml:						Return to <% $event->abbr %> entry
./enter/hybrid_entry.mhtml:%					if ($event->setting("hybrids")) { 
./enter/hybrid_entry.mhtml:						<a class="dkblue block" href="hybrid_entry.mhtml?event_id=<% $event->id %>&school_id=<% $school->id %>&waitlist=<% $waitlist %>">
./enter/hybrid_entry.mhtml:					<a class="yellow block" href="/user/chapter/students.mhtml?chapter_id=<% $school->chapter->id %>">
./enter/hybrid_entry.mhtml:%		foreach my $event ($tourn->events) { 
./enter/hybrid_entry.mhtml:			<a class="<% ($event->id == $event_id) ? "dk" : "" %>blue block"
./enter/hybrid_entry.mhtml:				href="students.mhtml?school_id=<% $school->id %>&event_id=<% $event->id %>">
./enter/hybrid_entry.mhtml:				<% scalar($school->entries(event => $event->id)) %> - <% $event->name %>
./enter/judge_striketime_flip.mhtml:	my $strike_timeslot = Tab::StrikeTimeslot->retrieve($strike_timeslot_id);
./enter/judge_striketime_flip.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_striketime_flip.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_striketime_flip.mhtml:	my $strike =  $strike_timeslot->strike($judge);
./enter/judge_striketime_flip.mhtml:		$strike->delete;
./enter/judge_striketime_flip.mhtml:		my $strike = Tab::Strike->create({
./enter/judge_striketime_flip.mhtml:			tourn  	=> $school->tourn->id,
./enter/judge_striketime_flip.mhtml:			strike_timeslot => $strike_timeslot->id,
./enter/judge_striketime_flip.mhtml:			judge       => $judge->id,
./enter/judge_striketime_flip.mhtml:			start       => $strike_timeslot->start,
./enter/judge_striketime_flip.mhtml:			end         => $strike_timeslot->end
./enter/judge_striketime_flip.mhtml:	$m->redirect("judge_striketime.mhtml?school_id=".$school->id."&judge_id=".$judge->id);
./enter/entry_drop.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/entry_drop.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/entry_drop.mhtml:		$m->redirect("onsite.mhtml?school_id=$school_id") if $from eq "onsite";
./enter/entry_drop.mhtml:		$m->redirect("students.mhtml?school_id=$school_id");
./enter/entry_drop.mhtml:	my $event = $entry->event;
./enter/entry_drop.mhtml:	my $tourn = $event->tourn;
./enter/entry_drop.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./enter/entry_drop.mhtml:	my $freeze_deadline = $tourn->setting("freeze_deadline");
./enter/entry_drop.mhtml:	$drop_deadline = $tourn->reg_end unless $drop_deadline;
./enter/entry_drop.mhtml:	$freeze_deadline = $tourn->reg_end unless $freeze_deadline;
./enter/entry_drop.mhtml:	my $now = DateTime->now;
./enter/entry_drop.mhtml:		$m->redirect("onsite.mhtml?entry_id=$entry_id&school_id=$school_id&err=$err") if $from eq "onsite";
./enter/entry_drop.mhtml:		$m->redirect("students.mhtml?entry_id=$entry_id&school_id=$school_id&err=$err");
./enter/entry_drop.mhtml:	if ($tourn->setting("track_reg_changes")) { 
./enter/entry_drop.mhtml:		my $description = $person->first." ".$person->last." dropped ".$entry->event->abbr." entry ".$entry->code." ".$entry->name; 
./enter/entry_drop.mhtml:		$description = $person->first." ".$person->last." un-dropped ".$entry->event->abbr." entry ".$entry->code." ".$entry->name if $entry->dropped;
./enter/entry_drop.mhtml:		my $change = Tab::ChangeLog->create({
./enter/entry_drop.mhtml:			tourn       => $tourn->id,
./enter/entry_drop.mhtml:			person      => $person->id
./enter/entry_drop.mhtml:	foreach my $student ($entry->students) { 
./enter/entry_drop.mhtml:		foreach my $other ($m->comp("/funclib/student_entries.mas", tourn => $tourn, student => $student)) { 
./enter/entry_drop.mhtml:			next STUDENT if $other->id != $entry->id;
./enter/entry_drop.mhtml:		foreach my $housing ($student->housing($tourn)) { 
./enter/entry_drop.mhtml:			$housing->delete if $housing;
./enter/entry_drop.mhtml:	my $name = $entry->name;
./enter/entry_drop.mhtml:		if ($entry->dropped) { 
./enter/entry_drop.mhtml:			$entry->dropped(0);
./enter/entry_drop.mhtml:			$entry->update;
./enter/entry_drop.mhtml:			$entry->setting("dropped_at", "");
./enter/entry_drop.mhtml:			$entry->delete();
./enter/entry_drop.mhtml:			$school->setting("individuals", ( $school->setting("individuals") - $stu_count)) if $school->setting("individuals");
./enter/entry_drop.mhtml:		if ($entry->dropped) { 
./enter/entry_drop.mhtml:			$entry->dropped(0);
./enter/entry_drop.mhtml:			$entry->update;
./enter/entry_drop.mhtml:			$entry->setting("dropped_at", "");
./enter/entry_drop.mhtml:			$entry->dropped(1);
./enter/entry_drop.mhtml:			$entry->update;
./enter/entry_drop.mhtml:			$entry->setting("dropped_at", "date", $now);
./enter/entry_drop.mhtml:			$entry->setting("dropped_by", $person->id);
./enter/entry_drop.mhtml:		my $drop_reason = "Dropped ". $entry->code ." by ".$person->last; 
./enter/entry_drop.mhtml:		if ($tourn->setting("fine_deadline") < $now && $entry->waitlist < 1) { 
./enter/entry_drop.mhtml:			if ($entry->dropped) { 
./enter/entry_drop.mhtml:				my $fine = Tab::SchoolFine->create({
./enter/entry_drop.mhtml:					school => $entry->school->id,
./enter/entry_drop.mhtml:					amount => $tourn->setting("drop_fine"),
./enter/entry_drop.mhtml:					levied_by => $person->id
./enter/entry_drop.mhtml:				}) if $tourn->setting("drop_fine") > 0; 
./enter/entry_drop.mhtml:				my $fine = Tab::SchoolFine->search( school => $entry->school->id, reason => $drop_reason )->first;
./enter/entry_drop.mhtml:				$fine->delete if $fine;
./enter/entry_drop.mhtml:	$m->redirect("onsite.mhtml?event_id=".$event->id."&school_id=$school_id&msg=$msg") if $from eq "onsite";
./enter/entry_drop.mhtml:	$m->redirect("students.mhtml?event_id=".$event->id."&school_id=$school_id&msg=$msg");
./enter/ratings/clone_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/clone_strikes.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/clone_strikes.mhtml:	my $clone = Tab::Entry->retrieve($clone_id) if $clone_id;
./enter/ratings/clone_strikes.mhtml:	$m->abort unless $entry && $clone;
./enter/ratings/clone_strikes.mhtml:	$m->abort unless $entry->school->id == $clone->school->id;
./enter/ratings/clone_strikes.mhtml:	my $tourn = $school->tourn;
./enter/ratings/clone_strikes.mhtml:	my $now = DateTime->now;
./enter/ratings/clone_strikes.mhtml:	my $tz = $tourn->tz;
./enter/ratings/clone_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/clone_strikes.mhtml:	$strike_end->set_time_zone($tz) if $strike_end;
./enter/ratings/clone_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/clone_strikes.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/clone_strikes.mhtml:	my @entry_strikes = $m->comp("/funclib/entry_strikes.mas", entry => $entry, category => $category) if $entry;
./enter/ratings/clone_strikes.mhtml:		next if $strike->type eq "conflict";
./enter/ratings/clone_strikes.mhtml:		my $new_strike = $strike->copy;
./enter/ratings/clone_strikes.mhtml:		$new_strike->entry($clone_id);
./enter/ratings/clone_strikes.mhtml:		$new_strike->update;
./enter/ratings/clone_strikes.mhtml:	my $msg = "Strikes copied to ".$clone->code;
./enter/ratings/clone_strikes.mhtml:	$m->redirect("entry_strikes.mhtml?entry_id=$clone_id&school_id=".$school->id."&style=entry_ratings&category_id=$category_id&msg=$msg");
./enter/ratings/tiered_prefs_save.mhtml:	my $now = DateTime->now();
./enter/ratings/tiered_prefs_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/tiered_prefs_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/tiered_prefs_save.mhtml:	my $prefs_style = $category->setting("prefs");
./enter/ratings/tiered_prefs_save.mhtml:	Tab::Entry->set_sql(wipe_prefs => " delete from rating where entry = ? and ordinal = 0");
./enter/ratings/tiered_prefs_save.mhtml:	Tab::Entry->sql_wipe_prefs->execute($entry->id);
./enter/ratings/tiered_prefs_save.mhtml:    my @rating_tiers = Tab::RatingTier->search(  category => $category->id, type => "mpj" );
./enter/ratings/tiered_prefs_save.mhtml:    @rating_tiers = sort {$b->name <=> $a->name} @rating_tiers;
./enter/ratings/tiered_prefs_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/tiered_prefs_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./enter/ratings/tiered_prefs_save.mhtml:		$conflicts_by_id{$_->judge->id}++; 
./enter/ratings/tiered_prefs_save.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/tiered_prefs_save.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/tiered_prefs_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/tiered_prefs_save.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/tiered_prefs_save.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/tiered_prefs_save.mhtml:	my $rounds_per++ if $category->setting("prefs") eq "tiered_round";
./enter/ratings/tiered_prefs_save.mhtml:        next if $judge->school->id == $entry->school->id;
./enter/ratings/tiered_prefs_save.mhtml:        next if $conflicts_by_id{$judge->id};
./enter/ratings/tiered_prefs_save.mhtml:		next if $event_struck{$judge->id};
./enter/ratings/tiered_prefs_save.mhtml:		next if $no_frees && $freebie{$judge->id};
./enter/ratings/tiered_prefs_save.mhtml:		next if $freebie{$judge->id};
./enter/ratings/tiered_prefs_save.mhtml:			$judges_at_tier{$ARGS{$judge->id}} += $judge->obligation;
./enter/ratings/tiered_prefs_save.mhtml:			$judges_at_tier{$ARGS{$judge->id}} += $judge->hired;
./enter/ratings/tiered_prefs_save.mhtml:			$num_judges += $judge->obligation;
./enter/ratings/tiered_prefs_save.mhtml:			$num_judges += $judge->hired;
./enter/ratings/tiered_prefs_save.mhtml:			$judges_at_tier{$ARGS{$judge->id}}++;
./enter/ratings/tiered_prefs_save.mhtml:	        $tier_limit{$tier->id} = $tier->max;
./enter/ratings/tiered_prefs_save.mhtml:	        $tier_min{$tier->id} = $tier->min;
./enter/ratings/tiered_prefs_save.mhtml:	        $tier_limit{$tier->id} = ceil($num_judges * $tier->max / 100);
./enter/ratings/tiered_prefs_save.mhtml:	        $tier_min{$tier->id} = ceil($num_judges * $tier->min / 100);
./enter/ratings/tiered_prefs_save.mhtml:		$tier_name{$tier->id} = $tier->name;
./enter/ratings/tiered_prefs_save.mhtml:    my $cumulate++ if $category->setting("cumulate_mjp");
./enter/ratings/tiered_prefs_save.mhtml:			if ($judges_at_tier{$tier->id} < $tier_limit{$tier->id} && $tier_limit{$tier->id}) {
./enter/ratings/tiered_prefs_save.mhtml:				$spares_at_tier{$tier->id} += ceil($tier_limit{$tier->id} - $judges_at_tier{$tier->id});
./enter/ratings/tiered_prefs_save.mhtml:		$spares_available += $spares_at_tier{$tier->id};
./enter/ratings/tiered_prefs_save.mhtml:			next unless $ARGS{$judge->id} == $tier->id;
./enter/ratings/tiered_prefs_save.mhtml:			unless ($freebie{$judge->id}) { 
./enter/ratings/tiered_prefs_save.mhtml:					$tier_count += $judge->obligation;
./enter/ratings/tiered_prefs_save.mhtml:					$tier_count += $judge->hired;
./enter/ratings/tiered_prefs_save.mhtml:				if ($tier_count > $tier_limit{$ARGS{$judge->id}} ) { 
./enter/ratings/tiered_prefs_save.mhtml:					if ( ($spares_available + $tier_limit{$ARGS{$judge->id}}) >= $tier_count) { 
./enter/ratings/tiered_prefs_save.mhtml:							$spares_available -= $judge->obligation;
./enter/ratings/tiered_prefs_save.mhtml:							$spares_available -= $judge->hired;
./enter/ratings/tiered_prefs_save.mhtml:							$spares_available--;
./enter/ratings/tiered_prefs_save.mhtml:							$tier_count--;
./enter/ratings/tiered_prefs_save.mhtml:					unless ($spared || $tier_limit{$ARGS{$judge->id}} == 0) {
./enter/ratings/tiered_prefs_save.mhtml:						my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
./enter/ratings/tiered_prefs_save.mhtml:						$err = "You had too many judges rated ".$tier->name." <br/>" unless $err;
./enter/ratings/tiered_prefs_save.mhtml:						$err .= " - ".$judge->first." ".$judge->last." not rated <br />\n";
./enter/ratings/tiered_prefs_save.mhtml:			Tab::Rating->create({
./enter/ratings/tiered_prefs_save.mhtml:				tourn => $category->tourn->id,
./enter/ratings/tiered_prefs_save.mhtml:				judge => $judge->id,
./enter/ratings/tiered_prefs_save.mhtml:				entry => $entry->id,
./enter/ratings/tiered_prefs_save.mhtml:				rating_tier => $ARGS{$judge->id},
./enter/ratings/tiered_prefs_save.mhtml:		$tier_count{$tier->id} = $tier_count;
./enter/ratings/tiered_prefs_save.mhtml:    @rating_tiers = sort {$a->name <=> $b->name} @rating_tiers;
./enter/ratings/tiered_prefs_save.mhtml:		my $diff = $tier_min{$tier->id} - $tier_count{$tier->id};
./enter/ratings/tiered_prefs_save.mhtml:			$err .= "You are $diff under on tier ".$tier->name." <br /> You have ".$tier_count{$tier->id}." and need ".$tier_min{$tier->id}." <br />";
./enter/ratings/tiered_prefs_save.mhtml:		$min_spares_available -= $diff;
./enter/ratings/tiered_prefs_save.mhtml:	my $msg = $entry->name."'s prefs saved in ".$category->abbr;
./enter/ratings/tiered_prefs_save.mhtml:	$m->redirect("tiered_prefs.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&category_id=".$category->id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");
./enter/ratings/entry_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/entry_strikes.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/entry_strikes.mhtml:	my $tourn = $school->tourn;
./enter/ratings/entry_strikes.mhtml:	my $now = DateTime->now;
./enter/ratings/entry_strikes.mhtml:	my $tz = $tourn->tz;
./enter/ratings/entry_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/entry_strikes.mhtml:	$strike_end->set_time_zone($tz) if $strike_end;
./enter/ratings/entry_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/entry_strikes.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/entry_strikes.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/entry_strikes.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/entry_strikes.mhtml:        $rating_name{$tier->id} = $tier->name;
./enter/ratings/entry_strikes.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/entry_strikes.mhtml:        $rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id} if $rating->judge && $rating->rating_tier;
./enter/ratings/entry_strikes.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/entry_strikes.mhtml:	@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/entry_strikes.mhtml:	@judges = sort {$a->school->name cmp $b->school->name} @judges;
./enter/ratings/entry_strikes.mhtml:	my @entry_conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry, category => $category, conflicts => 'only') if $entry;
./enter/ratings/entry_strikes.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school, category => $category, conflicts => 'only') if $entry;
./enter/ratings/entry_strikes.mhtml:		$conflicts_by_id{$_->judge->id} = $_; 
./enter/ratings/entry_strikes.mhtml:	my $bank = $category->setting("entry_strikes");
./enter/ratings/entry_strikes.mhtml:	my @entry_strikes = $m->comp("/funclib/entry_strikes.mas", entry => $entry, category => $category) if $entry;
./enter/ratings/entry_strikes.mhtml:		if ($dedupe{$_->judge->id."-".$_->entry->id."-".$_->type}++) { 
./enter/ratings/entry_strikes.mhtml:			$_->delete;
./enter/ratings/entry_strikes.mhtml:			$strikes_by_id{$_->judge->id} = $_; 
./enter/ratings/entry_strikes.mhtml:			$bank-- unless $freebie{$_->judge->id};
./enter/ratings/entry_strikes.mhtml:    my @school_strikes = $m->comp('/funclib/school_strikes.mas', school => $school, category => $category );
./enter/ratings/entry_strikes.mhtml:		$school_strikes_by_id{$_->judge->id} = $_; 
./enter/ratings/entry_strikes.mhtml:	@judges = sort { $school_strikes_by_id{$b->id} <=> $school_strikes_by_id{$a->id} } @judges;
./enter/ratings/entry_strikes.mhtml:	@judges = sort { $strikes_by_id{$b->id} <=> $strikes_by_id{$a->id} } @judges;
./enter/ratings/entry_strikes.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/entry_strikes.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/entry_strikes.mhtml:			category_id => $category->id,
./enter/ratings/entry_strikes.mhtml:		<h2><% $school->name %> at the <% $tourn->name %></h2>
./enter/ratings/entry_strikes.mhtml:			<h4>Strikes for <% $entry->name %></h4>
./enter/ratings/entry_strikes.mhtml:			<h5>Limit: <% $category->setting("entry_strikes") %></h5>
./enter/ratings/entry_strikes.mhtml:%					if ($category->setting("coach_ratings")) { 
./enter/ratings/entry_strikes.mhtml:%					if ($category->strike_timeslots) {
./enter/ratings/entry_strikes.mhtml:%					next if $event_struck{$judge->id};
./enter/ratings/entry_strikes.mhtml:%					next if $judge->school && $judge->school->id == $school->id;
./enter/ratings/entry_strikes.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/entry_strikes.mhtml:					<tr <% $freebie{$judge->id} ? 'class="ligrnrow"' : "" %>>
./enter/ratings/entry_strikes.mhtml:								<a class="white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/entry_strikes.mhtml:								<a class="white" href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank">
./enter/ratings/entry_strikes.mhtml:								<% $judge->first %>
./enter/ratings/entry_strikes.mhtml:								<a class="white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/entry_strikes.mhtml:								<a class="white" href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank">
./enter/ratings/entry_strikes.mhtml:								<% $judge->last %>
./enter/ratings/entry_strikes.mhtml:							<% ($judge->school->id) ? $judge->school->short_name." ".$judge->school->chapter->state : "Hire" %>
./enter/ratings/entry_strikes.mhtml:%						if ($category->setting("coach_ratings")) { 
./enter/ratings/entry_strikes.mhtml:								<% $rating_by_judge{$judge->id} %>
./enter/ratings/entry_strikes.mhtml:%						if ($category->strike_timeslots) {
./enter/ratings/entry_strikes.mhtml:%								foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/ratings/entry_strikes.mhtml:										<% ($strike_timeslot->strike($judge)) ? "No rounds ".$strike_timeslot->name : "" %>
./enter/ratings/entry_strikes.mhtml:%							if ($conflicts_by_id{$judge->id}) { 
./enter/ratings/entry_strikes.mhtml:%							} elsif ($school_strikes_by_id{$judge->id}) { 
./enter/ratings/entry_strikes.mhtml:								<span class="<% $strikes_by_id{$judge->id} ? "dkred" : "dkblue" %>">
./enter/ratings/entry_strikes.mhtml:									<% ($strikes_by_id{$judge->id}) ? "Struck" : "Not Struck" %>
./enter/ratings/entry_strikes.mhtml:%								if ($bank || $strikes_by_id{$judge->id} || $freebie{$judge->id} ) { 
./enter/ratings/entry_strikes.mhtml:									<a class="<% $strikes_by_id{$judge->id} ? "dkred" : "dkblue" %> button" 
./enter/ratings/entry_strikes.mhtml:										href="entry_strike_switch.mhtml?entry_id=<% $entry->id %>&school_id=<% $school->id %>&judge_id=<% $judge->id %>&category_id=<% $category->id %>">
./enter/ratings/entry_strikes.mhtml:										<% ($strikes_by_id{$judge->id}) ? "Unstrike" : "Steee-rike!" %>
./enter/ratings/ordinals_prefs.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/ordinals_prefs.mhtml:	my $tourn = $school->tourn;
./enter/ratings/ordinals_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/ordinals_prefs.mhtml:	$category = $entry->event->category unless $category;
./enter/ratings/ordinals_prefs.mhtml:	my $rounds_per = $category->setting("rounds_per");
./enter/ratings/ordinals_prefs.mhtml:		undef $no_others if $person->site_admin;
./enter/ratings/ordinals_prefs.mhtml:		foreach my $admin ($school->chapter->admins) { 
./enter/ratings/ordinals_prefs.mhtml:			undef $no_others if $admin->id == $person->id;
./enter/ratings/ordinals_prefs.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/ordinals_prefs.mhtml:	my $now = DateTime->now;
./enter/ratings/ordinals_prefs.mhtml:	my $tz = $tourn->tz;
./enter/ratings/ordinals_prefs.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/ordinals_prefs.mhtml:	$strike_end->set_time_zone($tz) if $strike_end;
./enter/ratings/ordinals_prefs.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/ordinals_prefs.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/ordinals_prefs.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/ordinals_prefs.mhtml:        $rating_name{$tier->id} = $tier->name;
./enter/ratings/ordinals_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./enter/ratings/ordinals_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/ordinals_prefs.mhtml:		next unless $rating->judge;
./enter/ratings/ordinals_prefs.mhtml:		next unless $rating->rating_tier;
./enter/ratings/ordinals_prefs.mhtml:        $coach_rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id};
./enter/ratings/ordinals_prefs.mhtml:	my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category);
./enter/ratings/ordinals_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/ordinals_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/ordinals_prefs.mhtml:			<h2><% $school->short_name %> at the <% $tourn->name %></h2>
./enter/ratings/ordinals_prefs.mhtml:			<h3>Judge Ratings in <% $category->name %> </h3>
./enter/ratings/ordinals_prefs.mhtml:			@judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/ordinals_prefs.mhtml:			@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/ordinals_prefs.mhtml:			@judges = sort {$a->school->short_name cmp $b->school->short_name} @judges;
./enter/ratings/ordinals_prefs.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_prefs.mhtml:			foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_prefs.mhtml:			my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./enter/ratings/ordinals_prefs.mhtml:			foreach (@sch_conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_prefs.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", rating_tier => 0);
./enter/ratings/ordinals_prefs.mhtml:				$ratings_by_judge{$rating->judge->id} = $rating;
./enter/ratings/ordinals_prefs.mhtml:				$ordinal_by_judge{$rating->judge->id} = $rating->ordinal if $rating;
./enter/ratings/ordinals_prefs.mhtml:			@judges = sort { $ordinal_by_judge{$a->id} <=> $ordinal_by_judge{$b->id} } @judges;
./enter/ratings/ordinals_prefs.mhtml:					<h4>Rate <% $category->abbr %> Judges for <% $entry->name %></h4>
./enter/ratings/ordinals_prefs.mhtml:						<a class="dkblue button centeralign" href="ordinals_prefs_sortable.mhtml?entry_id=<% $entry_id %>&school_id=<% $school->id %>#yo">
./enter/ratings/ordinals_prefs.mhtml:				<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/ordinals_prefs.mhtml:				<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/ordinals_prefs.mhtml:				<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/ratings/ordinals_prefs.mhtml:%					next if $judge->school->id == $school->id;
./enter/ratings/ordinals_prefs.mhtml:%					next if $event_struck{$judge->id};
./enter/ratings/ordinals_prefs.mhtml:%					next if $conflicts_by_id{$judge->id};
./enter/ratings/ordinals_prefs.mhtml:%					next if $no_frees && $freebie{$judge->id};
./enter/ratings/ordinals_prefs.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/ordinals_prefs.mhtml:					<tr <% $freebie{$judge->id} ? 'class="ligrnrow"' : $switch++ % 2 ? 'class="oddhover"' : 'class="evenhover"' %> >
./enter/ratings/ordinals_prefs.mhtml:								<a class="white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/ordinals_prefs.mhtml:    	         				<a class="white" href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank" tabindex="-1">
./enter/ratings/ordinals_prefs.mhtml:								<% $judge->first %>
./enter/ratings/ordinals_prefs.mhtml:								<a class="white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/ordinals_prefs.mhtml:    	                 		<a class="white" href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank" tabindex="-1">
./enter/ratings/ordinals_prefs.mhtml:								<% $judge->last %>
./enter/ratings/ordinals_prefs.mhtml:							<% ($judge->school && $judge->school->id) ? $judge->school->short_name." ".$judge->school->chapter->state : "Hire "%>
./enter/ratings/ordinals_prefs.mhtml:								<% $judge->obligation + $judge->hired %>
./enter/ratings/ordinals_prefs.mhtml:								<% $coach_rating_by_judge{$judge->id} %>
./enter/ratings/ordinals_prefs.mhtml:								<% $ordinal_by_judge{$judge->id} %>
./enter/ratings/ordinals_prefs.mhtml:								<% $ordinal_by_judge{$judge->id} %>
./enter/ratings/ordinals_prefs.mhtml:								<input type="number" min="0" max="<% 2 * (scalar @judges) %>" name="rating_<% $judge->id %>" size="5" value="<% $ordinal_by_judge{$judge->id} %>">
./enter/ratings/ordinals_prefs.mhtml:							<% $ratings_by_judge{$judge->id} ?  sprintf("%.2f", $ratings_by_judge{$judge->id}->percentile) : "" %>
./enter/ratings/ordinals_prefs.mhtml:				<a class="yellow block" href="export_prefs.mhtml?entry_id=<% $entry->id %>&school_id=<% $school->id %>&style=ordinals">
./enter/ratings/ordinals_prefs.mhtml:				<a class="yellow block" <& "/funclib/confirm.mas", warn => $warn &> href="ordinals_auto_pref.mhtml?school_id=<% $school->id %>&entry_id=<% $entry->id %>">
./enter/ratings/ordinals_prefs.mhtml:						<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/ordinals_prefs.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/ordinals_prefs.mhtml:%						my $school_year = Tab::school_year->year;
./enter/ratings/ordinals_prefs.mhtml:%						foreach my $student ($entry->students) { 
./enter/ratings/ordinals_prefs.mhtml:%							push @chapters, $student->chapter;
./enter/ratings/ordinals_prefs.mhtml:							<option value="<% $student->id %>"><% $student->last.", ".$student->first %></option>
./enter/ratings/ordinals_prefs.mhtml:%							foreach my $student ($chapter->students(retired => 0)) { 
./enter/ratings/ordinals_prefs.mhtml:%								next if $student->grad_year <= ($school_year - 1);
./enter/ratings/ordinals_prefs.mhtml:								<option value="<% $student->id %>"><% $student->last.", ".$student->first %></option>
./enter/ratings/ordinals_prefs.mhtml:						<input type="submit" class="thin" value="Go" style="padding-left: 2px; padding-right: 2px;">
./enter/ratings/ordinals_prefs.mhtml:							<input type="hidden" name="clone_id" value="<% $entry->id %>">
./enter/ratings/ordinals_prefs.mhtml:							<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/ordinals_prefs.mhtml:%							foreach my $other ($m->comp('/funclib/category_entries.mas', category => $category, school => $school)) { 
./enter/ratings/ordinals_prefs.mhtml:%								next if $entry->id == $other->id;
./enter/ratings/ordinals_prefs.mhtml:%								next if $entry->dropped;
./enter/ratings/ordinals_prefs.mhtml:								<option value="<% $other->id %>"><% $other->name %></option>
./enter/ratings/ordinals_prefs.mhtml:							<input type="submit" class="thin" value="Go" style="padding-left: 2px; padding-right: 2px;">
./enter/ratings/ordinals_prefs.mhtml:		<& menu.mas, person => $person, school => $school, whoami => "entry_ratings", prefs => $prefs, category_id => $category->id, entry_id => $entry_id,  nodiv => 1 &>
./enter/ratings/export_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/export_prefs.mhtml:	my $event = $entry->event;
./enter/ratings/export_prefs.mhtml:	my $category = $event->category;
./enter/ratings/export_prefs.mhtml:	my $tourn = $category->tourn;
./enter/ratings/export_prefs.mhtml:	$style = $category->setting("prefs") unless $style;
./enter/ratings/export_prefs.mhtml:	my $rounds_per = $category->setting("rounds_per");
./enter/ratings/export_prefs.mhtml:	my $now = DateTime->now;
./enter/ratings/export_prefs.mhtml:	my $tz = $tourn->tz;
./enter/ratings/export_prefs.mhtml:    my %rating_name = map {$_->id => $_->name} $category->rating_tiers;
./enter/ratings/export_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./enter/ratings/export_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/export_prefs.mhtml:		next unless $rating->judge;
./enter/ratings/export_prefs.mhtml:		next unless $rating->rating_tier;
./enter/ratings/export_prefs.mhtml:        $coach_rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id};
./enter/ratings/export_prefs.mhtml:		foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "entry", entry => $entry)) { 
./enter/ratings/export_prefs.mhtml:			next unless $rating->judge;
./enter/ratings/export_prefs.mhtml:			$rating_by_judge{$rating->judge->id} = $rating->ordinal; 
./enter/ratings/export_prefs.mhtml:			$percentile_by_judge{$rating->judge->id} = $rating->percentile;
./enter/ratings/export_prefs.mhtml:		my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./enter/ratings/export_prefs.mhtml:			next unless $rating->judge;
./enter/ratings/export_prefs.mhtml:			next unless $rating->rating_tier;
./enter/ratings/export_prefs.mhtml:			$rating_by_judge{$rating->judge->id} = $rating->rating_tier->name;
./enter/ratings/export_prefs.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/export_prefs.mhtml:	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/export_prefs.mhtml:	my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./enter/ratings/export_prefs.mhtml:	foreach (@sch_conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/export_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/export_prefs.mhtml:	@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/export_prefs.mhtml:	@judges = sort {$a->school->short_name cmp $b->school->short_name} @judges;
./enter/ratings/export_prefs.mhtml:	@judges = sort { $rating_by_judge{$a->id} <=> $rating_by_judge{$b->id} } @judges;
./enter/ratings/export_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/export_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/export_prefs.mhtml:	my $filename = "Prefs-".$entry->name."-".Tab::csvdt($now);
./enter/ratings/export_prefs.mhtml:	my $garbage = `rm -f $filepath.*`;
./enter/ratings/export_prefs.mhtml:	print CSVOUT "Pref sheet for ".$entry->name." \n";
./enter/ratings/export_prefs.mhtml:		next if $judge->school->id == $entry->school->id;
./enter/ratings/export_prefs.mhtml:		next if $event_struck{$judge->id};
./enter/ratings/export_prefs.mhtml:		print CSVOUT "\"".$judge->first."\",\"".$judge->last."\",\"";
./enter/ratings/export_prefs.mhtml:		print CSVOUT $judge->school->short_name."\"," if $judge->school;
./enter/ratings/export_prefs.mhtml:		print CSVOUT "\"Hired\"," unless $judge->school;
./enter/ratings/export_prefs.mhtml:		print CSVOUT ($judge->obligation + $judge->hired).",";
./enter/ratings/export_prefs.mhtml:		if ($conflicts_by_id{$judge->id}) { 
./enter/ratings/export_prefs.mhtml:			print CSVOUT "\"".$coach_rating_by_judge{$judge->id}."\"," if $coach_ratings;
./enter/ratings/export_prefs.mhtml:			print CSVOUT "\"".$rating_by_judge{$judge->id}."\",\"".$percentile_by_judge{$judge->id}."\"," if $style eq "ordinals";
./enter/ratings/export_prefs.mhtml:			print CSVOUT "\"".$rating_by_judge{$judge->id}."\"," unless $style eq "ordinals";
./enter/ratings/export_prefs.mhtml:	$m->redirect("$Tab::url_prefix/tmp/$filename.csv");
./enter/ratings/entry_ratings_save.mhtml:	my $now = DateTime->now();
./enter/ratings/entry_ratings_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/entry_ratings_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/entry_ratings_save.mhtml:	Tab::Entry->set_sql(wipe_prefs => " delete from rating where entry = ?");
./enter/ratings/entry_ratings_save.mhtml:	Tab::Entry->sql_wipe_prefs->execute($entry->id);
./enter/ratings/entry_ratings_save.mhtml:    my @rating_tiers = Tab::RatingTier->search(  category => $category->id, type => "mpj" );
./enter/ratings/entry_ratings_save.mhtml:	my @conflicts = $entry->conflicts; 
./enter/ratings/entry_ratings_save.mhtml:	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/entry_ratings_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/entry_ratings_save.mhtml:        next if $judge->school->id == $entry->school->id;
./enter/ratings/entry_ratings_save.mhtml:        next if $conflicts_by_id{$judge->id};
./enter/ratings/entry_ratings_save.mhtml:        $rating_limit{$rating->id} = ($num_judges * $rating->max / 100);
./enter/ratings/entry_ratings_save.mhtml:		next unless $ARGS{$judge->id};
./enter/ratings/entry_ratings_save.mhtml:		$judges_at_tier{$ARGS{$judge->id}}++;
./enter/ratings/entry_ratings_save.mhtml:	my $cumulate++ if $category->setting("cumulate_mjp");
./enter/ratings/entry_ratings_save.mhtml:	foreach my $tier (sort {$b->name <=> $a->name} @rating_tiers) {
./enter/ratings/entry_ratings_save.mhtml:		if ($judges_at_tier{$ARGS{$judge->id}} < $tier_limit{$ARGS{$judge->id}}) {
./enter/ratings/entry_ratings_save.mhtml:			$spares += $tier_limit{$ARGS{$judge->id}} - $judges_at_tier{$ARGS{$judge->id}};
./enter/ratings/entry_ratings_save.mhtml:		if ($judges_at_tier{$ARGS{$judge->id}} >= $tier_limit{$ARGS{$judge->id}}) {
./enter/ratings/entry_ratings_save.mhtml:				$spares--;
./enter/ratings/entry_ratings_save.mhtml:				my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
./enter/ratings/entry_ratings_save.mhtml:				$err = "You had too many judges rated ".$tier->name." <br/>" unless $err;
./enter/ratings/entry_ratings_save.mhtml:				$err .= " - ".$judge->first." ".$judge->last." not rated <br />\n";
./enter/ratings/entry_ratings_save.mhtml:		$judges_at_tier{$ARGS{$judge->id}}++;
./enter/ratings/entry_ratings_save.mhtml:		Tab::Rating->create({
./enter/ratings/entry_ratings_save.mhtml:			tournament => $category->tournament->id,
./enter/ratings/entry_ratings_save.mhtml:			judge => $judge->id,
./enter/ratings/entry_ratings_save.mhtml:			entry => $entry->id,
./enter/ratings/entry_ratings_save.mhtml:			tier => $ARGS{$judge->id},
./enter/ratings/entry_ratings_save.mhtml:	my $msg = $entry->team_name."'s ratings saved in ".$category->abbr;
./enter/ratings/entry_ratings_save.mhtml:	$m->redirect("/user/tourn/entry/ratings/entry_ratings.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&category_id=".$category->id."&style=entry_ratings&msg=".$msg."&err=".$err);
./enter/ratings/entry_ratings.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/entry_ratings.mhtml:	my $tourn = $school->tournament;
./enter/ratings/entry_ratings.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/entry_ratings.mhtml:	$category = $entry->event->category unless $category;
./enter/ratings/entry_ratings.mhtml:	my $now = DateTime->now;
./enter/ratings/entry_ratings.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/entry_ratings.mhtml:	<h2><% $school->name %> at the <% $tourn->name %></h2>
./enter/ratings/entry_ratings.mhtml:			<h3>Judge Ratings in <% $category->name %> </h3>
./enter/ratings/entry_ratings.mhtml:			my @quals = Tab::Qual->search( 	category => $category->id, type => "mpj" );
./enter/ratings/entry_ratings.mhtml:			@quals = sort {$a->name cmp $b->name} @quals;
./enter/ratings/entry_ratings.mhtml:				$qualname_by_id{$_->id} = $_->name; 
./enter/ratings/entry_ratings.mhtml:				$has_max++ if $_->max;
./enter/ratings/entry_ratings.mhtml:				$has_min++ if $_->min;
./enter/ratings/entry_ratings.mhtml:			@judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/entry_ratings.mhtml:			@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/entry_ratings.mhtml:			@judges = sort {$a->school->name cmp $b->school->name} @judges;
./enter/ratings/entry_ratings.mhtml:			my @conflicts = $entry->conflicts;
./enter/ratings/entry_ratings.mhtml:			foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/entry_ratings.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry");
./enter/ratings/entry_ratings.mhtml:				$ratings_by_judge{$rating->judge->id} = $rating->qual->id;
./enter/ratings/entry_ratings.mhtml:			<h3>Rate <% $category->abbr %> Judges for <% $entry->team_name %></h3>
./enter/ratings/entry_ratings.mhtml:%					if ($category->coach_ratings) { 
./enter/ratings/entry_ratings.mhtml:						<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/entry_ratings.mhtml:						<input type="hidden" name="school_id" value="<% $entry->school->id %>">
./enter/ratings/entry_ratings.mhtml:						<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/ratings/entry_ratings.mhtml:%					next if $judge->school->id == $entry->school->id;
./enter/ratings/entry_ratings.mhtml:%					next if $conflicts_by_id{$judge->id};
./enter/ratings/entry_ratings.mhtml:%					if ($ratings && not defined $ratings_by_judge{$judge->id}) { 
./enter/ratings/entry_ratings.mhtml:							<a class="white" style="padding-bottom: 2px; padding-top: 2px;" 
./enter/ratings/entry_ratings.mhtml:								href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank">
./enter/ratings/entry_ratings.mhtml:								<% $judge->first." ".$judge->last %>
./enter/ratings/entry_ratings.mhtml:							<% ($judge->school && $judge->school->id) ? $judge->school->short_name.", ".$judge->school->chapter->state : "Hire "%>
./enter/ratings/entry_ratings.mhtml:%						if ($category->coach_ratings) { 
./enter/ratings/entry_ratings.mhtml:								<% $m->comp('/funclib/judge_rating.mas', judge => $judge, print => 1 %>
./enter/ratings/entry_ratings.mhtml:%								$ratings++ if $ratings_by_judge{$judge->id};
./enter/ratings/entry_ratings.mhtml:%								$total_by_qual{$qual->id}++ if ($qual->id == $ratings_by_judge{$judge->id});
./enter/ratings/entry_ratings.mhtml:								<span style="width: 40px; display: inline-block; border-right: 1px dotted #ccc;">
./enter/ratings/entry_ratings.mhtml:									<label for="<% $qual->id."_".$judge->id %>">
./enter/ratings/entry_ratings.mhtml:										<input type="radio" name="<% $judge->id %>" class="<% $qual->id %>"
./enter/ratings/entry_ratings.mhtml:											<% ($qual->id == $ratings_by_judge{$judge->id}) ? "checked" : "" %> 
./enter/ratings/entry_ratings.mhtml:											value="<% $qual->id %>" id="<% $qual->id."_".$judge->id %>">
./enter/ratings/entry_ratings.mhtml:										<% $qual->name %>
./enter/ratings/entry_ratings.mhtml:		<& menu.mas, person => $person, school => $school, whoami => "entry_ratings", category_id => $category->id, entry_id => $entry_id &>
./enter/ratings/entry_ratings.mhtml:    	        next if $judge->school->id == $school->id;
./enter/ratings/entry_ratings.mhtml:    	        next if $conflicts_by_id{$judge->id};
./enter/ratings/entry_ratings.mhtml:			<span style="display: inline-block;">
./enter/ratings/entry_ratings.mhtml:				<h5 style="font-size: 80%; letter-spacing: 0px; padding-right: 20px; padding-top: 5px;">Guide</h5>
./enter/ratings/entry_ratings.mhtml:			<span style="font-style: italic; display: inline-block; font-size: 80%;">
./enter/ratings/entry_ratings.mhtml:%				foreach my $qual (sort {$a->name cmp $b->name} Tab::Qual->search( category => $category->id, type => "mpj")) {
./enter/ratings/entry_ratings.mhtml:							<% ($qual->strike) ? "Strike" : $qual->name %>
./enter/ratings/entry_ratings.mhtml:%						if ($qual->max) { 
./enter/ratings/entry_ratings.mhtml:								<% ($qual->max > 0 ) ? ceil( $qual->max * scalar @ratable_judges / 100) : "" %>
./enter/ratings/entry_ratings.mhtml:%						if ($qual->min) { 
./enter/ratings/entry_ratings.mhtml:								<% ($qual->min > 0 ) ? ceil( $qual->min * scalar @ratable_judges / 100) : "" %>
./enter/ratings/entry_ratings.mhtml:							<% $total_by_qual{$qual->id} %>
./enter/ratings/entry_ratings.mhtml:%			if ($category->cumulate_mjp) { 
./enter/ratings/entry_ratings.mhtml:				<p class="explain" style="line-height: 13px; padding: 0px; padding-left: 5px;">
./enter/ratings/entry_ratings.mhtml:%			if ($entry && scalar $school->entries( event => $entry->event->id ) > 1) {
./enter/ratings/entry_ratings.mhtml:							<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/entry_ratings.mhtml:							<input type="hidden" name="school_id" value="<% $entry->school->id %>">
./enter/ratings/entry_ratings.mhtml:%								foreach my $other ($entry->school->entries( event => $entry->event->id )) { 
./enter/ratings/entry_ratings.mhtml:%									next if $entry->id == $other->id;
./enter/ratings/entry_ratings.mhtml:%									next if $entry->dropped;
./enter/ratings/entry_ratings.mhtml:									<option value="<% $other->id %>"><% $other->team_name %></option>
./enter/ratings/entry_strike_switch.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/entry_strike_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/ratings/entry_strike_switch.mhtml:	my $category = $entry->event->category;
./enter/ratings/entry_strike_switch.mhtml:	unless ($category->id == $judge->category->id) { 
./enter/ratings/entry_strike_switch.mhtml:		$m->redirect("entry_strikes.mhtml?school_id=".$entry->school->id."&entry_id=$entry_id&category_id=".$category->id."&err=$err");
./enter/ratings/entry_strike_switch.mhtml:    my @strikes = $m->comp('/funclib/entry_strikes.mas', entry => $entry );
./enter/ratings/entry_strike_switch.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/entry_strike_switch.mhtml:	my $bank = $category->setting("entry_strikes");
./enter/ratings/entry_strike_switch.mhtml:		$strikes_by_id{$_->judge->id} = $_; 
./enter/ratings/entry_strike_switch.mhtml:		$bank-- unless $freebie{$_->judge->id};
./enter/ratings/entry_strike_switch.mhtml:		$strikes_by_id{$judge_id}->delete;
./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You have un-struck ".$judge->first." ".$judge->last;
./enter/ratings/entry_strike_switch.mhtml:		$m->redirect("entry_strikes.mhtml?school_id=".$entry->school->id."&entry_id=$entry_id&category_id=".$category->id."&msg=$msg");
./enter/ratings/entry_strike_switch.mhtml:		$bank--;
./enter/ratings/entry_strike_switch.mhtml:		my $strike = Tab::Strike->create({
./enter/ratings/entry_strike_switch.mhtml:			tourn => $category->tourn->id,
./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You have struck ".$judge->first." ".$judge->last." like a gong.";
./enter/ratings/entry_strike_switch.mhtml:		$m->redirect("entry_strikes.mhtml?school_id=".$entry->school->id."&entry_id=$entry_id&category_id=".$category->id."&msg=$msg#yo");
./enter/ratings/entry_strike_switch.mhtml:		$m->redirect("entry_strikes.mhtml?school_id=".$entry->school->id."&entry_id=$entry_id&category_id=".$category->id."&msg=$msg#yo");
./enter/ratings/ordinals_auto_pref.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/ordinals_auto_pref.mhtml:	my $tourn = $school->tourn;
./enter/ratings/ordinals_auto_pref.mhtml:	my $tz = $tourn->tz;
./enter/ratings/ordinals_auto_pref.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./enter/ratings/ordinals_auto_pref.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/ordinals_auto_pref.mhtml:	$category = $entry->event->category unless $category;
./enter/ratings/ordinals_auto_pref.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/ordinals_auto_pref.mhtml:		$m->redirect("ordinals_prefs.mhtml?school_id=".$school->id."&category_id=$category_id&err=$err");
./enter/ratings/ordinals_auto_pref.mhtml:	Tab::Rating->set_sql( wipe_existing => "
./enter/ratings/ordinals_auto_pref.mhtml:	Tab::Rating->sql_wipe_existing->execute($entry_id);
./enter/ratings/ordinals_auto_pref.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/ratings/ordinals_auto_pref.mhtml:		foreach my $entry_student ($entry->students) { 
./enter/ratings/ordinals_auto_pref.mhtml:			$ok++ if $student->chapter->id == $entry_student->chapter->id;
./enter/ratings/ordinals_auto_pref.mhtml:			$m->redirect("ordinals_prefs.mhtml?school_id=".$school->id."&category_id=$category_id&err=$err");
./enter/ratings/ordinals_auto_pref.mhtml:		Tab::Judge->set_sql( judge_with_rating_by_person => "
./enter/ratings/ordinals_auto_pref.mhtml:		Tab::Judge->set_sql( judge_with_rating_by_cj => "
./enter/ratings/ordinals_auto_pref.mhtml:		@others = Tab::Judge->search_judge_with_rating_by_person($student->id);
./enter/ratings/ordinals_auto_pref.mhtml:		@cj_others = Tab::Judge->search_judge_with_rating_by_cj($student->id);
./enter/ratings/ordinals_auto_pref.mhtml:		Tab::Judge->set_sql( judge_with_rating_by_person => "
./enter/ratings/ordinals_auto_pref.mhtml:		Tab::Judge->set_sql( judge_with_rating_by_cj => "
./enter/ratings/ordinals_auto_pref.mhtml:		@others = Tab::Judge->search_judge_with_rating_by_person($entry->id);
./enter/ratings/ordinals_auto_pref.mhtml:		@cj_others = Tab::Judge->search_judge_with_rating_by_cj($entry->id);
./enter/ratings/ordinals_auto_pref.mhtml:		next unless $other->pref;
./enter/ratings/ordinals_auto_pref.mhtml:		next unless $other->personid;
./enter/ratings/ordinals_auto_pref.mhtml:		push (@{$others_by_person{$other->personid}}, $other);
./enter/ratings/ordinals_auto_pref.mhtml:		$used{$other->id}++;
./enter/ratings/ordinals_auto_pref.mhtml:		next unless $other->pref;
./enter/ratings/ordinals_auto_pref.mhtml:		next unless $other->cjid;
./enter/ratings/ordinals_auto_pref.mhtml:		next if $used{$other->id};
./enter/ratings/ordinals_auto_pref.mhtml:		push (@{$others_by_cj{$other->cjid}}, $other);
./enter/ratings/ordinals_auto_pref.mhtml:	my @judges = $category->judges;
./enter/ratings/ordinals_auto_pref.mhtml:		if ($judge->chapter_judge) { 
./enter/ratings/ordinals_auto_pref.mhtml:			foreach my $other (@{$others_by_cj{$judge->chapter_judge->id}}) { 
./enter/ratings/ordinals_auto_pref.mhtml:				$total += $other->pref;
./enter/ratings/ordinals_auto_pref.mhtml:		if ($judge->person) { 
./enter/ratings/ordinals_auto_pref.mhtml:			foreach my $other (@{$others_by_person{$judge->person->id}}) { 
./enter/ratings/ordinals_auto_pref.mhtml:				$total += $other->pref;
./enter/ratings/ordinals_auto_pref.mhtml:		$judge_avg{$judge->id} = $avg;
./enter/ratings/ordinals_auto_pref.mhtml:		$total_rounds += $judge->obligation;
./enter/ratings/ordinals_auto_pref.mhtml:		$total_rounds += $judge->hired;
./enter/ratings/ordinals_auto_pref.mhtml:	foreach my $judge (sort {$judge_avg{$a->id} <=> $judge_avg{$b->id}} @judges) { 
./enter/ratings/ordinals_auto_pref.mhtml:		next unless $judge_avg{$judge->id};
./enter/ratings/ordinals_auto_pref.mhtml:		Tab::Rating->create({ 
./enter/ratings/ordinals_auto_pref.mhtml:			tourn      => $tourn->id,
./enter/ratings/ordinals_auto_pref.mhtml:			judge      => $judge->id,
./enter/ratings/ordinals_auto_pref.mhtml:		$rounds_before += $judge->obligation;
./enter/ratings/ordinals_auto_pref.mhtml:		$rounds_before += $judge->hired;
./enter/ratings/ordinals_auto_pref.mhtml:	$m->redirect("ordinals_prefs.mhtml?entry_id=".$entry->id."&school_id=".$school->id."&msg=$msg");
./enter/ratings/clone.mhtml:	my $now = DateTime->now;
./enter/ratings/clone.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/clone.mhtml:		$m->print('<div class="blankfull warning centeralign"><h4>');
./enter/ratings/clone.mhtml:		$m->print("No source debater selected.  Please select a debater from whom to copy prefs");
./enter/ratings/clone.mhtml:		$m->print('<h4></div>');
./enter/ratings/clone.mhtml:		$m->abort;
./enter/ratings/clone.mhtml:	my $clone = Tab::Entry->retrieve($clone_id);
./enter/ratings/clone.mhtml:		$m->print('<div class="blankfull warning centeralign"><h4>');
./enter/ratings/clone.mhtml:		$m->print("No target debater selected.  Please select a debater from whom to copy prefs");
./enter/ratings/clone.mhtml:		$m->print('</h4></div>');
./enter/ratings/clone.mhtml:		$m->abort;
./enter/ratings/clone.mhtml:	my @ratings = $clone->ratings;
./enter/ratings/clone.mhtml:		$m->print('<div class="blankfull warning centeralign"><h4>');
./enter/ratings/clone.mhtml:		$m->print("You are attempting to copy prefs from someone who doesn't have a prefs.  You probably intended to do that the other way around.  Hit back and try again.");
./enter/ratings/clone.mhtml:		$m->print('</h4></div>');
./enter/ratings/clone.mhtml:		$m->abort;
./enter/ratings/clone.mhtml:	unless ($entry->school->id == $clone->school->id) { 
./enter/ratings/clone.mhtml:		$m->print("<p>Very freakin' clever.  Trying to clone the ratings of another school's debaters?</p>");
./enter/ratings/clone.mhtml:		$m->print("<p>But not clever enough.  Go away, and fear the wrath of Palmer</p>");
./enter/ratings/clone.mhtml:		$m->abort("");
./enter/ratings/clone.mhtml:		Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ? and rating.rating_tier > 0") if $style eq "tiered";
./enter/ratings/clone.mhtml:		Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ? and rating.ordinal > 0") if $style eq "ordinals";
./enter/ratings/clone.mhtml:		Tab::Entry->sql_wipe_prefs->execute($entry->id);
./enter/ratings/clone.mhtml:		Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ?");
./enter/ratings/clone.mhtml:		Tab::Entry->sql_wipe_prefs->execute($entry->id);
./enter/ratings/clone.mhtml:		next if $style eq "ordinals" && $rating->rating_tier->id > 0;
./enter/ratings/clone.mhtml:		next if $style eq "tiered" && $rating->ordinal > 0;
./enter/ratings/clone.mhtml:		my $new_rating = $rating->copy({
./enter/ratings/clone.mhtml:			entry   => $entry->id,
./enter/ratings/clone.mhtml:	my $msg = "$style Cloned $count Ratings from ".$entry->name." to ".$clone->name;
./enter/ratings/clone.mhtml:	my $type = $entry->event->category->setting("prefs");
./enter/ratings/clone.mhtml:	$m->redirect($type."_prefs.mhtml?school_id=".$entry->school->id."&entry_id=".$entry->id."&category_id=".$entry->event->category->id."&msg=".$msg);
./enter/ratings/school_strike_switch.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/ratings/school_strike_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/ratings/school_strike_switch.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/school_strike_switch.mhtml:    my @strikes = $m->comp("/funclib/school_strikes.mas", school => $school, category => $category);
./enter/ratings/school_strike_switch.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/school_strike_switch.mhtml:	my $bank = $category->setting("school_strikes");
./enter/ratings/school_strike_switch.mhtml:		$strikes_by_id{$_->judge->id} = $_; 
./enter/ratings/school_strike_switch.mhtml:		$bank-- unless $freebie{$_->judge->id};
./enter/ratings/school_strike_switch.mhtml:		$strikes_by_id{$judge_id}->delete;
./enter/ratings/school_strike_switch.mhtml:		my $msg = "You have un-struck ".$judge->first." ".$judge->last;
./enter/ratings/school_strike_switch.mhtml:		$m->redirect("school_strikes.mhtml?school_id=".$school->id."&category_id=".$category->id."&msg=$msg");
./enter/ratings/school_strike_switch.mhtml:		my $strike = Tab::Strike->create({
./enter/ratings/school_strike_switch.mhtml:			tourn => $category->tourn->id,
./enter/ratings/school_strike_switch.mhtml:			school => $school->id,
./enter/ratings/school_strike_switch.mhtml:		my $msg = "You have struck ".$judge->first." ".$judge->last;
./enter/ratings/school_strike_switch.mhtml:		$m->redirect("school_strikes.mhtml?school_id=".$school->id."&category_id=".$category->id."&msg=$msg");
./enter/ratings/school_strike_switch.mhtml:		$m->redirect("school_strikes.mhtml?school_id=".$school->id."&category_id=".$category->id."&msg=$msg");
./enter/ratings/index.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./enter/ratings/index.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/index.mhtml:	my $tourn = $school->tourn;
./enter/ratings/index.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/index.mhtml:	my $now = DateTime->now;
./enter/ratings/index.mhtml:		<h2>Prefs & Strikes at the <% $tourn->name %></h2>
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $tourn = $school->tourn;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/ordinals_prefs_sortable.mhtml:	$category = $entry->event->category unless $category;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $rounds_per = $category->setting("rounds_per");
./enter/ratings/ordinals_prefs_sortable.mhtml:		undef $no_others if $person->site_admin;
./enter/ratings/ordinals_prefs_sortable.mhtml:		foreach my $admin ($school->chapter->admins) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:			undef $no_others if $admin->id == $person->id;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $now = DateTime->now;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $tz = $tourn->tz;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/ordinals_prefs_sortable.mhtml:	$strike_end->set_time_zone($tz) if $strike_end;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/ordinals_prefs_sortable.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/ordinals_prefs_sortable.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:        $rating_name{$tier->id} = $tier->name;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./enter/ratings/ordinals_prefs_sortable.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:		next unless $rating->rating_tier;
./enter/ratings/ordinals_prefs_sortable.mhtml:        $coach_rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id};
./enter/ratings/ordinals_prefs_sortable.mhtml:		$m->redirect("ordinals_prefs.mhtml?entry_id=$entry_id&school_id=".$school->id."&category_id=$category_id&msg=$msg#");
./enter/ratings/ordinals_prefs_sortable.mhtml:			<h2><% $school->short_name %> at the <% $tourn->name %></h2>
./enter/ratings/ordinals_prefs_sortable.mhtml:			<h3>Judge Ratings in <% $category->name %> </h3>
./enter/ratings/ordinals_prefs_sortable.mhtml:			@judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/ordinals_prefs_sortable.mhtml:			@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/ordinals_prefs_sortable.mhtml:			@judges = sort {$a->school->short_name cmp $b->school->short_name} @judges;
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_prefs_sortable.mhtml:			foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./enter/ratings/ordinals_prefs_sortable.mhtml:			foreach (@sch_conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry");
./enter/ratings/ordinals_prefs_sortable.mhtml:				$ratings_by_judge{$rating->judge->id} = $rating;
./enter/ratings/ordinals_prefs_sortable.mhtml:				$ordinal_by_judge{$rating->judge->id} = $rating->ordinal if $rating;
./enter/ratings/ordinals_prefs_sortable.mhtml:			@judges = sort { $ordinal_by_judge{$a->id} <=> $ordinal_by_judge{$b->id} } @judges;
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/ordinals_prefs_sortable.mhtml:			my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/ordinals_prefs_sortable.mhtml:						placeholder      : "ui-state-highlight",
./enter/ratings/ordinals_prefs_sortable.mhtml:							ui.item.removeClass("ui-state-default");
./enter/ratings/ordinals_prefs_sortable.mhtml:							ui.item.toggleClass("ui-state-changed");
./enter/ratings/ordinals_prefs_sortable.mhtml:					<h4>Rate <% $category->abbr %> Judges for <% $entry->name %></h4>
./enter/ratings/ordinals_prefs_sortable.mhtml:					<a class="dkblue full strong centeralign" href="ordinals_prefs.mhtml?entry_id=<% $entry_id %>&school_id=<% $entry->school->id %>#yo">
./enter/ratings/ordinals_prefs_sortable.mhtml:				<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/ordinals_prefs_sortable.mhtml:				<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/ordinals_prefs_sortable.mhtml:%						next if $judge->school->id == $entry->school->id;
./enter/ratings/ordinals_prefs_sortable.mhtml:%						next if $conflicts_by_id{$judge->id};
./enter/ratings/ordinals_prefs_sortable.mhtml:%						next if $event_struck{$judge->id};
./enter/ratings/ordinals_prefs_sortable.mhtml:						<li class="ui-state-default " id="judge_<% $judge->id %>" style="font-size: 105%;">
./enter/ratings/ordinals_prefs_sortable.mhtml:							<span class="ui-icon ui-icon-arrowthick-3-n-s sortarrow left"></span>
./enter/ratings/ordinals_prefs_sortable.mhtml:								<%  $ordinal_by_judge{$judge->id} ? $ordinal_by_judge{$judge->id} : "0" %>
./enter/ratings/ordinals_prefs_sortable.mhtml:								<% $judge->first." ".$judge->last %>
./enter/ratings/ordinals_prefs_sortable.mhtml:										<% $coach_rating_by_judge{$judge->id} %>
./enter/ratings/ordinals_prefs_sortable.mhtml:								<% ($judge->school && $judge->school->id) ? $judge->school->short_name.", ".$judge->school->chapter->state : "Hire "%>
./enter/ratings/ordinals_prefs_sortable.mhtml:									<% ($judge->obligation + $judge->hired) ? ($judge->obligation + $judge->hired) : "6" %> rds
./enter/ratings/ordinals_prefs_sortable.mhtml:				<a class="yellow full" href="export_prefs.mhtml?entry_id=<% $entry->id %>&school_id=<% $school->id %>">
./enter/ratings/ordinals_prefs_sortable.mhtml:					<a class="yellow full" <& "/funclib/confirm.mas", warn => $warn &> href="ordinals_auto_pref.mhtml?school_id=<% $school->id %>&entry_id=<% $entry->id %>">
./enter/ratings/ordinals_prefs_sortable.mhtml:						<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/ordinals_prefs_sortable.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/ordinals_prefs_sortable.mhtml:%							my $school_year = Tab::school_year->year;
./enter/ratings/ordinals_prefs_sortable.mhtml:%							foreach my $student ($entry->students) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:%								push @chapters, $student->chapter;
./enter/ratings/ordinals_prefs_sortable.mhtml:								<option value="<% $student->id %>"><% $student->last.", ".$student->first %></option>
./enter/ratings/ordinals_prefs_sortable.mhtml:%								foreach my $student ($chapter->students(retired => 0)) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:%									next if $student->grad_year <= ($school_year - 1);
./enter/ratings/ordinals_prefs_sortable.mhtml:									<option value="<% $student->id %>"><% $student->last.", ".$student->first %></option>
./enter/ratings/ordinals_prefs_sortable.mhtml:							<input type="submit" class="thin" value="Go" style="padding-left: 2px; padding-right: 2px;">
./enter/ratings/ordinals_prefs_sortable.mhtml:			prefs => $prefs, category_id => $category->id, entry_id => $entry_id,  nodiv => 1 &>
./enter/ratings/school_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/school_strikes.mhtml:	my $tourn = $school->tourn;
./enter/ratings/school_strikes.mhtml:	my $now = DateTime->now;
./enter/ratings/school_strikes.mhtml:	my $tz = $tourn->tz;
./enter/ratings/school_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/school_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/school_strikes.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/school_strikes.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/school_strikes.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/school_strikes.mhtml:        $rating_name{$tier->id} = $tier->name if $tier->id;
./enter/ratings/school_strikes.mhtml:	if ($category->setting("coach_ratings")) { 
./enter/ratings/school_strikes.mhtml:	    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/school_strikes.mhtml:	        $rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id} if $rating->judge && $rating->rating_tier && $rating->judge->id && $rating->rating_tier->id;
./enter/ratings/school_strikes.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/school_strikes.mhtml:	@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/school_strikes.mhtml:	@judges = sort {$a->school->name cmp $b->school->name} @judges;
./enter/ratings/school_strikes.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school, category => $category);
./enter/ratings/school_strikes.mhtml:		$conflicts_by_id{$_->judge->id} = $_; 
./enter/ratings/school_strikes.mhtml:	my $bank = $category->setting("school_strikes");
./enter/ratings/school_strikes.mhtml:	my @school_strikes = $m->comp("/funclib/school_strikes.mas", school => $school, category => $category);
./enter/ratings/school_strikes.mhtml:		$strikes_by_id{$_->judge->id} = $_; 
./enter/ratings/school_strikes.mhtml:		$bank-- unless $freebie{$_->judge->id};
./enter/ratings/school_strikes.mhtml:	@judges = sort { $strikes_by_id{$b->id} <=> $strikes_by_id{$a->id} } @judges;
./enter/ratings/school_strikes.mhtml:		<& menu.mas, person => $person, school => $school, whoami => "school_strikes", nodiv => 1, category_id => $category->id &>
./enter/ratings/school_strikes.mhtml:			<h2><% $school->name %> at the <% $tourn->name %></h2>
./enter/ratings/school_strikes.mhtml:				<h4>School-wide Strikes in <% $category->abbr %></h4>
./enter/ratings/school_strikes.mhtml:				<h5>Limit: <% $category->setting("school_strikes") %></h5>
./enter/ratings/school_strikes.mhtml:%					if ($category->setting("coach_ratings")) { 
./enter/ratings/school_strikes.mhtml:%					if ($category->strike_timeslots) {
./enter/ratings/school_strikes.mhtml:%					next if $judge->school && $judge->school->id == $school->id;
./enter/ratings/school_strikes.mhtml:%					next if $conflicts_by_id{$judge->id};
./enter/ratings/school_strikes.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/school_strikes.mhtml:%					if ($freebie{$judge->id}) { 
./enter/ratings/school_strikes.mhtml:%					} elsif ($strikes_by_id{$judge->id}) { 
./enter/ratings/school_strikes.mhtml:								<a class="white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/school_strikes.mhtml:								<a class="white" href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank">
./enter/ratings/school_strikes.mhtml:								<% $judge->first %>
./enter/ratings/school_strikes.mhtml:								<a class="white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/school_strikes.mhtml:								<a class="white" href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank">
./enter/ratings/school_strikes.mhtml:								<% $judge->last %>
./enter/ratings/school_strikes.mhtml:							<% ($judge->school->id) ? $judge->school->short_name." ".$judge->school->chapter->state : "Hire" %>
./enter/ratings/school_strikes.mhtml:%						if ($category->setting("coach_ratings")) { 
./enter/ratings/school_strikes.mhtml:								<% $rating_by_judge{$judge->id} %>
./enter/ratings/school_strikes.mhtml:%						if ($category->strike_timeslots) {
./enter/ratings/school_strikes.mhtml:%								foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/ratings/school_strikes.mhtml:										<% ($strike_timeslot->strike($judge)) ? "No rounds ".$strike_timeslot->name : "" %>
./enter/ratings/school_strikes.mhtml:%							if ($conflicts_by_id{$judge->id}) { 
./enter/ratings/school_strikes.mhtml:								<span style="color: #006600; font-weight: bold; color: <% $strikes_by_id{$judge->id} ? "#660000" : "#006600" %>">
./enter/ratings/school_strikes.mhtml:									<% ($strikes_by_id{$judge->id}) ? "Struck" : "Not Struck" %>
./enter/ratings/school_strikes.mhtml:%								if ($bank || $strikes_by_id{$judge->id} || $freebie{$judge->id}) { 
./enter/ratings/school_strikes.mhtml:									<a class="<% $strikes_by_id{$judge->id} ? "dkred" : "dkblue" %> block" 
./enter/ratings/school_strikes.mhtml:										href="school_strike_switch.mhtml?school_id=<% $school->id %>&judge_id=<% $judge->id %>&category_id=<% $category->id %>">
./enter/ratings/school_strikes.mhtml:										<% ($strikes_by_id{$judge->id}) ? "Unstrike" : "Steee-rike!" %>
./enter/ratings/conflict_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/ratings/conflict_switch.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/ratings/conflict_switch.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/conflict_switch.mhtml:		my $conflict = Tab::Strike->search( type => "conflict", judge => $judge->id,  entry => $entry->id, registrant => 1 )->first;
./enter/ratings/conflict_switch.mhtml:			$conflict->delete;
./enter/ratings/conflict_switch.mhtml:			$msg = "Conflict against ".$judge->first." ".$judge->last." removed";
./enter/ratings/conflict_switch.mhtml:			Tab::Strike->create({
./enter/ratings/conflict_switch.mhtml:				tourn => $school->tourn->id,
./enter/ratings/conflict_switch.mhtml:			$msg = $entry->name."'s Conflict against ".$judge->first." ".$judge->last." saved";
./enter/ratings/conflict_switch.mhtml:		my $conflict = Tab::Strike->search( type => "conflict", judge => $judge->id, school => $school->id, registrant => 1 )->first;
./enter/ratings/conflict_switch.mhtml:			$conflict->delete;
./enter/ratings/conflict_switch.mhtml:			$msg = "School conflict against ".$judge->first." ".$judge->last." removed";
./enter/ratings/conflict_switch.mhtml:			Tab::Strike->create({
./enter/ratings/conflict_switch.mhtml:				tourn => $school->tourn->id,
./enter/ratings/conflict_switch.mhtml:			$msg = "Conflict against ".$judge->first." ".$judge->last." saved";
./enter/ratings/conflict_switch.mhtml:	$m->redirect("conflicts.mhtml?entry_id=$entry_id&school_id=$school_id&category_id=".$judge->category->id."&style=conflicts&msg=$msg");
./enter/ratings/school_ratings.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/school_ratings.mhtml:	my $tourn = $school->tournament;
./enter/ratings/school_ratings.mhtml:	my $now = DateTime->now;
./enter/ratings/school_ratings.mhtml:	<h2><% $school->name %> at the <% $tourn->name %></h2>
./enter/ratings/school_ratings.mhtml:		my @quals = Tab::Qual->search( 	category => $category->id, type => "mpj" );
./enter/ratings/school_ratings.mhtml:		@quals = sort {$a->name cmp $b->name} @quals;
./enter/ratings/school_ratings.mhtml:			$qualname_by_id{$_->id} = $_->name; 
./enter/ratings/school_ratings.mhtml:			$has_max++ if $_->max;
./enter/ratings/school_ratings.mhtml:			$has_min++ if $_->min;
./enter/ratings/school_ratings.mhtml:		my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/school_ratings.mhtml:		@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/school_ratings.mhtml:		@judges = sort {$a->school->name cmp $b->school->name} @judges;
./enter/ratings/school_ratings.mhtml:		my @conflicts = $school->conflicts;
./enter/ratings/school_ratings.mhtml:		foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/school_ratings.mhtml:		my @ratings = Tab::Rating->search( school => $school->id, type => "school");
./enter/ratings/school_ratings.mhtml:			$ratings_by_judge{$rating->judge->id} = $rating->qual->id;
./enter/ratings/school_ratings.mhtml:		<h3>Rate <% $category->abbr %> Judges</h3>
./enter/ratings/school_ratings.mhtml:%				if ($category->coach_ratings) { 
./enter/ratings/school_ratings.mhtml:					<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/school_ratings.mhtml:					<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/ratings/school_ratings.mhtml:%				next if $judge->school->id == $school->id;
./enter/ratings/school_ratings.mhtml:%				next if $conflicts_by_id{$judge->id};
./enter/ratings/school_ratings.mhtml:%				if ($ratings && not defined $ratings_by_judge{$judge->id}) { 
./enter/ratings/school_ratings.mhtml:							<a class="white" style="padding-bottom: 2px; padding-top: 2px;" 
./enter/ratings/school_ratings.mhtml:								href="http://judgephilosophies.wikispaces.com/<% $judge->last %>%2C+<% $judge->first %>" target="_blank">
./enter/ratings/school_ratings.mhtml:								<% $judge->first." ".$judge->last %>
./enter/ratings/school_ratings.mhtml:							<% ($judge->school && $judge->school->id) ? $judge->school->short_name.", ".$judge->school->chapter->state : "Hire "%>
./enter/ratings/school_ratings.mhtml:%						if ($category->coach_ratings) { 
./enter/ratings/school_ratings.mhtml:								<% $m->comp('/funclib/judge_rating.mas', judge => $judge, print => 1 %>
./enter/ratings/school_ratings.mhtml:%								$ratings++ if $ratings_by_judge{$judge->id};
./enter/ratings/school_ratings.mhtml:%								$total_by_qual{$qual->id}++ if ($qual->id == $ratings_by_judge{$judge->id});
./enter/ratings/school_ratings.mhtml:								<span style="width: 40px; display: inline-block; border-right: 1px dotted #ccc;">
./enter/ratings/school_ratings.mhtml:									<label for="<% $qual->id."_".$judge->id %>">
./enter/ratings/school_ratings.mhtml:										<input type="radio" name="<% $judge->id %>" class="<% $qual->id %>"
./enter/ratings/school_ratings.mhtml:											<% ($qual->id == $ratings_by_judge{$judge->id}) ? "checked" : "" %> 
./enter/ratings/school_ratings.mhtml:											value="<% $qual->id %>" id="<% $qual->id."_".$judge->id %>">
./enter/ratings/school_ratings.mhtml:										<% $qual->name %>
./enter/ratings/school_ratings.mhtml:			next if $judge->school->id == $school->id;
./enter/ratings/school_ratings.mhtml:			next if $conflicts_by_id{$judge->id};
./enter/ratings/school_ratings.mhtml:		<span style="display: inline-block;">
./enter/ratings/school_ratings.mhtml:			<h5 style="font-size: 80%; letter-spacing: 0px; padding-right: 20px;">Guide</h5>
./enter/ratings/school_ratings.mhtml:		<span style="font-style: italic; display: inline-block; font-size: 80%;">
./enter/ratings/school_ratings.mhtml:%			foreach my $qual (sort {$a->name cmp $b->name} Tab::Qual->search( category => $category->id, type => "mpj")) {
./enter/ratings/school_ratings.mhtml:						<% ($qual->strike) ? "Strike" : $qual->name %>
./enter/ratings/school_ratings.mhtml:%					if ($qual->max) { 
./enter/ratings/school_ratings.mhtml:							<% ($qual->max > 0 ) ? ceil( $qual->max * scalar @ratable_judges / 100) : "" %>
./enter/ratings/school_ratings.mhtml:%					if ($qual->min) { 
./enter/ratings/school_ratings.mhtml:							<% ($qual->min > 0 ) ? ceil( $qual->min * scalar @ratable_judges / 100) : "" %>
./enter/ratings/school_ratings.mhtml:						<% $total_by_qual{$qual->id} %>
./enter/ratings/school_ratings.mhtml:%		if ($category->cumulate_mjp) { 
./enter/ratings/school_ratings.mhtml:			<p class="explain" style="line-height: 13px; padding: 0px; padding-left: 5px;">
./enter/ratings/ordinals_sort_save.mhtml:	my $now = DateTime->now();
./enter/ratings/ordinals_sort_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/ordinals_sort_save.mhtml:	my $category = $entry->event->category;
./enter/ratings/ordinals_sort_save.mhtml:	my $tourn = $category->tourn;
./enter/ratings/ordinals_sort_save.mhtml:	my $ignore_conflicts++ if $category->setting("conflict_denominator");
./enter/ratings/ordinals_sort_save.mhtml:	Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ?");
./enter/ratings/ordinals_sort_save.mhtml:	Tab::Entry->sql_wipe_prefs->execute($entry->id);
./enter/ratings/ordinals_sort_save.mhtml:	my $round_burden++ if $category->setting("rounds_per");
./enter/ratings/ordinals_sort_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_sort_save.mhtml:	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_sort_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", 
./enter/ratings/ordinals_sort_save.mhtml:			school => $entry->school, category => $category);
./enter/ratings/ordinals_sort_save.mhtml:	foreach (@school_conflicts) { $school_conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_sort_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/ordinals_sort_save.mhtml:	@all_judges = sort {$id_order{$a->id} <=> $id_order{$b->id}} @all_judges;
./enter/ratings/ordinals_sort_save.mhtml:        next if $judge->school->id == $entry->school->id;
./enter/ratings/ordinals_sort_save.mhtml:            next JUDGE if $conflicts_by_id{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:            next JUDGE if $school_conflicts_by_id{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:		$total_rounds += $judge->obligation;
./enter/ratings/ordinals_sort_save.mhtml:		$total_rounds += $judge->hired;
./enter/ratings/ordinals_sort_save.mhtml:		next JUDGE if $conflicts_by_id{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:		next JUDGE if $school_conflicts_by_id{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:		my $rating = Tab::Rating->create({
./enter/ratings/ordinals_sort_save.mhtml:			tourn => $tourn->id,
./enter/ratings/ordinals_sort_save.mhtml:			judge => $judge->id,
./enter/ratings/ordinals_sort_save.mhtml:			entry => $entry->id,
./enter/ratings/ordinals_sort_save.mhtml:        $rating_by_judge{$judge->id} = $rating;
./enter/ratings/ordinals_sort_save.mhtml:        $ordinal_by_judge{$judge->id} = $ARGS{"rating_".$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:        push (@{$judges_at_rating{$ARGS{"rating_".$judge->id}}}, $judge );
./enter/ratings/ordinals_sort_save.mhtml:			next if $conflicts_by_id{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:        	next if $school_conflicts_by_id{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:			$rounds_before += $judge->obligation;
./enter/ratings/ordinals_sort_save.mhtml:			$rounds_before += $judge->hired;
./enter/ratings/ordinals_sort_save.mhtml:			my $rating = $rating_by_judge{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:			$rating->percentile($percentile);
./enter/ratings/ordinals_sort_save.mhtml:			$rating->update;
./enter/ratings/ordinals_sort_save.mhtml:	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
./enter/ratings/ordinals_sort_save.mhtml:	$m->redirect("ordinals_prefs_sortable.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&category_id=".$category->id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");
./enter/ratings/conflicts.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/conflicts.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/conflicts.mhtml:	my $tourn = $category->tourn;
./enter/ratings/conflicts.mhtml:	my $tz = $tourn->tz;
./enter/ratings/conflicts.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/conflicts.mhtml:	my $now = DateTime->now;
./enter/ratings/conflicts.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/conflicts.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/conflicts.mhtml:	$strike_end->set_time_zone($tz) if $strike_end;
./enter/ratings/conflicts.mhtml:		my @conflicts = $entry->strikes( type => "conflict", registrant => 1);
./enter/ratings/conflicts.mhtml:		%conflicts_by_id = map {$_->judge->id => 1} @conflicts;
./enter/ratings/conflicts.mhtml:		my @school_conflicts = Tab::Strike->search( school => $entry->school->id, type => "conflict", registrant => 1);
./enter/ratings/conflicts.mhtml:		%school_conflicts_by_id = map {$_->judge->id => 1} @school_conflicts;
./enter/ratings/conflicts.mhtml:		my @school_conflicts = Tab::Strike->search( school => $school->id, type => "conflict", registrant => 1);
./enter/ratings/conflicts.mhtml:		%conflicts_by_id = map {$_->judge->id => 1} @school_conflicts;
./enter/ratings/conflicts.mhtml:	my @judges = sort {$a->last cmp $b->last} $category->judges(active => 1);
./enter/ratings/conflicts.mhtml:	@judges = sort {$a->school->name cmp $b->school->name} @judges;
./enter/ratings/conflicts.mhtml:	@judges = sort {$conflicts_by_id{$b->id} <=> $conflicts_by_id{$a->id}} @judges;
./enter/ratings/conflicts.mhtml:	@judges = sort {$school_conflicts_by_id{$b->id} <=> $school_conflicts_by_id{$a->id}} @judges;
./enter/ratings/conflicts.mhtml:			<p style="font-size: 80%; font-style: smaller;">
./enter/ratings/conflicts.mhtml:			<p style="font-size: 80%; font-style: smaller;">
./enter/ratings/conflicts.mhtml:			<h2><% $school->name %> at the <% $tourn->name %></h2>
./enter/ratings/conflicts.mhtml:		<h4>Judge Conflicts for <% $entry ? $entry->name : $school->short_name %></h4>
./enter/ratings/conflicts.mhtml:%				next if $judge->school && $judge->school->id == $school->id;
./enter/ratings/conflicts.mhtml:%				if ($conflicts_by_id{$judge->id}) { 
./enter/ratings/conflicts.mhtml:%				} elsif ($school_conflicts_by_id{$judge->id}) { 
./enter/ratings/conflicts.mhtml:						<% $judge->first." ".$judge->last %>
./enter/ratings/conflicts.mhtml:						<% ($judge->school->id) ? substr ($judge->school->name,0,30).", ".$judge->school->chapter->state : "Tournament Hire" %>
./enter/ratings/conflicts.mhtml:%						if ($entry && $school_conflicts_by_id{$judge->id}) { 
./enter/ratings/conflicts.mhtml:							<span style="color: #006600; font-weight: bold; color: <% $conflicts_by_id{$judge->id} ? "#660000" : "#006600" %>">
./enter/ratings/conflicts.mhtml:								<% ($conflicts_by_id{$judge->id}) ? "Conflicted" : "No Conflict" %>
./enter/ratings/conflicts.mhtml:							<a class="<% $conflicts_by_id{$judge->id} ? "dkred" : "dkblue" %> button"
./enter/ratings/conflicts.mhtml:								href="conflict_switch.mhtml?judge_id=<% $judge->id %>&entry_id=<% $entry_id %>&school_id=<% $school->id %>">
./enter/ratings/conflicts.mhtml:								<% ($conflicts_by_id{$judge->id}) ? "Conflicted" : "No Conflict" %>
./enter/ratings/ordinals_prefs_save.mhtml:	my $now = DateTime->now();
./enter/ratings/ordinals_prefs_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/ordinals_prefs_save.mhtml:	$m->abort unless $entry;
./enter/ratings/ordinals_prefs_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/ordinals_prefs_save.mhtml:	Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ? and rating_tier = 0");
./enter/ratings/ordinals_prefs_save.mhtml:	Tab::Entry->sql_wipe_prefs->execute($entry->id);
./enter/ratings/ordinals_prefs_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_prefs_save.mhtml:	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_prefs_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school, category => $category);
./enter/ratings/ordinals_prefs_save.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/ordinals_prefs_save.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/ordinals_prefs_save.mhtml:	foreach (@school_conflicts) { $school_conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/ordinals_prefs_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/ordinals_prefs_save.mhtml:	my $ignore_conflicts++ if $category->setting("conflict_denominator");
./enter/ratings/ordinals_prefs_save.mhtml:        next if $judge->school->id == $entry->school->id;
./enter/ratings/ordinals_prefs_save.mhtml:		next if $no_frees && $freebie{$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:			next JUDGE unless $ARGS{"rating_".$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:        	next JUDGE if $conflicts_by_id{$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:        	next JUDGE if $school_conflicts_by_id{$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:		unless ($ARGS{"rating_".$judge->id} == 999) { 
./enter/ratings/ordinals_prefs_save.mhtml:			$total_rounds += $judge->obligation;
./enter/ratings/ordinals_prefs_save.mhtml:			$total_rounds += $judge->hired;
./enter/ratings/ordinals_prefs_save.mhtml:		my $rating = Tab::Rating->create({
./enter/ratings/ordinals_prefs_save.mhtml:			tourn => $category->tourn->id,
./enter/ratings/ordinals_prefs_save.mhtml:			judge => $judge->id,
./enter/ratings/ordinals_prefs_save.mhtml:			entry => $entry->id,
./enter/ratings/ordinals_prefs_save.mhtml:			ordinal => $ARGS{"rating_".$judge->id},
./enter/ratings/ordinals_prefs_save.mhtml:		}) if $ARGS{"rating_".$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:		$rating_by_judge{$judge->id} = $rating;
./enter/ratings/ordinals_prefs_save.mhtml:		$ordinal_by_judge{$judge->id} = $ARGS{"rating_".$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:		push (@{$judges_at_rating{$ARGS{"rating_".$judge->id}}}, $judge );
./enter/ratings/ordinals_prefs_save.mhtml:			$rounds_add += $judge->obligation;
./enter/ratings/ordinals_prefs_save.mhtml:			$rounds_add += $judge->hired;
./enter/ratings/ordinals_prefs_save.mhtml:			my $rating = $rating_by_judge{$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:			$rating->ordinal($count) if $fill && $rating->ordinal != 999;
./enter/ratings/ordinals_prefs_save.mhtml:			$rating->percentile($percentile);
./enter/ratings/ordinals_prefs_save.mhtml:			$rating->update;
./enter/ratings/ordinals_prefs_save.mhtml:	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
./enter/ratings/ordinals_prefs_save.mhtml:	$m->redirect("ordinals_prefs.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&category_id=".$category->id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");
./enter/ratings/tiered_prefs.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/tiered_prefs.mhtml:	my $tourn = $school->tourn;
./enter/ratings/tiered_prefs.mhtml:	my $pref_style = $category->setting("prefs");
./enter/ratings/tiered_prefs.mhtml:	my $tz = $tourn->tz;
./enter/ratings/tiered_prefs.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/tiered_prefs.mhtml:	$strike_end = $category->setting("elim_strike_end") if $pref_style eq "ndt";
./enter/ratings/tiered_prefs.mhtml:	$strike_end->set_time_zone($tz) if $strike_end;
./enter/ratings/tiered_prefs.mhtml:	my $now = DateTime->now;
./enter/ratings/tiered_prefs.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/tiered_prefs.mhtml:	$strike_start->set_time_zone($tz) if $strike_start;
./enter/ratings/tiered_prefs.mhtml:	$strike_start = $category->setting("elim_strike_start") if $pref_style eq "ndt";
./enter/ratings/tiered_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/tiered_prefs.mhtml:	$category = $entry->event->category unless $category;
./enter/ratings/tiered_prefs.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/tiered_prefs.mhtml:        $rating_name{$tier->id} = $tier->name;
./enter/ratings/tiered_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/tiered_prefs.mhtml:        $coach_rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id} if $rating->judge && $rating->rating_tier;
./enter/ratings/tiered_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/tiered_prefs.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/tiered_prefs.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/tiered_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/tiered_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/tiered_prefs.mhtml:	my $rounds_per++ if $category->setting("prefs") eq "tiered_round";
./enter/ratings/tiered_prefs.mhtml:			<h2><% $school->short_name %> at the <% $tourn->name %></h2>
./enter/ratings/tiered_prefs.mhtml:			<h3>Judge Ratings in <% $category->name %> </h3>
./enter/ratings/tiered_prefs.mhtml:			my @tiers = Tab::RatingTier->search( 	category => $category->id, type => "mpj" );
./enter/ratings/tiered_prefs.mhtml:			@tiers = sort {$a->name cmp $b->name} @tiers;
./enter/ratings/tiered_prefs.mhtml:				$tiername_by_id{$_->id} = $_->name; 
./enter/ratings/tiered_prefs.mhtml:				$has_max++ if $_->max;
./enter/ratings/tiered_prefs.mhtml:				$has_min++ if $_->min;
./enter/ratings/tiered_prefs.mhtml:			@judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/tiered_prefs.mhtml:			@judges = sort {$a->last cmp $b->last} @judges;
./enter/ratings/tiered_prefs.mhtml:			@judges = sort {$a->school->short_name cmp $b->school->short_name} @judges;
./enter/ratings/tiered_prefs.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/tiered_prefs.mhtml:			my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./enter/ratings/tiered_prefs.mhtml:				$conflicts_by_id{$_->judge->id}++;
./enter/ratings/tiered_prefs.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./enter/ratings/tiered_prefs.mhtml:				$ratings_by_judge{$rating->judge->id} = $rating->rating_tier->id;
./enter/ratings/tiered_prefs.mhtml:            my @ordinals = Tab::Rating->search( entry => $entry->id, type => "entry", rating_tier => 0); 
./enter/ratings/tiered_prefs.mhtml:                $ordinal_by_judge{$ordinal->judge->id} = $ordinal->ordinal if $ordinal;
./enter/ratings/tiered_prefs.mhtml:            @judges = sort { $ordinal_by_judge{$a->id} <=> $ordinal_by_judge{$b->id} } @judges;
./enter/ratings/tiered_prefs.mhtml:					<h4>Rate <% $category->abbr %> Judges for <% $entry->name %></h4>
./enter/ratings/tiered_prefs.mhtml:					<a class="dkblue padmuchmore centeralign" href="export_prefs.mhtml?entry_id=<% $entry_id %>&school_id=<% $school->id %>">
./enter/ratings/tiered_prefs.mhtml:%			if ($tourn->id == 1518) { 
./enter/ratings/tiered_prefs.mhtml:			<div class="noscroll padno martop" style="margin-right: -10px; margin-left: -10px;">
./enter/ratings/tiered_prefs.mhtml:				<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/tiered_prefs.mhtml:				<input type="hidden" name="school_id" value="<% $entry->school->id %>">
./enter/ratings/tiered_prefs.mhtml:				<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/ratings/tiered_prefs.mhtml:%					if ($category->setting('coach_ratings')) { 
./enter/ratings/tiered_prefs.mhtml:%					next if $judge->school->id == $entry->school->id;
./enter/ratings/tiered_prefs.mhtml:%					next if $conflicts_by_id{$judge->id};
./enter/ratings/tiered_prefs.mhtml:%					next if $event_struck{$judge->id};
./enter/ratings/tiered_prefs.mhtml:%					next if $no_frees && $freebie{$judge->id};
./enter/ratings/tiered_prefs.mhtml:%					next if $pref_style eq "ndt" && $judge->setting("no_elims");
./enter/ratings/tiered_prefs.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/tiered_prefs.mhtml:					<tr class="<% $freebie{$judge->id} ? 'ligrnrow' : $switch++ % 2 ? 'odd' : 'even' %>">
./enter/ratings/tiered_prefs.mhtml:								<a class="button leftalign white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/tiered_prefs.mhtml:%								my $last_name = $judge->last;
./enter/ratings/tiered_prefs.mhtml:%								my $first_name = $judge->first;
./enter/ratings/tiered_prefs.mhtml:%								$last_name =~ s/[^a-zA-Z]//g; 
./enter/ratings/tiered_prefs.mhtml:%								$first_name =~ s/[^a-zA-Z]//g; 
./enter/ratings/tiered_prefs.mhtml:								<% $judge->first %>
./enter/ratings/tiered_prefs.mhtml:	                   			<a class="button leftalign white" href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" target="_blank">
./enter/ratings/tiered_prefs.mhtml:%								my $last_name = $judge->last;
./enter/ratings/tiered_prefs.mhtml:%								my $first_name = $judge->first;
./enter/ratings/tiered_prefs.mhtml:%								$last_name =~ s/[^a-zA-Z]//g; 
./enter/ratings/tiered_prefs.mhtml:%								$first_name =~ s/[^a-zA-Z]//g; 
./enter/ratings/tiered_prefs.mhtml:								<% $judge->last %>
./enter/ratings/tiered_prefs.mhtml:								<% $judge->obligation + $judge->hired %>
./enter/ratings/tiered_prefs.mhtml:							<% ($judge->school && $judge->school->id) ? $judge->school->short_name : "Hire" %>
./enter/ratings/tiered_prefs.mhtml:%						if ($category->setting('coach_ratings')) { 
./enter/ratings/tiered_prefs.mhtml:								<% $coach_rating_by_judge{$judge->id} %>
./enter/ratings/tiered_prefs.mhtml:									<% $tier->id == $ratings_by_judge{$judge->id} ? $tier->name : "" %>
./enter/ratings/tiered_prefs.mhtml:									<% $tier->id == $ratings_by_judge{$judge->id} ? $tier->name : "" %>
./enter/ratings/tiered_prefs.mhtml:%									$ratings++ if $ratings_by_judge{$judge->id};
./enter/ratings/tiered_prefs.mhtml:%										$total_by_tier{$tier->id} += $judge->obligation if ($tier->id == $ratings_by_judge{$judge->id}) && not defined $freebie{$judge->id};
./enter/ratings/tiered_prefs.mhtml:%										$total_by_tier{$tier->id} += $judge->hired if ($tier->id == $ratings_by_judge{$judge->id}) && not defined $freebie{$judge->id};
./enter/ratings/tiered_prefs.mhtml:%										$total_by_tier{$tier->id}++ if ($tier->id == $ratings_by_judge{$judge->id}) && not defined $freebie{$judge->id};
./enter/ratings/tiered_prefs.mhtml:									<label for="<% $tier->id."_".$judge->id %>">
./enter/ratings/tiered_prefs.mhtml:											<input type="radio" name="<% $judge->id %>" class="<% $tier->id %>" style="margin: 1px;"
./enter/ratings/tiered_prefs.mhtml:%												if ($ratings_by_judge{$judge->id}) { 
./enter/ratings/tiered_prefs.mhtml:												<% $tier->id == $ratings_by_judge{$judge->id} ? "checked" : "" %>
./enter/ratings/tiered_prefs.mhtml:												<% $tier->start ? "checked" : "" %>
./enter/ratings/tiered_prefs.mhtml:											value="<% $tier->id %>" id="<% $tier->id."_".$judge->id %>">
./enter/ratings/tiered_prefs.mhtml:											<% $tier->strike ? "S" : $tier->conflict ? "C" : $tier->name %>
./enter/ratings/tiered_prefs.mhtml:				<a class="blue full" href="export_prefs.mhtml?entry_id=<% $entry_id %>&school_id=<% $school->id %>">
./enter/ratings/tiered_prefs.mhtml:    	        next if $judge->school->id == $school->id;
./enter/ratings/tiered_prefs.mhtml:    	        next if $conflicts_by_id{$judge->id};
./enter/ratings/tiered_prefs.mhtml:				next if $event_struck{$judge->id};
./enter/ratings/tiered_prefs.mhtml:				next if $freebie{$judge->id};
./enter/ratings/tiered_prefs.mhtml:					$ratable_judges += $judge->obligation;
./enter/ratings/tiered_prefs.mhtml:					$ratable_judges += $judge->hired;
./enter/ratings/tiered_prefs.mhtml:%				foreach my $tier (sort {$a->name cmp $b->name} Tab::RatingTier->search( category => $category->id, type => "mpj")) {
./enter/ratings/tiered_prefs.mhtml:							<% ($tier->strike) ? "Strike" : $tier->name %>
./enter/ratings/tiered_prefs.mhtml:								<% ($pref_style eq "caps" || $pref_style eq "ndt") && $tier->max > 0 ? $tier->max : $tier->max > 0 ? ceil( $tier->max * $ratable_judges / 100) : "" %>
./enter/ratings/tiered_prefs.mhtml:								<% ($pref_style eq "caps" || $pref_style eq "ndt") && $tier->min > 0 ? $tier->min : $tier->min > 0 ? ceil( $tier->min * $ratable_judges / 100) : "" %>
./enter/ratings/tiered_prefs.mhtml:							<% $total_by_tier{$tier->id} %>
./enter/ratings/tiered_prefs.mhtml:%			my @others = $m->comp("/funclib/school_entry_by_category.mas", category => $entry->event->category, school => $school);
./enter/ratings/tiered_prefs.mhtml:				<p>Clone <% $entry->name %>'s prefs to:</p>
./enter/ratings/tiered_prefs.mhtml:				<input type="hidden" name="clone_id" value="<% $entry->id %>">
./enter/ratings/tiered_prefs.mhtml:				<input type="hidden" name="school_id" value="<% $entry->school->id %>">
./enter/ratings/tiered_prefs.mhtml:%						foreach my $other (sort {$a->name cmp $b->name} @others) { 
./enter/ratings/tiered_prefs.mhtml:%							next if $entry->id == $other->id;
./enter/ratings/tiered_prefs.mhtml:%							next if $entry->dropped;
./enter/ratings/tiered_prefs.mhtml:%							next if $entry->waitlist;
./enter/ratings/tiered_prefs.mhtml:							<option value="<% $other->id %>"><% $other->name %></option>
./enter/ratings/tiered_prefs.mhtml:		<& menu.mas, person => $person, school => $school, whoami => $whoami, category_id => $category->id, entry_id => $entry_id,  nodiv => 1, prefs => $prefs &>
./enter/ratings/school_ratings_save.mhtml:	my $now = DateTime->now();
./enter/ratings/school_ratings_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/school_ratings_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/ratings/school_ratings_save.mhtml:	my @all_judges = Tab::Judge->search( category => $category_id, active => 1 );
./enter/ratings/school_ratings_save.mhtml:    my @quals = Tab::Qual->search(  category => $category->id, type => "mpj" );
./enter/ratings/school_ratings_save.mhtml:	my @conflicts = $school->conflicts;
./enter/ratings/school_ratings_save.mhtml:	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./enter/ratings/school_ratings_save.mhtml:		next if $judge->school->id == $school_id;
./enter/ratings/school_ratings_save.mhtml:		next if $conflicts_by_id{$judge->id};
./enter/ratings/school_ratings_save.mhtml:		$qual_limit{$qual->id} = ceil($judge_jpool * $qual->max / 100);
./enter/ratings/school_ratings_save.mhtml:	Tab::School->sql_wipe_prefs->execute($school_id);
./enter/ratings/school_ratings_save.mhtml:		next unless $ARGS{$judge->id};
./enter/ratings/school_ratings_save.mhtml:		if ($judges_at_qual{$ARGS{$judge->id}} >= $qual_limit{$ARGS{$judge->id}}) { 
./enter/ratings/school_ratings_save.mhtml:			my $qual = Tab::Qual->retrieve($ARGS{$judge->id});
./enter/ratings/school_ratings_save.mhtml:			$err = "You have too many judges rated ".$qual->name."  ".$judge->first." ".$judge->last." has not been rated.<br>\n";
./enter/ratings/school_ratings_save.mhtml:		$judges_at_qual{$ARGS{$judge->id}}++;
./enter/ratings/school_ratings_save.mhtml:		Tab::Rating->create({
./enter/ratings/school_ratings_save.mhtml:			tournament => $category->tournament->id,
./enter/ratings/school_ratings_save.mhtml:			judge => $judge->id,
./enter/ratings/school_ratings_save.mhtml:			qual => $ARGS{$judge->id},
./enter/ratings/school_ratings_save.mhtml:	my $msg = "School ratings saved in ".$category->abbr;
./enter/ratings/school_ratings_save.mhtml:	$m->redirect("/user/tourn/entry/ratings/school_ratings.mhtml?school_id=$school_id&category_id=".$category->id."&err=".$err."&msg=".$msg);
./enter/ratings/menu.mas:	my $tourn = $school->tourn;
./enter/ratings/menu.mas:	my $tz = $tourn->tz;
./enter/ratings/menu.mas:	my $now = DateTime->now(time_zone => $tz);
./enter/ratings/menu.mas:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/menu.mas:		$ok++ if $person->site_admin;
./enter/ratings/menu.mas:		foreach my $admin ($school->chapter->admins) { 
./enter/ratings/menu.mas:			$ok++ if $admin->id == $person->id;
./enter/ratings/menu.mas:		if ($school->chapter->self_prefs) { 
./enter/ratings/menu.mas:				foreach my $student ($entry->students) { 
./enter/ratings/menu.mas:					$ok++ if $student->person->id == $person->id;
./enter/ratings/menu.mas:		$m->redirect("/user/home.mhtml?err=$err");
./enter/ratings/menu.mas:	foreach my $other_category (sort {$a->name cmp $b->name} $school->tourn->categories) {
./enter/ratings/menu.mas:		@{$category_entries{$other_category}} = $m->comp("/funclib/category_entries.mas", category => $other_category, school => $school, preffable => 1);
./enter/ratings/menu.mas:		$conflicts{$other_category} = $ocategory->setting("conflicts");
./enter/ratings/menu.mas:		$pref_style{$other_category} = $ocategory->setting("prefs");
./enter/ratings/menu.mas:		$school_strikes{$other_category}  = $ocategory->setting("school_strikes");
./enter/ratings/menu.mas:		$entry_strikes{$other_category}  = $ocategory->setting("entry_strikes");
./enter/ratings/menu.mas:	$category_id = $category->id if $category && not defined $category_id;
./enter/ratings/menu.mas:%		next unless $category->id == $category_id;
./enter/ratings/menu.mas:%			my ($uncovered, $overage) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category);
./enter/ratings/menu.mas:%			if ($uncovered > 0 && $category->setting("obligation_before_strikes")) {
./enter/ratings/menu.mas:					You are under your judge committment in <% $category->abbr %>.  
./enter/ratings/menu.mas:				<h4>Conflicts in <% $category->abbr %></h4>
./enter/ratings/menu.mas:							href="conflicts.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>#yo">
./enter/ratings/menu.mas:						School-wide Conflicts
./enter/ratings/menu.mas:%					next if $no_others && $entr->id != $entry_id;
./enter/ratings/menu.mas:					<a class="<% ($whoami eq "conflicts" && $entry_id == $entr->id) ? "dk" : "" %>blue block nowrap"
./enter/ratings/menu.mas:						href="conflicts.mhtml?school_id=<% $school->id %>&entry_id=<% $entr->id %>&category_id=<% $category->id %>#yo">
./enter/ratings/menu.mas:						Conflicts for <% $entr->name %>
./enter/ratings/menu.mas:				<h4>Strikes in <% $category->abbr %></h4>
./enter/ratings/menu.mas:					href="school_strikes.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>#yo">
./enter/ratings/menu.mas:					School Strikes in <% $category->abbr %>
./enter/ratings/menu.mas:				<h4>Strikes in <% $category->abbr %></h4>
./enter/ratings/menu.mas:%					next if $no_others && $entr->id != $entry_id;
./enter/ratings/menu.mas:    	    		<a class="<% ($whoami eq "entry_strikes" && $entry_id == $entr->id) ? "dk" : "" %>blue block nowrap"
./enter/ratings/menu.mas:    	               	href="entry_strikes.mhtml?school_id=<% $school->id %>&entry_id=<% $entr->id %>&category_id=<% $category->id %>&style=entry_ratings#yo">
./enter/ratings/menu.mas:    	           		Strikes for <% substr($entr->name,0,20) %> (<% $entr->event->abbr %>)
./enter/ratings/menu.mas:					<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/menu.mas:					<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/ratings/menu.mas:					<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/ratings/menu.mas:					Clone <% $entry->code %> strikes onto:
./enter/ratings/menu.mas:%							next if $no_others && $entr->id != $entry_id;
./enter/ratings/menu.mas:%							next if $entr->id == $entry_id;
./enter/ratings/menu.mas:							<option value="<% $entr->id %>"><% $entr->name %></option>
./enter/ratings/menu.mas:				<h4>Prefs in <% $category->abbr %></h4>
./enter/ratings/menu.mas:%						next if $no_others && $entry->id != $entry_id;
./enter/ratings/menu.mas:%						my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./enter/ratings/menu.mas:						<a class=" <% ($whoami eq "entry_ratings" && $entry_id == $entry->id) ? "dk" : "" %><% scalar @unrated > 0 ? "red" : "blue" %> full nowrap"
./enter/ratings/menu.mas:							href="ordinals_prefs.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>&entry_id=<% $entry->id %>#yo">
./enter/ratings/menu.mas:							Prelim Ordinals for <% $entry->name %> 
./enter/ratings/menu.mas:%						next if $no_others && $entry->id != $entry_id;
./enter/ratings/menu.mas:						<a class=" <% ($whoami eq "tiered_ratings" && $entry_id == $entry->id) ? "dk" : "" %>blue full nowrap"
./enter/ratings/menu.mas:							href="tiered_prefs.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>&entry_id=<% $entry->id %>#yo">
./enter/ratings/menu.mas:							Elim Prefs for <% $entry->name %> 
./enter/ratings/menu.mas:					<a class="blue block nowrap" href="<% $pref_style{$category} %>_prefs.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>#yo">
./enter/ratings/menu.mas:						<% $pref_name %> in <% $category->abbr %>
./enter/ratings/menu.mas:%						next if $no_others && $entry->id != $entry_id;
./enter/ratings/menu.mas:%						my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./enter/ratings/menu.mas:						<a class=" <% ($whoami eq "entry_ratings" && $entry_id == $entry->id) ? "dk" : "" %><% scalar @unrated > 0 ? "red" : "blue" %> block nowrap"
./enter/ratings/menu.mas:							href="<% $pref_style{$category} %>_prefs.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>&entry_id=<% $entry->id %>#yo">
./enter/ratings/menu.mas:							<% $pref_name %> for <% $entry->name %> 
./enter/ratings/menu.mas:				<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/ratings/menu.mas:					<option value="<% $ocategory->id %>" <% $ocategory->id == $category_id ? "selected" : ""%>><% $ocategory->name %></option>
./enter/create.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/create.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./enter/create.mhtml:	$m->comp("/user/chapter/auth.mas", chapter => $chapter, person => $person, session => $session) unless $return;
./enter/create.mhtml:	my ($existing_school) = $chapter->schools( tourn => $tourn->id);
./enter/create.mhtml:		$m->redirect("/user/enter/entry.mhtml?school_id=".$existing_school->id);
./enter/create.mhtml:	my $now = DateTime->now();
./enter/create.mhtml:	$m->abort if $tourn->reg_start > $now;
./enter/create.mhtml:	$m->abort if $tourn->reg_end < $now;
./enter/create.mhtml:	my ($school_code, $school_region) = $m->comp("/funclib/chapter_code.mas", tourn => $tourn, chapter => $chapter);
./enter/create.mhtml:	my $school = Tab::School->create({
./enter/create.mhtml:		tourn          => $tourn->id,
./enter/create.mhtml:		chapter        => $chapter->id,
./enter/create.mhtml:		name           => $chapter->name,
./enter/create.mhtml:	$school->setting("entered_on", "date", $now);
./enter/create.mhtml:	$school->setting("contact", $person->id);
./enter/create.mhtml:	$school->setting("contact_name", $person->first." ".$person->last);
./enter/create.mhtml:	$school->setting("contact_number", $person->phone);
./enter/create.mhtml:	$school->setting("contact_email", $person->email);
./enter/create.mhtml:	$m->comp('/funclib/chapter_conflicts.mas', school => $school);
./enter/create.mhtml:	if ($tourn->setting("track_reg_changes")) {
./enter/create.mhtml:		my $description = "School registered by ".$person->first." ".$person->last;
./enter/create.mhtml:		my $change = Tab::ChangeLog->create({
./enter/create.mhtml:			tourn       => $tourn->id,
./enter/create.mhtml:			school      => $school->id,
./enter/create.mhtml:			person      => $person->id
./enter/create.mhtml:	foreach my $fine ($tourn->tourn_fees) {
./enter/create.mhtml:		next unless $fine->amount > 0;
./enter/create.mhtml:		next if $fine->start && $fine->start > $now;
./enter/create.mhtml:		next if $fine->end && $fine->end < $now;
./enter/create.mhtml:		my $fee = Tab::SchoolFine->create({
./enter/create.mhtml:			school    => $school->id,
./enter/create.mhtml:			amount    => $fine->amount,
./enter/create.mhtml:			reason    => $fine->reason,
./enter/create.mhtml:			tourn     => $tourn->id,
./enter/create.mhtml:	$m->redirect("disclaimer.mhtml?school_id=".$school->id) if $tourn->setting("disclaimer") > 0;
./enter/create.mhtml:	$m->redirect("entry.mhtml?school_id=".$school->id);
./enter/onsite_confirm.mhtml:	my $tourn = $school->tourn;
./enter/onsite_confirm.mhtml:	my $tz = $tourn->tz;
./enter/onsite_confirm.mhtml:    my $now = DateTime->now(time_zone => $tz);
./enter/onsite_confirm.mhtml:	$adult++ if ($school->setting("contact_number") && $school->setting("contact_name") && $school->setting("contact_email"));
./enter/onsite_confirm.mhtml:	$adult++ unless $tourn->setting("require_adult_contact");  #not required so don't complain
./enter/onsite_confirm.mhtml:	my $payup++ if $tourn->setting("onsite_only_paid");
./enter/onsite_confirm.mhtml:		my ($fee, $feline_ref, $total_ref) = $m->comp("/funclib/school_fees.mas", school_id => $school->id, all => 1);
./enter/onsite_confirm.mhtml:		$deadbeat = $total_ref->{"entry_fees"} + $total_ref->{"concessions"} if $fee > 0;
./enter/onsite_confirm.mhtml:			my $symbol = $tourn->setting('currency');
./enter/onsite_confirm.mhtml:		$m->redirect("onsite.mhtml?school_id=<% $school->id %>&err=$err");
./enter/onsite_confirm.mhtml:		$m->redirect("onsite.mhtml?school_id=<% $school->id %>&err=$err");
./enter/onsite_confirm.mhtml:	$school->onsite(1);
./enter/onsite_confirm.mhtml:	$school->setting("registered_on", "date", $now);
./enter/onsite_confirm.mhtml:	$school->setting("registered_by", $person->id);
./enter/onsite_confirm.mhtml:	$school->update;
./enter/onsite_confirm.mhtml:	$m->redirect("onsite.mhtml?school_id=".$school->id."&msg=$msg");
./enter/hire_exchange.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/hire_exchange.mhtml:	my @judges = $m->comp("/funclib/exchange_judges.mas", category => $category);
./enter/hire_exchange.mhtml:	my @hires = $school->hires;
./enter/hire_exchange.mhtml:		<h2><% $school->tourn->name %></h2>
./enter/hire_exchange.mhtml:		<h2>Hired Judge Exchange: <% $category->abbr %></h2>
./enter/hire_exchange.mhtml:						<% $judge->first %>
./enter/hire_exchange.mhtml:						<% $judge->last %>
./enter/hire_exchange.mhtml:						<% $judge->school ? $judge->school->short_name : "Hired " %>
./enter/hire_exchange.mhtml:						<% $judge->setting('hire_offer') - $judge->hired %>
./enter/hire_exchange.mhtml:						<a class="white" href="mailto:<% $judge->person->email %>">
./enter/hire_exchange.mhtml:							<% $judge->person->email %>
./enter/hire_exchange.mhtml:						<input type="hidden" name="judge_id" value="<% $judge->id %>">
./enter/hire_exchange.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/hire_exchange.mhtml:						<input type="number" name="rounds" size="5" min="0" max="<% $judge->setting('hire_offer') - $judge->hired %>">
./enter/hire_exchange.mhtml:			<a class="yellow block" href="judges.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>">
./enter/hire_exchange.mhtml:				Return to <% $category->abbr %> judges
./enter/hire_exchange.mhtml:%					next unless $hire->judge;
./enter/hire_exchange.mhtml:					<a class="blue block" href="hire_cancel.mhtml?school_id=<% $school->id %>&hire_id=<% $hire->id %>">
./enter/hire_exchange.mhtml:							<% $hire->judge ? $hire->judge->first." ".$hire->judge->last : $hire->id %>
./enter/hire_exchange.mhtml:							<% $hire->rounds %> Rds
./enter/disclaimer.mhtml:		<h2><% $school->tourn->name %></h2>
./enter/disclaimer.mhtml:			<% $school->tourn->setting("disclaimer") %>
./enter/disclaimer.mhtml:			<span class="biggerspan centeralign" style="margin-top: 10px; margin-bottom: 10px; width: 200px; display: inline-block;">
./enter/disclaimer.mhtml:				<a class="dkblue block" style="text-decoration: none;" href="entry.mhtml?school_id=<% $school->id %>">
./enter/entry_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/entry_print.mhtml:	my $tourn = $school->tourn;
./enter/entry_print.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./enter/entry_print.mhtml:	my $filename = "registration-".$school_id."-".$session->id;
./enter/entry_print.mhtml:	`rm -f $filepath.*`;
./enter/entry_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1 );
./enter/entry_print.mhtml:	my $now = DateTime->now;	
./enter/entry_print.mhtml:	$now->set_time_zone($tourn->tz);
./enter/entry_print.mhtml:	print TEXOUT "{\\bf Circuits:} & ".&Tab::texify($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn, print_abbr => 1))." & ";
./enter/entry_print.mhtml:	print TEXOUT "{\\bf Tournament:} & ".&Tab::texify(substr($tourn->name,0,30))." \\\\ \n ";
./enter/entry_print.mhtml:	print TEXOUT &Tab::texify($school->code) if $tourn->setting("school_code");
./enter/entry_print.mhtml:	print TEXOUT " ". &Tab::texify($school->name);
./enter/entry_print.mhtml:	print TEXOUT " (".&Tab::texify($school->chapter->country." ".$school->chapter->state).")";
./enter/entry_print.mhtml:	$m->comp("/register/school/print/registration.mas", school_id => $school->id, filename => $filename, hide_codes => $hide_codes);
./enter/entry_print.mhtml:    $m->comp("/register/school/print/housing.mas", school_id => $school->id, filename => $filename) if $tourn->setting("housing");
./enter/entry_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./enter/housing_revoke.mhtml:	my $housing = Tab::Housing->retrieve($housing_id);
./enter/housing_revoke.mhtml:	$m->redirect("housing.mhtml?school_id=$school_id&err=$err") unless $housing;
./enter/housing_revoke.mhtml:	my $tourn = $housing->tourn;
./enter/housing_revoke.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_revoke.mhtml:	unless ($person->site_admin || Tab::Permission->search( person => $person->id, tag => "chapter", chapter => $school->chapter->id )) { 
./enter/housing_revoke.mhtml:		$m->print("You do not have admin rights to that school.");
./enter/housing_revoke.mhtml:		$m->abort;
./enter/housing_revoke.mhtml:	my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $housing->night);
./enter/housing_revoke.mhtml:	my $num_slots = $slots[0]->slots;
./enter/housing_revoke.mhtml:	my @requests = Tab::Housing->search( tourn => $tourn->id, night => $housing->night);
./enter/housing_revoke.mhtml:		if ($tourn->setting("track_reg_changes")) {
./enter/housing_revoke.mhtml:			my $old = $housing->student if $housing->student && $housing->student->id;
./enter/housing_revoke.mhtml:			$old = $housing->judge if $housing->judge && $housing->judge->id;
./enter/housing_revoke.mhtml:			my $description = $person->first." ".$person->last." Cancelled housing request for ".$old->first." ".$old->last;
./enter/housing_revoke.mhtml:			my $change = Tab::ChangeLog->create({
./enter/housing_revoke.mhtml:       			tourn       => $tourn->id,
./enter/housing_revoke.mhtml:		$housing->delete();
./enter/housing_revoke.mhtml:		$m->redirect("housing.mhtml?school_id=$school_id&msg=$msg");
./enter/housing_revoke.mhtml:			slot and transfer it to another student, <a style="text-decoration:
./enter/tba_assign.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/tba_assign.mhtml:	$m->abort unless $entry;
./enter/tba_assign.mhtml:	my $event = $entry->event;
./enter/tba_assign.mhtml:	my $tourn = $event->tourn;
./enter/tba_assign.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/tba_assign.mhtml:	my $max = $event->setting("max_entry");
./enter/tba_assign.mhtml:	my $min = $event->setting("min_entry");
./enter/tba_assign.mhtml:	my $code_style = $event->setting("code_style");
./enter/tba_assign.mhtml:		<h4>Choose competitor(s) for TBA Slot in <% $event->abbr %></h4>
./enter/tba_assign.mhtml:		<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/tba_assign.mhtml:		<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/tba_assign.mhtml:					<select name="student_<% $count++ %>" class="fixed" data-placeholder="Select competitor...">
./enter/tba_assign.mhtml:%						foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $school )) {
./enter/tba_assign.mhtml:							<option value="<% $student->id %>"> <% $student->first." ".$student->last %> </option>
./enter/tba_assign.mhtml:			<h4><% $event->abbr %></h4>
./enter/tba_assign.mhtml:				<% $event->name %>
./enter/tba_assign.mhtml:%			if ($entry->waitlist) { 
./enter/tba_assign.mhtml:			<a class="blue martop full" href="students.mhtml?school_id=<% $school_id %>&event_id=<% $event->id %>">
./enter/team_members.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/team_members.mhtml:	my @clean_students = $m->comp("/funclib/students_evententer.mas", 
./enter/team_members.mhtml:			event => $entry->event, 
./enter/team_members.mhtml:			tourn => $entry->tournament, 
./enter/team_members.mhtml:			chapter => $entry->school->chapter);
./enter/team_members.mhtml:	@clean_students = sort {ucfirst($a->last) cmp ucfirst($b->last)} @clean_students;
./enter/team_members.mhtml:		<h2>Team members in <% $entry->name %></h2>
./enter/team_members.mhtml:%			foreach my $member ($entry->members) { 
./enter/team_members.mhtml:						<% $member->first." ".$member->last %>
./enter/team_members.mhtml:						<a class="white" href="team_members_rm.mhtml?entry_id=<% $entry->id %>&school_id=<% $entry->school->id %>&student_id=<% $member->id %>">
./enter/team_members.mhtml:		<a class="blue block" href="students.mhtml?event_id=<% $entry->event->id %>&school_id=<% $entry->school->id %>">
./enter/team_members.mhtml:			Return to <% $entry->event->name %> entry
./enter/team_members.mhtml:			<input type="hidden" name="school_id" value="<% $entry->school->id %>">
./enter/team_members.mhtml:				<option value="<% $student->id %>">
./enter/team_members.mhtml:					<% $student->first." ".$student->last %>
./enter/school_unfollow.mhtml:	my $follower = Tab::Follower->retrieve($follower_id);
./enter/school_unfollow.mhtml:		my $school_id = $follower->school->id;
./enter/school_unfollow.mhtml:		$follower->delete;
./enter/school_unfollow.mhtml:		$m->redirect("entry.mhtml?school_id=$school_id&msg=$msg");
./enter/school_unfollow.mhtml:	$m->abort;
./enter/school_follow.mhtml:	my $person = Tab::Person->search( email => $email )->first if $email;
./enter/school_follow.mhtml:		my $already = Tab::Follower->search( type => "school", school => $school_id, follower => $person->id )->first;
./enter/school_follow.mhtml:			Tab::Follower->create({
./enter/school_follow.mhtml:				follower => $person->id,
./enter/school_follow.mhtml:		$msg = $person->first." ".$person->last." now gets all pairings and updates for this school";
./enter/school_follow.mhtml:		$msg = "No account was found for $email.  The email in question must have a Tabroom user account to get all-school emails";
./enter/school_follow.mhtml:	$m->redirect("entry.mhtml?school_id=".$school_id."&msg=$msg");
./enter/rounds_save.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./enter/rounds_save.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/rounds_save.mhtml:	$m->abort unless $school;
./enter/rounds_save.mhtml:	$m->abort unless $category;
./enter/rounds_save.mhtml:	my $max_rounds = $category->setting("max_rounds");
./enter/rounds_save.mhtml:	foreach my $judge (Tab::Judge->search( category => $category->id, school => $school->id )) { 
./enter/rounds_save.mhtml:		my $rounds = $ARGS{$judge->id};
./enter/rounds_save.mhtml:			$err .= "Maximum number of rounds a single judge can cover is $max_rounds.  ".$judge->last."'s obligation reduced";
./enter/rounds_save.mhtml:		$judge->obligation($rounds);
./enter/rounds_save.mhtml:		$judge->update;
./enter/rounds_save.mhtml:	$m->redirect("judges.mhtml?category_id=".$category->id."&school_id=$school_id&err=$err&msg=$msg");
./enter/export_csv.mhtml:	$tourn = $school->tourn unless $tourn;
./enter/export_csv.mhtml:	my $tz = $tourn->tz;
./enter/export_csv.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./enter/export_csv.mhtml:	my $filename = "Registration-".$tourn->name."-".Tab::csvdt($now);
./enter/export_csv.mhtml:	my $garbage = `rm -f $filepath.*`;
./enter/export_csv.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./enter/export_csv.mhtml:	my @entries = sort {$a->name cmp $b->name} $school->entries;
./enter/export_csv.mhtml:	@entries = sort {$a->event->abbr cmp $b->event->abbr} @entries;
./enter/export_csv.mhtml:		print CSVOUT '"'.$entry->code.'",' unless $hide_codes;
./enter/export_csv.mhtml:		print CSVOUT '"'.$entry->event->name.'",';
./enter/export_csv.mhtml:		print CSVOUT '"'.$entry->name.'",';
./enter/export_csv.mhtml:		print CSVOUT "Waitlisted " if $entry->waitlist;
./enter/export_csv.mhtml:		print CSVOUT "Dropped " if $entry->dropped;
./enter/export_csv.mhtml:		print CSVOUT "ADA Access Requested " if $entry->ada;
./enter/export_csv.mhtml:		print CSVOUT '"'.Tab::csvdt($entry->created_at).'",';
./enter/export_csv.mhtml:		my $registered_by = Tab::Person->retrieve($entry->setting("registered_by")) if $entry->setting('registered_by');
./enter/export_csv.mhtml:		print CSVOUT $registered_by->email if $registered_by;
./enter/export_csv.mhtml:		print CSVOUT '"'.$entry->setting("title").'",';
./enter/export_csv.mhtml:		foreach my $student ($entry->students) { 
./enter/export_csv.mhtml:			print CSVOUT $student->first.'","'.$student->last.'","';
./enter/export_csv.mhtml:	my @judges = sort {$a->last cmp $b->last} $school->judges;
./enter/export_csv.mhtml:	@judges = sort {$a->category->abbr cmp $b->category->abbr} @judges;
./enter/export_csv.mhtml:			print CSVOUT $judge->code unless $judge->category->setting("no_codes");
./enter/export_csv.mhtml:		print CSVOUT '"'.$judge->category->name.'",';
./enter/export_csv.mhtml:		print CSVOUT '"'.$judge->first.'",';
./enter/export_csv.mhtml:		print CSVOUT '"'.$judge->last.'",';
./enter/export_csv.mhtml:		print CSVOUT "Inactive " unless $judge->active;
./enter/export_csv.mhtml:		print CSVOUT " Special assignment: ".$judge->setting('special_job')." " if $judge->setting('special_job');
./enter/export_csv.mhtml:		print CSVOUT "ADA Access Requested " if $judge->ada;
./enter/export_csv.mhtml:		print CSVOUT '"'.Tab::csvdt($judge->created_at).'",';
./enter/export_csv.mhtml:		print CSVOUT '"'.$judge->obligation.'",';
./enter/export_csv.mhtml:		print CSVOUT '"'.$judge->hired.'",';
./enter/export_csv.mhtml:		print CSVOUT $judge->person->email if $judge->person;
./enter/export_csv.mhtml:		foreach my $jpool ($judge->jpools) { 
./enter/export_csv.mhtml:			print CSVOUT $jpool->name." ";
./enter/export_csv.mhtml:		print CSVOUT '"'.$judge->setting("notes");
./enter/export_csv.mhtml:	$m->redirect("$Tab::url_prefix/tmp/$filename.csv");
./enter/hire_confirm.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/hire_confirm.mhtml:	my $hire_offer = $judge->setting("hire_offer");
./enter/hire_confirm.mhtml:	$m->redirect("judges.mhtml?school_id=".$school->id."&err=That judge doesn't belong to your tournament") if $judge->category->tourn->id != $school->tourn->id;
./enter/hire_confirm.mhtml:	$m->redirect("judges.mhtml?school_id=".$school->id."&err=That judge category is not using the hiring exchange") unless $judge->category->setting("exchange");
./enter/hire_confirm.mhtml:	$m->redirect("judges.mhtml?school_id=".$school->id."&err=That judge has no hired rounds left".$hire_offer." ".$judge->hired) unless $hire_offer > $judge->hired || not defined $judge->hired;
./enter/hire_confirm.mhtml:	my $max = $hire_offer - $judge->hired;
./enter/hire_confirm.mhtml:	my $hired = $judge->hired + $rounds;
./enter/hire_confirm.mhtml:	$judge->hired($hired);
./enter/hire_confirm.mhtml:	$judge->update;
./enter/hire_confirm.mhtml:	my $now = DateTime->now;
./enter/hire_confirm.mhtml:	Tab::JudgeHire->create({
./enter/hire_confirm.mhtml:		tourn           => $school->tourn,
./enter/hire_confirm.mhtml:		judge           => $judge->id,
./enter/hire_confirm.mhtml:		category     => $judge->category->id,
./enter/hire_confirm.mhtml:		school          => $school->id,
./enter/hire_confirm.mhtml:	my $recipient = $judge->person;
./enter/hire_confirm.mhtml:	my $school_name = $school->name;
./enter/hire_confirm.mhtml:	my $tourn_name = $school->tourn->name;
./enter/hire_confirm.mhtml:	$m->comp( "/funclib/send_email.mas", from => $person, to => $recipient, subject => $subject, body => $body );
./enter/hire_confirm.mhtml:	$m->redirect("hire_exchange.mhtml?category_id=".$judge->category->id."&school_id=".$school->id."&err=$err&msg=Judge hire confirmed.  Judge was notified by email.");
./enter/hire_cancel.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/hire_cancel.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./enter/hire_cancel.mhtml:	$m->abort unless $hire;
./enter/hire_cancel.mhtml:	$m->abort unless $school;
./enter/hire_cancel.mhtml:	my $judge = $hire->judge;
./enter/hire_cancel.mhtml:		$m->redirect("/user/home.mhtml?err=Either something odd has occurred, or you were doing something you should not have.  Contact us if it is the former");
./enter/hire_cancel.mhtml:	unless ($person->site_admin || Tab::Permission->search( tag => 'chapter', person => $person->id, chapter => $school->chapter->id)) { 
./enter/hire_cancel.mhtml:		$m->redirect("/user/home.mhtml?err=You are not authorized to edit that judge hire");
./enter/hire_cancel.mhtml:	unless ($school->id == $hire->school->id) { 
./enter/hire_cancel.mhtml:		$m->redirect("/user/home.mhtml?err=You are not authorized to edit that school");
./enter/hire_cancel.mhtml:	my $hired = $judge->hired - $hire->rounds;
./enter/hire_cancel.mhtml:	$judge->hired($hired);
./enter/hire_cancel.mhtml:	$judge->update;
./enter/hire_cancel.mhtml:	my $description = "Account ".$person->email." deleted a judge exchange hire arrangement with ".$judge->first." ".$judge->last;
./enter/hire_cancel.mhtml:	my $hire_school = $hire->school->id if $hire->school;
./enter/hire_cancel.mhtml:	Tab::ChangeLog->create({
./enter/hire_cancel.mhtml:		tourn       => $judge->category->tourn->id,
./enter/hire_cancel.mhtml:		judge       => $judge->id,
./enter/hire_cancel.mhtml:		person      => $person->id
./enter/hire_cancel.mhtml:	my $subject = $person->first." ".$person->last." rescinded your hire";
./enter/hire_cancel.mhtml:	".$person->first." ".$person->last."\n\n
./enter/hire_cancel.mhtml:	".$judge->category->tourn->name."\n\n
./enter/hire_cancel.mhtml:	for ".$hire->school->short_name.".\n\n
./enter/hire_cancel.mhtml:	$m->comp( "/funclib/send_email.mas", from => $person, to => $judge->person, subject => $subject, body => $body );
./enter/hire_cancel.mhtml:	$hire->delete;
./enter/hire_cancel.mhtml:	$m->redirect("judges.mhtml?category_id=".$judge->category->id."&school_id=".$school->id."&msg=Judge hire cancelled.  Judge was notified by email.") if $back eq "roster";
./enter/hire_cancel.mhtml:	$m->redirect("hire_exchange.mhtml?category_id=".$judge->category->id."&school_id=".$school->id."&msg=Judge hire cancelled.  Judge was notified by email.");
./enter/autohandler:	$m->call_next if $r->uri eq "/user/enter/create.mhtml";
./enter/autohandler:	my $school = Tab::School->retrieve($school_id) if $school_id;
./enter/autohandler:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./enter/autohandler:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./enter/autohandler:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/autohandler:	$school = Tab::School->search(chapter => $chapter, tourn => $tourn_id )->first unless $school;
./enter/autohandler:	$m->redirect("/user/home.mhtml?err=School $school_id does not exist yet.  Please register") unless $school;
./enter/autohandler:	$chapter = $school->chapter if $school->chapter;
./enter/autohandler:	my @permissions = Tab::Permission->search(chapter => $school->chapter->id, person => $person->id );
./enter/autohandler:	my %perms = map {$_->tag => $_} @permissions;
./enter/autohandler:	if ($person->site_admin || $perms{"chapter"}) { 
./enter/autohandler:		$m->call_next( school => $school );
./enter/autohandler:		$m->call_next( school => $school, prefs => 1 );
./enter/autohandler:	} elsif ($entry && $school && $school->chapter->self_prefs) { 
./enter/autohandler:		unless ( $r->uri =~ /\/ratings\// ) { 
./enter/autohandler:			$m->print("You can only access ratings & your pref sheet, not other pages");
./enter/autohandler:			$m->abort();
./enter/autohandler:		foreach my $student ($entry->students) { 
./enter/autohandler:			if ($student->person && $student->person->id == $person->id) { 
./enter/autohandler:				$m->call_next( school => $school, prefs => 2);
./enter/autohandler:		$m->redirect("/user/home.mhtml?err=You are not authorized to edit that pref sheet") unless $yay;
./enter/autohandler:		$m->redirect("/user/home.mhtml?err=You are not authorized to edit that school");
./enter/tba_assign_save.mhtml:	my $now = DateTime->now;
./enter/tba_assign_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/tba_assign_save.mhtml:	my $school = $entry->school;
./enter/tba_assign_save.mhtml:	my $event = $entry->event;
./enter/tba_assign_save.mhtml:	my $tourn = $event->tourn;
./enter/tba_assign_save.mhtml:	my $min = $event->setting("min_entry");
./enter/tba_assign_save.mhtml:	my $max = $event->setting("max_entry");
./enter/tba_assign_save.mhtml:	my $codes = $event->setting("code_style");
./enter/tba_assign_save.mhtml:		my $student = Tab::Student->retrieve($ARGS{"student_".$step}) if $ARGS{"student_".$step};
./enter/tba_assign_save.mhtml:		next if $used_student{$student->id};
./enter/tba_assign_save.mhtml:		$used_student{$student->id}++;
./enter/tba_assign_save.mhtml:		my $already = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
./enter/tba_assign_save.mhtml:		eval{Tab::EntryStudent->create({  entry => $entry->id, student => $student->id });};
./enter/tba_assign_save.mhtml:	if ($event->setting("ask_for_titles")) {
./enter/tba_assign_save.mhtml:		$err = "Enter a piece title (and/or ISBN number)" unless $entry->setting("title");
./enter/tba_assign_save.mhtml:	if ($event->setting('ask_quals') ) {
./enter/tba_assign_save.mhtml:	my $name = $students[0]->first." ".$students[0]->last if scalar @students == 1;
./enter/tba_assign_save.mhtml:	$name = $students[0]->last." & ".$students[1]->last if scalar @students == 2;
./enter/tba_assign_save.mhtml:		$name = $school->short_name." ";
./enter/tba_assign_save.mhtml:			$name.= ucfirst substr($student->last, 0, 1);
./enter/tba_assign_save.mhtml:	$entry->tba("");
./enter/tba_assign_save.mhtml:	$entry->update;
./enter/tba_assign_save.mhtml:	$entry->name($name);
./enter/tba_assign_save.mhtml:	my $code = $m->comp("/funclib/entry_code.mas", entry => $entry);
./enter/tba_assign_save.mhtml:	$entry->code($code);
./enter/tba_assign_save.mhtml:	$entry->update;
./enter/tba_assign_save.mhtml:	my $msg = "Entry ".$entry->name." assigned to a TBA slot.  Code is $code";
./enter/tba_assign_save.mhtml:	$m->redirect("details.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&err=$err") if $err;
./enter/tba_assign_save.mhtml:	$m->redirect("students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");
./enter/sex_change.mhtml:		$m->redirect("housing.mhtml?histu=$student_id&err=$err&school_id=$school_id");
./enter/sex_change.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/sex_change.mhtml:	$student->gender($gender);
./enter/sex_change.mhtml:	$student->update;
./enter/sex_change.mhtml:	$m->redirect("housing.mhtml?school_id=$school_id");
./enter/details.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details.mhtml:	$m->abort unless $entry;
./enter/details.mhtml:	my $event = $entry->event;
./enter/details.mhtml:	my $tourn = $event->tourn;
./enter/details.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/details.mhtml:	my $max = $event->setting("max_entry");
./enter/details.mhtml:	my $min = $event->setting("min_entry");
./enter/details.mhtml:	my $code_style = $event->setting("code_style");
./enter/details.mhtml:		<h2><% $tourn->name %></h2>
./enter/details.mhtml:		<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/details.mhtml:		<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/details.mhtml:%			my @students = $entry->students;
./enter/details.mhtml:%				my $hybrid = Tab::School->search( chapter => $student->chapter->id, tourn => $tourn->id )->first
./enter/details.mhtml:%					if $student && $student->chapter &&  $student->chapter->id != $school->chapter->id;
./enter/details.mhtml:						<% $hybrid ? "(".$hybrid->name.")" : "" %>
./enter/details.mhtml:								<option value="<% $student->id %>">
./enter/details.mhtml:									<% $student->first." ".$student->last %>
./enter/details.mhtml:%								foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $hybrid )) {
./enter/details.mhtml:									<option value="<% $student->id %>">
./enter/details.mhtml:										<% $student->first." ".$student->last %>
./enter/details.mhtml:%								foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $school )) {
./enter/details.mhtml:									<option value="<% $student->id %>">
./enter/details.mhtml:										<% $student->first." ".$student->last %>
./enter/details.mhtml:						<input type="text" size="30" name="code" value="<% $entry->code %>">
./enter/details.mhtml:							<% $entry->code %>
./enter/details.mhtml:%			if ($event->setting("apda")) { 
./enter/details.mhtml:							<option value="half" <% $entry && $entry->setting("registered_seed") eq "half" ? "selected" : "" %>>Half</option>
./enter/details.mhtml:							<option value="full" <% $entry && $entry->setting("registered_seed") eq "full" ? "selected" : "" %>>Full</option>
./enter/details.mhtml:							<option value="free" <% $entry && $entry->setting("registered_seed") eq "free" ? "selected" : "" %>>Free</option>
./enter/details.mhtml:						<input type="checkbox" class="largecheck" id="ada" name="ada" value="1" <% $entry->ada ? "checked" : "" %>>
./enter/details.mhtml:%			if ($event->setting("ask_for_titles")) {
./enter/details.mhtml:						<input type="text" name="title" value="<% $entry->setting("title") %>" size="40">
./enter/details.mhtml:%		my $quals = $event->setting('ask_quals'); 
./enter/details.mhtml:%		$quals = 15 if $event->setting("more_quals");
./enter/details.mhtml:%			if ($event->setting("at_larges")) { 
./enter/details.mhtml:							At-large applicant? 
./enter/details.mhtml:							<input id="at_large" type="checkbox" class="largecheck" name="atlarge" value="1" <% $entry && $entry->setting("atlarge") ? 'checked="checked"' : "" %>>
./enter/details.mhtml:%			my @qualifiers = $entry->qualifiers;
./enter/details.mhtml:						<input type="text" name="qual_<% $tick %>" value="<% $qual ? $qual->name : "" %>" size="25">
./enter/details.mhtml:						<input type="text" name="qualpts_<% $tick %>" value="<% $qual ? $qual->result : "" %>" size="25">
./enter/details.mhtml:				<% $entry->name %>
./enter/details.mhtml:				<% $entry->code %>
./enter/details.mhtml:				<% $event->name %>
./enter/details.mhtml:%			if ($entry->waitlist) { 
./enter/details.mhtml:			<h4><% $event->abbr %></h4>
./enter/details.mhtml:			<a class="blue block" href="students.mhtml?school_id=<% $school_id %>&event_id=<% $event->id %>">
./enter/details.mhtml:				Return to <% $event->abbr %> Entry
./enter/onsite.mhtml:	my $tourn = $school->tourn;
./enter/onsite.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./enter/onsite.mhtml:	my $tz = $tourn->tz;
./enter/onsite.mhtml:    my $now = DateTime->now(time_zone => $tz);
./enter/onsite.mhtml:	$adult++ if ($school->setting("contact_number") && $school->setting("contact_name") && $school->setting("contact_email"));
./enter/onsite.mhtml:	$adult++ unless $tourn->setting("require_adult_contact");  #not required so don't complain
./enter/onsite.mhtml:	my $payup++ if $tourn->setting("onsite_only_paid");
./enter/onsite.mhtml:		($fee, $feline_ref, $total_ref) = $m->comp("/funclib/school_fees.mas", school_id => $school->id, all => 1);
./enter/onsite.mhtml:			my $symbol = $tourn->setting('currency');
./enter/onsite.mhtml:			<% $tourn->name %>
./enter/onsite.mhtml:			<h5 class="centeralign"> Please go to in-person registration or contact the tournament
./enter/onsite.mhtml:%			if ($school->onsite) { 
./enter/onsite.mhtml:%				if ($school->setting("registered_by")) { 
./enter/onsite.mhtml:%					my $regged = Tab::Person->retrieve($school->setting("registered_by"));
./enter/onsite.mhtml:							<% $regged->first." ".$regged->last %> (<% $regged->email %>)
./enter/onsite.mhtml:%				my $registered_on = $school->setting("registered_on");
./enter/onsite.mhtml:							<% Tab::nicedt($registered_on->set_time_zone($tz)) %>
./enter/onsite.mhtml:% 		      	    if ($tourn->setting("registration_packet")) { 
./enter/onsite.mhtml:						<a class="dkblue centeralign block" href="<% $Tab::s3_url %>/<% $tourn->id %>/<% $tourn->setting("registration_packet") %>">
./enter/onsite.mhtml:				<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/onsite.mhtml:				<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./enter/onsite.mhtml:						<input size="25" type="text" name="contact_name" value="<% $school->setting("contact_name") %>">
./enter/onsite.mhtml:						<input size="25" type="tel" name="contact_number" value="<% $school->setting("contact_number") %>">
./enter/onsite.mhtml:						<input size="25" type="email" name="contact_email" value="<% $school->setting("contact_email") %>">
./enter/onsite.mhtml:				my $drop_deadline = $tourn->setting("drop_deadline");
./enter/onsite.mhtml:				$drop_deadline = $tourn->reg_end unless $drop_deadline;
./enter/onsite.mhtml:				$drop_deadline->set_time_zone($tz);
./enter/onsite.mhtml:				my $judge_deadline = $tourn->setting("judge_deadline");
./enter/onsite.mhtml:				$judge_deadline = $tourn->reg_end unless $judge_deadline;
./enter/onsite.mhtml:				$judge_deadline->set_time_zone($tz);
./enter/onsite.mhtml:				my @already_entered = Tab::Entry->search( 
./enter/onsite.mhtml:					school => $school->id, 
./enter/onsite.mhtml:				my @hybrides = $m->comp("/funclib/school_hybrids.mas", school => $school);
./enter/onsite.mhtml:				@already_entered = grep { ! $seen{$_->id} ++ } @already_entered;
./enter/onsite.mhtml:%								foreach my $student ($already->students) { 
./enter/onsite.mhtml:%									next if $student->chapter->id == $school->chapter->id;
./enter/onsite.mhtml:%									$other = Tab::School->search( chapter => $student->chapter->id, tourn => $tourn->id)->first;
./enter/onsite.mhtml:									<% $already->dropped ? "DROP" : $hide_codes ? "" : $already->code %>
./enter/onsite.mhtml:								<td class="leftalign <% $already->dropped ? "strike" : "" %> nowrap"> 
./enter/onsite.mhtml:									<% $already->name %>
./enter/onsite.mhtml:									<% $already->event->abbr %>
./enter/onsite.mhtml:%									if ($already->event->setting("apda")) { 
./enter/onsite.mhtml:											<a class="white padless" href="details.mhtml?entry_id=<% $already->id %>&school_id=<% $school->id %>">
./enter/onsite.mhtml:												<% $already->seed ? ucfirst($already->seed) : "No"  %> seed
./enter/onsite.mhtml:										<% $other->short_name %> Hybrid		
./enter/onsite.mhtml:%									if ($already->ada) { 
./enter/onsite.mhtml:%									unless ($already->dropped) {
./enter/onsite.mhtml:											<a class="dkblue block" href="details.mhtml?school_id=<% $school->id %>&entry_id=<% $already->id %>&from=onsite">
./enter/onsite.mhtml:											<a class="dkred block" <& "/funclib/confirm.mas", warn => $warn &> href="entry_drop.mhtml?school_id=<% $school->id %>&entry_id=<% $already->id %>&from=onsite">
./enter/onsite.mhtml:%					foreach my $judge ($school->judges) { 
./enter/onsite.mhtml:								<% $judge->code %>
./enter/onsite.mhtml:								<% $judge->first." ".$judge->last %>
./enter/onsite.mhtml:								<% $judge->category->abbr %> 
./enter/onsite.mhtml:%		 			          	foreach my $strike (sort {$a->type cmp $b->type} $judge->strikes) { 
./enter/onsite.mhtml:%									next if $strike->type ne "time";
./enter/onsite.mhtml:									<% $strike->name ? $strike->name : ""%>
./enter/onsite.mhtml:								<% $judge->setting('notes') %>
./enter/onsite.mhtml:								<% $judge->setting('special_job') %>
./enter/onsite.mhtml:										<a class="dkred block" <& "/funclib/confirm.mas", warn => $warn &> href="judge_drop.mhtml?school_id=<% $school->id %>&judge_id=<% $judge->id %>&from=onsite">
./enter/onsite.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judge_details.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_details.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_details.mhtml:		$m->print("I have no judge or school.  Hit back and try again");
./enter/judge_details.mhtml:		$m->abort();
./enter/judge_details.mhtml:	my $category = $judge->category;
./enter/judge_details.mhtml:	my $tourn = $category->tourn;
./enter/judge_details.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./enter/judge_details.mhtml:		<input type="hidden" name="judge_id" value="<% $judge->id %>">
./enter/judge_details.mhtml:		<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judge_details.mhtml:			<span class="twofifth <% $judge->setting('notes') ? "redtext" : "" %>">
./enter/judge_details.mhtml:				<input type="text" name="notes" size="48" value="<% $judge ? $judge->setting("notes") : "" %>">
./enter/judge_details.mhtml:%			if ($category->setting("judge_quals")) { 
./enter/judge_details.mhtml:						<textarea name="qual_history" rows="5" cols="60"><% $judge ? $judge->setting("qual_history") : "" %></textarea>
./enter/judge_details.mhtml:%			if ($category->setting("coach_ratings")) { 
./enter/judge_details.mhtml:%				if ($category->rating_subsets) { 
./enter/judge_details.mhtml:%					foreach my $subset ($category->rating_subsets) { 
./enter/judge_details.mhtml:%						my $rating = $judge->ratings( rating_subset => $subset->id )->first;
./enter/judge_details.mhtml:%						my $tier = $rating->rating_tier if $rating;
./enter/judge_details.mhtml:									<% $subset->name %> 
./enter/judge_details.mhtml:%									foreach my $event ($subset->events) { 
./enter/judge_details.mhtml:										<% $event->name %>
./enter/judge_details.mhtml:%						foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "coach")) {
./enter/judge_details.mhtml:							<label for="<% $subset->id."-".$tier->id %>">
./enter/judge_details.mhtml:										<input type="radio" name="<% $subset %>" value="<% $tier->id %>" id="<% $subset->id."-".$tier->id %>" 
./enter/judge_details.mhtml:											<% ($rating && $rating->rating_tier && $rating->rating_tier->id == $tier->id) ? "checked" : "" %>>
./enter/judge_details.mhtml:										<% $tier->name %>
./enter/judge_details.mhtml:										<% $tier->description %>
./enter/judge_details.mhtml:%					my $rating = $judge->ratings->first;
./enter/judge_details.mhtml:%					my $judge_tier = $rating->rating_tier if $rating;
./enter/judge_details.mhtml:%					foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "coach")) {
./enter/judge_details.mhtml:						<label for="<% $tier->id %>">
./enter/judge_details.mhtml:									<input type="radio" name="rating_id" value="<% $tier->id %>" id="<% $tier->id %>"
./enter/judge_details.mhtml:										<% ($judge_tier && $tier->id == $judge_tier->id) ? "checked" : "" %>>
./enter/judge_details.mhtml:									<% $tier->name %>
./enter/judge_details.mhtml:									<% $tier->description %>
./enter/judge_details.mhtml:%		if ($category->setting("ask_alts")) { 
./enter/judge_details.mhtml:%						foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) { 
./enter/judge_details.mhtml:%						   next if $category->id == $ocategory->id;
./enter/judge_details.mhtml:%						   next if $category->setting("tab_room");
./enter/judge_details.mhtml:							<option value="<% $ocategory->id %>" <% ($ocategory->id eq $judge->alt_category->id) ? 'selected' : '' %> >
./enter/judge_details.mhtml:								<% $ocategory->name %>
./enter/judge_details.mhtml:%		if ($category->setting("diversity_selfie")) { 
./enter/judge_details.mhtml:				<% $category->setting("diversity_notice") %>
./enter/judge_details.mhtml:						Diversity-enhancing judge
./enter/judge_details.mhtml:						<input type="checkbox" id="diversity" name="diverse" value="1" <% $judge->setting("diverse") ? 'checked="checked"' : "" %>>
./enter/judge_details.mhtml:					<input type="number" name="rounds" size="5" min="1" max="<% $category->setting("max_rounds") %>" value="<% $judge->obligation %>">
./enter/judge_details.mhtml:						<input type="checkbox" id="ada" name="ada" value="1" <% $judge->ada ? 'checked="checked"' : "" %>> 
./enter/judge_details.mhtml:%			if ($category->setting("neutrals")) { 
./enter/judge_details.mhtml:							<input type="checkbox" id="neutral" name="neutral" value="1" <% $judge->setting("neutral") ? "checked" : "" %>> 
./enter/judge_details.mhtml:%			if ($category->setting("first_year_outs")) { 
./enter/judge_details.mhtml:							Judge is a first-year graduate <% $category->setting("fyo_free_strikes") ? "(automatic free strike)" : "" %>
./enter/judge_details.mhtml:							<input type="checkbox" id="fyo" name="fyo" value="1" <% $judge->setting("first_year") ? "checked" : "" %>> 
./enter/judge_details.mhtml:%			if ($category->setting("free_strikes_dont_count")) { 
./enter/judge_details.mhtml:							Judge is a free strike <% $category->setting("free_strikes_dont_count") > 0 ? "(rounds will not count towards obligation)" : "" %>
./enter/judge_details.mhtml:							<input type="checkbox" id="free_strike" name="free_strike" value="1" <% $judge->setting("free_strike") ? "checked" : "" %>> 
./enter/judge_details.mhtml:%			if ($category->setting("judge_cells")) { 
./enter/judge_details.mhtml:						<input type="tel" name="phone" size="48" value="<% $judge ? $judge->setting("phone") : "" %>">
./enter/judge_details.mhtml:%		foreach my $strike (Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 )) { 
./enter/judge_details.mhtml:%			$strike_by_event{$strike->event->id} = $strike;
./enter/judge_details.mhtml:%		my @selfstrike = $m->comp("/funclib/event_selfstrike.mas", category => $category);
./enter/judge_details.mhtml:%			foreach my $event ($m->comp("/funclib/event_selfstrike.mas", category => $category)) { 
./enter/judge_details.mhtml:				<label for="<% $event->id %>">
./enter/judge_details.mhtml:							<input type="checkbox" id="<% $event->id %>" name="<% $event->id %>" value="1" 
./enter/judge_details.mhtml:								<% $strike_by_event{$event->id} ? "checked" : "" %>> 
./enter/judge_details.mhtml:							Judge should not judge <% $event->name %>
./enter/judge_details.mhtml:			<% $judge->first." ".$judge->last %>
./enter/judge_details.mhtml:			<% $judge->category->name %>
./enter/judge_details.mhtml:			<% $judge->school ? $judge->school->short_name : "Hired Judge" %>
./enter/judge_details.mhtml:%		if ($judge->person) { 
./enter/judge_details.mhtml:				Linked to: <% $judge->person->email %>
./enter/judges.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judges.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/judges.mhtml:	my $tourn = $school->tourn;
./enter/judges.mhtml:	my @categories = $tourn->categories;
./enter/judges.mhtml:	$category_id = $category->id if scalar @categories == 1;
./enter/judges.mhtml:	my @events = $category->events if $category;
./enter/judges.mhtml:	my $tz = $person->tz;
./enter/judges.mhtml:	$tz = $tourn->tz unless $tz;
./enter/judges.mhtml:	my $now = DateTime->now( time_zone => $tz);
./enter/judges.mhtml:	my $judge_deadline = $tourn->setting("judge_deadline");
./enter/judges.mhtml:	$judge_deadline->set_time_zone($tz) if $judge_deadline;
./enter/judges.mhtml:	my $judge_per = $category->setting("judge_per") if $category;
./enter/judges.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./enter/judges.mhtml:	my $frees_no = $category->setting("free_strikes_dont_count") if $category;
./enter/judges.mhtml:	my @requests = Tab::JudgeHire->search( school => $school->id, category => $category->id ) if $category_id;
./enter/judges.mhtml:		<h2>Judges: <% $tourn->name %></h2>
./enter/judges.mhtml:%			my $category_deadline = $category->setting("deadline");
./enter/judges.mhtml:%			$category_deadline->set_time_zone($tz) if $category_deadline;
./enter/judges.mhtml:%			$category_deadline = $judge_deadline->clone if $judge_deadline &! $category_deadline;
./enter/judges.mhtml:%           my ($unc, $over) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category);
./enter/judges.mhtml:%					if ($category->setting("hired_fee") > 0 && $judge_per) { 
./enter/judges.mhtml:%					if ($category->setting("hired_fee") > 0 && $judge_per) { 
./enter/judges.mhtml:			<h4><% $category->name %> Judges</h4>
./enter/judges.mhtml:				<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judges.mhtml:				<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/judges.mhtml:			<div class="full nospace marleftmore"><% $category->setting("judge_policy") %></div>
./enter/judges.mhtml:					<% ($tourn->setting("hide_codes")|| $category->setting("no_codes")) ? "" : "<th>Code</th>" %>
./enter/judges.mhtml:%					if ($category->strike_timeslots) { 
./enter/judges.mhtml:%					if ($category->setting("coach_ratings")) { 
./enter/judges.mhtml:%					if ($category->setting("first_year_outs")) { 
./enter/judges.mhtml:%				foreach my $judge ($m->comp("/funclib/judgemath/judges_by_category.mas", school => $school, category => $category)) {
./enter/judges.mhtml:%					$used_judge{$judge->chapter_judge->id}++ if $judge->chapter_judge;
./enter/judges.mhtml:%					if ($frees_no && $first_free && $judge->setting("free_strike")) { 
./enter/judges.mhtml:%							 unless ($tourn->setting("hide_codes")|| $category->setting("no_codes")) { 
./enter/judges.mhtml:								<h4>Non-credited judging:</h4>
./enter/judges.mhtml:%					my @strikes = Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 );
./enter/judges.mhtml:						<% ($tourn->setting("hide_codes")|| $category->setting("no_codes")) ? "" : "<td>".$judge->code."</td>" %>
./enter/judges.mhtml:								<a class="white" href="judge_details.mhtml?school_id=<% $school->id %>&judge_id=<% $judge->id %>">
./enter/judges.mhtml:								<% $judge->first." ".$judge->last%>
./enter/judges.mhtml:%							if ($judge->ada || @strikes) { 
./enter/judges.mhtml:									<% ($judge->ada) ? "(Accessible Rooms Requested)" : "" %>
./enter/judges.mhtml:										No <% $strike->event->abbr %> 
./enter/judges.mhtml:								<% $judge->obligation %>
./enter/judges.mhtml:								<input type="number" name="<% $judge->id %>" size="5" min="1" max="99" value="<% $judge->obligation %>">
./enter/judges.mhtml:%								$total_rounds += $judge->obligation unless $judge->setting("free_strike");
./enter/judges.mhtml:%						if ($category->strike_timeslots) { 
./enter/judges.mhtml:									<a class="white" href="judge_striketime.mhtml?school_id=<% $school->id %>&judge_id=<% $judge->id %>">
./enter/judges.mhtml:%									foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/judges.mhtml:%										if ($strike_timeslot->strike($judge)) { 
./enter/judges.mhtml:											Not available <% $strike_timeslot->name %> 
./enter/judges.mhtml:%						if ($category->setting("coach_ratings")) { 
./enter/judges.mhtml:								<% $m->comp("/funclib/judge_rating.mas", print => 1, judge => $judge )%>
./enter/judges.mhtml:%						if ( $category->setting("first_year_outs") || $category->setting("dont_count_free_strikes") ) { 
./enter/judges.mhtml:								<% $judge->setting("first_year") ? "First Year <br />" : "" %>
./enter/judges.mhtml:								<% $judge->setting("free_strike") ? "Free Strike" : "" %>
./enter/judges.mhtml:								<a class="dkblue button" href="judge_details.mhtml?school_id=<% $school->id %>&judge_id=<% $judge->id %>">
./enter/judges.mhtml:								<a class="dkred button" href="judge_drop.mhtml?school_id=<% $school->id %>&judge_id=<% $judge->id %>">
./enter/judges.mhtml:%						 unless ($tourn->setting("hide_codes")|| $category->setting("no_codes")) { 
./enter/judges.mhtml:%			if ($category->setting("exchange") ) { 
./enter/judges.mhtml:%					next unless $request->judge;
./enter/judges.mhtml:							Hired <% $request->judge->first." ".$request->judge->last %> for <% $request->rounds %> rounds
./enter/judges.mhtml:							<a class="padmuchmore dkred" href="hire_cancel.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>&back=roster">
./enter/judges.mhtml:%				my @judges = $m->comp("/funclib/exchange_judges.mas", category => $category);
./enter/judges.mhtml:							<a class="dkblue padmuchmore" href="hire_exchange.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>">
./enter/judges.mhtml:%			if ($category->setting("track_judge_hires") ) { 
./enter/judges.mhtml:%				if ($category->setting("uncovered_entry_fee") > 0) { 
./enter/judges.mhtml:%							next if $request->judge;
./enter/judges.mhtml:									Request made <% Tab::niceshortdt($request->requested_at->set_time_zone($tz)) %>
./enter/judges.mhtml:									<% $request->accepted ? $request->accepted : 0 %> accepted
./enter/judges.mhtml:									<% $request->covers %> requested
./enter/judges.mhtml:									<a class="dkred button" <& "/funclib/confirm.mas", warn => $warn &> href="hire_reduce.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>">
./enter/judges.mhtml:									<a class="dkred button" <& "/funclib/confirm.mas", warn => $warn &> href="hire_delete.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>">
./enter/judges.mhtml:									<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judges.mhtml:									<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/judges.mhtml:					<p class="explain" style="padding-left: 10px;">
./enter/judges.mhtml:%				if ($category->setting("hired_fee") > 0) { 
./enter/judges.mhtml:%	    	   			$hires_requested += $request->covers;
./enter/judges.mhtml:%   	    			$hires_accepted += $request->accepted;
./enter/judges.mhtml:%						next if $request->judge;
./enter/judges.mhtml:								Request made <% Tab::niceshortdt($request->requested_at->set_time_zone($tz)) %>
./enter/judges.mhtml:								<% $request->accepted && $judge_per ? ceil($request->accepted / $judge_per) : 0 %> accepted
./enter/judges.mhtml:								<% ($judge_per ? ceil($request->covers / $judge_per) : $request->covers ) %> requested
./enter/judges.mhtml:										href="hire_reduce.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>">
./enter/judges.mhtml:									href="hire_delete.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>">
./enter/judges.mhtml:            		    	    <input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judges.mhtml:        		        	    <input type="hidden" name="category_id" value="<% $category->id %>">
./enter/judges.mhtml:%				if ($category->setting("round_hire_fee") > 0) { 
./enter/judges.mhtml:%					my @requests = Tab::JudgeHire->search( school => $school->id, category => $category->id );
./enter/judges.mhtml:%	    	   			$hires_requested += $request->rounds;
./enter/judges.mhtml:%   	    			$hires_accepted += $request->rounds_accepted;
./enter/judges.mhtml:%						$total_rounds += $request->rounds_accepted;
./enter/judges.mhtml:%						next if $request->judge;
./enter/judges.mhtml:								Request made <% Tab::niceshortdt($request->requested_at->set_time_zone($tz)) %>
./enter/judges.mhtml:							<td class="centeralign smallish <% $request->rounds_accepted < $request->rounds ? "redtext" : "" %>">
./enter/judges.mhtml:								<% $request->rounds_accepted %> rounds accepted
./enter/judges.mhtml:								<% $request->rounds %> rounds requested
./enter/judges.mhtml:								<a class="dkred button" <& "/funclib/confirm.mas", warn => $warn &>  href="hire_reduce.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>">
./enter/judges.mhtml:								<a class="dkred button" <& "/funclib/confirm.mas", warn => $warn &>  href="hire_delete.mhtml?school_id=<% $school->id %>&hire_id=<% $request->id %>">
./enter/judges.mhtml:            		    	    <input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judges.mhtml:        		        	    <input type="hidden" name="category_id" value="<% $category->id %>">
./enter/judges.mhtml:%		if ($category && $category->setting('judge_policy') > 0) { 
./enter/judges.mhtml:			<h4 style="margin-left: 5px;"><% $category->abbr %> Judging notes:</h4>
./enter/judges.mhtml:			<p style="padding: 5px;"><% $category->setting("judge_policy") %></p>
./enter/judges.mhtml:%				my $category_deadline = $category->setting("deadline");
./enter/judges.mhtml:%				$category_deadline->set_time_zone($tz) if $category_deadline;
./enter/judges.mhtml:%				$category_deadline = $judge_deadline->clone unless $category_deadline;
./enter/judges.mhtml:%					my @chapter_judges = $m->comp("/funclib/chapter_judges_free.mas", school => $school);
./enter/judges.mhtml:%				    my $now = DateTime->now;
./enter/judges.mhtml:						<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/judges.mhtml:						<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judges.mhtml:							<select name="chapter_judge_id" size="7" class="fixedmedsmall chosen" data-placeholder="Select judge...">
./enter/judges.mhtml:%								foreach my $chapter_judge (sort {$a->last cmp $b->last} @chapter_judges) { 
./enter/judges.mhtml:%									next if $used_judge{$chapter_judge->id}++;
./enter/judges.mhtml:									<option value="<% $chapter_judge->id %>"><% $chapter_judge->last.", ".$chapter_judge->first %></option>
./enter/judges.mhtml:					<a class="yellow full martop" href="/user/chapter/judge_edit.mhtml?from=<% $category->id %>&chapter_id=<% $school->chapter->id %>">
./enter/judges.mhtml:%			foreach my $category (sort {$a->name cmp $b->name} @categories) {
./enter/judges.mhtml:%				my $category_deadline = $category->setting("deadline");
./enter/judges.mhtml:%				my $no_free = $category->setting("free_strikes_dont_count");
./enter/judges.mhtml:%				$category_deadline->set_time_zone($tz) if $category_deadline;
./enter/judges.mhtml:%				my ($unc, $over) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category); 
./enter/judges.mhtml:%				my @category_judges = $m->comp("/funclib/judgemath/judges_by_category.mas", school => $school, category => $category);
./enter/judges.mhtml:%				my $obligation = $m->comp("/funclib/judgemath/judges_needed_by_category.mas", school => $school, category => $category);
./enter/judges.mhtml:%						$rounds += $judge->obligation unless $no_free && $judge->setting("free_strike");
./enter/judges.mhtml:				<a href="judges.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>" class="<% ($unc > 0) ? "dkred" : $category_id == $category->id ? "dkblue" : "blue" %> full">
./enter/judges.mhtml:						<% $category->name %>
./enter/judges.mhtml:					<a href="/user/tourn/entry/judges.mhtml?school_id=<% $school->id %>&category_id=<% $category->id %>" class="white">
./enter/judges.mhtml:						**<% $category->abbr %> Judges due: <% &Tab::niceshortdt($category_deadline->set_time_zone($tz)) %>
./enter/judge_drop.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_drop.mhtml:		$m->redirect("judges.mhtml?school_id=".$school->id."&err=$err");
./enter/judge_drop.mhtml:	my $tourn = $judge->category->tourn;
./enter/judge_drop.mhtml:	my $chapter = $school->chapter;
./enter/judge_drop.mhtml:	my $category = $judge->category;
./enter/judge_drop.mhtml:	my $err = $person->first." ".$person->last." dropped judge ".$judge->first." ".$judge->last." in ".$category->name;
./enter/judge_drop.mhtml:    my @requests = Tab::Housing->search( tourn => $tourn->id, judge => $judge->id);
./enter/judge_drop.mhtml:		$request->delete;
./enter/judge_drop.mhtml:	if ($tourn->setting("track_reg_changes")) {
./enter/judge_drop.mhtml:		my $change = Tab::ChangeLog->create({
./enter/judge_drop.mhtml:   			tourn       => $tourn->id,
./enter/judge_drop.mhtml:       		school      => $judge->school->id,
./enter/judge_drop.mhtml:			person      => $person->id
./enter/judge_drop.mhtml:	$school->setting("individuals", ($school->setting("individuals") - 1)) if $school->setting("individuals");
./enter/judge_drop.mhtml:	$judge->delete;
./enter/judge_drop.mhtml:	my $chapter_id = $chapter->id;
./enter/judge_drop.mhtml:	my $tourn_id = $tourn->id;
./enter/judge_drop.mhtml:	$m->redirect("onsite.mhtml?err=$err&category_id=".$category->id."&school_id=".$school->id) if $from eq "onsite";
./enter/judge_drop.mhtml:	$m->redirect("judges.mhtml?err=$err&category_id=".$category->id."&school_id=".$school->id);
./enter/judge_person_link.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_person_link.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/judge_person_link.mhtml:	my $judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./enter/judge_person_link.mhtml:		my $login = Tab::Login->search( username => $email)->first;
./enter/judge_person_link.mhtml:			$judge->person($login->person->id);
./enter/judge_person_link.mhtml:			$judge->update;
./enter/judge_person_link.mhtml:			$m->redirect("judge_save.mhtml?school_id=$school_id&chapter_judge_id=$chapter_judge_id&category_id=$category_id");
./enter/judge_person_link.mhtml:		<p>The tournament <% $school->tourn->name %> requires all judges in <%
./enter/judge_person_link.mhtml:		$category->name %> to use online ballots</p>
./enter/judge_person_link.mhtml:		<p>Before registering judges in <% $category->name %>, judges must have
./enter/judge_person_link.mhtml:		<p>If you have questions, please contact the <a href="/index/tourn/index.mhtml?tourn_id=<% $category->tourn->id %>">tournament's points of contact</a></p>
./enter/judge_person_link.mhtml:		<h4>Link <% $judge->first." ".$judge->last %> to a Tabroom login</h4>
./enter/judge_person_link.mhtml:			<input type="hidden" name="chapter_judge_id" value="<% $judge->id %>">
./enter/judge_person_link.mhtml:			<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/judge_person_link.mhtml:			<input type="hidden" name="category_id" value="<% $category->id %>">
./enter/judge_person_link.mhtml:			<% $judge->first." ".$judge->last %>
./enter/judge_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/judge_save.mhtml:		$m->redirect("/user/home.mhtml?school_id=$school_id&category_id=".$category->id."&err=".$err);
./enter/judge_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_save.mhtml:		$m->redirect("judges.mhtml?school_id=$school_id&category_id=".$category->id."&err=".$err);
./enter/judge_save.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./enter/judge_save.mhtml:	if ($category->setting("linked_only")) { 
./enter/judge_save.mhtml:		unless ($chapter_judge->person > 0) { 
./enter/judge_save.mhtml:			$m->redirect("judge_person_link.mhtml?school_id=$school_id&chapter_judge_id=$chapter_judge_id&category_id=$category_id");
./enter/judge_save.mhtml:	my $tourn = $school->tourn;
./enter/judge_save.mhtml:	$m->print($tourn->id);
./enter/judge_save.mhtml:	my $tz = $person->tz;
./enter/judge_save.mhtml:	$tz = $tourn->tz unless $tz;
./enter/judge_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./enter/judge_save.mhtml:	my $person_id = $chapter_judge->person->id if $chapter_judge->person;
./enter/judge_save.mhtml:	$code = $m->comp("/funclib/category_code.mas", category => $category ) unless $category->setting("no_codes");
./enter/judge_save.mhtml:	if ($category->setting("rounds_per")) { 
./enter/judge_save.mhtml:		$obligation = $category->setting("max_rounds");
./enter/judge_save.mhtml:		$obligation = $category->setting('rounds_per') unless $obligation;
./enter/judge_save.mhtml:	$acct_id = $chapter_judge->person->id if $chapter_judge->person;
./enter/judge_save.mhtml:	my $judge = Tab::Judge->create({
./enter/judge_save.mhtml:		school        => $school->id,
./enter/judge_save.mhtml:		first         => $chapter_judge->first,
./enter/judge_save.mhtml:		last          => $chapter_judge->last,
./enter/judge_save.mhtml:		category      => $category->id,
./enter/judge_save.mhtml:		chapter_judge => $chapter_judge->id
./enter/judge_save.mhtml:	$judge->setting("special", $ARGS{"special"}) if $ARGS{"special"};
./enter/judge_save.mhtml:	$judge->setting("notes", $chapter_judge->notes);
./enter/judge_save.mhtml:	$judge->setting("tab_rating", $ARGS{"tab_rating"}) if $ARGS{"tab_rating"};
./enter/judge_save.mhtml:	$judge->setting("gender", $chapter_judge->gender) if $chapter_judge->gender;
./enter/judge_save.mhtml:	$judge->setting("registered_by", $person->id);
./enter/judge_save.mhtml:	if ($judge->person) {
./enter/judge_save.mhtml:		$m->comp("/funclib/conflict.mas", tourn => $tourn, person => $judge->person);
./enter/judge_save.mhtml:		$judge->setting("email", $judge->person->email);
./enter/judge_save.mhtml:		$judge->setting("phone", $judge->person->phone);
./enter/judge_save.mhtml:	if ($tourn->setting("track_reg_changes")) {
./enter/judge_save.mhtml:		my $description = $person->first." ".$person->last." entered ".$category->abbr." judge $judge->code (".$judge->first." ".$judge->last.")";
./enter/judge_save.mhtml:		my $change = Tab::ChangeLog->create({
./enter/judge_save.mhtml:			tourn       => $tourn->id,
./enter/judge_save.mhtml:			school      => $school->id,
./enter/judge_save.mhtml:	if ($chapter_judge->notes || $category->setting("coach_ratings") || $category->setting("ask_alts") || $category->setting("judge_contacts") || $category->setting("first_year_outs") || $category->setting("free_strikes_dont_count") || $category->setting("rounds_per") || $category->setting("judge_quals") || ($category->setting("judge_cells") && not defined $judge->setting("phone"))) { 
./enter/judge_save.mhtml:		$m->redirect("judge_details.mhtml?judge_id=".$judge->id."&school_id=".$school->id);
./enter/judge_save.mhtml:		$m->redirect("judges.mhtml?school_id=$school_id&judge_id=".$judge->id."&category_id=".$category->id);
./enter/team_members_save.mhtml:		$m->redirect("team_members.mhtml?entry_id=$entry_id&err=$err");
./enter/team_members_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/team_members_save.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/team_members_save.mhtml:	my $team_member = Tab::EntryStudent->create({ 
./enter/team_members_save.mhtml:	my $msg .= $student->first." ".$student->last." has been added to ".$entry->name.", ";
./enter/team_members_save.mhtml:	my $event_id = $entry->event->id;
./enter/team_members_save.mhtml:	$m->redirect("team_members.mhtml?entry_id=$entry_id&school_id=".$entry->school->id."&msg=$msg");
./enter/housing_transfer.mhtml:	my $housing = Tab::Housing->retrieve($housing_id);
./enter/housing_transfer.mhtml:	$m->abort unless $housing;
./enter/housing_transfer.mhtml:	my $tourn = $housing->tourn;
./enter/housing_transfer.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_transfer.mhtml:	my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn, add_one => "aye");
./enter/housing_transfer.mhtml:	unless ($person->site_admin || Tab::Permission->search( person => $person->id, tag => "chapter", chapter => $school->chapter->id )) { 
./enter/housing_transfer.mhtml:		$m->print("You do not have admin rights to that school.");
./enter/housing_transfer.mhtml:		$m->abort;
./enter/housing_transfer.mhtml:		$m->redirect("housing_transfer.mhtml?housing_id=$housing_id&school_id=$school_id&err=$err");
./enter/housing_transfer.mhtml:	my $old = $housing->student if ($housing->student && $housing->student->id);
./enter/housing_transfer.mhtml:	$old = $housing->judge if $housing->judge && $housing->judge->id;
./enter/housing_transfer.mhtml:		my @tbas = Tab::Housing->search( tba => 1, school => $school_id, night => $housing->night );
./enter/housing_transfer.mhtml:		my $event = Tab::Event->retrieve($event_id);
./enter/housing_transfer.mhtml:		foreach my $entry (Tab::Entry->search(event => $event->id, school => $school->id)) { 
./enter/housing_transfer.mhtml:			next if $entry->waitlist;
./enter/housing_transfer.mhtml:			next if $entry->dropped;
./enter/housing_transfer.mhtml:			foreach my $student ($entry->students) { 
./enter/housing_transfer.mhtml:					my $ex = $student->housing($tourn, $housing->night);
./enter/housing_transfer.mhtml:					$housing->student($student->id);
./enter/housing_transfer.mhtml:					$housing->judge("");
./enter/housing_transfer.mhtml:					$housing->type("student");
./enter/housing_transfer.mhtml:					$housing->tba("");
./enter/housing_transfer.mhtml:					$housing->update;
./enter/housing_transfer.mhtml:					if ($tourn->setting("track_reg_changes")) {
./enter/housing_transfer.mhtml:						my $description = "TBA Housing slot transferred to ".$student->first." ".$student->last;
./enter/housing_transfer.mhtml:						my $change = Tab::ChangeLog->create({
./enter/housing_transfer.mhtml:							tourn       => $tourn->id,
./enter/housing_transfer.mhtml:							school      => $school->id,
./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to $count students in ".$event->abbr;
./enter/housing_transfer.mhtml:		$m->redirect("housing.mhtml?school_id=$school_id&msg=$msg");
./enter/housing_transfer.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/housing_transfer.mhtml:		my $ex = $student->housing($tourn, $housing->night);
./enter/housing_transfer.mhtml:		$ex->delete if $ex;
./enter/housing_transfer.mhtml:		$housing->student($student_id);
./enter/housing_transfer.mhtml:		$housing->judge("");
./enter/housing_transfer.mhtml:		$housing->type("student");
./enter/housing_transfer.mhtml:		$housing->tba("");
./enter/housing_transfer.mhtml:		$housing->update;
./enter/housing_transfer.mhtml:		if ($tourn->setting("track_reg_changes")) {
./enter/housing_transfer.mhtml:			my $description = $person->first." ".$person->last." Transferred
./enter/housing_transfer.mhtml:			housing from ".$old->first." ".$old->last." to ".$student->first."
./enter/housing_transfer.mhtml:			".$student->last if $old;
./enter/housing_transfer.mhtml:			my $change = Tab::ChangeLog->create({
./enter/housing_transfer.mhtml:       			tourn       => $tourn->id,
./enter/housing_transfer.mhtml:        		school      => $school->id,
./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to ".$student->first." ".$student->last;
./enter/housing_transfer.mhtml:		$m->redirect("housing.mhtml?school_id=$school_id&msg=$msg");
./enter/housing_transfer.mhtml:		my $judge = Tab::Judge->retrieve($judge_id);
./enter/housing_transfer.mhtml:		my $ex = $m->comp("/funclib/judge_housing.mas", judge => $judge, night => $housing->night);
./enter/housing_transfer.mhtml:		$ex->delete if $ex;
./enter/housing_transfer.mhtml:		$housing->judge($judge_id);
./enter/housing_transfer.mhtml:		$housing->student("");
./enter/housing_transfer.mhtml:		$housing->tba("");
./enter/housing_transfer.mhtml:		$housing->type("judge");
./enter/housing_transfer.mhtml:		$housing->update;
./enter/housing_transfer.mhtml:		if ($tourn->setting("track_reg_changes")) {
./enter/housing_transfer.mhtml:			my $description = " Transferred housing from ".$old->first." ".$old->last." to ".$judge->first." ".$judge->last if $old;
./enter/housing_transfer.mhtml:			$description = "Moved TBA housing slot to ".$judge->first." ".$judge->last if $old;
./enter/housing_transfer.mhtml:			my $change = Tab::ChangeLog->create({
./enter/housing_transfer.mhtml:       			tourn       => $tourn->id,
./enter/housing_transfer.mhtml:        		school      => $school->id,
./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to ".$judge->first." ".$judge->last;
./enter/housing_transfer.mhtml:		$m->redirect("housing.mhtml?school_id=$school_id&msg=$msg");
./enter/housing_transfer.mhtml:	foreach my $student ($m->comp("/funclib/school_students.mas", school => $school, tourn => $tourn)) { 
./enter/housing_transfer.mhtml:		my $hs = $student->housing($tourn, $housing->night);
./enter/housing_transfer.mhtml:			next STUDENT unless $hs->waitlist > 0 && $housing->waitlist < 1;
./enter/housing_transfer.mhtml:	foreach my $judge ($school->judges) {
./enter/housing_transfer.mhtml:		my $hs = $m->comp("/funclib/judge_housing.mas", judge => $judge, night => $housing->night);
./enter/housing_transfer.mhtml:			next JUDGE unless $hs->waitlist > 0 && $housing->waitlist < 1;
./enter/housing_transfer.mhtml:	my $person = $housing->judge if $housing->type eq "judge";
./enter/housing_transfer.mhtml:	$person = $housing->student if $housing->type eq "student";
./enter/housing_transfer.mhtml:	<h2><% $school->name %> at the <% $tourn->name %></h2>
./enter/housing_transfer.mhtml:%	if ($housing->tba) { 
./enter/housing_transfer.mhtml:		<h4>Transfer <% $person->first." ".$person->last %>'s housing:</h4>
./enter/housing_transfer.mhtml:	<p>Housing for the night of <% Tab::nicedate($housing->night) %>.</p>
./enter/housing_transfer.mhtml:	<input type="hidden" name="housing_id" value="<% $housing->id %>">
./enter/housing_transfer.mhtml:	<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/housing_transfer.mhtml:%						foreach my $student (sort {$a->last cmp $b->last} @students_without_housing) {
./enter/housing_transfer.mhtml:							<option value="<% $student->id %>">
./enter/housing_transfer.mhtml:								<% $student->last.", ".$student->first %>
./enter/housing_transfer.mhtml:%						foreach my $event (sort {$a->name cmp $b->name} $tourn->events) { 
./enter/housing_transfer.mhtml:							<option value="<% $event->id %>">
./enter/housing_transfer.mhtml:								<% $event->name %>
./enter/housing_transfer.mhtml:%						foreach my $judge (sort {$a->last cmp $b->last} @judges_without_housing) {
./enter/housing_transfer.mhtml:							<option value="<% $judge->id %>"><% $judge->last." ".$judge->first %></option>
./enter/housing_transfer.mhtml:			<td style="padding-top: 25px;">
./enter/housing_transfer.mhtml:			<td colspan="2" style="line-height: 24px; border: 1px solid red;">
./enter/housing_transfer.mhtml:%		if ($tourn->setting("housing_message")) { 
./enter/housing_transfer.mhtml:					<% $tourn->setting("housing_message") %>
./enter/housing_transfer.mhtml:%		my @tbas = Tab::Entry->search( tba => 1, school => $school->id );
./enter/housing_transfer.mhtml:%		my @tba_housing = Tab::Housing->search( tba => 1, school => $school->id );
./enter/housing_transfer.mhtml:%					my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day );
./enter/housing_transfer.mhtml:%					my @tbas = Tab::Housing->search( tba => 1, school => $school->id, night => $day );
./enter/housing_transfer.mhtml:					<h5><% scalar @tbas %> <% $day->day_name %> slots</h5>
./enter/housing_transfer.mhtml:							<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/housing_transfer.mhtml:							<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./enter/housing_transfer.mhtml:							<input type="hidden" name="day" value="<% $day->ymd %>">
./enter/housing_transfer.mhtml:						<a class="martop dkblue block" href="housing_transfer.mhtml?housing_id=<% $tbas[0]->id %>&school_id=<% $school->id %>">
./enter/drop_school.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/drop_school.mhtml:	unless ($school && $school->id) { 
./enter/drop_school.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./enter/drop_school.mhtml:	unless (Tab::Permission->search( tag => "chapter", chapter => $school->chapter, person => $person->id )) {
./enter/drop_school.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./enter/drop_school.mhtml:	my $tourn = $school->tourn;
./enter/drop_school.mhtml:	foreach my $entry ($school->entries) { 
./enter/drop_school.mhtml:		foreach my $strike (Tab::Strike->search(entry => $entry->id)) { $strike->delete;}
./enter/drop_school.mhtml:		foreach my $student ($entry->students) { 
./enter/drop_school.mhtml:			foreach my $housing ($m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn)) {
./enter/drop_school.mhtml:				$housing->delete if $housing; 
./enter/drop_school.mhtml:		$entry->delete;
./enter/drop_school.mhtml:	foreach my $judge ($school->judges) { 
./enter/drop_school.mhtml:		foreach my $strike ($judge->strikes) { 
./enter/drop_school.mhtml:			$strike->delete;
./enter/drop_school.mhtml:		foreach my $housing ($m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn)) {
./enter/drop_school.mhtml:			$housing->delete if $housing;
./enter/drop_school.mhtml:		$judge->delete;
./enter/drop_school.mhtml:   if ($tourn->setting("track_reg_changes")) {
./enter/drop_school.mhtml:        my $description = $person->first." ".$person->last." dropped the entire entry for ".$school->name.".  Bummer.";
./enter/drop_school.mhtml:        my $change = Tab::ChangeLog->create({
./enter/drop_school.mhtml:            tourn       => $tourn->id,
./enter/drop_school.mhtml:			person      => $person->id
./enter/drop_school.mhtml:	Tab::log($person->first." ".$person->last." deleted school ".$school->name." from ".$tourn->name);
./enter/drop_school.mhtml:	$school->delete;
./enter/drop_school.mhtml:	my $msg = "You have been dropped completely from ".$tourn->name.".  I warned you.";
./enter/drop_school.mhtml:	$m->redirect("/user/home.mhtml?msg=$msg");
./enter/student_save.mhtml:	my $now = DateTime->now;
./enter/student_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./enter/student_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/student_save.mhtml:	my $tourn = $event->tourn;
./enter/student_save.mhtml:	$waitlist = 1 if $event->setting("waitlist_all");
./enter/student_save.mhtml:	my $min = $event->setting("min_entry");
./enter/student_save.mhtml:	my $max = $event->setting("max_entry");
./enter/student_save.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./enter/student_save.mhtml:	my $partner = Tab::Student->retrieve($partner_id) if $partner_id;
./enter/student_save.mhtml:		$name = "Team ".$school->short_name;
./enter/student_save.mhtml:			$m->redirect("/user/enter/students.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
./enter/student_save.mhtml:    	   	$m->redirect("/user/enter/students.mhtml?err=$err&event_id=$event_id&school_id=$school_id");
./enter/student_save.mhtml:		$name = $student->last." & ".$partner->last if $student > 0 && $partner > 0;
./enter/student_save.mhtml:		$name = $student->first." ".$student->last if $student > 0 && $partner < 1;
./enter/student_save.mhtml:		$name = $partner->first." ".$partner->last if $partner > 0 && $student < 1;
./enter/student_save.mhtml:			$m->redirect("/user/enter/students.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
./enter/student_save.mhtml:		$name = $student->first." ".$student->last;
./enter/student_save.mhtml:		my $tourn = $event->tourn;
./enter/student_save.mhtml:		my @entries = $m->comp('/funclib/student_entries.mas', student => $student, tourn => $tourn);
./enter/student_save.mhtml:		if (grep $event->id == $_->event->id, @entries) {
./enter/student_save.mhtml:			my $err = $student->first." ".$student->last." is already entered";
./enter/student_save.mhtml:			$m->redirect("/user/enter/students.mhtml?school_id=".$school->id."&event_id=".$event->id."&err=$err")
./enter/student_save.mhtml:	my $entry = Tab::Entry->create({ 
./enter/student_save.mhtml:		tourn    => $tourn->id,
./enter/student_save.mhtml:	$entry->setting("registered_by", $person->id);
./enter/student_save.mhtml:		my $es = Tab::EntryStudent->create({
./enter/student_save.mhtml:			entry   => $entry->id,
./enter/student_save.mhtml:			student => $student->id
./enter/student_save.mhtml:		$m->comp("/funclib/conflict.mas", tourn => $tourn, person => $student->person) if $student->person;
./enter/student_save.mhtml:		$other_school = Tab::School->search( chapter => $partner->chapter->id, tourn => $tourn->id)->first if $partner;
./enter/student_save.mhtml:			$other_school = $m->comp("create.mhtml", person => $person, session => $session, chapter_id => $partner->chapter->id, tourn_id => $tourn->id, return => "yes");
./enter/student_save.mhtml:		Tab::Strike->create({
./enter/student_save.mhtml:			entry  => $entry->id,
./enter/student_save.mhtml:			tourn  => $tourn->id,
./enter/student_save.mhtml:			school => $other_school->id
./enter/student_save.mhtml:	if ($tourn->setting("track_reg_changes")) { 
./enter/student_save.mhtml:		my $description = $person->first." ".$person->last." entered ".$event->abbr." entry $code (".$name.")";
./enter/student_save.mhtml:		my $change = Tab::ChangeLog->create({
./enter/student_save.mhtml:			tourn       => $tourn->id,
./enter/student_save.mhtml:	$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
./enter/student_save.mhtml:	$entry->update;
./enter/student_save.mhtml:	$msg = $name." has been entered in ". $event->name;
./enter/student_save.mhtml:	if ( $event->setting("ask_for_titles") 
./enter/student_save.mhtml:			|| $event->setting("code_style") eq "register"
./enter/student_save.mhtml:			|| $event->setting("ask_quals")  
./enter/student_save.mhtml:			|| $event->setting("apda_seeds") 
./enter/student_save.mhtml:		$m->redirect("/user/enter/details.mhtml?entry_id=".$entry->id."&school_id=$school_id&err=$err");
./enter/student_save.mhtml:	$m->redirect("/user/enter/students.mhtml?event_id=$event_id&school_id=$school_id&msg=$msg");
./enter/details_housing.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details_housing.mhtml:	$m->abort unless $entry;
./enter/details_housing.mhtml:	my $event = $entry->event;
./enter/details_housing.mhtml:	my $tourn = $event->tourn;
./enter/details_housing.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/details_housing.mhtml:	my @student_ids = split(/-/, $housed);
./enter/details_housing.mhtml:	foreach my $day ($m->comp("/funclib/tourn_days.mas", tourn => $tourn)) { 
./enter/details_housing.mhtml:		push @{$unhoused_students_by_day{$day->ymd}}, $m->comp("/funclib/school_students.mas", school => $school, night => $day->ymd);
./enter/details_housing.mhtml:		push @{$unhoused_judges_by_day{$day->ymd}}, $m->comp("/funclib/school_judges.mas", school => $school, night => $day->ymd);
./enter/details_housing.mhtml:		<h2><% $tourn->name %></h2>
./enter/details_housing.mhtml:		<input type="hidden" name="entry_id" value="<% $entry->id %>">
./enter/details_housing.mhtml:		<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/details_housing.mhtml:%				my $student = Tab::Student->retrieve($student_id);
./enter/details_housing.mhtml:%				my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./enter/details_housing.mhtml:%					my @unhoused_students = @{$unhoused_students_by_day{$housing->night->ymd}} if $unhoused_students_by_day{$housing->night->ymd};
./enter/details_housing.mhtml:%					my @unhoused_judges = @{$unhoused_judges_by_day{$housing->night->ymd}} if $unhoused_judges_by_day{$housing->night->ymd};
./enter/details_housing.mhtml:							<% $student->first." ".$student->last %>
./enter/details_housing.mhtml:							<% $housing->night->day_name %>
./enter/details_housing.mhtml:							<% Tab::niceshortdt($housing->requested) %>
./enter/details_housing.mhtml:							<% $housing->waitlist ? "On Waitlist" : "Confirmed" %>
./enter/details_housing.mhtml:							<select name="<% $housing->id %>">
./enter/details_housing.mhtml:									<option value="student-<% $unhoused->id %>">
./enter/details_housing.mhtml:										Entry: <% $unhoused->first." ".$unhoused->last %>
./enter/details_housing.mhtml:									<option value="judge-<% $unhoused->id %>">
./enter/details_housing.mhtml:										Judge: <% $unhoused->first." ".$unhoused->last %>
./enter/details_housing.mhtml:				<% $entry->name %>
./enter/details_housing.mhtml:				<% $entry->code %>
./enter/details_housing.mhtml:				<% $event->name %>
./enter/details_housing.mhtml:%			if ($entry->waitlist) { 
./enter/details_housing.mhtml:			<h4><% $event->abbr %></h4>
./enter/details_housing.mhtml:			<a class="blue block" href="students.mhtml?school_id=<% $school_id %>&event_id=<% $event->id %>">
./enter/details_housing.mhtml:				Return to <% $event->abbr %> Entry
./enter/invoice_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/invoice_print.mhtml:	my $tourn = $school->tourn;
./enter/invoice_print.mhtml:	my $school_name = $school->name;
./enter/invoice_print.mhtml:	my $tourn_name = $tourn->name;
./enter/invoice_print.mhtml:	my $filename = "Invoice-".$school_name."-".$tourn_name."-".$session->id;
./enter/invoice_print.mhtml:	my $garbage = `rm -f $filepath.*`;
./enter/invoice_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1);
./enter/invoice_print.mhtml:	$m->comp("/register/school/print/invoice.mas", school => $school, filename => $filename);
./enter/invoice_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./enter/contact_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/contact_save.mhtml:	my $other = Tab::School->search( tourn => $school->tourn->id, code => $school_code)->first;
./enter/contact_save.mhtml:	undef ($other) if $other && $other->id == $school_id;
./enter/contact_save.mhtml:	$school->setting("contact_name", $contact_name);
./enter/contact_save.mhtml:	$school->setting("contact_number", $contact_number);
./enter/contact_save.mhtml:	$school->setting("contact_email", $contact_email);
./enter/contact_save.mhtml:	$school->setting("individuals", $individuals);
./enter/contact_save.mhtml:	if ($school->tourn->setting("school_codes") eq "registrant" && $school_code) { 
./enter/contact_save.mhtml:		$school->code(substr($school_code, 0, 6)) unless $other;
./enter/contact_save.mhtml:	$school->update;	
./enter/contact_save.mhtml:	$m->redirect("/user/enter/onsite.mhtml?school_id=".$school->id."?err=$err") if $onsite;
./enter/contact_save.mhtml:	$m->redirect("/user/enter/entry.mhtml?school_id=".$school->id."?err=$err");
./enter/judge_striketime.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_striketime.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_striketime.mhtml:	$m->abort unless $judge;
./enter/judge_striketime.mhtml:	my $category = $judge->category;
./enter/judge_striketime.mhtml:	my $tourn = $category->tourn;
./enter/judge_striketime.mhtml:	my $tz = $tourn->tz;
./enter/judge_striketime.mhtml:		<h2>Limit <% $judge->first." ".$judge->last %>'s availability</h2>
./enter/judge_striketime.mhtml:%			foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/judge_striketime.mhtml:%				my $start = $strike_timeslot->start->set_time_zone($tz);
./enter/judge_striketime.mhtml:%				my $end = $strike_timeslot->end->set_time_zone($tz);
./enter/judge_striketime.mhtml:						<% $strike_timeslot->name %>
./enter/judge_striketime.mhtml:						<% $start->day_abbr %> <% Tab::nicetime($start) %> through
./enter/judge_striketime.mhtml:						<% $end->day_abbr %> <% Tab::nicetime($end) %>
./enter/judge_striketime.mhtml:						$<% $strike_timeslot->fine %>
./enter/judge_striketime.mhtml:%						if ($strike_timeslot->strike($judge)) { 
./enter/judge_striketime.mhtml:							<a class="dkred block" href="judge_striketime_flip.mhtml?judge_id=<% $judge->id %>&strike_timeslot_id=<% $strike_timeslot->id %>&school_id=<% $school->id %>">
./enter/judge_striketime.mhtml:							<a class="dkblue block" href="judge_striketime_flip.mhtml?judge_id=<% $judge->id %>&strike_timeslot_id=<% $strike_timeslot->id %>&school_id=<% $school->id %>">
./enter/judge_striketime.mhtml:			<a class="blue block" href="judges.mhtml?category_id=<% $category->id %>&school_id=<% $school->id %>">
./enter/judge_striketime.mhtml:				Judge: <% $judge->first." ".$judge->last %>
./enter/judge_striketime.mhtml:			<a class="blue block" href="judges.mhtml?category_id=<% $category->id %>&school_id=<% $school->id %>">
./enter/judge_striketime.mhtml:				<% $judge->category->name %>
./enter/judge_details_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_details_save.mhtml:	$m->abort unless $judge;
./enter/judge_details_save.mhtml:	my $category = $judge->category;
./enter/judge_details_save.mhtml:	my $tourn = $category->tourn;
./enter/judge_details_save.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./enter/judge_details_save.mhtml:	my $now = DateTime->now;
./enter/judge_details_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_details_save.mhtml:	if ($category->setting("coach_ratings")) { 
./enter/judge_details_save.mhtml:		unless ($category->rating_subsets) { 
./enter/judge_details_save.mhtml:			my $rating = $judge->ratings->first;
./enter/judge_details_save.mhtml:			$missing_rating .= "<br/> Missing ".$category->name." rating " unless $rating_id;
./enter/judge_details_save.mhtml:				$rating->rating_tier($rating_id);
./enter/judge_details_save.mhtml:				$rating->update;
./enter/judge_details_save.mhtml:				Tab::Rating->create({
./enter/judge_details_save.mhtml:					tourn       => $tourn->id,
./enter/judge_details_save.mhtml:					judge       => $judge->id,
./enter/judge_details_save.mhtml:			foreach my $subset ($category->rating_subsets) { 
./enter/judge_details_save.mhtml:				my $tier_id = $ARGS{$subset->id};
./enter/judge_details_save.mhtml:				$missing_rating .= "<br/> Missing ".$subset->name." rating." unless $tier_id;
./enter/judge_details_save.mhtml:				my $rating = $judge->ratings(rating_subset => $subset)->first;
./enter/judge_details_save.mhtml:					$rating->rating_tier($tier_id);
./enter/judge_details_save.mhtml:					$rating->update;
./enter/judge_details_save.mhtml:					Tab::Rating->create({
./enter/judge_details_save.mhtml:						tourn         => $tourn->id,
./enter/judge_details_save.mhtml:						judge         => $judge->id,
./enter/judge_details_save.mhtml:						rating_subset => $subset->id
./enter/judge_details_save.mhtml:			$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$err");
./enter/judge_details_save.mhtml:	$judge->obligation($rounds) if $rounds_per;
./enter/judge_details_save.mhtml:	$judge->alt_category($alt_id) if $alt_id;
./enter/judge_details_save.mhtml:	$judge->ada($ada);
./enter/judge_details_save.mhtml:	$judge->setting("diverse", $diverse);
./enter/judge_details_save.mhtml:	my $cj = $judge->chapter_judge;
./enter/judge_details_save.mhtml:	if ($cj && $judge && $cj->notes eq $judge->setting('notes') && $notes ne $cj->notes) { 
./enter/judge_details_save.mhtml:		$cj->notes($notes);
./enter/judge_details_save.mhtml:		$cj->notes_timestamp($now);
./enter/judge_details_save.mhtml:		$cj->update;
./enter/judge_details_save.mhtml:	$judge->setting('notes', $notes);
./enter/judge_details_save.mhtml:	$judge->setting("phone", $phone);
./enter/judge_details_save.mhtml:	$judge->setting("qual_history", $qual_history);
./enter/judge_details_save.mhtml:	$judge->setting("first_year", $fyo);
./enter/judge_details_save.mhtml:	$judge->setting("neutral", $neutral);
./enter/judge_details_save.mhtml:	if ($fyo > 0 && $category->setting("fyo_free_strikes")) { 
./enter/judge_details_save.mhtml:		$judge->setting("free_strike", 1);
./enter/judge_details_save.mhtml:		$judge->setting("free_strike", $free_strike);
./enter/judge_details_save.mhtml:	foreach my $strike (Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 )) { 
./enter/judge_details_save.mhtml:		$strike_by_event{$strike->event->id} = $strike;
./enter/judge_details_save.mhtml:	foreach my $event ($m->comp("/funclib/event_selfstrike.mas", category => $category)) { 
./enter/judge_details_save.mhtml:		if ($ARGS{$event->id}) { 
./enter/judge_details_save.mhtml:			next EVENT if $strike_by_event{$event->id};
./enter/judge_details_save.mhtml:			Tab::Strike->create({
./enter/judge_details_save.mhtml:				judge      => $judge->id,
./enter/judge_details_save.mhtml:				event      => $event->id,
./enter/judge_details_save.mhtml:				tourn      => $tourn->id,
./enter/judge_details_save.mhtml:			my $strike = $strike_by_event{$event->id};
./enter/judge_details_save.mhtml:			$strike->delete if $strike;
./enter/judge_details_save.mhtml:	$judge->update;
./enter/judge_details_save.mhtml:	my $msg = "Judge ".$judge->first." ".$judge->last." entered";
./enter/judge_details_save.mhtml:	$m->redirect("judges.mhtml?school_id=$school_id&category_id=".$category->id."&msg=$msg");
./enter/concessions.mhtml:	my $now = DateTime->now;
./enter/concessions.mhtml:	my $tourn = $school->tourn;
./enter/concessions.mhtml:			<% $school->name %> at the <% $tourn->name %>
./enter/concessions.mhtml:		<h4>Order <% ($tourn->setting("concession_name")) ? $tourn->setting("concession_name") : "Concessions" %> </h4>
./enter/concessions.mhtml:					<input type="hidden" name="school_id" value="<% $school->id %>">
./enter/concessions.mhtml:%			foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) { 
./enter/concessions.mhtml:%				if ($concession->deadline && $concession->deadline < $now) { 
./enter/concessions.mhtml:							<% $concession->name %>
./enter/concessions.mhtml:							<% $concession->description %>
./enter/concessions.mhtml:%							if ($concession->price > 0) { 
./enter/concessions.mhtml:								$<% sprintf ("%.2f", $concession->price) %> 
./enter/concessions.mhtml:%						my $count =	$m->comp("/funclib/school_concessions.mas", school => $school, count => 1, concession => $concession);
./enter/concessions.mhtml:%						my $charge =	$m->comp("/funclib/school_concessions.mas", school => $school, charge => 1, concession => $concession);
./enter/concessions.mhtml:%						my $tz = $tourn->tz if $tourn;
./enter/concessions.mhtml:%						my $deadline = $concession->deadline->set_time_zone($tz);
./enter/concessions.mhtml:							<input type="hidden" name="<% $concession->id %>_amount" value="<% $count %>">
./enter/concessions.mhtml:							The deadline to change orders for "<% $concession->name %>" was 
./enter/concessions.mhtml:							<% Tab::niceshortdt($deadline) %> <% $deadline->time_zone->short_name_for_datetime($deadline) %>
./enter/concessions.mhtml:							<% $concession->name %>
./enter/concessions.mhtml:							<% $concession->description %>
./enter/concessions.mhtml:%							if ($concession->price > 0) { 
./enter/concessions.mhtml:								$<% sprintf ("%.2f", $concession->price) %> 
./enter/concessions.mhtml:							<input type="number" name="<% $concession->id %>_amount"  size="4" min="0" max="999"
./enter/concessions.mhtml:								value="<% $m->comp("/funclib/school_concessions.mas", school => $school, concession => $concession, count => 1) %>">
./enter/concessions.mhtml:							$<% sprintf ("%.2f", $m->comp("/funclib/school_concessions.mas", school => $school, concession => $concession, charge => 1) ) %>
./enter/concessions.mhtml:%			foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) { 
./enter/concessions.mhtml:%				next unless $concession->cap;
./enter/concessions.mhtml:%				my $total_order = $m->comp("/funclib/concession_stats.mas", total => 1, concession => $concession);
./enter/concessions.mhtml:					<% $concession->name %>
./enter/concessions.mhtml:					Limit: <% $concession->cap %>
./enter/concessions.mhtml:					<% $concession->cap - $total_order %> left
./enter/menu.mas:	my $tz = $school->tourn->tz;
./enter/menu.mas:	my $now = DateTime->now(time_zone => $tz);
./enter/menu.mas:	foreach my $category ($school->tourn->categories) { 
./enter/menu.mas:		my ($uncovered, $overage) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", category => $category, school => $school); 
./enter/menu.mas:	foreach my $category ($school->tourn->categories) { 
./enter/menu.mas:		my $strike_start = $category->setting("strike_start");
./enter/menu.mas:			$ratings++ if ($strike_start->epoch < $now->epoch);
./enter/menu.mas:%	my $tourn = $school->tourn;
./enter/menu.mas:			<a href="/user/enter/entry.mhtml?school_id=<% $school->id %>">General</a>
./enter/menu.mas:%		if ($tourn->setting("onsite_registration")) { 
./enter/menu.mas:%			my $onsite_starts = $tourn->setting("onsite_starts");
./enter/menu.mas:%			$onsite_starts->set_time_zone($tz) if $onsite_starts;
./enter/menu.mas:%			my $onsite_ends = $tourn->setting("onsite_ends");
./enter/menu.mas:				<li class="<% ($whoami eq "onsite") ? "selected" : "" %> <% $school->onsite ? "" : "warning" %>">
./enter/menu.mas:					<a href="/user/enter/onsite.mhtml?school_id=<% $school->id %>">Onsite Confirmation</a>
./enter/menu.mas:			<a href="/user/enter/students.mhtml?school_id=<% $school->id %>">Entries</a>
./enter/menu.mas:			<a href="/user/enter/judges.mhtml?school_id=<% $school->id %>">Judges</a>
./enter/menu.mas:%		if ($tourn->setting("housing")) { 
./enter/menu.mas:				<a href="/user/enter/housing.mhtml?school_id=<% $school->id %>">Housing</a>
./enter/menu.mas:%		if ($tourn->concessions) {
./enter/menu.mas:				<a href="/user/enter/concessions.mhtml?school_id=<% $school->id %>">
./enter/menu.mas:					<% ($tourn->setting("concession_name")) ? $tourn->setting("concession_name") : "Concessions" %>
./enter/menu.mas:    foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) {
./enter/menu.mas:		my @entries= $m->comp("/funclib/category_entries.mas", category => $other_category, school => $school, preffable => 1);
./enter/menu.mas:        my $pref_style = $ocategory->setting("prefs");
./enter/menu.mas:			my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./enter/menu.mas:				<a href="/user/enter/ratings/index.mhtml?school_id=<% $school->id %>">Prefs</a>
./enter/menu.mas:			<a href="/index/tourn/index.mhtml?tourn_id=<% $tourn->id %>">Website</a>
./student/entry.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./student/entry.mhtml:	$m->abort unless $entry;
./student/entry.mhtml:	my $tz = $entry->event->tourn->tz;
./student/entry.mhtml:	$tz = $person->tz unless $tz;
./student/entry.mhtml:	my $now = DateTime->now(time_zone => $tz);
./student/entry.mhtml:%			my $prefs = $entry->event->category->setting("prefs");
./student/entry.mhtml:%			if ($prefs eq "ndt" && $entry->school->chapter->self_prefs) { 
./student/entry.mhtml:%				my $prefs_start = $entry->event->category->setting("strike_start");
./student/entry.mhtml:%				$prefs_start->set_time_zone($tz) if $prefs_start;
./student/entry.mhtml:					<a class="blue full" href="/user/enter/ratings/ordinals_prefs.mhtml?entry_id=<% $entry->id %>&school_id=<% $entry->school->id %>&category_id=<% $entry->event->category->id %>#yo">
./student/entry.mhtml:						Prefs for <% $entry->code %>
./student/entry.mhtml:%				my $elim_prefs_start = $entry->event->category->setting("elim_strike_start");
./student/entry.mhtml:%				$elim_prefs_start->set_time_zone($tz) if $elim_prefs_start;
./student/entry.mhtml:					<a class="blue full" href="/user/enter/ratings/caps_prefs.mhtml?entry_id=<% $entry->id %>&school_id=<% $entry->school->id %>&category_id=<% $entry->event->category->id %>#yo">
./student/entry.mhtml:						Elim Prefs for <% $entry->code %>
./student/entry.mhtml:%			} elsif ($prefs && $entry->school->chapter->self_prefs) { 
./student/entry.mhtml:%				my $prefs_start = $entry->event->category->setting("strike_start");
./student/entry.mhtml:%				$prefs_start->set_time_zone($tz) if $prefs_start;
./student/entry.mhtml:					<a class="blue full" href="/user/enter/ratings/<% $prefs %>_prefs.mhtml?entry_id=<% $entry->id %>&school_id=<% $entry->school->id %>&category_id=<% $entry->event->category->id %>#yo">
./student/entry.mhtml:						Prefs for <% $entry->code %>
./student/entry.mhtml:					<% $entry->event->name %>
./student/entry.mhtml:					<% $entry->code %>
./student/entry.mhtml:					<% $entry->name %>
./student/history.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./student/history.mhtml:	$m->abort unless $tourn;
./student/history.mhtml:		$student = Tab::Student->retrieve($student_id);
./student/history.mhtml:		@panels = $m->comp("/funclib/student_panels.mas", student => $student, tourn => $tourn);
./student/history.mhtml:		@done_panels = $m->comp("/funclib/student_panels.mas", student => $student, done => 1, tourn => $tourn);
./student/history.mhtml:		$ok++ if $person->site_admin;
./student/history.mhtml:		$ok++ if $student->person && $student->person->id == $person->id;
./student/history.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/history.mhtml:			$ok++ if $admin->id == $person->id;
./student/history.mhtml:			$m->redirect("/user/home.mhtml?err=$err");
./student/history.mhtml:		@panels = $m->comp("/funclib/person_student_panels.mas", person => $person, student => 1, tourn => $tourn);
./student/history.mhtml:		@done_panels = $m->comp("/funclib/person_student_panels.mas", person => $person, done => 1, student => 1, tourn => $tourn);
./student/history.mhtml:	my $now = DateTime->now;
./student/history.mhtml:			<h2><% $student->chapter->name %></h2>
./student/history.mhtml:			<& /user/chapter/tabbar.mas, chapter => $student->chapter, whoami => "students" &> 
./student/history.mhtml:					<h4><% $student->first." ".$student->last %></h4>
./student/history.mhtml:					<a class="dkblue button centeralign" href="index.mhtml?student_id=<% $student->id %>">
./student/history.mhtml:			<h2>Your <% $tourn->name %> Results</h2>
./student/history.mhtml:			<h4><% $tourn->name %> Rounds w/o Results</h4>
./student/history.mhtml:					my $event = $panel->round->event;
./student/history.mhtml:					my $tz = $event->tourn->tz;
./student/history.mhtml:					my $aff_string = $event->setting("aff_label");
./student/history.mhtml:					my $neg_string = $event->setting("neg_label");
./student/history.mhtml:							<% $panel->round->realname %>
./student/history.mhtml:							<% Tab::niceshortdt($panel->round->timeslot->start) %> <% $tzname %>
./student/history.mhtml:							<% $panel->room ? $panel->room->name : "No Room" %>
./student/history.mhtml:%							if ($event->type eq "wudc") { 
./student/history.mhtml:								<% $panel->pos == 1 ? "1st Gov" : "" %>
./student/history.mhtml:								<% $panel->pos == 2 ? "1st Opp" : "" %>
./student/history.mhtml:								<% $panel->pos == 3 ? "2nd Gov" : "" %>
./student/history.mhtml:								<% $panel->pos == 4 ? "2nd Opp" : "" %>
./student/history.mhtml:%							} elsif ($panel->round->event->type eq "speech") { 
./student/history.mhtml:								<% Lingua::EN::Numbers::Ordinate::ordinate($panel->pos) %>
./student/history.mhtml:								<% $panel->bye ? "Bye" : $panel->side == 1 ? $aff_string : $neg_string %>
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%									if ($judge->person && $judge->person > 0) {
./student/history.mhtml:										<a href="/jbruschke/JudgeRecord.php?judgeid=<% $judge->person->id %>" class="white">
./student/history.mhtml:									<% $judge->first." ".$judge->last %> 
./student/history.mhtml:									(<% $judge->school ? $judge->school->short_name : "Hire" %>)
./student/history.mhtml:			<h4><% $tourn->name %> Published Results</h4>
./student/history.mhtml:					my $entry = Tab::Entry->retrieve($panel->entryid);
./student/history.mhtml:					my $event = $panel->round->event;
./student/history.mhtml:					my $aff_string = $event->setting("aff_label");
./student/history.mhtml:					my $neg_string = $event->setting("neg_label");
./student/history.mhtml:					foreach my $student ($entry->students) { 
./student/history.mhtml:						$student_by_id{$student->id} = $student;
./student/history.mhtml:							<% $panel->round->realname %>
./student/history.mhtml:%							if ($event->type eq "wudc") { 
./student/history.mhtml:								<% $panel->pos == 1 ? "1st Gov" : "" %>
./student/history.mhtml:								<% $panel->pos == 2 ? "1st Opp" : "" %>
./student/history.mhtml:								<% $panel->pos == 3 ? "2nd Gov" : "" %>
./student/history.mhtml:								<% $panel->pos == 4 ? "2nd Opp" : "" %>
./student/history.mhtml:%							} elsif ($event->type eq "speech") { 
./student/history.mhtml:								<% Lingua::EN::Numbers::Ordinate::ordinate($panel->pos) %>
./student/history.mhtml:								<% $panel->bye ? "Bye" : $panel->side == 1 ? $aff_string : $neg_string %>
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%									if ($judge->person && $judge->person > 0) {
./student/history.mhtml:										<a href="/jbruschke/JudgeRecord.php?judgeid=<% $judge->person->id %>" class="white nospace" target="_blank">
./student/history.mhtml:									<% $judge->first." ".$judge->last %> 
./student/history.mhtml:									(<% $judge->school ? $judge->school->short_name : "Hire" %>)
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%								my @scores = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry_id => $panel->entryid);
./student/history.mhtml:%									if ($panel->round->post_results > 0) {
./student/history.mhtml:												<% $score->tag eq "ballot" ? $score->value == 1 ? "W" : "L" : ""%>
./student/history.mhtml:%									if ($panel->round->post_results == 2) {
./student/history.mhtml:%										foreach my $student ($entry->students) { 
./student/history.mhtml:%													next if $score->tag eq "ballot";
./student/history.mhtml:%													next unless $score->studentid == $student->id;
./student/history.mhtml:													<% $score->tag eq "points" ? $score->value : "" %>
./student/history.mhtml:													<% $score->tag eq "rank" ? Lingua::EN::Numbers::Ordinate::ordinate($score->value) : "" %>
./student/history.mhtml:												- <% $student->last %>
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%								my @values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, rfd => "rfd", entry => $entry);
./student/history.mhtml:									<a target="_blank" class="dkblue marno button" href="rfd_view.mhtml?entry_id=<% $entry->id %>&panel_id=<% $panel->id %>&judge_id=<% $judge->id %>">
./student/drop_entry_student.mhtml:	my $student = Tab::Student->retrieve($student_id);
./student/drop_entry_student.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./student/drop_entry_student.mhtml:	my @entry_student = Tab::EntryStudent->search(entry=>$entry_id, student=>$student_id);
./student/drop_entry_student.mhtml:		my @ballot = Tab::Ballot->search(entry=>$entry_id);
./student/drop_entry_student.mhtml:			my @score = Tab::Score->search(ballot=>$ballot->id, student=>$student_id );
./student/drop_entry_student.mhtml:				if ($killit eq "DEATH") {$score->delete;}
./student/drop_entry_student.mhtml:		if ($killit eq "DEATH") {$dummy->delete;}
./student/drop_entry_student.mhtml:	if ($killit eq "DEATH") {$m->redirect("/user/student/index.mhtml?err=&msg=Entry successfully dropped");}
./student/drop_entry_student.mhtml:% if (lc $confirm_delete ne "i am certain" and $confirm_delete ne "") {print "<br>CONFIRMATION ENTRY INVVALID -- DELETE <strong>NOT</strong> PERFORMED.  Correctly type the phrase below or click the Exit Now link.<br><br>";}
./student/drop_entry_student.mhtml:This will delete <strong><% $student->first %> <% $student->last %> </strong>from the team <% $entry->name %><br><br>
./student/drop_entry_student.mhtml:To confirm that you wish to delete this competitor from this entry and all ballots associated with the competitor (but not the entry), click the button below.  Think carefully -- there is no going back.<br><br><br>
./student/index.mhtml:		my $student = Tab::Student->retrieve($student_id);
./student/index.mhtml:		@panels = $m->comp("/funclib/student_panels.mas", student => $student);
./student/index.mhtml:		@done_panels = $m->comp("/funclib/student_panels.mas", student => $student, done => 1);
./student/index.mhtml:		$ok++ if $person->site_admin;
./student/index.mhtml:		$ok++ if $student->person && $student->person->id == $person->id;
./student/index.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/index.mhtml:			$ok++ if $admin->id == $person->id;
./student/index.mhtml:			$m->redirect("/user/home.mhtml?err=$err");
./student/index.mhtml:		@students = Tab::Student->search( person => $person->id );
./student/index.mhtml:		@panels = $m->comp("/funclib/person_student_panels.mas", person => $person, student => 1);
./student/index.mhtml:		@done_panels = $m->comp("/funclib/person_student_panels.mas", person => $person, done => 1, student => 1);
./student/index.mhtml:	my $now = DateTime->now;
./student/index.mhtml:			<h2><% $student->chapter->name %></h2>
./student/index.mhtml:			<& /user/chapter/tabbar.mas, chapter => $student->chapter, whoami => "students" &> 
./student/index.mhtml:					<h4><% $student->first." ".$student->last %></h4>
./student/index.mhtml:					<a class="dkblue padmuchmore centeralign" href="/user/chapter/students.mhtml?chapter_id=<% $student->chapter->id %>">
./student/index.mhtml:					my $event = $panel->round->event;
./student/index.mhtml:					my $tz = $panel->round->event->tourn->tz;
./student/index.mhtml:					my $aff_string = $event->setting("aff_label");
./student/index.mhtml:					my $neg_string = $event->setting("neg_label");
./student/index.mhtml:							<% $panel->round->realname %>
./student/index.mhtml:							<% Tab::niceshortdt($panel->round->timeslot->start) %> <% $tzname %>
./student/index.mhtml:							<% $panel->room ? $panel->room->name : "No Room" %>
./student/index.mhtml:%							if ($event->type eq "wudc") { 
./student/index.mhtml:								<% $panel->pos == 1 ? "1st Gov" : "" %>
./student/index.mhtml:								<% $panel->pos == 2 ? "1st Opp" : "" %>
./student/index.mhtml:								<% $panel->pos == 3 ? "2nd Gov" : "" %>
./student/index.mhtml:								<% $panel->pos == 4 ? "2nd Opp" : "" %>
./student/index.mhtml:%							} elsif ($event->type eq "speech") { 
./student/index.mhtml:								<% Lingua::EN::Numbers::Ordinate::ordinate($panel->pos) %>
./student/index.mhtml:								<% $panel->bye ? "Bye" : $panel->side == 1 ? $aff_string : $neg_string %>
./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/index.mhtml:%								if ($judge->person && $judge->person > 0) {
./student/index.mhtml:									<a href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" class="white">
./student/index.mhtml:								<% $judge->first." ".$judge->last %> 
./student/index.mhtml:								(<% $judge->school ? $judge->school->short_name : "Hire" %>)
./student/index.mhtml:%								if ($judge->person && $judge->person > 0) {
./student/index.mhtml:%					my $entry = Tab::Entry->retrieve($panel->entryid);
./student/index.mhtml:%					foreach my $student ($entry->students) { 
./student/index.mhtml:%						$student_by_id{$student->id} = $student;
./student/index.mhtml:							<% $panel->round->realname %>
./student/index.mhtml:%							if ($panel->round->event->type eq "debate" 
./student/index.mhtml:%									|| $panel->round->event->type eq "policy" 
./student/index.mhtml:%									|| $panel->round->event->type eq "ld") { 
./student/index.mhtml:								<% $panel->bye ? "Bye" : $panel->side == 1 ? "Aff" : "Neg" %>
./student/index.mhtml:%							} elsif ($panel->round->event->type eq "pf") { 
./student/index.mhtml:								<% $panel->bye ? "Bye" : $panel->side == 1 ? "Pro" : "Con" %>
./student/index.mhtml:%							} elsif ($panel->round->event->type eq "wudc") { 
./student/index.mhtml:								<% $panel->pos == 1 ? "1st Gov" : "" %>
./student/index.mhtml:								<% $panel->pos == 2 ? "1st Opp" : "" %>
./student/index.mhtml:								<% $panel->pos == 3 ? "2nd Gov" : "" %>
./student/index.mhtml:								<% $panel->pos == 4 ? "2nd Opp" : "" %>
./student/index.mhtml:%							} elsif ($panel->round->event->type eq "speech") { 
./student/index.mhtml:								<% Lingua::EN::Numbers::Ordinate::ordinate($panel->pos) %>
./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/index.mhtml:%								if ($judge->person && $judge->person > 0) {
./student/index.mhtml:									<a href="/index/paradigm.mhtml?judge_person_id=<% $judge->person->id %>" class="white">
./student/index.mhtml:									<% $judge->first." ".$judge->last %> 
./student/index.mhtml:									(<% $judge->school ? $judge->school->short_name : "Hire" %>)
./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/index.mhtml:%								my @scores = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry_id => $panel->entryid);
./student/index.mhtml:%									if ($panel->round->post_results > 0) {
./student/index.mhtml:												<% $score->tag eq "ballot" ? $score->value == 1 ? "W" : "L" : ""%>
./student/index.mhtml:%									if ($panel->round->post_results == 2) {
./student/index.mhtml:%										foreach my $student ($entry->students) { 
./student/index.mhtml:%													my $rfd = $score->content if $score->tag eq "rfd";
./student/index.mhtml:%													my $comments = $score->content if $score->tag eq "comments";
./student/index.mhtml:%													next if $score->tag eq "ballot";
./student/index.mhtml:%													next unless $score->studentid != $student->id;
./student/index.mhtml:													<% $score->tag eq "points" ? $score->value : "" %>
./student/index.mhtml:													<% $score->tag eq "rank" ? Lingua::EN::Numbers::Ordinate::ordinate($score->value) : "" %>
./student/index.mhtml:												- <% $student->last %>
./student/index.mhtml:%										@values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, rfd => "rfd", entry => $entry);
./student/index.mhtml:											<a target="_blank" class="dkblue" href="rfd_view.mhtml?entry_id=<% $entry->id %>&panel_id=<% $panel->id %>&judge_id=<% $judge->id %>">
./student/index.mhtml:%		foreach my $student (sort {$b->id <=> $a->id} @students) { 
./student/index.mhtml:%			if ($student->chapter) { 
./student/index.mhtml:%				foreach my $circuit ($student->chapter->circuits) {
./student/index.mhtml:%					$ndt++ if $circuit->id == 43;
./student/index.mhtml:				<& /funclib/tablesorter.mas, table => $student->id &>
./student/index.mhtml:				<table cellpadding="4" cellspacing="1" id="<% $student->id %>">
./student/index.mhtml:						<!-- <th class="smaller">
./student/index.mhtml:						</th> -->
./student/index.mhtml:%					foreach my $entry (sort {$b <=> $a} $student->entries) { 
./student/index.mhtml:%						next unless $entry->event && $entry->event->tourn;
./student/index.mhtml:%						my $tourn = $entry->event->tourn;
./student/index.mhtml:%						next if $tourn->end > $now;
./student/index.mhtml:%						my $tz = $tourn->tz;
./student/index.mhtml:								<a class="dkgreen padmore" href="history.mhtml?tourn_id=<% $tourn->id %><% $student_id ? "&student_id=$student_id" : ""%>">
./student/index.mhtml:								<% $tourn->name %>
./student/index.mhtml:								<% Tab::pickerdate($tourn->start->set_time_zone($tz)) %>
./student/index.mhtml:								<% $entry->code %>
./student/index.mhtml:								<% $entry->event->name %>
./student/index.mhtml:							<!-- <td class="smaller centeralign nowrap">
./student/index.mhtml:								<a class="dkred" href="drop_entry_student.mhtml?student_id=<% $student->id %>&entry_id=<% $entry->id %>">
./student/index.mhtml:							</td> -->
./student/index.mhtml:					my $ok++ if $student->person && $student->person->id == $person->id;
./student/index.mhtml:					foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/index.mhtml:						$ok++ if $admin->id == $person->id;
./student/index.mhtml:					$ok++ if $person->site_admin;
./student/index.mhtml:						$m->redirect("/user/home.mhtml?err=$err");
./student/index.mhtml:					my $tz = $person->tz;
./student/index.mhtml:					my $now = DateTime->now->set_time_zone($tz);
./student/index.mhtml:					my $year = $now->year;
./student/index.mhtml:					$year-- if $now->month < 8;
./student/index.mhtml:					my $limit = $year."-07-01 00:00:00";
./student/index.mhtml:					Tab::Student->set_sql( partners => "
./student/index.mhtml:					<h4><% $student->first." ".$student->last %> honors</h4>
./student/index.mhtml:							<a class="dkblue padmuchmore centeralign" href="/user/chapter/ndt_bid_honors.mhtml?student_id=<% $student->id %>&chapter_id=<% $student->chapter %>">
./student/index.mhtml:					my @partners = Tab::Student->search_partners( $student->id, $limit );
./student/index.mhtml:						Tab::Result->set_sql( honors => "
./student/index.mhtml:						my @p_results = Tab::Result->search_honors( $partner->id, $limit );
./student/index.mhtml:							@{$partner_results{$partner->id}} = @p_results;
./student/index.mhtml:								<h4>Partner: <% $other->first." ".$other->last %></h4>
./student/index.mhtml:								<a class="dkblue padmuchmore centeralign" href="/jbruschke/TeamBidSheet.php?id1=<% $other->id %>&id2=<% $student->id %>">
./student/index.mhtml:									NDT Bid Sheet w/<% $other->last %>
./student/conflict_rm.mhtml:		$m->redirect("/user/judge/conflicts.mhtml?err=$err");
./student/conflict_rm.mhtml:	my $conflict = Tab::Conflict->retrieve($conflict_id);
./student/conflict_rm.mhtml:		unless ($conflict->person->id == $person->id || $person->site_admin) { 
./student/conflict_rm.mhtml:			$m->redirect("/user/judge/conflicts.mhtml?err=$err");
./student/conflict_rm.mhtml:		$msg = "Conflict against ".$conflict->conflicted->last." removed" if $conflict->conflicted;
./student/conflict_rm.mhtml:		$msg = "Conflict against ".$conflict->chapter->name." removed" if $conflict->chapter;
./student/conflict_rm.mhtml:		$conflict->delete;
./student/conflict_rm.mhtml:	$m->redirect("/user/judge/conflicts.mhtml?msg=$msg");
./student/follow.mhtml:%		my @students = Tab::Student->search_like( first => $first."%", last => $last."%", person => 0 );
./student/follow.mhtml:%				next if $student->person->id;
./student/follow.mhtml:%				next if $student->person_request && $student->person_request->id == $person->id;
./student/follow.mhtml:						<% $student->first." ".$student->last %>
./student/follow.mhtml:						<% ($student->chapter) ? $student->chapter->name : "" %>
./student/follow.mhtml:						<% (scalar $student->entry_students) %> tournaments
./student/follow.mhtml:						<a class="dkblue block" href="claim.mhtml?student_id=<% $student->id %>">
./student/claim.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./student/claim.mhtml:	$m->abort unless $student;
./student/claim.mhtml:	$confirm = "I am this actual person" if $person->first eq $student->first && $person->last eq $student->last;
./student/claim.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/claim.mhtml:			if ($admin->id == $person->id) { 
./student/claim.mhtml:				$student->person($person->id);
./student/claim.mhtml:				$student->update; 
./student/claim.mhtml:				$m->redirect("search.mhtml?msg=$msg");
./student/claim.mhtml:		$student->person_request($person->id);
./student/claim.mhtml:		$student->update;
./student/claim.mhtml:		my $subject = "[TabRoom] ". $person->email." requests access to student ".$student->first." ".$student->last;
./student/claim.mhtml:		my $body = "The holder of the Tabroom login ".$person->first." ".$person->last." (".$person->email.") \n";
./student/claim.mhtml:		$body .= $student->first." ".$student->last."\n\n on your team roster.\n";
./student/claim.mhtml:			$m->comp("/funclib/send_email.mas", from => $person, to => $admin, subject => $subject, body => $body);
./student/claim.mhtml:		my $msg = "You have requested access to the judge ".$student->first." ".$student->last." from the team admins.";
./student/claim.mhtml:		$m->redirect("search.mhtml?msg=$msg");
./student/claim.mhtml:				Your name <strong><% $person->first." ".$person->last %></strong> is not the same as the contestant record's
./student/claim.mhtml:				<strong> <% $student->first." ".$student->last %></strong>.
./student/conflicts.mhtml:		my $other = Tab::Person->retrieve($other_id);
./student/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, conflicted => $other_id );
./student/conflicts.mhtml:				Tab::Conflict->create({
./student/conflicts.mhtml:					person     => $person->id,
./student/conflicts.mhtml:					added_by   => $person->id,
./student/conflicts.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./student/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, chapter => $chapter_id );
./student/conflicts.mhtml:				Tab::Conflict->create({
./student/conflicts.mhtml:					person   => $person->id,
./student/conflicts.mhtml:					added_by => $person->id,
./student/conflicts.mhtml:		@persons = Tab::Person->search_where( last => { "like", $search_last."%" }, email => { "like", $search_email."%" } );
./student/conflicts.mhtml:		@persons = Tab::Person->search_where( email => { "like", $search_email."%" } );
./student/conflicts.mhtml:		@persons = Tab::Person->search_where( last => { "like", $search_last."%" } );
./student/conflicts.mhtml:		@chapters = Tab::Chapter->search_where( name => { "like", $search_chapter."%" } );
./student/conflicts.mhtml:	my @existings = Tab::Conflict->search( person => $person->id );
./student/conflicts.mhtml:%					my @students = Tab::Student->search( person => $other->id );
./student/conflicts.mhtml:%					my @chapter_judges = Tab::ChapterJudge->search( person => $other->id );
./student/conflicts.mhtml:%						push @chapters, $person->chapter if $person->chapter;
./student/conflicts.mhtml:								<% $other->first %> <% $other->middle %> <% $other->last %>
./student/conflicts.mhtml:							<a class="dkblue button martopmore" href="conflicts.mhtml?other_id=<% $other->id %>">
./student/conflicts.mhtml:									<% $chapter->name %> 
./student/conflicts.mhtml:							<% $existing->conflicted->id ? $existing->conflicted->first." ".$existing->conflicted->last : "" %>
./student/conflicts.mhtml:							<a class="dkred button" href="conflict_rm.mhtml?conflict_id=<% $existing->id %>">
./student/search.mhtml:		$first = $person->first;
./student/search.mhtml:		$last = $person->last;
./student/search.mhtml:	my @students = Tab::Student->search_like( first => $first."%", last => $last."%", person => 0 );
./student/search.mhtml:%				next if $student->person->id;
./student/search.mhtml:%				next if $student->person_request && $student->person_request->id == $person->id;
./student/search.mhtml:						<% $student->first." ".$student->last %>
./student/search.mhtml:						<% ($student->chapter) ? $student->chapter->name : "" %>
./student/search.mhtml:						<% (scalar $student->entry_students) %> tournaments
./student/search.mhtml:						<a class="dkblue block" href="claim.mhtml?student_id=<% $student->id %>">
./student/search.mhtml:				on a per-tournament basis for other entrants.
./student/search.mhtml:%			foreach my $acc_student ($person->students) { 
./student/search.mhtml:				<a class="yellow block" href="history.mhtml?student_id=<% $acc_student->id %>">
./student/search.mhtml:					<% $acc_student->chapter ? $acc_student->chapter->name : "" %>
./student/search.mhtml:%			foreach my $entry ($m->comp("/funclib/person_entries.mas", person => $person, all => 1)) { 
./student/search.mhtml:				<a class="nowrap blue block" href="entry.mhtml?entry_id=<% $entry->id %>">
./student/search.mhtml:					<% $entry->event->abbr %> at <% $entry->event->tourn->name %>
./student/search.mhtml:			<a class="yellow block" href="index.mhtml?person_id=<% $person->id %>" style="margin-top: 10px;">
./student/rfd_view.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./student/rfd_view.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./student/rfd_view.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./student/rfd_view.mhtml:	my @values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry => $entry);
./student/rfd_view.mhtml:				<h2><% $panel->round->event->tourn->name %></h2>
./student/rfd_view.mhtml:				<h3><% $entry->code %></h3>
./student/rfd_view.mhtml:				<h4><% $panel->round->realname %> decision from <% $judge->first." ".$judge->last %></h4>
./student/rfd_view.mhtml:%					next unless $value->tag eq "ballot";
./student/rfd_view.mhtml:					<h5> <% $value->value == 1 ? "WIN" : "LOSS" %></h5>
./student/rfd_view.mhtml:%				foreach my $student ($entry->students) { 
./student/rfd_view.mhtml:							<% $student->last %>:
./student/rfd_view.mhtml:%						next unless $value->tag eq "points" && $value->student && $value->student->id == $student->id;
./student/rfd_view.mhtml:							<% $value->value %>
./student/rfd_view.mhtml:%						next unless $value->tag eq "rank" && $value->student && $value->student->id == $student->id;
./student/rfd_view.mhtml:							<% $value->value %>
./student/rfd_view.mhtml:%			if ($value->tag eq "rfd") { 
./student/rfd_view.mhtml:					<% $value->content %>
./student/rfd_view.mhtml:%			if ($value->tag eq "comments") { 
./student/rfd_view.mhtml:					<% $value->content %>
./diocese/tourn_school_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./diocese/tourn_school_save.mhtml:	my $hotel = Tab::Hotel->retrieve($hotel_id) if $hotel_id;
./diocese/tourn_school_save.mhtml:	my $invalid = Email::Valid->address( -address => $contact_email, -mxcheck => 1 ) ? 'yes' : 'no' if $contact_email;
./diocese/tourn_school_save.mhtml:	$school->name($name);
./diocese/tourn_school_save.mhtml:	$school->update;
./diocese/tourn_school_save.mhtml:	$school->setting("contact_name", $contact_name);
./diocese/tourn_school_save.mhtml:	$school->setting("contact_email", $contact_email);
./diocese/tourn_school_save.mhtml:	$school->setting("contact_number", $contact_number);
./diocese/tourn_school_save.mhtml:	$school->setting("hotel", $hotel->id);
./diocese/tourn_school_save.mhtml:	my $chapter = $school->chapter;
./diocese/tourn_school_save.mhtml:	$chapter->coaches($coaches);
./diocese/tourn_school_save.mhtml:	$chapter->update;
./diocese/tourn_school_save.mhtml:		$m->redirect("tourn_school_edit.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&school_id=$school_id&missing=$missing&err=$err");
./diocese/tourn_school_save.mhtml:	$m->redirect("tourn_schools.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/invoice_school_print.mhtml:	my $tz = $tourn->tz;
./diocese/invoice_school_print.mhtml:    my $now = DateTime->now->set_time_zone($tz);
./diocese/invoice_school_print.mhtml:	my $filename = "Diocese-SchoolInvoices-".$region->name;
./diocese/invoice_school_print.mhtml:	my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/invoice_school_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, array => "1.8" );
./diocese/invoice_school_print.mhtml:	foreach my $school (Tab::School->search( region => $region->id, tourn => $tourn->id)) { 
./diocese/invoice_school_print.mhtml:		my ($total, $payments, $feline_ref) = $m->comp("/funclib/ncfl/fees.mas", diocese => $region, tourn => $tourn, school => $school);
./diocese/invoice_school_print.mhtml:		print TEXOUT "\\hfill {\\Large ". Tab::texify($tourn->name)." ".$tourn->start->year."}\n";
./diocese/invoice_school_print.mhtml:		print TEXOUT "& {\\small\\bf Diocese}: & ". &Tab::texify($region->name) ." ";
./diocese/invoice_school_print.mhtml:		foreach my $director ($region->admins) { 
./diocese/invoice_school_print.mhtml:			print TEXOUT &Tab::texify($director->first." ".$director->last);
./diocese/invoice_school_print.mhtml:		print TEXOUT "& {\\small\\bf Diocese Code:} & ". &Tab::texify($region->code) ." ";
./diocese/invoice_school_print.mhtml:		print TEXOUT "& {\\small\\bf School:} & ".&Tab::texify($school->name)." \\\\ \n ";
./diocese/invoice_school_print.mhtml:		print TEXOUT "& {\\small\\bf Coaches}: & ". &Tab::texify($school->chapter->coaches) ." \\\\ \n ";
./diocese/invoice_school_print.mhtml:				print TEXOUT "{\\small\\bf Diocese}: & ". &Tab::texify($region->name) ." (Continued) \\\\ \n";
./diocese/invoice_school_print.mhtml:				print TEXOUT $now->month."/".$now->day."/".$now->year." ";
./diocese/invoice_school_print.mhtml:				print TEXOUT $now->hour_12.":".$now->strftime('%M')." ".$now->strftime('%p')." \\\\ \n";
./diocese/invoice_school_print.mhtml:				$count= -4;
./diocese/invoice_school_print.mhtml:			print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($count % 2) && $line->{'fee'} > 0;
./diocese/invoice_school_print.mhtml:			print TEXOUT "\\rowcolor[rgb]{1,.95,.95}\[5.5pt\]\[5.5pt\]\n" if $line->{'fee'} < 0;
./diocese/invoice_school_print.mhtml:			print TEXOUT &Tab::texify($line->{'name'})." & ";
./diocese/invoice_school_print.mhtml:			print TEXOUT "\\\$".sprintf ("%.2f", abs($line->{'fee'}));
./diocese/invoice_school_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./diocese/tourn_school_edit.mhtml:	my $tz = $person->tz;
./diocese/tourn_school_edit.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_school_edit.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./diocese/tourn_school_edit.mhtml:	$drop_deadline->set_time_zone($tz);
./diocese/tourn_school_edit.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./diocese/tourn_school_edit.mhtml:			$m->print("That school was not found.  Hit back and try again");
./diocese/tourn_school_edit.mhtml:			$m->abort;
./diocese/tourn_school_edit.mhtml:		$school = Tab::School->search({ chapter => $chapter->id, tourn => $tourn->id })->first;
./diocese/tourn_school_edit.mhtml:		$school = Tab::School->create({
./diocese/tourn_school_edit.mhtml:			tourn      => $tourn->id,
./diocese/tourn_school_edit.mhtml:			chapter    => $chapter->id,
./diocese/tourn_school_edit.mhtml:			name       => $chapter->name,
./diocese/tourn_school_edit.mhtml:			region     => $region->id,
./diocese/tourn_school_edit.mhtml:		$school->setting("entered_on", "date", $now);
./diocese/tourn_school_edit.mhtml:		$school->setting("contact", $person->id);
./diocese/tourn_school_edit.mhtml:		$school = Tab::School->retrieve($school_id);
./diocese/tourn_school_edit.mhtml:		$m->print("School was not found.  Hit back and try again");
./diocese/tourn_school_edit.mhtml:		$m->abort;
./diocese/tourn_school_edit.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn_school_edit.mhtml:				<h4>Edit <% $school->short_name %>'s details</h4>
./diocese/tourn_school_edit.mhtml:		<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_school_edit.mhtml:		<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn_school_edit.mhtml:		<input type="hidden" name="school_id" value="<% $school->id %>">
./diocese/tourn_school_edit.mhtml:				<input type="text" name="name" value="<% $school->name %>" size="32">
./diocese/tourn_school_edit.mhtml:				<input type="text" name="coaches" value="<% $school->chapter->coaches %>" size="32">
./diocese/tourn_school_edit.mhtml:				<input type="text" name="contact_name" value="<% $school->setting("contact_name") %>" size="32">
./diocese/tourn_school_edit.mhtml:					<input type="email" name="contact_email" value="<% $school->setting("contact_email") %>" size="32">
./diocese/tourn_school_edit.mhtml:					<input type="tel" name="contact_number" value="<% Tab::phoneme($school->setting("contact_number")) %>" size="32">
./diocese/tourn_school_edit.mhtml:					<input type="tel" name="contact_number" value="<% $school->setting("contact_number") %>" size="32">
./diocese/tourn_school_edit.mhtml:%					foreach my $hotel (sort {$a->name cmp $b->name} $tourn->hotels) { 
./diocese/tourn_school_edit.mhtml:						<option value="<% $hotel->id %>">	
./diocese/tourn_school_edit.mhtml:							<% $hotel->name %> <% $hotel->multiple > 1 ? "(Entry fee surcharge of ".$hotel->multiple."X applies)" : "" %>
./diocese/tourn_school_edit.mhtml:%				my $warn = "This will drop all entries and judges from ".$school->short_name."  Please be sure before hitting OK.  OK?";
./diocese/tourn_school_edit.mhtml:				<a class="yellow full" href="tourn_school_drop.mhtml?school_id=<% $school->id %>&region_id=<% $region->id %>&tourn_id=<% $tourn->id %>" <& "/funclib/confirm.mas", warn => $warn &>>
./diocese/tourn_school_edit.mhtml:					Utterly Drop <% $school->short_name %>
./diocese/tourn_school_create.mhtml:	my $tz = $person->tz;
./diocese/tourn_school_create.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_school_create.mhtml:		$m->redirect("tourn_schools.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/tourn_school_create.mhtml:	Tab::Chapter->set_sql( by_fucking_name => "
./diocese/tourn_school_create.mhtml:	my $chapter = Tab::Chapter->search_by_fucking_name( $name, $region->id )->first;
./diocese/tourn_school_create.mhtml:	my $circuit = $region->circuit;
./diocese/tourn_school_create.mhtml:		$m->redirect("tourn_schools.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/tourn_school_create.mhtml:	$chapter = Tab::Chapter->create({
./diocese/tourn_school_create.mhtml:	my $chapter_circuit = Tab::ChapterCircuit->create({
./diocese/tourn_school_create.mhtml:		chapter => $chapter->id,
./diocese/tourn_school_create.mhtml:		circuit => $circuit->id,
./diocese/tourn_school_create.mhtml:		region => $region->id
./diocese/tourn_school_create.mhtml:	$m->redirect("tourn_school_edit.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&chapter_id=".$chapter->id);
./diocese/tourn_school_drop.mhtml:	my $school = Tab::School->retrieve($school_id);
./diocese/tourn_school_drop.mhtml:	unless ($school && $school->id) { 
./diocese/tourn_school_drop.mhtml:		$m->redirect("/user/diocese/tourn_schools.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&err=$err");
./diocese/tourn_school_drop.mhtml:	unless ($school->region->id == $region->id) { 
./diocese/tourn_school_drop.mhtml:		$m->redirect("/user/diocese/tourn_schools.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&err=$err");
./diocese/tourn_school_drop.mhtml:	foreach my $entry ($school->entries) { 
./diocese/tourn_school_drop.mhtml:		foreach my $strike (Tab::Strike->search(entry => $entry->id)) { $strike->delete;}
./diocese/tourn_school_drop.mhtml:		foreach my $student ($entry->students) { 
./diocese/tourn_school_drop.mhtml:			foreach my $housing ($m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn)) {
./diocese/tourn_school_drop.mhtml:				$housing->delete if $housing; 
./diocese/tourn_school_drop.mhtml:		$entry->delete;
./diocese/tourn_school_drop.mhtml:	foreach my $judge ($school->judges) { 
./diocese/tourn_school_drop.mhtml:		foreach my $strike ($judge->strikes) { 
./diocese/tourn_school_drop.mhtml:			$strike->delete;
./diocese/tourn_school_drop.mhtml:		foreach my $housing ($m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn)) {
./diocese/tourn_school_drop.mhtml:			$housing->delete if $housing;
./diocese/tourn_school_drop.mhtml:		$judge->delete;
./diocese/tourn_school_drop.mhtml:   if ($tourn->setting("track_reg_changes")) {
./diocese/tourn_school_drop.mhtml:        my $description = $person->first." ".$person->last." dropped the entire entry for ".$school->name.".  Bummer.";
./diocese/tourn_school_drop.mhtml:        my $change = Tab::ChangeLog->create({
./diocese/tourn_school_drop.mhtml:            tourn       => $tourn->id,
./diocese/tourn_school_drop.mhtml:			person      => $person->id
./diocese/tourn_school_drop.mhtml:	Tab::log($person->first." ".$person->last." deleted school ".$school->name." from ".$tourn->name);
./diocese/tourn_school_drop.mhtml:	$school->delete;
./diocese/tourn_school_drop.mhtml:	my $msg = "You have been dropped completely from ".$tourn->name.".  I warned you.";
./diocese/tourn_school_drop.mhtml:	$m->redirect("/user/diocese/tourn_schools.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/tourn.mhtml:	my $tz = $person->tz;
./diocese/tourn.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn.mhtml:				<% $region->code %>
./diocese/tourn.mhtml:				<% $region->quota %>
./diocese/tourn.mhtml:			<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn.mhtml:			<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn.mhtml:					<input type="tel" name="phone" value="<% $person->phone %>">
./diocese/tourn.mhtml:					<input type="text" size="40" name="hotel" value="<% $person->setting("hotel") %>">
./diocese/tourn.mhtml:		<p><% $tourn->setting('disclaimer') %></p>
./diocese/tourn.mhtml:                    <% ($tourn->reg_end) ? Tab::nicedt($tourn->reg_end->set_time_zone($tz)) : "Not Set" %>
./diocese/tourn.mhtml:%					my $drop_deadline = $tourn->setting("drop_deadline");
./diocese/tourn.mhtml:					<% ($drop_deadline) ? Tab::nicedt($drop_deadline->set_time_zone($tz)) : "Not Set" %>
./diocese/tourn.mhtml:%					my $judge_deadline = $tourn->setting("judge_deadline");
./diocese/tourn.mhtml:					<% ($judge_deadline) ? Tab::nicedt($judge_deadline->set_time_zone($tz)) : "Not Set" %>
./diocese/tourn.mhtml:%					my $fine_deadline = $tourn->setting("fine_deadline");
./diocese/tourn.mhtml:					<% ($fine_deadline) ? Tab::nicedt($fine_deadline->set_time_zone($tz)) : "Not Set" %>
./diocese/tourn.mhtml:			<a href="tourn_print_event.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:			<a href="tourn_print_school.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:			<a href="invoice_print.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:			<a href="invoice_school_print.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:%			unless ($tourn->setting("hide_codes")) { 
./diocese/tourn.mhtml:				<a href="/register/region/entry_cards_print.mhtml?region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:				<a href="/register/region/judge_cards_print.mhtml?region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:				<a href="/register/region/entry_report_print.mhtml?region_id=<% $region->id %>" class="martop blue block">
./diocese/tourn.mhtml:				<a href="/register/region/judge_report_print.mhtml?region_id=<% $region->id %>" class="blue block">
./diocese/tourn.mhtml:				<a href="/register/region/combined_report_print.mhtml?region_id=<% $region->id %>" class="blue block">
./diocese/access_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./diocese/access_rm.mhtml:	my @already = Tab::Permission->search( region => $region->id, tag => "region", person => $admin_id );
./diocese/access_rm.mhtml:		$alr->delete if $alr;
./diocese/access_rm.mhtml:	$m->redirect("access.mhtml?region_id=".$region->id."&msg=$msg");
./diocese/tourn_tab_edit.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_tab_edit.mhtml:	my $category = Tab::Category->retrieve($category_id) unless $judge;
./diocese/tourn_tab_edit.mhtml:	$category = $judge->category if $judge;
./diocese/tourn_tab_edit.mhtml:	my @schools = Tab::School->search( region => $region->id, tourn => $tourn->id );
./diocese/tourn_tab_edit.mhtml:					<input type="hidden" name="category_id" value="<% $category->id %>">
./diocese/tourn_tab_edit.mhtml:					<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn_tab_edit.mhtml:					<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_tab_edit.mhtml:					<input type="text" name="first" value="<% ($judge && $judge->first) ?  $judge->first : "" %>" size="25">
./diocese/tourn_tab_edit.mhtml:					<input type="text" name="last" value="<% ($judge && $judge->last) ?  $judge->last : "" %>" size="25">
./diocese/tourn_tab_edit.mhtml:							<option value="<% $school->id %>" 
./diocese/tourn_tab_edit.mhtml:									<% ($judge && $judge->school->id == $school->id) ? "selected" : "" %> >
./diocese/tourn_tab_edit.mhtml:								<% $school->short_name %>
./diocese/tourn_tab_edit.mhtml:					<input type="text" name="phone" value="<% ($judge && $judge->chapter_judge->phone) ?  $judge->chapter_judge->phone : "" %>" size="25">
./diocese/tourn_tab_edit.mhtml:					<input type="text" name="notes" value="<% $judge ?  $judge->setting('notes') : "" %>" size="25">
./diocese/tourn_tab_edit.mhtml:							<option value="<% $job %>"  <% ($judge && $judge->setting("cfl_tab_first") eq $job) ? "selected" : "" %>>
./diocese/tourn_tab_edit.mhtml:							<option value="<% $job %>"  <% ($judge && $judge->setting("cfl_tab_second") eq $job) ? "selected" : "" %>>
./diocese/tourn_tab_edit.mhtml:							<option value="<% $job %>"  <% ($judge && $judge->setting("cfl_tab_third") eq $job) ? "selected" : "" %>>
./diocese/tourn_tab_edit.mhtml:		<p style="padding-left: 10px;">
./diocese/tourn_tab_edit.mhtml:			<h4><% $category->abbr %> Staff</h4>
./diocese/tourn_tab_edit.mhtml:			<a class="blue block" href="tourn_judges.mhtml?region_id=<% $region->id %>&tourn_id=<% $tourn->id %>&category_id=<% $category->id %>">
./diocese/tourn_tab_edit.mhtml:				Return to <% $category->abbr %> list
./diocese/tourn_tab_edit.mhtml:%			my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./diocese/tourn_tab_edit.mhtml:%			my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_tab_edit.mhtml:%			my $remainder = $judge_burden - scalar @judges;
./diocese/access.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %></h2>
./diocese/access.mhtml:%		my $admins = scalar $region->admins;
./diocese/access.mhtml:%		foreach my $admin ($region->admins) { 
./diocese/access.mhtml:					<% $admin->first." ".$admin->last %>
./diocese/access.mhtml:					<% $admin->email %>
./diocese/access.mhtml:							<& "/funclib/confirm.mas", warn => $warn &> href="access.mhtml?region_id=<% $region->id %>">
./diocese/access.mhtml:							href="access_rm.mhtml?region_id=<% $region->id %>&admin_id=<% $admin->id %>">
./diocese/access.mhtml:			<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_judges.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_judges.mhtml:	my $now = DateTime->now(time_zone => $tz);
./diocese/tourn_judges.mhtml:	my $judge_deadline = $tourn->setting("judge_deadline");
./diocese/tourn_judges.mhtml:	$judge_deadline->set_time_zone($tz);
./diocese/tourn_judges.mhtml:	my $hide_code = $tourn->setting("hide_codes");
./diocese/tourn_judges.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./diocese/tourn_judges.mhtml:		my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./diocese/tourn_judges.mhtml:		my $tab_room++ if $category->setting("tab_room");
./diocese/tourn_judges.mhtml:		my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./diocese/tourn_judges.mhtml:		my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_prelims");
./diocese/tourn_judges.mhtml:				push (@jpoolless_judges, $judge) unless $judge->setting("prelim_jpool");
./diocese/tourn_judges.mhtml:				next unless $judge->setting("prelim_jpool");
./diocese/tourn_judges.mhtml:				push (@{$judges_by_jpool{$judge->setting("prelim_jpool")}}, $judge);
./diocese/tourn_judges.mhtml:		my @chapters = sort {$a->name cmp $b->name} $region->chapters;
./diocese/tourn_judges.mhtml:		my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_judges.mhtml:		my @events = sort {$a->name cmp $b->name} $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./diocese/tourn_judges.mhtml:			<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn_judges.mhtml:%					foreach my $jpool (sort {$a->id <=> $b->id} @prelim_jpools) { 
./diocese/tourn_judges.mhtml:%						my @pool_judges = @{$judges_by_jpool{$jpool->id}} if $judges_by_jpool{$jpool->id};
./diocese/tourn_judges.mhtml:%						my $jpool_burden = $m->comp("/funclib/ncfl/prelim_jpool_obligation.mas", diocese => $region, jpool => $jpool);
./diocese/tourn_judges.mhtml:%						my $needed = $jpool_burden - scalar @pool_judges;
./diocese/tourn_judges.mhtml:%						$jpool_obligation = "Short in ".$jpool->name if $needed > 0; 
./diocese/tourn_judges.mhtml:									<h4>Judges in <% $jpool->name %></h4>
./diocese/tourn_judges.mhtml:						foreach my $judge (@{$judges_by_jpool{$jpool->id}}) {
./diocese/tourn_judges.mhtml:							<td class="smallish" colspan="2" style="padding-top: 2px;" align="center">
./diocese/tourn_judges.mhtml:						<% ($judge_burden - scalar (@judges) > 0) ? ($judge_burden - scalar (@judges))." more needed" 
./diocese/tourn_judges.mhtml:								<input type="hidden" name="category_id" value="<% $category->id %>">
./diocese/tourn_judges.mhtml:								<input type="hidden" name="tourn_id" value="<% $category->tourn->id %>">
./diocese/tourn_judges.mhtml:								<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_judges.mhtml:				<h4>Judges for <% $category->abbr %> Elims:</h4>
./diocese/tourn_judges.mhtml:							<input type="hidden" name="category_id" value="<% $category->id %>">
./diocese/tourn_judges.mhtml:							<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn_judges.mhtml:							<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_judges.mhtml:								<% $jpool->name %>
./diocese/tourn_judges.mhtml:%					foreach my $judge ($m->comp("/funclib/region_judges.mas", tourn => $tourn, region => $region, elim => $category)) { 
./diocese/tourn_judges.mhtml:%						next unless $judge->category;
./diocese/tourn_judges.mhtml:%						next if $judge->category->setting("tab_room");
./diocese/tourn_judges.mhtml:%						next if (index($judge->avg, "D") != -1);
./diocese/tourn_judges.mhtml:%						my %jpool_yes = map {$_->id => 1} $judge->jpools;
./diocese/tourn_judges.mhtml:									<% $judge->first." ".$judge->last %>
./diocese/tourn_judges.mhtml:									<% $judge->category->abbr %>
./diocese/tourn_judges.mhtml:									<label for="<% $judge->id %>_<% $jpool->id %>">
./diocese/tourn_judges.mhtml:										<input type="checkbox" id="<% $judge->id %>_<% $jpool->id %>" name="<% $judge->id %>_<% $jpool->id %>" value="1" <% $jpool_yes{$jpool->id} ? "checked" : "" %> >
./diocese/tourn_judges.mhtml:										<% $jpool_yes{$jpool->id} ? "Y" : "" %>
./diocese/tourn_judges.mhtml:					my ($total_owed, $style) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_judges.mhtml:%								($owed, $ditch) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, jpool => $jpool);
./diocese/tourn_judges.mhtml:						each elim round, OR a total of elim rounds equal to <% $category->setting("max_burden") ? "" : "2x" %> the number
./diocese/tourn_judges.mhtml:						<% $category->setting("max_burden") ? "2" : "4" %> elim rounds
./diocese/tourn_judges.mhtml:			<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn_judges.mhtml:%	if ($category && $category->setting("judge_policy")) { 
./diocese/tourn_judges.mhtml:		<p><% $category ? $category->setting('judge_policy') : "" %></p>
./diocese/tourn_judges.mhtml:%				foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) { 
./diocese/tourn_judges.mhtml:%					my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $other_category);
./diocese/tourn_judges.mhtml:%					my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $other_category);
./diocese/tourn_judges.mhtml:%					my $remainder = $judge_burden - scalar @judges;
./diocese/tourn_judges.mhtml:%					my ($total_owed, $style) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, category => $other_category);
./diocese/tourn_judges.mhtml:					<a class="<% $remainder > 0 ? "red" : $other_category == $category_id ? "dkblue" : "blue" %> full" href="tourn_judges.mhtml?category_id=<% $ocategory->id %>&region_id=<% $region->id %>&tourn_id=<% $tourn->id %>">
./diocese/tourn_judges.mhtml:							<% $ocategory->name %>
./diocese/tourn_judges.mhtml:								<% $total_owed %> <% $ocategory->abbr %> Elims Owed
./diocese/tourn_judges.mhtml:		my $rating = $judge->avg;
./diocese/tourn_judges.mhtml:		my $tourn = $category->tourn;
./diocese/tourn_judges.mhtml:		my $tz = $tourn->tz;
./diocese/tourn_judges.mhtml:		my $now = DateTime->now(time_zone => $tz);
./diocese/tourn_judges.mhtml:		my $judge_deadline = $tourn->setting("judge_deadline");
./diocese/tourn_judges.mhtml:		$judge_deadline->set_time_zone($tz);
./diocese/tourn_judges.mhtml:		my $region = $judge->school->region;
./diocese/tourn_judges.mhtml:				<% $hide_code ? $switch."." : $judge->code %>
./diocese/tourn_judges.mhtml:				<% $judge->first %>
./diocese/tourn_judges.mhtml:				<% $judge->last %>
./diocese/tourn_judges.mhtml:				<% $judge->school ? $judge->school->name : "Hired" %>
./diocese/tourn_judges.mhtml:%			if ($judge && $judge->alt_category && $judge->alt_category->id == $category->id ) { 
./diocese/tourn_judges.mhtml:					<a class="dkblue block" href="tourn_judges.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>&category_id=<% $judge->category->id %>">
./diocese/tourn_judges.mhtml:						From <% $judge->category->name %>
./diocese/tourn_judges.mhtml:						<a class="dkblue block" href="tourn_judge_edit.mhtml?tourn_id=<% $category->tourn->id %>&region_id=<% $region->id %>&judge_id=<% $judge->id %>">
./diocese/tourn_judges.mhtml:						<a class="dkyellow block" href="tourn_judge_drop.mhtml?tourn_id=<% $category->tourn->id %>&region_id=<% $region->id %>&judge_id=<% $judge->id %>" <& "/funclib/confirm.mas", warn => $warn &> >
./diocese/tourn_judge_edit.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_judge_edit.mhtml:	my $category = Tab::Category->retrieve($category_id) unless $judge;
./diocese/tourn_judge_edit.mhtml:	$category = $judge->category if $judge;
./diocese/tourn_judge_edit.mhtml:	my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;
./diocese/tourn_judge_edit.mhtml:	my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;
./diocese/tourn_judge_edit.mhtml:	my @alts = $m->comp("/funclib/region_judges.mas", region => $region, alt => "yes", category => $category);
./diocese/tourn_judge_edit.mhtml:	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_prelims");
./diocese/tourn_judge_edit.mhtml:	my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./diocese/tourn_judge_edit.mhtml:	my $prelim_jpool = $judge->setting("prelim_jpool") if $judge;
./diocese/tourn_judge_edit.mhtml:	my @schools = sort {$a->name cmp $b->name} Tab::School->search( region => $region->id, tourn => $tourn->id);
./diocese/tourn_judge_edit.mhtml:			<h4><% $category->abbr %> Judging</h4>
./diocese/tourn_judge_edit.mhtml:			<a class="blue block" href="tourn_judges.mhtml?region_id=<% $region->id %>&tourn_id=<% $tourn->id %>&category_id=<% $category->id %>">
./diocese/tourn_judge_edit.mhtml:				Return to <% $category->abbr %> judge list
./diocese/tourn_judge_edit.mhtml:%			my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./diocese/tourn_judge_edit.mhtml:%			my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_judge_edit.mhtml:%			my $remainder = $judge_burden - scalar @judges;
./diocese/tourn_judge_edit.mhtml:%					my @jpool_judges = $m->comp("/funclib/region_judges.mas", region => $region, jpool => $jpool);
./diocese/tourn_judge_edit.mhtml:%					my $jpool_burden = $m->comp("/funclib/ncfl/prelim_jpool_obligation.mas", diocese => $region, jpool => $jpool);
./diocese/tourn_judge_edit.mhtml:%					my $needed = $jpool_burden - scalar @jpool_judges;
./diocese/tourn_judge_edit.mhtml:					<div class="block padless <% $needed > 0 ? "dkred" : "green" %>" style="margin-bottom: 2px;">
./diocese/tourn_judge_edit.mhtml:							<% $jpool->name %>
./diocese/tourn_judge_edit.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn_judge_edit.mhtml:		<h4><% ($judge) ? "Edit Judge " : "Add an ".$category->abbr." Judge " %> </h4>
./diocese/tourn_judge_edit.mhtml:		<table cellpadding="5" cellspacing="1" width="98%" border="0" style="margin-left: 10px;">
./diocese/tourn_judge_edit.mhtml:					<input type="hidden" name="category_id" value="<% $category->id %>">
./diocese/tourn_judge_edit.mhtml:					<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn_judge_edit.mhtml:					<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_judge_edit.mhtml:					<input type="text" name="first" value="<% ($judge && $judge->first) ?  $judge->first : "" %>" size="25">
./diocese/tourn_judge_edit.mhtml:					<input type="text" name="last" value="<% ($judge && $judge->last) ?  $judge->last : "" %>" size="25">
./diocese/tourn_judge_edit.mhtml:							F <input type="radio" name="gender" id="F" value="F" <% ($judge && $judge->setting('gender') eq "F") ? "checked" : "" %>>
./diocese/tourn_judge_edit.mhtml:							M <input type="radio" name="gender" id="M" value="M" <% ($judge && $judge->setting('gender') eq "M") ? "checked" : "" %>>
./diocese/tourn_judge_edit.mhtml:							Other <input type="radio" name="gender" id="O" value="O" <% ($judge && $judge->setting('gender') eq "O") ? "checked" : "" %>>
./diocese/tourn_judge_edit.mhtml:							<option value="<% $school->id %>" <% ($judge && $judge->school->id == $school->id) ? "selected" : "" %>> <% $school->short_name %> </option>
./diocese/tourn_judge_edit.mhtml:%							my $set_tier = Tab::Rating->search( rating_subset => $subset->id, judge => $judge->id )->first if $judge;
./diocese/tourn_judge_edit.mhtml:									<% $subset->name %>: 
./diocese/tourn_judge_edit.mhtml:									<select name="<% $subset->id %>" class="fixedmed" placeholder="Please choose one">
./diocese/tourn_judge_edit.mhtml:%										foreach my $rating_tier (sort {$a->name cmp $b->name} @tiers) {
./diocese/tourn_judge_edit.mhtml:											<option value="<% $rating_tier->id %>" <% ($set_tier && $set_tier->rating_tier->id == $rating_tier->id) ? "selected" : "" %>> <% $rating_tier->name %> - <% $rating_tier->description %> </option>
./diocese/tourn_judge_edit.mhtml:%						my $set_tier = $judge->ratings->first if $judge;
./diocese/tourn_judge_edit.mhtml:%							foreach my $rating_tier (sort {$a->name cmp $b->name} @tiers) {
./diocese/tourn_judge_edit.mhtml:								<option value="<% $rating_tier->id %>" <% ($set_tier && $set_tier->rating_tier->id == $rating_tier->id) ? "selected" : "" %>> <% $rating_tier->name %> - <% $rating_tier->description %> </option>
./diocese/tourn_judge_edit.mhtml:%			if ($category->setting("ask_parli")) { 
./diocese/tourn_judge_edit.mhtml:%				if ($region->quota > 4) { 
./diocese/tourn_judge_edit.mhtml:					<td colspan="3" style="padding-left: 15px;">
./diocese/tourn_judge_edit.mhtml:						<input type="radio" name="parli" id="parli_y" value="Y" <% ($judge && $judge->setting("parli") eq "Y") ? "checked" : "" %>>
./diocese/tourn_judge_edit.mhtml:						<input type="radio" name="parli" id="parli_n" value="N" <% ($judge && $judge->setting("parli") eq "N") ? "checked" : "" %>>
./diocese/tourn_judge_edit.mhtml:								<option value="<% $jpool->id %>" <%  ($prelim_jpool == $jpool->id ) ?  "selected" : "" %> > <% $jpool->name %> <% ($jpool->site && $jpool->site->id) ? " at ".$jpool->site->name : "" %> </option>
./diocese/tourn_judge_edit.mhtml:					<input type="text" name="notes" value="<% $judge ? $judge->setting('notes') : "" %>" size="32">
./diocese/tourn_judge_edit.mhtml:%			if ($category->setting("ask_alts") && (scalar @alts < $category->setting("alt_max") || ($judge && $judge->alt_category ))) { 
./diocese/tourn_judge_edit.mhtml:						style="font-weight: 700;">both</span> in Congress and
./diocese/tourn_judge_edit.mhtml:%							foreach my $alt_category ($tourn->categories) { 
./diocese/tourn_judge_edit.mhtml:%								next if $category->id == $alt_category->id;
./diocese/tourn_judge_edit.mhtml:								<option value="<% $alt_category->id %>"   <% ($judge && $judge->alt_category->id == $alt_category->id) ? "selected" : "" %>> <% $alt_category->name %> </option>
./diocese/tourn_judge_edit.mhtml:					<input type="submit" name="save" value="Save and Add Another" style="padding-left: 10px; padding-right: 10px;">
./diocese/tourn_judge_drop.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_judge_drop.mhtml:	$m->abort unless $judge;
./diocese/tourn_judge_drop.mhtml:	my $category = $judge->category;
./diocese/tourn_judge_drop.mhtml:	my $school = $judge->school;
./diocese/tourn_judge_drop.mhtml:	my $msg = "Judge ".$judge->first." ".$judge->last." has been dropped.";
./diocese/tourn_judge_drop.mhtml:	my @ratings = Tab::Rating->search(judge => $judge->id);
./diocese/tourn_judge_drop.mhtml:		$rating->delete;
./diocese/tourn_judge_drop.mhtml:	my $description = $person->first." ".$person->last." dropped judge ".$judge->code." ".$judge->first." ".$judge->last;
./diocese/tourn_judge_drop.mhtml:	my $change = Tab::ChangeLog->create({
./diocese/tourn_judge_drop.mhtml:		tourn       => $tourn->id,
./diocese/tourn_judge_drop.mhtml:		school      => $school->id,
./diocese/tourn_judge_drop.mhtml:		person      => $person->id,
./diocese/tourn_judge_drop.mhtml:	}) if $tourn->setting("track_reg_changes");
./diocese/tourn_judge_drop.mhtml:	$judge->delete;
./diocese/tourn_judge_drop.mhtml:	my $remaining = scalar $school->entries;
./diocese/tourn_judge_drop.mhtml:	my $judges = scalar $school->judges;
./diocese/tourn_judge_drop.mhtml:		$school->delete;
./diocese/tourn_judge_drop.mhtml:	$m->redirect("/user/diocese/tourn_judges.mhtml?category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg"); 
./diocese/schools_save.mhtml:	foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters)  { 
./diocese/schools_save.mhtml:		if ($ARGS{"name_".$chapter->id}) { 
./diocese/schools_save.mhtml:			$chapter->name($ARGS{"name_".$chapter->id});
./diocese/schools_save.mhtml:			$chapter->coaches($ARGS{"coaches_".$chapter->id});
./diocese/schools_save.mhtml:			$chapter->update;
./diocese/schools_save.mhtml:		my $chapter = Tab::Chapter->create({
./diocese/schools_save.mhtml:		Tab::ChapterCircuit->create({
./diocese/schools_save.mhtml:			chapter => $chapter->id,
./diocese/schools_save.mhtml:			region => $region->id,
./diocese/schools_save.mhtml:			circuit => $region->circuit->id
./diocese/schools_save.mhtml:	$m->redirect("schools.mhtml?region_id=".$region->id."&msg=$msg");
./diocese/tourn_tab_save.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_tab_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_tab_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./diocese/tourn_tab_save.mhtml:		$judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_tab_save.mhtml:		$judge->school($school_id);
./diocese/tourn_tab_save.mhtml:		$judge->first($first);
./diocese/tourn_tab_save.mhtml:		$judge->last($last);
./diocese/tourn_tab_save.mhtml:		$judge->update;
./diocese/tourn_tab_save.mhtml:		my $cj = $judge->chapter_judge;
./diocese/tourn_tab_save.mhtml:		$cj->first($first);
./diocese/tourn_tab_save.mhtml:		$cj->last($last);
./diocese/tourn_tab_save.mhtml:		$cj->phone($phone);
./diocese/tourn_tab_save.mhtml:		$cj->update;
./diocese/tourn_tab_save.mhtml:			my $school = Tab::School->retrieve($school_id);
./diocese/tourn_tab_save.mhtml:			my $cj = Tab::ChapterJudge->create({
./diocese/tourn_tab_save.mhtml:				chapter => $school->chapter->id,
./diocese/tourn_tab_save.mhtml:			$judge = Tab::Judge->create({
./diocese/tourn_tab_save.mhtml:				school        => $school->id,
./diocese/tourn_tab_save.mhtml:				chapter_judge => $cj->id,
./diocese/tourn_tab_save.mhtml:			$m->redirect("/user/diocese/tourn_tab_edit.mhtml?region_id=". $region->id ."&tourn_id=". $tourn->id ."&category_id=". $category->id ."&missing=$missing&err=$err");
./diocese/tourn_tab_save.mhtml:	$judge->setting('notes', $notes);
./diocese/tourn_tab_save.mhtml:	$judge->setting("cfl_tab_first", $cfl_tab_first);
./diocese/tourn_tab_save.mhtml:	$judge->setting("cfl_tab_second", $cfl_tab_second);
./diocese/tourn_tab_save.mhtml:	$judge->setting("cfl_tab_third", $cfl_tab_third);
./diocese/tourn_tab_save.mhtml:		$m->redirect("/user/diocese/tourn_tab_edit.mhtml?judge_id=".$judge->id."&region_id=". $region->id ."&tourn_id=". $tourn->id ."&category_id=". $category->id ."&missing=$missing&err=$err");
./diocese/tourn_tab_save.mhtml:		$m->redirect("/user/diocese/tourn_judges.mhtml?region_id=". $region->id ."&tourn_id=". $tourn->id ."&category_id=". $category->id ."&msg=$msg");
./diocese/schools.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %></h2>
./diocese/schools.mhtml:		<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/schools.mhtml:%			foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters)  { 
./diocese/schools.mhtml:						<span class="hidden"><% $chapter->name %></span>
./diocese/schools.mhtml:						<input type="text" class="thin" size="35" name="name_<% $chapter->id %>" value="<% $chapter->name %>">
./diocese/schools.mhtml:						<span class="hidden"><% $chapter->coaches %></span>
./diocese/schools.mhtml:						<input type="text" class="thin" size="50" name="coaches_<% $chapter->id %>" value="<% $chapter->coaches %>">
./diocese/menubar.mas:				<a href="/user/diocese/tourn.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>">Summary</a>
./diocese/menubar.mas:				<a href="/user/diocese/tourn_schools.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>">Schools</a>
./diocese/menubar.mas:				<a href="/user/diocese/tourn_entries.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>">Entries</a>
./diocese/menubar.mas:				<a href="/user/diocese/tourn_judges.mhtml?tourn_id=<% $tourn->id %>&region_id=<% $region->id %>">Judges</a>
./diocese/menubar.mas:				<a href="/index/tourn/index.mhtml?tourn_id=<% $tourn->id %>">Website</a>
./diocese/menubar.mas:				<a href="/user/diocese/tournaments.mhtml?region_id=<% $region->id %>">Tournaments</a>
./diocese/menubar.mas:				<a href="/user/diocese/schools.mhtml?region_id=<% $region->id %>">Member Schools</a>
./diocese/menubar.mas:				<a href="/user/diocese/access.mhtml?region_id=<% $region->id %>">Diocese Access</a>
./diocese/autohandler:	my $region = Tab::Region->retrieve($region_id) if $region_id;
./diocese/autohandler:	$m->redirect("/user/home.mhtml?err=Diocese not found.  Please contact the NCFL if you think this in error") unless $region;
./diocese/autohandler:	my $coach = Tab::Permission->search( region => $region->id, tag => "region", person => $person->id )->first;
./diocese/autohandler:	$m->redirect("/user/home.mhtml?err=You do not have access to that diocese.  Please contact the NCFL if you think this in error") unless $region || $person->site_admin;
./diocese/autohandler:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./diocese/autohandler:	$m->call_next( region => $region, tourn => $tourn ); 
./diocese/tourn_print_event.mhtml:    my $filename = "Diocese-Registration-".$region->name;
./diocese/tourn_print_event.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/tourn_print_event.mhtml:	my $now = DateTime->now;
./diocese/tourn_print_event.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1 );
./diocese/tourn_print_event.mhtml:	foreach my $category (sort {$a->name cmp $b->name} $tourn->categories) { 
./diocese/tourn_print_event.mhtml:		my $newpage++ unless $category->setting("tab_room");
./diocese/tourn_print_event.mhtml:		my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, category => $category);
./diocese/tourn_print_event.mhtml:		my @entries = $m->comp("/funclib/region_entries.mas", region => $region, tourn => $tourn, category => $category);
./diocese/tourn_print_event.mhtml:		print TEXOUT "\\hfill \\Huge ". $tourn->name."\n";
./diocese/tourn_print_event.mhtml:		print TEXOUT "\\hfill \\LARGE {\\bf The Archdiocese of ".Tab::texify($region->name)."}\n" if $region->arch;
./diocese/tourn_print_event.mhtml:		print TEXOUT "\\hfill \\LARGE {\\bf The Diocese of ".Tab::texify($region->name)."}\n" unless $region->arch;
./diocese/tourn_print_event.mhtml:		$m->comp("/funclib/ncfl/registration_print.mas", diocese => $region, filename => $filename, filepath => $filepath, tourn => $tourn, category => $category );
./diocese/tourn_print_event.mhtml:		$m->comp("/funclib/ncfl/judge_registration_print.mas", diocese => $region, filename => $filename, filepath => $filepath, tourn => $tourn, category => $category, newpage => $newpage );
./diocese/tourn_print_event.mhtml:	$m->comp("/funclib/ncfl/schools_print.mas", 
./diocese/tourn_print_event.mhtml:				diocese_id => $region->id, 
./diocese/tourn_print_event.mhtml:				tourn_id => $tourn->id);
./diocese/tourn_print_event.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./diocese/tourn_judge_save.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_judge_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_judge_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./diocese/tourn_judge_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./diocese/tourn_judge_save.mhtml:		$judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_judge_save.mhtml:		$judge->last($last);
./diocese/tourn_judge_save.mhtml:		$judge->first($first);
./diocese/tourn_judge_save.mhtml:		$judge->school($school->id);
./diocese/tourn_judge_save.mhtml:		$judge->alt_category($alt_category);
./diocese/tourn_judge_save.mhtml:		$judge->setting("parli", $parli);
./diocese/tourn_judge_save.mhtml:		$judge->setting('gender', $gender);
./diocese/tourn_judge_save.mhtml:		$judge->setting('notes', $notes);
./diocese/tourn_judge_save.mhtml:		$judge->update;
./diocese/tourn_judge_save.mhtml:		my $cj = $judge->chapter_judge;
./diocese/tourn_judge_save.mhtml:		$cj->first($first);
./diocese/tourn_judge_save.mhtml:		$cj->last($last);
./diocese/tourn_judge_save.mhtml:		$cj->gender($gender);
./diocese/tourn_judge_save.mhtml:		$cj->update;
./diocese/tourn_judge_save.mhtml:			my $cj = Tab::ChapterJudge->create({
./diocese/tourn_judge_save.mhtml:				chapter => $school->chapter->id,
./diocese/tourn_judge_save.mhtml:			$judge = Tab::Judge->create({
./diocese/tourn_judge_save.mhtml:				tourn         => $tourn->id,
./diocese/tourn_judge_save.mhtml:				school        => $school->id,
./diocese/tourn_judge_save.mhtml:				chapter_judge => $cj->id,
./diocese/tourn_judge_save.mhtml:			$judge->setting("parli", $parli);
./diocese/tourn_judge_save.mhtml:			$judge->setting('notes', $notes);
./diocese/tourn_judge_save.mhtml:			$judge->setting('gender', $gender);
./diocese/tourn_judge_save.mhtml:			$m->redirect("/user/diocese/judge_edit.mhtml?category_id=".$category->id."&tourn_id=".$tourn->id."&region_id=".$region->id."&err=$err");
./diocese/tourn_judge_save.mhtml:	if ($category->setting("ask_alts") &! $alt_category) { 
./diocese/tourn_judge_save.mhtml:	if ($category->setting("ask_parli") &! $parli) { 
./diocese/tourn_judge_save.mhtml:	} elsif ($category->setting("ask_parli") && $region->quota > 4 && $parli ne "Y") { 
./diocese/tourn_judge_save.mhtml:	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", 
./diocese/tourn_judge_save.mhtml:			my $jpool = Tab::JPool->retrieve($jpool_id);
./diocese/tourn_judge_save.mhtml:			unless ($jpool->id == $judge->setting("prelim_jpool")) { 
./diocese/tourn_judge_save.mhtml:				my @already = $m->comp("/funclib/judge_jpools.mas", 
./diocese/tourn_judge_save.mhtml:					my @jpool_memberships = Tab::JPoolJudge->search(
./diocese/tourn_judge_save.mhtml:						jpool => $_->id, 
./diocese/tourn_judge_save.mhtml:						judge => $judge->id);
./diocese/tourn_judge_save.mhtml:						$jpm->delete; 
./diocese/tourn_judge_save.mhtml:				$judge->setting("prelim_jpool", $jpool_id);
./diocese/tourn_judge_save.mhtml:				$judge->setting("prelim_jpool_name", $jpool->name);
./diocese/tourn_judge_save.mhtml:				Tab::JPoolJudge->create({ judge => $judge->id, jpool => $jpool->id});
./diocese/tourn_judge_save.mhtml:    my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;
./diocese/tourn_judge_save.mhtml:    my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;
./diocese/tourn_judge_save.mhtml:			unless ($ARGS{$subset->id}) { 
./diocese/tourn_judge_save.mhtml:			my $rating = Tab::Rating->search( judge => $judge->id, type => "coach", rating_subset => $subset->id )->first;
./diocese/tourn_judge_save.mhtml:				$rating->rating_tier($ARGS{$subset->id});
./diocese/tourn_judge_save.mhtml:				$rating->update;
./diocese/tourn_judge_save.mhtml:				$rating = Tab::Rating->create({
./diocese/tourn_judge_save.mhtml:					tourn         => $tourn->id,
./diocese/tourn_judge_save.mhtml:					judge         => $judge->id,
./diocese/tourn_judge_save.mhtml:					rating_subset => $subset->id,
./diocese/tourn_judge_save.mhtml:					rating_tier   => $ARGS{$subset->id},
./diocese/tourn_judge_save.mhtml:			my @ratings = Tab::Rating->search( judge => $judge->id, type => "coach" );
./diocese/tourn_judge_save.mhtml:			foreach (@ratings) { $_->delete; }
./diocese/tourn_judge_save.mhtml:				$rating->rating_tier($ARGS{"rating_tier"});
./diocese/tourn_judge_save.mhtml:				$rating->update;
./diocese/tourn_judge_save.mhtml:				$rating = Tab::Rating->create({
./diocese/tourn_judge_save.mhtml:					tourn       => $tourn->id,
./diocese/tourn_judge_save.mhtml:					judge       => $judge->id,
./diocese/tourn_judge_save.mhtml:		$m->redirect("/user/diocese/tourn_judge_edit.mhtml?judge_id=".$judge->id."&category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&missing=$missing&err=$err");
./diocese/tourn_judge_save.mhtml:		$m->redirect("/user/diocese/tourn_judges.mhtml?category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/tourn_judge_save.mhtml:		$m->redirect("/user/diocese/tourn_judge_edit.mhtml?category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/tourn_entries_save.mhtml:    my $tz = $person->tz;
./diocese/tourn_entries_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_entries_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./diocese/tourn_entries_save.mhtml:	my $quota = $region->quota;
./diocese/tourn_entries_save.mhtml:	my $max = $event->setting("max_entry") if $event;
./diocese/tourn_entries_save.mhtml:	my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $event);
./diocese/tourn_entries_save.mhtml:				$entry->school($ARGS{"school_".$step});
./diocese/tourn_entries_save.mhtml:				$entry->update;
./diocese/tourn_entries_save.mhtml:				$entry->delete;
./diocese/tourn_entries_save.mhtml:			$entry = Tab::Entry->create({
./diocese/tourn_entries_save.mhtml:				tourn      => $tourn->id,
./diocese/tourn_entries_save.mhtml:				event      => $event->id,
./diocese/tourn_entries_save.mhtml:			$entry->setting("registered_by", $person->id);
./diocese/tourn_entries_save.mhtml:			@students = $entry->students;
./diocese/tourn_entries_save.mhtml:					$student->first($ARGS{$step."_".$stu."_first"});
./diocese/tourn_entries_save.mhtml:					$student->last($ARGS{$step."_".$stu."_last"});
./diocese/tourn_entries_save.mhtml:					$student->chapter($entry->school->chapter->id);
./diocese/tourn_entries_save.mhtml:					$student->update;
./diocese/tourn_entries_save.mhtml:					$student = Tab::Student->create({ 
./diocese/tourn_entries_save.mhtml:						chapter => $entry->school->chapter->id,
./diocese/tourn_entries_save.mhtml:					Tab::EntryStudent->create({
./diocese/tourn_entries_save.mhtml:						entry => $entry->id,
./diocese/tourn_entries_save.mhtml:						student => $student->id
./diocese/tourn_entries_save.mhtml:				$first_name = $student->first." ".$student->last;
./diocese/tourn_entries_save.mhtml:				$last_name .= $student->last;
./diocese/tourn_entries_save.mhtml:			$entry->name($first_name) if $max == 1;
./diocese/tourn_entries_save.mhtml:			$entry->name($last_name) if $max != 1;
./diocese/tourn_entries_save.mhtml:			$entry->update;
./diocese/tourn_entries_save.mhtml:	my $msg = "Entries saved in ".$event->name;
./diocese/tourn_entries_save.mhtml:	$m->redirect("tourn_entries.mhtml?event_id=$event_id&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/invoice_print.mhtml:	my $tz = $tourn->tz;
./diocese/invoice_print.mhtml:    my $now = DateTime->now->set_time_zone($tz);
./diocese/invoice_print.mhtml:	my ($total, $payments, $feline_ref) = $m->comp("/funclib/ncfl/fees.mas", diocese => $region, tourn => $tourn);
./diocese/invoice_print.mhtml:    my $filename = "Diocese-Invoice-".$region->name;
./diocese/invoice_print.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/invoice_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, array => "1.8" );
./diocese/invoice_print.mhtml:	print TEXOUT "\\hfill {\\Large ". Tab::texify($tourn->name)." ".$tourn->start->year."}\n";
./diocese/invoice_print.mhtml:	print TEXOUT "& {\\small\\bf Diocese}: & ". &Tab::texify($region->name) ." ";
./diocese/invoice_print.mhtml:	print TEXOUT "& {\\small\\bf Diocese Code:} & ". &Tab::texify($region->code) ." \\\\ \n";
./diocese/invoice_print.mhtml:	foreach my $director ($region->admins) { 
./diocese/invoice_print.mhtml:		print TEXOUT &Tab::texify($director->first." ".$director->last);
./diocese/invoice_print.mhtml:			print TEXOUT "{\\small\\bf Diocese}: & ". &Tab::texify($region->name) ." (Continued) \\\\ \n";
./diocese/invoice_print.mhtml:			print TEXOUT $now->month."/".$now->day."/".$now->year." ";
./diocese/invoice_print.mhtml:			print TEXOUT $now->hour_12.":".$now->strftime('%M')." ".$now->strftime('%p')." \\\\ \n";
./diocese/invoice_print.mhtml:			$count= -4;
./diocese/invoice_print.mhtml:		print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($count % 2) && $line->{'fee'} > 0;
./diocese/invoice_print.mhtml:		print TEXOUT "\\rowcolor[rgb]{1,.95,.95}\[5.5pt\]\[5.5pt\]\n" if $line->{'fee'} < 0;
./diocese/invoice_print.mhtml:		print TEXOUT &Tab::texify($line->{'name'})." & ";
./diocese/invoice_print.mhtml:		print TEXOUT "\\\$".sprintf ("%.2f", abs($line->{'fee'}));
./diocese/invoice_print.mhtml:	print TEXOUT '\rowcolor[rgb]{.84,.89,.94}[5.5pt][5.5pt]{\\bf PAID TO DATE: } & \\$'. sprintf ("%.2f", $payments * -1)."\\\\ \n ";
./diocese/invoice_print.mhtml:	print TEXOUT '\rowcolor[rgb]{.95,.95,.95}[5.5pt][5.5pt]{\\bf AMOUNT OVERPAID: } & \\$'. sprintf ("%.2f", $owed * -1)."\\\\" if $owed < 0;
./diocese/invoice_print.mhtml:	print TEXOUT " \\multicolumn{2}{c}{\\Large \\bf PAID IN FULL -- THANK YOU } \\\\ \n" if $owed == 0;
./diocese/invoice_print.mhtml:    my $message = $tourn->setting("invoice_message");
./diocese/invoice_print.mhtml:    my $strip = HTML::Strip->new();
./diocese/invoice_print.mhtml:    $message = $strip->parse($message);
./diocese/invoice_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./diocese/tourn_schools.mhtml:	my $tz = $person->tz;
./diocese/tourn_schools.mhtml:	my %hotels = map {$_->id => $_} $tourn->hotels;
./diocese/tourn_schools.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn_schools.mhtml:%			foreach my $school (sort {$a->name cmp $b->name} $tourn->schools( region => $region->id)) { 
./diocese/tourn_schools.mhtml:%				$used_schools{$school->chapter->id}++;
./diocese/tourn_schools.mhtml:						<% $school->name %>
./diocese/tourn_schools.mhtml:							<% $school->setting("contact_name") %>  
./diocese/tourn_schools.mhtml:							<% Tab::phoneme($school->setting("contact_number")) %> 
./diocese/tourn_schools.mhtml:							<a class="white padless" href="mailto:<% $school->setting("contact_email") %>">
./diocese/tourn_schools.mhtml:								<% $school->setting("contact_email") %> 
./diocese/tourn_schools.mhtml:						<% $hotels{$school->setting("hotel")} ? $hotels{$school->setting("hotel")}->name : "PLEASE LIST HOTEL!" %>
./diocese/tourn_schools.mhtml:						<a class="dkblue button" href="tourn_school_edit.mhtml?school_id=<% $school->id %>&region_id=<% $region->id %>&tourn_id=<% $tourn->id %>">
./diocese/tourn_schools.mhtml:%			foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters) { 
./diocese/tourn_schools.mhtml:%				next if $used_schools{$chapter->id};
./diocese/tourn_schools.mhtml:				<a class="blue block nowrap" href="tourn_school_edit.mhtml?chapter_id=<% $chapter->id %>&region_id=<% $region->id %>&tourn_id=<% $tourn->id %>">
./diocese/tourn_schools.mhtml:					<% $chapter->short_name %>
./diocese/tourn_schools.mhtml:			<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_schools.mhtml:			<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn_judge_elims_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./diocese/tourn_judge_elims_save.mhtml:	my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./diocese/tourn_judge_elims_save.mhtml:	Tab::Judge->set_sql(delete_jpool_spots => "
./diocese/tourn_judge_elims_save.mhtml:	my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, elim => $category);
./diocese/tourn_judge_elims_save.mhtml:		Tab::Judge->sql_delete_jpool_spots->execute($judge->id, $category->id);
./diocese/tourn_judge_elims_save.mhtml:			if ($ARGS{$judge->id."_".$jpool->id}) { 
./diocese/tourn_judge_elims_save.mhtml:				Tab::JPoolJudge->create({ 
./diocese/tourn_judge_elims_save.mhtml:					jpool => $jpool->id,
./diocese/tourn_judge_elims_save.mhtml:					judge => $judge->id
./diocese/tourn_judge_elims_save.mhtml:	$m->redirect("/user/diocese/tourn_judges.mhtml?category_id=".$category->id."&region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg#elims");
./diocese/contact_save.mhtml:	$person->phone($phone);
./diocese/contact_save.mhtml:	$person->setting("hotel", $hotel);
./diocese/contact_save.mhtml:	$person->update;
./diocese/contact_save.mhtml:	$m->redirect("tourn.mhtml?region_id=".$region->id."&tourn_id=".$tourn->id."&msg=$msg");
./diocese/tourn_print_school.mhtml:    my $filename = "Diocese-Registration-".$region->name;
./diocese/tourn_print_school.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/tourn_print_school.mhtml:	my $now = DateTime->now;
./diocese/tourn_print_school.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, array => 1.6 );
./diocese/tourn_print_school.mhtml:	my @schools = sort {$a->name cmp $b->name} Tab::School->search( region => $region->id, tourn => $tourn->id );
./diocese/tourn_print_school.mhtml:	foreach my $school (sort {$a->name cmp $b->name} @schools) { 
./diocese/tourn_print_school.mhtml:		my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, school => $school);
./diocese/tourn_print_school.mhtml:		my @entries = $m->comp("/funclib/region_entries.mas", region => $region, tourn => $tourn, school => $school);
./diocese/tourn_print_school.mhtml:		print TEXOUT "\\LARGE ". $tourn->name."\n\n";
./diocese/tourn_print_school.mhtml:		print TEXOUT "\\large {\\bf The Archdiocese of ".Tab::texify($region->name)."}\n" if $region->arch;
./diocese/tourn_print_school.mhtml:		print TEXOUT "\\large {\\bf The Diocese of ".Tab::texify($region->name)."}\n" unless $region->arch;
./diocese/tourn_print_school.mhtml:		print TEXOUT "\\Large {\\bf ".Tab::texify($school->short_name)."} \n";
./diocese/tourn_print_school.mhtml:		print TEXOUT "Coaches: ".Tab::texify($school->chapter->coaches)."\n";
./diocese/tourn_print_school.mhtml:		$m->comp("/funclib/ncfl/registration_print.mas", diocese => $region, filename => $filename, filepath => $filepath, tourn => $tourn, school => $school );
./diocese/tourn_print_school.mhtml:		$m->comp("/funclib/ncfl/judge_registration_print.mas", diocese => $region, filename => $filename, filepath => $filepath, tourn => $tourn, school => $school);
./diocese/tourn_print_school.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./diocese/tourn_entries.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_entries.mhtml:	my $event = Tab::Event->retrieve($event_id) if $event_id;
./diocese/tourn_entries.mhtml:	my $quota = $region->quota;
./diocese/tourn_entries.mhtml:	my $max = $event->setting("max_entry") if $event;
./diocese/tourn_entries.mhtml:	my $hide_codes = $tourn->setting("hide_codes");
./diocese/tourn_entries.mhtml:	my $now = DateTime->now(time_zone => $tz);
./diocese/tourn_entries.mhtml:	my $entry_deadline = $tourn->reg_end->set_time_zone($tz);
./diocese/tourn_entries.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./diocese/tourn_entries.mhtml:	$drop_deadline->set_time_zone($tz);
./diocese/tourn_entries.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %> at <% $tourn->name %></h2> 
./diocese/tourn_entries.mhtml:					<h4>Entry in <% $event->name %></h4>
./diocese/tourn_entries.mhtml:				<input type="hidden" name="region_id" value="<% $region->id %>">
./diocese/tourn_entries.mhtml:				<input type="hidden" name="tourn_id" value="<% $tourn->id %>">
./diocese/tourn_entries.mhtml:				<input type="hidden" name="event_id" value="<% $event->id %>">
./diocese/tourn_entries.mhtml:%				my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $event);
./diocese/tourn_entries.mhtml:%				my @schools = Tab::School->search(  region => $region->id, tourn => $tourn->id );
./diocese/tourn_entries.mhtml:%					my @students = $entry->students if $entry;
./diocese/tourn_entries.mhtml:							<% $hide_codes ? $step."." : $entry ? $entry->code : "" %>
./diocese/tourn_entries.mhtml:								<% $entry->school->short_name %>
./diocese/tourn_entries.mhtml:										<option value="<% $school->id %>" <% $entry && $entry->school->id == $school->id ? "selected" : "" %> >
./diocese/tourn_entries.mhtml:											<% $school->name %>
./diocese/tourn_entries.mhtml:								<span class="hidden"><% $student ? $student->first : "" %></span>
./diocese/tourn_entries.mhtml:									<% $student->first %>
./diocese/tourn_entries.mhtml:									<input type="text" size="23" name="<% $step %>_<% $stu %>_first" value=<% $student ? $student->first : "" %>>
./diocese/tourn_entries.mhtml:								<span class="hidden"><% $student ? $student->last : "" %></span>
./diocese/tourn_entries.mhtml:										<% $student->last %>
./diocese/tourn_entries.mhtml:									<input type="text" size="23" name="<% $step %>_<% $stu %>_last" value=<% $student ? $student->last : "" %>>
./diocese/tourn_entries.mhtml:					<p>The deadline for new entries has passed.  You may change names or drop until <% Tab::nicedt($drop_deadline) %> <% Tab::tzname($drop_deadline->time_zone->name) %></p>
./diocese/tourn_entries.mhtml:					<p>You may enter new entries until <% Tab::nicedt($entry_deadline) %> <% Tab::tzname($drop_deadline->time_zone->name)%>. </p>
./diocese/tourn_entries.mhtml:					<p>You may change names or drop until <% Tab::nicedt($drop_deadline) %> <% Tab::tzname($drop_deadline->time_zone->name) %></p>
./diocese/tourn_entries.mhtml:				foreach my $oevent (sort {$a->name cmp $b->name} $tourn->events) { 
./diocese/tourn_entries.mhtml:					my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $oevent);
./diocese/tourn_entries.mhtml:						if ($event && $event->id == $oevent->id) { 
./diocese/tourn_entries.mhtml:						if ($event && $event->id == $oevent->id) { 
./diocese/tourn_entries.mhtml:					<a class="<% $block %> full" href="tourn_entries.mhtml?event_id=<% $oevent->id %>&region_id=<% $region->id %>&tourn_id=<% $tourn->id %>">
./diocese/tourn_entries.mhtml:							<% $oevent->name %>
./diocese/tournaments.mhtml:	my $tz = $person->tz;
./diocese/tournaments.mhtml:	Tab::Tourn->set_sql("by_entered_tourn", "
./diocese/tournaments.mhtml:	my @existing_tourns = Tab::Tourn->search_by_entered_tourn($region->id);
./diocese/tournaments.mhtml:	Tab::Tourn->set_sql("by_open_tourn", "
./diocese/tournaments.mhtml:	my @open_tourns = Tab::Tourn->search_by_open_tourn($region->id);
./diocese/tournaments.mhtml:		<h2><% $region->arch ? "Archdiocese" : "Diocese" %> of <% $region->name %></h2>
./diocese/tournaments.mhtml:							<% Tab::niceshortdate($et->start->set_time_zone($tz)) %>
./diocese/tournaments.mhtml:							<% ($et->start->day != $et->end->day) ? " - ".Tab::niceshortdate($et->end->set_time_zone($tz)) : "" %>
./diocese/tournaments.mhtml:							<a class="white" href="tourn.mhtml?region_id=<% $region->id %>&tourn_id=<% $et->id %>">
./diocese/tournaments.mhtml:							<% $et->name %> 
./diocese/tournaments.mhtml:% 							foreach ($m->comp("/funclib/tourn_circuits.mas", tourn => $et)) { 
./diocese/tournaments.mhtml:								<% $_->abbr %>
./diocese/tournaments.mhtml:							<% Tab::niceshortdate($et->reg_end->set_time_zone($tz)) %>
./diocese/tournaments.mhtml:							<a class="smallish dkblue block" href="tourn.mhtml?region_id=<% $region->id %>&tourn_id=<% $et->id %>">
./diocese/tournaments.mhtml:			<h4 style="padding-top: 15px;">
./diocese/tournaments.mhtml:%					$hidden++ if Tab::TournIgnore->search( person => $person->id, tourn => $ot->id) && not defined $all;
./diocese/tournaments.mhtml:%					next if Tab::TournIgnore->search( person => $person->id, tourn => $ot->id) && not defined $all;
./diocese/tournaments.mhtml:							<% Tab::niceshortdate($ot->start->set_time_zone($tz)) %><% ($ot->start->day != $ot->end->day) ? "-".Tab::niceshortdate($ot->end->set_time_zone($tz)) : "" %>
./diocese/tournaments.mhtml:							<a class="white padless small nowrap" style="margin-right: 5px;" href="tourn.mhtml?region_id=<% $region->id %>&tourn_id=<% $ot->id %>">
./diocese/tournaments.mhtml:							<% $ot->name %> 
./diocese/tournaments.mhtml:							<% $ot->location %>
./diocese/tournaments.mhtml:							<% $m->comp("/funclib/tourn_circuits.mas", tourn => $ot, print_abbr => 1) %>
./diocese/tournaments.mhtml:							<% Tab::niceshortdate($ot->reg_end->set_time_zone($tz)) %>
./diocese/tournaments.mhtml:							<a class="smallish dkblue block" href="tourn.mhtml?region_id=<% $region->id %>&tourn_id=<% $ot->id %>">
./diocese/access_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./diocese/access_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./diocese/access_add.mhtml:	my $login = Tab::Login->search( username => $email )->first;
./diocese/access_add.mhtml:		$person = $login->person;
./diocese/access_add.mhtml:	my $already = Tab::Permission->search( region => $region->id, tag => 'region', person => $person->id ) if $person;
./diocese/access_add.mhtml:			my $admin = Tab::Permission->create({
./diocese/access_add.mhtml:				person => $person->id,
./diocese/access_add.mhtml:				region => $region->id,
./diocese/access_add.mhtml:			$msg = "User ".$person->email." has been granted access to ".$region->name;
./diocese/access_add.mhtml:	$m->redirect("access.mhtml?region_id=".$region->id."&msg=$msg");
./judge/ballot_comments.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_comments.mhtml:	my $ballot = Tab::Ballot->retrieve($ballot_id);
./judge/ballot_comments.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_comments.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_comments.mhtml:	unless ($judge->person->id == $person->id) { 
./judge/ballot_comments.mhtml:		$m->redirect("/user/home.mhtml?err=$err")
./judge/ballot_comments.mhtml:	unless ($ballot->judge->id == $judge->id) { 
./judge/ballot_comments.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_comments.mhtml:	my $already = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/ballot_comments.mhtml:		<h2> Comments for <% $ballot->entry->code %> </h2>
./judge/ballot_comments.mhtml:		<p>Comments specific for <% $ballot->entry->code %></p>
./judge/ballot_comments.mhtml:		<input type="hidden" name="ballot_id" value="<% $ballot->id %>">
./judge/ballot_comments.mhtml:		<input type="hidden" name="judge_id" value="<% $judge->id %>">
./judge/ballot_comments.mhtml:		<p class='centeralign' style="margin-left: 25px;">
./judge/ballot_comments.mhtml:			<textarea name="comments" rows="15" cols="78"><% ($already) ? $already->content : "" %></textarea>
./judge/hire.mhtml:	my @already = $m->comp("/funclib/person_judges.mas", person => $person);
./judge/hire.mhtml:		$judge_by_tourn{$judge->tourn} = $judge;
./judge/hire.mhtml:%			foreach my $tourn ($m->comp("/funclib/tourn_exchange.mas")) { 
./judge/hire.mhtml:%				next if $used{$tourn->id};
./judge/hire.mhtml:%				$used{$tourn->id}++;
./judge/hire.mhtml:%				my $judge =  $judge_by_tourn{$tourn->id};
./judge/hire.mhtml:%						if ($tourn->webname) {
./judge/hire.mhtml:							<a class="smallish plain" href="http://<% $tourn->webname %>.tabroom.com">
./judge/hire.mhtml:							<a class="smallish plain" href="/index/tourn/index.mhtml?tourn_id=<% $tourn->id %>">
./judge/hire.mhtml:							<% $tourn->name %>
./judge/hire.mhtml:							(<% $tourn->location %>)
./judge/hire.mhtml:								<% Tab::niceshortdate($tourn->start) %>
./judge/hire.mhtml:								<% $tourn->start->day != $tourn->end->day ? " - ".Tab::niceshortdate($tourn->end) : "" %>
./judge/hire.mhtml:						<% $judge ? $judge->obligation : "" %>
./judge/hire.mhtml:						<% $judge ? $judge->setting('hire_offer') : "" %>
./judge/hire.mhtml:						<% $judge && $judge->setting('hire_offer') ?  $judge->setting("hire_approved") ? "Yes" : "No" : "" %>
./judge/hire.mhtml:						<% $judge ? $judge->hired : "" %>
./judge/hire.mhtml:						<% $judge ? $judge->hired + $judge->obligation : "" %>
./judge/hire.mhtml:						<a class="dkblue button" href="hire_edit.mhtml?tourn_id=<% $tourn->id %>">
./judge/paradigm.mhtml:		enter a tournament, Tabroom will attempt to auto-construct a link to
./judge/paradigm.mhtml:			<textarea class="budgeleft" name="paradigm" rows="20"><% $person->setting("paradigm") %></textarea>
./judge/i_am_aff.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/i_am_aff.mhtml:	my $err = "Sides all now agree.  Please re-enter your ballot now. <br/> ";
./judge/i_am_aff.mhtml:	foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
./judge/i_am_aff.mhtml:		my @ballots = Tab::Ballot->search( entry => $entry->id, panel => $panel->id );
./judge/i_am_aff.mhtml:			if ($entry_id == $entry->id) { 
./judge/i_am_aff.mhtml:				if ($ballot->side != 1) { 
./judge/i_am_aff.mhtml:					$ballot->side(1);
./judge/i_am_aff.mhtml:					$ballot->audit(0);
./judge/i_am_aff.mhtml:					$ballot->update;
./judge/i_am_aff.mhtml:					$err .= $ballot->judge->first." ".$ballot->judge->last." should also re-confirm his/her ballot <br /> <br />" unless $ballot->judge->id == $judge_id || $done{$ballot->judge->id};
./judge/i_am_aff.mhtml:				if ($ballot->side != 2) { 
./judge/i_am_aff.mhtml:					$ballot->side(2);
./judge/i_am_aff.mhtml:					$ballot->audit(0);
./judge/i_am_aff.mhtml:					$ballot->update;
./judge/i_am_aff.mhtml:	$m->redirect("/user/judge/ballot.mhtml?judge_id=$judge_id&panel_id=$panel_id&errs=$err");
./judge/hire_save.mhtml:		my $judge = Tab::Judge->retrieve($already_id);
./judge/hire_save.mhtml:		unless ($judge->category->setting("exchange")) { 
./judge/hire_save.mhtml:			my $msg = "That judge category does not accept self-hire requests";
./judge/hire_save.mhtml:			$m->redirect("/user/judge/hire.mhtml?msg=$msg");
./judge/hire_save.mhtml:		my $max = $judge->category->setting("max_rounds");
./judge/hire_save.mhtml:		$actual = ($max - $judge->obligation) if ($judge->obligation + $actual) > $max;
./judge/hire_save.mhtml:		$judge->setting('hire_offer', $actual);
./judge/hire_save.mhtml:		$judge->update;
./judge/hire_save.mhtml:		$m->redirect("hire.mhtml?err=$err&msg=$msg");
./judge/hire_save.mhtml:		my $category = Tab::Category->retrieve($category_id);
./judge/hire_save.mhtml:		unless ($category->setting("exchange")) { 
./judge/hire_save.mhtml:			my $msg = "That judge category does not accept self-hire requests";
./judge/hire_save.mhtml:			$m->redirect("/user/judge/hire.mhtml?msg=$msg");
./judge/hire_save.mhtml:		my $max = $category->setting("max_rounds");
./judge/hire_save.mhtml:		my $code = $m->comp("/funclib/category_code.mas", category => $category ) unless $category->setting("no_codes");
./judge/hire_save.mhtml:		my $tz = $category->tourn->tz;
./judge/hire_save.mhtml:		my $now = DateTime->now(time_zone => $tz);
./judge/hire_save.mhtml:		my $judge = Tab::Judge->create({
./judge/hire_save.mhtml:			person     => $person->id,
./judge/hire_save.mhtml:			first       => $person->first,
./judge/hire_save.mhtml:			last        => $person->last,
./judge/hire_save.mhtml:			category => $category->id,
./judge/hire_save.mhtml:		$judge->setting("gender", $person->gender);
./judge/hire_save.mhtml:		$judge->setting("hire_offer", $actual);
./judge/hire_save.mhtml:		$judge->setting("registered_by", $person->id);
./judge/hire_save.mhtml:		$m->comp("/funclib/conflict.mas", tourn => $category->tourn, person => $person);
./judge/hire_save.mhtml:		$m->redirect("hire.mhtml?err=$err&msg=$msg");
./judge/history.mhtml:%			foreach  my $judge (sort {$b->id <=> $a->id} $person->judges) { 
./judge/history.mhtml:%				my $tourn = $judge->category->tourn;
./judge/history.mhtml:						<a class="white nowrap block" href="tourn.mhtml?tourn_id=<% $tourn->id %>">
./judge/history.mhtml:						<% $tourn->name %>
./judge/history.mhtml:						<% $tourn->start->year %>
./judge/history.mhtml:						<% Tab::niceshortdate($tourn->start->set_time_zone($tourn->tz)) %>
./judge/history.mhtml:						<% ($tourn->start->day != $tourn->end->day) ? "-".Tab::niceshortdate($tourn->end->set_time_zone($tourn->tz)) : "" %>
./judge/history.mhtml:						<% $judge->category->name %>
./judge/history.mhtml:						<% scalar $m->comp("/funclib/judge_panels.mas", judge => $judge)  %>
./judge/history.mhtml:						<% ($judge->obligation) ? "/".$judge->obligation : "" %> 
./judge/ballot_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_confirm.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/ballot_confirm.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_confirm.mhtml:    unless ($judge->person->id == $person->id) { 
./judge/ballot_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err")
./judge/ballot_confirm.mhtml:    my @ballots = Tab::Ballot->search( panel => $panel->id, judge => $judge_id);
./judge/ballot_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_confirm.mhtml:		$ballot->audit(1);
./judge/ballot_confirm.mhtml:		$ballot->update;
./judge/ballot_confirm.mhtml:		$rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first unless $rfd;
./judge/ballot_confirm.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/ballot_confirm.mhtml:	my $event = $panel->round->event;
./judge/ballot_confirm.mhtml:	my $type = $event->type;
./judge/ballot_confirm.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/ballot_confirm.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/ballot_confirm.mhtml:		foreach my $ballot ($panel->ballots) { 
./judge/ballot_confirm.mhtml:			$ballot->audit(1);
./judge/ballot_confirm.mhtml:			$ballot->update;
./judge/ballot_confirm.mhtml:			next if $judge->id == $other->id;
./judge/ballot_confirm.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other);
./judge/ballot_confirm.mhtml:	$m->comp("/funclib/round_done.mas", round => $panel->round);
./judge/ballot_confirm.mhtml:%				my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $ojudge, noob => 1);
./judge/ballot_confirm.mhtml:%				$winner = Tab::Entry->retrieve($win) if $win;
./judge/ballot_confirm.mhtml:							<% $ojudge->first." ".$ojudge->last %> 
./judge/ballot_confirm.mhtml:							<% $winner ? $winner->code : "" %>
./judge/ballot_confirm.mhtml:					<% $aff_count."-".$neg_count %> SPLIT DECISION
./judge/ballot_confirm.mhtml:					<% $aff_count."-".$neg_count %> for the AFFIRMATIVE 
./judge/ballot_confirm.mhtml:					<% $neg_count."-".$aff_count %> for the NEGATIVE
./judge/ballot_confirm.mhtml:			<h4><% $winner? $winner->code : "" %> won on the <% $side %></h4>
./judge/ballot_confirm.mhtml:			<div style="padding-left: 25px;">
./judge/ballot_confirm.mhtml:				<% $rfd->content %>
./judge/ballot_confirm.mhtml:%		my $now = DateTime->now;
./judge/ballot_confirm.mhtml:%		if ($now->month > 9) { 
./judge/ballot_confirm.mhtml:%			if ($person->id == 7482) { 
./judge/ballot_confirm.mhtml:%		if ($now->month > 12) { 
./judge/ballot_confirm.mhtml:%			if ($person->id == 6366 || $person->id == 6429 || $person->id == 6415) { 
./judge/ballot_confirm.mhtml:%		$m->redirect("/user/home.mhtml?msg=$msg");
./judge/rfd_only.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/rfd_only.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/rfd_only.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/rfd_only.mhtml:	my $category = $judge->category;
./judge/rfd_only.mhtml:	$m->abort unless $panel;
./judge/rfd_only.mhtml:	my $round = $panel->round;
./judge/rfd_only.mhtml:	my $wudc++ if $round->event->type eq "wudc";
./judge/rfd_only.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/rfd_only.mhtml:	unless ($judge->person->id == $person->id) { 
./judge/rfd_only.mhtml:		$m->redirect("/user/home.mhtml?err=$err")
./judge/rfd_only.mhtml:	unless ($round->tiebreak_set) { 
./judge/rfd_only.mhtml:		$m->redirect("/user/judge/panels.mhtml?err=$err");
./judge/rfd_only.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/rfd_only.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/rfd_only.mhtml:	my $tourn = $category->tourn;
./judge/rfd_only.mhtml:	my $event = $round->event;
./judge/rfd_only.mhtml:	my $type = $event->type;
./judge/rfd_only.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/rfd_only.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/rfd_only.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/rfd_only.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/rfd_only.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./judge/rfd_only.mhtml:			<h3><% $round->event->abbr %> <% $round->realname %> <% $round->flighted > 1 ? "Flt ".$panel->flight : "" %> RFD/Comments for <% $judge->last %></h3>
./judge/rfd_only.mhtml:			<h4 style="text-align: right;">
./judge/rfd_only.mhtml:				In <% $panel->room ? $panel->room->name : "NONE ASSIGNED" %>
./judge/rfd_only.mhtml:%		my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./judge/rfd_only.mhtml:		<p class='centeralign' style="margin-left: 25px;">
./judge/rfd_only.mhtml:			<textarea name="rfd" rows="<% $type eq "speech" || $type eq "congress" ? "10" : "20" %>" cols="60"><% $rfd ? $rfd->content : "" %></textarea>
./judge/rfd_only.mhtml:%		foreach my $ballot ($panel->ballots( judge => $judge_id)) { 
./judge/rfd_only.mhtml:			my $entry = $ballot->entry;
./judge/rfd_only.mhtml:			my $code = $entry->code;
./judge/rfd_only.mhtml:			$code .= " &ndash; ".$entry->school->code if $ballot_school_code;
./judge/rfd_only.mhtml:			$code .= " &ndash; ".$entry->school->name if $ballot_school_name;
./judge/rfd_only.mhtml:			$code .= " &ndash; ".$entry->name if $ballot_entry_name;
./judge/rfd_only.mhtml:				foreach my $student ($entry->students) { 
./judge/rfd_only.mhtml:					$code .= " &ndash; ".$student->first;
./judge/rfd_only.mhtml:				my $title = Tab::Score->search( tag => "title", ballot => $ballot->id )->first;
./judge/rfd_only.mhtml:				$code .= " &ndash; \"".$title->content."\"" if $title;
./judge/rfd_only.mhtml:%			my $comments = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/rfd_only.mhtml:			<p class='centeralign' style="margin-left: 25px;">
./judge/rfd_only.mhtml:				<textarea name="comments_<% $ballot->id %>" rows="10" cols="78"><% ($comments) ? $comments->content : "" %></textarea>
./judge/rfd_only.mhtml:					<% $round->realname %>
./judge/rfd_only.mhtml:					<% $panel->room ? $panel->room->name : "" %>
./judge/rfd_only.mhtml:%			if ($round->flighted > 1) { 
./judge/rfd_only.mhtml:						<% $panel->flight %>
./judge/rfd_only.mhtml:			<a href="/index/tourn/postings/round.mhtml?tourn_id=<% $round->event->tourn->id %>&round_id=<% $round->id %>" class="blue block">
./judge/rfd_only.mhtml:				<a class="yellow block" href="ballot_comments.mhtml?judge_id=<% $judge->id %>&ballot_id=<% $ballot->id %>">
./judge/rfd_only.mhtml:					For <% $ballot->entry->code %>
./judge/rfd_only.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./judge/rfd_only.mhtml:%				next unless $opanel->round->published;
./judge/rfd_only.mhtml:%				next if $opanel->id == $panel->id;
./judge/rfd_only.mhtml:				<a class="yellow block" href="ballot.mhtml?panel_id=<% $opanel->id %>&judge_id=<% $opanel->judge %>">
./judge/rfd_only.mhtml:					<% $opanel->round->event->abbr %> <% $opanel->round->realname %> <% $opanel->round->flighted > 1 ? "Flt ".$opanel->flight : "" %> Pending
./judge/rfd_only.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./judge/rfd_only.mhtml:%				next if $opanel->id == $panel->id;
./judge/rfd_only.mhtml:				<a class="blue block" href="ballot_view.mhtml?panel_id=<% $opanel->id %>&judge_id=<% $opanel->judge %>">
./judge/rfd_only.mhtml:					<% $opanel->round->event->abbr %> <% $opanel->round->realname %> <% $opanel->round->flighted > 1 ? "Flt ".$opanel->flight : "" %>  Done
./judge/profile.mhtml:	my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./judge/profile.mhtml:	unless ($cj->person->id == $person->id) { 
./judge/profile.mhtml:		$m->print("<p>I call shenaningans.  Do not try to access a judge who is not you</p>");
./judge/profile.mhtml:		$m->abort;
./judge/profile.mhtml:		<h2>Judge <% $cj->first." ".$cj->last %></h2>
./judge/profile.mhtml:		<h4>Judges for <% $cj->chapter->name %></h4>
./judge/tourn.mhtml:%	my $tourn = Tab::Tourn->retrieve($tourn_id);
./judge/tourn.mhtml:%	my @judges = $m->comp("/funclib/person_judges.mas", person => $person, tourn => $tourn);
./judge/tourn.mhtml:%	my $now = DateTime->now;
./judge/tourn.mhtml:			<h4><% $judge->category->tourn->name %> </h4>
./judge/tourn.mhtml:					<% $judge->school ? $judge->school->short_name : "Hired" %>
./judge/tourn.mhtml:%					if ($judge->category->setting("no_codes")) { 
./judge/tourn.mhtml:							<% $judge->category->name %>
./judge/tourn.mhtml:							<% $judge->category->abbr %>
./judge/tourn.mhtml:							<% $judge->code %> 
./judge/tourn.mhtml:%				if ($tourn->end < $now) { 
./judge/tourn.mhtml:						<% scalar $m->comp("/funclib/judge_panels.mas", judge => $judge) %>
./judge/tourn.mhtml:%				} elsif ($judge->category->setting("rounds_per")) { 
./judge/tourn.mhtml:						<% $judge->obligation ? $judge->obligation : "0" %>
./judge/tourn.mhtml:						<% $judge->hired ? $judge->hired : "0" %>
./judge/tourn.mhtml:%			if ($m->comp("/funclib/person_panels.mas", person => $person, judge => $judge)) {
./judge/tourn.mhtml:%			my @upcoming =  $m->comp("/funclib/judge_panels.mas", judge => $judge, published => 1);
./judge/tourn.mhtml:						my $round = $panel->round;
./judge/tourn.mhtml:						my $event = $round->event;
./judge/tourn.mhtml:						my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/tourn.mhtml:						my @ballots = $panel->ballots; 
./judge/tourn.mhtml:							$chair++ if $ballot->chair && $ballot->judge->id == $judge->id;
./judge/tourn.mhtml:						my $aff_string = $event->setting("aff_label");
./judge/tourn.mhtml:						my $neg_string = $event->setting("neg_label");
./judge/tourn.mhtml:								<a class="white" href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>">
./judge/tourn.mhtml:									<% $event->abbr %> <% $round->realname %>
./judge/tourn.mhtml:%								if ($round->flighted > 1) { 
./judge/tourn.mhtml:									<a class="white" href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>">
./judge/tourn.mhtml:										Flight <% $panel->flight %>
./judge/tourn.mhtml:								<% $panel->room ? $panel->room->name : "No Room Listed" %> 
./judge/tourn.mhtml:								<% Tab::nicetime($round->timeslot->start->set_time_zone($tourn->tz)) %>
./judge/tourn.mhtml:%											if ($event->type eq "wudc") { 
./judge/tourn.mhtml:												<% $entry->speaks == 1 ? "1G" : "" %> 
./judge/tourn.mhtml:												<% $entry->speaks == 2 ? "1O" : "" %> 
./judge/tourn.mhtml:												<% $entry->speaks == 3 ? "2G" : "" %> 
./judge/tourn.mhtml:												<% $entry->speaks == 4 ? "2O" : "" %> 
./judge/tourn.mhtml:												<% $entry->side ? $entry->side == 1 ? $aff_string : $neg_string : "" %>
./judge/tourn.mhtml:%											if ($event->type eq "wudc" || $event->type eq "speech") { 
./judge/tourn.mhtml:												<% $entry->code %> 
./judge/tourn.mhtml:												<% $entry->name %> 
./judge/tourn.mhtml:%			my @done =  $m->comp("/funclib/judge_panels.mas", judge => $judge, post_results => 1);
./judge/tourn.mhtml:%					my $event = $done->round->event;
./judge/tourn.mhtml:%					my @entries = $m->comp('/funclib/panel_entries.mas', panel => $done);
./judge/tourn.mhtml:%					my @scores = $m->comp('/funclib/panel_scores.mas', panel => $done, judge => $judge);
./judge/tourn.mhtml:%					@scores = $m->comp('/funclib/panel_scores.mas', panel => $done) if $event->type eq "wudc";
./judge/tourn.mhtml:%						push @{$scores_by_recipient{$score->student->id}}, $score if $score->student && $score->student->id; 
./judge/tourn.mhtml:							<span class="hidden"><% $done->round->name %></span>
./judge/tourn.mhtml:							<% $done->round->realname %>
./judge/tourn.mhtml:							<% $done->round->flighted > 1 ? $done->flight : "" %>
./judge/tourn.mhtml:%									if ($event->type eq "wudc") { 
./judge/tourn.mhtml:										<% $entry->speaks == 1 ? "1G" : "" %> 
./judge/tourn.mhtml:										<% $entry->speaks == 2 ? "1O" : "" %> 
./judge/tourn.mhtml:										<% $entry->speaks == 3 ? "2G" : "" %> 
./judge/tourn.mhtml:										<% $entry->speaks == 4 ? "2O" : "" %> 
./judge/tourn.mhtml:										<% $entry->side ? $entry->side == 1 ? "Aff" : "Neg" : "" %>
./judge/tourn.mhtml:%									if ($event->type eq "wudc") { 
./judge/tourn.mhtml:										<% $entry->code %>  
./judge/tourn.mhtml:										<% $entry->code %>  
./judge/tourn.mhtml:%										next if $score->student > 0;
./judge/tourn.mhtml:%										next unless $score->ballot->entry->id == $entry->id;
./judge/tourn.mhtml:%										if ($entry->event->type eq "wudc") { 
./judge/tourn.mhtml:											<% $score->tag eq "rank" ? 4 - $score->value : "" %> pts
./judge/tourn.mhtml:											<% $score->tag eq "ballot" ? $score->value ? "W" : "L" : "" %>
./judge/tourn.mhtml:											<% $score->tag eq "rank" ? $score->value : "" %>
./judge/tourn.mhtml:											<% $score->tag eq "points" ? $score->value : "" %>
./judge/tourn.mhtml:%								foreach my $student ($entry->students) { 
./judge/tourn.mhtml:%									my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/tourn.mhtml:											<% $student->last %>:
./judge/tourn.mhtml:												<% $notfirst++ ? "-" : "" %>
./judge/tourn.mhtml:												<% $score->tag eq "ballot" ? $score->value ? "W" : "L" : "" %>
./judge/tourn.mhtml:												<% $score->tag eq "rank" ? $score->value : "" %>
./judge/tourn.mhtml:												<% $score->tag eq "points" ? $score->value : "" %>
./judge/tourn.mhtml:%									} elsif ($done->round->event->type ne "speech" && ($done->round->type eq "elim" || $done->round->type eq "final")) { 
./judge/tourn.mhtml:%										unless ($used{$done->id}++) { 
./judge/tourn.mhtml:%											my ($winner, $side, $result) = $m->comp("/funclib/panel_winner.mas", panel => $done);
./judge/tourn.mhtml:											<% $winner ? $winner->code : "" %> (<% $winner ? $winner->name : "" %>) wins <% $result %>
./judge/wsdc_ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_ballot.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/wsdc_ballot.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/wsdc_ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_ballot.mhtml:	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);
./judge/wsdc_ballot.mhtml:	my $round = $panel->round;
./judge/wsdc_ballot.mhtml:	my $event = $round->event;
./judge/wsdc_ballot.mhtml:	my $category = $event->category;
./judge/wsdc_ballot.mhtml:	my $tourn = $category->tourn;
./judge/wsdc_ballot.mhtml:	unless ($judge->person->id == $person->id || $person->site_admin) { 
./judge/wsdc_ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err")
./judge/wsdc_ballot.mhtml:	unless ($round->tiebreak_set) { 
./judge/wsdc_ballot.mhtml:		$m->redirect("/user/judge/panels.mhtml?err=$err");
./judge/wsdc_ballot.mhtml:	unless ($event->type eq "wsdc") { 
./judge/wsdc_ballot.mhtml:		$m->redirect("ballot.mhtml?panel_id=<% $panel->id %>&judge_id=<% $judge->id %>");
./judge/wsdc_ballot.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./judge/wsdc_ballot.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/wsdc_ballot.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/wsdc_ballot.mhtml:	my $ballot_rules = $event->setting("ballot_rules");
./judge/wsdc_ballot.mhtml:	my $type = $event->type;
./judge/wsdc_ballot.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/wsdc_ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_ballot.mhtml:	unless ($panel->started) { 
./judge/wsdc_ballot.mhtml:		my $tz = $tourn->tz;
./judge/wsdc_ballot.mhtml:		my $now = DateTime->now(time_zone => $tz);
./judge/wsdc_ballot.mhtml:		$panel->started($now);
./judge/wsdc_ballot.mhtml:		$panel->update;
./judge/wsdc_ballot.mhtml:	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
./judge/wsdc_ballot.mhtml:		$ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
./judge/wsdc_ballot.mhtml:		$wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
./judge/wsdc_ballot.mhtml:		$points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
./judge/wsdc_ballot.mhtml:	my @panel_students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/wsdc_ballot.mhtml:	my $min_content_points = $event->setting("min_content_points");
./judge/wsdc_ballot.mhtml:	my $max_content_points = $event->setting("max_content_points");
./judge/wsdc_ballot.mhtml:	my $min_style_points = $event->setting("min_style_points");
./judge/wsdc_ballot.mhtml:	my $max_style_points = $event->setting("max_style_points");
./judge/wsdc_ballot.mhtml:	my $min_strategy_points = $event->setting("min_strategy_points");
./judge/wsdc_ballot.mhtml:	my $max_strategy_points = $event->setting("max_strategy_points");
./judge/wsdc_ballot.mhtml:	my $min_poi_points = $event->setting("min_poi_points");
./judge/wsdc_ballot.mhtml:	my $max_poi_points = $event->setting("max_poi_points");
./judge/wsdc_ballot.mhtml:	my $increments = $event->setting("point_increments");
./judge/wsdc_ballot.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/wsdc_ballot.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/wsdc_ballot.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/wsdc_ballot.mhtml:					<% $event->abbr %> <% $round->realname %> <% $round->flighted > 1 ? "Flt ".$panel->flight : "" %> Ballot for <% $judge->last %>
./judge/wsdc_ballot.mhtml:					<% $panel->room > 0 ? "Room ". $panel->room->name : "NO ROOM ASSIGNED" %>
./judge/wsdc_ballot.mhtml:%		if ($round->setting("motion_published")) { 
./judge/wsdc_ballot.mhtml:				<p><% $round->setting("motion") %></p>
./judge/wsdc_ballot.mhtml:%		if ($round->setting("notes")) { 
./judge/wsdc_ballot.mhtml:				<% $round->setting("notes") %>
./judge/wsdc_ballot.mhtml:		<input type="hidden" name="panel_id" value="<% $panel->id %>">
./judge/wsdc_ballot.mhtml:		<input type="hidden" name="judge_id" value="<% $judge->id %>">
./judge/wsdc_ballot.mhtml:%			my $entry = $ballot->entry;
./judge/wsdc_ballot.mhtml:%			my @students = $entry->students;
./judge/wsdc_ballot.mhtml:					<h5><% $entry->code %></h5>
./judge/wsdc_ballot.mhtml:						<select name="<% $ballot->id %>_side" class="fixedsmall chosen">
./judge/wsdc_ballot.mhtml:							<option value="1" id="aff" <% $ballot->side == 1 ? "selected" : ""%>><% $aff_string %></option>
./judge/wsdc_ballot.mhtml:							<option value="2" id="neg" <% $ballot->side == 2 ? "selected" : ""%>><% $neg_string %></option>
./judge/wsdc_ballot.mhtml:						<h5><% $ballot->side == 1 ? $aff_string : $neg_string %></h5>
./judge/wsdc_ballot.mhtml:								<p>Range: <% $min_content_points."-".$max_content_points %></p>
./judge/wsdc_ballot.mhtml:								<p>Range: <% $min_style_points."-".$max_style_points %></p>
./judge/wsdc_ballot.mhtml:								<p>Range: <% $min_strategy_points."-".$max_strategy_points %></p>
./judge/wsdc_ballot.mhtml:									<p>Range: <% $min_poi_points."-".$max_poi_points %></p>
./judge/wsdc_ballot.mhtml:								<p>Range: <% ($min_content_points + $min_style_points + $min_strategy_points) ."-".  ($max_content_points + $max_style_points + $max_strategy_points) %></p>
./judge/wsdc_ballot.mhtml:%					my $already = $ARGS{$position."_".$ballot->id."_student"};
./judge/wsdc_ballot.mhtml:							<select name="<% $position."_".$ballot->id."_student" %>" class="plain <% $position == 4 ? "" : "speakers" %>"
./judge/wsdc_ballot.mhtml:								onchange="speakers(this, <% $ballot->id %>, <% $position %>)">
./judge/wsdc_ballot.mhtml:									<option id="<% $position %>_<% $student->id %>" class="<% $position == 4 ? "reply reply_" : "speaker speaker_" %><% $student->id %>" value="<% $student->id %>" <% $student->id == $already ? 'selected="selected"': "" %> <% $position == 4 ? 'disabled="true"' : "" %>>
./judge/wsdc_ballot.mhtml:										<% $student->first." ".$student->last %>
./judge/wsdc_ballot.mhtml:									<input tabindex=<% $index++ %> type="number" step="1" size="5" name="<% $position."_".$ballot->id %>_ranks" min="1" max="6" _
./judge/wsdc_ballot.mhtml:											class="<% $position."_".$ballot->id %>" disabled="true"
./judge/wsdc_ballot.mhtml:											value="<% $ARGS{$position."_".$ballot->id."_ranks"} %>">
./judge/wsdc_ballot.mhtml:									class="marless <% $ballot->id %> <% $position."_".$ballot->id %>" 
./judge/wsdc_ballot.mhtml:									name="<% $position."_".$ballot->id %>_content" 
./judge/wsdc_ballot.mhtml:									value="<% $ARGS{$position."_".$ballot->id."_content"} %>" 
./judge/wsdc_ballot.mhtml:									onBlur="pointTotal(this, <% $ballot->id %>, <% $position %>)">
./judge/wsdc_ballot.mhtml:									class="marless <% $ballot->id %> <%$position."_".$ballot->id %>" 
./judge/wsdc_ballot.mhtml:									name="<% $position."_".$ballot->id %>_style" 
./judge/wsdc_ballot.mhtml:									value="<% $ARGS{$position."_".$ballot->id."_style"} %>" tabindex=<% $index++ %> 
./judge/wsdc_ballot.mhtml:									onBlur="pointTotal(this, <% $ballot->id %>, <% $position %>)">
./judge/wsdc_ballot.mhtml:									class="marless <% $ballot->id %> <%$position."_".$ballot->id %>" 
./judge/wsdc_ballot.mhtml:									name="<% $position."_".$ballot->id %>_strategy" 
./judge/wsdc_ballot.mhtml:									value="<% $ARGS{$position."_".$ballot->id."_strategy"} %>" tabindex=<% $index++ %> 
./judge/wsdc_ballot.mhtml:									onBlur="pointTotal(this, <% $ballot->id %>, <% $position %>)">
./judge/wsdc_ballot.mhtml:										class="marless <% $ballot->id %> <%$position."_".$ballot->id %>" 
./judge/wsdc_ballot.mhtml:										name="<% $position."_".$ballot->id %>_poi" 
./judge/wsdc_ballot.mhtml:										value="<% $ARGS{$position."_".$ballot->id."_poi"} %>" tabindex=<% $index++ %> 
./judge/wsdc_ballot.mhtml:										onBlur="pointTotal(this, <% $ballot->id %>, <% $position %>)">
./judge/wsdc_ballot.mhtml:						<td class="centeralign strong" id="<% $position."_".$ballot->id %>">
./judge/wsdc_ballot.mhtml:						<span class="quarter centeralign bigger strong padmuchmore" id="<% $ballot->id %>_total">
./judge/wsdc_ballot.mhtml:							<option value="<% $ballot->id %>" <% $ARGS{"winner"} == $ballot->id ? "selected" : "" %>>
./judge/wsdc_ballot.mhtml:								<% $ballot->entry->code %>
./judge/wsdc_ballot.mhtml:								Low-Point Win?
./judge/wsdc_ballot.mhtml:				<li id="header_<% $ballot->id %>" class="commentzing">
./judge/wsdc_ballot.mhtml:					<a onclick="return doneSwitch(<% $ballot->id %>)"><% $ballot->entry->code %></a>
./judge/wsdc_ballot.mhtml:%			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./judge/wsdc_ballot.mhtml:				<textarea name="rfd" rows="15" cols="60"><% $rfd ? $rfd->content : "" %></textarea>
./judge/wsdc_ballot.mhtml:			<div id="box_<% $ballot->id %>" class="commentary" style="display: none;">
./judge/wsdc_ballot.mhtml:%				my $entry = $ballot->entry;
./judge/wsdc_ballot.mhtml:%				my $code = $entry->code;
./judge/wsdc_ballot.mhtml:%				my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/wsdc_ballot.mhtml:					<textarea name="comments_<% $ballot->id %>" rows="15" cols="60"><% $comments ? $comments->content : "" %></textarea>
./judge/wsdc_ballot.mhtml:					<% $round->realname %>
./judge/wsdc_ballot.mhtml:					<% $panel->room ? $panel->room->name : "" %>
./judge/wsdc_ballot.mhtml:%			if ($round->flighted > 1) { 
./judge/wsdc_ballot.mhtml:						<% $panel->flight %>
./judge/wsdc_ballot.mhtml:%			if ($round->setting("num_judges") > 1) { 
./judge/wsdc_ballot.mhtml:%						foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/wsdc_ballot.mhtml:%							next if $other_judge->id == $judge->id;
./judge/wsdc_ballot.mhtml:									<% $other_judge->code." ".$other_judge->first." ".$other_judge->last %>
./judge/wsdc_ballot.mhtml:			<a href="/index/tourn/postings/round.mhtml?tourn_id=<% $event->tourn->id %>&round_id=<% $round->id %>" class="blue full">
./judge/wsdc_ballot.mhtml:		my $point_scale = $event->setting("point_scale");
./judge/wsdc_ballot.mhtml:		my $speech_times = $event->setting("speech_times");
./judge/wsdc_ballot.mhtml:			<% $event->setting("point_ties") ? "<p>Point ties are OK</p>" : "<p>Points may not tie</p>" %>
./judge/wsdc_ballot.mhtml:			<% $no_lpw ? "<p>No low-pt wins</p>" : "" %>
./judge/wsdc_ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./judge/wsdc_ballot.mhtml:%				next unless $opanel->round->published;
./judge/wsdc_ballot.mhtml:%				next if $opanel->id == $panel->id;
./judge/wsdc_ballot.mhtml:				<a class="yellow full" href="ballot.mhtml?panel_id=<% $opanel->id %>&judge_id=<% $opanel->judge %>">
./judge/wsdc_ballot.mhtml:					<% $opanel->round->event->abbr %> <% $opanel->round->realname %> <% $opanel->round->flighted > 1 ? "Flt ".$opanel->flight : "" %> Pending
./judge/wsdc_ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./judge/wsdc_ballot.mhtml:%				next if $opanel->id == $panel->id;
./judge/wsdc_ballot.mhtml:				<a class="blue full" href="ballot_view.mhtml?panel_id=<% $opanel->id %>&judge_id=<% $opanel->judge %>">
./judge/wsdc_ballot.mhtml:					<% $opanel->round->event->abbr %> <% $opanel->round->realname %> <% $opanel->round->flighted > 1 ? "Flt ".$opanel->flight : "" %>  Done
./judge/ballot_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/ballot_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_save.mhtml:    unless ($person->site_admin || $judge->person->id == $person->id) { 
./judge/ballot_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err")
./judge/ballot_save.mhtml:    my @ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id, audit => 0 );
./judge/ballot_save.mhtml:        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
./judge/ballot_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_save.mhtml:		$unconfirmed++ unless $ballot->audit > 0;
./judge/ballot_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_save.mhtml:	my $round = $panel->round;
./judge/ballot_save.mhtml:	my $event = $round->event;
./judge/ballot_save.mhtml:	my $category = $event->category;
./judge/ballot_save.mhtml:    my $tourn = $category->tourn;
./judge/ballot_save.mhtml:    my $type = $event->type;
./judge/ballot_save.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/ballot_save.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/ballot_save.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./judge/ballot_save.mhtml:	$no_lpw++ if $event->type eq 'speech' || $event->type eq 'congress';
./judge/ballot_save.mhtml:	undef $no_lpw if $event->setting("allow_lowpoints");
./judge/ballot_save.mhtml:    my $tiebreaks = $round->tiebreak_set;
./judge/ballot_save.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/ballot_save.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/ballot_save.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/ballot_save.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/ballot_save.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./judge/ballot_save.mhtml:		my $entry = $ballot->entry;
./judge/ballot_save.mhtml:		$drop_ballot{$ballot->id}++ if $entry->dropped;
./judge/ballot_save.mhtml:		unless ($already{$entry->id}++) { 
./judge/ballot_save.mhtml:			$entry->speaks($ballot->speakerorder);
./judge/ballot_save.mhtml:			my @students = $entry->students;
./judge/ballot_save.mhtml:			@{$entry_students{$entry->id}} = @students;
./judge/ballot_save.mhtml:				$student_entry{$student->id} = $entry;
./judge/ballot_save.mhtml:			$entry_headcount{$entry->id} = scalar @students;
./judge/ballot_save.mhtml:			$max_headcount = $entry_headcount{$entry->id} if $max_headcount < $entry_headcount{$entry->id};
./judge/ballot_save.mhtml:			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first;
./judge/ballot_save.mhtml:				$rfd->content($ARGS{"rfd"});
./judge/ballot_save.mhtml:				$rfd->update;
./judge/ballot_save.mhtml:					Tab::Score->create({
./judge/ballot_save.mhtml:						ballot   => $ballot->id,
./judge/ballot_save.mhtml:		if ($ARGS{"comments_".$ballot->id}) {
./judge/ballot_save.mhtml:			my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/ballot_save.mhtml:			$comments_left{$ballot->id} += length($ARGS{"comments"});
./judge/ballot_save.mhtml:				$comments->content($ARGS{"comments_".$ballot->id});
./judge/ballot_save.mhtml:				$comments->update;
./judge/ballot_save.mhtml:					Tab::Score->create({
./judge/ballot_save.mhtml:						ballot   => $ballot->id,
./judge/ballot_save.mhtml:						content  => $ARGS{"comments_".$ballot->id},
./judge/ballot_save.mhtml:		if ($ARGS{"title_".$ballot->id}) {
./judge/ballot_save.mhtml:			my $title = Tab::Score->search( tag => "title", ballot => $ballot->id )->first;
./judge/ballot_save.mhtml:				$title->content($ARGS{"title_".$ballot->id});
./judge/ballot_save.mhtml:				$title->update;
./judge/ballot_save.mhtml:					Tab::Score->create({
./judge/ballot_save.mhtml:						ballot   => $ballot->id,
./judge/ballot_save.mhtml:						content  => $ARGS{"title_".$ballot->id},
./judge/ballot_save.mhtml:			$entry_values{$entry->id."_title"} = $ARGS{"title_".$ballot->id};
./judge/ballot_save.mhtml:			next if index($key, 'comments') != -1;
./judge/ballot_save.mhtml:		$m->redirect("ballot.mhtml".$url_args);
./judge/ballot_save.mhtml:    foreach my $tb ($tiebreaks->tiebreaks) {
./judge/ballot_save.mhtml:        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
./judge/ballot_save.mhtml:        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
./judge/ballot_save.mhtml:        $points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
./judge/ballot_save.mhtml:	} elsif ($event->setting("team_points")) { 
./judge/ballot_save.mhtml:    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/ballot_save.mhtml:    my $tv++ if $type eq "speech" && $tiebreaks->setting("mfl_time_violation");
./judge/ballot_save.mhtml:    my $forfeit++ if $type eq "speech" && $tiebreaks->setting("forfeits_never_break");
./judge/ballot_save.mhtml:    my $max_points = $event->setting("max_points");
./judge/ballot_save.mhtml:    my $min_points = $event->setting("min_points");
./judge/ballot_save.mhtml:	my $max_ob_points = $event->setting("max_ob_points");
./judge/ballot_save.mhtml:	my $min_ob_points = $event->setting("min_ob_points");
./judge/ballot_save.mhtml:    my $point_increments = $event->setting("point_increments");
./judge/ballot_save.mhtml:    my $point_ties = $event->setting("point_ties");
./judge/ballot_save.mhtml:	if ($event->setting("rfd_plz")) { 
./judge/ballot_save.mhtml:		if ($rfd_left < $event->setting('rfd_plz')) { 
./judge/ballot_save.mhtml:			$errs = "This tournament requests you leave a Reason for Decision!  Otherwise students and their coaches will not know how to improve. Please leave at least ".$event->setting("rfd_plz")." words of feedback. (You left $rfd_left) \n";
./judge/ballot_save.mhtml:	if ($event->setting("comments_plz")) { 
./judge/ballot_save.mhtml:			if ($comments_left{$ballot} < $event->setting('comments_plz')) { 
./judge/ballot_save.mhtml:				$errs = "This tournament requests you leave comments for each speaker!  Otherwise students and their coaches will not know how to improve. Please leave at least ".$event->setting("comments_plz")." words of feedback for each speaker.";
./judge/ballot_save.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/ballot_save.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/ballot_save.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/ballot_save.mhtml:			my $side = $ARGS{$ballot->id."_side"};
./judge/ballot_save.mhtml:				$ballot->side($side);
./judge/ballot_save.mhtml:				$ballot->update;
./judge/ballot_save.mhtml:				$sides{$side} = $ballot->entry->id;
./judge/ballot_save.mhtml:				$sides{$ballot->entry->id} = $side;
./judge/ballot_save.mhtml:		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/ballot_save.mhtml:			next if $other_judge->id == $judge->id;
./judge/ballot_save.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
./judge/ballot_save.mhtml:				$side_disagree++ if $sides{$winside} != $win->id;
./judge/ballot_save.mhtml:    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
./judge/ballot_save.mhtml:					next unless $ballot->entry;
./judge/ballot_save.mhtml:					$ballot->side($sides{$ballot->entry->id});
./judge/ballot_save.mhtml:					$ballot->update;
./judge/ballot_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/ballot_save.mhtml:			my $rank = $ARGS{$student->id."_ranks"};
./judge/ballot_save.mhtml:			$student_values{$student->id."_rank"} = $rank;
./judge/ballot_save.mhtml:				$rank_points{$rank} = $ARGS{$student->id."_points"};
./judge/ballot_save.mhtml:			my $rank = $ARGS{$ballot->id."_ranks"};
./judge/ballot_save.mhtml:			unless ($drop_ballot{$ballot->id}) { 
./judge/ballot_save.mhtml:			$entry_values{$ballot->entry->id."_rank"} = $rank if $rank;
./judge/ballot_save.mhtml:				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
./judge/ballot_save.mhtml:			$errs .= "<p>You must mark the low-point rank checkbox if that's what you intend.</p>" unless $no_lpw;
./judge/ballot_save.mhtml:			$errs .= "<p>You marked the low-point rank checkbox, but the ranks are in order of points.  Please check for errors and correct them.</p>";
./judge/ballot_save.mhtml:			my $points = $ARGS{$ballot->id."_points"};
./judge/ballot_save.mhtml:			unless ($drop_ballot{$ballot->id}) { 
./judge/ballot_save.mhtml:			unless ($drop_ballot{$ballot->id}) { 
./judge/ballot_save.mhtml:				$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>" if $points < $min_ob_points || $points > $max_ob_points;
./judge/ballot_save.mhtml:			$entry_values{$ballot->entry->id."_points"} += $points;
./judge/ballot_save.mhtml:			my $points = $ARGS{$student->id."_points"};
./judge/ballot_save.mhtml:			$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>" if $points < $min_ob_points || $points > $max_ob_points;
./judge/ballot_save.mhtml:			$student_values{$student->id."_points"} = $points;
./judge/ballot_save.mhtml:			$entry_values{$student_entry{$student->id}."_points"} += $points;
./judge/ballot_save.mhtml:		$winner = Tab::Ballot->retrieve($winning_ballot);
./judge/ballot_save.mhtml:		$errs .= "<p>Your winner and your chosen side did not agree</p>" if $winner && $winner->side != $ARGS{"winner_side"};
./judge/ballot_save.mhtml:		if ($winner && $entry_headcount{$winner->entry->id} == $max_headcount) {   #2nd bit avoid mavericks
./judge/ballot_save.mhtml:			my $winner_points = $entry_values{$winner->entry->id."_points"};
./judge/ballot_save.mhtml:				my $bal_points = $entry_values{$ballot->entry->id."_points"};
./judge/ballot_save.mhtml:					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>" if $winner_points < $bal_points && not defined $ARGS{"lpw"};
./judge/ballot_save.mhtml:					$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>" if $winner_points > $bal_points && $ARGS{"lpw"};
./judge/ballot_save.mhtml:			next if index($key, 'comments') != -1;
./judge/ballot_save.mhtml:		$m->redirect("ballot.mhtml".$url_args);
./judge/ballot_save.mhtml:		Tab::Score->set_sql( clear_cruft => "
./judge/ballot_save.mhtml:		Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id);
./judge/ballot_save.mhtml:			$ballot->audit("");
./judge/ballot_save.mhtml:			$ballot->update;
./judge/ballot_save.mhtml:				$tigers_blood++ if $winner->id == $ballot->id;
./judge/ballot_save.mhtml:				my $winner = Tab::Score->search({ ballot => $ballot->id, tag => "ballot"})->first;
./judge/ballot_save.mhtml:						$winner = Tab::Score->create({
./judge/ballot_save.mhtml:							ballot   => $ballot->id,
./judge/ballot_save.mhtml:					my $points = Tab::Score->search(ballot => $ballot->id, tag => "points")->first;
./judge/ballot_save.mhtml:						$points = Tab::Score->create({
./judge/ballot_save.mhtml:							ballot   => $ballot->id,
./judge/ballot_save.mhtml:							value    => $entry_values{$ballot->entry->id."_points"}
./judge/ballot_save.mhtml:						next unless $student_entry{$student->id} == $ballot->entry->id;
./judge/ballot_save.mhtml:						my $points = Tab::Score->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;
./judge/ballot_save.mhtml:							$points = Tab::Score->create({
./judge/ballot_save.mhtml:								ballot   => $ballot->id,
./judge/ballot_save.mhtml:								student  => $student->id,
./judge/ballot_save.mhtml:								value    => $entry_values{$ballot->entry->id."_points"}
./judge/ballot_save.mhtml:					next unless $student_entry{$student->id} == $ballot->entry->id;
./judge/ballot_save.mhtml:					my $points = Tab::Score->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;
./judge/ballot_save.mhtml:					eval { $points = Tab::Score->create({
./judge/ballot_save.mhtml:							ballot   => $ballot->id,
./judge/ballot_save.mhtml:							student  => $student->id,
./judge/ballot_save.mhtml:							value    => $student_values{$student->id."_points"}
./judge/ballot_save.mhtml:					next unless $student_entry{$student->id} == $ballot->entry->id;
./judge/ballot_save.mhtml:					$value = $student_values{$student->id."_rank"} if $student_values{$student->id."_rank"};
./judge/ballot_save.mhtml:					my $ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./judge/ballot_save.mhtml:						$ranks = Tab::Score->create({
./judge/ballot_save.mhtml:							ballot   => $ballot->id,
./judge/ballot_save.mhtml:							student  => $student->id,
./judge/ballot_save.mhtml:					my $ranks = Tab::Score->search(ballot => $ballot->id, tag => "rank")->first;
./judge/ballot_save.mhtml:						$ranks = Tab::Score->create({
./judge/ballot_save.mhtml:							ballot   => $ballot->id,
./judge/ballot_save.mhtml:							value    => $entry_values{$ballot->entry->id."_rank"}
./judge/ballot_save.mhtml:						next unless $student_entry{$student->id} == $ballot->entry->id;
./judge/ballot_save.mhtml:						my $ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./judge/ballot_save.mhtml:							$ranks = Tab::Score->create({
./judge/ballot_save.mhtml:								ballot   => $ballot->id,
./judge/ballot_save.mhtml:								student  => $student->id,
./judge/ballot_save.mhtml:								value    => $entry_values{$ballot->entry->id."_rank"}
./judge/ballot_save.mhtml:				<h1 class="centeralign redtext" style="font-size: 48px;">
./judge/ballot_save.mhtml:					<% $winner->entry->code %> on the <% $side %>
./judge/ballot_save.mhtml:					(<% $winner->entry->name %>)
./judge/ballot_save.mhtml:%			@entries = sort {$entry_values{$a->id."_points"} <=> $entry_values{$b->id."_points"}} @entries if $team_points;
./judge/ballot_save.mhtml:%			@entries = sort {$entry_values{$a->id."_rank"} <=> $entry_values{$b->id."_rank"}} @entries if $team_ranks;
./judge/ballot_save.mhtml:%					next if $entry->dropped &! $entry_values{$entry->id."_rank"} &! $entry_values{$entry->id."_points"};
./judge/ballot_save.mhtml:								<% $entry_values{$entry->id."_rank"} %>
./judge/ballot_save.mhtml:								<% $entry_values{$entry->id."_points"} ?  $entry_values{$entry->id."_points"} : "ZERO"  %>
./judge/ballot_save.mhtml:							<% $entry->code %>
./judge/ballot_save.mhtml:								<% $entry->school->code %>
./judge/ballot_save.mhtml:								<% $entry->school->name %>
./judge/ballot_save.mhtml:								<% $entry->name %>
./judge/ballot_save.mhtml:%								foreach my $student (@{$entry_students{$entry->id}}) { 
./judge/ballot_save.mhtml:									<% $student->first %>
./judge/ballot_save.mhtml:								<% $entry_values{$entry->id."_title"} %>
./judge/ballot_save.mhtml:								<% Lingua::EN::Numbers::Ordinate::ordinate($entry->speaks) %>
./judge/ballot_save.mhtml:						<% $entry->code %> (<% $entry->name %>)
./judge/ballot_save.mhtml:%					foreach my $student (@{$entry_students{$entry->id}}) { 
./judge/ballot_save.mhtml:								<%	$student->first." ".$student->last %>:
./judge/ballot_save.mhtml:									<% $student_values{$student->id."_points"} ?  $student_values{$student->id."_points"} : "ZERO"  %>
./judge/ballot_save.mhtml:									<% Lingua::EN::Numbers::Ordinate::ordinate($student_values{$student->id."_rank"}) %>
./judge/ballot_save.mhtml:				vice-versa.
./judge/ballot_save.mhtml:					<a class="dkblue" style="padding: 25px; margin-right: 25px; font-size: 125%; text-decoration: none;" href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>">
./judge/ballot_save.mhtml:						<% $entry->code %> was AFF
./judge/ballot_save.mhtml:					NO! <% $side_disagree ? "FIX SIDES PLEASE" : "RE-ENTER BALLOT" %>
./judge/conflict_school.mhtml:	my @already = Tab::Strike->search( judge => $judge_id, school => $school_id, registrant => 1, conflictee => 1 );
./judge/conflict_school.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/conflict_school.mhtml:	my $tourn = $judge->category->tourn;
./judge/conflict_school.mhtml:		Tab::Strike->create({
./judge/conflict_school.mhtml:			tourn      => $tourn->id,
./judge/conflict_school.mhtml:			judge      => $judge->id,
./judge/conflict_school.mhtml:	$m->redirect("/user/judge/conflicts.mhtml?judge_id=$judge_id&msg=$msg");
./judge/wsdc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/wsdc_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/wsdc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_save.mhtml:    unless ($person->site_admin || $judge->person->id == $person->id) { 
./judge/wsdc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err")
./judge/wsdc_save.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id, audit => 0 );
./judge/wsdc_save.mhtml:	my %ballot_by_id = map {$_->id => $_} @ballots;
./judge/wsdc_save.mhtml:        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
./judge/wsdc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_save.mhtml:		$unconfirmed++ unless $ballot->audit > 0;
./judge/wsdc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wsdc_save.mhtml:	my $round = $panel->round;
./judge/wsdc_save.mhtml:	my $event = $round->event;
./judge/wsdc_save.mhtml:	my $category = $event->category;
./judge/wsdc_save.mhtml:    my $tourn = $category->tourn;
./judge/wsdc_save.mhtml:    my $type = $event->type;
./judge/wsdc_save.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/wsdc_save.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/wsdc_save.mhtml:	if ($event->setting("no_lpw") || $type eq "speech" || $type eq "congress") { 
./judge/wsdc_save.mhtml:    my $tiebreaks = $round->tiebreak_set;
./judge/wsdc_save.mhtml:		my $entry = $ballot->entry;
./judge/wsdc_save.mhtml:			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first;
./judge/wsdc_save.mhtml:				$rfd->content($ARGS{"rfd"});
./judge/wsdc_save.mhtml:				$rfd->update;
./judge/wsdc_save.mhtml:					Tab::Score->create({
./judge/wsdc_save.mhtml:						ballot   => $ballot->id,
./judge/wsdc_save.mhtml:		if ($ARGS{"comments_".$ballot->id}) {
./judge/wsdc_save.mhtml:			my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/wsdc_save.mhtml:				$comments->content($ARGS{"comments_".$ballot->id});
./judge/wsdc_save.mhtml:				$comments->update;
./judge/wsdc_save.mhtml:					Tab::Score->create({
./judge/wsdc_save.mhtml:						ballot   => $ballot->id,
./judge/wsdc_save.mhtml:						content  => $ARGS{"comments_".$ballot->id},
./judge/wsdc_save.mhtml:		next if index($key, 'comments') != -1;
./judge/wsdc_save.mhtml:		$m->redirect("wsdc_ballot.mhtml".$url_args);
./judge/wsdc_save.mhtml:    foreach my $tb ($tiebreaks->tiebreaks) {
./judge/wsdc_save.mhtml:        $ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
./judge/wsdc_save.mhtml:        $wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
./judge/wsdc_save.mhtml:        $points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
./judge/wsdc_save.mhtml:    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/wsdc_save.mhtml:	my %student_by_id = map {$_->id => $_} @students;
./judge/wsdc_save.mhtml:    my $min_content_points = $event->setting("min_content_points");
./judge/wsdc_save.mhtml:    my $max_content_points = $event->setting("max_content_points");
./judge/wsdc_save.mhtml:    my $min_style_points = $event->setting("min_style_points");
./judge/wsdc_save.mhtml:    my $max_style_points = $event->setting("max_style_points");
./judge/wsdc_save.mhtml:    my $min_strategy_points = $event->setting("min_strategy_points");
./judge/wsdc_save.mhtml:    my $max_strategy_points = $event->setting("max_strategy_points");
./judge/wsdc_save.mhtml:    my $min_poi_points = $event->setting("min_poi_points");
./judge/wsdc_save.mhtml:    my $max_poi_points = $event->setting("max_poi_points");
./judge/wsdc_save.mhtml:    my $point_increments = $event->setting("point_increments");
./judge/wsdc_save.mhtml:    my $point_ties = $event->setting("point_ties");
./judge/wsdc_save.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/wsdc_save.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/wsdc_save.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/wsdc_save.mhtml:			my $side = $ARGS{$ballot->id."_side"};
./judge/wsdc_save.mhtml:				$ballot->side($side);
./judge/wsdc_save.mhtml:				$ballot->update;
./judge/wsdc_save.mhtml:				$sides{$side} = $ballot->entry->id;
./judge/wsdc_save.mhtml:				$sides{$ballot->entry->id} = $side;
./judge/wsdc_save.mhtml:		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/wsdc_save.mhtml:			next if $other_judge->id == $judge->id;
./judge/wsdc_save.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
./judge/wsdc_save.mhtml:				$side_disagree++ if $sides{$winside} != $win->id;
./judge/wsdc_save.mhtml:    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
./judge/wsdc_save.mhtml:					$ballot->side($sides{$ballot->entry->id});
./judge/wsdc_save.mhtml:					$ballot->update;
./judge/wsdc_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/wsdc_save.mhtml:			my $key = $position."_".$ballot->id."_student";
./judge/wsdc_save.mhtml:				$student_by_position{$ballot->id}{$position} = $student_by_id{$student_id};
./judge/wsdc_save.mhtml:				$student_values{$student_id}{"tag"} = $position."_".$ballot->id unless $position == 4;
./judge/wsdc_save.mhtml:				$student_values{$student_id}{"ballot"} = $ballot->id; 
./judge/wsdc_save.mhtml:				$errs .= "<p>Student $student_id selected for key $key position $position on ".$ballot->entry->code." was not valid</p>";
./judge/wsdc_save.mhtml:			my $rank = $ARGS{$student->id."_ranks"};
./judge/wsdc_save.mhtml:			$student_values{$student->id}{"rank"} = $rank;
./judge/wsdc_save.mhtml:				$rank_points{$rank} += $ARGS{$student_values{$student->id}{"tag"}."_content"};
./judge/wsdc_save.mhtml:				$rank_points{$rank} += $ARGS{$student_values{$student->id}{"tag"}."_style"};
./judge/wsdc_save.mhtml:				$rank_points{$rank} += $ARGS{$student_values{$student->id}{"tag"}."_strategy"};
./judge/wsdc_save.mhtml:				my $student = $student_by_position{$ballot->id}{$position};
./judge/wsdc_save.mhtml:				next unless $student && $student->id;
./judge/wsdc_save.mhtml:				next unless $student_values{$student->id}{"position"};
./judge/wsdc_save.mhtml:					my $speech_string = ucfirst($category)." points for ".$student->first." ".$student->last;
./judge/wsdc_save.mhtml:					$student_values{$student->id}{$tag} = $ARGS{$position."_".$ballot->id."_".$category};
./judge/wsdc_save.mhtml:						if $student_values{$student->id}{$tag} < $min_content_points * $multiplier;
./judge/wsdc_save.mhtml:					my $ballot_points = $student_values{$student->id}{$tag};
./judge/wsdc_save.mhtml:					$errs .= "<p> $speech_string  missing for ".$student->first." ".$student->last ."</p>" if not defined $ballot_points;
./judge/wsdc_save.mhtml:					$student_values{$student->id}{"points"} += $ballot_points if $position != 4;
./judge/wsdc_save.mhtml:					$student_values{$student->id}{"rebuttal_points"} += $ballot_points if $position == 4;
./judge/wsdc_save.mhtml:					$ballot_points{$student_values{$student->id}{"ballot"}} += $ballot_points;
./judge/wsdc_save.mhtml:				if ($points_taken{$ballot_points{$ballot->id}}++) { 
./judge/wsdc_save.mhtml:		$errs .= "<p>Your winner and your chosen side did not agree</p>" if $winner && $winner->side != $ARGS{"winner_side"};
./judge/wsdc_save.mhtml:			my $winner_points = $ballot_points{$winner->id};
./judge/wsdc_save.mhtml:				my $bal_points = $ballot_points{$ballot->id};
./judge/wsdc_save.mhtml:					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>" 
./judge/wsdc_save.mhtml:					$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>" 
./judge/wsdc_save.mhtml:		$m->redirect("wsdc_ballot.mhtml".$url_args);
./judge/wsdc_save.mhtml:		Tab::Score->set_sql( clear_cruft => "
./judge/wsdc_save.mhtml:		Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id);
./judge/wsdc_save.mhtml:			$ballot->audit("");
./judge/wsdc_save.mhtml:			$ballot->update;
./judge/wsdc_save.mhtml:				$tigers_blood++ if $winner->id == $ballot->id;
./judge/wsdc_save.mhtml:				my $winner = Tab::Score->search({ ballot => $ballot->id, tag => "ballot"})->first;
./judge/wsdc_save.mhtml:						$winner = Tab::Score->create({
./judge/wsdc_save.mhtml:							ballot   => $ballot->id,
./judge/wsdc_save.mhtml:				my $student = $student_by_position{$ballot->id}{$position};
./judge/wsdc_save.mhtml:					my $existing_points = Tab::Score->search({ 
./judge/wsdc_save.mhtml:						ballot  => $ballot->id,
./judge/wsdc_save.mhtml:						student => $student->id})->first;
./judge/wsdc_save.mhtml:						$existing_points = Tab::Score->create({
./judge/wsdc_save.mhtml:							ballot   => $ballot->id,
./judge/wsdc_save.mhtml:							student  => $student->id,
./judge/wsdc_save.mhtml:							value    => $student_values{$student->id}{$tag}
./judge/wsdc_save.mhtml:					$value = $student_values{$student->id}{"rank"} if $student_values{$student->id}{"rank"};
./judge/wsdc_save.mhtml:					my $existing_ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./judge/wsdc_save.mhtml:						$existing_ranks = Tab::Score->create({
./judge/wsdc_save.mhtml:							ballot   => $ballot->id,
./judge/wsdc_save.mhtml:							student  => $student->id,
./judge/wsdc_save.mhtml:				<h1 class="centeralign redtext" style="font-size: 48px;">
./judge/wsdc_save.mhtml:				vice-versa.
./judge/wsdc_save.mhtml:					<a class="dkblue" style="padding: 25px; margin-right: 25px; font-size: 125%; text-decoration: none;" href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>">
./judge/wsdc_save.mhtml:						<% $entry->code %> was AFF
./judge/wsdc_save.mhtml:						<% $winner->entry->code %> on the <% $side %>
./judge/wsdc_save.mhtml:						(<% $winner->entry->name %>)
./judge/wsdc_save.mhtml:%					my $entry = $ballot->entry;
./judge/wsdc_save.mhtml:								<% $entry->code %> 
./judge/wsdc_save.mhtml:								(<% $entry->name %>)
./judge/wsdc_save.mhtml:%							my $student = $student_by_position{$ballot->id}{$position};
./judge/wsdc_save.mhtml:									<%	$student->first." ".$student->last %>:
./judge/wsdc_save.mhtml:											<% $student_values{$student->id}{"rebuttal_points"} ?  $student_values{$student->id}{"rebuttal_points"} : "ZERO"  %>
./judge/wsdc_save.mhtml:											<% $student_values{$student->id}{"points"} ?  $student_values{$student->id}{"points"} : "ZERO"  %>
./judge/wsdc_save.mhtml:										<% Lingua::EN::Numbers::Ordinate::ordinate($student_values{$student->id}{"rank"}) %>
./judge/wsdc_save.mhtml:					NO!  RE-ENTER BALLOT
./judge/hire_edit.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./judge/hire_edit.mhtml:	my $already = $m->comp("/funclib/person_judges.mas", person => $person, tourn => $tourn)->first;
./judge/hire_edit.mhtml:		 	Sign up to judge <% $tourn->name %>
./judge/hire_edit.mhtml:%			my $max_rounds = $already->category->setting("max_rounds");
./judge/hire_edit.mhtml:%			my $max_hires = $max_rounds - $already->obligation;
./judge/hire_edit.mhtml:					<% $already->category->name %> (<% $max_rounds %>)
./judge/hire_edit.mhtml:					<% $already->school ? $already->school->short_name : "Hired" %> 
./judge/hire_edit.mhtml:					<% $already->obligation %>
./judge/hire_edit.mhtml:					<input type="hidden" name="already_id" value="<% $already->id %>">
./judge/hire_edit.mhtml:					<input type="number" name="rounds" size="5" min=0 max=<% $max_hires %> value="<% $already->setting("hire_offer") %>">
./judge/hire_edit.mhtml:					<% $already->setting("hire_approved") ? "Yes" : "No" %>
./judge/hire_edit.mhtml:					<% $already->hired %>
./judge/hire_edit.mhtml:%			foreach my $hire ($already->hires) { 
./judge/hire_edit.mhtml:						<% $hire->school->short_name %>
./judge/hire_edit.mhtml:						for <% $hire->rounds_accepted %> Rnds
./judge/hire_edit.mhtml:						<% $hire->school->setting("contact_name")." - ".Tab::phoneme($hire->school->setting("contact_number")) %>
./judge/hire_edit.mhtml:							<% $hire->school->setting("contact_email") %>
./judge/hire_edit.mhtml:						<a <& "/funclib/confirm.mas", warn => $warn &> class="dkred block" href="hire_cancel.mhtml?hire_id=<% $hire->id %>">
./judge/hire_edit.mhtml:%			foreach my $category ($m->comp("/funclib/category_exchange.mas", tourn => $tourn)) {
./judge/hire_edit.mhtml:% 				my $max_rounds = $category->setting("max_rounds");
./judge/hire_edit.mhtml:						<% $category->name %>
./judge/hire_edit.mhtml:						<input type="hidden" name="category_id" value="<% $category->id %>">
./judge/rfd_only_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/rfd_only_save.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/rfd_only_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/rfd_only_save.mhtml:	$m->abort unless $panel;
./judge/rfd_only_save.mhtml:	my $round = $panel->round;
./judge/rfd_only_save.mhtml:	my $wudc++ if $round->event->type eq "wudc";
./judge/rfd_only_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/rfd_only_save.mhtml:	unless ($judge->person->id == $person->id) { 
./judge/rfd_only_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err")
./judge/rfd_only_save.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/rfd_only_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/rfd_only_save.mhtml:	my $tourn = $judge->category->tourn;
./judge/rfd_only_save.mhtml:	my $type = $round->event->type;
./judge/rfd_only_save.mhtml:	foreach my $ballot ($panel->ballots( judge => $judge_id)) { 
./judge/rfd_only_save.mhtml:		my $comments = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/rfd_only_save.mhtml:		my $new_comments = $ARGS{"comments_".$ballot->id};
./judge/rfd_only_save.mhtml:			$comments->content($new_comments);
./judge/rfd_only_save.mhtml:			$comments->update;
./judge/rfd_only_save.mhtml:			Tab::Score->create({
./judge/rfd_only_save.mhtml:				ballot   => $ballot->id,
./judge/rfd_only_save.mhtml:		my $rfd = Tab::Score->search( ballot => $ballot->id, tag => "rfd")->first;
./judge/rfd_only_save.mhtml:			$rfd->content($new_rfd);
./judge/rfd_only_save.mhtml:			$rfd->update;
./judge/rfd_only_save.mhtml:			Tab::Score->create({
./judge/rfd_only_save.mhtml:				ballot   => $ballot->id,
./judge/rfd_only_save.mhtml:	$m->redirect("rfd_only.mhtml?judge_id=$judge_id&panel_id=".$panel_id."&msg=RFD & Comments saved");
./judge/hire_cancel.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./judge/hire_cancel.mhtml:	my $judge = $hire->judge;
./judge/hire_cancel.mhtml:		$m->redirect("/user/home.mhtml?err=Either something odd has occurred, or you were doing something you should not have.  Contact us if it is the former");
./judge/hire_cancel.mhtml:	unless ($judge->person->id == $person->id) { 
./judge/hire_cancel.mhtml:		$m->redirect("/user/home.mhtml?err=You are not authorized to edit that judge hire");
./judge/hire_cancel.mhtml:	my $hired = $judge->hired - $hire->rounds;
./judge/hire_cancel.mhtml:	$judge->hired($hired);
./judge/hire_cancel.mhtml:	$judge->update;
./judge/hire_cancel.mhtml:	my $description = "Account ".$person->email." deleted a judge exchange hire arrangement with ".$hire->school->name;
./judge/hire_cancel.mhtml:	Tab::ChangeLog->create({
./judge/hire_cancel.mhtml:		tourn       => $judge->category->tourn->id,
./judge/hire_cancel.mhtml:		judge       => $judge->id,
./judge/hire_cancel.mhtml:		school      => $hire->school->id,
./judge/hire_cancel.mhtml:		person      => $person->id
./judge/hire_cancel.mhtml:	my $subject = "Judge ".$judge->first." ".$judge->last." rescinded your hire";
./judge/hire_cancel.mhtml:	".$judge->first." ".$judge->last."\n
./judge/hire_cancel.mhtml:	".$judge->category->tourn->name." in ".$judge->category->abbr ."\n\n
./judge/hire_cancel.mhtml:	Please note that the expectation is that you'd pre-arrange pay rates
./judge/hire_cancel.mhtml:	foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $hire->school->chapter)) { 
./judge/hire_cancel.mhtml:		$m->comp( "/funclib/send_email.mas", from => $person, to => $admin, subject => $subject, body => $body );
./judge/hire_cancel.mhtml:	$hire->delete;
./judge/hire_cancel.mhtml:	$m->redirect("hire.mhtml?msg=Judge hire cancelled.  School coaches were notified by email.");
./judge/conflict_tourn_rm.mhtml:		$m->redirect("/user/judge/conflicts.mhtml?err=$err");
./judge/conflict_tourn_rm.mhtml:	my $conflict = Tab::Strike->retrieve($conflict_id);
./judge/conflict_tourn_rm.mhtml:	my $judge = $conflict->judge;
./judge/conflict_tourn_rm.mhtml:	unless ($judge->person->id == $person->id || $person->site_admin) { 
./judge/conflict_tourn_rm.mhtml:		$m->redirect("/user/judge/conflicts.mhtml?err=$err");
./judge/conflict_tourn_rm.mhtml:	my $msg = "Conflict against ".$conflict->entry->name." removed" if $conflict->type eq "conflict" && $conflict->entry;
./judge/conflict_tourn_rm.mhtml:	$msg = "Conflict against ".$conflict->school->name." removed" if $conflict->type eq "school";
./judge/conflict_tourn_rm.mhtml:	Tab::ChangeLog->create({
./judge/conflict_tourn_rm.mhtml:		tourn       => $judge->category->tourn->id,
./judge/conflict_tourn_rm.mhtml:		judge       => $judge->id,
./judge/conflict_tourn_rm.mhtml:		description => $msg." by ".$person->email,
./judge/conflict_tourn_rm.mhtml:	$conflict->delete;
./judge/conflict_tourn_rm.mhtml:	$m->redirect("/user/judge/conflicts.mhtml?msg=$msg&judge_id=".$judge->id);
./judge/wudc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wudc_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/wudc_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/wudc_save.mhtml:	my $round = $panel->round;
./judge/wudc_save.mhtml:	my $tz = $round->event->tourn->tz;
./judge/wudc_save.mhtml:	my $now = DateTime->now( time_zone => $tz );
./judge/wudc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wudc_save.mhtml:    unless ($judge->person->id == $person->id) { 
./judge/wudc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err")
./judge/wudc_save.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/wudc_save.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/wudc_save.mhtml:    my $type = $panel->round->event->type;
./judge/wudc_save.mhtml:    my $tiebreaks = $panel->round->tiebreak_set;
./judge/wudc_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/wudc_save.mhtml:	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/wudc_save.mhtml:			Tab::Score->create({
./judge/wudc_save.mhtml:				ballot  => $ballot->id,
./judge/wudc_save.mhtml:		$m->redirect("ballot.mhtml".$url_args);
./judge/wudc_save.mhtml:	if ($round->type eq "elim" || $round->type eq "final") { 
./judge/wudc_save.mhtml:			$win_count++ if $ARGS{$ballot->id."_win"};
./judge/wudc_save.mhtml:			$champ = $ballot->entry->id if $ARGS{$ballot->id."_win"} && $round->type eq "final";
./judge/wudc_save.mhtml:			if ($ARGS{$ballot->id."_speakerorder"}) { 
./judge/wudc_save.mhtml:				$errs .= "You assigned two teams to the same position.  Try again <br />" if $positions_taken{$ARGS{$ballot->id."_speakerorder"}};
./judge/wudc_save.mhtml:				$entry_speakerorder{$ballot->entry->id} = $ARGS{$ballot->id."_speakerorder"};
./judge/wudc_save.mhtml:				$positions_taken{$ARGS{$ballot->id."_speakerorder"}}++;
./judge/wudc_save.mhtml:		if ($round->type eq "elim" && $win_count != 2) {
./judge/wudc_save.mhtml:		if ($round->type eq "final" && $win_count != 1) {
./judge/wudc_save.mhtml:		$m->redirect("ballot.mhtml?panel_id=$panel_id&judge_id=$judge_id&errs=$errs") if $errs;
./judge/wudc_save.mhtml:			$win++ if $ARGS{$ballot->id."_win"};
./judge/wudc_save.mhtml:			$entry_win{$ballot->entry->id}++ if $win;
./judge/wudc_save.mhtml:			my $value = Tab::Score->search( ballot => $ballot->id, tag => "ballot" )->first;
./judge/wudc_save.mhtml:			$ballot->speakerorder($entry_speakerorder{$ballot->entry->id});
./judge/wudc_save.mhtml:			$ballot->update;
./judge/wudc_save.mhtml:				$value->value($win);
./judge/wudc_save.mhtml:				$value->update;
./judge/wudc_save.mhtml:				Tab::Score->create({
./judge/wudc_save.mhtml:					ballot  => $ballot->id,
./judge/wudc_save.mhtml:	if ($round->type eq "final") { 
./judge/wudc_save.mhtml:		my $result_set = Tab::ResultSet->search( event => $round->event->id, bracket => 1)->first;
./judge/wudc_save.mhtml:		$result_set = Tab::ResultSet->create({
./judge/wudc_save.mhtml:			tourn     => $round->event->tourn->id,
./judge/wudc_save.mhtml:			event     => $round->event->id,
./judge/wudc_save.mhtml:		my $result = Tab::Result->search( entry => $champ, round => $round->id, result_set => $result_set->id)->first;
./judge/wudc_save.mhtml:		$result = Tab::Result->create({
./judge/wudc_save.mhtml:			round      => $round->id,
./judge/wudc_save.mhtml:			result_set => $result_set->id
./judge/wudc_save.mhtml:		Tab::ResultValue->set_sql( champ => "
./judge/wudc_save.mhtml:		Tab::ResultValue->sql_champ->execute($result_set->id);
./judge/wudc_save.mhtml:		Tab::ResultValue->create({ 
./judge/wudc_save.mhtml:			result    => $result->id,
./judge/wudc_save.mhtml:	if ($round->type ne "final" && $round->type ne "elim") { 
./judge/wudc_save.mhtml:		my $tourn = $judge->category->tourn;
./judge/wudc_save.mhtml:		my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/wudc_save.mhtml:		my $max_points = $panel->round->event->setting("max_points");
./judge/wudc_save.mhtml:		my $min_points = $panel->round->event->setting("min_points");
./judge/wudc_save.mhtml:		my $point_increments = $panel->round->event->setting("point_increments");
./judge/wudc_save.mhtml:		my $point_ties = $panel->round->event->setting("point_ties");
./judge/wudc_save.mhtml:			my $points = $ARGS{$student->id."_points"};
./judge/wudc_save.mhtml:				$rounded_points = $rounded_points - ($points % .5);
./judge/wudc_save.mhtml:			$student_values{$student->id."_points"} = $points;
./judge/wudc_save.mhtml:			$entry_points{$student->entry} += $points;
./judge/wudc_save.mhtml:			$errs .= "<p>You gave two teams points of ".$entry_points{$entry->id}.".  Please correct</p>" if $used_points{$entry_points{$entry->id}};
./judge/wudc_save.mhtml:			$used_points{$entry_points{$entry->id}}++;
./judge/wudc_save.mhtml:			$m->redirect("ballot.mhtml".$url_args);
./judge/wudc_save.mhtml:			Tab::Score->set_sql( clear_cruft => "
./judge/wudc_save.mhtml:			Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id);
./judge/wudc_save.mhtml:			my @entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;
./judge/wudc_save.mhtml:				$entry_rank{$entry->id} = $rank;
./judge/wudc_save.mhtml:				$entry_speakerorder{$ballot->entry->id} = $ballot->speakerorder;
./judge/wudc_save.mhtml:				$ballot->audit("");
./judge/wudc_save.mhtml:				$ballot->update;
./judge/wudc_save.mhtml:				Tab::Score->create({
./judge/wudc_save.mhtml:					ballot  => $ballot->id,
./judge/wudc_save.mhtml:					value   => $entry_rank{$ballot->entry->id},
./judge/wudc_save.mhtml:					next unless $student->entry == $ballot->entry->id;
./judge/wudc_save.mhtml:					Tab::Score->create({
./judge/wudc_save.mhtml:						ballot  => $ballot->id,
./judge/wudc_save.mhtml:						student => $student->id,
./judge/wudc_save.mhtml:						value   => $student_values{$student->id."_points"}
./judge/wudc_save.mhtml:%		if ($round->type eq "elim" || $round->type eq "final") { 
./judge/wudc_save.mhtml:%			@entries = sort {$entry_speakerorder{$a->id} <=> $entry_speakerorder{$b->id}} @entries;
./judge/wudc_save.mhtml:							<% $entry_speakerorder{$entry->id} == 1 ? "1st Gov" : "" %>
./judge/wudc_save.mhtml:							<% $entry_speakerorder{$entry->id} == 2 ? "1st Opp" : "" %>
./judge/wudc_save.mhtml:							<% $entry_speakerorder{$entry->id} == 3 ? "2nd Gov" : "" %>
./judge/wudc_save.mhtml:							<% $entry_speakerorder{$entry->id} == 4 ? "2nd Opp" : "" %>
./judge/wudc_save.mhtml:							<% $entry->code %>
./judge/wudc_save.mhtml:							<% $round->type eq "elim" ? $entry_win{$entry->id} ? "Advances" : "Does not advance" : "" %>
./judge/wudc_save.mhtml:							<% $round->type eq "final" && $entry_win{$entry->id} ? "Champion" : "" %>
./judge/wudc_save.mhtml:%				@entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;
./judge/wudc_save.mhtml:						<% Lingua::EN::Numbers::Ordinate::ordinate( $entry_rank{$entry->id}) %>
./judge/wudc_save.mhtml:						<% 4 - $entry_rank{$entry->id} %> points
./judge/wudc_save.mhtml:						<% ($entry_speakerorder{$entry->id} == 1) ? "1G" : "" %>
./judge/wudc_save.mhtml:						<% ($entry_speakerorder{$entry->id} == 2) ? "1O" : "" %>
./judge/wudc_save.mhtml:						<% ($entry_speakerorder{$entry->id} == 3) ? "2G" : "" %>
./judge/wudc_save.mhtml:						<% ($entry_speakerorder{$entry->id} == 4) ? "2O" : "" %>
./judge/wudc_save.mhtml:						<% $entry->code %>
./judge/wudc_save.mhtml:%						foreach my $student ($entry->students) { 
./judge/wudc_save.mhtml:								<% $student_values{$student->id."_points"} %>
./judge/wudc_save.mhtml:								<% $student->first." ".$student->last %>
./judge/wudc_save.mhtml:						<% $entry_points{$entry->id} %>
./judge/wudc_save.mhtml:				RE-ENTER BALLOT
./judge/conflict_entry.mhtml:	my @already = Tab::Strike->search( judge => $judge_id, entry => $entry_id, registrant => 1, conflictee => 1);
./judge/conflict_entry.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/conflict_entry.mhtml:	my $tourn = $judge->category->tourn;
./judge/conflict_entry.mhtml:		Tab::Strike->create({
./judge/conflict_entry.mhtml:			tourn      => $tourn->id,
./judge/conflict_entry.mhtml:			judge      => $judge->id,
./judge/conflict_entry.mhtml:	$m->redirect("/user/judge/conflicts.mhtml?judge_id=$judge_id&msg=$msg");
./judge/index.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/index.mhtml:	if ($judge > 0 && $judge->person && $judge->person->id != $person->id) { 
./judge/index.mhtml:		my $name = $person->last;
./judge/index.mhtml:		$m->print("That judge is not you.  Stop messing around, $name");
./judge/index.mhtml:		$m->abort;
./judge/index.mhtml:	my @judges = $person->judges unless $judge;
./judge/index.mhtml:	my $now = DateTime->now;
./judge/index.mhtml:%		if ($person->id == 6935) { 
./judge/index.mhtml:%			my $category = $judge->category;
./judge/index.mhtml:%			my $tourn = $category->tourn;
./judge/index.mhtml:%			my $tz = $tourn->tz;  
./judge/index.mhtml:%			my $start = $tourn->start->set_time_zone($tz);
./judge/index.mhtml:%			my $end = $tourn->end->set_time_zone($tz);
./judge/index.mhtml:					<h4><% $tourn->name %> </h4>
./judge/index.mhtml:					<% Tab::niceshortdate($start) %><% $start->day != $end->day ? " - ".Tab::niceshortdate($end) : "" %>/<% $start->year %>
./judge/index.mhtml:						<% $judge->school ? $judge->school->short_name : "Hired" %>
./judge/index.mhtml:						<% $category->name %>
./judge/index.mhtml:%				if ($end > $now && $category->setting("diversity_selfie")) { 
./judge/index.mhtml:					<input type="hidden" name="judge_id" value="<% $judge->id %>">
./judge/index.mhtml:					<label for="<% $judge->id %>_diverse">
./judge/index.mhtml:								<input type="checkbox" id="<% $judge->id %>_diverse" name="diverse" value="1" <% $judge->setting("diverse") ? 'checked="checked"' : "" %> onchange='this.form.submit()'>
./judge/index.mhtml:								<% $judge->setting("diverse") ? "YES" : "NO" %>
./judge/index.mhtml:%					if ($category->setting("diversity_notice")) { 
./judge/index.mhtml:							<% $category->setting("diversity_notice") %>
./judge/index.mhtml:%				unless ($category->setting("no_codes")) { 
./judge/index.mhtml:							<% $judge->code %>
./judge/index.mhtml:							<% scalar $m->comp("/funclib/judge_panels.mas", judge => $judge) %>
./judge/index.mhtml:%				} elsif ($category->setting("rounds_per")) { 
./judge/index.mhtml:							<% $judge->obligation %>
./judge/index.mhtml:							<% $judge->hired %>
./judge/index.mhtml:%				if ($m->comp("/funclib/person_panels.mas", person => $person, judge => $judge)) {
./judge/index.mhtml:%				} elsif ($m->comp("/funclib/person_published.mas", person => $person, judge => $judge)) {
./judge/conflict_rm.mhtml:		$m->redirect("/user/judge/conflicts.mhtml?err=$err");
./judge/conflict_rm.mhtml:	my $conflict = Tab::Conflict->retrieve($conflict_id);
./judge/conflict_rm.mhtml:	unless ($conflict && $conflict->person && $conflict->person->id == $person->id || $person->site_admin) { 
./judge/conflict_rm.mhtml:		$m->redirect("/user/judge/conflicts.mhtml?err=$err");
./judge/conflict_rm.mhtml:	my $msg = "Conflict against ".$conflict->conflicted->last." removed" if $conflict->conflicted;
./judge/conflict_rm.mhtml:	$msg = "Conflict against ".$conflict->chapter->name." removed" if $conflict->chapter;
./judge/conflict_rm.mhtml:	$conflict->delete;
./judge/conflict_rm.mhtml:	$m->redirect("/user/judge/conflicts.mhtml?msg=$msg");
./judge/claim.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./judge/claim.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $cj->chapter)) { 
./judge/claim.mhtml:			if ($admin->id == $person->id) { 
./judge/claim.mhtml:				$cj->person($person->id);
./judge/claim.mhtml:				$cj->update; 
./judge/claim.mhtml:				Tab::Judge->set_sql( update_judges => "update judge set person = ? where chapter_judge = ?");
./judge/claim.mhtml:				Tab::Judge->sql_update_judges->execute($person->id, $cj->id);
./judge/claim.mhtml:				$m->redirect("search.mhtml?msg=$msg");
./judge/claim.mhtml:		$cj->person_request($person->id);
./judge/claim.mhtml:		$cj->update;
./judge/claim.mhtml:		my $subject = "[TabRoom] ". $person->email." requests access to judge ".$cj->first." ".$cj->last;
./judge/claim.mhtml:		my $body = "The Tabroom user \n\n".$person->first." ".$person->last." (".$person->email.") \n";
./judge/claim.mhtml:		$body .= "\nhas requested online access to updates, ballots and texts for judge ".$cj->first." ".$cj->last."\n in your team roster.\n";
./judge/claim.mhtml:		$body .= $Tab::url_prefix."/user/chapter/judges.mhtml?chapter_id=".$cj->chapter->id."\n" if $cj && $cj->chapter;
./judge/claim.mhtml:			$m->comp("/funclib/send_email.mas", from => $person, to => $admin, subject => $subject, body => $body);
./judge/claim.mhtml:		my $msg = "You have requested access to the judge ".$cj->first." ".$cj->last." from the team coaches.";
./judge/claim.mhtml:		$m->redirect("search.mhtml?msg=$msg");
./judge/claim.mhtml:		my $judge = Tab::Judge->retrieve($judge_id);
./judge/claim.mhtml:		foreach my $admin ($m->comp("/funclib/tourn_admins.mas", admin => 1, tourn => $judge->category->tourn)) { 
./judge/claim.mhtml:			if ($admin->id == $person->id) { 
./judge/claim.mhtml:				$judge->person($person->id);
./judge/claim.mhtml:				$judge->update; 
./judge/claim.mhtml:				$m->redirect("search.mhtml?msg=$msg");
./judge/claim.mhtml:		$judge->person_request($person->id);
./judge/claim.mhtml:		$judge->update;
./judge/claim.mhtml:		my $msg = "You have requested access to the judge ".$judge->first." ".$judge->last." from the tournament administrators.";
./judge/claim.mhtml:		$m->redirect("search.mhtml?msg=$msg");
./judge/paradigm_save.mhtml:	my $tz = $person->tz;
./judge/paradigm_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./judge/paradigm_save.mhtml:		my $scrubber = HTML::Scrubber->new( style => 1, allow => [ qw[ p b i u hr br ol ul li strong] ] );
./judge/paradigm_save.mhtml:		my $text = $scrubber->scrub($paradigm);
./judge/paradigm_save.mhtml:		$person->setting("paradigm", "text", $text);
./judge/paradigm_save.mhtml:		$person->setting("paradigm_timestamp", "date", $now);
./judge/paradigm_save.mhtml:		$person->update;
./judge/paradigm_save.mhtml:		$person->setting("paradigm", "");
./judge/paradigm_save.mhtml:		$person->setting("paradigm_timestamp", "");
./judge/paradigm_save.mhtml:		$person->update;
./judge/paradigm_save.mhtml:	$person->update;
./judge/paradigm_save.mhtml:	$m->redirect("/user/judge/paradigm.mhtml?msg=$msg");
./judge/ballot_comments_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_comments_save.mhtml:	my $ballot = Tab::Ballot->retrieve($ballot_id);
./judge/ballot_comments_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_comments_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_comments_save.mhtml:	unless ($judge->person->id == $person->id) { 
./judge/ballot_comments_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err")
./judge/ballot_comments_save.mhtml:	unless ($ballot->judge->id == $judge->id) { 
./judge/ballot_comments_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot_comments_save.mhtml:	my $already = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/ballot_comments_save.mhtml:		$already->content($comments);
./judge/ballot_comments_save.mhtml:		$already->update;
./judge/ballot_comments_save.mhtml:		Tab::Score->create({
./judge/ballot_comments_save.mhtml:			ballot   => $ballot->id,
./judge/ballot_comments_save.mhtml:	$m->redirect("ballot.mhtml?judge_id=$judge_id&panel_id=".$ballot->panel->id."&msg=Comments entered.  Close this window to return to the ballot");
./judge/diverse_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/diverse_switch.mhtml:	$judge->setting("diverse", $diverse);
./judge/diverse_switch.mhtml:	$judge->update;
./judge/diverse_switch.mhtml:	$m->redirect("index.mhtml");
./judge/ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/ballot.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot.mhtml:	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);
./judge/ballot.mhtml:	$m->abort unless $panel;
./judge/ballot.mhtml:	my $round = $panel->round;
./judge/ballot.mhtml:	my $event = $round->event;
./judge/ballot.mhtml:	my $category = $event->category;
./judge/ballot.mhtml:	my $tourn = $category->tourn;
./judge/ballot.mhtml:	if ($event->type eq "wsdc") { 
./judge/ballot.mhtml:		$m->redirect("wsdc_ballot.mhtml?panel_id=".$panel->id."&judge_id=".$judge->id);
./judge/ballot.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./judge/ballot.mhtml:	my $allow_lowpoints++ if $event->setting("allow_lowpoints");
./judge/ballot.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/ballot.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/ballot.mhtml:	my $ballot_rules = $event->setting("ballot_rules");
./judge/ballot.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/ballot.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/ballot.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/ballot.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/ballot.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./judge/ballot.mhtml:	my $type = $event->type;
./judge/ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot.mhtml:	unless ($judge->person->id == $person->id || $person->site_admin) { 
./judge/ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err")
./judge/ballot.mhtml:	unless ($round->tiebreak_set) { 
./judge/ballot.mhtml:		$m->redirect("/user/judge/panels.mhtml?err=$err");
./judge/ballot.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/ballot.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./judge/ballot.mhtml:	unless ($panel->started) { 
./judge/ballot.mhtml:		my $tz = $tourn->tz;
./judge/ballot.mhtml:		my $now = DateTime->now(time_zone => $tz);
./judge/ballot.mhtml:		$panel->started($now);
./judge/ballot.mhtml:		$panel->update;
./judge/ballot.mhtml:	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
./judge/ballot.mhtml:		$ranks++ if ($tb->name eq "ranks" || $tb->name eq "reciprocals");
./judge/ballot.mhtml:		$wins++ if ($tb->name eq "opp_wins" || $tb->name eq "winloss" || $tb->name eq "ballots");
./judge/ballot.mhtml:		$points++ if ($tb->name eq "points" || $tb->name eq "competition" || $tb->name eq "opp_points");
./judge/ballot.mhtml:	my $team_points++ if $event->setting("team_points");
./judge/ballot.mhtml:	my @panel_students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/ballot.mhtml:	my $tv++ if $type eq "speech" && $round->tiebreak_set->setting("mfl_time_violation");
./judge/ballot.mhtml:	my $forfeit++ if $type eq "speech" && $round->tiebreak_set->setting("forfeits_never_break");
./judge/ballot.mhtml:	my $max_points = $event->setting("max_points");
./judge/ballot.mhtml:	my $min_points = $event->setting("min_points");
./judge/ballot.mhtml:	my $max_ob_points = $event->setting("max_ob_points");
./judge/ballot.mhtml:	my $min_ob_points = $event->setting("min_ob_points");
./judge/ballot.mhtml:	my $increments = $event->setting("point_increments");
./judge/ballot.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/ballot.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/ballot.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/ballot.mhtml:				<h4><% $event->abbr %> <% $round->realname %> <% $round->flighted > 1 ? "Flt ".$panel->flight : "" %> Ballot for <% $judge->last %></h4>
./judge/ballot.mhtml:					<% $panel->room > 0 ? "Room ". $panel->room->name : "NO ROOM ASSIGNED" %>
./judge/ballot.mhtml:%		if ($round->setting("notes")) { 
./judge/ballot.mhtml:			<p style="padding-left: 6px; font-size: 14px;">
./judge/ballot.mhtml:				Note: <% $round->setting("notes") %>
./judge/ballot.mhtml:		<input type="hidden" name="panel_id" value="<% $panel->id %>">
./judge/ballot.mhtml:		<input type="hidden" name="judge_id" value="<% $judge->id %>">
./judge/ballot.mhtml:%				if ($wudc && $wins && $round->type eq "elim") { 
./judge/ballot.mhtml:%				} elsif ($wudc && $wins && $round->type eq "final") { 
./judge/ballot.mhtml:							<p>Range: <% $min_ob_points."-".$max_ob_points %><% $min_ob_points != $min_points || $max_ob_points != $max_points ? "*" : "" %></p>
./judge/ballot.mhtml:							<% $event->setting("point_ties") ? "<p>Point ties are OK</p>" : "<p>Points may not tie</p>" %>
./judge/ballot.mhtml:							<% ($type ne "speech" && $type ne "congress" ) && $no_lpw ? "<p>No low-pt wins</p>" : "" %>
./judge/ballot.mhtml:%				my $entry = $ballot->entry;
./judge/ballot.mhtml:%				next if $entry->dropped && $type eq "speech";
./judge/ballot.mhtml:%				next if $entry->dropped && $type eq "congress";
./judge/ballot.mhtml:%				my @students = $entry->students;
./judge/ballot.mhtml:%				my @doubled = $m->comp("/funclib/entry_double.mas", entry => $entry, round => $round);
./judge/ballot.mhtml:								<select name="<% $ballot->id %>_side" class="fixedtiny chosen">
./judge/ballot.mhtml:									<option value="1" id="aff" <% $ballot->side == 1 ? "selected" : ""%>><% $aff_string %></option>
./judge/ballot.mhtml:									<option value="2" id="neg" <% $ballot->side == 2 ? "selected" : ""%>><% $neg_string %></option>
./judge/ballot.mhtml:%							} elsif ($wudc && ($round->type eq "elim" || $round->type eq "final") ) { 
./judge/ballot.mhtml:								<select name="<% $ballot->id %>_speakerorder">
./judge/ballot.mhtml:								<% ($ballot->speakerorder == 1) ? "1st Gov" : "" %>
./judge/ballot.mhtml:								<% ($ballot->speakerorder == 2) ? "1st Opp" : "" %>
./judge/ballot.mhtml:								<% ($ballot->speakerorder == 3) ? "2nd Gov" : "" %>
./judge/ballot.mhtml:								<% ($ballot->speakerorder == 4) ? "2nd Opp" : "" %>
./judge/ballot.mhtml:								<% ($ballot->side == 1) ? $aff_string : $neg_string %>
./judge/ballot.mhtml:						<% $entry->code %><% @doubled ? "&dagger;" : "" %>
./judge/ballot.mhtml:							<% $entry->school->code %>
./judge/ballot.mhtml:							<% $entry->school->name %>
./judge/ballot.mhtml:							<% $entry->name %>
./judge/ballot.mhtml:%							foreach my $student ($entry->students) { 
./judge/ballot.mhtml:								<% $student->first %>
./judge/ballot.mhtml:%						my $ballot_title = Tab::Score->search( tag => "title", ballot => $ballot->id)->first;
./judge/ballot.mhtml:%						my $title = $ballot_title->content if $ballot_title;
./judge/ballot.mhtml:%						$title = $entry->setting("title") unless $title;
./judge/ballot.mhtml:							<input type="text" tabindex=<% $index++  %> name="title_<% $ballot->id %>" value="<% $title %>" placeholder="Enter title or extemp question" size="30">
./judge/ballot.mhtml:									<input tabindex=<% $index++  %> type="number" step="1" size="5" name="<% $ballot->id %>_ranks" min="1" max="<% scalar @panel_students %>" 
./judge/ballot.mhtml:										value="<% $ARGS{$ballot->id."_ranks"} %>">
./judge/ballot.mhtml:									<input class="marless" type="number" step="<% $step %>" name="<% $ballot->id %>_points" size="5" min="<% $min_points %>" max="<% $max_points %>" value="<% $ARGS{$ballot->id."_points"} %>" tabindex=<% $index++ %> >
./judge/ballot.mhtml:									<input type="checkbox" name="<% $ballot->id %>_tv" value="1"> 
./judge/ballot.mhtml:									<input type="checkbox" name="<% $ballot->id %>_forfeit" value="1"> 
./judge/ballot.mhtml:										<% substr($student->first." ".$student->last.":", 0, 30) %>
./judge/ballot.mhtml:										<input tabindex=<% $index++  %> type="number" step="1" size="5" name="<% $student->id %>_ranks" min="1" max="<% scalar @panel_students %>" 
./judge/ballot.mhtml:											value="<% $ARGS{$student->id."_ranks"} %>">
./judge/ballot.mhtml:										<input class="marless" type="number" step="<% $step %>" name="<% $student->id %>_points" size="5" min="<% $min_points %>" max="<% $max_points %>" value="<% $ARGS{$student->id."_points"} %>" tabindex=<% $index++ %> >
./judge/ballot.mhtml:										<input type="checkbox" name="<% $ballot->id %>_tv" value="1"> 
./judge/ballot.mhtml:										<input type="checkbox" name="<% $ballot->id %>_forfeit" value="1"> 
./judge/ballot.mhtml:							<input type="checkbox" name="<% $ballot->id %>_win" tabindex=<% $index++ %> >
./judge/ballot.mhtml:%								next unless $ballot->entry;
./judge/ballot.mhtml:								<option value="<% $ballot->id %>" <% $ARGS{"winner"} == $ballot->id ? "selected" : "" %>>
./judge/ballot.mhtml:									<% $ballot->entry->code %>
./judge/ballot.mhtml:										Low-Point Win?
./judge/ballot.mhtml:									Low-Point Ranks?
./judge/ballot.mhtml:				* The full point range is <% $min_points ? $min_points : "0" %><% " - ".$max_points %> but you must ask the tab room to
./judge/ballot.mhtml:				give points outside of <% $min_ob_points." - ".$max_ob_points %>.
./judge/ballot.mhtml:				<li id="header_<% $ballot->id %>" class="commentzing">
./judge/ballot.mhtml:					<a onclick="return doneSwitch(<% $ballot->id %>)"><% $ballot->entry->code %></a>
./judge/ballot.mhtml:			<p>These comments go to all participants in the round.  <% $event->setting('rfd_plz') ? "Must be at least ".$event->setting('rfd_plz')." words long." : "" %> </p>
./judge/ballot.mhtml:%			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./judge/ballot.mhtml:				<textarea name="rfd" rows="15" cols="60"><% $rfd ? $rfd->content : "" %></textarea>
./judge/ballot.mhtml:			<div id="box_<% $ballot->id %>" class="commentary" style="display: none;">
./judge/ballot.mhtml:				my $entry = $ballot->entry;
./judge/ballot.mhtml:				my $code = $entry->code;
./judge/ballot.mhtml:				$code .= " &ndash; ".$entry->school->code if $ballot_school_code;
./judge/ballot.mhtml:				$code .= " &ndash; ".$entry->school->name if $ballot_school_name;
./judge/ballot.mhtml:				$code .= " &ndash; ".$entry->name if $ballot_entry_name;
./judge/ballot.mhtml:				$code .= " &ndash; ".$entry->setting("title") if $ballot_entry_title;
./judge/ballot.mhtml:					foreach my $student ($entry->students) { 
./judge/ballot.mhtml:						$code .= " &ndash; ".$student->first;
./judge/ballot.mhtml:%				my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/ballot.mhtml:					<textarea name="comments_<% $ballot->id %>" rows="15" cols="60"><% $comments ? $comments->content : "" %></textarea>
./judge/ballot.mhtml:					<% $round->realname %>
./judge/ballot.mhtml:					<% $panel->room ? $panel->room->name : "" %>
./judge/ballot.mhtml:%			if ($round->flighted > 1) { 
./judge/ballot.mhtml:						<% $panel->flight %>
./judge/ballot.mhtml:%			if ($round->setting("num_judges") > 1) { 
./judge/ballot.mhtml:%					foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/ballot.mhtml:%						next if $other_judge->id == $judge->id;
./judge/ballot.mhtml:								<% $other_judge->code." ".$other_judge->first." ".$other_judge->last %>
./judge/ballot.mhtml:			<a href="/index/tourn/postings/round.mhtml?tourn_id=<% $event->tourn->id %>&round_id=<% $round->id %>" class="blue full">
./judge/ballot.mhtml:		my $point_scale = $event->setting("point_scale");
./judge/ballot.mhtml:		my $speech_times = $event->setting("speech_times");
./judge/ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./judge/ballot.mhtml:%				next unless $opanel->round->published;
./judge/ballot.mhtml:%				next if $opanel->id == $panel->id;
./judge/ballot.mhtml:				<a class="yellow full" href="ballot.mhtml?panel_id=<% $opanel->id %>&judge_id=<% $opanel->judge %>">
./judge/ballot.mhtml:					<% $opanel->round->event->abbr %> <% $opanel->round->realname %> <% $opanel->round->flighted > 1 ? "Flt ".$opanel->flight : "" %> Pending
./judge/ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./judge/ballot.mhtml:%				next if $opanel->id == $panel->id;
./judge/ballot.mhtml:				<a class="blue full" href="ballot_view.mhtml?panel_id=<% $opanel->id %>&judge_id=<% $opanel->judge %>">
./judge/ballot.mhtml:					<% $opanel->round->event->abbr %> <% $opanel->round->realname %> <% $opanel->round->flighted > 1 ? "Flt ".$opanel->flight : "" %>  Done
./judge/conflicts.mhtml:		my $other = Tab::Person->retrieve($other_id);
./judge/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, conflicted => $other_id );
./judge/conflicts.mhtml:				Tab::Conflict->create({
./judge/conflicts.mhtml:					person => $person->id,
./judge/conflicts.mhtml:					added_by => $person->id,
./judge/conflicts.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./judge/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, chapter => $chapter_id );
./judge/conflicts.mhtml:				Tab::Conflict->create({
./judge/conflicts.mhtml:					person => $person->id,
./judge/conflicts.mhtml:					added_by => $person->id,
./judge/conflicts.mhtml:		@persons = Tab::Person->search_where( last => { "like", $search_last."%" }, email => { "like", $search_email."%" } );
./judge/conflicts.mhtml:		@persons = Tab::Person->search_where( email => { "like", $search_email."%" } );
./judge/conflicts.mhtml:		@persons = Tab::Person->search_where( last => { "like", $search_last."%" } );
./judge/conflicts.mhtml:		@chapters = Tab::Chapter->search_where( name => { "like", $search_chapter."%" } );
./judge/conflicts.mhtml:	my @existings = Tab::Conflict->search( person => $person->id );
./judge/conflicts.mhtml:%			my @nowjudges = $m->comp("/funclib/person_judges.mas", person => $person, future => 1, conflictable => 1);
./judge/conflicts.mhtml:								<option value="<% $judge->id %>" <% $judge->id == $judge_id ? 'selected="selected"' : "" %>> 
./judge/conflicts.mhtml:									<% $judge->category->abbr %> at <% $judge->category->tourn->name %>
./judge/conflicts.mhtml:%					my @students = Tab::Student->search( person => $other->id );
./judge/conflicts.mhtml:%					my @chapter_judges = Tab::ChapterJudge->search( person => $other->id );
./judge/conflicts.mhtml:%						push @chapters, $person->chapter if $person->chapter;
./judge/conflicts.mhtml:							<% $other->first %>
./judge/conflicts.mhtml:							<% $other->last %>
./judge/conflicts.mhtml:									<% $chapter->name %> 
./judge/conflicts.mhtml:							<a class="dkblue button" href="conflicts.mhtml?other_id=<% $other->id %>">
./judge/conflicts.mhtml:							<% $chapter->name %>
./judge/conflicts.mhtml:							<% $chapter->state %>
./judge/conflicts.mhtml:							<a class="dkblue button" href="conflicts.mhtml?chapter_id=<% $chapter->id %>">
./judge/conflicts.mhtml:							<% $existing->conflicted->id ? "Personal: ".$existing->conflicted->first." ".$existing->conflicted->last : "" %>
./judge/conflicts.mhtml:							<% $existing->chapter->id ? "Team: ".$existing->chapter->name : "" %>
./judge/conflicts.mhtml:							<a class="dkred button" href="conflict_rm.mhtml?conflict_id=<% $existing->id %>">
./judge/conflicts.mhtml:%					unless ($existing->conflicted > 0) { 
./judge/conflicts.mhtml:%					my @cjs = $existing->conflicted->chapter_judges;
./judge/conflicts.mhtml:						Conflict will be applied when <% $existing->conflicted->first." ".$existing->conflicted->last %> judges for:
./judge/conflicts.mhtml:%								next unless $judge->chapter;
./judge/conflicts.mhtml:									Judges for <% $judge->chapter->name %>
./judge/conflicts.mhtml:%					my @students = $existing->conflicted->students;
./judge/conflicts.mhtml:						Conflict will be applied when <% $existing->conflicted->first." ".$existing->conflicted->last %> competes for:
./judge/conflicts.mhtml:									<% $student->chapter->name %>
./judge/conflicts.mhtml:							No competitor records linked. <br />You will not be conflicted against <% $existing->conflicted->first." ".$existing->conflicted->last %> as a competitor.
./judge/conflicts.mhtml:%				my $judge = Tab::Judge->retrieve($judge_id);
./judge/conflicts.mhtml:%				unless ($judge->category->setting("conflicts")) { 
./judge/conflicts.mhtml:%				} elsif ($judge && $judge->person->id == $person->id) { 
./judge/conflicts.mhtml:					<h4 class="button nowrap"> <% $judge->category->tourn->name %></h4>
./judge/conflicts.mhtml:%					foreach my $conflict (Tab::Strike->search( judge => $judge_id, registrant => 1, conflictee => 1 )) { 
./judge/conflicts.mhtml:								<% $conflict->type eq "conflict" && $conflict->entry ? "Entry: ".$conflict->entry->name : "" %>
./judge/conflicts.mhtml:								<% $conflict->type eq "entry" && $conflict->entry ? "Entry: ".$conflict->entry->name : "" %>
./judge/conflicts.mhtml:								<% $conflict->type eq "school" && $conflict->school ? "School: ".$conflict->school->short_name : ""%>
./judge/conflicts.mhtml:								<a class="dkred button" href="conflict_tourn_rm.mhtml?conflict_id=<% $conflict->id %>">
./judge/conflicts.mhtml:%					foreach my $event ($judge->category->events) { 
./judge/conflicts.mhtml:							<input type="hidden" name="judge_id" value="<% $judge->id %>">
./judge/conflicts.mhtml:								<% $event->abbr %>:
./judge/conflicts.mhtml:%									foreach my $entry (sort {$a->code cmp $b->code} $event->entries) {
./judge/conflicts.mhtml:%										my $schname = substr($entry->school->short_name,0,8);
./judge/conflicts.mhtml:										<option value="<% $entry->id %>"><% $schname."- ".$entry->name %></option>
./judge/conflicts.mhtml:						<input type="hidden" name="judge_id" value="<% $judge->id %>">
./judge/conflicts.mhtml:%								foreach my $school (sort {$a->name cmp $b->name} $judge->category->tourn->schools) { 
./judge/conflicts.mhtml:									<option value="<% $school->id %>">	<% $school->name %> </option>
./judge/search.mhtml:		$first = $person->first;
./judge/search.mhtml:		$last = $person->last;
./judge/search.mhtml:	my @cjs = Tab::ChapterJudge->search_like( first => $first."%", last => $last."%", person => 0 );
./judge/search.mhtml:	Tab::Judge->set_sql( person_judges => "
./judge/search.mhtml:	my @judges = Tab::Judge->search_person_judges($first."%", $last."%");
./judge/search.mhtml:		$cjs_by_id{$cjs->id}++;
./judge/search.mhtml:%				next if $cjs->person->id;
./judge/search.mhtml:%				next if $cjs->person_request && $cjs->person_request->id == $person->id;
./judge/search.mhtml:						<% $cjs->first." ".$cjs->last %>
./judge/search.mhtml:						<% ($cjs->chapter) ? $cjs->chapter->name : "" %>
./judge/search.mhtml:						<% (scalar $cjs->judges) %> tournaments
./judge/search.mhtml:						<a class="dkblue block" href="claim.mhtml?chapter_judge_id=<% $cjs->id %>">
./judge/search.mhtml:%				next if $judge->person && $judge->person->id;
./judge/search.mhtml:%				next if $judge->chapter_judge && $cjs_by_id{$judge->chapter_judge->id};
./judge/search.mhtml:						<% $judge->first." ".$judge->last %>
./judge/search.mhtml:						<% ($judge->school && $judge->school->id) ? $judge->school->name : "Hired" %>
./judge/search.mhtml:						<% $judge->category->tourn->name %>
./judge/search.mhtml:%						if ($judge->person_request && $judge->person_request->id == $person->id) { 
./judge/search.mhtml:							<a class="dkblue block" href="claim.mhtml?judge_id=<% $judge->id %>">
./judge/panels.mhtml:%	my @ballot_panels = $m->comp("/funclib/person_panels.mas", person => $person);
./judge/panels.mhtml:%	my @list_panels = $m->comp("/funclib/person_panels.mas", person => $person, listonly => 1);
./judge/panels.mhtml:%	my @done_panels = $m->comp("/funclib/person_panels.mas", person => $person, done => 1);
./judge/panels.mhtml:			my $round = $panel->round;
./judge/panels.mhtml:	   		my $no_side_constraints++ if $round->event->setting('no_side_constraints');
./judge/panels.mhtml:			my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/panels.mhtml:			my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/panels.mhtml:			my $tz = $round->event->tourn->tz;
./judge/panels.mhtml:			$panels_done{$panel->id}++;
./judge/panels.mhtml:			next unless $panel && $round && $round->published;
./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($panel->judge);
./judge/panels.mhtml:			my $tourn = $judge->category->tourn;
./judge/panels.mhtml:			my $event = $round->event;
./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./judge/panels.mhtml:			my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/panels.mhtml:			my @scores = $m->comp('/funclib/panel_scores.mas', panel => $panel, judge => $judge);
./judge/panels.mhtml:			my @ballots = $panel->ballots; 
./judge/panels.mhtml:				$chair++ if $ballot->chair && $ballot->judge->id == $judge->id;
./judge/panels.mhtml:				$scored++ if $score->value;
./judge/panels.mhtml:						<% $round->name %>-<% $panel->flight %>
./judge/panels.mhtml:					<a class="white padless " href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>">
./judge/panels.mhtml:						<% $round->event->abbr %> <% $round->realname %>
./judge/panels.mhtml:%					if ($round->flighted > 1) { 
./judge/panels.mhtml:						<a class="white padless " href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>">
./judge/panels.mhtml:							Flight <% $panel->flight %>
./judge/panels.mhtml:					<% $panel->room ? $panel->room->name : "No Room Listed" %> 
./judge/panels.mhtml:%					my $start = $round->start_time;
./judge/panels.mhtml:%					$start = $round->timeslot->start unless $start;
./judge/panels.mhtml:%					$start = $start->set_time_zone($tz);
./judge/panels.mhtml:%					if ($event->type eq "speech") { 
./judge/panels.mhtml:%						foreach my $entry (sort {$a->speaks <=> $b->speaks} @entries) { 
./judge/panels.mhtml:							<% $entry->code %> &nbsp;
./judge/panels.mhtml:%									if ($event->type eq "wudc") { 
./judge/panels.mhtml:										<% $entry->speaks == 1 ? "1G" : "" %> 
./judge/panels.mhtml:										<% $entry->speaks == 2 ? "1O" : "" %> 
./judge/panels.mhtml:										<% $entry->speaks == 3 ? "2G" : "" %> 
./judge/panels.mhtml:										<% $entry->speaks == 4 ? "2O" : "" %> 
./judge/panels.mhtml:										<% $entry->side ? $entry->side == 1 ? "Flip for" : "Sides" : "" %>
./judge/panels.mhtml:										<% $entry->side ? $entry->side == 1 ? $aff_string : $neg_string : $entry->speaks %>
./judge/panels.mhtml:%									if ($event->type eq "wudc" || $event->type eq "wsdc") { 
./judge/panels.mhtml:										<% $entry->code %> 
./judge/panels.mhtml:										<% $entry->name %> 
./judge/panels.mhtml:%					if ($event->type eq "wudc" &! $chair) { 
./judge/panels.mhtml:%						if ($panel->started) { 
./judge/panels.mhtml:							<a class="dkblue button" href="ballot.mhtml?panel_id=<% $panel->id %>&judge_id=<% $judge->id %>">
./judge/panels.mhtml:							<a class="dkblue button" href="ballot.mhtml?panel_id=<% $panel->id %>&judge_id=<% $judge->id %>">
./judge/panels.mhtml:							<a class="dkred button" href="re_confirm.mhtml?panel_id=<% $panel->id %>&judge_id=<% $judge->id %>">
./judge/panels.mhtml:%			if ( ($event->type eq "wudc" || $event->type eq "wsdc")  && $round->published == 3) { 
./judge/panels.mhtml:						<% $round->name %><% $panel->flight %>
./judge/panels.mhtml:						<% $round->setting("motion") %>
./judge/panels.mhtml:			my $round = $panel->round;
./judge/panels.mhtml:			$panels_done{$panel->id}++;
./judge/panels.mhtml:			next unless $panel && $round && $round->published;
./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($panel->judge);
./judge/panels.mhtml:			my $tourn = $judge->category->tourn;
./judge/panels.mhtml:			my $event = $round->event;
./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./judge/panels.mhtml:			my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/panels.mhtml:			my $key = $round->id."-".$panel->flight;
./judge/panels.mhtml:					<% $round->name %><% $panel->flight %>
./judge/panels.mhtml:					<a class="white padless " href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>">
./judge/panels.mhtml:						<% $round->event->abbr %> <% $round->realname %>
./judge/panels.mhtml:%					if ($round->flighted > 1) { 
./judge/panels.mhtml:						<a class="white padless " href="/index/tourn/postings/round.mhtml?tourn_id=<% $tourn->id %>&round_id=<% $round->id %>">
./judge/panels.mhtml:							Flight <% $panel->flight %>
./judge/panels.mhtml:					<% $panel->room ? $panel->room->name : "No Room Listed" %> 
./judge/panels.mhtml:					<% Tab::nicetime($round->timeslot->start->set_time_zone($tourn->tz)) %>
./judge/panels.mhtml:%								if ($event->type eq "wudc") { 
./judge/panels.mhtml:									<% $entry->speaks == 1 ? "1G" : "" %> 
./judge/panels.mhtml:									<% $entry->speaks == 2 ? "1O" : "" %> 
./judge/panels.mhtml:									<% $entry->speaks == 3 ? "2G" : "" %> 
./judge/panels.mhtml:									<% $entry->speaks == 4 ? "2O" : "" %> 
./judge/panels.mhtml:									<% $entry->side ? $entry->side == 1 ? $aff_string : $neg_string : "" %>
./judge/panels.mhtml:%								if ($event->type eq "wudc" || $event->type eq "wsdc") { 
./judge/panels.mhtml:									<% $entry->code %> 
./judge/panels.mhtml:									<% $entry->name %> 
./judge/panels.mhtml:%			$last_round = $round->id."-".$panel->flight;
./judge/panels.mhtml:			my $round = $done->round;
./judge/panels.mhtml:			my $event = $round->event;
./judge/panels.mhtml:			my $category = $event->category;
./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($done->judge) if $done->judge;
./judge/panels.mhtml:			my @entries = $m->comp('/funclib/panel_entries.mas', panel => $done);
./judge/panels.mhtml:			my @scores = $m->comp('/funclib/panel_scores.mas', panel => $done, judge => $judge);
./judge/panels.mhtml:			@scores = $m->comp('/funclib/panel_scores.mas', panel => $done) if $event->type eq "wudc";
./judge/panels.mhtml:				push @{$scores_by_recipient{$score->student->id}}, $score if $score->student && $score->student->id; 
./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./judge/panels.mhtml:			my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/panels.mhtml:			my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/panels.mhtml:			my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/panels.mhtml:			my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/panels.mhtml:			my $ballot_school_name = $category->setting("ballot_school_names");
./judge/panels.mhtml:			<& /funclib/tablesorter.mas, table => $done->id &>
./judge/panels.mhtml:					<h5><% $event->abbr %> <% $round->realname %> <% $round->flighted > 1 ? "Flt ".$done->flight : "" %></h5>
./judge/panels.mhtml:					<a class="dkblue button" href="rfd_only.mhtml?panel_id=<% $done->id %>&judge_id=<% $judge->id %>">
./judge/panels.mhtml:%						if ($event->type eq "wudc") { 
./judge/panels.mhtml:							<% $entry->speaks == 1 ? "1G" : "" %> 
./judge/panels.mhtml:							<% $entry->speaks == 2 ? "1O" : "" %> 
./judge/panels.mhtml:							<% $entry->speaks == 3 ? "2G" : "" %> 
./judge/panels.mhtml:							<% $entry->speaks == 4 ? "2O" : "" %> 
./judge/panels.mhtml:							<% $entry->side ? $entry->side == 1 ? $aff_string : $neg_string : Lingua::EN::Numbers::Ordinate::ordinate($entry->speaks) %>
./judge/panels.mhtml:%						if ($event->type eq "wudc" || $event->type eq "speech" || $event->type eq "congress" || $event->type eq "wsdc") { 
./judge/panels.mhtml:							<% $entry->code %>  
./judge/panels.mhtml:							<% $ballot_school_code ? $entry->school->code  : "" %>
./judge/panels.mhtml:							<% $ballot_school_name ? $entry->school->name  : "" %>
./judge/panels.mhtml:							<% $ballot_entry_name ? $entry->name  : "" %>
./judge/panels.mhtml:%								foreach my $student ($entry->students) { 
./judge/panels.mhtml:									<% $student->first %>
./judge/panels.mhtml:							<% $entry->name %>  
./judge/panels.mhtml:%							my $title = Tab::Score->search( ballot => $entry->ballot, tag => "title")->first;
./judge/panels.mhtml:							<% $title ? $title->content  : "" %>
./judge/panels.mhtml:%							next if $score->student > 0;
./judge/panels.mhtml:%							next unless $score->ballot->entry->id == $entry->id;
./judge/panels.mhtml:%							if ($entry->event->type eq "wudc" && $round->type ne "elim" && $round->type ne "final") { 
./judge/panels.mhtml:								<% $score->tag eq "rank" ? 4 - $score->value : "" %> pts
./judge/panels.mhtml:%							} elsif ($entry->event->type eq "wudc") {
./judge/panels.mhtml:								<% $score->value == 1 ? "Advances" : "" %>
./judge/panels.mhtml:								<% $score->tag eq "ballot" ? $score->value ? "W" : "L" : "" %>
./judge/panels.mhtml:								<% $score->tag eq "rank" ? $score->value : "" %>
./judge/panels.mhtml:								<% $score->tag eq "points" ? $score->value : "" %>
./judge/panels.mhtml:%					unless ($event->type eq "speech" || $event->type eq "congress") { 
./judge/panels.mhtml:%							foreach my $student ($entry->students) { 
./judge/panels.mhtml:%								my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/panels.mhtml:										<% $student->last %>:
./judge/panels.mhtml:%											next if $score->position > 3;
./judge/panels.mhtml:											<% $notfirst++ ? "-" : "" %>
./judge/panels.mhtml:											<% $score->tag eq "ballot" ? $score->value ? "W" : "L" : "" %>
./judge/panels.mhtml:											<% $score->tag eq "rank" ? $score->value : "" %>
./judge/panels.mhtml:											<% $score->tag eq "points" ? $score->value : "" %>
./judge/panels.mhtml:%							if ($event->type eq "wsdc") { 
./judge/panels.mhtml:%									foreach my $student ($entry->students) { 
./judge/panels.mhtml:%										my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/panels.mhtml:%											next STUDENT unless $score->position > 3;
./judge/panels.mhtml:													REPLY: <% $student->last %>:
./judge/panels.mhtml:													<% $score->value %>
./judge/panels.mhtml:%				$last_round = $round->id."-".$done->flight;
./judge/panels.mhtml:			<p class="explain" style="margin-top: 25px;">
./judge/menu.mas:%			foreach my $cj ($person->chapter_judges) { 
./judge/menu.mas:				<a class="yellow block" href="profile.mhtml?chapter_judge_id=<% $cj->id %>">
./judge/menu.mas:					<% $cj->chapter->name %>
./judge/menu.mas:%			if ($m->comp("/funclib/tourn_exchange.mas")) { 
./judge/menu.mas:				<a class="blue block" href="/user/judge/hire.mhtml?person_id=<% $person->id %>" style="margin-top: 10px;">
./judge/menu.mas:%			foreach my $judge (sort {$b->id <=> $a->id} $person->judges) { 
./judge/menu.mas:%				next unless $judge->category && $judge->category->tourn;
./judge/menu.mas:				<a class="nowrap blue block" href="/user/judge/tourn.mhtml?tourn_id=<% $judge->category->tourn->id %>">
./judge/menu.mas:					<% $judge->category->abbr %> at <% $judge->category->tourn->name %>
./judge/menu.mas:			<a class="yellow block" href="history.mhtml?person_id=<% $person->id %>" style="margin-top: 10px;">
./judge/re_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/re_confirm.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/re_confirm.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/re_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/re_confirm.mhtml:    unless ($judge->person->id == $person->id) { 
./judge/re_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err")
./judge/re_confirm.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/re_confirm.mhtml:        $m->redirect("/user/home.mhtml?err=$err");
./judge/re_confirm.mhtml:	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/re_confirm.mhtml:	my @scores = $m->comp('/funclib/panel_scores.mas', panel => $panel, judge => $judge);
./judge/re_confirm.mhtml:		push @{$scores_by_recipient{$score->student->id}}, $score if $score->student && $score->student->id; 
./judge/re_confirm.mhtml:	my $round = $panel->round;
./judge/re_confirm.mhtml:	my $event = $round->event;
./judge/re_confirm.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/re_confirm.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/re_confirm.mhtml:	<h2><% $event->abbr %> <% $round->realname %></h2>
./judge/re_confirm.mhtml:					<% $entry->name %>  
./judge/re_confirm.mhtml:					<% $entry->side ? $entry->side == 1 ? $aff_string : $neg_string : "" %>
./judge/re_confirm.mhtml:%						next if $score->student > 0;
./judge/re_confirm.mhtml:%						next unless $score->ballot->entry->id == $entry->id;
./judge/re_confirm.mhtml:						<% $score->tag eq "ballot" ? $score->value ? "W" : "L" : "" %>
./judge/re_confirm.mhtml:						<% $score->tag eq "rank" ? $score->value : "" %>
./judge/re_confirm.mhtml:						<% $score->tag eq "points" ? $score->value : "" %>
./judge/re_confirm.mhtml:%					foreach my $student ($entry->students) { 
./judge/re_confirm.mhtml:%						my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/re_confirm.mhtml:							<% $student->last %>:
./judge/re_confirm.mhtml:								<% $notfirst++ ? "-" : "" %>
./judge/re_confirm.mhtml:								<% $score->tag eq "ballot" ? $score->value ? "W" : "L" : "" %>
./judge/re_confirm.mhtml:								<% $score->tag eq "rank" ? $score->value : "" %>
./judge/re_confirm.mhtml:								<% $score->tag eq "points" ? $score->value : "" %>
./judge/re_confirm.mhtml:			<a class="dkred block" style="padding-top: 25px; padding-bottom: 25px; font-size: 125%; text-decoration: none;" href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
./judge/re_confirm.mhtml:				NO WRONG.  RE-ENTER
./judge/re_confirm.mhtml:			<a class="dkblue block" style="padding-top: 25px; padding-bottom: 25px; font-size: 125%; text-decoration: none;" href="ballot_confirm.mhtml?from=reconfirm&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>">
./judge/re_confirm.mhtml:			<a class="blue block" href="/user/judge/panels.mhtml?judge_id=<% $judge->id %>">
./judge/re_confirm.mhtml:				Return to <% $judge->last %>'s panels
./chapter/judge_retire.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_retire.mhtml:	my $chapter = $chapter_judge->chapter;
./chapter/judge_retire.mhtml:	if ($chapter_judge->retired) { 
./chapter/judge_retire.mhtml:		$chapter_judge->retired(0);
./chapter/judge_retire.mhtml:		$msg = $chapter_judge->first." ".$chapter_judge->last." re-activated";
./chapter/judge_retire.mhtml:		$chapter_judge->retired(1);
./chapter/judge_retire.mhtml:		$msg = $chapter_judge->first." ".$chapter_judge->last." de-activated";
./chapter/judge_retire.mhtml:	$chapter_judge->update;
./chapter/judge_retire.mhtml:	$m->redirect("judges.mhtml?chapter_id=".$chapter->id."&show_retired=$show_retired&msg=$msg$backto");
./chapter/ndt_bid_honors.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/ndt_bid_honors.mhtml:	my ($start_dt, $end_dt) = $m->comp("/funclib/seasonal_date_range.mas");			
./chapter/ndt_bid_honors.mhtml:	Tab::Tourn->set_sql(tourn => "
./chapter/ndt_bid_honors.mhtml:	my @tourneys = Tab::Tourn->search_tourn;
./chapter/ndt_bid_honors.mhtml:	Tab::Result->columns(TEMP => qw/tourn_name/);		
./chapter/ndt_bid_honors.mhtml:	Tab::Result->set_sql(honors => "
./chapter/ndt_bid_honors.mhtml:	my @honors = Tab::Result->search_honors;
./chapter/ndt_bid_honors.mhtml:		<h2>Honors to appear on the NDT bid sheet for <% $student->first." ".$student->last %> </h2>
./chapter/ndt_bid_honors.mhtml:					<% $honor->tourn_name %>
./chapter/ndt_bid_honors.mhtml:					<% $honor->honor %>
./chapter/ndt_bid_honors.mhtml:					<a class="dkred block" href="ndt_honors_delete.mas?record_id=<% $honor->id %>&student_id=<% $student_id %>&chapter_id=<% $chapter_id %>">
./chapter/ndt_bid_honors.mhtml:		STEP ONE: Select a tournament below; you can click the drop-down list and type the tournament name for faster searching.
./chapter/ndt_bid_honors.mhtml:						<option value="<% $tourn->id %>">   
./chapter/ndt_bid_honors.mhtml:							<% $tourn->name %> 
./chapter/ndt_bid_honors.mhtml:			<a class="yellow block" href="students.mhtml?chapter_id=<% $student->chapter %>">
./chapter/chapter_welcome.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/chapter_welcome.mhtml:	$m->comp("/user/chapter/auth.mas", chapter => $chapter, person => $person, session => $session);
./chapter/chapter_welcome.mhtml:		<h2>Welcome, <% $chapter->name %></h2>
./chapter/chapter_welcome.mhtml:					catch-all national circuits.  Hit the Circuits tab above
./chapter/students.mhtml:		my @chapters = $person->chapters;
./chapter/students.mhtml:			$m->redirect("/user/home.mhtml?err=$err");
./chapter/students.mhtml:		$chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/students.mhtml:		@students = $chapter->students;
./chapter/students.mhtml:		@students = $chapter->students( retired => 0 );
./chapter/students.mhtml:	@students = sort {$a->last cmp $b->last} @students;
./chapter/students.mhtml:	@students = sort {$a->grad_year <=> $b->grad_year} @students if $sort_by eq "grad_year";
./chapter/students.mhtml:	@students = sort {$b->novice <=> $a->novice } @students if $sort_by eq "novice";
./chapter/students.mhtml:	@students = sort {$b->retired <=> $a->retired } @students if $sort_by eq "retired";
./chapter/students.mhtml:    my @student_requests = Tab::Student->search_where({ 
./chapter/students.mhtml:        chapter => $chapter->id,
./chapter/students.mhtml:		<h2><% $chapter->name %>: Students</h2>
./chapter/students.mhtml:							<% $request->first." ".$request->last %>
./chapter/students.mhtml:								<% $request->person_request->first %>
./chapter/students.mhtml:								<% $request->person_request->last %>
./chapter/students.mhtml:								<a href="mailto:<% $request->person_request->email %>">
./chapter/students.mhtml:								(<% $request->person_request->email %>)
./chapter/students.mhtml:							<a class="dkblue button" href="permit.mhtml?student_id=<% $request->id %>">
./chapter/students.mhtml:							<a class="dkred button" href="deny.mhtml?student_id=<% $request->id %>">
./chapter/students.mhtml:						<a class="hidden" id="<% $student->id %>"></a>
./chapter/students.mhtml:						<a class="dkblue button" href="/user/student/index.mhtml?student_id=<% $student->id %>&from=<% $student->id %>">
./chapter/students.mhtml:						<a class="white" href="student_edit.mhtml?student_id=<% $student->id %>&from=<% $student->id %>">
./chapter/students.mhtml:							<% $student->first %>
./chapter/students.mhtml:						<a class="white" href="student_edit.mhtml?student_id=<% $student->id %>&from=<% $student->id %>">
./chapter/students.mhtml:							<% $student->last %>
./chapter/students.mhtml:						<% $student->grad_year %>
./chapter/students.mhtml:%						if ($student->person > 0) { 
./chapter/students.mhtml:							<a class="white" href="mailto:<% ($student->person) ? $student->person->email : "" %>">
./chapter/students.mhtml:								<% ($student->person) ? $student->person->email : "" %>
./chapter/students.mhtml:						<a class="<% ($student->novice) ? "blue" : "yellow" %> button" href="student_novice.mhtml?student_id=<% $student->id %><% scalar (@students) > 20 ? "&many=#".$student->id : "" %>">
./chapter/students.mhtml:							<% ($student->novice) ? "NOVICE" : "VARSITY" %>
./chapter/students.mhtml:							<a class="<% ($student->retired) ? "dkred" : "dkblue" %> " href="student_retire.mhtml?student_id=<% $student->id %><% scalar (@students) > 20 ? "&many=#".$student->id : "" %>" >
./chapter/students.mhtml:								<% ($student->retired) ? "YES" : "NO" %> 
./chapter/students.mhtml:							<a class="dkred button" href="student_retire.mhtml?student_id=<% $student->id %>&from=nograds">
./chapter/students.mhtml:            <a class="dkblue full" href="student_edit.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:            <a class="yellow full" href="import_csv.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:            <a class="yellow full" href="dedupe.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:				De-duplicate students
./chapter/students.mhtml:            <a class="martop blue full" href="students_csv.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:%			unless ( $chapter->level eq "homeschool" || $chapter->level eq "middle" || $chapter->level eq "elementary" || $chapter->level eq "university" || $chapter->level eq "private" || $chapter->level eq "independent") { 
./chapter/students.mhtml:%				if ($chapter && $chapter->nsda > 0) { 
./chapter/students.mhtml:					<a class="blue martop full" href="/user/nsda/student_roster.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:					<a class="blue full" href="/user/nsda/import_nsda_roster.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:					<a class="blue martop full" href="/user/nsda/link.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:            <a class="blue martop full" href="diets.mhtml?chapter_id=<% $chapter->id %>">
./chapter/students.mhtml:			<a class="blue full" href="students.mhtml?show_grads=<% ($show_grads) ? "" : "a" %>&chapter_id=<% $chapter->id %>">
./chapter/import_csv_template.mhtml:		$m->redirect("$Tab::url_prefix/tmp/ImportChapterJudgesTemplate.csv");
./chapter/import_csv_template.mhtml:		$m->redirect("$Tab::url_prefix/tmp/ImportStudentsTemplate.csv");
./chapter/ndt_honors_save.mas:	my @result_sets = Tab::ResultSet->search( tourn => $tourn_id, label => 'ndt_honors' );
./chapter/ndt_honors_save.mas:		my $obj = Tab::ResultSet->insert(\%hash);
./chapter/ndt_honors_save.mas:		@result_sets = Tab::ResultSet->search( tourn => $tourn_id, label => 'ndt_honors' );
./chapter/ndt_honors_save.mas:	print "result set id=".$result_sets[0]->id."<br>";
./chapter/ndt_honors_save.mas:	my %hash2 = ( student => $student_id, result_set => $result_sets[0]->id, honor => $honor );
./chapter/ndt_honors_save.mas:	my $obj2 = Tab::Result->insert(\%hash2);
./chapter/ndt_honors_save.mas:	$m->redirect("ndt_bid_honors.mhtml?student_id=$student_id&chapter_id=$chapter_id");
./chapter/import_csv_students.mhtml:	my $chapter =  Tab::Chapter->retrieve($chapter_id);
./chapter/import_csv_students.mhtml:	my $tz = $person->tz;
./chapter/import_csv_students.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/import_csv_students.mhtml:	my $req = Apache2::Request->new($r);
./chapter/import_csv_students.mhtml:	my @csv_handles = $r->upload; 
./chapter/import_csv_students.mhtml:	my $csv_file = $req->upload($csv_handles[0]);
./chapter/import_csv_students.mhtml:	unless ($csv_file->type eq "text/csv" || $csv_file->type eq "application/csv") { 
./chapter/import_csv_students.mhtml:		my $err = "No students imported.  You must upload a CSV file, not an Excel or other file.  <br /> <br /> Save the file in Excel as Comma-Separated Values and try again.  File type: ".$csv_file->type;
./chapter/import_csv_students.mhtml:		$m->redirect("students.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/import_csv_students.mhtml:	my $io = $csv_file->io;
./chapter/import_csv_students.mhtml:		$grad_year = $now->year + 1 unless $grad_year;
./chapter/import_csv_students.mhtml:		$student = Tab::Student->create({
./chapter/import_csv_students.mhtml:	my $msg = scalar @students ." students imported into ". $chapter->name;
./chapter/import_csv_students.mhtml:	$m->redirect("students.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./chapter/admin_rm.mhtml:    my @acc = Tab::Permission->search( person => $person->id, chapter => $chapter_id);
./chapter/admin_rm.mhtml:    unless (@acc || $person->site_admin) {
./chapter/admin_rm.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./chapter/admin_rm.mhtml:        $m->redirect("/user/chapter/settings.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./chapter/admin_rm.mhtml:	foreach (@ca) {  $_->delete; } 
./chapter/admin_rm.mhtml:	my $msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./chapter/admin_rm.mhtml:	$m->redirect("/user/chapter/settings.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/settings.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/settings.mhtml:	$m->comp("/user/chapter/auth.mas", chapter => $chapter, person => $person, session => $session);
./chapter/settings.mhtml:	my @regions = $m->comp("/funclib/chapter_regions.mas", chapter => $chapter);
./chapter/settings.mhtml:	my %region_yes = map {$_->id => 1} @regions;
./chapter/settings.mhtml:        <!-- 
./chapter/settings.mhtml:        //--> 
./chapter/settings.mhtml:		<h2><% $chapter->name %></h2>
./chapter/settings.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/settings.mhtml:					<input type="text" name="name" size="24" value="<% $chapter->name %>">
./chapter/settings.mhtml:						<option <% $chapter->level eq "university" ? "selected" : "" %> value="university">College/University</option>
./chapter/settings.mhtml:						<option <% $chapter->level eq "highschool" ? "selected" : "" %> value="highschool">High School/Secondary</option>
./chapter/settings.mhtml:						<option <% $chapter->level eq "middle" ? "selected" : "" %> value="middle">Middle/Junior High</option>
./chapter/settings.mhtml:						<option <% $chapter->level eq "elementary" ? "selected" : "" %> value="elementary">Elementary</option>
./chapter/settings.mhtml:						<option <% $chapter->level eq "homeschool" ? "selected" : "" %> value="homeschool">Home School</option>
./chapter/settings.mhtml:						<option <% $chapter->level eq "independent" ? "selected" : "" %> value="independent">Independent</option>
./chapter/settings.mhtml:						<option <% $chapter->level eq "private" ? "selected" : "" %> value="private">Private Organization</option>
./chapter/settings.mhtml:						<& /funclib/country_select.mas, country => $chapter->country &>
./chapter/settings.mhtml:						<& /funclib/state_select.mas, state => $chapter->state &>
./chapter/settings.mhtml:					<input type="text" name="coaches" size="24" value="<% $chapter->coaches %>">
./chapter/settings.mhtml:						<input type="checkbox" id="self_prefs" name="self_prefs" class="padmore" value="1" <% $chapter->self_prefs ? 'checked="checked"' : "" %>>
./chapter/settings.mhtml:%			if ( $chapter->nsda ) { 
./chapter/settings.mhtml:						<% $chapter->nsda %>
./chapter/settings.mhtml:					<input type="text" name="nces" size="5" class="thin" value="<% $chapter->nces %>">
./chapter/settings.mhtml:					<input type="text" size="5" class="thin" name="ipeds"  value="<% $chapter->ipeds %>">
./chapter/settings.mhtml:							value="1" <% $naudl_err || $chapter->naudl ? 'checked="checked"' : "" %>>
./chapter/settings.mhtml:			<div id="league" class="<% $naudl_err ? "dkred" : "row" %>" <% $chapter->naudl || $naudl_err ? "" : 'style="display: none;"' %>>
./chapter/settings.mhtml:%						foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) { 
./chapter/settings.mhtml:%							foreach my $region ($ns->circuit->regions) { 
./chapter/settings.mhtml:								<option value="<% $region->id %>" <% $region_yes{$region->id} ? 'selected="selected"' : "" %>>
./chapter/settings.mhtml:									<% $region->name %>
./chapter/settings.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id%>">
./chapter/settings.mhtml:%		foreach my $permission ($chapter->permissions) { 
./chapter/settings.mhtml:%			my $coach = $permission->person;
./chapter/settings.mhtml:      	    	    <% $coach->first." ".$coach->last %>
./chapter/settings.mhtml:					<a class="white" href="mailto:<% $coach->email %>">
./chapter/settings.mhtml:              			<% $coach->email %>
./chapter/settings.mhtml:					<select name="<% $coach->id %>_access_level" class="fixedsmall plain">
./chapter/settings.mhtml:						<option value="chapter" <% $permission->tag eq "chapter" ? 'selected="selected"' : "" %>> Full Access </option>
./chapter/settings.mhtml:						<option value="prefs" <% $permission->tag eq "prefs" ? 'selected="selected"' : "" %>> Pref Sheets Only </option>
./chapter/settings.mhtml:					<a class="dkred button" href="admin_rm.mhtml?coach_id=<% $coach->id%>&chapter_id=<% $chapter->id%>">
./chapter/student_search.mhtml:		$m->print("Chapter is $chapter_id And Student is $student_id");
./chapter/student_search.mhtml:		$m->abort;
./chapter/student_search.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/student_search.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_search.mhtml:	unless ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, admin => $person)) { 
./chapter/student_search.mhtml:		$m->print("<p>You do not have access to that chapter.  Stop messing around</p>");
./chapter/student_search.mhtml:		$m->abort;
./chapter/student_search.mhtml:	my ($stud_acc) = Tab::Person->search( email => $email );
./chapter/student_search.mhtml:		$m->redirect("student_edit.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/student_search.mhtml:	my ($exists) = Tab::Student->search( chapter => $chapter->id, person => $stud_acc->id);
./chapter/student_search.mhtml:		my $err = $email ." is already on your roster as ".$exists->first." ".$exists->last."\n";
./chapter/student_search.mhtml:		$m->redirect("student_edit.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/student_search.mhtml:		$student->person($stud_acc->id);
./chapter/student_search.mhtml:		$student->update;
./chapter/student_search.mhtml:		my $now = DateTime->now;
./chapter/student_search.mhtml:		my $grad_year = $now->year + 4;
./chapter/student_search.mhtml:		$student = Tab::Student->create({
./chapter/student_search.mhtml:			person   => $stud_acc->id,
./chapter/student_search.mhtml:			first     => $stud_acc->first,
./chapter/student_search.mhtml:			last      => $stud_acc->last,
./chapter/student_search.mhtml:			gender    => $stud_acc->gender,
./chapter/student_search.mhtml:			chapter   => $chapter->id,
./chapter/student_search.mhtml:	my $body = $person->first." ".$person->last." (".$person->email.") has added you on the Tabroom.com system to the team roster for ".$chapter->name."\n";
./chapter/student_search.mhtml:	$body .= "You will now be able to get team emails and notices, and will be eligible to sign up for tournaments through Tabroom at ".$Tab::url_prefix." if your coaches use the self-signup system. \n\n";
./chapter/student_search.mhtml:	my $subject = "[TabRoom] Added to the ".$chapter->name." team roster";
./chapter/student_search.mhtml:	$m->comp("/funclib/send_email.mas", from => $person, to => $stud_acc, subject => $subject, body => $body);
./chapter/student_search.mhtml:	my $msg = "Student ".$student->first." ".$student->last." added to your roster.  The student has been notified by email.";
./chapter/student_search.mhtml:	$m->redirect("student_edit.mhtml?student_id=".$student->id."&chapter_id=$chapter_id&msg=$msg");
./chapter/prefs.mhtml:	my $access = Tab::Permission->search( person => $person, chapter => $chapter_id)->first;
./chapter/prefs.mhtml:	$m->abort() unless $access;
./chapter/prefs.mhtml:	my $tz = $person->tz;
./chapter/prefs.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/prefs.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/prefs.mhtml:	my $now_string = DateTime::Format::MySQL->format_datetime($now);
./chapter/prefs.mhtml:	Tab::Tourn->columns(TEMP => qw/school/);
./chapter/prefs.mhtml:	Tab::Tourn->set_sql("by_entered_tourn", "
./chapter/prefs.mhtml:	my @entered_tourns = Tab::Tourn->search_by_entered_tourn($chapter->id, $now_string);
./chapter/prefs.mhtml:		foreach my $category ($tourn->categories) { 
./chapter/prefs.mhtml:			my $strike_start = $category->setting("strike_start");
./chapter/prefs.mhtml:			my $strike_end = $category->setting("strike_end");
./chapter/prefs.mhtml:			$strike_start->set_time_zone($tz);
./chapter/prefs.mhtml:			$strike_end->set_time_zone($tz);
./chapter/prefs.mhtml:			$tourn_start{$tourn->id} = $strike_start unless $tourn_start{$tourn->id};
./chapter/prefs.mhtml:			$tourn_start{$tourn->id} = $strike_start if $tourn_start{$tourn->id} && $strike_start->epoch < $tourn_start{$tourn->id}->epoch;
./chapter/prefs.mhtml:				$ratings++ if ($strike_start->epoch < $now->epoch && $now->epoch < $strike_end->epoch);
./chapter/prefs.mhtml:		$tourn_ratings{$tourn->id} += $ratings;
./chapter/prefs.mhtml:		<h2><% $chapter->name %>: Tournaments with Pref Sheets</h2>
./chapter/prefs.mhtml:%						next unless $tourn_start{$et->id};
./chapter/prefs.mhtml:%						my $school = Tab::School->search( chapter => $chapter->id, tourn => $et->id)->first;
./chapter/prefs.mhtml:								<% Tab::niceshortdate($et->start->set_time_zone($tz)) %>
./chapter/prefs.mhtml:								<% ($et->start->day != $et->end->day) ? " - ".Tab::niceshortdate($et->end->set_time_zone($tz)) : "" %>
./chapter/prefs.mhtml:								<a class="white" href="/index/tourn/index.mhtml?tourn_id=<% $et->id %>">
./chapter/prefs.mhtml:									<% $et->name %>
./chapter/prefs.mhtml:% 								foreach ($m->comp("/funclib/tourn_circuits.mas", tourn => $et)) { 
./chapter/prefs.mhtml:									<% $_->abbr %>
./chapter/prefs.mhtml:% 								if ($tourn_ratings{$et->id}) { 
./chapter/prefs.mhtml:									<a class="dkblue block" href="/user/enter/ratings/index.mhtml?school_id=<% $school->id %>">
./chapter/deny.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/deny.mhtml:		my $msg = $cj->person_request->email." has been denied access to the judge ".$cj->first." ".$cj->last;
./chapter/deny.mhtml:		$cj->person_request("");
./chapter/deny.mhtml:		$cj->update;
./chapter/deny.mhtml:		$m->redirect("judges.mhtml?chapter_id=".$cj->chapter->id."&msg=$msg");
./chapter/deny.mhtml:		my $student = Tab::Student->retrieve($student_id);
./chapter/deny.mhtml:		my $msg = $student->person_request->email." has been denied access to the student ".$student->first." ".$student->last;
./chapter/deny.mhtml:		$student->person_request("");
./chapter/deny.mhtml:		$student->update;
./chapter/deny.mhtml:		$m->redirect("students.mhtml?chapter_id=".$student->chapter->id."&msg=$msg");
./chapter/import_csv.mhtml:        my @chapters = $person->chapters;
./chapter/import_csv.mhtml:            $m->redirect("/user/home.mhtml?err=$err");
./chapter/import_csv.mhtml:        $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/import_csv.mhtml:		<h2><% $chapter->name %>: Students & Judges</h2>
./chapter/import_csv.mhtml:		<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="students" action="import_csv_students.mhtml" method="post">
./chapter/import_csv.mhtml:					<span id="filename" class="filename" style="-webkit-user-select: none;">No file selected</span>
./chapter/import_csv.mhtml:					<span class="action" style="-webkit-user-select: none;">Choose File</span>
./chapter/import_csv.mhtml:		<form enctype="multipart/form-data" onsubmit="return uploadThis()" name="judges" action="import_csv_judges.mhtml" method="post">
./chapter/import_csv.mhtml:				<span id="filename" class="filename" style="-webkit-user-select: none;">No file selected</span>
./chapter/import_csv.mhtml:				<span class="action" style="-webkit-user-select: none;">Choose File</span>
./chapter/dedupe.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe.mhtml:	foreach my $student ($chapter->students) { 
./chapter/dedupe.mhtml:		unless ($student->first || $student->last || $student->entry_students) { 
./chapter/dedupe.mhtml:			$student->delete;
./chapter/dedupe.mhtml:			push @{$students_by_name{$student->first."-".$student->last}}, $student;
./chapter/dedupe.mhtml:		<h2><% $chapter->name %>: De-duplicate Students</h2>
./chapter/dedupe.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/dedupe.mhtml:%				$namekey =~ s/-/\ /g;
./chapter/dedupe.mhtml:								<% $student->id." ".$student->first." ".$student->last." '".$student->grad_year %>: <% scalar $student->entries %> entries
./chapter/ndt_honors_delete.mas:	my $obj = Tab::Result->retrieve($record_id);
./chapter/ndt_honors_delete.mas:	$obj->delete if $obj;
./chapter/ndt_honors_delete.mas:	$m->redirect("ndt_bid_honors.mhtml?student_id=$student_id&chapter_id=$chapter_id");
./chapter/create.mhtml:			@chapters = Tab::Chapter->search_where( name => { "like", $name."%"}, country => $country, state => $state );
./chapter/create.mhtml:			push @chapters, Tab::Chapter->search_where( name => { "like", $search_name."%"}, country => $country, state => $state );
./chapter/create.mhtml:		push @chapters, Tab::Chapter->search( ceeb => $ceeb) if $ceeb;
./chapter/create.mhtml:		push @chapters, Tab::Chapter->search( nces => $nces) if $nces;
./chapter/create.mhtml:		push @chapters, Tab::Chapter->search( ipeds => $ipeds) if $ipeds;
./chapter/create.mhtml:							<% $chapter->name %>
./chapter/create.mhtml:						<option value="">--Please choose a level--</option>
./chapter/create.mhtml:					Postal Code (Non-USA)
./chapter/create.mhtml:					IPEDS Number (US College/Universities - optional)
./chapter/create.mhtml:					(US High Schools - optional)
./chapter/create.mhtml:					IPEDS Number (US College/Universities - optional)
./chapter/student_unlink.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_unlink.mhtml:	my $chapter = $student->chapter;
./chapter/student_unlink.mhtml:	unless ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, admin => $person)) { 
./chapter/student_unlink.mhtml:		$m->print("<p>You do not have access to that chapter.  Stop messing around</p>");
./chapter/student_unlink.mhtml:		$m->abort;
./chapter/student_unlink.mhtml:	my $msg = "Student ".$student->first." ".$student->last." was unlinked from the account ".$student->person->email;
./chapter/student_unlink.mhtml:	$student->person("");
./chapter/student_unlink.mhtml:	$student->update;
./chapter/student_unlink.mhtml:	$m->redirect("student_edit.mhtml?student_id=".$student->id."&chapter_id=".$chapter->id."&msg=$msg");
./chapter/circuits.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/circuits.mhtml:	$m->comp("auth.mas", chapter => $chapter, person => $person, session => $session);
./chapter/circuits.mhtml:	my @ljs = sort {$a->circuit->name cmp $b->circuit->name} $chapter->chapter_circuits;
./chapter/circuits.mhtml:		<h2><% $chapter->name %>: Circuits</h2>
./chapter/circuits.mhtml:%					unless ($lj->active) { 
./chapter/circuits.mhtml:%						$lj->delete;
./chapter/circuits.mhtml:%					my $circuit = $lj->circuit;
./chapter/circuits.mhtml:%					$circuit_member{$circuit->id}++;
./chapter/circuits.mhtml:%					next if ($circuit->active < 1 );
./chapter/circuits.mhtml:							<a class="white" href="/index/circuit/index.mhtml?circuit_id=<% $circuit->id %>">
./chapter/circuits.mhtml:								<% $circuit->name %>
./chapter/circuits.mhtml:							<% ($circuit->state) ? $circuit->state."/" : "" %><% $circuit->country %>
./chapter/circuits.mhtml:								<% ($lj->full_member) ? "" : "Tournaments Only" %>
./chapter/circuits.mhtml:%							if ($lj->membership) { 
./chapter/circuits.mhtml:									<% $lj->membership->name %>		
./chapter/circuits.mhtml:									<% ($lj->membership->dues > 0) ? "(\$".$lj->membership->dues.")" : "" %>		
./chapter/circuits.mhtml:%							if ($circuit->regions && $lj->region) { 
./chapter/circuits.mhtml:									<% $lj->region->name %> region
./chapter/circuits.mhtml:							<a href="circuit_leave.mhtml?chapter_id=<% $chapter->id %>&lj_id=<% $lj->id %>" class="dkred block">
./chapter/circuits.mhtml:				tournament-only basis.
./chapter/circuits.mhtml:				Circuit (US HS).  That is a catch-all for tournaments that are
./chapter/circuits.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/circuits.mhtml:%					foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->search( active => 1 )) {  
./chapter/circuits.mhtml:%						next if $circuit->setting("ncfl");
./chapter/circuits.mhtml:%						next if $circuit->setting("naudl");
./chapter/circuits.mhtml:%						next if $circuit_member{$circuit->id};
./chapter/circuits.mhtml:						<option value="<% $circuit->id %>"> <% $circuit->name %> (<% ($circuit->state) ? $circuit->state."/" : "" %><% $circuit->country %>) </option>
./chapter/tourn_register.mhtml:		$m->redirect("/index/index.mhtml?err=$err");
./chapter/tourn_register.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./chapter/tourn_register.mhtml:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./chapter/tourn_register.mhtml:		$m->redirect("/user/setup.mhtml?err=$err");
./chapter/tourn_register.mhtml:		my $school = Tab::School->search( chapter => $chapters[0]->id, tourn => $tourn->id )->first;
./chapter/tourn_register.mhtml:			$m->redirect("/user/enter/entry.mhtml?school_id=".$school->id);
./chapter/tourn_register.mhtml:			$m->redirect("/user/enter/create.mhtml?tourn_id=".$tourn->id."&chapter_id=".$chapters[0]->id);
./chapter/tourn_register.mhtml:				<h6 class="nospace rightalign">Tournament: <% $tourn->name %></h6>
./chapter/tourn_register.mhtml:					<% $chapter->name %>
./chapter/tourn_register.mhtml:					<a class="dkblue button" href="/user/enter/create.mhtml?tourn_id=<% $tourn->id %>&chapter_id=<% $chapters[0]->id %>">
./chapter/student_novice.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_novice.mhtml:	my $chapter = $student->chapter;
./chapter/student_novice.mhtml:	unless ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, admin => $person)) { 
./chapter/student_novice.mhtml:		$m->print("<p>You do not have access to that chapter.  Stop messing around</p>");
./chapter/student_novice.mhtml:		$m->abort;
./chapter/student_novice.mhtml:	my $msg = "Student ".$student->first." ".$student->last." novice status changed ";
./chapter/student_novice.mhtml:	if ($student->novice) { 
./chapter/student_novice.mhtml:		$student->novice("");
./chapter/student_novice.mhtml:		$student->novice(1);
./chapter/student_novice.mhtml:	$student->update;
./chapter/student_novice.mhtml:	$m->redirect("students.mhtml?student_id=".$student->id."&chapter_id=".$chapter->id."&msg=$msg$many");
./chapter/no_interest.mhtml:	my $nope = Tab::TournIgnore->create({
./chapter/no_interest.mhtml:		person => $person->id,
./chapter/no_interest.mhtml:	$m->redirect("tournaments.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/judge_edit.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id) if $chapter_judge_id;
./chapter/judge_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./chapter/judge_edit.mhtml:	$chapter = $chapter_judge->chapter if $chapter_judge && not defined $chapter;
./chapter/judge_edit.mhtml:		$m->redirect("/user/home.mhtml?msg=$msg");
./chapter/judge_edit.mhtml:		<h2><% $chapter->name %> Judge Roster</h2>
./chapter/judge_edit.mhtml:			<h4>Edit <% $chapter_judge->first." ".$chapter_judge->last %></h4>
./chapter/judge_edit.mhtml:%		unless ($chapter_judge && $chapter_judge->person && $chapter_judge->person->id) { 	
./chapter/judge_edit.mhtml:						<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/judge_edit.mhtml:						<% ($chapter_judge) ? "Link ".$chapter_judge->first." ".$chapter_judge->last." to "  : "Find judge w/" %> an tabroom.com account:
./chapter/judge_edit.mhtml:%			if ($chapter_judge && $chapter_judge->person && $chapter_judge->person->id) { 
./chapter/judge_edit.mhtml:							<a class="white" href="mailto:<% $chapter_judge->person->email %>">
./chapter/judge_edit.mhtml:								<% $chapter_judge->person->email %>
./chapter/judge_edit.mhtml:							<a class=" dkred button"  href="judge_unlink.mhtml?chapter_judge_id=<% $chapter_judge->id %>">
./chapter/judge_edit.mhtml:					<input type="hidden" name="chapter_judge_id" value="<% ($chapter_judge) ? $chapter_judge->id : "" %>">
./chapter/judge_edit.mhtml:					<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/judge_edit.mhtml:					<input type="text" name="first" size="30" value="<% ($chapter_judge) ? $chapter_judge->first : "" %>">
./chapter/judge_edit.mhtml:					<input type="text" name="last" size="30" value="<% ($chapter_judge) ? $chapter_judge->last : ""%>">
./chapter/judge_edit.mhtml:					<input type="text" name="phone" size="30" value="<% ($chapter_judge) ? $chapter_judge->phone : ""%>">
./chapter/judge_edit.mhtml:					<input type="text" name="started" size="6" value="<% ($chapter_judge) ?   $chapter_judge->started : ""%>">
./chapter/judge_edit.mhtml:								<% ($chapter_judge) ? ($chapter_judge->gender eq "M") ? "checked" : "" : "" %>> M
./chapter/judge_edit.mhtml:								<% ($chapter_judge) ? ($chapter_judge->gender eq "F" ) ? "checked" : "" : "" %>> F
./chapter/judge_edit.mhtml:								<% ($chapter_judge) ? ($chapter_judge->gender eq "O" ) ? "checked" : "" : "" %>> Other
./chapter/judge_edit.mhtml:						<input type="text" size="30" name="notes" value="<% ($chapter_judge) ? $chapter_judge->notes : "" %>">
./chapter/judge_edit.mhtml:%						if ($chapter_judge && $chapter_judge->notes) { 
./chapter/judge_edit.mhtml:							last edited <% Tab::shortdate($chapter_judge->notes_timestamp) %>
./chapter/judge_edit.mhtml:					<input type="text" size="30" name="diet" value="<% ($chapter_judge) ? $chapter_judge->diet : "" %>">
./chapter/judge_edit.mhtml:			<a class="yellow block" href="judge_edit.mhtml?chapter_id=<% $chapter->id %>">
./chapter/judge_edit.mhtml:			<a class="yellow block" href="judges.mhtml?chapter_id=<% $chapter->id %>">
./chapter/judge_edit.mhtml:				<h4><% $chapter_judge->first %> Recently:</h4>
./chapter/judge_edit.mhtml:%				my @recents = Tab::Judge->search_where(
./chapter/judge_edit.mhtml:%						{ chapter_judge => $chapter_judge->id,
./chapter/judge_edit.mhtml:%					next unless $judge->category;
./chapter/judge_edit.mhtml:%					next unless $judge->category->tourn;
./chapter/judge_edit.mhtml:						<% $judge->category->abbr %> at <% $judge->category->tourn->name %>
./chapter/circuit_join.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./chapter/circuit_join.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./chapter/circuit_join.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./chapter/circuit_join.mhtml:	my @memberships = $circuit->circuit_memberships;
./chapter/circuit_join.mhtml:	my @regions = $circuit->regions if $circuit->setting("region_based");
./chapter/circuit_join.mhtml:		$m->redirect("/user/chapter/circuits.mhtml?chapter_id=".$chapter->id."&err=$err");
./chapter/circuit_join.mhtml:		unless ($circuit->setting("tourn_only")) {
./chapter/circuit_join.mhtml:			$m->redirect("/user/chapter/circuits.mhtml?chapter_id=".$chapter->id."&err=$err");
./chapter/circuit_join.mhtml:		my $cl = Tab::ChapterCircuit->create({
./chapter/circuit_join.mhtml:			circuit => $circuit->id,
./chapter/circuit_join.mhtml:			chapter => $chapter->id,
./chapter/circuit_join.mhtml:		my $msg = "You can now register for tournaments in ".$circuit->name;
./chapter/circuit_join.mhtml:		$m->redirect("/user/chapter/circuits.mhtml?chapter_id=".$chapter->id."&msg=$msg");
./chapter/circuit_join.mhtml:		unless ($circuit->setting("full_members")) {
./chapter/circuit_join.mhtml:			$m->redirect("/user/chapter/circuits.mhtml?chapter_id=".$chapter->id."&err=$err");
./chapter/circuit_join.mhtml:		if ($circuit->setting("region_based")) { 
./chapter/circuit_join.mhtml:		if ($circuit->circuit_memberships) { 
./chapter/circuit_join.mhtml:			my $cl = Tab::ChapterCircuit->create({
./chapter/circuit_join.mhtml:				circuit => $circuit->id,
./chapter/circuit_join.mhtml:				chapter => $chapter->id,
./chapter/circuit_join.mhtml:			my $msg = "You are now a member of ".$circuit->name;
./chapter/circuit_join.mhtml:			$m->redirect("/user/chapter/circuits.mhtml?chapter_id=".$chapter->id."&msg=$msg");
./chapter/circuit_join.mhtml:			<input type="hidden" name="circuit_id" value="<% $circuit->id %>">
./chapter/circuit_join.mhtml:			<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/circuit_join.mhtml:%			if ($circuit->circuit_memberships && scalar $circuit->circuit_memberships > 1) { 
./chapter/circuit_join.mhtml:								<% $mem->name %>
./chapter/circuit_join.mhtml:								<% ($mem->dues) ? "Dues: \$".$mem->dues : "" %>
./chapter/circuit_join.mhtml:								<input type="radio" name="membership_id" value="<% $mem->id %>">
./chapter/circuit_join.mhtml:%			if ($circuit->setting("region_based")) { 
./chapter/circuit_join.mhtml:%					foreach my $region ($circuit->regions) { 
./chapter/circuit_join.mhtml:								<% $region->name %>
./chapter/circuit_join.mhtml:								<% ($region->director) ? "Director: ".$region->director->first." ".$region->director->last : "" %>
./chapter/circuit_join.mhtml:								<input type="radio" name="region_id" value="<% $region->id %>">
./chapter/judge_unlink.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_unlink.mhtml:	my $chapter = $chapter_judge->chapter;
./chapter/judge_unlink.mhtml:	unless ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, admin => $person)) { 
./chapter/judge_unlink.mhtml:		$m->print("<p>You do not have access to that chapter.  Stop messing around</p>");
./chapter/judge_unlink.mhtml:		$m->abort;
./chapter/judge_unlink.mhtml:	my $msg = "Judge ".$chapter_judge->first." ".$chapter_judge->last." was unlinked from the account ".$chapter_judge->person->email;
./chapter/judge_unlink.mhtml:	$chapter_judge->person("");
./chapter/judge_unlink.mhtml:	$chapter_judge->update;
./chapter/judge_unlink.mhtml:	$m->redirect("judge_edit.mhtml?chapter_judge_id=".$chapter_judge->id."&chapter_id=".$chapter->id."&msg=$msg");
./chapter/dedupe_judges.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe_judges.mhtml:	foreach my $judge ($chapter->chapter_judges) { 
./chapter/dedupe_judges.mhtml:		next unless $judge->last;
./chapter/dedupe_judges.mhtml:		push @{$judges_by_name{$judge->first."-".$judge->last}}, $judge;
./chapter/dedupe_judges.mhtml:		<h2><% $chapter->name %>: De-duplicate Judges</h2>
./chapter/dedupe_judges.mhtml:		<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/dedupe_judges.mhtml:%				$namekey =~ s/-/\ /g;
./chapter/dedupe_judges.mhtml:								<% $judge->id." ".$judge->first." ".$judge->last %>: <% scalar $judge->judges %> tournaments
./chapter/judges.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/judges.mhtml:	$m->abort unless $chapter;
./chapter/judges.mhtml:		@chapter_judges = $chapter->chapter_judges( retired => 1 );
./chapter/judges.mhtml:		@chapter_judges = $chapter->chapter_judges( retired => 0 );
./chapter/judges.mhtml:		$m->redirect("judge_edit.mhtml?newbie=yes&chapter_id=".$chapter_id);
./chapter/judges.mhtml:	@chapter_judges = sort {$a->last cmp $b->last} @chapter_judges;
./chapter/judges.mhtml:	my @judge_requests = Tab::ChapterJudge->search_where({ 
./chapter/judges.mhtml:		chapter => $chapter->id,
./chapter/judges.mhtml:		<h2><% $chapter->name %>: Judges</h2>
./chapter/judges.mhtml:							<% $request->first." ".$request->last %>
./chapter/judges.mhtml:							<% $request->person_request->first %>
./chapter/judges.mhtml:							<% $request->person_request->last %>
./chapter/judges.mhtml:							<a href="mailto:<% $request->person_request->email %>">
./chapter/judges.mhtml:							(<% $request->person_request->email %>)
./chapter/judges.mhtml:							<a class="dkblue block" href="permit.mhtml?chapter_judge_id=<% $request->id %>">
./chapter/judges.mhtml:							<a class="dkred block" href="deny.mhtml?chapter_judge_id=<% $request->id %>">
./chapter/judges.mhtml:%				next if $chapter_judge->retired &! $show_retired;
./chapter/judges.mhtml:						<a id="<% $chapter_judge->id %>"></a>
./chapter/judges.mhtml:						<a class="white" href="/user/chapter/judge_edit.mhtml?chapter_judge_id=<% $chapter_judge->id %>">
./chapter/judges.mhtml:							<% $chapter_judge->last %>
./chapter/judges.mhtml:						<a class="white" href="/user/chapter/judge_edit.mhtml?chapter_judge_id=<% $chapter_judge->id %>">
./chapter/judges.mhtml:							<% $chapter_judge->first %>
./chapter/judges.mhtml:						<% $chapter_judge->phone %>
./chapter/judges.mhtml:%						if ($chapter_judge->person && $chapter_judge->person->email) { 
./chapter/judges.mhtml:							<a class="white" href="mailto:<% ($chapter_judge->person && $chapter_judge->person->email) ? $chapter_judge->person->email : "" %>">
./chapter/judges.mhtml:								<% ($chapter_judge->person && $chapter_judge->person->email) ? $chapter_judge->person->email : "" %>
./chapter/judges.mhtml:							<a class="dkred smallish button" href="judge_retire.mhtml?chapter_judge_id=<% $chapter_judge->id %>&show_retired=<% $show_retired %>&backto=#<% $last_judge %>">
./chapter/judges.mhtml:							<a class="dkblue nowrap smallish button" href="judge_retire.mhtml?chapter_judge_id=<% $chapter_judge->id %>&show_retired=<% $show_retired %>&backto=#<% $last_judge %>">
./chapter/judges.mhtml:								DE-ACTIVATE
./chapter/judges.mhtml:%				$last_judge = $chapter_judge->id;
./chapter/judges.mhtml:			<a class="yellow block" href="judge_edit.mhtml?chapter_id=<% $chapter->id %>">
./chapter/judges.mhtml:			<a class="yellow block" href="diets.mhtml?chapter_id=<% $chapter->id %>#judges">
./chapter/judges.mhtml:			<a class="yellow block" href="dedupe_judges.mhtml?chapter_id=<% $chapter->id %>">
./chapter/judges.mhtml:			<a class="<% $show_retired ? "dkred" : "blue" %> block" href="judges.mhtml?show_retired=<% ($show_retired) ? "" : "a" %>&chapter_id=<% $chapter->id %>">
./chapter/admin_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./chapter/admin_save.mhtml:		$chapter_count++ if $ARGS{$permission->person->id."_access_level"} eq "chapter"; 
./chapter/admin_save.mhtml:		$m->redirect("settings.mhtml?chapter_id=$chapter_id&msg=$msg&err=$err");
./chapter/admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./chapter/admin_save.mhtml:		$permission->tag("prefs") if $ARGS{$permission->person->id."_access_level"} eq "prefs";
./chapter/admin_save.mhtml:		$permission->tag("chapter") if $ARGS{$permission->person->id."_access_level"} eq "chapter";
./chapter/admin_save.mhtml:		$permission->update;
./chapter/admin_save.mhtml:		$email =~tr/[A-Z]/[a-z]/;
./chapter/admin_save.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./chapter/admin_save.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "chapter" });
./chapter/admin_save.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "prefs" });
./chapter/admin_save.mhtml:						$ap->delete;
./chapter/admin_save.mhtml:						$ac->delete;
./chapter/admin_save.mhtml:						$already->tag("prefs");
./chapter/admin_save.mhtml:						$already->update;
./chapter/admin_save.mhtml:						$ac->delete;
./chapter/admin_save.mhtml:						$ap->delete;
./chapter/admin_save.mhtml:						$already->tag("chapter");
./chapter/admin_save.mhtml:						$already->update;
./chapter/admin_save.mhtml:				$already = Tab::Permission->create({
./chapter/admin_save.mhtml:					person => $admin->id,
./chapter/admin_save.mhtml:			$msg .= $admin->first." ".$admin->last." ".$admin->email." has been given full access to ". $chapter->name if $access_level eq "chapter"; 	
./chapter/admin_save.mhtml:			$msg .= $admin->first." ".$admin->last." ".$admin->email." has been given pref sheet access to ". $chapter->name if $access_level eq "prefs";	
./chapter/admin_save.mhtml:	$m->redirect("settings.mhtml?chapter_id=$chapter_id&msg=$msg&err=$err");
./chapter/student_retire.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_retire.mhtml:	my $chapter = $student->chapter;
./chapter/student_retire.mhtml:	my $retired = $student->retired;
./chapter/student_retire.mhtml:	my $msg = $student->first." ".$student->last." ";
./chapter/student_retire.mhtml:		$student->retired("");
./chapter/student_retire.mhtml:		$student->retired(1);
./chapter/student_retire.mhtml:	$student->update;
./chapter/student_retire.mhtml:	$m->redirect("students.mhtml?chapter_id=".$chapter->id."&msg=$msg") if $from eq "nograds";
./chapter/student_retire.mhtml:	$m->redirect("students.mhtml?chapter_id=".$chapter->id."&show_grads=sure&msg=$msg#$many");
./chapter/diet_save.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./chapter/diet_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/diet_save.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students( retired => 0 );
./chapter/diet_save.mhtml:	my @judges = sort {$a->last cmp $b->last} $chapter->chapter_judges( retired => 0 );
./chapter/diet_save.mhtml:		$student->diet($ARGS{"student_diet_".$student->id});
./chapter/diet_save.mhtml:		$student->update;
./chapter/diet_save.mhtml:		$judge->diet( $ARGS{"judge_diet_".$judge->id});
./chapter/diet_save.mhtml:		$judge->update;
./chapter/diet_save.mhtml:	$m->redirect("diets.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/judge_save.mhtml:		$m->redirect("/user/home.mhtml?msg=$msg");
./chapter/judge_save.mhtml:	my $now = DateTime->now;
./chapter/judge_save.mhtml:		$m->redirect("judge_edit.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/judge_save.mhtml:		$chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_save.mhtml:		my $chapter_judge_school = $chapter_judge->chapter;
./chapter/judge_save.mhtml:		my $chapter_judge_school_id = $chapter_judge_school->id;
./chapter/judge_save.mhtml:		my @acc = Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $chapter_judge_school_id );
./chapter/judge_save.mhtml:		push (@acc, 1) if $person->site_admin;
./chapter/judge_save.mhtml:			$chapter_judge->first($first);
./chapter/judge_save.mhtml:			$chapter_judge->last($last);
./chapter/judge_save.mhtml:			$chapter_judge->phone($phone);
./chapter/judge_save.mhtml:			$chapter_judge->diet($diet);
./chapter/judge_save.mhtml:			$chapter_judge->gender($gender);
./chapter/judge_save.mhtml:			$chapter_judge->notes_timestamp($now) if $notes ne $chapter_judge->notes;
./chapter/judge_save.mhtml:			$chapter_judge->notes($notes);
./chapter/judge_save.mhtml:			$chapter_judge->chapter($chapter_id);
./chapter/judge_save.mhtml:			$chapter_judge->update;
./chapter/judge_save.mhtml:		$chapter_judge = Tab::ChapterJudge->create({ 	
./chapter/judge_save.mhtml:	$m->redirect("judge_edit.mhtml?chapter_judge_id=".$chapter_judge->id."&chapter_id=".$chapter_id."&msg=$msg");
./chapter/tabbar.mas:	my @student_requests = Tab::Student->search_where( {chapter => $chapter->id, person_request => {'>', 0}});
./chapter/tabbar.mas:	my @judge_requests = Tab::ChapterJudge->search_where( {chapter => $chapter->id, person_request => {'>', 0}});
./chapter/tabbar.mas:			<a href="/user/chapter/tournaments.mhtml?chapter_id=<% $chapter->id %>">Tournaments</a>
./chapter/tabbar.mas:				<a href="/user/chapter/students.mhtml?chapter_id=<% $chapter->id %>">Students</a>
./chapter/tabbar.mas:				<a href="/user/chapter/students.mhtml?chapter_id=<% $chapter->id %>">Students</a>
./chapter/tabbar.mas:				<a href="/user/chapter/judges.mhtml?chapter_id=<% $chapter->id %>">Judges</a>
./chapter/tabbar.mas:				<a href="/user/chapter/judges.mhtml?chapter_id=<% $chapter->id %>">Judges</a>
./chapter/tabbar.mas:			<a href="/user/chapter/circuits.mhtml?chapter_id=<% $chapter->id %>">Circuits</a>
./chapter/tabbar.mas:			<a href="/user/chapter/settings.mhtml?chapter_id=<% $chapter->id %>">Settings</a>
./chapter/tabbar.mas:			<a href="/user/results/index.mhtml?chapter_id=<% $chapter->id %>">Results</a>
./chapter/index.mhtml:		$chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/index.mhtml:		my @chapters = $m->comp('/funclib/person_chapters.mas', person => $person);
./chapter/index.mhtml:		$m->redirect("/user/chapter/tournaments.mhtml?chapter_id=".$chapter->id."&err=$err&msg=$msg");
./chapter/index.mhtml:		$m->redirect("/user/setup.mhtml?err=$err&msg=$msg");
./chapter/auth.mas:	return if $person->site_admin;
./chapter/auth.mas:	my @access = Tab::Permission->search( tag => "chapter", chapter => $chapter->id, person => $person->id );
./chapter/auth.mas:	my $err = "You are not authorized to make changes to ".$chapter->name;
./chapter/auth.mas:	$m->redirect("/user/home.mhtml?err=$err");
./chapter/save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./chapter/save.mhtml:        $m->redirect("create.mhtml?name=$name&city=$city&state=$state&naudl=$naudl&level=$level&country=$country&ipeds=$ipeds&nces=$nces&ceeb=$ceeb&err=$err");
./chapter/save.mhtml:		$chapter->name($name);
./chapter/save.mhtml:		$chapter->address($address);
./chapter/save.mhtml:		$chapter->city($city);
./chapter/save.mhtml:		$chapter->state($state);
./chapter/save.mhtml:		$chapter->postal($postal);
./chapter/save.mhtml:		$chapter->state($state);
./chapter/save.mhtml:		$chapter->country($country);
./chapter/save.mhtml:		$chapter->level($level);
./chapter/save.mhtml:		$chapter->ipeds($ipeds);
./chapter/save.mhtml:		$chapter->nces($nces);
./chapter/save.mhtml:		$chapter->ceeb($ceeb);
./chapter/save.mhtml:		$chapter->coaches($coaches);
./chapter/save.mhtml:		$chapter->self_prefs($self_prefs);
./chapter/save.mhtml:		$chapter->update;	
./chapter/save.mhtml:				my $region = Tab::Region->retrieve($naudl_league);
./chapter/save.mhtml:				my $circuit = $region->circuit if $region;
./chapter/save.mhtml:					$err = "That league is not in a NAUDL circuit.  Please try again" unless $circuit->setting("naudl");
./chapter/save.mhtml:						my $membership = Tab::ChapterCircuit->search( circuit => $circuit->id, chapter => $chapter_id)->first;
./chapter/save.mhtml:						$membership = Tab::ChapterCircuit->create({  
./chapter/save.mhtml:							circuit => $circuit->id,
./chapter/save.mhtml:						$membership->region($region->id);
./chapter/save.mhtml:						$membership->update;
./chapter/save.mhtml:						$chapter->naudl(1);
./chapter/save.mhtml:						$chapter->update;
./chapter/save.mhtml:				$chapter->naudl("");
./chapter/save.mhtml:				$chapter->update;
./chapter/save.mhtml:				foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./chapter/save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./chapter/save.mhtml:					$membership->delete if $membership;
./chapter/save.mhtml:			$chapter->naudl("");
./chapter/save.mhtml:			$chapter->update;
./chapter/save.mhtml:			foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./chapter/save.mhtml:				my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./chapter/save.mhtml:				$membership->delete if $membership;
./chapter/save.mhtml:			my @chapters = Tab::Chapter->search_where( name => { "like", $name."%"}, country => $country, state => $state );
./chapter/save.mhtml:			push @chapters, Tab::Chapter->search_where( name => { "like", $search_name."%"}, country => $country, state => $state );
./chapter/save.mhtml:			push @chapters, Tab::Chapter->search( ceeb => $ceeb) if $ceeb;
./chapter/save.mhtml:			push @chapters, Tab::Chapter->search( nces => $nces) if $nces;
./chapter/save.mhtml:			push @chapters, Tab::Chapter->search( ipeds => $ipeds) if $ipeds;
./chapter/save.mhtml:        		$m->redirect("create.mhtml?name=$name&state=$state&naudl=$naudl&level=$level&country=$country&ipeds=$ipeds&nces=$nces&ceeb=$ceeb&search=1");
./chapter/save.mhtml:		$chapter = Tab::Chapter->create({ 
./chapter/save.mhtml:		my $chapter_access = Tab::Permission->create({
./chapter/save.mhtml:			chapter => $chapter->id,
./chapter/save.mhtml:			person => $person->id,
./chapter/save.mhtml:	$m->redirect("/user/chapter/chapter_welcome.mhtml?chapter_id=".$chapter->id."&new=$new&err=$err&naudl_err=$naudl_err") if $new;
./chapter/save.mhtml:	$m->redirect("/user/chapter/settings.mhtml?chapter_id=".$chapter->id."&err=$err&naudl_err=$naudl_err");
./chapter/student_save.mhtml:	my $now = DateTime->now;
./chapter/student_save.mhtml:		$m->redirect("/user/chapter/student_edit.mhtml?student_id=$student_id&err=$err") if ($student_id);
./chapter/student_save.mhtml:		$m->redirect("/user/chapter/students.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/student_save.mhtml:		my $now_year = $now->year;
./chapter/student_save.mhtml:		$now_year++ if $now->month > 6;
./chapter/student_save.mhtml:			$m->redirect("/user/chapter/student_edit.mhtml?first=$first&last=$last&chapter_id=$chapter_id&err=$err");
./chapter/student_save.mhtml:		my $now_year = $now->year;
./chapter/student_save.mhtml:		$now_year++ if $now->month > 6;
./chapter/student_save.mhtml:		$student = Tab::Student->retrieve($student_id);
./chapter/student_save.mhtml:		my $student_school = $student->chapter;
./chapter/student_save.mhtml:		my $student_school_id = $student_school->id if $student_school;
./chapter/student_save.mhtml:		my @acc = Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $student_school_id );
./chapter/student_save.mhtml:		push (@acc, 1) if $person->site_admin;
./chapter/student_save.mhtml:			$student->first($first);
./chapter/student_save.mhtml:			$student->last($last);
./chapter/student_save.mhtml:			$student->phonetic($phonetic);
./chapter/student_save.mhtml:			$student->grad_year($grad_year);
./chapter/student_save.mhtml:			$student->novice($novice);
./chapter/student_save.mhtml:			$student->retired($retired);
./chapter/student_save.mhtml:			$student->gender($gender);
./chapter/student_save.mhtml:			$student->birthdate($birth_dt);
./chapter/student_save.mhtml:			$student->school_sid($school_sid);
./chapter/student_save.mhtml:			$student->race($race);
./chapter/student_save.mhtml:			$student->diet($diet);
./chapter/student_save.mhtml:			$student->chapter($chapter_id);
./chapter/student_save.mhtml:			$student->update;
./chapter/student_save.mhtml:		$student = Tab::Student->create({ 	
./chapter/student_save.mhtml:	$m->redirect("/user/chapter/students.mhtml?chapter_id=$chapter_id&err=$err&msg=$msg#$from") if $from;
./chapter/student_save.mhtml:	$m->redirect("/user/chapter/student_edit.mhtml?chapter_id=$chapter_id&err=$err&msg=$msg");
./chapter/dues_receipt.mhtml:	my $payment = Tab::Dues->retrieve($payment_id);
./chapter/dues_receipt.mhtml:	my $chapter = $payment->chapter;
./chapter/dues_receipt.mhtml:	my $circuit = $payment->circuit;
./chapter/dues_receipt.mhtml:	my $filename = "dues-receipt-".$payment_id."-".$session->id;
./chapter/dues_receipt.mhtml:	my $filepath = "files/".$circuit->id."/invoices";
./chapter/dues_receipt.mhtml:	my $garbage = `mkdir -p $Tab::file_root/$filepath`;
./chapter/dues_receipt.mhtml:	$garbage = `rm -f $Tab::file_root/$filepath/$filename.*`;
./chapter/dues_receipt.mhtml:\\addtolength{\\hoffset}{-.2in}
./chapter/dues_receipt.mhtml:    my $now = DateTime->now;
./chapter/dues_receipt.mhtml:    $now->set_time_zone($tourn->tz);
./chapter/dues_receipt.mhtml:	print TEXOUT "{\\LARGE \\bf ". &Tab::texify($circuit->name)." }\\\\ \n";
./chapter/dues_receipt.mhtml:#	print TEXOUT "\\includegraphics{".$Tab::file_root."/files/".$circuit->id."/logo/".$circuit->logo_file."}\n" if $circuit->logo_file;
./chapter/dues_receipt.mhtml:	print TEXOUT "{\\bf Member School:} & ". &Tab::texify($chapter->name) ."\\\\ \n";
./chapter/dues_receipt.mhtml:	print TEXOUT &Tab::nicedate($payment->paid_on)." & ";
./chapter/dues_receipt.mhtml:	print TEXOUT "\\\$".sprintf("%.2f", $payment->amount);
./chapter/dues_receipt.mhtml:	my $message = $circuit->invoice_message;
./chapter/dues_receipt.mhtml:	$garbage = `cd $Tab::file_root/$filepath; rm -f $filename.tex $filename.log $filename.dvi $filename.aux`;
./chapter/dues_receipt.mhtml:	$m->redirect("$Tab::url_prefix/$filepath/$filename.pdf");
./chapter/judge_search.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/judge_search.mhtml:	my $judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_search.mhtml:	unless ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, admin => $person)) { 
./chapter/judge_search.mhtml:		$m->print("<p>You do not have access to that chapter.  Stop messing around</p>");
./chapter/judge_search.mhtml:		$m->abort;
./chapter/judge_search.mhtml:	my ($judge_acc) = Tab::Person->search( email => $email );
./chapter/judge_search.mhtml:		$m->redirect("judge_edit.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/judge_search.mhtml:	my ($exists) = Tab::ChapterJudge->search( chapter => $chapter->id, person => $judge_acc->id);
./chapter/judge_search.mhtml:		my $err = $email ." is already on your roster as ".$exists->first." ".$exists->last."\n";
./chapter/judge_search.mhtml:		$m->redirect("judge_edit.mhtml?chapter_id=$chapter_id&chapter_judge_id=$chapter_judge_id&err=$err");
./chapter/judge_search.mhtml:		$judge->person($judge_acc->id);
./chapter/judge_search.mhtml:		$judge->first($judge_acc->first);
./chapter/judge_search.mhtml:		$judge->last($judge_acc->last);
./chapter/judge_search.mhtml:		$judge->gender($judge_acc->gender) if $judge_acc->gender;
./chapter/judge_search.mhtml:		$judge->update;
./chapter/judge_search.mhtml:		$msg = "Judge ".$judge->first." ".$judge->last."'s account linked. The judge has been notified by email.";
./chapter/judge_search.mhtml:		Tab::Judge->set_sql( update_judges => "update judge set person = ? where chapter_judge = ?");
./chapter/judge_search.mhtml:		Tab::Judge->sql_update_judges->execute($judge_acc->id, $judge->id);
./chapter/judge_search.mhtml:		my $now = DateTime->now;
./chapter/judge_search.mhtml:		$judge = Tab::ChapterJudge->create({
./chapter/judge_search.mhtml:			person  => $judge_acc->id,
./chapter/judge_search.mhtml:			first   => $judge_acc->first,
./chapter/judge_search.mhtml:			last    => $judge_acc->last,
./chapter/judge_search.mhtml:			gender  => $judge_acc->gender,
./chapter/judge_search.mhtml:			chapter => $chapter->id,
./chapter/judge_search.mhtml:		$msg = "Judge ".$judge->first." ".$judge->last." has been added to your roster. The judge has been notified by email.";
./chapter/judge_search.mhtml:	my $body = $person->first." ".$person->last." (".$person->email.") has added you on the Tabroom system to the team roster for ".$chapter->name."\n";
./chapter/judge_search.mhtml:	$body .= "You will now be able to get team emails and notices, and will be eligible to sign up for tournaments through Tabroom at ".$Tab::url_prefix." if your coaches use the self-signup system. \n\n";
./chapter/judge_search.mhtml:	my $subject = "[TabRoom] Added to the ".$chapter->name." team roster";
./chapter/judge_search.mhtml:	$m->comp("/funclib/send_email.mas", from => $person, to => $judge_acc, subject => $subject, body => $body);
./chapter/judge_search.mhtml:	$m->redirect("judge_edit.mhtml?chapter_judge_id=".$judge->id."&chapter_id=$chapter_id&msg=$msg");
./chapter/dedupe_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe_save.mhtml:	foreach my $student ($chapter->students) { 
./chapter/dedupe_save.mhtml:		push @{$students_by_name{$student->first.'-'.$student->last}}, $student;
./chapter/dedupe_save.mhtml:			$m->comp("/funclib/student_merge.mas", person => $person, destination => $dest, mergee => $student);
./chapter/dedupe_save.mhtml:		$m->print("Done");
./chapter/dedupe_save.mhtml:		my $msg = "$count students de-duplicated.";
./chapter/dedupe_save.mhtml:		$m->redirect("students.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/circuit_leave.mhtml:	my $lj = Tab::ChapterCircuit->retrieve($lj_id); 
./chapter/circuit_leave.mhtml:		$m->redirect("/user/chapter/circuits.mhtml?circuit_id=$chapter_id&msg=$msg");
./chapter/circuit_leave.mhtml:	my $chapter = $lj->chapter;
./chapter/circuit_leave.mhtml:	my $circuit = $lj->circuit;
./chapter/circuit_leave.mhtml:    $m->comp("/user/chapter/auth.mas", chapter => $chapter, person => $person, session => $session);
./chapter/circuit_leave.mhtml:	$lj->delete();
./chapter/circuit_leave.mhtml:	my $msg = "You have left the circuit ".$circuit->name;
./chapter/circuit_leave.mhtml:	$m->redirect("/user/chapter/circuits.mhtml?chapter_id=".$chapter->id."&msg=$msg");
./chapter/import_csv_judges.mhtml:	my $chapter =  Tab::Chapter->retrieve($chapter_id);
./chapter/import_csv_judges.mhtml:	my $tz = $person->tz;
./chapter/import_csv_judges.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/import_csv_judges.mhtml:	my $req = Apache2::Request->new($r);
./chapter/import_csv_judges.mhtml:	my @csv_handles = $r->upload; 
./chapter/import_csv_judges.mhtml:	my $csv_file = $req->upload($csv_handles[0]);
./chapter/import_csv_judges.mhtml:	unless ($csv_file->type eq "text/csv") { 
./chapter/import_csv_judges.mhtml:		my $err = "No students imported.  You must upload a CSV file, not an Excel or other file.  <br /> <br /> Save the file in Excel as Comma-Separated Values and try again";
./chapter/import_csv_judges.mhtml:		$m->redirect("students.mhtml?chapter_id=$chapter_id&err=$err");
./chapter/import_csv_judges.mhtml:	my $io = $csv_file->io;
./chapter/import_csv_judges.mhtml:		$judge = Tab::ChapterJudge->create({
./chapter/import_csv_judges.mhtml:	my $msg = scalar @judges ." judges imported into ". $chapter->name;
./chapter/import_csv_judges.mhtml:	$m->redirect("judges.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/permit.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/permit.mhtml:		$cj->person($cj->person_request);
./chapter/permit.mhtml:		$cj->person_request("");
./chapter/permit.mhtml:		$cj->update;
./chapter/permit.mhtml:		my @judges = $cj->judges;
./chapter/permit.mhtml:			$judge->person($cj->person->id);
./chapter/permit.mhtml:			$judge->setting("phone", $cj->person->phone);
./chapter/permit.mhtml:			$judge->setting("email", $cj->person->email);
./chapter/permit.mhtml:			$judge->update;
./chapter/permit.mhtml:		my $msg = $cj->person->email." now has access to the judge ".$cj->first." ".$cj->last;
./chapter/permit.mhtml:		$m->redirect("judges.mhtml?chapter_id=".$cj->chapter->id."&msg=$msg");
./chapter/permit.mhtml:		my $student = Tab::Student->retrieve($student_id);
./chapter/permit.mhtml:		$student->person($student->person_request);
./chapter/permit.mhtml:		$student->person_request("");
./chapter/permit.mhtml:		$student->update;
./chapter/permit.mhtml:		my $msg = $student->person->email." now has access to the student ".$student->first." ".$student->last;
./chapter/permit.mhtml:		$m->redirect("students.mhtml?chapter_id=".$student->chapter->id."&msg=$msg");
./chapter/diets.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./chapter/diets.mhtml:	my $now = DateTime->now();
./chapter/diets.mhtml:	my $year = $now->year;
./chapter/diets.mhtml:	$year-- if $now->month < 7;
./chapter/diets.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/diets.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students;
./chapter/diets.mhtml:	my @judges = sort {$a->last cmp $b->last} $chapter->chapter_judges;
./chapter/diets.mhtml:	@students = sort {$b->diet cmp $a->diet} @students;
./chapter/diets.mhtml:	@judges = sort {$b->diet cmp $a->diet} @judges;
./chapter/diets.mhtml:		<h2><% $chapter->name %>: Dietary Restrictions</h2>
./chapter/diets.mhtml:%				next if $student->retired;
./chapter/diets.mhtml:%				next if $student->grad_year <= $year;
./chapter/diets.mhtml:						<a id="<% $student->id %>"></a>
./chapter/diets.mhtml:						<a class="white leftalign button" href="student_edit.mhtml?student_id=<% $student->id %>&from=<% $student->id %>">
./chapter/diets.mhtml:							<% $student->last %>
./chapter/diets.mhtml:						<a class="white leftalign button" href="student_edit.mhtml?student_id=<% $student->id %>&from=<% $student->id %>">
./chapter/diets.mhtml:							<% $student->first %>
./chapter/diets.mhtml:						<input type="text" name="student_diet_<% $student->id %>" value="<% $student->diet %>" size="32">
./chapter/diets.mhtml:%				next if $judge->retired;
./chapter/diets.mhtml:						<a id="<% $judge->id %>"></a>
./chapter/diets.mhtml:						<a class="white leftalign button" href="judge_edit.mhtml?judge_id=<% $judge->id %>&from=<% $judge->id %>">
./chapter/diets.mhtml:							<% $judge->last %>
./chapter/diets.mhtml:						<a class="white leftalign button" href="judge_edit.mhtml?judge_id=<% $judge->id %>&from=<% $judge->id %>">
./chapter/diets.mhtml:							<% $judge->first %>
./chapter/diets.mhtml:						<input type="text" name="judge_diet_<% $judge->id %>" value="<% $judge->diet %>" size="32">
./chapter/diets.mhtml:            <a class="blue block" href="student_edit.mhtml?chapter_id=<% $chapter->id %>">
./chapter/diets.mhtml:            <a class="dkblue block" href="diets.mhtml?chapter_id=<% $chapter->id %>">
./chapter/diets.mhtml:			<a class="blue block" href="students.mhtml?show_grads=<% ($show_grads) ? "" : "a" %>&chapter_id=<% $chapter->id %>">
./chapter/dedupe_judges_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe_judges_save.mhtml:	$m->print($person->email." is my email");
./chapter/dedupe_judges_save.mhtml:	foreach my $judge ($chapter->chapter_judges) { 
./chapter/dedupe_judges_save.mhtml:		next unless $judge->last;
./chapter/dedupe_judges_save.mhtml:		push @{$judges_by_name{$judge->first."-".$judge->last}}, $judge;
./chapter/dedupe_judges_save.mhtml:	Tab::Judge->set_sql( steal => "
./chapter/dedupe_judges_save.mhtml:	Tab::Conflict->set_sql( steal => "
./chapter/dedupe_judges_save.mhtml:		my $person_id = $dest->person->id if $dest->person;
./chapter/dedupe_judges_save.mhtml:		my $retired = $dest->retired;
./chapter/dedupe_judges_save.mhtml:			Tab::log($person->email." transferring ".$judge->id." records to ".$dest->id);
./chapter/dedupe_judges_save.mhtml:			$retired = 0 unless $judge->retired;
./chapter/dedupe_judges_save.mhtml:			$person_id = $judge->person->id if $judge->person && not defined $person_id;
./chapter/dedupe_judges_save.mhtml:			Tab::Judge->sql_steal->execute($dest->id, $judge->id);
./chapter/dedupe_judges_save.mhtml:			Tab::Conflict->sql_steal->execute($dest->id, $judge->id);
./chapter/dedupe_judges_save.mhtml:			$judge->delete;
./chapter/dedupe_judges_save.mhtml:		$dest->person($person_id);
./chapter/dedupe_judges_save.mhtml:		$dest->update;
./chapter/dedupe_judges_save.mhtml:	my $msg = "$count judges de-duplicated.";
./chapter/dedupe_judges_save.mhtml:	$m->redirect("dedupe_judges.mhtml?chapter_id=$chapter_id&msg=$msg");
./chapter/student_edit.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./chapter/student_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./chapter/student_edit.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./chapter/student_edit.mhtml:	$chapter = $student->chapter unless $chapter;
./chapter/student_edit.mhtml:		$m->redirect("/user/home.mhtml?err=$err");
./chapter/student_edit.mhtml:	my @circuits = $chapter->circuits;
./chapter/student_edit.mhtml:	@circuits = $student->chapter->circuits if $student && not defined $chapter;
./chapter/student_edit.mhtml:		$ndt++ if $circuit->id == 43;
./chapter/student_edit.mhtml:	foreach my $circuit ($chapter->circuits) { 
./chapter/student_edit.mhtml:		$demo++ if $circuit->setting("demographics");
./chapter/student_edit.mhtml:	my $tz = $person->tz if $person;
./chapter/student_edit.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/student_edit.mhtml:	$now->subtract( days => 1 );
./chapter/student_edit.mhtml:	my $then = $now->clone;
./chapter/student_edit.mhtml:	$then->subtract( years => 15 );
./chapter/student_edit.mhtml:	my @students = Tab::Student->search_where({
./chapter/student_edit.mhtml:		chapter => $chapter->id, 
./chapter/student_edit.mhtml:		timestamp => {">=", DateTime::Format::MySQL->format_date($now)}},
./chapter/student_edit.mhtml:		<h2><% $chapter->name %> Student Roster</h2>
./chapter/student_edit.mhtml:			<h4><% $student->first." ".$student->last %></h4>
./chapter/student_edit.mhtml:%		unless ($student && $student->person && $student->person->id) { 	
./chapter/student_edit.mhtml:			<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/student_edit.mhtml:					<% ($student) ? "Link ".$student->first." ".$student->last." to "  : "Find student w/" %> an Tabroom login:
./chapter/student_edit.mhtml:%			if ($student && $student->person && $student->person->id) { 
./chapter/student_edit.mhtml:							<a class="white" href="mailto:<% $student->person->email %>">
./chapter/student_edit.mhtml:								<% $student->person->email %>
./chapter/student_edit.mhtml:							<a class="dkred button"  href="student_unlink.mhtml?student_id=<% $student->id %>">
./chapter/student_edit.mhtml:					<input type="hidden" name="student_id" value="<% ($student) ? $student->id : "" %>">
./chapter/student_edit.mhtml:					<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./chapter/student_edit.mhtml:					<input type="text" name="first" size="20" value="<% ($student) ? $student->first : $first %>">
./chapter/student_edit.mhtml:					<input type="text" name="last" size="20" value="<% ($student) ? $student->last : $last %>">
./chapter/student_edit.mhtml:					<input type="text" name="phonetic" size="20" value="<% ($student) ? $student->phonetic : ""%>">
./chapter/student_edit.mhtml:					<input type="number" name="grad_year" min="2000" max="2100" size="6" value="<% ($student) ?   $student->grad_year : ""%>">
./chapter/student_edit.mhtml:							<input type="checkbox" name="novice" id="n" value="1" <% ($student) ?  ($student->novice) ? 'checked' : '': "" %> >
./chapter/student_edit.mhtml:							<input type="radio" name="gender" id="m" value="M" <% ($student) ? ($student->gender eq "M") ? "checked" : "" : "" %>> M
./chapter/student_edit.mhtml:							<input type="radio" name="gender" id="f" value="F" <% ($student) ? ($student->gender eq "F" ) ? "checked" : "" : "" %>> F
./chapter/student_edit.mhtml:							<input type="radio" name="gender" id="o" value="O" <% ($student) ? ($student->gender eq "O" ) ? "checked" : "" : "" %>> Other
./chapter/student_edit.mhtml:						<input type="text" name="school_sid" size="30" value="<% $student ? $student->school_sid : "" %>">
./chapter/student_edit.mhtml:						value="<% $student && $student->birthdate ? Tab::pickerdate($student->birthdate) : Tab::pickerdate($then) %>">
./chapter/student_edit.mhtml:%					my $race = $student->race if $student;
./chapter/student_edit.mhtml:							<option value="white" <% $race eq "white" ? "selected" : "" %> >White, non-Hispanic/Latino</option>
./chapter/student_edit.mhtml:							<option value="black" <% $race eq "black" ? "selected" : "" %> >Black, non-Hispanic/Latino</option>
./chapter/student_edit.mhtml:					<input type="text" name="diet" size="32" value="<% $student ? $student->diet : "" %>">
./chapter/student_edit.mhtml:%			if ($chapter->nsda > 0 ) { 
./chapter/student_edit.mhtml:							<a class="white block" href="/user/nsda/student_roster.mhtml?chapter_id=<% $chapter->id %>">
./chapter/student_edit.mhtml:								<% $student && $student->ualt_id ? "#".$student->ualt_id : "Link for auto-pointing" %>
./chapter/student_edit.mhtml:						<a class="dkblue block" href="/user/chapter/ndt_bid_honors.mhtml?student_id=<% $student->id %>&chapter_id=<% $chapter->id %>">
./chapter/student_edit.mhtml:			<a class="yellow block" href="student_edit.mhtml?chapter_id=<% $chapter->id %>">
./chapter/student_edit.mhtml:			<a class="yellow block" href="students.mhtml?chapter_id=<% $chapter->id %>">
./chapter/student_edit.mhtml:				<a class="nowrap blue full" href="student_edit.mhtml?student_id=<% $student->id %>">
./chapter/student_edit.mhtml:						<% $student->first." ".$student->last %>
./chapter/student_edit.mhtml:						<% $student->grad_year %>
./chapter/students_csv.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/students_csv.mhtml:	foreach my $admin ($chapter->admins) { 
./chapter/students_csv.mhtml:		$authorized++ if $person->id == $admin->id;
./chapter/students_csv.mhtml:	unless ($person->site_admin || $authorized) { 
./chapter/students_csv.mhtml:		$m->print("You are not authorized to do that.");
./chapter/students_csv.mhtml:		$m->abort;
./chapter/students_csv.mhtml:    my $filename = $chapter->name."-StudentRoster";
./chapter/students_csv.mhtml:	$m->clear_buffer;
./chapter/students_csv.mhtml:	$r->content_type('application/csv');
./chapter/students_csv.mhtml:	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";
./chapter/students_csv.mhtml:	$m->print("First,Last,Grad Year,Novice,Retired,Gender,Phonetic,Date of Birth,School ID\n");
./chapter/students_csv.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students;
./chapter/students_csv.mhtml:	foreach my $student (sort {$b->grad_year <=> $a->grad_year} @students) { 
./chapter/students_csv.mhtml:		$m->print('"'.$student->first.'",');
./chapter/students_csv.mhtml:		$m->print('"'.$student->last.'",');
./chapter/students_csv.mhtml:		$m->print('"'.$student->grad_year.'",');
./chapter/students_csv.mhtml:		$m->print('"');
./chapter/students_csv.mhtml:		$m->print("Novice") if $student->novice;
./chapter/students_csv.mhtml:		$m->print('",');
./chapter/students_csv.mhtml:		$m->print('"');
./chapter/students_csv.mhtml:		$m->print("Retired") if $student->retired;
./chapter/students_csv.mhtml:		$m->print('",');
./chapter/students_csv.mhtml:		$m->print('"'.$student->retired.'",');
./chapter/students_csv.mhtml:		$m->print('"'.uc($student->gender).'",');
./chapter/students_csv.mhtml:		$m->print('"'.$student->phonetic.'",');
./chapter/students_csv.mhtml:		$m->print('"'.Tab::shortdate($student->birthdate).'",');
./chapter/students_csv.mhtml:		$m->print('"'.$student->school_sid.'"'."\n");
./chapter/students_csv.mhtml:	$m->flush_buffer;
./chapter/students_csv.mhtml:	$m->abort;
./chapter/tournaments.mhtml:	my $access = Tab::Permission->search( person => $person, chapter => $chapter_id)->first;
./chapter/tournaments.mhtml:	$m->abort() unless $access;
./chapter/tournaments.mhtml:	$m->abort unless $chapter_id;
./chapter/tournaments.mhtml:	$m->redirect("prefs.mhtml?chapter_id=$chapter_id") if $access->tag eq "prefs";
./chapter/tournaments.mhtml:	my $tz = $person->tz;
./chapter/tournaments.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/tournaments.mhtml:	my $now = DateTime->now;
./chapter/tournaments.mhtml:	my $search_start = $now->clone;
./chapter/tournaments.mhtml:	$search_start->subtract(days => 14);
./chapter/tournaments.mhtml:	my $search_start_string = DateTime::Format::MySQL->format_datetime($search_start);
./chapter/tournaments.mhtml:	my $now_string = DateTime::Format::MySQL->format_datetime($now);
./chapter/tournaments.mhtml:	Tab::Tourn->set_sql("by_entered_tourn", "
./chapter/tournaments.mhtml:	my @existing_tourns = Tab::Tourn->search_by_entered_tourn($chapter->id, $search_start_string);
./chapter/tournaments.mhtml:	Tab::Tourn->set_sql("by_open_tourn", "
./chapter/tournaments.mhtml:	my @open_tourns = Tab::Tourn->search_by_open_tourn($chapter->id, $now_string, $now_string);
./chapter/tournaments.mhtml:		<h2><% $chapter->name %>: Tournaments</h2>
./chapter/tournaments.mhtml:%						unless ($et->schoolid) { 
./chapter/tournaments.mhtml:%							my $sch = Tab::School->search(tourn => $et->id, chapter => $chapter_id)->first;
./chapter/tournaments.mhtml:%							$et->schoolid($sch->id);
./chapter/tournaments.mhtml:								<span class="hidden"><% $et->start->epoch %></span>
./chapter/tournaments.mhtml:								<% Tab::niceshortdate($et->start->set_time_zone($tz)) %>
./chapter/tournaments.mhtml:								<% ($et->start->day != $et->end->day) ? " - ".Tab::niceshortdate($et->end->set_time_zone($tz)) : "" %>
./chapter/tournaments.mhtml:								<a class="white smallish" href="/user/enter/entry.mhtml?chapter_id=<% $chapter->id %>&tourn_id=<% $et->id %>">
./chapter/tournaments.mhtml:								<% $et->name %> 
./chapter/tournaments.mhtml:% 								foreach ($m->comp("/funclib/tourn_circuits.mas", tourn => $et)) { 
./chapter/tournaments.mhtml:									<% $_->abbr %>
./chapter/tournaments.mhtml:								<span class="hidden"><% $et->reg_end->epoch %></span>
./chapter/tournaments.mhtml:								<% Tab::niceshortdate($et->reg_end->set_time_zone($tz)) %>
./chapter/tournaments.mhtml:%								if ($et->setting("onsite_registration")) { 
./chapter/tournaments.mhtml:%									my $onsite_starts = $et->setting("onsite_starts");
./chapter/tournaments.mhtml:%									$onsite_starts->set_time_zone($tz) if $onsite_starts;
./chapter/tournaments.mhtml:%									my $onsite_ends = $et->setting("onsite_ends");
./chapter/tournaments.mhtml:%									$onsite_ends->set_time_zone($tz) if $onsite_ends;
./chapter/tournaments.mhtml:										<a class="smallish dkblue full button" href="/user/enter/onsite.mhtml?chapter_id=<% $chapter->id %>&tourn_id=<% $et->id %>">
./chapter/tournaments.mhtml:%								if ($now < $et->end) { 
./chapter/tournaments.mhtml:									<a class="smallish dkblue button" href="/user/enter/entry.mhtml?chapter_id=<% $chapter->id %>&tourn_id=<% $et->id %>">
./chapter/tournaments.mhtml:									<a class="smallish dkred button" href="/user/results/report.mhtml?school_id=<% $et->schoolid %>">
./chapter/tournaments.mhtml:				<h4 style="padding-top: 25px;">
./chapter/tournaments.mhtml:%						$hidden++ if Tab::TournIgnore->search( person => $person->id, tourn => $ot->id) && not defined $all;
./chapter/tournaments.mhtml:%						next if Tab::TournIgnore->search( person => $person->id, tourn => $ot->id) && not defined $all;
./chapter/tournaments.mhtml:								<a class="fa fa-trash fa-lg full button hover" title="Conceal this tournament" href="no_interest.mhtml?tourn_id=<% $ot->id %>&chapter_id=<% $chapter_id %>">
./chapter/tournaments.mhtml:								<span class="hidden"><% $ot->start->epoch %></span>
./chapter/tournaments.mhtml:								<% Tab::niceshortdate($ot->start->set_time_zone($tz)) %>
./chapter/tournaments.mhtml:								<% ($ot->start->day != $ot->end->day) ? "-".Tab::niceshortdate($ot->end->set_time_zone($tz)) : "" %>
./chapter/tournaments.mhtml:								<a class="white" href="/user/enter/entry.mhtml?chapter_id=<% $chapter->id %>&tourn_id=<% $ot->id %>">
./chapter/tournaments.mhtml:									<% $ot->name %> 
./chapter/tournaments.mhtml:								<% $ot->location %>
./chapter/tournaments.mhtml:								<% $m->comp("/funclib/tourn_circuits.mas", tourn => $ot, print_abbr => 1) %>
./chapter/tournaments.mhtml:								<span class="hidden"><% $ot->reg_end->epoch %></span>
./chapter/tournaments.mhtml:								<% Tab::niceshortdate($ot->reg_end->set_time_zone($tz)) %>
./chapter/tournaments.mhtml:								<a class="smallish dkblue button" href="/user/enter/create.mhtml?chapter_id=<% $chapter->id %>&tourn_id=<% $ot->id %>">
./chapter/tournaments.mhtml:						<a href="tournaments.mhtml?chapter_id=<% $chapter->id %>&all=yeppers" class="dkblue button">
./chapter/tournaments.mhtml:%				if ($m->comp('/funclib/chapter_circuits.mas', chapter => $chapter)) { 
./chapter/tournaments.mhtml:%					foreach my $circuit ($m->comp('/funclib/chapter_circuits.mas', chapter => $chapter)) { 
./chapter/tournaments.mhtml:%						my $now = DateTime->now(time_zone => $tz);
./chapter/tournaments.mhtml:%						my @tourns = $m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, future => 1);
./chapter/tournaments.mhtml:								<% ($circuit->state) ? $circuit->state."/" : "" %><% $circuit->country  %>
./chapter/tournaments.mhtml:								<a class="white" href="circuit.mhtml?circuit_id=<% $circuit->id %>">
./chapter/tournaments.mhtml:									<% $circuit->name %>  (<% $circuit->state %> <% $circuit->country %>)
./chapter/tournaments.mhtml:								<% ($next_tourn) ? $next_tourn->name." opens ".Tab::niceshortdate($next_tourn->reg_start) : "" %>
./chapter/tournaments.mhtml:					<p>Double-check your <a href="circuits.mhtml?chapter_id=<%
./chapter/tournaments.mhtml:					$chapter->id%>">Circuit Memberships</a> by clicking the tab
./results/online_ballots_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./results/online_ballots_print.mhtml:	my $tourn = $school->tourn;
./results/online_ballots_print.mhtml:	Tab::Ballot->set_sql( school_ballots => "
./results/online_ballots_print.mhtml:	my @ballots = Tab::Ballot->search_school_ballots($school_id);
./results/online_ballots_print.mhtml:    my $now = DateTime->now;    
./results/online_ballots_print.mhtml:    $now->set_time_zone($tourn->tz);
./results/online_ballots_print.mhtml:    my $name = $tourn->name."-".$school->short_name;
./results/online_ballots_print.mhtml:    my $filename = "Ballots-$name-".$session->id;
./results/online_ballots_print.mhtml:    `rm -f $filepath.*`; 
./results/online_ballots_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, array => 1.6 );
./results/online_ballots_print.mhtml:		my $panel = $ballot->panel;
./results/online_ballots_print.mhtml:		my $judge = $ballot->judge;
./results/online_ballots_print.mhtml:		my @values = sort {$a->tag cmp $b->tag} $ballot->scores;
./results/online_ballots_print.mhtml:		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
./results/online_ballots_print.mhtml:		my $aff_string = $panel->round->event->setting("aff_string");
./results/online_ballots_print.mhtml:		my $neg_string = $panel->round->event->setting("neg_string");
./results/online_ballots_print.mhtml:		unless ($ballot->entry->id == $current_entry) { 
./results/online_ballots_print.mhtml:			$current_entry = $ballot->entry;
./results/online_ballots_print.mhtml:			print TEXOUT "{\\Large \\bf ". Tab::texify($tourn->name) ." \\hfill ".Tab::texify($current_entry->name)." Results} \\\\ \n";
./results/online_ballots_print.mhtml:		print TEXOUT Tab::texify($panel->round->realname)." (";
./results/online_ballots_print.mhtml:		print TEXOUT Tab::texify($aff_string).") & " if $ballot->side == 1;
./results/online_ballots_print.mhtml:		print TEXOUT Tab::texify($neg_string).") & " if $ballot->side != 1;
./results/online_ballots_print.mhtml:		print TEXOUT Tab::texify($judge->first." ".$judge->last) if $judge;
./results/online_ballots_print.mhtml:		$results .= "FFT " if $ballot->forfeit;
./results/online_ballots_print.mhtml:		$results .= "BYE " if $ballot->bye;
./results/online_ballots_print.mhtml:		$results .= "BYE " if $panel->bye;
./results/online_ballots_print.mhtml:		foreach my $value (sort {$a->student <=> $b->student} @values) { 
./results/online_ballots_print.mhtml:			$rfd = $value->content if $value->tag eq "rfd";
./results/online_ballots_print.mhtml:			$comments = $value->content if $value->tag eq "comments";
./results/online_ballots_print.mhtml:			next if $value->tag eq "rfd";
./results/online_ballots_print.mhtml:			next if $value->tag eq "comment";
./results/online_ballots_print.mhtml:			$results .= "W " if $value->tag eq "ballot" && $value->value == 1;
./results/online_ballots_print.mhtml:			$results .= "L " if $value->tag eq "ballot" && $value->value != 1;
./results/online_ballots_print.mhtml:			$results .= $value->value." " if $value->tag ne "ballot";
./results/online_ballots_print.mhtml:			next if $opponent->id == $ballot->entry->id;
./results/online_ballots_print.mhtml:			print TEXOUT Tab::texify($opponent->code);
./results/online_ballots_print.mhtml:			print TEXOUT Tab::texify($opponent->name)
./results/online_ballots_print.mhtml:		my $strip = HTML::Strip->new();
./results/online_ballots_print.mhtml:		$rfd = $strip->parse($rfd);
./results/online_ballots_print.mhtml:		$comments = $strip->parse($comments);
./results/online_ballots_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1, array => 1.6 );
./results/report.mhtml:	my $tourn = $school->tourn;
./results/report.mhtml:	my @results = $m->comp('/funclib/school_results.mas', school => $school);
./results/report.mhtml:	my @result_values = $m->comp('/funclib/school_result_values.mas', school => $school);
./results/report.mhtml:		push @{$values_by_result{$value->result->id}}, $value;
./results/report.mhtml:		<h2><% $school->chapter->name %>: Results</h2>
./results/report.mhtml:		<& /user/chapter/tabbar.mas, chapter => $school->chapter, whoami => "results" &>
./results/report.mhtml:		<h3><% $tourn->name %></h3>
./results/report.mhtml:%			my @values = @{$values_by_result{$result->id}} if $values_by_result{$result->id};
./results/report.mhtml:%			unless ($result->result_set->id == $current_result) { 
./results/report.mhtml:%				my $result_set = $result->result_set;
./results/report.mhtml:%				$current_result = $result_set->id;
./results/report.mhtml:%				$ballot_spacer = "quarter" if $result->entry->event->type eq "ld";
./results/report.mhtml:%				$ballot_spacer = "third" if $result->entry->event->type eq "pf";
./results/report.mhtml:%				$ballot_spacer = "third" if $result->entry->event->type eq "parli";
./results/report.mhtml:%				$ballot_spacer = "third" if $result->entry->event->type eq "policy";
./results/report.mhtml:%				$ballot_spacer = "third" if $result->entry->event->type eq "debate";
./results/report.mhtml:%				$ballot_spacer = "quarter" if $ballot_spacer eq "third" && $result_set->label eq "Speaker Awards";
./results/report.mhtml:				<h4> <% $result->entry->event->abbr %> <% $result_set->label %> </h4>
./results/report.mhtml:							<% $result_set->label eq "Speaker Awards" ? "Speaker" : "Entry" %>
./results/report.mhtml:%				next if $value->value eq "Prelim";
./results/report.mhtml:%				$seed = $value if $value->tag eq "Seed";
./results/report.mhtml:%				$seed = $value if $value->tag eq "Place";
./results/report.mhtml:%				$seed = $value if $value->tag eq "Order";
./results/report.mhtml:					<% $seed  ? substr($seed->value,0,4) : "" %>
./results/report.mhtml:				<td class="smaller" title="<% $result->entry->code %>">
./results/report.mhtml:					<% $result->student ? "<div>".$result->student->first." <br /> ".$result->student->last."</div>" : $result->entry->name %>
./results/report.mhtml:%						next if $value->tag eq "Ballots";
./results/report.mhtml:%						next if $value->tag eq "Place";
./results/report.mhtml:%						next if $value->tag eq "Order";
./results/report.mhtml:%						next if $value->tag eq "Seed";
./results/report.mhtml:%						next if $value->tag eq "Rnd";
./results/report.mhtml:%						next if $value->tag eq "Rand";
./results/report.mhtml:%						my $tag = $value->tag;
./results/report.mhtml:							<div class="bold tiny" title="<% $value->long_tag%>"><% $tag %></div>
./results/report.mhtml:							<div><% $value->value %></div>
./results/report.mhtml:%						next unless $value->tag eq "Ballots";
./results/report.mhtml:%						my $ballots = $value->value;
./results/tourn.mhtml:	my $tourn = $school->tourn;
./results/tourn.mhtml:	my @entries = $m->comp("/funclib/tourn_entries.mas", tourn => $tourn);
./results/tourn.mhtml:	my @judges = $m->comp("/funclib/tourn_judges.mas", tourn => $tourn);
./results/tourn.mhtml:	my @schools = $tourn->schools;
./results/tourn.mhtml:		<h2><% $school->chapter->name %>: Results</h2>
./results/tourn.mhtml:		<& /user/chapter/tabbar.mas, chapter => $school->chapter, whoami => "results" &>
./results/tourn.mhtml:			Tournament Statistics: <% $tourn->name %>
./results/tourn.mhtml:						<% $m->comp("/funclib/tourn_states.mas", tourn => $tourn) %> 
./results/export_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./results/export_prefs.mhtml:	my $event = $entry->event;
./results/export_prefs.mhtml:	my $category = $event->category;
./results/export_prefs.mhtml:	my $tourn = $category->tourn;
./results/export_prefs.mhtml:	my $style = $category->setting("prefs");
./results/export_prefs.mhtml:	my $now = DateTime->now;
./results/export_prefs.mhtml:	my $tz = $tourn->tz;
./results/export_prefs.mhtml:    my %rating_name = map {$_->id => $_->name} $category->rating_tiers;
./results/export_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./results/export_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./results/export_prefs.mhtml:		next unless $rating->judge;
./results/export_prefs.mhtml:		next unless $rating->rating_tier;
./results/export_prefs.mhtml:        $coach_rating_by_judge{$rating->judge->id} = $rating_name{$rating->rating_tier->id};
./results/export_prefs.mhtml:		foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "entry", entry => $entry)) { 
./results/export_prefs.mhtml:			next unless $rating->judge;
./results/export_prefs.mhtml:			$rating_by_judge{$rating->judge->id} = $rating->ordinal; 
./results/export_prefs.mhtml:			$percentile_by_judge{$rating->judge->id} = $rating->percentile;
./results/export_prefs.mhtml:		my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./results/export_prefs.mhtml:			next unless $rating->judge;
./results/export_prefs.mhtml:			next unless $rating->rating_tier;
./results/export_prefs.mhtml:			$rating_by_judge{$rating->judge->id} = $rating->rating_tier->name;
./results/export_prefs.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./results/export_prefs.mhtml:	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./results/export_prefs.mhtml:	my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./results/export_prefs.mhtml:	foreach (@sch_conflicts) { $conflicts_by_id{$_->judge->id} = $_; }
./results/export_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./results/export_prefs.mhtml:	@judges = sort {$a->last cmp $b->last} @judges;
./results/export_prefs.mhtml:	@judges = sort {$a->school->short_name cmp $b->school->short_name} @judges;
./results/export_prefs.mhtml:	@judges = sort { $rating_by_judge{$a->id} <=> $rating_by_judge{$b->id} } @judges;
./results/export_prefs.mhtml:	my $filename = "Prefs-".$entry->name."-".Tab::csvdt($now);
./results/export_prefs.mhtml:	my $garbage = `rm -f $filepath.*`;
./results/export_prefs.mhtml:	print CSVOUT "Pref sheet for ".$entry->name." \n";
./results/export_prefs.mhtml:		next if $judge->school->id == $entry->school->id;
./results/export_prefs.mhtml:		print CSVOUT "\"".$judge->first."\",\"".$judge->last."\",\"";
./results/export_prefs.mhtml:		print CSVOUT $judge->school->short_name."\"," if $judge->school;
./results/export_prefs.mhtml:		print CSVOUT "\"Hired\"," unless $judge->school;
./results/export_prefs.mhtml:		if ($conflicts_by_id{$judge->id}) { 
./results/export_prefs.mhtml:			print CSVOUT "\"".$coach_rating_by_judge{$judge->id}."\"," if $coach_ratings;
./results/export_prefs.mhtml:			print CSVOUT "\"".$rating_by_judge{$judge->id}."\",\"".$percentile_by_judge{$judge->id}."\"," if $style eq "ordinals";
./results/export_prefs.mhtml:			print CSVOUT "\"".$rating_by_judge{$judge->id}."\"," unless $style eq "ordinals";
./results/export_prefs.mhtml:	$m->redirect("$Tab::url_prefix/tmp/$filename.csv");
./results/roster.mhtml:	my $tourn = $school->tourn;
./results/roster.mhtml:	my $tz = $tourn->tz;
./results/roster.mhtml:		<h2><% $school->chapter->name %>: Results</h2>
./results/roster.mhtml:		<& /user/chapter/tabbar.mas, chapter => $school->chapter, whoami => "esults" &>
./results/roster.mhtml:		<h4>Entry roster at <% $tourn->name %></h4>
./results/roster.mhtml:%		foreach my $event ($m->comp("/funclib/school_events.mas", school => $school)) { 
./results/roster.mhtml:% 			my @entries = Tab::Entry->search( event => $event->id, school => $school->id );
./results/roster.mhtml:%			my @hybrids = $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school);
./results/roster.mhtml:						<% $event->abbr %>
./results/roster.mhtml:%						if ($entry->dropped) { 
./results/roster.mhtml:							<% ($entry->waitlist) ? "Waitlist" : "" %>
./results/roster.mhtml:							<% ($entry->dq) ? "DQ" : "" %>
./results/roster.mhtml:							<% $entry->code %>
./results/roster.mhtml:					<td <% ($entry->dropped) ? "class=\"strike\"" : "" %> >
./results/roster.mhtml:						<% $entry->name %>
./results/roster.mhtml:						<% $entry->created_at ? Tab::niceshortdt($entry->created_at->set_time_zone($tz)) : "" %>
./results/roster.mhtml:						<% $entry->dropped ? "Dropped" : "" %>
./results/roster.mhtml:%						my $dropped_at = $entry->setting("dropped_at");
./results/roster.mhtml:						<% $dropped_at ? "at: ".Tab::niceshortdt($dropped_at->set_time_zone($tz)) : "" %>
./results/roster.mhtml:						<% $entry->setting("title") ?  '<div class="smaller">Title: '.$entry->setting("title")."</div>" : "" %>
./results/roster.mhtml:%						foreach my $student ($entry->students) { 
./results/roster.mhtml:							<% $student->first." ".$student->last %> <br/>
./results/roster.mhtml:%						if ($entry->dropped) { 
./results/roster.mhtml:							<% ($entry->waitlist) ? "Waitlist" : "" %>
./results/roster.mhtml:							<% ($entry->dq) ? "DQ" : "" %>
./results/roster.mhtml:							<% $entry->code %>
./results/roster.mhtml:					<td <% ($entry->dropped) ? "class=\"strike\"" : "" %> >
./results/roster.mhtml:						<% $entry->name %>
./results/roster.mhtml:						<% Tab::niceshortdt($entry->created_at) %>
./results/roster.mhtml:						(<% $entry->school->name %> Hybrid) <br/>
./results/roster.mhtml:%						my $dropped_at = $entry->setting("dropped_at");
./results/roster.mhtml:						<% ($dropped_at) ? "Dropped at: ".Tab::niceshortdt($dropped_at->set_time_zone($tz)) : "" %>
./results/roster.mhtml:						<% $entry->setting("title") ?  '<div class="smaller">Title: '.$entry->setting("title")."</div>" : "" %>
./results/roster.mhtml:%						foreach my $student ($entry->students) { 
./results/roster.mhtml:							<% $student->first." ".$student->last %> <br/>
./results/roster.mhtml:%		foreach my $judge ($school->judges) { 
./results/roster.mhtml:%			my $category = $judge->category;
./results/roster.mhtml:					<% $category->abbr %>
./results/roster.mhtml:					<% $judge->code %>
./results/roster.mhtml:					<% $judge->first." ".$judge->last %>
./results/roster.mhtml:					<% $judge->created_at ? Tab::niceshortdt($judge->created_at->set_time_zone($tz)) : "" %>
./results/roster.mhtml:%					my @panels = $m->comp("/funclib/judge_panels.mas", judge => $judge);
./results/report_print.mhtml:	my $tourn = $school->tourn;
./results/report_print.mhtml:	my @results = $m->comp('/funclib/school_results.mas', school => $school);
./results/report_print.mhtml:	my @result_values = $m->comp('/funclib/school_result_values.mas', school => $school);
./results/report_print.mhtml:		push @{$values_by_result{$value->result->id}}, $value;
./results/report_print.mhtml:    my $now = DateTime->now;    
./results/report_print.mhtml:    $now->set_time_zone($tourn->tz);
./results/report_print.mhtml:    my $name = $tourn->name."-".$school->short_name;
./results/report_print.mhtml:    my $filename = "Results-$name-".$session->id;
./results/report_print.mhtml:    `rm -f $filepath.*`; 
./results/report_print.mhtml:    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1, array => 1.4 );
./results/report_print.mhtml:    print TEXOUT "{\\Large \\bf ". Tab::texify($tourn->name) ." \\hfill ".Tab::texify($school->short_name)." } \\\\ \n";
./results/report_print.mhtml:	foreach my $result (sort {$a->result_set <=> $b->result_set} @results) { 
./results/report_print.mhtml:		my @values = @{$values_by_result{$result->id}};
./results/report_print.mhtml:		my $label = $result->result_set->label;
./results/report_print.mhtml:			next if $value->value eq "Prelim";
./results/report_print.mhtml:			$seed = $value if $value->tag eq "seed";
./results/report_print.mhtml:			$seed = $value if $value->tag eq "Seed";
./results/report_print.mhtml:			$seed = $value if $value->tag eq "Place";
./results/report_print.mhtml:			$seed = $value if $value->tag eq "Order";
./results/report_print.mhtml:		print TEXOUT "\\truncate{.30in}{".Tab::texify($seed->value)."}" if $seed;
./results/report_print.mhtml:		print TEXOUT " & ".Tab::texify($result->student->first." ".$result->student->last) if $result->student;
./results/report_print.mhtml:		print TEXOUT " & ".Tab::texify($result->entry->name) unless $result->student;
./results/report_print.mhtml:		print TEXOUT " & {\\scriptsize ".Tab::texify($result->entry->event->abbr)." } ";
./results/report_print.mhtml:		print TEXOUT "\\truncate{.5in}{\\scriptsize ".Tab::texify($result->entry->event->name)." } " unless $result->entry->event->abbr;
./results/report_print.mhtml:			next unless $value->value;
./results/report_print.mhtml:			next if $value->tag eq "Ballots";
./results/report_print.mhtml:			next if $value->tag eq "Place";
./results/report_print.mhtml:			next if $value->tag eq "Order";
./results/report_print.mhtml:			next if $value->tag eq "Seed";
./results/report_print.mhtml:			next if $value->tag eq "Rnd";
./results/report_print.mhtml:			next if $value->tag eq "Rand";
./results/report_print.mhtml:			print TEXOUT "\\truncate{.40in}{".Tab::texify($value->tag)."}}  \\\\ \\scriptsize{  ";
./results/report_print.mhtml:			print TEXOUT Tab::texify($value->value)."}\n \\vspace{1mm} } ";
./results/report_print.mhtml:			next unless $value->value;
./results/report_print.mhtml:			next unless $value->tag eq "Ballots";
./results/report_print.mhtml:			my $ballots = $value->value;
./results/report_print.mhtml:			$ballots =~ s/-/\\\\/g;
./results/report_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./results/autohandler:	$m->call_next if $r->uri eq "/user/enter/create.mhtml";
./results/autohandler:	my $school = Tab::School->retrieve($school_id) if $school_id;
./results/autohandler:	my $chapter = $school->chapter if $school;
./results/autohandler:	$chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./results/autohandler:	$m->redirect("/user/home.mhtml?err=That school does not exist") unless $chapter;
./results/autohandler:	my $coach = Tab::Permission->search( tag => "chapter", chapter => $chapter->id, person => $person->id )->first;
./results/autohandler:	$m->redirect("/user/home.mhtml?err=You are not authorized to view that school") unless ($person->site_admin || $coach);
./results/autohandler:	$m->call_next( school => $school, chapter => $chapter );
./results/competed_against.mhtml:	Tab::Chapter->set_sql( competed_against => "
./results/competed_against.mhtml:	my @others = Tab::Chapter->search_competed_against( $chapter_id );
./results/competed_against.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./results/competed_against.mhtml:		<h2><% $chapter->name %>'s competitors</h2>
./results/competed_against.mhtml:							<% $other->name %>
./results/competed_against.mhtml:							<% $other->location %>
./results/index.mhtml:	my $now = DateTime->now;
./results/index.mhtml:	$m->redirect("/user/home.mhtml") unless $chapter_id;
./results/index.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./results/index.mhtml:		Tab::Tourn->set_sql(name_by_chapter_published => "
./results/index.mhtml:		@published = Tab::Tourn->search_name_by_chapter_published($chapter_id, "%".$name."%");
./results/index.mhtml:		Tab::Tourn->set_sql(by_chapter_published => "
./results/index.mhtml:		@published = Tab::Tourn->search_by_chapter_published($chapter_id);
./results/index.mhtml:		<h2><% $chapter->name %>: Results</h2>
./results/index.mhtml:%			foreach my $tourn (sort {$b->start->epoch <=> $a->start->epoch} @published) { 
./results/index.mhtml:%				next if $tourn->start > $now;
./results/index.mhtml:%				unless ($tourn->schoolid) { 
./results/index.mhtml:%					my $school = Tab::School->search( chapter => $chapter->id, tourn => $tourn->id)->first;
./results/index.mhtml:%					$tourn->schoolid($school->id);
./results/index.mhtml:						<% Tab::pickerdate($tourn->start) %>
./results/index.mhtml:						<a class="white white" href="/index/tourn/results/index.mhtml?tourn_id=<% $tourn->id %>">
./results/index.mhtml:							<% $tourn->location %> 
./results/index.mhtml:%						foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) { 
./results/index.mhtml:							<% $circuit->abbr %>
./results/index.mhtml:						<a class="white" href="/index/tourn/results/index.mhtml?tourn_id=<% $tourn->id %>">
./results/index.mhtml:							<% $tourn->name %>
./results/index.mhtml:						<a class="dkblue block" href="tourn.mhtml?school_id=<% $tourn->schoolid %>">
./results/index.mhtml:			<input type="hidden" name="chapter_id" value="<% $chapter->id %>">
./results/invoice_print.mhtml:	$m->abort unless $tourn;
./results/invoice_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./results/invoice_print.mhtml:	$m->abort unless $school;
./results/invoice_print.mhtml:	my $school_name = $school->name;
./results/invoice_print.mhtml:	my $tourn_name = $tourn->name;
./results/invoice_print.mhtml:	my $filename = "Invoice-".$school_name."-".$tourn_name."-".$session->id;
./results/invoice_print.mhtml:	my $garbage = `rm -f $filepath.*`;
./results/invoice_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, head => 1);
./results/invoice_print.mhtml:	$m->comp("/register/school/print/invoice.mas", school => $school, filename => $filename);
./results/invoice_print.mhtml:	$m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );
./results/menu.mas:	my $tourn =  $school->tourn;
./results/menu.mas:	my $tz = $tourn->tz;
./results/menu.mas:	my @rounds = $m->comp('/funclib/tourn_round_results.mas', tourn => $tourn);
./results/menu.mas:	my @results = $m->comp('/funclib/tourn_result_sets.mas', tourn => $tourn);
./results/menu.mas:    @rounds = grep { ! $seen{$_->id} ++ } @rounds;
./results/menu.mas:		push @{$event_rounds{$round->event->id}}, $round;
./results/menu.mas:		push @{$event_results{$result->event->id}}, $result;
./results/menu.mas:	my @events = sort {$a->name cmp $b->name} $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./results/menu.mas:	@events = sort {$a->type cmp $b->type} @events;
./results/menu.mas:			<a href="index.mhtml?chapter_id=<% $school->chapter->id %>" class="yellow full">
./results/menu.mas:			<a href="tourn.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "stats" ? "dk" : "" %>blue full">
./results/menu.mas:			<a href="roster.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "roster" ? "dk" : "" %>blue full">
./results/menu.mas:			<a href="report.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "report" ? "dk" : "" %>blue half">
./results/menu.mas:			<a href="report_print.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "report" ? "" : "" %>blue half">
./results/menu.mas:			<a href="online_ballots.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "report" ? "" : "" %>blue half">
./results/menu.mas:			<a href="online_ballots_print.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "report" ? "" : "" %>blue half">
./results/menu.mas:			<a href="invoice_print.mhtml?school_id=<% $school->id %>" class="<% $whoami eq "invoice" ? "" : "" %>blue full">
./results/menu.mas:			<a href="/index/tourn/results/index.mhtml?tourn_id=<% $tourn->id %>" class="yellow full">
./results/menu.mas:	foreach my $category ($tourn->categories) { 
./results/menu.mas:		next unless $category->setting("prefs");
./results/menu.mas:		push @prefs, $m->comp("/funclib/category_entries.mas", category => $category, school => $school);
./results/menu.mas:			<input type="hidden" name="school_id" value="<% $school->id %>">
./results/menu.mas:						<option value="<% $pref->id %>">
./results/menu.mas:							<% $pref->name %>
./results/online_ballots.mhtml:	my $school = Tab::School->retrieve($school_id);
./results/online_ballots.mhtml:	Tab::Score->set_sql( school_rfds => "
./results/online_ballots.mhtml:	my @rfds = Tab::Score->search_school_rfds($school_id);
./results/online_ballots.mhtml:		<h2><% $school->chapter->name %>: Results</h2>
./results/online_ballots.mhtml:		<& /user/chapter/tabbar.mas, chapter => $school->chapter, whoami => "results" &>
./results/online_ballots.mhtml:%			my @other_values = sort {$a->tag cmp $b->tag} $rfd->ballot->scores;
./results/online_ballots.mhtml:%			my @entries = $m->comp("/funclib/panel_entries.mas", panel => $rfd->ballot->panel);
./results/online_ballots.mhtml:%			unless ($rfd->ballot->entry->id == $current_entry) { 
./results/online_ballots.mhtml:%				$current_entry = $rfd->ballot->entry;
./results/online_ballots.mhtml:				<h4><% $current_entry->code %> <% $current_entry->name %> Ballots</h4>
./results/online_ballots.mhtml:%			my $aff_string = $current_entry->event->setting('aff_string');
./results/online_ballots.mhtml:%			my $neg_string = $current_entry->event->setting('neg_string');
./results/online_ballots.mhtml:					<% $rfd->ballot->panel->round->realname %>
./results/online_ballots.mhtml:					(<% $rfd->ballot->side == 1 ? $aff_string : $neg_string %>)
./results/online_ballots.mhtml:					<% $rfd->ballot->judge->first %> <% $rfd->ballot->judge->last %>
./results/online_ballots.mhtml:					<% uc($rfd->tag) %>
./results/online_ballots.mhtml:%					foreach my $other (sort {$a->student <=> $b->student} @other_values) { 
./results/online_ballots.mhtml:%						next if $other->tag eq "rfd";
./results/online_ballots.mhtml:%						next if $other->tag eq "comment";
./results/online_ballots.mhtml:						<% $other->tag eq "ballot" && $other->value == "1" ? "W" : "" %>
./results/online_ballots.mhtml:						<% $other->tag eq "ballot" && $other->value != "1" ? "L" : "" %>
./results/online_ballots.mhtml:						<% $other->tag ne "ballot" ? $other->value : "" %>
./results/online_ballots.mhtml:%						next if $entry->id == $rfd->ballot->entry->id;
./results/online_ballots.mhtml:						<% $entry->code %> <br /><% $entry->name %>
./results/online_ballots.mhtml:				<% $rfd->content %>
./autohandler:%	unless ($r->uri =~ /login/ || $r->uri =~ /cruz/) {
./autohandler:			<% $m->call_next %>
./autohandler:		<div id="content-spacer"></div>
./home.mhtml:	my $dbh = Tab::DBI->db_Main();
./home.mhtml:	my $sth = $dbh->prepare("
./home.mhtml:	$sth->execute($session->person->id);
./home.mhtml:	my $missing = $sth->fetchrow_array();
./home.mhtml:		$m->redirect("/user/login/profile.mhtml?err=$err");
./home.mhtml:	my @entries = $m->comp("/funclib/person_entries.mas", person => $person);
./home.mhtml:	my @entry_panels = $m->comp("/funclib/person_entry_panels.mas", person => $person) if @entries;
./home.mhtml:	my @judges = $m->comp("/funclib/person_judges.mas", person => $person);
./home.mhtml:	my @panels = $m->comp("/funclib/person_panels.mas", person => $person) if @judges;
./home.mhtml:	my @students = Tab::Student->search( person => $person->id );
./home.mhtml:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./home.mhtml:		$m->redirect("/user/judge/panels.mhtml?err=$err&msg=$msg"); 
./home.mhtml:		#$m->redirect("/user/entry/panels.mhtml?err=$err&msg=$msg");
./home.mhtml:		$m->redirect("/user/student/index.mhtml?err=$err&msg=$msg");
./home.mhtml:		$m->redirect("/user/chapter/index.mhtml?err=$err&msg=$msg");
./home.mhtml:		$m->redirect("/user/judge/index.mhtml?err=$err&msg=$msg");
./home.mhtml:		$m->redirect("/user/student/index.mhtml?err=$err&msg=$msg");
./home.mhtml:	$m->redirect("/user/setup.mhtml?err=$err&msg=$msg");
./setup.mhtml:					<a class="dkblue button full" href="chapter/create.mhtml" style="text-decoration: none;">
./setup.mhtml:					<a class="dkblue button full" href="tourn/request.mhtml" style="text-decoration: none;">
./setup.mhtml:					<a class="dkblue button full" href="judge/search.mhtml" style="text-decoration: none;">
./setup.mhtml:					<a class="dkblue button full" href="student/search.mhtml" style="text-decoration: none;">
./setup.mhtml:					<a class="dkblue button full" href="student/follow.mhtml" style="text-decoration: none;">
./menu.mas:	my $tz = $person->tz if $person;
./menu.mas:	my @all_tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./menu.mas:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person);
./menu.mas:	my @entries = $m->comp("/funclib/person_entries.mas", person => $person);
./menu.mas:	my @allentries = $m->comp("/funclib/person_entries.mas", person => $person, all => 1);
./menu.mas:	my @pref_chapters = $m->comp("/funclib/person_chapters.mas", person => $person, prefs => "yes");
./menu.mas:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./menu.mas:	my @regions = $m->comp("/funclib/person_regions.mas", person => $person);
./menu.mas:	my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./menu.mas:	my @nowjudges = $m->comp("/funclib/person_judges.mas", person => $person, current => 1);
./menu.mas:	my @alljudges = $m->comp("/funclib/person_judges.mas", person => $person, all => 1);
./menu.mas:	my @all_chapter_judges = $person->chapter_judges;
./menu.mas:	my $now = DateTime->now;
./menu.mas:	my $year = $now->year;
./menu.mas:	my $limit = $year."-07-01 00:00:00";
./menu.mas:	Tab::Student->set_sql(by_ndt => "
./menu.mas:	my @partners = Tab::Student->search_by_ndt($person->id);
./menu.mas:					<a class=" <% ($chapter && $ochapter->id == $chapter->id )? "dk" : "" %>blue full" href="/user/chapter/tournaments.mhtml?chapter_id=<% $ochapter->id %>">
./menu.mas:						<% $ochapter->name %>
./menu.mas:					<a class=" <% ($chapter && $ochapter->id == $chapter->id )? "dk" : "" %>blue full" href="/user/chapter/tournaments.mhtml?chapter_id=<% $ochapter->id %>">
./menu.mas:							<% $ochapter->name %>
./menu.mas:%					if ($oregion->circuit->id == 3) {   #NCFL 
./menu.mas:						<a class=" <% ($region && $oregion->id == $region->id )? "yellow" : "blue" %> full" href="/user/diocese/tournaments.mhtml?region_id=<% $oregion->id %>">
./menu.mas:							<% $oregion->arch ? "Archdiocese" : "Diocese" %> of <% $oregion->name %>
./menu.mas:						<a class=" <% ($region && $oregion->id == $region->id )? "yellow" : "blue" %> full" href="/user/region/tournaments.mhtml?region_id=<% $oregion->id %>">
./menu.mas:							<% $oregion->name %> Region
./menu.mas:				<a class="blue full" href="/user/tourn/select.mhtml?tourn_id=<% $tourn->id %>">
./menu.mas:						<% $tourn->name %>
./menu.mas:						<% $tourn->location %>
./menu.mas:			<a class="martop-half blue full" href="/user/tourn/all.mhtml">
./menu.mas:					<a class="<% $circuit->id == $circuit_id ? "dk" : "" %>blue full" href="/user/circuit/index.mhtml?circuit_id=<% $circuit->id %>">
./menu.mas:							<% $circuit->name %>
./menu.mas:							<% ($circuit->state) ? $circuit->state."/" : "" %><% $circuit->country %>
./menu.mas:%					if ($m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, approval => 1)) { 
./menu.mas:						<a class="yellow full indent" href="/user/circuit/approvals.mhtml?circuit_id=<% $circuit->id %>">
./menu.mas:					<a class="blue half" href="/user/judge/history.mhtml?person_id=<% $person->id %>">
./menu.mas:%				if ($m->comp("/funclib/tourn_exchange.mas")) { 
./menu.mas:	                <a class="blue full" href="/user/judge/hire.mhtml?person_id=<% $person->id %>">
./menu.mas:			<a class="yellow full" href="/user/student/index.mhtml?person_id=<% $person->id %>">
./menu.mas:			<a class="yellow full" href="/jbruschke/TeamBidSheet.php?id1=<% $partner->id %>&id2=<% $partner->code %>">
./menu.mas:				NDT Bid Sheet w/<% $partner->last %>
./menu.mas:				my $tourn_start = $entry->event->tourn->start;
./menu.mas:				my $tourn_end = $entry->event->tourn->end;
./menu.mas:				$date_string .= " - ".Tab::niceshortdate($tourn_end) if $tourn_end->day != $tourn_start->day;
./menu.mas:				my $prefs_due = $entry->event->category->setting("strike_end");
./menu.mas:				my $prefs_start = $entry->event->category->setting("strike_start");
./menu.mas:					$prefs_start->set_time_zone($tz);
./menu.mas:					$prefs_due->set_time_zone($tz);
./menu.mas:				<a class="blue full" href="/user/student/entry.mhtml?entry_id=<% $entry->id %>">
./menu.mas:						<% $entry->event->abbr ? $entry->event->abbr : substr($entry->event->name, 0, 4) %> at <% $entry->event->tourn->name %> 
./menu.mas:%			foreach my $student ($person->students) { 
./menu.mas:				<a class=" blue full" href="/user/entry/students.mhtml?student_id=<% $student->id %>">
./menu.mas:					<% $student->chapter ? $student->chapter->name : "" %> signups
./menu.mas:%		if ($person->site_admin) { 
./menu.mas:<!--
./menu.mas:-->
