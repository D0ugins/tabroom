<%args>
	$person
	$panel_id 
	$judge_id
	$entry_id 
	$score_id => undef
	$points   => undef
	$topic    => undef
	$side     => undef
	$comments => undef
</%args>
<%init>

	my $msg;

	my $scrubber = HTML::Scrubber->new( allow => [ qw[ p strong b i u hr br ol ul li] ] );

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	unless ($judge) { 
		$m->comp("/funclib/abort.mas", 
			err => "Judge record not found.  Hit back and try again");
	}

	unless ($judge->person->id == $person->id) { 
		$m->comp("/funclib/abort.mas", 
			err => "You are trying to submit a ballot for someone else.  Nope.");
	}

	my $panel = Tab::Panel->retrieve($panel_id) if $panel_id;
	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my $score = Tab::Score->retrieve($score_id) if $score_id;

	unless ($panel && $entry) { 
		$m->comp("/funclib/abort.mas", 
			err => "No entry found on that particular judge panel.  Contact tab for help.");
	}


	my $event = $panel->round->event;

	my %event_settings = $event->all_settings;

    my $max_points = $event_settings{"max_points"};
    my $min_points = $event_settings{"min_points"};

    my $max_ob_points = $event_settings{"max_ob_points"};
    my $min_ob_points = $event_settings{"min_ob_points"};

    $min_ob_points = $min_points unless $min_ob_points;
    $max_ob_points = $max_points unless $max_ob_points; 

	$min_ob_points = 0 unless $min_ob_points;
	$max_ob_points = 6 unless $max_ob_points;

	my $ballot = Tab::Ballot->search( 
		panel => $panel->id, 
		judge => $judge->id, 
		entry => $entry->id
	)->first;

	unless ($ballot) { 
		$m->comp("/funclib/abort.mas", 
			err => "No ballot was found for that student with you judging.  <br />Please go back and try again! $panel_id $judge_id $entry_id");
	}

	my %missing = ();

	$missing{"points"}++ unless $points;
	$missing{"topic"}++ unless $topic;
	$missing{"side"}++ unless $side;
	$missing{"comments"}++ unless $comments;

	$missing{"points_range"}++ unless ($points <= $max_ob_points && $points >= $min_ob_points);

	if (keys %missing) { 

		my $missing_string;

		foreach my $key (keys %missing) { 
			$missing_string .= "," if $missing_string;
			$missing_string .= $key;
		}

		$m->redirect("ballot.mhtml?panel_id=$panel_id&judge_id=$judge_id&entry_id=$entry_id&missing=$missing_string");

	}

	if ($score) { 

		unless ($score->ballot->id == $ballot->id) { 

			$m->comp("/funclib/abort.mas", 
				err => " Something has gone terribly wrong; the speech you
				tried to edit doesn't match with the right speaker.  Please
				refresh and try again"
			);
		}

		$score->value($points);
		$score->topic($scrubber->scrub($topic));
		$score->position($side);
		$score->content($scrubber->scrub($comments));

		$score->update;

		$msg = "Scores for speech number ".$score->speech." re-saved";

	} else { 

		Tab::Score->set_sql( max_speech => " 
			select max(score.speech)
			from score, ballot
			where ballot.panel = ? 
			and ballot.id = score.ballot
			and score.tag = 'congress_speech'
		");

		my $max_value = Tab::Score->sql_max_speech->select_val($panel->id);

		$max_value++;

		Tab::Score->create({
			ballot   => $ballot->id,
			tag      => "congress_speech",
			value    => $points,
			topic    => $scrubber->scrub($topic),
			content  => $scrubber->scrub($comments),
			speech   => $max_value,
			position => $side
		});

		$msg = "Scores for speech number $max_value saved";
	}


	$m->redirect("ballot.mhtml?panel_id=".$panel->id."&judge_id=".$judge->id."&entry_id=".$entry->id."&msg=$msg");

</%init>
