<%args>
	$person
	$panel_id => undef
	$judge_id => undef
	$skipme   => undef
</%args>
<%init>

	use Math::Round qw(nearest);

	unless ($panel_id && $judge_id) {
		my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($panel && $judge) {
		my $err = "No ballots found for that judge and that panel.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	unless ($person->site_admin || $judge->person->id == $person->id) {
		my $err = "You are not authorized to enter ballots for that judge.";
		$m->redirect("/user/home.mhtml?err=$err")
	}

	my @ballots = Tab::Ballot->search(
		judge => $judge->id,
		panel => $panel->id,
		audit => 0
	);

	my @clean;
	foreach my $ballot (@ballots) {
		next unless $ballot->entry > 0;
		next unless $ballot->entry->active;
		push @clean, $ballot;
	}

	@ballots = @clean;


	unless (@ballots) {

		my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";

		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $unconfirmed;

	foreach my $ballot (@ballots) {
		$unconfirmed++ unless $ballot->audit > 0;
	}

	unless ($unconfirmed) {
		my $err = "Those ballots were already confirmed.  Please contact tab if you believe there was an error";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $round = $panel->round;
	my $event = $round->event;
	my $category = $event->category;

	my %event_settings = $event->all_settings;
	my %category_settings = $category->all_settings;

	my $tourn = $category->tourn;
	my $type = $event->type;

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;


	my $no_lpw++ if $event_settings{"no_lpw"};
	$no_lpw++ if $event->type eq 'speech' || $event->type eq 'congress';
	undef $no_lpw if $event_settings{"allow_lowpoints"};

	my $tiebreaks               = $round->tiebreak_set;
	my $ballot_entry_name       = $category_settings{"ballot_entry_names"};
	my $ballot_entry_first_name = $category_settings{"ballot_entry_first_names"};
	my $ballot_school_code      = $category_settings{"ballot_school_codes"};
	my $ballot_school_name      = $category_settings{"ballot_school_names"};

	my $wins;
	my $team_points;
	my $points;
	my $ranks;
	my $team_ranks;

	my @entries;
	my %entry_values = ();
	my %entry_headcount = ();
	my %entry_students = ();
	my %student_entry = ();
	my $max_headcount;
	my %already;
	my %drop_ballot;

	my %comments_left;
	my $rfd_left;

	my %entry_ballot;

	foreach my $ballot (@ballots) {

		my $entry = $ballot->entry;
		next unless $entry;

		$entry_ballot{$entry->id} = $ballot;
		$drop_ballot{$ballot->id}++ if $entry->dropped;

		unless ($already{$entry->id}++) {

			$entry->speaks($ballot->speakerorder);

			push @entries, $entry;

			my @students = $entry->students;

			@{$entry_students{$entry->id}} = @students;

			foreach my $student (@students) {
				$student_entry{$student->id} = $entry;
			}

			$entry_headcount{$entry->id} = scalar @students;

			$max_headcount = $entry_headcount{$entry->id}
				if $max_headcount < $entry_headcount{$entry->id};
		}

		if ($ARGS{"rfd"}) {

			my $text = $m->comp(
				"/funclib/save_editor.mas",
				text => $ARGS{"rfd"}
			);

			my $rfd = Tab::Score->search(
				tag	=> "rfd",
				ballot => $ballot->id
			)->first;

			$rfd_left += length($text);

			if ($rfd) {

				$rfd->content($text);
				$rfd->update;

			} else {

				eval {
					Tab::Score->create({
						tag	  => "rfd",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $text,
						student  => 0
					});
				};

			}
		}

		if ($ARGS{"comments_".$ballot->id}) {

			my $text = $m->comp(
				"/funclib/save_editor.mas",
				text => $ARGS{"comments_".$ballot->id}
			);

			$comments_left{$ballot->id} += length($text);

			my $comments = Tab::Score->search(
				tag    => "comments",
				ballot => $ballot->id
			)->first;

			if ($comments) {

				$comments->content($text);
				$comments->update();

			} else {

				eval {
					Tab::Score->create({
						tag	  => "comments",
						tiebreak => 4,
						ballot   => $ballot->id,
						content  => $text,
						student  => 0
					});
				};
			}
		}

	}

	if ($skipme) {

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id&default=rankings";

		foreach my $key (keys %ARGS) {
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			next if index($key, 'comments') != -1;
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&msg=RFD and comments Saved";
		$m->redirect("ballot.mhtml".$url_args);

	}

	foreach my $tb ($tiebreaks->tiebreaks) {

		next if
			$tb->count eq "prelim"
			&& ( $round->type eq "elim"
				|| $round->type eq "final"
				|| $round->type eq "runoff");

		$ranks++ if (
			$tb->name eq "ranks"
			|| $tb->name eq "reciprocals");

		$wins++ if (
			$tb->name eq "opp_wins"
			|| $tb->name eq "winloss"
			|| $tb->name eq "losses"
			|| $tb->name eq "ballots"
		);

		$points++ if (
			$tb->name eq "points"
			|| $tb->name eq "competition"
			|| $tb->name eq "opp_points");

		if ($tb->child) {

			foreach my $otb ($tb->child->tiebreaks) {

				next if
					$otb->count eq "prelim"
					&& ( $round->type eq "elim"
						|| $round->type eq "final"
						|| $round->type eq "runoff"
					);

				$ranks++ if (
					$otb->name eq "ranks"
					|| $otb->name eq "reciprocals"
					|| $otb->name eq "opp_ranks"
				);

				$wins++ if (
					$otb->name eq "opp_wins"
					|| $otb->name eq "winloss"
					|| $otb->name eq "losses"
				);

				$points++ if (
					$otb->name eq "points"
					|| $otb->name eq "opp_points"
				);
			}
		}
	}

	my $total_points;

	if ($type eq "speech" || $type eq "congress") {

		$team_points++ if $points;
		$team_ranks++ if $ranks;
		undef $points;
		undef $ranks;

	} elsif ($event_settings{"team_points"}) {

		$team_points++ if $points;
		$team_ranks++ if $ranks;
		undef $points;
		undef $ranks;

	}

	my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);

	my $tv++
		if $type eq "speech"
		&& $tiebreaks->setting("mfl_time_violation");

	my $forfeit++
		if $type eq "speech"
		&& $tiebreaks->setting("forfeits_never_break");

	my $max_points = $event_settings{"max_points"};
	my $min_points = $event_settings{"min_points"};

	my $max_ob_points = $event_settings{"max_ob_points"};
	my $min_ob_points = $event_settings{"min_ob_points"};

	$min_ob_points = $min_points unless $min_ob_points;
	$max_ob_points = $max_points unless $max_ob_points;

	$min_ob_points = 0 unless $min_ob_points;

	my $point_increments = $event_settings{"point_increments"};
	my $point_ties = $event_settings{"point_ties"};

	my $subscores = $event_settings{"wsdc_categories"};

	my %max_subpoints = ();
	my %min_subpoints = ();

	my @scores = ("Style", "Content", "Strategy", "POI");

	foreach my $key (@scores) {

		$min_subpoints{$key} = $event_settings{"min_".lc($key)."_points"};
		$max_subpoints{$key} = $event_settings{"max_".lc($key)."_points"};

		$min_subpoints{$key} = 0 unless $min_subpoints{$key};

		$min_subpoints{"total"} += $min_subpoints{$key} unless $key eq "POI";
		$max_subpoints{"total"} += $max_subpoints{$key} unless $key eq "POI";

	}

	my $trash = pop @scores unless $max_subpoints{"POI"};

	my $errs;

	if ($event_settings{"rfd_plz"}) {

		if ($rfd_left < $event_settings{'rfd_plz'}) {

			$errs = "This tournament requests you leave a Reason for Rank or Decision!  Otherwise students and their coaches will not know how to improve.  Please leave at least ".$event_settings{"rfd_plz"}." words of feedback. (You left $rfd_left) <br />";
		}
	}

	if ($event_settings{"comments_plz"}) {

		foreach my $ballot (keys %comments_left) {

			next if $drop_ballot{$ballot};

			if ($comments_left{$ballot} < $event_settings{'comments_plz'}) {

				$errs = "This tournament requests you leave comments for each speaker!  Otherwise students and their coaches will not know how to improve. Please leave at least ".$event_settings{"comments_plz"}." words of feedback for each speaker. <br />";

			}
		}
	}

	my %student_values = ();
	my $side_disagree;
	my $speakerorder_disagree;
	my $no_side_constraints++ if $event_settings{'no_side_constraints'};

	my $sidelocks++
		if ($round->type eq "elim"
			|| $round->type eq "final"
			|| $round->type eq "runoff"
		)
		&& not defined $no_side_constraints;

	my $locked =  $m->comp(
		"/funclib/round_elim_dueaff.mas",
		panel => $panel
	) if $sidelocks;

	undef $no_side_constraints if $event->type eq "speech";
	undef $no_side_constraints if $event->type eq "congress";

	undef $sidelocks if $event->type eq "speech";
	undef $sidelocks if $event->type eq "congress";

	if ($no_side_constraints || ($sidelocks && not defined $locked)) {

		my %taken = ();
		my %sides = ();
		my $changed;

		foreach my $other_ballot ($panel->ballots) {
			next if $other_ballot->judge && $other_ballot->judge->id == $judge->id;
			$sides{$other_ballot->entry->id} = $other_ballot->side;
		}

		BALLOT:
		foreach my $ballot (@ballots) {

			my $side = $ARGS{$ballot->id."_side"};

			if ($sides{$ballot->entry->id} && ($side != $sides{$ballot->entry->id})) {
				$side_disagree++;
			}

			if ($side != $ballot->side) {
				$m->comp("/funclib/swap_sides.mas", panel => $ballot->panel);
				$changed++;
				last if $changed;
			}

		}

		if ($changed) {
			foreach my $ballot (@ballots) {
				if ($ballot->side == 2) {
					$ballot->side(1);
					$ballot->update();
				} else {
					$ballot->side(2);
					$ballot->update();
				}
			}
		}

	}

	if ($no_side_constraints) {

		my %taken = ();
		my %speakerorders = ();

		my %entries;

		foreach my $ballot (@ballots) {
			$entries{$ballot->entry->id}++;
		}

		my $num_entries = scalar (keys %entries) + 1;

		foreach my $ballot (@ballots) {
			$ballot->speakerorder($num_entries++);
		}

		foreach my $ballot (@ballots) {

			my $speakerorder = $ARGS{$ballot->id."_speakerorder"};
			$errs .= "<p>You must specify a speaker order for both entries</p>" unless $speakerorder;

			if ($taken{$speakerorder}) {
				$errs .= "<p>You cannot make entries all on one speakerorder.  Try again</p>"
			} else {
				$taken{$speakerorder}++;
				$ballot->speakerorder($speakerorder);
				$ballot->update;
				$speakerorders{$speakerorder} = $ballot->entry->id;
				$speakerorders{$ballot->entry->id} = $speakerorder;
			}
		}

		foreach my $other_judge (
			$m->comp("/funclib/panel_judges.mas",
				panel => $panel
			)
		) {

			next if $other_judge->id == $judge->id;

			my ($win, $side, $winspeakerorder) = $m->comp(
				'/funclib/panel_winner.mas',
					panel => $panel,
					judge => $other_judge
			);

			if ($win && $winspeakerorder) {
				$speakerorder_disagree++ if $speakerorders{$winspeakerorder} != $win->id;
			} else {

				my @ballots = Tab::Ballot->search(
					judge => $other_judge->id,
					panel => $panel->id,
					audit => 0
				);

				foreach my $ballot (@ballots) {
					next unless $ballot->entry;
					$ballot->speakerorder($speakerorders{$ballot->entry->id});
					$ballot->update;
				}
			}
		}
	}

	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

	if ($ranks) {

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) {

			my $rank = $ARGS{$student->id."_ranks"};

			$rank = $event_settings{"truncate_fill"} unless $rank;

			$errs .= "<p>Rank missing for ".$student->last."</p>" unless $rank;

			next unless $rank;

			$errs .= "<p>Rank must be a number</p>"
				unless ($rank eq $rank+0);

			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>"
				if $rank_taken{$rank};

			$errs .= "<p>Rank $rank is outside of range.</p>"
				if $rank < 1
				|| $rank > scalar @students;

			$rank_taken{$rank}++
				unless $event_settings{"truncate_fill"}
				|| $event_settings{"allow_rank_ties"};

			$student_values{$student->id."_rank"} = $rank;

			if ($points) {
				$rank_points{$rank} = $ARGS{$student->id."_points"};
			}
		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) {

			if ($rank_points{$rk} < $current) {

				$errs .= "<p>Speaker ranked $rk has worse speaks than a lower ranked student";

				$errs .= "(".$rank_points{$rk}." vs ".$current.")</p>";

			}

			$current = $rank_points{$rk};
		}

		if ($event_settings{"truncate_fill"}) {
			foreach my $rank (1 .. $event_settings{"truncate_fill"}) {
				unless ($rank_taken{$rank}) {
					$errs .= "<p>You are missing the rank ".$rank." </p>";
				}
			}
		}


	}

	if ($team_ranks) {

		my %rank_taken;
		my %rank_points;

		BALLOT:
		foreach my $ballot (@ballots) {

			my $rank = $ARGS{$ballot->id."_ranks"};
			$rank = $event_settings{"truncate_fill"} unless $rank;

			unless ($drop_ballot{$ballot->id}) {

				$errs .= "<p>Rank missing for ".$ballot->entry->code."</p>"
					unless $rank;

				next BALLOT unless $rank;

				$errs .= "<p>Rank must be a number</p>"
					unless ($rank eq $rank+0);

				unless ($event_settings{"allow_rank_ties"}) {
					$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>"
						if $rank_taken{$rank} && ($rank != $event_settings{"truncate_fill"});
				}

				$errs .= "<p>Rank $rank is outside of range</p>"
					if $rank < 1 || $rank > scalar @ballots;
			}

			$rank_taken{$rank}++ if $rank;
			$entry_values{$ballot->entry->id."_rank"} = $rank if $rank;

			if ($team_points) {
				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
			}
		}

		my $current;
		my $not_ok;
		my $ok;

		foreach my $rk (sort keys %rank_points) {
			next unless $rk;
			$current =  $rank_points{$rk} unless $current;
			$ok++ if $rank_points{$rk} < $current;
			$not_ok .= ", " if ($rank_points{$rk} > $current) && $not_ok;
			$not_ok .= $rk if $rank_points{$rk} > $current;
			$current = $rank_points{$rk};
		}

		if ($ARGS{"lpw"} && $not_ok && $no_lpw) {

			$errs .= "<p>Rank order must match the order of points given.</p>";

		} elsif ($not_ok && not defined $ARGS{"lpw"}) {

			$errs .= "<p>Entry ranked $not_ok has worse points than a lower ranked entry</p>";
			$errs .= "<p>Rank order must match the order of points given.</p>" if $no_lpw;
			$errs .= "<p>You must mark the low-point rank checkbox if that's what you intend.</p>" unless $no_lpw;

		} elsif ($ARGS{"lpw"} && not defined $not_ok) {

			$errs .= "<p>You marked the low-point rank checkbox, but the ranks are in order of points.  Please check for errors and correct them.</p>";

		}

		if ($event_settings{"truncate_fill"}) {
			foreach my $rank (1 .. $event_settings{"truncate_fill"}) {
				unless ($rank_taken{$rank}) {
					$errs .= "<p>You are missing the rank ".$rank." </p>";
				}
			}
		}
	}

	if ($team_points) {

		my %points_taken = ();

		BALLOT:
		foreach my $ballot (@ballots) {

			my $points = $ARGS{$ballot->id."_points"};
			$points = 0 unless $points;
			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") {
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			unless ($drop_ballot{$ballot->id}) {

				$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

				$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
					if $points_taken{$points} && $point_ties < 1;

				$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>"
					if ($points < $min_ob_points) || ($points > $max_ob_points);

			}

			$points_taken{$points}++;
			$entry_values{$ballot->entry->id."_points"} += $points;
		}

	}

	if ($points) {

		my %points_taken;

		foreach my $student (@students) {

			my $points = $ARGS{$student->id."_points"};
			$points = 0 unless $points;

			$errs .= "<p>Points missing</p>"
				if $min_ob_points > 0
				&& (not defined $points);

			$errs .= "<p>Points below minimum of ".$min_ob_points."</p>"
				if $min_ob_points > $points;

			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") {
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

			if ($subscores) {

				my $subtotal;

				foreach my $score (@scores) {

					my $subpoints = $ARGS{$student->id."_".$score};

					if ($subpoints < $min_subpoints{$score}
						|| $subpoints > $max_subpoints{$score}) {

						$errs .= "<p>Points $subpoints for ".$student->last." are out of range</p>";
					}
					$student_values{$student->id."_".$score} = $subpoints;
					$subtotal += $subpoints;
				}

				if ($subtotal != $points) {
					$errs .= "<p>Point subscores do not add up to $points</p>";
				}

			}


			$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
				if $points_taken{$points}
				&& $point_ties < 1;

			$errs .= "<p>Points $points are outside of range $min_ob_points - $max_ob_points</p>"
				if $points < $min_ob_points || $points > $max_ob_points;

			$points_taken{$points}++;
			$student_values{$student->id."_points"} = $points;
			$entry_values{$student_entry{$student->id}."_points"} += $points;
			$total_points += $points;

		}
	}

	my $winner;

	if ($wins)  {

		my $winning_ballot = $ARGS{"winner"};
		$winner = Tab::Ballot->retrieve($winning_ballot);

		$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>"
		unless $winner;

		$errs .= "<p>Your winner and your chosen side did not agree</p>"
			if $winner
			&& $winner->side != $ARGS{"winner_side"};

		#2nd bit avoid mavericks
		if ($winner && $entry_headcount{$winner->entry->id} == $max_headcount) {

			my $winner_points = $entry_values{$winner->entry->id."_points"};

			foreach my $ballot (@ballots) {

				my $bal_points = $entry_values{$ballot->entry->id."_points"};

				if ($no_lpw) {

					$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>"
						if $winner_points < $bal_points;

				} else {

					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>"
						if $winner_points < $bal_points
						&& not defined $ARGS{"lpw"};

					$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>"
						if $winner_points > $bal_points
						&& $ARGS{"lpw"};
				}
			}
		}
	}

	if ($errs) {

		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id&default=rankings";

		foreach my $key (keys %ARGS) {
			next if $key eq "panel_id";
			next if $key eq "judge_id";
			next if $key eq "rfd";
			next if index($key, 'comments') != -1;
			$url_args .= "&$key=$ARGS{$key}";
		}

		$url_args .= "&errs=$errs";
		$m->redirect("ballot.mhtml".$url_args);

	} else {

		# Clear the old cruft

		Tab::Score->set_sql( clear_cruft => "
			delete score.*
			from score, ballot
			where ballot.panel = ?
			and ballot.judge = ?
			and score.tag = ?
			and ballot.id = score.ballot");

		Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "rank");
		Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "points");
		Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "ballot");

		if ($subscores) {
			foreach my $score (@scores) {
				Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id, "subpoints_".lc($score));
			}
		}

		sleep 1;

		foreach my $ballot (@ballots) {

			$ballot->audit("");
			$ballot->update;

			if ($wins) {

				my $tigers_blood = 0;

				$tigers_blood++ if $winner->id == $ballot->id;

				my $winner = Tab::Score->search({
					ballot => $ballot->id,
					tag	=> "ballot"
				})->first;

				unless ($winner) {

					eval {
						$winner = Tab::Score->create({
							ballot   => $ballot->id,
							value    => $tigers_blood,
							tag      => "ballot",
							tiebreak => 2,
							student  => 0
						});
					};

				}

			}

			if ($team_points) {

				if ($type eq "speech" || $type eq "congress") {

					my $points = Tab::Score->search(
						ballot => $ballot->id,
						tag    => "points"
					)->first;

					eval {
						$points = Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "points",
							tiebreak => 3,
							value    => $entry_values{$ballot->entry->id."_points"}
						});
					} unless $points;

				} else {

					foreach my $student (@students) {

						next unless $student_entry{$student->id} == $ballot->entry->id;

						my $points = Tab::Score->search({
							ballot  => $ballot->id,
							tag     => "points",
							student => $student->id}
						)->first;

						eval {
							$points = Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "points",
								tiebreak => 3,
								value    => $entry_values{$ballot->entry->id."_points"}
							});
						} unless $points;
					}
				}
			}

			if ($points) {

				foreach my $student (@students) {

					next unless $student_entry{$student->id} == $ballot->entry->id;

					my $points = Tab::Score->search({
						ballot  => $ballot->id,
						tag     => "points",
						student => $student->id}
					)->first;

					$points->delete if $points;

					eval {
						$points = Tab::Score->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => "points",
							tiebreak => 3,
							value    => $student_values{$student->id."_points"}
						});
					};

					if ($subscores) {

						foreach my $score (@scores) {

							Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "subpoints_".lc($score),
								content  => lc($score),
								tiebreak => 3,
								value    => $student_values{$student->id."_".$score}
							});
						}
					}
				}
			}

			if ($ranks) {

				foreach my $student (@students) {

					next unless $student_entry{$student->id} == $ballot->entry->id;

					my $value = 0;

					$value = $student_values{$student->id."_rank"}
						if $student_values{$student->id."_rank"};

					my $ranks = Tab::Score->search({
						ballot  => $ballot->id,
						tag     => "rank",
						student => $student->id}
					)->first;

					eval {
						$ranks = Tab::Score->create({
							ballot   => $ballot->id,
							student  => $student->id,
							tag      => "rank",
							tiebreak => 1,
							value    => $value
						});
					} unless $ranks;

				}

			}

			if ($team_ranks) {

				if ($type eq "speech" || $type eq "congress") {

					my $ranks = Tab::Score->search(
						ballot => $ballot->id,
						tag    => "rank"
					)->first;

					eval {
						$ranks = Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "rank",
							tiebreak => 1,
							value    => $entry_values{$ballot->entry->id."_rank"}
						});
					} unless $ranks;

				} else {

					foreach my $student (@students) {

						next unless $student_entry{$student->id} == $ballot->entry->id;

						my $ranks = Tab::Score->search({
							ballot  => $ballot->id,
							tag	 => "rank",
							student => $student->id}
						)->first;

						eval {
							$ranks = Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "rank",
								tiebreak => 3,
								value    => $entry_values{$ballot->entry->id."_rank"}
							});
						} unless $ranks;
					}
				}
			}
		}
	}


</%init>

	<div class="main">

%		if ($points && not defined $total_points) {

			<div class="block padmuchmore martop centeralign">

				<br />
				<br />
				<br />
				<br />
				<br />

				<h1 class="centeralign redtext">
					YOU GAVE NO POINTS?!
				</h1>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

				<h4 class="martop centeralign">
					If you are trying to enter a forfeit, stop.  Contact the
					tab room.  They have to enter forfeit/forfeit wins, not
					you.
				</h4>

				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />
				<br />

			</div>

<%perl>

		}

		if ($wins && $side_disagree < 1) {

			my $winside = $ARGS{"winner_side"};
			my $side = $aff_string if $winside == 1;
			$side = $neg_string if $winside == 2;
</%perl>

			<h5 class="semibold bluetext marbottommore">
				Your winner was
			</h5>

			<div class="full padmuchmore martop centeralign">

				<h1 class="centeralign bluetext semibold">
					<% $winner->entry->code %> on the <% $side %>
				</h1>

				<h5 class="martop centeralign normalweight bluetext">
					(<% $winner->entry->name
						%><% $no_side_constraints ?
						": ".Lingua::EN::Numbers::Ordinate::ordinate($winner->speakerorder)." speakers"
						: ""
					%>)
				</h5>

			</div>

			<br />
%		} else {

			<h4 class="marbottommore">
				Please confirm your ranking of this round:
			</h4>

<%perl>
		}

		if (($team_points || $team_ranks)
			&& $side_disagree < 1
		) {

			my $switch;

			@entries =
				sort {$entry_values{$a->id."_points"}
					<=> $entry_values{$b->id."_points"}
				} @entries
				if $team_points;

			@entries =
				sort {$entry_values{$a->id."_rank"}
					<=> $entry_values{$b->id."_rank"}
				} @entries
				if $team_ranks;

</%perl>
			<& "/funclib/tablesorter.mas",
				table => "final",
				nobuttons => 1
			&>

			<table id="final">

				<thead>

				<tr class="smallish yellowrow nosort centeralign">

%					if ($team_ranks) {
						<th>
							Rank
						</th>
%					}

%					if ($team_points) {
						<th>
							Points
						</th>
%					}

					<th>
						Code
					</th>

%				   if ($ballot_school_code) {
						<th>
							School
						</th>
%				   }
%				   if ($ballot_school_name) {
						<th>
							School
						</th>
%				   }

%				   if ($ballot_entry_name) {
						<th>
							Name
						</th>
%				   }
%				   if ($ballot_entry_first_name) {
						<th>
							First Name
						</th>
%				   }
%				   if ($category_settings{'ballot_entry_titles'}) {
						<th>
							Title/Question
						</th>
%				   }
%					if ($type eq "speech") {
						<th>
							Spoke
						</th>
%					}


				</tr>
				</thead>

				<tbody>

<%perl>
				foreach my $entry (@entries) {

					next if $entry->dropped
						&! $entry_values{$entry->id."_rank"}
						&! $entry_values{$entry->id."_points"};
</%perl>

					<tr>

%						if ($team_ranks) {
							<td class="centeralign">
								<% $entry_values{$entry->id."_rank"} %>
							</td>
%						}

%						if ($team_points) {
							<td class="centeralign">
								<% $entry_values{$entry->id."_points"}
									?  $entry_values{$entry->id."_points"}
									: "ZERO"
								%>
							</td>
%						}

						<td class="centeralign">
							<% $entry->code %>
						</td>

%						if ($ballot_school_code) {
							<td class="centeralign">
								<% $entry->school->code %>
							</td>
%					   	}
%						if ($ballot_school_name) {
							<td>
								<% $entry->school->name %>
							</td>
%					   }

%					   if ($ballot_entry_name) {
							<td>
								<% $entry->name %>
							</td>
%					   }

%					   if ($ballot_entry_first_name) {
							<td>
%								foreach my $student (@{$entry_students{$entry->id}}) {
									<% $student->first %>
%								}
							</td>
<%perl>

					   }


					   if ($category_settings{'ballot_entry_titles'}) {

					   		my $title;

							$title = $entry_ballot{$entry->id}->scores(
								tag => "title"
							)->first if $entry_ballot{$entry->id};

</%perl>
							<td>
								<% $title ? $title->content : "" %>
							</td>
%					   }

%						if ($type eq "speech") {
							<td class="centeralign">
								<% Lingua::EN::Numbers::Ordinate::ordinate($entry->speaks) %>
							</td>
%						}



					</tr>
%				}

				</tbody>
			</table>

<%perl>

		}

		if (($points || $ranks)
			&& $side_disagree < 1
		) {

			foreach my $entry (@entries) {
</%perl>

				<span class="pagehalf">

					<span class="bold centeralign full">
						<% $entry->code %> (<% $entry->name %>)
					</span>

%					my $switch;
%					foreach my $student (@{$entry_students{$entry->id}}) {

						<div class="row padmore">

							<span class="half rightalign">
								<%	$student->first." ".$student->last %>:
							</span>

%							if ($points) {
								<span class="quarter centeralign">
									<% $student_values{$student->id."_points"}
										?  $student_values{$student->id."_points"}
										: "ZERO"
									%>
								</span>
%							}

%							if ($ranks) {
								<span class="quarter centeralign">
									<% Lingua::EN::Numbers::Ordinate::ordinate(
										$student_values{$student->id."_rank"}
									) %>
								</span>
%							}

						</div>

%					}

				</span>
%			}
%		}

%		if ($side_disagree) {

			<h1 class="redtext semibold centeralign">WHOOOPSIE DAISY!</h1>

			<h6 class="redtext martopmore marbottommore semibold centeralign">
				Your ballot disagreed with another judge's on sides.
			</h6>

			<h6 class="redtext martopmore marbottommore semibold centeralign">
				You marked them the opposite way as another judge in this debate.
			</h6>

			<h6 class="orangetext martopmore marbottommore semibold centeralign">
				Please confirm: which team was actually <% $aff_string %>? </h4>
			<h6>

			<div class="centeralign martopmuchmore">

<%perl>

				my $color;
				foreach my $entry (@entries) {
					$color = "blue" if $color eq "green";
					$color = "green" unless $color;

</%perl>
					<span class="pagehalf">
						<a
							class = "confirm <% $color %>text buttonwhite invert full"
							href="i_am_aff.mhtml?entry_id=<% $entry->id %>&judge_id=<% $judge_id %>&panel_id=<% $panel_id %>"
						>
							<% $entry->code %> was <% uc($aff_string) %>
						</a>
					</span>
%				}
			</div>

%		}  else {

			<hr />

			<h6 class="centeralign martopmuchmore redtext semibold">
				Once you confirm your ballot, you cannot change it online.
			</h6>

			<p class="centeralign martopmuchmore redtext semibold bigger">
				You'll have to contact the tournament staff to make any further changes
			</p>

			<p class="centeralign bluetext bigger semibold marbottommore">
				You are able to write more comments/feedback until the end of
				the tournament; you just may not change scores.
			</p>

			<div class="full martopmuchmore">

				<span class="pagehalf centeralign">
					<a
						class="redtext buttonwhite invert full confirm"
						href="ballot.mhtml?panel_id=<% $panel_id %>&judge_id=<% $judge_id %>"
					>
						NO! <% $side_disagree
								? "FIX SIDES PLEASE"
								: "RE-ENTER BALLOT"
							%>
					</a>
				</span>

				<span class="pagehalf centeralign">
					<a
						class="greentext buttonwhite invert full confirm"
						href="ballot_confirm.mhtml?from=confirmation&panel_id=<% $panel_id %>&judge_id=<% $judge_id %>"
					>
						YES! CORRECT! CONFIRM IT
					</a>
				</span>

			</div>

%		}

	</div>

	<div class="menu">

		<div class="sidenote">

			<h4>RFD</h4>

			<% $ARGS{"rfd"} %>

		</div>

	</div>

