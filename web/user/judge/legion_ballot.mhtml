<%args>
	$person
	$person_settings
	$panel_id => undef
	$judge_id => undef
	$errs     => undef
	$index    => "vertical"
</%args>
<%init>

	unless ($panel_id && $judge_id) { 
		my $err = "I didn't get both a judge and a ballot record";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $panel = Tab::Panel->retrieve($panel_id);
	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($judge->person && $judge->person->id == $person->id) { 
		$m->comp("/funclib/abort.mas", 
			message => "Your account does not have access to vote for that judge"
		);
	}

	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);
	$m->abort unless $panel;

	my $round = $panel->round;
	my $event = $round->event;
	my $category = $event->category;
	my $tourn = $category->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

	my @ballots = Tab::Ballot->search( 
		judge => $judge->id,
		panel => $panel->id
	);

	my $min = $event->setting('min_points') if $event;  
	my $max = $event->setting('max_points') if $event;

	my @categories = ( 
		"content",
		"speaking",
		"penalties"
	);

	my %ballot_scores;

	foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

		if ($ballot->audit > 0) { 
			$m->comp("/funclib/abort.mas", 
				message => "This ballot has already been confirmed.  If you wish to make changes contact the tournament staff."
			);
		}

		my $subscores = $ballot->scores( tag => 'subpoints')->first;

		if ($subscores) { 
			$ballot_scores{$ballot->id} = JSON::decode_json($subscores->content);
		}

	}

</%init>

	<div class="blankfull">

	<div class="full nospace">

		<span class="half nospace">
			<h4 class="bluetext">
				Judge
				<% ($judge) ? $judge->first." ".$judge->last : ""  %>
			</h4>
		</span>

		<span class="quarter rightalign">
		</span>

		<span class="quarter rightalign">
			<a 	class="bluetext buttonwhite invert"
				href="/user/judge/panels.mhtml"
			>Return Home</a>

		</span>

	</div>

	<form action="legion_confirm.mhtml" method="post">

	<input 
		type  = "hidden"
		name  = "judge_id"
		value = "<% $judge->id %>"
	>

	<input 
		type  = "hidden"
		name  = "panel_id"
		value = "<% $panel->id %>"
	>

	<h5>A. Content</h5>

		<div class="row ltyellow semibold">

			<span 
				class = "twenty hover centeralign semibold bluetext padvert"
			></span>

			<span class="quarter nospace padvert">
				Criterion
			</span>

			<span class="fifth nospace padvert">
				Speech Type
			</span>
				
			<span class="half nospace centeralign">
%				foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {
					<span class="sixth nospace semibold bluetext">
						<% $ballot->speakerorder %>
					</span>
%				}
			</span>

		</div>

<%perl>

		my %content = %{ JSON::decode_json($event->setting("content_points") ) }
			if $event->setting("content_points");

		my $keycounter;

		foreach my $key (sort keys %content) { 

			my %limits; 
			$keycounter++;

			foreach my $type ("prepared", "assigned", "total") { 
				if ($content{$key}{$type}) { 
					if ($content{$key}{$type} < 0) { 
						$limits{$type."_min"} = $content{$key}{$type};
						$limits{$type."_max"} = 0;
					} else { 
						$limits{$type."_max"} = $content{$key}{$type};
						$limits{$type."_min"} = 0;
					}
				}
			}

</%perl>
			<div class="row">

				<span 
					class = "twenty hover centeralign semibold bluetext padvert"
				><% $key %></span>

				<span class="quarter">
					<% $content{$key}{"text"} %>
				</span>

				<span class="fifth nospace">

%					if ($content{$key}{"total"}) { 

						<div class="padless full">
							<span class="threefifths">
								Total 
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"total_min"} %> - <% $limits{"total_max"} %>
							</span>
						</div>

%					} else { 

						<div class="nospace padvert full borderbottom">
							<span class="threefifths">
								Prepared
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"prepared_min"} %> - <% $limits{"prepared_max"} %>
							</span>
						</div>

						<div class="full nospace padvert">
							<span class="threefifths">
								Assigned 
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"assigned_min"} %> - <% $limits{"assigned_max"} %>
							</span>
						</div>
%					} 

				</span>
				
				<span class="half nospace centeralign">

%					foreach my $type ("prepared", "assigned") { 

						<div class="nospace <% $type eq "prepared" ? 'borderbottom' : "" %>">

<%perl>
						foreach my $ballot (
							sort {$a->speakerorder <=> $b->speakerorder} 
							@ballots
						) {

							my $padding; 
							my $tab_index;

							foreach (length($keycounter) .. 3) { 
								$padding .= "0";
							}

							if ($index eq "vertical") {
								$tab_index =  int($ballot->speakerorder.$padding.$keycounter);
							}


</%perl>
							<span class="sixth marno padless">
							
								<input 
									type     = "number"
									<% $tab_index ? 'tabindex = "'.$tab_index.'"' : "" %>
									class    = "<% $ballot->id %> <% $type %> <% $key %> content smallish"
									name     = "content_<% $type %>_<% $key %>_<% $ballot->id %>"
									id       = "content_<% $type %>_<% $key %>_<% $ballot->id %>"
									ballot   = "<% $ballot %>"
									category = "content"
									key      = "<% $key %>"
									type     = "<% $type %>"
									min      = <% $limits{$type."_min"} %>
									max      = <% $limits{$type."_max"} %>
									onKeyUp  = "autoAdvance(this);"
									onBlur   = "addTotals();"
									value    = "<% $ballot_scores{$ballot->id}{"content"}{$key}{$type}{"score"} %>"
								>
							</span>
%						}

						</div>

%					}

				</span>

			</div>

%		}

	<h5>B. Speaking Skills</h5>

<%perl>

		my %speaking = %{ JSON::decode_json($event->setting("speaking_points") ) }
			if $event->setting("speaking_points");

		foreach my $key (sort keys %speaking) { 

			my %limits; 

			foreach my $type ("prepared", "assigned", "total") { 
				if ($speaking{$key}{$type}) { 
					if ($speaking{$key}{$type} < 0) { 
						$limits{$type."_min"} = $speaking{$key}{$type};
						$limits{$type."_max"} = 0;
					} else { 
						$limits{$type."_max"} = $speaking{$key}{$type};
						$limits{$type."_min"} = 0;
					}
				}
			}

</%perl>
			<div class="row">

				<span 
					class = "twenty hover centeralign semibold bluetext padvert"
				><% $key %></span>

				<span class="quarter">
					<% $speaking{$key}{"text"} %>
				</span>

				<span class="fifth nospace">

%					if ($speaking{$key}{"total"}) { 

						<div class="padless full">
							<span class="threefifths">
								Total 
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"total_min"} %> - <% $limits{"total_max"} %>
							</span>
						</div>

%					} else { 

						<div class="nospace padvert full borderbottom">
							<span class="threefifths">
								Prepared
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"prepared_min"} %> - <% $limits{"prepared_max"} %>
							</span>
						</div>

						<div class="full nospace padvert">
							<span class="threefifths">
								Assigned 
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"assigned_min"} %> - <% $limits{"assigned_max"} %>
							</span>
						</div>
%					} 

				</span>
				
				<span class="half nospace centeralign">

%					foreach my $type ("prepared", "assigned") { 

						<div class="nospace <% $type eq "prepared" ? 'borderbottom' : "" %>">

%						foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

<%perl>
							my $tab_index;
							my $padding;

							foreach (length($keycounter) .. 3) { 
								$padding .= "0";
							}

							if ($index eq "vertical") {
								$tab_index =  int($ballot->speakerorder.$padding.$keycounter);
							}

</%perl>
							<span class="sixth marno padless">
							
								<input 
									type     = "number"
									<% $tab_index ? 'tabindex = "'.$tab_index.'"' : "" %>
									class    = "<% $ballot->id %> <% $key %> speaking smallish"
									name     = "speaking_<% $type %>_<% $key %>_<% $ballot->id %>"
									id       = "speaking_<% $type %>_<% $key %>_<% $ballot->id %>"
									ballot   = "<% $ballot %>"
									category = "speaking"
									key      = "<% $key %>"
									type     = "<% $type %>"
									min      = <% $limits{$type."_min"} %>
									max      = <% $limits{$type."_max"} %>
									onChange = "addTotals();"
									onKeyUp  = "autoAdvance(this);"
									value    = "<% $ballot_scores{$ballot->id}{"speaking"}{$key}{$type}{"score"} %>"
								>
							</span>
%						}

						</div>

%					}

				</span>

			</div>

%		}

		<div class="row bordervert">

			<span 
				class = "twenty hover centeralign semibold bluetext padvert"
			></span>

			<span class="quarter nospace padvert rightalign">
				<h6 class="semibold bluetext">Subtotals</h6>
			</span>

			<span class="fifth nospace padvert">
			</span>
				
			<span class="half nospace centeralign">

%				foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

					<span 
						class  = "sixth nospace semibold bluetext centeralign bigger <% $ballot->id %> subtotal"
						name   = "subtotal_<% $ballot->id %>"
						id     = "subtotal_<% $ballot->id %>"
						ballot = "<% $ballot->id %>"
					>0</span>
%				}
			</span>

		</div>

		<h5>Penalties</h5>

<%perl>

		my %penalties = %{ JSON::decode_json($event->setting("penalties_points") ) }
			if $event->setting("penalties_points");

		foreach my $key (sort keys %penalties) { 

			my %limits; 

			foreach my $type ("prepared", "assigned", "total") { 
				if ($penalties{$key}{$type}) { 
					if ($penalties{$key}{$type} < 0) { 
						$limits{$type."_min"} = $penalties{$key}{$type};
						$limits{$type."_max"} = 0;
					} else { 
						$limits{$type."_max"} = $penalties{$key}{$type};
						$limits{$type."_min"} = 0;
					}
				}
			}

</%perl>
			<div class="row">

				<span 
					title = "<% $penalties{$key}{"text"} %>"
					class = "twenty hover centeralign semibold bluetext padvert"
				><% $key %></span>

				<span class = "quarter" >
					<% $penalties{$key}{"text"} %>
				</span>

				<span class="fifth nospace">

%					my @types;

%					if ($penalties{$key}{"total"}) { 

%						@types = ('total');

						<div class="padless full">
							<span class="threefifths">
								Total 
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"total_min"} %> - <% $limits{"total_max"} %>
							</span>
						</div>

%					} else { 

%						@types = ('prepared', 'assigned');

						<div class="nospace padvert full borderbottom">
							<span class="threefifths">
								Prepared
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"prepared_min"} %> - <% $limits{"prepared_max"} %>
							</span>
						</div>

						<div class="full nospace padvert">
							<span class="threefifths">
								Assigned 
							</span>
							<span class="twofifths smallish nowrap rightalign">
								<% $limits{"assigned_min"} %> - <% $limits{"assigned_max"} %>
							</span>
						</div>
%					} 

				</span>
				
				<span class="half nospace centeralign">

%					foreach my $type (@types) { 

						<div class="nospace <% $type eq "prepared" ? 'borderbottom' : "" %>">

%						foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

<%perl>
							my $tab_index;
							my $padding;

							foreach (length($keycounter) .. 3) { 
								$padding .= "0";
							}

							if ($index eq "vertical") {
								$tab_index =  int($ballot->speakerorder.$padding.$keycounter);
							}

</%perl>
							<span class="sixth marno padless">
							
								<input 
									type     = "number"
									<% $tab_index ? 'tabindex = "'.$tab_index.'"' : "" %>
									class    = "<% $ballot->id %> <% $key %> penalties smallish"
									name     = "penalties_<% $type %>_<% $key %>_<% $ballot->id %>"
									id       = "penalties_<% $type %>_<% $key %>_<% $ballot->id %>"
									ballot   = "<% $ballot %>"
									category = "penalties"
									key      = "<% $key %>"
									type     = "<% $type %>"
									min      = <% $limits{$type."_min"} %>
									max      = <% $limits{$type."_max"} %>
									onChange = "addTotals();"
									onKeyUp  = "autoAdvance(this);"
									value    = "<% $ballot_scores{$ballot->id}{"penalties"}{$key}{$type}{"score"} %>"
								>
							</span>
%						}

						</div>

%					}

				</span>

			</div>

%		}

		<div class="row bordervert">

			<span 
				class = "twenty hover centeralign padvert"
			></span>

			<span class="quarter nospace padvert rightalign">
				<h6 class="semibold bluetext">Final Total</h6>
			</span>

			<span class="fifth nospace padvert rightalign">
				<p class="explain semibold bluetext nospace">No ties allowed</p>
			</span>
				
			<span class="half nospace centeralign">

%				foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

					<span 
						class  = "sixth semibold bluetext centeralign bigger <% $ballot->id %> ranking padvert marno total"
						name   = "total_<% $ballot->id %>"
						id     = "total_<% $ballot->id %>"
						ballot = "<% $ballot->id %>"
					>0</span>
%				}
			</span>

		</div>

		<div class="row bordervert">

			<span 
				class = "twenty hover centeralign padvert"
			></span>

			<span class="quarter nospace padvert rightalign">
				<h6 class="semibold bluetext">RANKING</h6>
			</span>

			<span class="fifth nospace padvert">
			</span>
				
			<span class="half nospace centeralign">

%				foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

					<span 
						class  = "sixth semibold bluetext centeralign bigger <% $ballot->id %> ranking padvert marno"
						name   = "ranking_<% $ballot->id %>"
						id     = "ranking_<% $ballot->id %>"
						ballot = "<% $ballot->id %>"
					><% $ballot->speakerorder %></span>
%				}
			</span>

		</div>

		<div 
			id    = "save_row"
			class = "liblrow marvertno rightalign"
		>

			<span 
				id="tie_warning"
				class="twothirds nospace redtext semibold hidden bigger">
				Ballot cannot be saved until score ties are resolved
			</span>

			<span class="third centeralign padvert">
				<input 
					id   = "ballot_saver"
					type = "submit"
					value = "Save Ballot"
				>
			</span>
		</div>

		</form>

		<div class='centeralign martopmore full'>
			<a 	class="greentext buttonwhite invert smallish"
				href="/user/judge/legion_ballot.mhtml?judge_id=<% $judge->id %>&panel_id=<% $panel->id %>&index=<% $index eq "vertical" ? "horizontal" : "vertical" %>"
			>Switch to <% $index eq "vertical" ? "Horizontal" : "Vertical" %> Entry</a>
		</div>

	</div>

	</div>

	<script>

		$(document).ready(function() {
			addTotals();
		});

		function autoAdvance(inputBox) { 

			var score = $(inputBox).val();

			if (score == '-') { 
				return;
			}

			var max = parseInt($(inputBox).attr("max"));
			score = parseInt(score);

			if (max > 9 && score === 1) { 
				return;
			}

			if (!score && max != 0) { 
				return;
			}

			nextTabIndex(inputBox);
		}

		function addTotals() { 

			var scoreTotals = {};
			var scoreSubTotals = {};

			$(".content").each(function() { 

				var ballot =  $(this).attr("ballot");

				if (!scoreTotals[ballot]) { 
					scoreTotals[ballot] = 0;
				}
				if (!scoreSubTotals[ballot]) { 
					scoreSubTotals[ballot] = 0;
				}

				var score = getScore(this.id);
				scoreTotals[ballot] += score;
				scoreSubTotals[ballot] += score;
			});

			$(".speaking").each(function() { 
				var ballot =  $(this).attr("ballot");
				var score = getScore(this.id);
				scoreTotals[ballot] += score;
				scoreSubTotals[ballot] += score;
			});

			$(".penalties").each(function() { 
				var ballot =  $(this).attr("ballot");
				var score = getScore(this.id);
				scoreTotals[ballot] += score;
			});

			Object.keys(scoreTotals).forEach(function(key, index) { 
				$("#subtotal_"+key).text(scoreSubTotals[key]);
				$("#total_"+key).text(scoreTotals[key]);
			});

			autoRank();

		}

		function getScore(ballotId) { 

			var score = parseInt($("#"+ballotId).val());

			if (!score) { 
				return 0;
			}

			var min = parseInt($("#"+ballotId).attr("min"));
			var max = parseInt($("#"+ballotId).attr("max"));

			if (min < 0) { 

				if (score > 0) { 
					score = score * -1; 
					$("#"+ballotId).val(score);
				}

				if (score < min) { 
					alertify.error("Score "+score+" is below the minimum "+min);
					score = 0;

					setTimeout(function() { $("#"+ballotId).focus() }, 100);

					$("#"+ballotId).val("");
				}
			}

			if (score < min) { 
				alertify.error("Score "+score+" is below the minimum "+min);
				score = 0;
				$("#"+ballotId).val("");
				setTimeout(function() { $("#"+ballotId).focus() }, 100);
			} 

			if (score > max) { 
				alertify.error("Score "+score+" is above the maximum "+max);
				score = 0;
				$("#"+ballotId).val("");
				setTimeout(function() { $("#"+ballotId).focus() }, 100);
			} 

			return score;
		}

		function autoRank() { 

			var totalScores = [];
			var tieChecker = [];

			$(".total").each(function() { 

				var ballot =  $(this).attr("ballot");
				var totalScore = parseInt($("#total_"+ballot).text());

				if (!totalScore) { 
					totalScore = 0;
				}

				totalScores[ballot] = totalScore;

				if (totalScore) { 
					if (!tieChecker[totalScore]) { 
						tieChecker[totalScore] = 0;
					} 
					tieChecker[totalScore]++;
				}
			});

			var keysSorted = Object.keys(totalScores)
				.sort(function(a,b){
					return totalScores[b]-totalScores[a];
				})

			var rank = 0;

			keysSorted.forEach(function(key) { 
				rank++;
				$("#ranking_"+key).text(rank);
			});

			var tiesNotOK = 0;
			$(".ranking").removeClass('borderredmed');
			$("#ballot_saver").removeProp("disabled");

			Object.keys(tieChecker).forEach(function(key) { 
				
				if (tieChecker[key] > 1) { 
					$("#tie_warning").removeClass('hidden');
					$("#save_row").addClass('lirdrow');
					$("#save_row").removeClass('liblrow');
					$("#ballot_saver").prop("disabled", "true");
					tiesNotOK++;

					keysSorted.forEach(function(ballot) { 
						if (totalScores[ballot] == key) { 
							$("#ranking_"+ballot).addClass('borderredmed');
						}
					});

				}

				if (!tiesNotOK) { 
					$("#tie_warning").addClass('hidden');
					$("#save_row").removeClass('lirdrow');
					$("#save_row").addClass('liblrow');
					$("#ballot_saver").removeProp("disabled");
				}

			});
		}

		function nextTabIndex(element) { 

			// if we haven't stored the tabbing order
			if (!element.form.tabOrder) {

				var els = element.form.elements,
					ti = [],
					rest = [];

				// store all focusable form elements with tabIndex > 0
				for (var i = 0, il = els.length; i < il; i++) {
					if (els[i].tabIndex > 0 &&
						!els[i].disabled && 
						!els[i].hidden && 
						!els[i].readOnly &&
						els[i].type !== 'hidden') {
						ti.push(els[i]);
					}
				}

				// sort them by tabIndex order
				ti.sort(function(a,b){ return a.tabIndex - b.tabIndex; });

				// store the rest of the elements in order
				for (i = 0, il = els.length; i < il; i++) {
					if (els[i].tabIndex == 0 &&
						!els[i].disabled && 
						!els[i].hidden && 
						!els[i].readOnly &&
						els[i].type !== 'hidden') {
						rest.push(els[i]);
					}
				}

				// store the full tabbing order
				element.form.tabOrder = ti.concat(rest);
			}

			// find the next element in the tabbing order and focus it
			// if the last element of the form then blur
			// (element can be changed to focus the next <form> if any)
			for (var j = 0, jl = element.form.tabOrder.length; j < jl; j++) {
				if (element === element.form.tabOrder[j]) {
					if (j+1 < jl) {
						$(element.form.tabOrder[j+1]).focus();
					} else {
						$(element).blur();
					}
				}
			}

			return;

		};

	</script>


