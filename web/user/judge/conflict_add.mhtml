<%args>
	$person
	$target_id     => undef
	$related_thing   => undef
	$setting_name  => undef
	$property_name => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No target to constrain sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($property_name);

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$property_name.'"}');
		$m->abort();
	}

	unless ($judge->person > 0 && $judge->person == $person) {
		$m->print('{ "error": true, "message": "You are not linked to that judge"}');
		$m->abort();
	}

	my $message;
	my $now = DateTime->now();
	my $tourn;
	my $new_row;

	my $tz = $person->tz;
	$tz = "UTC" unless $tz;

	if ($setting_name eq "entry") {

		my $entry = Tab::Entry->retrieve($related_thing);
		$tourn = $judge->category->tourn;

		unless ($entry) {
			$m->print('{ "error": true, "message": "No such entry found"}');
			$m->abort();
		}

		if ($entry->event->tourn->id != $tourn->id) {
			$m->print('{ "error": true, "message": "That judge and entry are not in the same tournament"}');
			$m->abort();
		}

		my $conflict = Tab::Strike->create({
			judge      => $judge->id,
			tourn      => $tourn->id,
			entry      => $entry->id,
			type       => "entry",
			created_at => $now,
			entered_by => $person->id,
			conflictee => 1,
			registrant => 1,
			conflict   => 1
		});

		$message = $judge->last." marked as constrained against ".$entry->name;

		my $time = $m->comp("/funclib/showdt.mas",
			return => 1,
			dt     => $now,
			tz     => $tz,
			length => "shorter"
		);

		$new_row = '<tr id=\"'.$conflict->id.'\"><td>Entry</td>';
		$new_row .= '<td>'.$entry->name.'</td>';
		$new_row .= '<td>'.$entry->event->abbr.'</td>';
		$new_row .= '<td>'.$time.'</td>';
		$new_row .= '<td>'.$person->first.' '.$person->last.'</td>';
		$new_row .= '<td class=\"redtext centeralign\">';
		$new_row .= ' <a class       = \"buttonwhite redtext fa fa-sm fa-trash bigger marno padless redborder\"';
		$new_row .= ' value = \"1\" ';
		$new_row .= ' id = \"delete_'.$conflict->id.'\" ';
		$new_row .= ' target_id=\"'.$conflict->id.'\" ';
		$new_row .= ' on_success=\"destroy\" ';
		$new_row .= ' onClick=\"postSwitch(this, \'judge_conflict_rm.mhtml\');\" ';
		$new_row .= ' ></a>';
		$new_row .= "</td></tr>";

	} elsif ($setting_name eq "school") {

		my $school = Tab::School->retrieve($related_thing);
		$tourn = $judge->category->tourn;

		unless ($school) {
			$m->print('{ "error": true, "message": "No such school found"}');
			$m->abort();
		}

		if ($school->tourn->id != $tourn->id) {
			$m->print('{ "error": true, "message": "That judge and school are not in the same tournament"}');
			$m->abort();
		}

		Tab::Strike->create({
			judge      => $judge->id,
			tourn      => $tourn->id,
			school     => $school->id,
			type       => "school",
			created_at => $now,
			entered_by => $person->id,
			conflictee => 1,
			registrant => 1,
			conflict   => 1
		});

		$message = $judge->last." marked as constrained against ".$school->name;

	}

	$m->comp("/funclib/log.mas",
        type        => 'conflicts',
        tourn       => $tourn->id,
        person      => $person->id,
		judge       => $judge->id,
        description => $message
    );

	$m->print('{
		"error"   : false,
		"message" : "'.$message.'",
		"reply"   : "'.$new_row.'"
	}');

	$m->flush_buffer();
	$m->abort();

</%init>
