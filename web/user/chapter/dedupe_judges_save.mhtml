<%args>
	$person
	$chapter_id
</%args>
<%init>

	my $chapter = Tab::Chapter->retrieve($chapter_id);

	$m->print($person->email." is my email");

	my %chapter_judges_by_name = ();

	foreach my $chapter_judge ($chapter->chapter_judges) { 
		next unless $chapter_judge->last;
		push @{$chapter_judges_by_name{$chapter_judge->first."-".$chapter_judge->last}}, $chapter_judge;
	}

	Tab::Judge->set_sql( steal => "
		update judge
		set chapter_judge = ?
		where chapter_judge = ?
	");

	Tab::Conflict->set_sql( steal_source => "
		update conflict
		set person = ?
		where person = ?
	");

	Tab::Conflict->set_sql( steal_target => "
		update conflict
		set conflicted = ?
		where conflicted = ?
	");

	my $count;

	foreach my $key (keys %chapter_judges_by_name) { 

		next if scalar @{$chapter_judges_by_name{$key}} < 2;
		next unless $ARGS{$key};

		my $dest = shift @{$chapter_judges_by_name{$key}};

		my $dest_person_id = $dest->person->id if $dest->person;

		my $retired = $dest->retired;

		foreach my $chapter_judge (@{$chapter_judges_by_name{$key}}) { 

			Tab::log($person->email." transferring ".$chapter_judge->id." records to ".$dest->id);

			$retired = 0 unless $chapter_judge->retired;

			my $old_person_id = $chapter_judge->person->id if $chapter_judge->person;

			Tab::Judge->sql_steal->execute($dest->id, $chapter_judge->id);

			if ($dest_person_id && $old_person_id) { 
				eval {
					Tab::Conflict->sql_steal_source->execute($dest_person_id, $old_person_id);
					Tab::Conflict->sql_steal_target->execute($dest_person_id, $old_person_id);
				};
			}

			$chapter_judge->delete;
			$count++;
		}

		$dest->person($dest_person_id);
		$dest->update;

	}

	my $msg = "$count judges de-duplicated.";

	$m->redirect("dedupe_judges.mhtml?chapter_id=$chapter_id&msg=$msg");


</%init>
