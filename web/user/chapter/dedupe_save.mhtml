<%args>
	$person
	$chapter_id
	$doit => undef
</%args>
<%init>

	my $chapter = Tab::Chapter->retrieve($chapter_id);

	my %students_by_name = ();

	foreach my $student ($chapter->students) {

		my $namestring = lc($student->first." ".$student->last);

		if ($student->middle) {
			$namestring = lc($student->first." ".$student->middle." ".$student->last);
		}

		unless ($namestring) {
			$student->delete();
		} else {
			push @{$students_by_name{$namestring}}, $student;
		}
	}


	my $count;
	my $errs;

	foreach my $key (keys %students_by_name) {

		next if scalar @{$students_by_name{$key}} < 2;
		next unless $ARGS{$key} || $doit;

		@{$students_by_name{$key}} =
			sort {
				$b->nsda <=> $a->nsda
				|| $b->grad_year <=> $a->nsda
		} @{$students_by_name{$key}};

		my @names = (sort {$a <=> $b} @{$students_by_name{$key}});
		my $dest = shift @names;

		my $person;
		my $nsda;

		foreach my $student (@{$students_by_name{$key}}) {
			unless ($person) {
				$person = $student->person;
			}

			unless ($nsda) {
				$nsda = $student->nsda;
			}
		}

		foreach my $student (@{$students_by_name{$key}}) {

			my $err = $m->comp("/funclib/student_merge.mas",
				person => $person,
				target => $dest,
				victim => $student
			);

			if ($err) {
				$errs .= $err;
			} else {
				$count++;
			}
		}
	}

	if ($doit) {

		$m->print("Done");

	} else {
		my $msg = "$count students de-duplicated.";
		$m->redirect("students.mhtml?chapter_id=$chapter_id&msg=$msg&err=$errs");
	}

</%init>
