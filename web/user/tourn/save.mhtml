<%args>
	$person
	$name
	$webname
	$start
	$end
	$reg_start
	$reg_end
	$frozen
	$judge
	$drops
	$fines
	$circuit_string
	$site_id   => undef
	$site_name => undef
	$state     => undef
	$city      => undef
	$country   => undef
	$tz        => undef
	$test      => 0
</%args>
<%init>

	$tz = "UTC" unless $tz;

	unless ($site_name || $site_id) { 
		my $return = "You must select an existing site, or give your site a name";
		$m->redirect("location.mhtml?name=$name&start=$start&end=$end&reg_start=$reg_start&reg_end=$reg_end&drops=$drops&judge=$judge&frozen=$frozen&fines=$fines&circuit_string=$circuit_string&city=$city&state=$state&tz=$tz&country=$country&error=$return");
	}

	my @circuits;

	foreach my $circuit_id (split(/-/, $circuit_string)) { 
		 push(@circuits, Tab::Circuit->retrieve($circuit_id));
	}

	my $default_circuit = $circuits[0];
	$default_circuit = Tab::Circuit->retrieve("6") unless $default_circuit;
	my $default_circuit_id = $default_circuit->id if $default_circuit;

	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
	my $enddt = DateTime::Format::MySQL->parse_datetime($end) if $end;
	my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
	my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
	my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
	my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
	my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
	my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);

	$startdt->set_time_zone($tz);
	$enddt->set_time_zone($tz);
	$reg_startdt->set_time_zone($tz);
	$reg_enddt->set_time_zone($tz);
	$frozendt->set_time_zone($tz);
	$finesdt->set_time_zone($tz);
	$judgedt->set_time_zone($tz);
	$dropsdt->set_time_zone($tz);

	my $site = Tab::Site->retrieve($site_id) if $site_id;

	unless ($site) { 

		$site = Tab::Site->create({
			circuit => $default_circuit_id,
			host    => $person->id,
			name    => $site_name
		});

		$site_id = $site->id;

	}

	my $tourn = Tab::Tourn->create( { 
		name      => $name,
		webname   => $webname,
		city      => $city,
		start     => $startdt,
		end       => $enddt,
		reg_start => $reg_startdt,
		reg_end   => $reg_enddt,
		hidden    => $test,
		city      => $city,
		state     => $state,
		country   => $country,
		tz        => $tz
	});

	$tourn->setting("freeze_deadline", "date", $frozendt);
	$tourn->setting("fine_deadline", "date", $finesdt);
	$tourn->setting("judge_deadline", "date", $judgedt);
	$tourn->setting("drops_deadline", "date", $dropsdt);
	$tourn->setting("created_by", $person->id);


	my $join = Tab::TournSite->create ({
		tourn => $tourn->id,
		site  => $site_id
	});

	Tab::Permission->create ({ 
		tourn  => $tourn->id,
		person => $person->id,
		tag    => 'contact'
	});

	Tab::Permission->create ({ 
		tourn  => $tourn->id,
		person => $person->id,
		tag    => 'owner'
	});

	foreach my $circuit (@circuits) { 

		my $approved = 0;

		$approved = 1 if Tab::Permission->search( 
			tag     => "circuit",
			person  => $person->id,
			circuit => $circuit->id
		);

		my $join = Tab::TournCircuit->create ({
			tourn    => $tourn->id,
			circuit  => $circuit->id,
			approved => $approved
		});
	}

	$tourn->setting("school_codes", "shortname");

	#Create default tiebreaker sets

	my $tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name  => "Debate Prelims"
	});

	Tab::Tiebreak->create({
		name          => "winloss",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 2,
		multiplier    => 1,
		priority      => 3
	}); 

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	}); 

	Tab::Tiebreak->create({
		name          => "opp_seed",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	}); 

	Tab::Tiebreak->create({
		name          => "coinflip",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	}); 

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Debate Elims"
	});

	Tab::Tiebreak->create({
		name          => "winloss",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	}); 

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Debate Speakers"
	});

	$tiebreak_set->setting("forfeits_never_break", "1");

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 2,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	}); 

	Tab::Tiebreak->create({
		name          => "opp_wins",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	}); 

	Tab::Tiebreak->create({
		name          => "judgevar2",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	}); 

	Tab::Tiebreak->create({
		name          => "coinflip",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	}); 

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Speech Prelims"
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	}); 

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("truncate_to_smallest", 1);

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Speech Elims: Cumulative"
	});

	$tiebreak_set->setting("forfeits_never_break", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 4,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 4,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	}); 

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Speech Elims: Sudden Death"
	});

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	}); 

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Congress Prelims"
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3
	}); 

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 5
	}); 

	Tab::Tiebreak->create({
		name          => "chair_ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	}); 

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Congress Elims"
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2
	}); 

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3
	}); 

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	}); 

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 5
	}); 

	Tab::Tiebreak->create({
		name          => "chair_ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	}); 

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	$m->comp(
		"/funclib/update_calendar.mas", 
		tourn => $tourn
	) unless $tourn->hidden;

	$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);

</%init>

