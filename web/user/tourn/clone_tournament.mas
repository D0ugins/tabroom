<%args>
	$person
	$clone
	$start
	$end
	$name
	$webname
	$city
</%args>
<%doc>

	This script will take a tournament and clone it into another one; so if you
	set up your previous year's tournament you can pull everything (settings,
	events, etc) without pulling in judges, schools or entries.

	The dates for deadlines, tourn_settings, etc will be translated to the new
	tournament's; so if your registration deadline for last year was 3 days
	before, then this year it will be the same, etc.

</%doc>
<%perl>

	return unless $clone;

	my $old_tourn = Tab::Tourn->retrieve($clone);
	my $ostart = $old_tourn->start;

	my %translator;

	$name =~ tr/a-zA-Z0-9 //cd;

	# Convert the dates for registration opening & closing to be the same time
	# from the old tournament.

	# $diff is the change between the old start & the new start.  translates
	# all dates.

	my $diff = $start->delta_days($ostart);

	my $reg_start = $old_tourn->reg_start->clone;
	$reg_start->add_duration($diff);

	my $reg_end = $old_tourn->end->clone;
	$reg_end->add_duration($diff);

	my @already = Tab::Tourn->search(
		name  => $name,
		start => $start,
		end   => $end
	);

	push @already, Tab::Tourn->retrieve($ARGS{"id"}) if $ARGS{"id"};

	if (@already) {
		$m->print("<p>That tournament already exists.  Click your email address above and you'll see it on the right</p>");
		$m->abort;
	} else {

		my $tourn = Tab::Tourn->create({
			id        => $ARGS{"id"},
			name      => $name,
			start     => $start,
			end       => $end,
			reg_start => $reg_start,
			reg_end   => $reg_end,
			webname   => $webname,
			city      => $city,
			country   => $old_tourn->country,
			state     => $old_tourn->state,
			tz        => $old_tourn->tz,
			hidden    => 0
		});

		$tourn->setting('created_by', $person->id);

		my $owner = Tab::Permission->create({
			tourn  => $tourn->id,
			person => $person->id,
			tag    => "owner"
		});

		my $contact = Tab::Permission->create({
			tourn  => $tourn->id,
			person => $person->id,
			tag    => "contact"
		});

		#Settings
		foreach my $setting ($old_tourn->settings) {

			next if $setting->tag eq "invite";
			next if $setting->tag eq "bills";
			next if $setting->tag eq "logo";
			next if $setting->tag eq "autoquals";
			next if $setting->tag eq "district_authorships";
			next if $setting->tag eq "created_by";
			next if $setting->tag eq "naudl_processed";
			next if $setting->tag eq "nsda_points_posted";

			my $nsetting = $setting->copy({
				tourn => $tourn->id
			});

			if ($nsetting->value eq "date") {
				my $new_date = $nsetting->value_date->clone;
				$new_date->add_duration($diff);
				$nsetting->value_date($new_date);
				$nsetting->update;
			}

		}

		#Circuits
		foreach my $circuit ($old_tourn->tourn_circuits) {
			my $ncircuit = $circuit->copy({
				tourn    => $tourn->id,
				approved => 0
			});
		}

		#Regions specific to the tournament
		foreach my $region ($old_tourn->regions) {
			my $nregion = $region->copy({
				tourn    => $tourn->id
			});
		}

		#Housing slots
		foreach my $housing ($old_tourn->housing_slots) {

			my $nhousing = $housing->copy({
				tourn => $tourn->id
			});

			my $new_night = $housing->night;
			$new_night->add_duration($diff);
			$nhousing->night($new_night);
			$nhousing->update;
		}

		#Limits on Double Entry
		foreach my $ed ($old_tourn->patterns) {
			my $ned = $ed->copy ({
				tourn => $tourn->id
			});
			$translator{"pattern"}{$ed->id} = $ned->id;
		}

		#Tournament Sites

		foreach my $tournsite ($old_tourn->tourn_sites) {
			eval {
				my $ntournsite = $tournsite->copy ({
					tourn => $tourn->id
				});
			}
		}

		#Webpages

		if ($tourn->webname eq $old_tourn->webname) {
			foreach my $webpage ($tourn->webpages) {
				my $nwebpage = $webpage->copy ({
					tourn => $tourn->id
				});
			}
		}

		#Concessions
		foreach my $concession ($old_tourn->concessions) {

			my $nconcession = $concession->copy ({
				tourn => $tourn->id
			});

			my $new_deadline = $concession->deadline;
			$new_deadline->add_duration($diff) if $new_deadline;
			$nconcession->deadline($new_deadline) if $new_deadline;

			$nconcession->update;
		}


		#Tournament Standing Fees
		foreach my $tourn_fee ($old_tourn->tourn_fees) {

			my $ntourn_fee = $tourn_fee->copy ({
				tourn => $tourn->id
			});

			my $new_start = $ntourn_fee->start;
			$new_start->add_duration($diff) if $new_start;
			$ntourn_fee->start($new_start) if $new_start;

			my $new_end = $ntourn_fee->end;
			$new_end->add_duration($diff) if $new_end;
			$ntourn_fee->end($new_end) if $new_end;

			$ntourn_fee->update;
		}

		#Followers of this tournament, if it's actually the same tournament.
		if ($webname eq $old_tourn->webname) {
			foreach my $follower (
				Tab::Follower->search(
					tourn => $old_tourn->id, type => "tourn" )
			) {
				my $nfollow = $follower->copy ({
					tourn => $tourn->id
				});
			}
		}

		#Timeslots
		foreach my $ts ($old_tourn->timeslots) {

			my $nts = $ts->copy({
				tourn => $tourn->id
			});

			my $ntstart = $nts->start;
			$ntstart->add_duration($diff);
			$nts->start($ntstart);

			my $ntend = $nts->end;
			$ntend->add_duration($diff);
			$nts->end($ntend);

			$nts->update;

			$translator{"timeslot"}{$ts->id} = $nts;
		}

		#Judge Categories
		foreach my $jg ($old_tourn->categories) {

			my $njg = $jg->copy({
				tourn => $tourn->id
			});

			$translator{"category"}{$jg->id} = $njg->id;

			#Settings
			foreach my $setting ($jg->settings) {

				my $nsetting = $setting->copy({
					category => $njg->id
				});

				if ($nsetting->value eq "date") {
					if ($nsetting->value_date) {
						my $new_date = $nsetting->value_date->clone;
						$new_date->add_duration($diff);
						$nsetting->value_date($new_date);
					}
				}

				$nsetting->update();
			}

			foreach my $rs ($jg->rating_subsets) {

				my $nrs = $rs->copy({
					category => $njg->id
				});

				$translator{"rating_subset"}{$rs->id} = $nrs->id;

				#Rating/Preference Tiers
				foreach my $rating_tier ($rs->rating_tiers) {
					my $nrating_tier = $rating_tier->copy({
						rating_subset => $nrs->id
					});
				}

			}

			foreach my $rt ($jg->rating_tiers) {
				my $nrt = $rt->copy({
					category => $njg->id
				});
			}

			foreach my $shift ($jg->shifts) {

				my $nshift = $shift->copy({
					category => $njg->id
				});

				my $new_start = $shift->start;
				$new_start->add_duration($diff);
				$nshift->start($new_start);

				my $new_end = $shift->end;
				$new_end->add_duration($diff);
				$nshift->end($new_end);
				$nshift->update();
			}
		}

		#Tiebreakers and sets
		foreach my $tiebreak_set ($old_tourn->tiebreak_sets) {

			my $ntiebreak_set = $tiebreak_set->copy({
				tourn => $tourn->id
			});

			foreach my $tb_setting ($tiebreak_set->settings) {
				$tb_setting->copy({
					tiebreak_set => $ntiebreak_set->id
				});
			}

			foreach my $tb ($tiebreak_set->tiebreaks) {
				my $ntb = $tb->copy({
					tiebreak_set => $ntiebreak_set->id
				});
			}

			$translator{"tiebreak_set"}{$tiebreak_set->id} = $ntiebreak_set->id;
		}

		#Events

		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) {

			my $nevent = $event->copy({
				tourn    => $tourn->id,
				category => $translator{"category"}{$event->category->id}
			});

			$nevent->pattern($translator{"pattern"}{$event->pattern->id})
				if $event->pattern;

			$nevent->rating_subset($translator{"rating_subset"}{$event->rating_subset->id})
				if $event->rating_subset;

			$nevent->update;

			$translator{"event"}{$event->id} = $nevent->id;

			foreach my $setting ($event->settings) {

				next if $setting->tag eq "round_notified";
				next if $setting->tag eq "first_round_notified";
				next if $setting->tag eq "congress_placard_logo";
				next if $setting->tag eq "nsda_points_posted";
				next if $setting->tag eq "nsda_point_codefail";

				my $nsetting = $setting->copy({
					event => $nevent->id
				});

				if (
					$setting->tag eq "speaker_tbset"
					|| $setting->tag eq "po_tbset"
					|| $setting->tag eq "leadership_tbset"
				) {
					$nsetting->value($translator{"tiebreak_set"}{$setting->value});
					$nsetting->update();
				}

				if ($nsetting->value eq "date") {
					my $new_date = $nsetting->value_date->clone;
					$new_date->add_duration($diff);
					$nsetting->value_date($new_date);
					$nsetting->update();
				}
			}

	        if ($event->type eq "congress") {
				foreach my $type ("bill", "resolution", "amendment") {

					my $filename = $event->setting($type."_template");

					if ($filename) {
						system $Tab::s3_cmd."
							cp
							$Tab::s3_bucket/tourns/".$old_tourn->id."/".$event->id."/".$type."_template/$filename
							$Tab::s3_bucket/tourns/".$tourn->id."/".$nevent->id."/".$type."_template/$filename
						";
					}
				}
			}

			foreach my $round ($event->rounds) {

				next unless $round->timeslot > 0;

				my $nround = $round->copy({
					event => $nevent->id,
				});

				$nround->timeslot($translator{"timeslot"}{$round->timeslot->id});
				$nround->start_time($translator{"timeslot"}{$round->timeslot->id}->start)
					if $translator{"timeslot"}{$round->timeslot->id};

				$nround->tiebreak_set($translator{"tiebreak_set"}{$round->tiebreak_set->id})
					if $round->tiebreak_set;

				$nround->update();
				$translator{"round"}{$round->id} = $nround;

			}

			foreach my $round ($event->rounds) {

				my $nround = $translator{"round"}{$round->id};

				if ($nround->runoff) {
					$nround->runoff($translator{"round"}{$nround->runoff->id});
					$nround->update();
				}

				foreach my $setting ($round->settings) {

					next if $setting->tag eq "entry_list_published";
					next if $setting->tag eq "motion";
					next if $setting->tag eq "cat_id";

					my $nsetting = $setting->copy({
						round => $nround->id
					});

					if (
						$setting->tag eq "seed_round"
						|| $setting->tag eq "sidelock_against"
						|| $setting->tag eq "roomlock_against"
						|| $setting->tag eq "showrooms_from"
						|| $setting->tag eq "parli_share"
					) {
						$nsetting->value($translator{"rounds"}{$setting->value});
						$nsetting->update();
					}

					if ($nsetting->value eq "date" && $nsetting->value_date) {
						my $new_date = $nsetting->value_date->clone;
						$new_date->add_duration($diff);
						$nsetting->value_date($new_date);
						$nsetting->update();
					}
				}
			}

			if ($nevent->setting("bid_round")) {
				my $new_bid = $translator{"round"}{$nevent->setting("bid_round")};
				$nevent->setting("bid_round",  $new_bid);
			}

		} # End of events

		foreach my $category ($old_tourn->categories) {

			foreach my $jpool ($category->jpools) {

				my $njpool = $jpool->copy({
					category => $translator{"category"}{$category->id}
				});

				$translator{"jpool"}{$jpool->id} = $njpool;

				if ($njpool && $njpool->id) {

					foreach my $round ($jpool->rounds) {
						next unless $translator{"round"}{$round->id};

						Tab::JPoolRound->create({
							round => $translator{"round"}{$round->id},
							jpool => $njpool->id
						});
					}
				}

				foreach my $setting ($jpool->settings) {
					my $nsetting = $setting->copy({
						jpool => $njpool->id
					});
				}
			}

			foreach my $jpool ($category->jpools) {

				my $njpool = $translator{jpool}{$jpool->id};

				if ($njpool->parent > 0) {
					$njpool->parent($translator{jpool}{$njpool->parent});
					$njpool->update();
				}
			}
		}

		foreach my $rpool ($old_tourn->rpools) {

			my $nrpool = $rpool->copy({ tourn => $tourn->id });

			foreach my $round ($rpool->rounds) {

				next unless $translator{"round"}{$round->id};

				Tab::RPoolRound->create({
					round => $translator{"round"}{$round->id},
					rpool => $nrpool->id
				});
			}
		}

    Tab::Round->set_sql(clear_publish => "
        delete round_setting.*
        from round_setting, round, event
        where event.tourn = ?
        and round.event = event.id
        and round.id = round_setting.round
        and round_setting.tag in (
            'publish_entry_list',
            'motion',
            'motion_published',
            'completed',
			'coach_wins',
			'coach_points',
			'coach_feedback',
            'blasted');
    ");

    Tab::Round->set_sql(clear_publish_fields => "
        update round, event
            set round.published = 0,
            round.created = NULL,
			round.post_results = 0
        where round.event = event.id
        and event.tourn = ?
    ");

    Tab::Round->sql_clear_publish->execute($tourn->id);
    Tab::Round->sql_clear_publish_fields->execute($tourn->id);

		foreach my $room_strike ($old_tourn->room_strikes) {

			next if $room_strike->type eq "entry";
			next if $room_strike->type eq "judge";

			my $nroom_strike = $room_strike->copy({
				tourn => $tourn->id
			});

			$nroom_strike->event($translator{"event"}{$room_strike->event->id}) if $room_strike->event;

			if ($nroom_strike->start) {
				my $new_start = $nroom_strike->start;
				$new_start->add_duration($diff);
				$nroom_strike->start($new_start);
			}

			if ($nroom_strike->end) {
				my $new_end = $nroom_strike->end;
				$new_end->add_duration($diff);
				$nroom_strike->end($new_end);
			}

			$nroom_strike->update;

		}

		#Sweepstakes
		foreach my $sweep_set ($old_tourn->sweep_sets) {

			my $nsweep_set = $sweep_set->copy({
				tourn => $tourn->id
			});

			$translator{"sweep_set"}{$sweep_set->id} = $nsweep_set->id;

			foreach my $sweep_event (Tab::SweepEvent->search( sweep_set => $sweep_set->id)) {

				my $nsweep_event = $sweep_event->copy({
					event     => $translator{"event"}{$sweep_event->event},
					sweep_set => $nsweep_set->id
				});
			}

			foreach my $sweep_rule (Tab::SweepRule->search( sweep_set => $sweep_set->id)) {

				if ($sweep_rule->tag eq "ignore_round") {

					my $nsweep_rule = $sweep_rule->copy({
						sweep_set => $nsweep_set->id,
						value     => $translator{"round"}{$sweep_rule->value}
					});

				} else {

					my $nsweep_rule = $sweep_rule->copy({
						sweep_set => $nsweep_set->id
					});
				}
			}
		}

		foreach my $sweep_set ($old_tourn->sweep_sets) {

			my @links = Tab::SweepInclude->search( parent => $sweep_set );

			foreach my $link (@links) {

				my $nlink = $link->copy({
					parent => $translator{"sweep_set"}{$link->parent->id},
					child  => $translator{"sweep_set"}{$link->child->id},
				});

			}

		}

		$m->comp("/funclib/update_calendar.mas", tourn => $tourn) unless $tourn->hidden;
		$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);
	}

</%perl>
