<%args>
	$tourn_id
</%args>
<%init>

	my $tourn = Tab::Tourn->retrieve($tourn_id);

	#Create default tiebreaker sets

	my $tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name  => "Debate Prelims"
	});

	Tab::Tiebreak->create({
		name          => "winloss",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 2,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "opp_seed",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "coinflip",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	});

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Debate Elims"
	});

	Tab::Tiebreak->create({
		name          => "winloss",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Debate Speakers"
	});

	$tiebreak_set->setting("forfeits_never_break", "1");

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 2,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "opp_wins",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "judgevar2",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "coinflip",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	});

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Speech Prelims"
	});

	Tab::Tiebreak->create({
		name              => "ranks",
		tiebreak_set      => $tiebreak_set->id,
		count             => "prelim",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		truncate_smallest => 1,
		priority          => 1
	});

	Tab::Tiebreak->create({
		name              => "reciprocals",
		tiebreak_set      => $tiebreak_set->id,
		count             => "prelim",
		highlow           => 0,
		highlow_count     => 0,
		truncate_smallest => 1,
		multiplier        => 1,
		priority          => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	$tiebreak_set->setting("forfeits_never_break", "1");

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Speech Elims: Cumulative"
	});

	$tiebreak_set->setting("forfeits_never_break", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 4,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 4,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	});

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Speech Elims: Sudden Death"
	});

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Congress Prelims"
	});

	$tiebreak_set->setting("equal_elims", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 7
	});

	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	$tiebreak_set = Tab::TiebreakSet->create({
		tourn => $tourn->id,
		name => "Congress Elims"
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "points",
		tiebreak_set  => $tiebreak_set->id,
		count         => "previous",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	});


	$tiebreak_set->setting("forfeits_never_break", "1");
	$tiebreak_set->setting("equal_elims", "1");

	$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);

</%init>

