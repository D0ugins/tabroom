<%args>
	$person
	$person_settings => undef
	$district_id     => undef
	$tz              => undef
</%args>
<%init>

	my $district = 
		Tab::District->retrieve($district_id) 
		if $district_id;

	$tz = "America/Chicago" unless $tz;

	$m->abort unless $district;

	my $permission = Tab::Permission->search( 
		district => $district->id,
		person   => $person->id
	)->first;

	unless ($permission) { 
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to that district");
		$m->print('</h4></div>');
	}

	unless ($person_settings->{"nsda_beta"}) {
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to create a district tournament on Tabroom.  Yet.");
		$m->print('</h4></div>');
	}

	my @existing = $m->comp(
		"/funclib/district_tourns.mas", 
		district => $district
	);

	my $method;

	my %events_done;

	my $event_ref = {

		"HOU" => { 
			name => "House",
			code => "HOU",
			type => "congress" 
		},

		"SEN" => { 
			name => "Senate",
			code => "SEN",
			type => "congress" 
		},

		"CX"  => { 
			name      => "Policy",
			code      => "CX",
			type      => "debate",
			startcode => 1000,
			points    => 88
		},

		"LD"  => { 

			name      => "Lincoln Douglas",
			code      => "LD",
			type      => "debate",
			startcode => 2000,
			points    => 87
		} ,

		"PF"  => { 
			name      => "Public Forum",
			code      => "PF",
			type      => "debate",
			startcode => 3000,
			points    => 89
		} ,

		"DI"  => { 

			name      => "Dramatic Interp",
			code      => "DI",
			type      => "speech",
			startcode => 100,
			points    => 83
		},

		"DUO" => { 

			name      => "Duo Interp" ,
			code      => "DUO",
			type      => "speech" ,
			startcode => 200,
			points    => 21
		},

		"HI"  => { 

			name      => "Humorous Interp",
			code      => "HI",
			type      => "speech" ,
			startcode => 300,
			points    => 23
		},

		"INF" => { 

			name      => "Informative Speaking" ,
			code      => "INF",
			type      => "speech" ,
			startcode => 400,
			points    => 2
		},

		"IX"  => { 

			name      => "International Extemp" ,
			code      => "IX",
			type      => "speech" ,
			startcode => 500,
			points    => 1
		},

		"OO"  => { 

			name      => "Original Oratory" ,
			code      => "OO",
			type      => "speech" ,
			startcode => 600,
			points    => 7
		},

		"POI" => { 

			name      => "Programmed Oral Interp",
			code      => "POI",
			type      => "speech",
			startcode => 700,
			points    => 98
		},

		"USX" => { 

			name      => "US Extemp",
			code      => "USX",
			type      => "speech",
			startcode => 800,
			points    => 1
		}
	};

	my %events = %{$event_ref};

	foreach my $existing (@existing) {  

		foreach my $event ($existing->events) { 
			$events_done{$event->abbr}++;
		}

	}

	my $startdt;
	my $enddt;

	my $reg_startdt;
	my $reg_enddt;

	my $drop_enddt;
	my $freeze_enddt;
	my $judge_enddt;

	eval { 

		$startdt = Tab::dtme(
			$ARGS{"start_date"},
			$ARGS{"start_time"}, 
			$tz
		);

		$enddt = Tab::dtme(
			$ARGS{"end_date"}, 
			$ARGS{"end_time"}, 
			$tz
		);

		$reg_startdt = Tab::dtme(
			$ARGS{"reg_start"}, 
			$ARGS{"reg_start_time"}, 
			$tz
		);

		$reg_enddt = $startdt->clone();
		$reg_enddt = $reg_enddt->subtract( days => 7 );
		
		$freeze_enddt = Tab::dtme(
			$ARGS{"freeze_end_date"}, 
			$ARGS{"freeze_end_time"}, 
			$tz
		);

		$judge_enddt = Tab::dtme(
			$ARGS{"judge_end_date"}, 
			$ARGS{"judge_end_time"}, 
			$tz
		);

		$drop_enddt = Tab::dtme(
			$ARGS{"drop_end_date"}, 
			$ARGS{"drop_end_time"},
			$tz
		);

	};

	my $err;

	unless ($startdt && $enddt) { 
		$err .= "You must specify a start and end date for your tournament";
	}

	if ($startdt && $enddt && $startdt > $enddt) { 

		$err .= "Your tournament ends before it starts.  While I admire your
		dedication to efficiency, please select tournament dates that do not
		violate the laws of spacetime";

	}

	unless ($reg_startdt) { 
		$reg_startdt = $startdt->clone;
		$reg_startdt->subtract(days => 30);
	}

	if ($enddt) { 
		unless ($reg_enddt) { 
			$reg_enddt = $enddt->clone;
			$reg_enddt->subtract(days => 7);
		}

		unless ($drop_enddt) {   
			$drop_enddt = $reg_enddt->clone; 
		} 
		unless ($judge_enddt) {   
			$judge_enddt = $reg_enddt->clone; 
		} 
		unless ($freeze_enddt) {   
			$freeze_enddt = $reg_enddt->clone; 
		} 

	}

	unless ($ARGS{"name"}) {
		$err .= "Your district tournament needs a name.";
	}

	if ($err) { 
		$m->redirect("district_tournament_create.mhtml?district_id=$district_id&err=$err&name=".$ARGS{'name'}."&&city=".$ARGS{"city"}."&state=".$ARGS{"state"}."&tz=".$tz);
	}

	my $webname = lc($district->name);
	$webname =~ s/\s+//g; 

	my $hidden = $ARGS{"hidden"};
	$hidden = 0 unless $hidden;

	my $tourn = Tab::Tourn->create({
		name      => $ARGS{"name"},
		city      => $ARGS{"city"},
		state     => $ARGS{"state"},
		country   => "US",
		tz        => $tz,
		webname   => $webname,
		start     => $startdt,
		end       => $enddt,
		hidden    => $hidden,
		reg_start => $reg_startdt,
		reg_end   => $reg_enddt
	});

	$tourn->setting("nsda_district", $district->id);

	$tourn->setting("drop_deadline", "date", $drop_enddt);
	$tourn->setting("judge_deadline", "date", $judge_enddt);
	$tourn->setting("freeze_deadline", "date", $freeze_enddt);
	$tourn->setting("double_entry", "max_events");
	$tourn->setting("double_max", 2);

	my $site = Tab::Site->retrieve($ARGS{"site_id"}) 
		if $ARGS{"site_id"};

	unless ($site) { 

		my $site_name = $ARGS{"site_name"};

		$site_name = $district->name." districts host" unless $site_name;

		$site = Tab::Site->create({
			name    => $site_name,
			circuit => "83"
		});

	}

	Tab::TournSite->create({
		tourn   => $tourn->id,
		site    => $site->id
	});

	my @types = ("congress", "debate", "speech");

	my %categories = ();

	foreach my $key (keys %events) { 

		next unless $ARGS{$key};
		$categories{$events{$key}{"type"}}++
	}

	foreach my $type (@types) {

		next unless $categories{$type};

		my $code;

		$code = "IE" if $type eq "speech";
		$code = "DEB" if $type eq "debate";
		$code = "CON" if $type eq "congress";

		my $category = Tab::Category->create({
			name  => ucfirst($type),
			abbr  => $code,
			tourn => $tourn->id
		});

		$categories{$type} = $category;

		if ($code eq "IE") { 

			$category->setting("judge_per", $ARGS{"speechjudges"});

			$method = $ARGS{"nsda_speech_method"};

			$method = "doubledown" unless $method;

			$tourn->setting("nsda_speech_method", $method);

			$tourn->setting("disclaimer", 
				"text",
				'<p>I certify that we, the coach(es), student(s), administrator(s) directly affiliated with our NSDA chapter, have agreed that the student performance(s) reflect(s) our school standards in terms of subject matter, language, and use of gesture.</p>'
			);

			if ($method && $method eq "doubledown") { 

				my $prelim_composite_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Composite"
				});

				$prelim_composite_set->setting("truncate_ranks_to", 5);
				$prelim_composite_set->setting("truncate_prelims", 1);

				my $tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim",
				}); 

				# Updown gives a W for the first half of a section and a L for
				# the second half

				Tab::Tiebreak->create({
					name          => "downs",
					tiebreak_set  => $tiebreak_set->id,
					count         => "all",
					child         => $prelim_composite_set->id,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# The composite is determined by ranks first 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Judges' preference is the second

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				}); 

				# Reciprocals is the third

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				}); 

				# Adjusted ranks is fourth 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 


				# This tiebreaker set is not used in rounds, but is used to
				# determine seeding position in rounds after Round 2.

				my $seeding_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Seeding"
				});

				$seeding_tiebreak_set->setting("truncate_ranks_to", 5);
				$seeding_tiebreak_set->setting("truncate_prelims", 1);

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $seeding_tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Final round placement tiebreakers. 

				my $final_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Final",
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "elim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				});


				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				});

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				});

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				});

			} else { 

				# Create the composite scorer

				my $prelim_composite_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Composite"
				});

				Tab::Tiebreak->create({ 
					name          => "ranks",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1

				});

				Tab::Tiebreak->create({ 
					name          => "judgepref",
					tiebreak_set  => $prelim_composite_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2

				});

				my $tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim"
				}); 

				Tab::Tiebreak->create({ 
					name          => "ranks",
					tiebreak_set  => $tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1

				});

				# Seeds for prelims to prelims are just composite ranks

				my $seed_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Prelim Seeding"
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $seed_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Seeds to advance to semis are more complicated

				my $first_break_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Break To Elims"
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $first_break_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 


				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $first_break_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $first_break_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $first_break_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				});

				# Break Semis to Finals

				my $semi_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Semi"
				});

				$semi_tiebreak_set->setting("truncate_to_smallest", 1);

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				my $tb = Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# 2nd: Judge pref of semifinal round

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				}); 

				# 3rd: Ranks of semi alone

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				}); 

				# 4th: Recips of semi alone

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				}); 

				# 5th: Raw ranks of all rounds (no re-rankings)

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				}); 

				# 6th is composite recips from prelims and raw recips from
				# semis

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "prelim",
					child         => $prelim_composite_set->id,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $semi_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 

				# Rank the Finals

				my $final_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "IE Final"
				});

				# First is rank totals from finals and semis, together with
				# composite ranks from prelims. 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					child         => $prelim_composite_set->id,
					count         => "prelim",
					truncate      => 5,
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				# Second is ranks from finals only

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				}); 

				# Third is Judge Prefs in the final 

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				}); 
	
				# Fourth is recips in the final 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4
				}); 

				# Fifth: Finals + Semis

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				}); 

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 5
				}); 

				# Sixth is Judge Prefs in the final  + semis

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 
	
				# Seventh is recips in the final + semi

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 7
				}); 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "elim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 7
				}); 

				# Eighth: Finals + Semis + Unadjusted Prelims

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 8
				}); 

			} 

		} elsif ($code eq "CON") { 

			$category->setting("judge_per", $ARGS{"congressjudges"});

		    my $tiebreak_set = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => "Congress Prelim"
			}); 

			Tab::Tiebreak->create({
				name          => "ranks",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 0,
				highlow_count => 0,
				truncate      => 9,
				multiplier    => 1,
				priority      => 1
			}); 

			Tab::Tiebreak->create({
				name          => "judgepref",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				truncate      => 9,
				priority      => 2
			}); 

			Tab::Tiebreak->create({ 
				name          => "reciprocals",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				truncate      => 9,
				priority      => 3
			});

			Tab::Tiebreak->create({
				name          => "ranks",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				truncate      => 9,
				priority      => 4
			}); 

			Tab::Tiebreak->create({
				name          => "judgepref",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				truncate      => 9,
				priority      => 5
			}); 

			Tab::Tiebreak->create({
				name          => "reciprocals",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				truncate      => 9,
				priority      => 6
			}); 

			Tab::Tiebreak->create({
				name          => "chair_ranks",
				tiebreak_set  => $tiebreak_set->id,
				count         => "prelim",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				priority      => 6
			}); 

		    my $elim_tiebreak_set = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => "Congress Elim"
			}); 

			Tab::Tiebreak->create({
				name          => "ranks",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 1
			}); 

			Tab::Tiebreak->create({
				name          => "judgepref",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 2
			}); 

			Tab::Tiebreak->create({ 
				name          => "reciprocals",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 3
			});

			Tab::Tiebreak->create({
				name          => "ranks",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				priority      => 4
			}); 

			Tab::Tiebreak->create({
				name          => "judgepref",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				priority      => 5
			}); 

			Tab::Tiebreak->create({
				name          => "reciprocals",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				priority      => 6
			}); 

			Tab::Tiebreak->create({
				name          => "chair_ranks",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "final",
				highlow       => 1,
				highlow_count => 1,
				multiplier    => 1,
				priority      => 6
			}); 

		} elsif ($code eq "DEB") { 

			$category->setting("judge_per", $ARGS{"debatejudges"});

		    my $tiebreak_set = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => "Debate"
			}); 

			Tab::Tiebreak->create({
				name          => "losses",
				tiebreak_set  => $tiebreak_set->id,
				count         => "all",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 1
			}); 

		    my $elim_tiebreak_set = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => "Debate Elim"
			}); 

			Tab::Tiebreak->create({
				name          => "winloss",
				tiebreak_set  => $elim_tiebreak_set->id,
				count         => "previous",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 1
			}); 

		    my $final_tiebreak_set = Tab::TiebreakSet->create({
				tourn => $tourn->id,
				name  => "Debate Final"
			}); 

			Tab::Tiebreak->create({
				name          => "winloss",
				tiebreak_set  => $final_tiebreak_set->id,
				count         => "previous",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 1
			}); 

			Tab::Tiebreak->create({
				name          => "rounds",
				tiebreak_set  => $final_tiebreak_set->id,
				count         => "all",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 2 
			}); 

			Tab::Tiebreak->create({
				name          => "headtohead",
				tiebreak_set  => $final_tiebreak_set->id,
				count         => "all",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 3 
			}); 

			Tab::Tiebreak->create({
				name          => "ballots",
				tiebreak_set  => $final_tiebreak_set->id,
				count         => "all",
				highlow       => 0,
				highlow_count => 0,
				multiplier    => 1,
				priority      => 4 
			}); 

		}
	}

	foreach my $key (keys %events) { 

		next unless $ARGS{$key};

		my $category = $categories{$events{$key}{"type"}};

		my $code = $events{$key}{"code"}; 

		my $type = "debate" if $events{$key}{"type"} eq "debate";
		$type = "speech" if $events{$key}{"type"} eq "speech";
		$type = "congress" if $events{$key}{"type"} eq "congress";

		my $event =  Tab::Event->create({
			name     => $events{$key}{"name"},
			abbr     => $events{$key}{"code"},
			type     => $type,
			fee      => 0,
			tourn    => $tourn->id,
			category => $category->id
		});

		if (
			$code eq "PF" 
			|| $code eq "DUO" 
			|| $code eq "CX"
		) { 
			$event->setting("min_entry", 2);
			$event->setting("max_entry", 2); 
		} else { 
			$event->setting("min_entry", 1);
			$event->setting("max_entry", 1); 
		}

		if ($code eq "PF") { 
			$event->setting("no_side_constraints", 1);
		}

		if (
			$code eq "DI"  
			|| $code eq "DUO" 
			|| $code eq "HI"  
			|| $code eq "POI"
		) { 

			$event->setting("ask_for_titles", 1);
			$event->setting("ask_for_authors", 1);
			$event->setting("ask_for_isbn", 1);
		}

		if ($code eq "OO" || $code eq "INF") { 
			$event->setting("ask_for_titles", 1);
		}

		if ($type eq "debate") { 

			$event->setting('school_cap', 4);
			$event->setting("code_style", "numbers");
			$event->setting("code_start", $events{$key}{"startcode"});

		} elsif ($type eq "speech") { 

			$event->setting('school_cap', 4);

			$event->setting('default_panel_size', 6);
			$event->setting('max_panel_size', 7);

			if ($method && $method eq "doubledown") { 
				$event->setting('min_panel_size', 4);
			} else {
				$event->setting('min_panel_size', 5);
			}

			$event->setting("code_style", "numbers");
			$event->setting("code_start", $events{$key}{"startcode"});

		} elsif ($code eq "SEN") { 

			$event->setting('school_cap', 2);

		}

		if ($type eq "congress") { 
			$event->setting("code_style", "names");
			$event->setting("allow_rank_ties", 1);
			$event->setting("points_later", 1);
			$event->setting("parli_ballot", 1);
			$event->setting("max_points", 8);
			$event->setting("min_points", 1);
			$event->setting("truncate_fill", 9);
		}

		$event->setting("nsda_event_category", $events{$key}{"points"});

	}

	my @committee = $district->permissions;

	foreach my $committee (@committee) { 

		if ($committee->tag eq "chair") { 

			Tab::Permission->create({
				tag    => "owner",
				tourn  => $tourn->id,
				person => $committee->person->id,
			});

			Tab::Permission->create({
				tag    => "contact",
				tourn  => $tourn->id,
				person => $committee->person->id
			});

		} else { 

			Tab::Permission->create({
				tag    => "full_admin",
				tourn  => $tourn->id,
				person => $committee->person->id
			});
		}

	}

	$m->comp("district_sweepstakes_save.mhtml",
		tourn_id => $tourn->id,
		return   => "yesplz"
	);

	Tab::TournCircuit->create({
		tourn    => $tourn->id,
		circuit  => 83,
		approved => 1
	});

	my $msg = "District tournament created successfully!";

	$m->redirect("/user/home.mhtml?msg=$msg");

</%init>
