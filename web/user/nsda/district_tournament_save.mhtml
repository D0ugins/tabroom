<%args>
	$person
	$district_id => undef
</%args>
<%init>

	my $district = Tab::District->retrieve($district_id) 
		if $district_id;

	$m->abort unless $district;

	my $permission = Tab::Permission->search( 
		district => $district->id,
		person   => $person->id
	)->first;

	unless ($permission) { 
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to that district");
		$m->print('</h4></div>');
	}

	unless ($person->setting("nsda_beta")) { 

		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to create a district tournament on Tabroom.  Yet.");
		$m->print('</h4></div>');

	}

	my @existing = $m->comp(
		"/funclib/district_tourns.mas", 
		district => $district
	);

	my %events_done;

	my $event_ref = {
		"HOU" => { name => "House"                  , code => "HOU" , type => "congress" } ,
		"SEN" => { name => "Senate"                 , code => "SEN" , type => "congress" } ,
		"CX"  => { name => "Policy"                 , code => "CX"  , type => "debate"     , points => 88 } ,
		"LD"  => { name => "Lincoln Douglas"        , code => "LD"  , type => "debate"     , points => 87 } ,
		"PF"  => { name => "Public Forum"           , code => "PF"  , type => "debate"     , points => 89 } ,
		"IX"  => { name => "International Extemp"   , code => "IX"  , type => "speech"     , points => 1  }  ,
		"UX"  => { name => "US Extemp"              , code => "DX"  , type => "speech"     , points => 1  }  ,
		"DI"  => { name => "Dramatic Interp"        , code => "DI"  , type => "speech"     , points => 83 }  ,
		"HI"  => { name => "Humorous Interp"        , code => "HI"  , type => "speech"     , points => 23 }  ,
		"DUO" => { name => "Duo Interp"             , code => "DUO" , type => "speech"     , points => 21 }  ,
		"OO"  => { name => "Original Oratory"       , code => "OO"  , type => "speech"     , points => 7  }  ,
		"POI" => { name => "Programmed Oral Interp" , code => "POI" , type => "speech"     , points => 98 }  ,
		"INF" => { name => "Informative Speaking"   , code => "INF" , type => "speech"     , points => 2  }
	};

	my %events = %{$event_ref};

	foreach my $existing (@existing) {  

		foreach my $event ($existing->events) { 
			$events_done{$event->abbr}++;
		}

	}

	my $startdt;
	my $enddt;

	my $reg_startdt;
	my $reg_enddt;

	my $drop_enddt;
	my $freeze_enddt;
	my $judge_enddt;

	eval { 

		$startdt = Tab::dtme($ARGS{"start_date"}, $ARGS{"start_time"});
		$enddt = Tab::dtme($ARGS{"end_date"}, $ARGS{"end_time"});

		$reg_startdt = Tab::dtme($ARGS{"reg_start"}, $ARGS{"reg_start_time"});
		$reg_enddt = Tab::dtme($ARGS{"reg_end"}, $ARGS{"reg_end_time"});

		$freeze_enddt = Tab::dtme($ARGS{"freeze_end_date"}, $ARGS{"freeze_end_time"});
		$judge_enddt = Tab::dtme($ARGS{"judge_end_date"}, $ARGS{"judge_end_time"});
		$drop_enddt = Tab::dtme($ARGS{"drop_end_date"}, $ARGS{"drop_end_time"});

	};

	Tab::debuglog("results $startdt $enddt");
	Tab::debuglog("results $reg_startdt $reg_enddt");
	Tab::debuglog("results $freeze_enddt");
	Tab::debuglog("results $judge_enddt");
	Tab::debuglog("results $drop_enddt");

	my $err;

	unless ($startdt && $enddt) { 
		$err .= "You must specify a start and end date for your tournament";
	}

	if ($startdt && $enddt && $startdt > $enddt) { 
		$err .= "Your tournament ends before it starts.  While I admire your
		dedication to efficiency, please select tournament dates that do not
		violate the laws of spacetime";
	}

	unless ($reg_startdt) { 
		$reg_startdt = $startdt->clone;
		$reg_startdt->subtract(days => 30);
	}

	unless ($reg_enddt) { 
		$reg_enddt = $enddt->clone;
		$reg_enddt->subtract(days => 7);
	}

	my $week_before = $startdt->subtract( days => 7 );

	if ($reg_enddt > $week_before) { 

		$err .= "Your registration deadline is less than 7 days before the
		tournament.  It must be at least 7 days before the start of your
		tournament";

		$err .= "Reg end is ".Tab::nicedt($reg_enddt);
		$err .= "Week before is ".Tab::nicedt($week_before);
	}

	unless ($drop_enddt) {   
		$drop_enddt = $reg_enddt->clone; 
	} 
	unless ($judge_enddt) {   
		$judge_enddt = $reg_enddt->clone; 
	} 
	unless ($freeze_enddt) {   
		$freeze_enddt = $reg_enddt->clone; 
	} 

	unless ($ARGS{"name"}) {
		$err .= "Your district tournament needs a name.";
	}

	if ($err) { 
		$m->redirect("district_tournament_create.mhtml?district_id=$district_id&err=$err&name=".$ARGS{'name'}."&&city=".$ARGS{"city"}."&state=".$ARGS{"state"}."&tz=".$ARGS{"tz"});
	}

	my $webname = lc($district->name);
	$webname =~ s/\s+//g; 

	my $tourn = Tab::Tourn->create({
		name      => $ARGS{"name"},
		city      => $ARGS{"city"},
		state     => $ARGS{"state"},
		country   => "US",
		tz        => $ARGS{"tz"},
		webname   => $webname,
		start     => $startdt,
		end       => $enddt,
		reg_start => $reg_startdt,
		reg_end   => $reg_enddt
	});

	$tourn->setting("nsda_district", $district->id);

	$tourn->setting("drop_deadline", "date", $drop_enddt);
	$tourn->setting("judge_deadline", "date", $judge_enddt);
	$tourn->setting("freeze_deadline", "date", $freeze_enddt);

	my $site = Tab::Site->retrieve($ARGS{"site_id"}) if $ARGS{"site_id"};

	unless ($site) { 

		my $site_name = $ARGS{"site_name"};

		$site_name = $district->name." districts host" unless $site_name;

		$site = Tab::Site->create({
			name    => $site_name,
			circuit => "83"
		});

	}

	Tab::TournSite->create({
		tourn   => $tourn->id,
		site    => $site->id
	});

	my @types = ("congress", "debate", "speech");

	my %categories = ();

	foreach my $key (keys %events) { 

		next unless $ARGS{$key};
		$categories{$events{$key}{"type"}}++
	}

	foreach my $type (@types) {

		next unless $categories{$type};

		my $code;

		$code = "IE" if $type eq "speech";
		$code = "DEB" if $type eq "debate";
		$code = "CON" if $type eq "congress";

		my $category = Tab::Category->create({
			name  => ucfirst($type),
			abbr  => $code,
			tourn => $tourn->id
		});

		$categories{$type} = $category;

		$category->setting("judge_per", $ARGS{"speechjudges"}) if $code eq "IE";
		$category->setting("judge_per", $ARGS{"debatejudges"}) if $code eq "DEB";
		$category->setting("judge_per", $ARGS{"congressjudges"}) if $code eq "CON";

		if ($code eq "IE") { 
			$tourn->setting("nsda_speech_method", $ARGS{"nsda_speech_method"});
		}

	}

	foreach my $key (keys %events) { 

		next unless $ARGS{$key};

		my $category = $categories{$events{$key}{"type"}};

		my $code = $events{$key}{"code"}; 

		my $type = "pf" if $code eq "PF";
		$type = "ld" if $code eq "LD";
		$type = "policy" if $code eq "CX";

		$type = "speech" if $events{$key}{"type"} eq "speech";
		$type = "congress" if $events{$key}{"type"} eq "congress";

		my $event =  Tab::Event->create({
			name     => $events{$key}{"name"},
			abbr     => $events{$key}{"code"},
			type     => $type,
			fee      => 0,
			tourn    => $tourn->id,
			category => $category->id
		});

		if ($code eq "PF" || $code eq "DUO" || $code eq "CX") { 
			$event->setting("min_entry", 2);
			$event->setting("max_entry", 2); 
		} else { 
			$event->setting("min_entry", 1);
			$event->setting("max_entry", 1); 
		}

		$event->setting("nsda_event_category", $events{$key}{"points"});

	}

	my @committee = $district->permissions;

	foreach my $committee (@committee) { 

		if ($committee->tag eq "chair") { 

			Tab::Permission->create({
				tag    => "owner",
				person => $committee->person->id,
				tourn  => $tourn->id
			});

			Tab::Permission->create({
				tag    => "contact",
				person => $committee->person->id,
				tourn  => $tourn->id
			});

		} else { 

			Tab::Permission->create({
				tag    => "full_admin",
				person => $committee->person->id,
				tourn  => $tourn->id
			});
		}

	}


</%init>
