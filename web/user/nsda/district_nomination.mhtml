<%args>
	$person
	$person_settings
	$session
	$chapter_id  => undef
	$district_id => undef
	$default     => undef
</%args>
<%init>

	use Data::Dumper;

	my $district = Tab::District->retrieve($district_id);

	my %types = (
		"congress" => "1. Congressional Debate",
		"ld"       => "2. Lincoln-Douglas Debate",
		"policy"   => "3. Policy Debate",
		"pf"       => "4. Public Forum Debate",
		"speech"   => "5. Speech Events",
		"speech"   => "6. Supp/Conn Events",
		"middle"   => "7. Middle School"
	);

	my $tourn = $m->comp("/funclib/current_nationals.mas");
	$m->abort unless $tourn;

	Tab::Judge->columns(TEMP => "nomination");
	Tab::Judge->set_sql(
		district => "
			select judge.*, school.name as schoolname,
				category.abbr as catabbr,
				nomination.value_text as nomination

			from (judge, school, category)

			left join judge_setting nomination
				on nomination.tag = 'nomination'
				and nomination.judge = judge.id

			where category.tourn = ?
				and category.id = judge.category
				and judge.school = school.id
				and school.district = ?
		"
	);

	my %judges_by_id =
		map {$_->id => $_}
		Tab::Judge->search_district($tourn->id, $district->id);

	my %nommed;

	foreach my $type (sort {$types{$a} cmp $types{$b}} keys %types) {

		my $judge = $judges_by_id{$ARGS{$type}};
		next unless $judge;

		my %nomination = eval {
			return %{JSON::decode_json($judge->nomination)};
		};

		$nomination{"chair_nominated"}++;
		$nomination{"chair"}{$type}++;

		if ($type eq "middle") {

			$nomination{"middle_types"}{"interp"}   = $ARGS{'middle_interp'};
			$nomination{"middle_types"}{"address"}  = $ARGS{'middle_address'};
			$nomination{"middle_types"}{"debate"}   = $ARGS{'middle_debate'};
			$nomination{"middle_types"}{"congress"} = $ARGS{'middle_congress'};

		} elsif ($type eq "speech") {

			$nomination{"speech_types"}{"interp"}  = $ARGS{'speech_interp'};
			$nomination{"speech_types"}{"address"} = $ARGS{'speech_address'};
		}

		$nommed{$type}{$judge->id}++;
		$nommed{$judge->id}++;

		my $nomination_json = JSON::encode_json(\%nomination);

		$judge->setting("nomination", "text", $nomination_json);
		$judge->nomination($nomination_json);
	}


	foreach my $judge_id (keys %judges_by_id) {

		my $judge = $judges_by_id{$judge_id};
		next unless $judge;

		my %nomination = eval {
			return %{JSON::decode_json($judge->nomination)};
		};

		next unless %nomination;

		unless ($nommed{$judge_id}) {

			if ($nomination{"chair_nominated"}) {
				my $msg = "Judge ".$judge->first." ".$judge->last." semi/finals nomination removed";

				$m->comp("/funclib/log.mas",
					tourn       => $judge->category->tourn->id,
					category    => $judge->category->id,
					school      => $judge->school->id,
					type        => "registration",
					person      => $person->id,
					description => $msg
				);

				delete $nomination{"chair_nominated"};
			}
		}


		foreach my $type (sort {$types{$a} cmp $types{$b}} keys %types) {

			next if $nommed{$type}{$judge->id};

			delete $nomination{"chair"}{$type};

			if ($type eq "middle") {
				delete $nomination{"middle_types"};
			}

			if ($type eq "speech") {
				delete $nomination{"speech_types"};
			}
		}

		my $nomination_json = JSON::encode_json(\%nomination);
		$judge->setting("nomination", "text", $nomination_json);
	}

	my $msg = "Nominations saved, thank you!";
	$m->redirect("/user/nsda/district_judge_noms.mhtml?chapter_id=".$chapter_id."&district_id=".$district_id."&msg=$msg");

</%init>
