<%args>
	$person
	$person_settings
	$district_id => undef
</%args>
<%init>

	my $district = Tab::District->retrieve($district_id) 
		if $district_id;

	unless ($district) {
		$m->comp("/funclib/abort.mas", 
		message => "No tournament found for district $district_id");
	}

	my $permission = Tab::Permission->search( 
		district => $district->id,
		person   => $person->id 
	)->first;

	$permission++ if $person->site_admin;
	$permission++ if $person_settings->{"nsda_admin"};

	unless ($permission) { 
		$m->print('<div class="main"><h4 class="warning">');
		$m->print("You do not have access to that district");
		$m->print('</h4></div>');
		$m->abort();
	}

	my @existing = $m->comp(
		"/funclib/district_tourns.mas", 
		district => $district
	);

	my $tourn = shift @existing if @existing;

	unless ($tourn) {
		$m->comp("/funclib/abort.mas", 
			message => "No district found for $district_id");
	}

	$m->abort() unless $tourn;

	my $tz = $tourn->tz;
	$tz = "America/Chicago" unless $tz;

	my ($keys, $event_ref) = $m->comp("/funclib/nsda_events.mas");
	my %events = %{$event_ref};

	my %categories = ();
	my @types = ("congress", "debate", "speech");

	my $not_helds;

	foreach my $key (keys %events) { 
		$categories{$events{$key}{"type"}}{$ARGS{$key}}++;
		$not_helds++ if $ARGS{$key} eq "0" || $ARGS{$key} eq "nope";
	}

	my $method;

	my @weekends = $tourn->weekends();

	foreach my $type (@types) {

		my $code;
		my $category;

		foreach my $weekend (@weekends) { 

			next unless $categories{$type}{$weekend->id};

			$code = "IE" if $type eq "speech";
			$code = "DEB" if $type eq "debate";
			$code = "CON" if $type eq "congress";

			$category = Tab::Category->search(
				name  => ucfirst($type)." (".$weekend->name.")",
				abbr  => $code,
				tourn => $tourn->id
			)->first;

			$category = Tab::Category->create({
				name  => ucfirst($type)." (".$weekend->name.")",
				abbr  => $code,
				tourn => $tourn->id
			}) unless $category;

			$categories{$type}{$weekend->id} = $category;
			$category->setting('weekend', $weekend->id);

		}

		if ($code eq "IE") { 

			$category->setting("judge_per", "5");

			$method = $tourn->setting("nsda_speech_method");
			$method = "doubledown" unless $method;
			$tourn->setting("nsda_speech_method", $method);

			$tourn->setting("disclaimer", 
				"text",
				'<p>I certify that we, the coach(es), student(s), administrator(s) directly affiliated with our NSDA chapter, have agreed that the student performance(s) reflect(s) our school standards in terms of subject matter, language, and use of gesture.</p>'
			);

			my $already = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "IE Prelim"
			);

			unless ($already) { 

				if ($method && $method eq "doubledown") { 

					my $prelim_composite_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Prelim Composite"
					});

					my $tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Prelim",
					}); 

					# Updown gives a W for the first half of a section and a L for
					# the second half

					Tab::Tiebreak->create({
						name          => "downs",
						tiebreak_set  => $tiebreak_set->id,
						count         => "all",
						child         => $prelim_composite_set->id,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					# The composite is determined by ranks first 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $prelim_composite_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						truncate      => 5,
						multiplier    => 1,
						priority      => 1
					}); 

					# Judges' preference is the second

					Tab::Tiebreak->create({
						name          => "judgepref",
						tiebreak_set  => $prelim_composite_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						truncate      => 5,
						multiplier    => 1,
						priority      => 2
					}); 

					# Reciprocals is the third

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $prelim_composite_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						truncate      => 5,
						multiplier    => 1,
						priority      => 3
					}); 

					# Adjusted ranks is fourth 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $prelim_composite_set->id,
						count         => "previous",
						highlow       => 1,
						highlow_count => 1,
						truncate      => 5,
						multiplier    => 1,
						priority      => 4 
					}); 


					# This tiebreaker set is not used in rounds, but is used to
					# determine seeding position in rounds after Round 2.

					my $seeding_tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Prelim Seeding"
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $seeding_tiebreak_set->id,
						count         => "prelim",
						highlow       => 0,
						highlow_count => 0,
						truncate      => 5,
						multiplier    => 1,
						priority      => 1
					}); 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $seeding_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						truncate      => 5,
						multiplier    => 1,
						priority      => 1
					}); 

					# Final round placement tiebreakers. 

					my $final_tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Final",
					}); 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						child         => $prelim_composite_set->id,
						count         => "elim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					});


					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 2
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "prelim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 3
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 3
					});

					Tab::Tiebreak->create({
						name          => "judgepref",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 4
					});

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "prelim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 5
					});

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 5
					});

				} else { 

					# Create the composite scorer

					my $prelim_composite_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Prelim Composite"
					});

					Tab::Tiebreak->create({ 
						name          => "ranks",
						tiebreak_set  => $prelim_composite_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1

					});

					Tab::Tiebreak->create({ 
						name          => "judgepref",
						tiebreak_set  => $prelim_composite_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 2

					});

					my $tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Prelim"
					}); 

					Tab::Tiebreak->create({ 
						name          => "ranks",
						tiebreak_set  => $tiebreak_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1

					});

					# Seeds for prelims to prelims are just composite ranks

					my $seed_tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Prelim Seeding"
					}); 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $seed_tiebreak_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					# Seeds to advance to semis are more complicated

					my $first_break_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Break To Elims"
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $first_break_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 


					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $first_break_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 2
					});

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $first_break_set->id,
						count         => "prelim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 3
					});

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $first_break_set->id,
						count         => "prelim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 4
					});

					# Break Semis to Finals

					my $semi_tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Semi"
					});

					$semi_tiebreak_set->setting("truncate_to_smallest", 1);

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $semi_tiebreak_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					my $tb = Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					# 2nd: Judge pref of semifinal round

					Tab::Tiebreak->create({
						name          => "judgepref",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 2
					}); 

					# 3rd: Ranks of semi alone

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 3
					}); 

					# 4th: Recips of semi alone

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 4
					}); 

					# 5th: Raw ranks of all rounds (no re-rankings)

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "all",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 5
					}); 

					# 6th is composite recips from prelims and raw recips from
					# semis

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "prelim",
						child         => $prelim_composite_set->id,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 6
					}); 

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $semi_tiebreak_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 6
					}); 

					# Rank the Finals

					my $final_tiebreak_set = Tab::TiebreakSet->create({
						tourn => $tourn->id,
						name  => "IE Final"
					});

					# First is rank totals from finals and semis, together with
					# composite ranks from prelims. 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						child         => $prelim_composite_set->id,
						count         => "prelim",
						truncate      => 5,
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 1
					}); 

					# Second is ranks from finals only

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 2
					}); 

					# Third is Judge Prefs in the final 

					Tab::Tiebreak->create({
						name          => "judgepref",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 3
					}); 
		
					# Fourth is recips in the final 

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 4
					}); 

					# Fifth: Finals + Semis

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 5
					}); 

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 5
					}); 

					# Sixth is Judge Prefs in the final  + semis

					Tab::Tiebreak->create({
						name          => "judgepref",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "previous",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 6
					}); 
		
					# Seventh is recips in the final + semi

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "final",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 7
					}); 

					Tab::Tiebreak->create({
						name          => "reciprocals",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "elim",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 7
					}); 

					# Eighth: Finals + Semis + Unadjusted Prelims

					Tab::Tiebreak->create({
						name          => "ranks",
						tiebreak_set  => $final_tiebreak_set->id,
						count         => "all",
						highlow       => 0,
						highlow_count => 0,
						multiplier    => 1,
						priority      => 8
					}); 

				} 

			}

		} elsif ($code eq "CON") { 
			
			my $already = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "Congress Prelim"
			);

			unless ($already) { 

				$category->setting("judge_per", "6");

				my $tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "Congress Prelim"
				}); 

				$tiebreak_set->setting('equal_elims', 1);

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					truncate      => 9,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					truncate      => 9,
					priority      => 2
				}); 

				Tab::Tiebreak->create({ 
					name          => "reciprocals",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					truncate      => 9,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 1,
					highlow_count => 1,
					multiplier    => 1,
					truncate      => 9,
					priority      => 4
				}); 

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 1,
					highlow_count => 1,
					multiplier    => 1,
					truncate      => 9,
					priority      => 5
				}); 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 1,
					highlow_count => 1,
					multiplier    => 1,
					truncate      => 9,
					priority      => 6
				}); 

				Tab::Tiebreak->create({
					name          => "chair_ranks",
					tiebreak_set  => $tiebreak_set->id,
					count         => "prelim",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 7
				}); 

				my $elim_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "Congress Elim"
				}); 

				$elim_tiebreak_set->setting('equal_elims', 1);

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2
				}); 

				Tab::Tiebreak->create({ 
					name          => "reciprocals",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3
				});

				Tab::Tiebreak->create({
					name          => "ranks",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 1,
					highlow_count => 1,
					multiplier    => 1,
					priority      => 4
				}); 

				Tab::Tiebreak->create({
					name          => "judgepref",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 1,
					highlow_count => 1,
					multiplier    => 1,
					priority      => 5
				}); 

				Tab::Tiebreak->create({
					name          => "reciprocals",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 1,
					highlow_count => 1,
					multiplier    => 1,
					priority      => 6
				}); 

				Tab::Tiebreak->create({
					name          => "chair_ranks",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "final",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 6
				}); 

			}

		} elsif ($code eq "DEB") { 

			my $already = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "Debate"
			);

			unless ($already) { 

				$category->setting("judge_per", 2);

				my $tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "Debate"
				}); 

				Tab::Tiebreak->create({
					name          => "losses",
					tiebreak_set  => $tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				my $elim_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "Debate Elim"
				}); 

				Tab::Tiebreak->create({
					name          => "winloss",
					tiebreak_set  => $elim_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				my $final_tiebreak_set = Tab::TiebreakSet->create({
					tourn => $tourn->id,
					name  => "Debate Final"
				}); 

				Tab::Tiebreak->create({
					name          => "winloss",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "previous",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 1
				}); 

				Tab::Tiebreak->create({
					name          => "rounds",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 2 
				}); 

				Tab::Tiebreak->create({
					name          => "headtohead",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 3 
				}); 

				Tab::Tiebreak->create({
					name          => "ballots",
					tiebreak_set  => $final_tiebreak_set->id,
					count         => "all",
					highlow       => 0,
					highlow_count => 0,
					multiplier    => 1,
					priority      => 4 
				}); 

			}

		}

	}

	if ($not_helds) { 

		undef $not_helds;

		$not_helds = Tab::Category->search(
			name  => "No Qualifier",
			abbr  => "XX",
			tourn => $tourn->id
		);

		$not_helds = Tab::Category->create({
			name  => "No Qualifier",
			abbr  => "XX",
			tourn => $tourn->id
		}) unless $not_helds;

	}

	my %weekend_events;

	foreach my $key (keys %events) { 

		next unless defined $ARGS{$key};

		my $exists = Tab::Event->search( 
			tourn => $tourn->id,
			abbr  => $events{$key}{"code"}
		)->first;

		push @{$weekend_events{$exists->setting("weekend")}}, 
			$exists->abbr 
			if $exists;

		if ($exists) { 
			$exists->setting("nsda_ballot_order", $ARGS{$key."_ballots"});
			next;
		}

		my $category = $categories{$events{$key}{"type"}}{$ARGS{$key}};

		if ($ARGS{$key} eq "0" || $ARGS{$key} eq "nope") { 
			$category = $not_helds;
		}

		my $code = $events{$key}{"code"}; 

		my $type = "debate" if $events{$key}{"type"} eq "debate";
		$type = "speech" 	if $events{$key}{"type"} eq "speech";
		$type = "congress" 	if $events{$key}{"type"} eq "congress";

		my $event =  Tab::Event->create({
			name     => $events{$key}{"name"},
			abbr     => $events{$key}{"code"},
			type     => $type,
			fee      => 0,
			tourn    => $tourn->id,
			category => $category->id
		});

		$event->setting("weekend", $ARGS{$event->abbr});
		$event->setting("nsda_event_category", $events{$key}{"nsda"});

		push @{$weekend_events{$ARGS{$event->abbr}}}, $event->abbr;

		if (
			$code eq "PF" 
			|| $code eq "DUO" 
			|| $code eq "CX"
		) { 
			$event->setting("min_entry", 2);
			$event->setting("max_entry", 2); 
		} else { 
			$event->setting("min_entry", 1);
			$event->setting("max_entry", 1); 
		}

		if ($code eq "PF") { 
			$event->setting("no_side_constraints", 1);
		}

		if (
			$code eq "DI"  
			|| $code eq "DUO" 
			|| $code eq "HI"  
			|| $code eq "POI"
		) { 

			$event->setting("ask_for_titles", 1);
			$event->setting("ask_for_authors", 1);
			$event->setting("ask_for_isbn", 1);
		}

		if ($code eq "OO" || $code eq "INF") { 
			$event->setting("ask_for_titles", 1);
		}

		if ($type eq "debate") { 

			$event->setting('school_cap', 4);
			$event->setting("code_style", "numbers");
			$event->setting("code_start", $events{$key}{"startcode"});

		} elsif ($type eq "speech") { 

			$event->setting('school_cap', 4);

			$event->setting('default_panel_size', 6);
			$event->setting('max_panel_size', 7);

			if ($method && $method eq "doubledown") { 
				$event->setting('min_panel_size', 4);
			} else {
				$event->setting('min_panel_size', 5);
			}

			$event->setting("code_style", "numbers");
			$event->setting("code_start", $events{$key}{"startcode"});

		} elsif ($code eq "SEN") { 

			$event->setting('school_cap', 2);

		}

		if ($type eq "congress") { 
			$event->setting("code_style", "names");
			$event->setting("allow_rank_ties", 1);
			$event->setting("points_later", 1);
			$event->setting("parli_ballot", 1);
			$event->setting("max_points", 8);
			$event->setting("min_points", 1);
			$event->setting("truncate_fill", 9);
		}

		$event->setting("nsda_event_category", $events{$key}{"points"});

	}

	my @committee = $district->permissions;

	foreach my $committee (@committee) { 
			
		my $exists = Tab::Permission->search(
			tourn  => $tourn->id,
			person => $committee->person->id,
		)->first;

		next if $exists;

		if ($committee->tag eq "chair") { 

			Tab::Permission->create({
				tag    => "owner",
				tourn  => $tourn->id,
				person => $committee->person->id,
			});

			Tab::Permission->create({
				tag    => "contact",
				tourn  => $tourn->id,
				person => $committee->person->id
			});

		} else { 

			Tab::Permission->create({
				tag    => "full_admin",
				tourn  => $tourn->id,
				person => $committee->person->id
			});
		}

	}

	$m->comp("district_sweepstakes_save.mhtml",
		tourn_id => $tourn->id,
		return   => "yesplz"
	);

	unless (Tab::TournCircuit->search(
			tourn    => $tourn->id,
			circuit  => 83,
			approved => 1
		)
	) { 
		Tab::TournCircuit->create({
			tourn    => $tourn->id,
			circuit  => 83,
			approved => 1
		});
	}


	Tab::Site->set_sql( by_admin => "
		select site.*
		from site, tourn_site, permission
		where site.id = tourn_site.site
		and tourn_site.tourn = permission.tourn
		and permission.person = ? 
	");

	Tab::Site->set_sql( by_membership => "
		select site.*
		from site, circuit, chapter_circuit, chapter
		where site.circuit = circuit.id
		and circuit.id = chapter_circuit.circuit
		and chapter_circuit.chapter = chapter.id
		and chapter.district = ?
	");

	my @sites = Tab::Site->search_by_admin($person->id);

	push @sites, Tab::Site->search_by_membership($district->id);

	my %seen;
	@sites = grep { ! $seen{$_->id} ++ } @sites;
	@sites = sort {$a->name cmp $b->name} @sites;

</%init>

	<div class="menu">
		
		<& "nsda_step.mas", step => 3 &>

		<div class="sidenote">
			<& "/setup/tourn/deadlines.mas" &>
		</div>
	
	</div>

	<div class="main">

		<h2>Locations, Dates &amp; Deadlines</h2>

		<form 
			action = "district_tournament_save.mhtml"
			method = "post"
		>

		<input 
			type  = "hidden"
			name  = "district_id"
			value = "<% $district->id %>"
		>

<%perl>

		foreach my $weekend (@weekends) { 

			my $start           = $weekend->start->set_time_zone($tz);
			my $end             = $weekend->end->set_time_zone($tz);
			my $reg_start       = $weekend->reg_start->set_time_zone($tz);
			my $reg_end         = $weekend->reg_end->set_time_zone($tz);
			my $freeze_deadline = $weekend->freeze_deadline->set_time_zone($tz);
			my $drop_deadline   = $weekend->drop_deadline->set_time_zone($tz);
			my $judge_deadline  = $weekend->judge_deadline->set_time_zone($tz);
			my $fine_deadline   = $weekend->fine_deadline->set_time_zone($tz);

</%perl>

			
			<h5 class="bluetext"><% $weekend->name %></h5>

				<div class="nospace full marleft padleft borderbottom padbottommore">

				<div class="row marleft marright">
					<span class="fifth">
						Label/name
					</span>

					<span class="threetenths">
						<input
							type  = "text"
							name  = "name_<% $weekend->id %>"
							size  = "24"
							value = "<% $weekend ? $weekend->name : ""%>"
						>
					</span>

					<span class="fifth">
						Events
					</span>

					<span class="threetenths">
%						if ($weekend_events{$weekend->id}) { 
%							foreach my $event (@{$weekend_events{$weekend->id}}) { 
								<% $event %>
%							}
%						}
					</span>

				</div>



%				if ($tourn->setting("nsda_tabbing_software") eq "tabroom") { 

					<div class="row marleft marright">

						<span class="fifth">
							Host Site
						</span>

						<span class="threetenths">
							<select 
								name  = "site_<% $weekend->id %>"
								class = "fixedmed"
							>
								<option id=""></option>
%								foreach my $site (@sites) { 
									<option value="<% $site->id %>"><% $site->name %></option>
%								}
							</select>
						</span>

						<span class="fifth">
							Or, New Site
						</span>

						<span class="threetenths">
							<input 
								type        = "text"
								name        = "site_name_<% $weekend->id %>"
								size        = "24"
								placeholder = "School/site name"
							>
						</span>

					</div>
%				}

				<div class="row marleft marright">

					<span class="fifth">
						City/Location
					</span>

					<span class="threetenths">
						<input
						type  = "text"
							name  = "city_<% $weekend->id %>"
							size  = "24"
							value = "<% $weekend ? $weekend->city : ""%>"
						>
					</span>

					<span class="fifth">
						State
					</span>

%					my $weekend_state = $weekend->state if $weekend;
%					$weekend_state = $person->state unless $weekend_state;

					<span class="threetenths">

						<select 
							name  = "state_<% $weekend->id %>"
							class = "fixedmed"
						>

							<& 
								"/funclib/state_select.mas", 
								state => $weekend_state,
							&>

						</select>

					</span>

				</div>

				<h6>Dates &amp; deadlines</h6>

				<span class="pagehalf">

				<& "/funclib/datepicker.mas", id => "start_$weekend->id" &>

					<div class="row">

						<span class="half">
							Tournament start
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "start_<% $weekend->id %>"
								name  = "start_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($start) %>"
							>
								at
							<& "/funclib/timepicker.mas",
								id   => "starttime_".$weekend->id,
								name => "starttime_".$weekend->id,
								size => 6,
								time => $start
							&>
						</span>

					</div>

					<& "/funclib/datepicker.mas", id => "end_$weekend->id" &>

					<div class="row">

						<span class="half">
							Tournament end
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "end_<% $weekend->id %>"
								name  = "end_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($end) %>"
							>
								at
							<& "/funclib/timepicker.mas", 
								id   => "endtime_".$weekend,
								name => "endtime_".$weekend,
								size => 6,
								time => $end
							&>
						</span>

					</div>

					<& 
						"/funclib/datepicker.mas", 
						id  => "reg_start_$weekend",
						max => $start 
					&>

					<div class="row">

						<span class="half">
							Registration opens
						</span>

						<span class="half">
							<input 
								type  = "text"
								name  = "reg_start_<% $weekend->id %>"
								id    = "reg_start_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($reg_start) %>"
							>
								at

							<& "/funclib/timepicker.mas",
								id   => "reg_starttime_".$weekend,
								name => "reg_starttime_".$weekend,
								size => 6,
								time => $reg_start
							&>
						</span>

					</div>

					<& "/funclib/datepicker.mas",
						id  => "reg_end_$weekend",
						max => $start
					&>

					<div class="row">

						<span class="half">
							New entries due
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "reg_end_<% $weekend->id %>"
								name  = "reg_end_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($reg_end) %>"
							>
								at
							<& "/funclib/timepicker.mas",
								id   => "reg_endtime_".$weekend,
								name => "reg_endtime_".$weekend,
								size => 6,
								time => $reg_end 
							&>
						</span>

					</div>

				</span>

				<span class="pagehalf">

					<& "/funclib/datepicker.mas",
						id  => "freeze_deadline_$weekend",
						max => $start
					&>
					
					<div class="row">

						<span class="half">
							Fees &amp; Obligations freeze
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "freeze_deadline_<% $weekend->id %>"
								name  = "freeze_deadline_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($freeze_deadline) %>"
							>
								at
							<& "/funclib/timepicker.mas",
								id   => "freeze_deadlinetime_".$weekend,
								name => "freeze_deadlinetime_".$weekend,
								size => 6,
								time => $freeze_deadline
							&>
						</span>

					</div>

					<& "/funclib/datepicker.mas",
						id  => "judge_deadline_$weekend",
						max => $start
					&> 

					<div class="row">

						<span class="half">
							Judge entries due
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "judge_deadline_<% $weekend->id %>"
								name  = "judge_deadline_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($judge_deadline) %>"
							>
								at
							<& "/funclib/timepicker.mas", 
								id   => "judge_deadlinetime_".$weekend,
								name => "judge_deadlinetime_".$weekend,
								size => 6,
								time => $judge_deadline &>
						</span>

					</div>

					<& "/funclib/datepicker.mas",
						id  => "drop_deadline_$weekend",
						max => $start
					&> 

					<div class="row">

						<span class="half">
							Online drops &amp; name changes until
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "drop_deadline_<% $weekend->id %>"
								name  = "drop_deadline_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($drop_deadline) %>"
							>
								at
							<& "/funclib/timepicker.mas", 
								id   => "drop_deadlinetime_".$weekend,
								name => "drop_deadlinetime_".$weekend,
								size => 6, 
								time => $drop_deadline &>
						</span>

					</div>

					<& "/funclib/datepicker.mas",
						id  => "fine_deadline_$weekend",
						max => $start
					&>

					<div class="row">

						<span class="half">
							Nuisance fines apply after
						</span>

						<span class="half">
							<input 
								type  = "text"
								id    = "fine_deadline_<% $weekend->id %>"
								name  = "fine_deadline_<% $weekend->id %>"
								size  = "8"
								value = "<% Tab::pickerdate($fine_deadline) %>"
							>
								at 

							<& 
								"/funclib/timepicker.mas", 
								name => "fine_deadlinetime",
								size => 6,
								time => $fine_deadline 
							&>
						</span>

					</div>

				</span>

			</div>

%		}

		<div class="liblrow rightalign">
			<input 
				type  = "submit"
				value = "Go to Final Step"
			>
			</form>
		</div>

	</div>

