<%args>
	$person
	$search_last  => undef
	$search_first => undef
	$search_email => undef
	$target_id    => undef
</%args>
<%init>

	Tab::Login->set_sql(person_merge => " 
			update login set person = ? where person = ? ");

	Tab::Student->set_sql(person_merge => " 
			update student set person = ? where person = ? ");

	Tab::Student->set_sql(person_request_merge => " 
			update student set person_request = ? where person_request = ? ");

	Tab::Judge->set_sql(person_merge => " 
			update judge set person = ? where person = ? ");

	Tab::Judge->set_sql(person_request_merge => " 
			update judge set person_request = ? where person_request = ? ");

	Tab::ChapterJudge->set_sql(person_merge => " 
			update chapter_judge set person = ? where person = ? ");

	Tab::ChapterJudge->set_sql(person_request_merge => " 
			update chapter_judge set person_request = ? where person_request = ? ");

	Tab::Permission->set_sql(person_merge => " 
			update permission set person = ? where person = ? ");

	Tab::Conflict->set_sql(person_merge => " 
			update conflict set person = ? where person = ? ");

	Tab::Conflict->set_sql(conflicted_merge => " 
			update conflict set conflicted = ? where conflicted = ? ");

	Tab::Conflict->set_sql(added_by_merge => " 
			update conflict set added_by = ? where added_by = ? ");

	Tab::Follower->set_sql(person_merge => " 
			update follower set person = ? where person = ? ");

	Tab::Follower->set_sql(follower_merge => " 
			update follower set follower = ? where follower = ? ");

	Tab::Entry->set_sql(person_merge => " 
			update entry set registered_by = ? where registered_by = ? ");

	Tab::Fine->set_sql(deleted_by_merge => " 
			update fine set deleted_by = ? where deleted_by = ? ");

	Tab::Fine->set_sql(levied_by_merge => " 
			update fine set levied_by = ? where levied_by = ? ");

	Tab::TournIgnore->set_sql(person_merge => " 
			update tourn_ignore set person = ? where person = ? ");

	Tab::ChangeLog->set_sql(person_merge => " 
			update change_log set person = ? where person = ? ");

	Tab::Strike->set_sql(entered_by_merge => " 
			update strike set entered_by = ? where entered_by = ? ");

	Tab::Ballot->set_sql(entered_by_merge => " 
			update ballot set entered_by = ? where entered_by = ? ");

	Tab::Ballot->set_sql(audited_by_merge => " 
			update ballot set audited_by = ? where audited_by = ? ");

	Tab::Ballot->set_sql(collected_by_merge => " 
			update ballot set collected_by = ? where collected_by = ? ");

	Tab::Site->set_sql(host_merge => "
			update site set host = ? where host = ? ");

	Tab::Session->set_sql(person_merge => "
			update session set person = ? where person = ? ");

	my @candidates = Tab::Person->search_where( 
		last => { "like", "%".$search_last."%"} 
	);

	push @candidates, Tab::Person->search_where( 
		email => { "like", "%".$search_email."%"} 
	);

	push @candidates, Tab::Person->retrieve($target_id) 
		if $target_id;

	my $prefer;

	my @merge_me;
	my %merge_ids;

	if ( ref($ARGS{"merge"}) eq "ARRAY" ) { 
		%merge_ids = map { $_ => 1 } @{$ARGS{"merge"}};
	} else { 
		$merge_ids{$ARGS{"merge"}}++;
	}

	foreach my $candidate (@candidates) { 

		$prefer = $candidate if $ARGS{"prefer"} == $candidate;
		push @merge_me, $candidate if $merge_ids{$candidate};

	}

	$prefer = shift @merge_me unless $prefer;

	Tab::debuglog("prefer is $prefer");

	my %seen = (); 
	@merge_me = grep { ! $seen{$_->id}++ } @merge_me;
	@merge_me = grep { $_ ne '' } @merge_me;
	@merge_me = grep { $_->id ne $prefer->id } @merge_me;

	my $merge_string;

	my $paradigm;
	my $paradigm_timestamp;

	my $nsda_merit_number; 
	my $site_admin; 
	
	foreach my $merge_me (@merge_me) { 
	
		Tab::debuglog("Merging $merge_me");

		my $new_paradigm = $merge_me->setting("paradigm");

		if ($new_paradigm) { 

			if ($paradigm) { 

				my $new_timestamp = $merge_me->setting("paradigm_timestamp");

				if (not defined $paradigm_timestamp) { 

					$paradigm = $new_paradigm;
					$paradigm_timestamp = $merge_me->setting("paradigm_timestamp");

				} elsif ($new_timestamp && $new_timestamp->epoch > $paradigm_timestamp->epoch) {
			
					$paradigm = $new_paradigm;
					$paradigm_timestamp = $merge_me->setting("paradigm_timestamp");

				}

			}

		} else { 

			$paradigm = $new_paradigm;
			$paradigm_timestamp = $merge_me->setting("paradigm_timestamp");
		}

		Tab::Login->sql_person_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Student->sql_person_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Student->sql_person_request_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Judge->sql_person_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Judge->sql_person_request_merge->execute( $prefer->id, $merge_me->id); 

		Tab::ChapterJudge->sql_person_merge->execute( $prefer->id, $merge_me->id); 
		Tab::ChapterJudge->sql_person_request_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Permission->sql_person_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Conflict->sql_person_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Conflict->sql_conflicted_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Conflict->sql_added_by_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Follower->sql_person_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Follower->sql_follower_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Entry->sql_person_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Fine->sql_deleted_by_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Fine->sql_levied_by_merge->execute( $prefer->id, $merge_me->id); 

		Tab::TournIgnore->sql_person_merge->execute( $prefer->id, $merge_me->id); 

		Tab::ChangeLog->sql_person_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Strike->sql_entered_by_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Ballot->sql_entered_by_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Ballot->sql_audited_by_merge->execute( $prefer->id, $merge_me->id); 
		Tab::Ballot->sql_collected_by_merge->execute( $prefer->id, $merge_me->id); 

		Tab::Site->sql_host_merge->execute( $prefer->id, $merge_me->id);
		Tab::Session->sql_person_merge->execute( $prefer->id, $merge_me->id);

		foreach my $login ($merge_me->logins) { 
			$login->person($prefer->id);
			$login->update;
		}

		# Synchronize missing data, if any.
		
		# Note: I really wish you could use a variable to call a method in
		# Perl.  In fact I'm not sure there isn't a way but I'm too lazy to
		# look it up.  Cue self-hatred.

		$prefer->ualt_id($merge_me->ualt_id) 
			if $merge_me->ualt_id 
			&& (not defined $prefer->ualt_id);

		$prefer->site_admin($merge_me->site_admin) 
			if $merge_me->site_admin 
			&& (not defined $prefer->site_admin);

		$prefer->pronoun($merge_me->pronoun) 
			if $merge_me->pronoun 
			&& (not defined $prefer->pronoun);

		$prefer->gender($merge_me->gender) 
			if $merge_me->gender 
			&& (not defined $prefer->gender);

		$prefer->street($merge_me->street) 
			if $merge_me->street 
			&& (not defined $prefer->street);

		$prefer->city($merge_me->city) 
			if $merge_me->city 
			&& (not defined $prefer->city);

		$prefer->state($merge_me->state) 
			if $merge_me->state 
			&& (not defined $prefer->state);

		$prefer->zip($merge_me->zip) 
			if $merge_me->zip 
			&& (not defined $prefer->zip);

		$prefer->postal($merge_me->postal) 
			if $merge_me->postal 
			&& (not defined $prefer->postal);

		$prefer->country($merge_me->country) 
			if $merge_me->country 
			&& (not defined $prefer->country);

		$prefer->tz($merge_me->tz) 
			if $merge_me->tz 
			&& (not defined $prefer->tz);

		$prefer->phone($merge_me->phone) 
			if $merge_me->phone 
			&& (not defined $prefer->phone);

		$prefer->provider($merge_me->provider) 
			if $merge_me->provider 
			&& (not defined $prefer->provider);

		$prefer->googleplus($merge_me->googleplus) 
			if $merge_me->googleplus 
			&& (not defined $prefer->googleplus);

		$merge_me->delete;

	}

	my $msg .= "Merged $merge_string into ".$prefer->email;

	$m->redirect("person_merge.mhtml?target_id=$target_id&search_first=$search_first&search_last=$search_last&search_email=$search_email&msg=$msg");

</%init>
