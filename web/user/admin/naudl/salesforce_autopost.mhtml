<%args>
	$testing  => undef
	$tourn_id => undef
</%args>
<%init>

	use JSON;
	use MIME::Base64;
	use REST::Client;
	use Data::Dumper;

	my $date_limit = "2017-06-01 00:00:00";

	my $result_text;

	Tab::Tourn->columns(TEMP => "naudl_league");

	Tab::Tourn->set_sql( naudl_oneoff => "
		select tourn.*, naudl.value as naudl_league
		from (tourn, tourn_circuit, circuit)
		left join circuit_setting naudl 
			on circuit.id = naudl.circuit
			and naudl.tag = 'naudl_league_code'
		where tourn.id = ? 
		and tourn.id = tourn_circuit.tourn
		and circuit.id = tourn_circuit.circuit
	");

	Tab::Tourn->set_sql( naudl_attendance => "
		select tourn.*, naudl.value as naudl_league
		from (tourn, tourn_circuit, circuit)
		left join circuit_setting naudl 
			on circuit.id = naudl.circuit
			and naudl.tag = 'naudl_league_code'

			where tourn.start > ? 
			and tourn.end < NOW()
			and tourn.hidden != 1
			and tourn.id = tourn_circuit.tourn
			and circuit.id = tourn_circuit.circuit

			and not exists ( 
				select tourn_setting.id
				from tourn_setting
				where tourn_setting.tourn = tourn.id
				and tourn_setting.tag = 'naudl_processed'
			)

			and exists (
				select school.id
				from school, chapter, chapter_circuit, region, circuit_setting
				where school.tourn = tourn.id
				and school.chapter = chapter.id
				and chapter.naudl = 1
				and chapter_circuit.chapter = chapter.id
				and chapter_circuit.region = region.id
				and chapter_circuit.circuit = circuit_setting.circuit
				and circuit_setting.tag = 'naudl'
			)

		group by tourn.id
		order by tourn.id desc
		limit 1
	");

	my @tourns;
	
	if ($tourn_id) { 

		@tourns = Tab::Tourn->search_naudl_oneoff($tourn_id);
		Tab::log("Posting NAUDL results for ".$tourns[0]->id." ".$tourns[0]->name);

	} else { 
		@tourns = Tab::Tourn->search_naudl_attendance($date_limit);
	}

	my %json_tourns = ();

	my $password = $Tab::naudl_password;
	$password .= $Tab::naudl_token;

	my $query = "curl https://login.salesforce.com/services/oauth2/token -d 'grant_type=password' -d 'client_id=$Tab::naudl_client_id' -d 'client_secret=$Tab::naudl_client_secret' -d 'username=$Tab::naudl_username' -d 'password=$password' ";

	my $response = `$query`;

	my %response_data = %{decode_json($response)};

	my $nottfirst;

	foreach my $tourn (@tourns) { 
	
		my %posted_tournaments; 

		my $league = $tourn->naudl_league;
		$league = "a0IE0000004hec4" unless $league;

		my $location = $tourn->city.", " if $tourn->city;
		$location .= $tourn->state;

		my %tourn_info = (
			TournID         => "TR".$tourn->id,
			Name            => $tourn->name,
			Location        => $location,
			Tournament_Date => DateTime::Format::MySQL->format_datetime($tourn->start),
			League          => $league
		);

		push @{$posted_tournaments{"posted_tournaments"}}, \%tourn_info;

		my $client = REST::Client->new(
			host => $response_data{"instance_url"}
		);

		unless ($testing) { 

			$client->POST( $Tab::naudl_tourn_endpoint,
				encode_json(\%posted_tournaments),
				{	
					'Authorization' => "OAuth ".$response_data{"access_token"},
					'Content-Type'  => 'application/json',
					'Accept'        => 'application/json'
				}
			);

			my $response = decode_json($client->responseContent());

			if ($response->{"success"} eq "true") { 
				$result_text .= "\nTournaments posting SUCCEEDED!\n";
			} else { 
				$result_text .= "\nTournaments posting FAILED:\n";

			}

			foreach my $key (keys %{$response}) { 
				$result_text .= "\t$key: ".$response->{$key}."\n";
			}

			$result_text .= "\n";

		} else { 

			$result_text .= "Tournament data:\n";
			$result_text .= encode_json(\%posted_tournaments);

		}

		my ($new, $updated, $sta) = $m->comp(
			"salesforce_tournament.mhtml", 
			tourn => $tourn
		);

		my @done_student_ids;

		my $limit = 1; 

		unless ($testing) { 

			if ($new) { 

				foreach my $student (@{$new->{"students_from_tabroom"}}) { 

					next if $limit-- < 1;

					Tab::debuglog("Student is $student");

					my %student_record = ();

					push @{$student_record{"students_from_tabroom"}}, $student;

					Tab::debuglog(Dumper(%student_record));

					$client->POST( $Tab::naudl_student_endpoint,
						encode_json(\%student_record),
						{
							'Authorization' => "OAuth ".$response_data{"access_token"},
							'Content-Type'  => 'application/json',
							'Accept'        => 'application/json'
						}
					);

					Tab::debuglog($client->responseContent());

					my $response = decode_json($client->responseContent());

					if ($response->{"success"} eq "true") { 
						$result_text .= "\nNew students posting SUCCEEDED!\n";
					} else { 
						$result_text .= "\nNew students posting FAILED:\n";

						$result_text .= "\nInput:\n";
						$result_text .= encode_json(\%student_record);
					}

					foreach my $key (keys %{$response}) { 
						$result_text .= "\t$key: ".$response->{$key}."\n";
					}
				}


			} 

			if ($updated) { 

				$client->PUT( $Tab::naudl_student_endpoint,
					encode_json($updated),
					{
						'Authorization' => "OAuth ".$response_data{"access_token"},
						'Content-Type'  => 'application/json',
						'Accept'        => 'application/json'
					}
				);

				my $response = decode_json($client->responseContent());

				if ($response->{"success"} eq "true") { 
					$result_text .= "\nStudent update posting SUCCEEDED!\n";
				} else { 
					$result_text .= "\nStudent update posting FAILED:\n";
				}

				foreach my $key (keys %{$response}) { 
					$result_text .= "\t$key: ".$response->{$key}."\n";
				}

			}

			$result_text .="\nUPDATED: $updated\n";

			if ($sta) { 

				$client->POST( $Tab::naudl_sta_endpoint,
					encode_json($sta),
					{
						'Authorization' => "OAuth ".$response_data{"access_token"},
						'Content-Type'  => 'application/json',
						'Accept'        => 'application/json'
					}
				);

				my $response = decode_json($client->responseContent());

				$result_text .= "\n\nSTA Update post:\n";

				if ($response && $response->{"success"} eq "true") { 
					$result_text .= "\nStudent Tournament Records posting SUCCEEDED!\n";
				} else { 
					$result_text .= "\nStudent Tournament Records FAILED:\n";
				}

				foreach my $key (keys %{$response}) { 
					$result_text .= "\t$key: ".$response->{$key}."\n";
				}

			}

		} else { 

			if ($new) { 
				$result_text .= "\n\nNew students:\n";
				$result_text .= encode_json($new);
			}

			if ($updated) { 
				$result_text .= "\n\nUpdated students:\n";
				$result_text .= encode_json($updated);
			}

			if ($sta) { 
				$result_text .= "\n\nStudent attendance:\n";
				$result_text .= encode_json($sta);
			}

		}

	}

	if (@tourns) { 

		my @lukes = $m->comp("/funclib/naudl_admins.mas");

		my $subject = "Tabroom NAUDL data post";
		my $from = "Tabroom Data <devnull\@tabroom.com>";

		foreach my $luke (@lukes) { 

			$m->comp( 
				"/funclib/send_email.mas", 
					from_string => $from,
					to          => $luke,
					subject     => $subject,
					body        => $result_text
			);  
		}

		if ($tourn_id) { 

			$m->clear_buffer();
			$r->content_type('application/json');
			$m->print('{ "error": false, "message": "'.$tourns[0]->name.' posted again"}');
			$m->abort();

		} elsif ($testing) { 

			$m->clear_buffer();
			$r->content_type('text/plain');
			$m->print($result_text);
			$m->abort();

		}  else { 

			$m->clear_buffer();
			$r->content_type('text/plain');
			$m->print($result_text);
			$m->abort();

		}  

	} else { 

		$m->clear_buffer();
		$r->content_type('application/json');
		$m->print('{ "error": true, "message": "No tournaments found."}');
		$m->abort();


	}


</%init>
