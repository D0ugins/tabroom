<%args>
	$startdate
	$enddate
	$circuit_id
	$internal => undef
</%args>
<%flags>
	inherit => undef
</%flags>
<%init>

	my $start;
	my $end;

	my $now = DateTime->now;
	my $circuit = Tab::Circuit->retrieve($circuit_id);

	eval{
		$start = Tab::dateme($startdate);
		$end = Tab::dateme($enddate);
	};

	unless ($start) {
		$start = $now;
	}

	unless ($end) {
		$end = $start->clone;
		$end->subtract(days => 7);
	}

	# Find the tournaments who have competed in that time frame with NAUDL entrants

	Tab::School->columns(TEMP => qw/region_code/);

	Tab::School->set_sql( naudl_competed => "
		select school.*, region.code as region_code
		from chapter, school, tourn, region, chapter_circuit
		where chapter.naudl = 1
		and chapter.id = school.chapter
		and school.tourn = tourn.id
		and chapter.id = chapter_circuit.chapter
		and chapter_circuit.circuit = ?
		and chapter_circuit.region = region.id
		and tourn.end > ?
		and tourn.end < ?
		group by school.id
		order by tourn.start
	");

	my @schools = Tab::School->search_naudl_competed(
		$circuit->id,
		DateTime::Format::MySQL->format_datetime($start),
		DateTime::Format::MySQL->format_datetime($end)
	);

    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";

	$r->content_type('application/csv');
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	$m->print("tourn.id,tourn.name,tourn.startdate,tourn.location,");
	$m->print("section.id,judge.name,round,section.name,section.unique,");
	$m->print("event.name,division,pdi.id,speechwire.id,speaker.points,");
	$m->print("rank,side,winloss\r\n");

	my %tourn_circuit;

	foreach my $school (@schools) {

		my $tourn = $school->tourn;

		my $dbh = Tab::DBI->db_Main();
		my $sth = $dbh->prepare("
			select value.id, value.tag, value.value, value.student,
				ballot.entry, ballot.judge, panel.bye, ballot.bye, ballot.forfeit,
				ballot.chair, round.name, ballot.side, panel.id, panel.letter, ballot.id
			from (ballot, panel, round, event, entry)
			left join score value on value.ballot = ballot.id
			where ballot.panel = panel.id
			and panel.round = round.id
			and round.event = event.id
			and ballot.entry = entry.id
			and entry.school = ?
			and event.type != 'speech'
			and event.type != 'congress'
			order by round.name, ballot.entry, value.student, ballot.chair, ballot.judge,
				CASE value.tag
					WHEN 'winloss' then 1
					when 'rank' then 2
					when 'point' then 3
				end
		");

		$sth->execute($school->id);

		my %entries;
		my %students;

		my %entry_round;
		my %entry_round_winloss;
		my %entry_round_side;
		my %entry_round_section;
		my %entry_round_ballot;
		my %entry_round_section_letter;
		my %entry_round_judges;

		my %entry_ballots;
		my $notfirst;

		while (
			my (
				$id, $tag, $value, $student_id, $entry_id,
				$judge, $pbye, $bye, $forfeit, $chair,
				$roundname, $side,
				$panel, $letter, $ballot
			) = $sth->fetchrow_array()
		) {

			$entry_ballots{$entry_id}++;

			if ($pbye) {
				$entries{$entry_id}{"winloss"}{$roundname}{$judge} = "Bye"
			} elsif ($bye) {
				$entries{$entry_id}{"winloss"}{$roundname}{$judge} = "Bye"
			} elsif ($forfeit) {
				$entries{$entry_id}{"winloss"}{$roundname}{$judge} = "FFT"
			} elsif ($tag eq "winloss") {
				push @{$entry_round_judges{$entry_id."-".$roundname}}, $judge;

				$entries{$entry_id}{"side"}{$roundname}{$judge} = "Aff" if $side == 1;
				$entries{$entry_id}{"side"}{$roundname}{$judge} = "Neg" if $side == 2;

				$entries{$entry_id}{"winloss"}{$roundname}{$judge} = "-" if $value == 0;
				$entries{$entry_id}{"winloss"}{$roundname}{$judge} = "L" if $value == 0;
				$entries{$entry_id}{"winloss"}{$roundname}{$judge} = "W" if $value == 1;

				$entries{$entry_id}{"section"}{$roundname}{$judge} = $panel;
				$entries{$entry_id}{"letter"}{$roundname}{$judge} = $letter;

			} elsif ($tag eq "point") {

				if ($students{$student_id}{"point"}{$roundname}{$judge}) {
					$students{$student_id}{"point"}{$roundname}{$judge} .= ", ";
				}

				$students{$student_id}{"point"}{$roundname}{$judge} .= $value;
				$students{$student_id}{"ballot"}{$roundname}{$judge} = $id;
			} elsif ($tag eq "rank") {
				$students{$student_id}{"rank"}{$roundname}{$judge} .= $value." ";
			}
		}

		my $tourn_id = "TR".$tourn->id;
		my $tourn_name = $tourn->name;
		my $tourn_start = $tourn->start->set_time_zone($tourn->tz);
		$tourn_start->set_time_zone("UTC");

		my $start_string = $tourn_start->year."-".$tourn_start->month."-".$tourn_start->day."T00:00:00.00Z";
		my $tourn_place = $tourn->state;

		foreach my $event ($tourn->events) {

			next if $event->type eq "speech";
			next if $event->type eq "congress";

			my @all_rounds = sort {$a->name <=> $b->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");

			my @rounds;
			foreach my $round (@all_rounds) {
				push @rounds, $round;
			}

			my @judges = $m->comp("/funclib/event_judges.mas", event => $event);
			my %judge_name_by_id = map { $_->id => $_->first." ".$_->last } @judges;

			my $event_name = $event->type."-".$event->name;
			my $event_level = $event->setting("level");

			my $level = $event->name;

			foreach my $student ($m->comp("/funclib/event_students.mas", event => $event, by_results => 1)) {

				my $entry_id = $student->entry;
				my $student_id = $student->id;

				foreach my $round (@rounds) {

					my $roundname = $round->name;
					next if $round->type eq "elim";
					next if $round->type eq "final";

					foreach my $judge (@{$entry_round_judges{$entry_id."-".$roundname}}) {

						my $side = substr($entries{$entry_id}{"side"}{$roundname}{$judge},0,1);

						my $winloss  = $entries{$entry_id}{"winloss"}{$roundname}{$judge};
						my $section = $entries{$entry_id}{"section"}{$roundname}{$judge};
						my $letter  = $entries{$entry_id}{"letter"}{$roundname}{$judge};

						my $rank = $students{$student_id}{"rank"}{$roundname}{$judge};
						my $points = $students{$student_id}{"point"}{$roundname}{$judge};

						my $ballot = $students{$student_id}{"ballot"}{$roundname}{$judge};

						next unless $winloss;
						next if $winloss eq "FFT" || $winloss eq "Bye";
						next unless $rank || $points;

						$m->print('"'.$tourn_id.'","'.$tourn_name.'","'.$start_string.'","'.$tourn_place.'","TR'.$section.'","'.$judge_name_by_id{$judge}.'","'.$roundname.'","'.$letter.'","T'.$tourn_id."S".$section.'","'.$event_name.'","'.$level.'","TR'.$ballot.'","TR'.$student_id.'","'.$points.'","'.$rank.'","'.$side.'","'.$winloss.'"'."\r\n");

					}
				}
			}

			my @elims;

			foreach my $round (@rounds) {
				push @elims, $round if $round->type eq "final";
				push @elims, $round if $round->type eq "elim";
			}

			my @labels = ("F", "S", "Q", "O", "D", "T");
			@elims = sort {$b->name <=> $a->name} @elims;

			foreach my $round (@elims) {

				my $letter = shift @labels;
				my $roundname = substr($round->label,0,1);
				$roundname = $letter unless $roundname;

				foreach my $panel ($round->panels) {

					next if $panel->bye;
					my $letter = $panel->letter;
					my $section = $panel->id;

					my ($winner, $winningside) = $m->comp(
						"/funclib/panel_winner.mas",
							panel => $panel,
							noob  => 1
					);

					foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {

						next unless $entry->school == $school->id;

						my $winloss = "L";
						$winloss = "W" if $winner == $entry->id;

						my $side = "A";
						$side = "N" if $entry->side == 2;

						my $ballot = $entry->ballot;
						my $counter;

						foreach my $student ($entry->students) {
							my $student_id = $student->id;
							$counter++;

							# I'm sure there's some perl module that does this
							# sanely but since when did sanity govern anything
							# around here?

							$m->print('"'.$tourn_id.'","'.$tourn_name.'","'.$start_string.'","');
							$m->print($tourn_place.'","TR'.$section.'","ELIM","'.$roundname.'","');
							$m->print($letter.'","T'.$tourn_id."S".$section.'","'.$event_name.'","');
							$m->print($level.'","TR'.$ballot.'-'.$counter.'","TR'.$student_id);
							$m->print('",..,..,"'.$side.'","'.$winloss.'"'."\r\n");
						}
					}
				}
			}
		}
	}

</%init>
