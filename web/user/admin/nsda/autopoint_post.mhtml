<%args>
	$tourn_id
	$person
	$disable_previous => undef
</%args>
<%init>

	use Math::Round;
	use Tab::NSDA::APT;
	use Tab::NSDA::EventCategory;
	use Tab::NSDA::Event;
	use Tab::NSDA::Instance;
	use Tab::NSDA::Login;
	use Tab::NSDA::MemberSchool;
	use Tab::NSDA::Person;
	use Tab::NSDA::PersonSchool;
	use Tab::NSDA::Points;
	use Tab::NSDA::PostedPoints;
	use Tab::NSDA::APT;
	use Tab::NSDA::AltStudent;
	use Tab::NSDA::School;
	use Tab::NSDA::SpeechCategories;

	my $tourn = Tab::Tourn->retrieve($tourn_id);
	my %tourn_settings = $tourn->all_settings;

	my $now = DateTime->now();

	# This should be A for actually posting, N for testing, and X for expired.
	# I didn't come up with the letter codes, don't blame me. 

	my $status = "A"; 

	if ($ARGS{"attach"}) { 

		#IGNORE!

	} elsif ($person->id != 1 && $tourn_settings{"nsda_points_posted"}) { 

		my $err = $tourn->name."'s NSDA points have already been posted";

		$m->redirect("autopoint.mhtml?tourn_id=$tourn_id&err=$err");

	} elsif ($person->id == 1 && $tourn_settings{"nsda_points_posted"}) { 

		$status = "N";
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $tourn->start->set_time_zone($tz);
	my $end = $tourn->end->set_time_zone($tz);

	my $site = $tourn->sites->first;
	my $location = $site->name if $site;

    my $dbh = Tab::DBI->db_Main(); 

    my $sth = $dbh->prepare('
        select 
			entry.id, entry.code, entry.school, 
			student.id, student.ualt_id, student.first, student.last, 
			chapter.nsda, chapter.state, school.name,
			student_coach.value, entry_coach.value
        from (entry, school)
        left join entry_student on entry_student.entry = entry.id
        left join student on student.id = entry_student.student
		left join chapter on student.chapter = chapter.id
		left join student_setting student_coach
			on student_coach.student = student.id
			and student_coach.tag = "nsda_coach"

		left join entry_setting entry_coach
			on entry_coach.entry = entry.id
			and entry_coach.tag = "nsda_points_coach"

        where school.tourn = ?
        and entry.school = school.id
        and entry.id = entry_student.entry
	');

    $sth->execute($tourn->id);

	my %entry_nsda   = ();
	my %student_nsda = ();
	my %student_data = ();
	my %alt_student = ();

	my %chapter_nsda = ();
	my %school_by_chapter = ();
	my %chapter_state = ();
	my %chapter_name = ();

	my @nsda_chapters; 

	while( 
		my (
			$entry_id, $entry_code, $entry_school,
			$student_id, $student_ualt_id, $student_first, $student_last,
			$chapter_nsda, $chapter_state, $school_name,
			$student_coach, $entry_coach
		) = $sth->fetchrow_array()
	) { 	

		next unless $student_ualt_id;

		$entry_nsda{$entry_id}{"code"} = $entry_code;

		if ($chapter_nsda) { 

			$entry_nsda{$entry_id}{"chapter"} = $chapter_nsda;

			$student_nsda{$student_id}{"chapter"} = $chapter_nsda;
	
		} elsif ($student_nsda{$student_id}{"chapter"}) { 

			$chapter_nsda = $student_nsda{$student_id}{"chapter"};

			$entry_nsda{$entry_id}{"chapter"} = $chapter_nsda;

			$student_nsda{$student_id}{"chapter"} = $chapter_nsda;

		} else { 

			my @person_schools = 
				Tab::NSDA::PersonSchool->search( 
				ualt_id => $student_ualt_id,
				enddate => "0000-00-00 00:00:00"
			);

			@person_schools = 
				sort {$b->startdate->epoch <=> $a->startdate->epoch} 
				@person_schools;

			my $person_school = shift @person_schools;  
				# gets the most recent up to date chapter connection

			$entry_nsda{$entry_id}{"chapter"} 
				= $person_school->school_id->school_id;

			$student_nsda{$student_id}{"chapter"} 
				= $person_school->school_id->school_id;
		}


		$school_by_chapter{$entry_nsda{$entry_id}{"chapter"}} = $entry_school;

		$chapter_state{$entry_nsda{$entry_id}{"chapter"}} = $chapter_state;

		$chapter_name{$entry_nsda{$entry_id}{"chapter"}} = $school_name;

		push @nsda_chapters, $entry_nsda{$entry_id}{"chapter"};

		$entry_nsda{$entry_id}{"school"} = $entry_school;
		$entry_nsda{$entry_id}{"codel"} = $entry_code;
		$student_nsda{$student_id}{"school"} = $entry_school;

		push @{$entry_nsda{$entry_id}{"students"}}, $student_id;

		$student_data{$student_id}{"name"} = $student_first." ".$student_last;

		$entry_nsda{$entry_id}{"coach"} = $entry_coach;
		$student_data{$student_id}{"coach"} = $student_coach;

		unless ($alt_student{"school_".$entry_school}) { 

			my @alts = Tab::NSDA::AltStudent->search( 
				nfl_school_id => $chapter_nsda
			);

			foreach my $alt (@alts) { 

				$alt_student{$alt->alt_id} = $alt->nfl_student_id 
					if $alt->nfl_student_id;

				$alt_student{$alt->alt_id} = "exists" 
					unless $alt->nfl_student_id;
			}

			$alt_student{"school_".$entry_school}++;
		}

		if ($student_ualt_id) { 

			$student_data{$student_id}{"ualt"} = $student_ualt_id;

		} elsif ($alt_student{$student_id} && $alt_student{$student_id} ne "exists") { 

			$student_data{$student_id}{"ualt"} = $alt_student{$student_id};

			my $student = Tab::Student->retrieve($student_id);

			$student->ualt_id($alt_student{$student_id});

			$student->update();
		}
	}

	my %seen = (); 

	@nsda_chapters = grep { ! $seen{$_} ++ } @nsda_chapters;

	if (@nsda_chapters) { 

		my $instance;

		if ($ARGS{"attach"}) { 

			$instance = Tab::NSDA::Instance->search(
				tourn_id => $tourn->id,
				source   => "TR",
				status   => "A"
			)->first;

			Tab::debuglog("Existing instance $instance found");

		} else { 

			$instance = Tab::NSDA::Instance->create({
				status     => $status,
				tourn_id   => $tourn->id,
				source     => "TR",
				start_date => $start->year."-".$start->strftime('%m')."-".$start->strftime('%d'),
				end_date   => $end->year."-".$end->strftime('%m')."-".$end->strftime('%d'),
				tournament => $tourn->name,
				location   => $location,
				state      => $tourn->state,
				tstamp     => $now,
				type       => 1
			});

		}

		# Replace the use marker with the actual school object.  Only for
		# schools linked.

		foreach my $chapter_id (@nsda_chapters) { 

			next unless $chapter_id;

			my $state     = $chapter_state{$chapter_id};
			my $name      = $chapter_name{$chapter_id};
			my $school_id = $school_by_chapter{$chapter_id};

			$state = " " unless $state;

			my $nsda_school;

			if ($ARGS{"attach"}) { 

				$nsda_school = Tab::NSDA::School->search( 
					instance_id   => $instance->id,
					school_id     => $school_id,
					nfl_school_id => $chapter_id,
				)->first;

			}

			unless ($nsda_school) { 

				$nsda_school = Tab::NSDA::School->create({
					instance_id   => $instance->id,
					school_id     => $school_id,
					state         => $state,
					name          => $name,
					nfl_school_id => $chapter_id,
					alt_id        => $school_id
				});

			}

		}

		EVENT:
		foreach my $event ($tourn->events) { 

			next if $ARGS{"exclude_".$event->id};

			my $nsda_event_category;
			my $nsda_cat;
			my $nsda_subcat;
			my $nsda_event;

			my %student_apts;
			my %student_entry;

			if ($ARGS{"attach"}) { 

				$nsda_event = Tab::NSDA::Event->search(
					instance_id   => $instance->id,
					event_id      => $event->id,
				)->first;

			}

			if ($event->type eq "congress") { 

				$nsda_cat    = 2;
				$nsda_cat    = 3 if $tourn_settings{"nsda_district"};
				$nsda_cat    = 4 if $tourn_settings{"nsda_nats"};
				$nsda_subcat = 2;

				my $points_cap = 24;
				$points_cap = 30 if $tourn_settings{"nsda_ms_nats"};
				$points_cap = 314159 if $tourn_settings{"nsda_nats"};

				unless ($nsda_event) { 

					$nsda_event = Tab::NSDA::Event->create({
						instance_id   => $instance->id,
						event_id      => $event->id,
						type          => "C",
						size          => 1,
						name          => $event->name,
						category      => -1,
						alt_id        => $event->id,
						nfl_cat_id    => $nsda_cat,
						nfl_subcat_id => $nsda_subcat
					});

				}

   				my $congress_sth = $dbh->prepare("
					select distinct student.id, student.ualt_id, 
						entry.id, entry.code,
						chapter.nsda,
						score.id, score.speech, score.value,
						panel.id,
						ballot.id, 
						round.name,
						timeslot.start
					from student, panel, ballot, score, round, 
						timeslot, entry, entry_student, chapter
					where round.event = ?
					and panel.round = round.id  
					and round.timeslot = timeslot.id
					and ballot.panel = panel.id   
					and ballot.id = score.ballot   
					and ballot.entry = entry.id
					and entry.id = entry_student.entry
					and entry_student.student = student.id  
					and score.tag = 'congress_speech'
					and student.chapter = chapter.id
					group by score.id 
					order by student.id, round.id, score.speech
                ");

				$congress_sth->execute($event->id); 

				my %score; 
				my %students;
				
				while ( my (
					$student_id, $student_ualt_id, 
					$entry_id, $entry_code,
					$chapter_nsda, 
					$id, $speech, $score_value,
					$panel_id,
					$ballot_id, 
					$round_name,
					$timeslot_start
					) = $congress_sth->fetchrow_array() 
				) { 

					$students{$student_id}{"ualt_id"} = $student_ualt_id;
					$students{$student_id}{"code"} = $entry_code;

					push @{$students{$student_id}{"entries"}}, $entry_id;

					# I hereby apologize to everyone on earth for the following
					# data structure.

					if ($score_value) { 

						$students{$student_id}{"scores"}{$round_name}{$speech}{"count"}++;
						$students{$student_id}{"scores"}{$round_name}{$speech}{"total"} += $score_value;

						$students{$student_id}{"scores"}{$round_name}{$speech}{"start"} = $timeslot_start;

						$students{$student_id}{"result"} .= ", " if $students{$student_id}{"result"};
						$students{$student_id}{"result"} .= $score_value;
					}

				}

				my $tz = $tourn->tz;
				$tz = "UTC" unless $tz;

				my $num_day;
				my $count;

				foreach my $day (
					$m->comp("/funclib/tourn_days.mas", tourn => $tourn)
				) { 

					$num_day++;

					$day->set_time_zone($tz);
					$day->set_time_zone("UTC");

					my $end_day = $day->clone();
					$end_day->add(hours => 24);

					my $day_start = DateTime::Format::MySQL->format_datetime($day);
					my $day_end = DateTime::Format::MySQL->format_datetime($end_day);

					$day_start =~ s/[\D_]//g;
					$day_start =~ s/\s+//g;;

					$day_end =~ s/[\D_]//g;
					$day_end =~ s/\s+//g;;

					STUDENT:
					foreach my $student_id (keys %students) {

						my $ualt = $student_data{$student_id}{"ualt"};
						next unless $ualt;

						my $name = $student_data{$student_id}{"name"};

						my $school_id = $student_nsda{$student_id}{"school"};

						my $nfl_school_id  = $student_nsda{$student_id}{"chapter"};

						my $day_total;

						my %done;

						foreach my $entry_id (@{$students{$student_id}{"entries"}}) { 

							next if $done{$entry_id}++;

							ROUND:
							foreach my $round_name (
								sort keys %{$students{$student_id}{"scores"}}
							) { 

								foreach my $speech (
									sort keys %{$students{$student_id}{"scores"}{$round_name}}
								) { 

									my $timeslot_start 
										= $students{$student_id}{"scores"}{$round_name}{$speech}{"start"};

									$timeslot_start =~ s/[\D_]//g;
									$timeslot_start =~ s/\s+//g;

									next ROUND if $timeslot_start > $day_end;
									next ROUND if $timeslot_start < $day_start;

									my $total 
										= $students{$student_id}{"scores"}{$round_name}{$speech}{"total"};

									my $num_scores 
										= $students{$student_id}{"scores"}{$round_name}{$speech}{"count"};
							

									my $average = round($total / $num_scores) if $num_scores;

									$day_total += $average;
							
								}

							}

							$day_total = $points_cap if $day_total > $points_cap;

							next unless $day_total;

							Tab::NSDA::Points->create({
								id             => $count++,
								instance_id    => $instance->id,
								type           => "C",
								round          => $num_day,
								result         => $day_total,
								event_id       => $event->id,
								entry_id       => $entry_id,
								student_id     => $student_id,
								school_id      => $school_id,
								name           => $name,
								alt_entry_id   => $entry_id,
								alt_student_id => $student_id,
								nfl_school_id  => $nfl_school_id,
								nfl_student_id => $ualt
							});

							my $APT = Tab::NSDA::APT->create({
								instance_id      => $instance->id,
								nfl_school_id    => $nfl_school_id,
								nfl_student_id   => $ualt,
								round            => $num_day,
								result           => "",
								event_cat_id     => $nsda_cat,
								event_sub_cat_id => $nsda_subcat,
								alt_event_id     => $event->id,
								points           => $day_total,
								type             => "C"
							}); 

							push @{$student_apts{$student_id}}, $APT;
							$student_entry{$student_id} = $entry_id;
							
							if (not defined $alt_student{$student_id}) { 

								Tab::NSDA::AltStudent->create({
									source        => "TR",
									nfl_school_id => $nfl_school_id,
									alt_id        => $student_id,
									name          => $name
								});

								$alt_student{$student_id}++;

							}

						}

					}

				}

			} else { 

				next EVENT unless $ARGS{$event->id};

				$nsda_event_category = Tab::NSDA::EventCategory->retrieve($ARGS{$event->id});

				next EVENT unless $nsda_event_category;

				$event->setting("nsda_event_category", $ARGS{$event->id});
		
				$nsda_cat = 0;
				$nsda_cat = 1 if $event->type eq "speech";
				$nsda_subcat = $nsda_event_category->code;

				$nsda_cat = 3 if $tourn_settings{"nsda_district"};
				$nsda_cat = 4 if $tourn_settings{"nsda_nats"};

				my $size = $event->setting('max_entry');
				$size = 1 unless $size;

				$nsda_event = Tab::NSDA::Event->create({
					instance_id   => $instance->id,
					event_id      => $event->id,
					type          => uc($nsda_event_category->type),
					size          => $size,
					name          => $event->name,
					category      => -1,
					alt_id        => $event->id,
					nfl_cat_id    => $nsda_cat,
					nfl_subcat_id => $nsda_subcat
				}) unless $nsda_event;

				Tab::Student->set_sql( spoke_in_round => "

					select distinct student.* 

					from student, panel, ballot, score, entry_student

					where panel.round = ?
					and ballot.panel  = panel.id
					and ballot.id     = score.ballot
					and ballot.entry  = entry_student.entry
					and entry_student.student = student.id
					and score.student = entry_student.student

					and (
						score.tag    = 'points'
						or score.tag = 'rank'
						or score.tag = 'ballot'
					)   

				");

				foreach my $round ($event->rounds) { 

					my @spoke = Tab::Student->search_spoke_in_round($round->id);

					my %spoke_in_round = map {$_->id => 1} @spoke;

					my $nsda_tiebreak_set = Tab::TiebreakSet->search(
						name => "NSDA Debate Points Elim",
						tourn => $tourn->id
					)->first if $tourn_settings{"nsda_nats"};

					my (@results) = $m->comp(
						"/tabbing/results/order_entries.mas", 
							round        => $round,
							nsda         => 1,
							tiebreak_set => $nsda_tiebreak_set
						);

					my $entries_ref = pop @results;

					my ($bye_ref, $fft_ref) 
						= $m->comp("/funclib/entry_byes.mas", 
							event    => $event,
							round    => $round,
							last     => 1,
							forfeits => 1
						);

					my %entry_order;
					my %entry_result;
					my %panel_entries;
					my %entry_points;
					my %panel_round;

					foreach my $key (sort {$a <=> $b} keys %{$entries_ref->{"by_place"}}) {

						foreach my $entry_id (@{$entries_ref->{"by_place"}{$key}}) {

							$entry_order{$entry_id} = $key;

							my $section = $entries_ref->{"section"}{$entry_id};

							push @{$panel_entries{$section}}, $entry_id; 

						}

					}

					if ($event->type eq "speech") { 

						foreach my $panel ( keys %panel_entries ) { 

							@{$panel_entries{$panel}} = 
								sort {$entry_order{$a} <=> $entry_order{$b}} 
								@{$panel_entries{$panel}};

							my $rank;
							my $last_order;

							my $base_points = 7 - $nsda_event_category->national;
							$base_points = 6 if $tourn_settings{"nsda_ms_nats"};

							my $min_points = 1;
							
							if ($tourn_settings{"nsda_district"}) { 
								$base_points = 9;
								$min_points = 4;
							}

							foreach my $entry (@{$panel_entries{$panel}}) { 

								if (${$fft_ref}{$entry}) {

									$entry_result{$entry} = "F";
									$entry_points{$entry} = 0;

								} else {

									unless ($last_order == $entry_order{$entry}) {
										$last_order = $entry_order{$entry};
										$rank++;
									}

									$entry_result{$entry} = $rank;
									$entry_points{$entry} = $base_points - $rank;

									$entry_points{$entry} = $min_points 
										if ($entry_points{$entry} < $min_points)
											&& (defined $rank);


								}
							}
						}

					} elsif ($event->type eq "wsdc") { 

						foreach my $panel ( keys %panel_entries ) { 

							@{$panel_entries{$panel}} = 
								sort {$entry_order{$a} <=> $entry_order{$b}} 
								@{$panel_entries{$panel}};

							my $win_points = 6 - ($nsda_event_category->national * 2);
							$win_points = 6 if $event->setting("usa_wsdc");

							$win_points = 4 if $tourn_settings{"nsda_ms_nats"};

							my $win = 1;

							foreach my $entry (@{$panel_entries{$panel}}) { 
							
								if (${$fft_ref}{$entry}) {
									$entry_result{$entry} = "F";
									$entry_points{$entry} = 0;
								} elsif (${$bye_ref}{$entry}) {
									$entry_result{$entry} = "B";
									$entry_points{$entry} = 0;
								} elsif ($win) { 
									$entry_result{$entry} = "W";
									$entry_points{$entry} += $win_points;
									undef $win;
								} else { 
									$entry_result{$entry} = "L";
									$entry_points{$entry} += $win_points / 2;
								}
							}
						}

					} else { 

						foreach my $panel ( keys %panel_entries ) { 

							@{$panel_entries{$panel}} = 
								sort {$entry_order{$a} <=> $entry_order{$b}} 
								@{$panel_entries{$panel}};

							my $win_points = 6 - ($nsda_event_category->national * 2);
							$win_points = 4 if $tourn_settings{"nsda_ms_nats"};
							my $loss_points = $win_points / 2;

							if ($tourn_settings{"nsda_district"}) { 
								$win_points = 8;
								$loss_points = 5;
							}

							if ($tourn_settings{"nsda_nats"}) { 
								$win_points = 8 - ($nsda_event_category->national * 2);
								$win_points = 6 if $event->setting("not_nats");
								$loss_points = $win_points / 2;
							}

							my $win = 1;

							foreach my $entry (@{$panel_entries{$panel}}) { 

								if (${$fft_ref}{$entry}) {
									$entry_result{$entry} = "F";
									$entry_points{$entry} = 0;
								} elsif (${$bye_ref}{$entry}) {
									$entry_result{$entry} = "B";
									$entry_points{$entry} = 0;
								} elsif ($win) { 
									$entry_result{$entry} = "W";
									$entry_points{$entry} += $win_points;
									undef $win;
								} else { 
									$entry_result{$entry} = "L";
									$entry_points{$entry} += $loss_points;
								}
							}
						}
					}

					my $count;

					foreach my $panel ( keys %panel_entries ) { 

						foreach my $entry (@{$panel_entries{$panel}}) { 

							next unless $entry_nsda{$entry};

							next unless $entry_nsda{$entry}{"chapter"};

							next unless $entry_nsda{$entry}{"students"};

							next unless $entry_result{$entry};

							my $school_id = $entry_nsda{$entry}{"school"};
							my $nfl_school_id  = $entry_nsda{$entry}{"chapter"};

							STUDENT:
							foreach my $student (@{$entry_nsda{$entry}{"students"}}) {

								my $ualt = $student_data{$student}{"ualt"};
								my $name = $student_data{$student}{"name"};

								if ($event->type eq "wsdc") { 

									$school_id = $student_nsda{$student}{"school"};
									$nfl_school_id  = $student_nsda{$student}{"chapter"};
									
									unless ($round->type eq "elim" || $round->type eq "final") { 
										next STUDENT unless $spoke_in_round{$student};
									}
								}

								Tab::NSDA::Points->create({
									id             => $count++,
									instance_id    => $instance->id,
									type           => uc($nsda_event_category->type),
									round          => $round->name,
									result         => $entry_result{$entry},
									event_id       => $event->id,
									entry_id       => $entry,
									student_id     => $student,
									school_id      => $school_id,
									name           => $name,
									alt_entry_id   => $entry,
									alt_student_id => $student,
									nfl_school_id  => $nfl_school_id,
									nfl_student_id => $ualt
								});

								if ($ualt) { 

									my $APT = Tab::NSDA::APT->create({
										instance_id      => $instance->id,
										nfl_school_id    => $nfl_school_id,
										nfl_student_id   => $ualt,
										round            => $round->name,
										result           => $entry_result{$entry},
										event_cat_id     => $nsda_cat,
										event_sub_cat_id => $nsda_subcat,
										alt_event_id     => $event->id,
										points           => $entry_points{$entry},
										type             => uc($nsda_event_category->type),
									}); 

									$student_entry{$student} = $entry;
									push @{$student_apts{$student}}, $APT;

								} elsif (not defined $alt_student{$student}) { 

									Tab::NSDA::AltStudent->create({
										source        => "TR",
										nfl_school_id => $nfl_school_id,
										alt_id        => $student,
										name          => $name
									});

									$alt_student{$student}++;

								}
							}
						}
					}
				}
			}

			if ($tourn_settings{"nsda_nats"}) { 

				my $tourn_info = $instance->tournament."|".$instance->state;

				$tourn_info .= "|".DateTime::Format::MySQL->format_datetime($tourn->start);
				$tourn_info .= "|".DateTime::Format::MySQL->format_datetime($tourn->end);

				my $event_name = $nsda_event->name;

				Tab::NSDA::Points->set_sql( update_apt => "
					update points.AUTO_POINT_TRANSFER
						set point_id = ? 
						where nfl_student_id = ? 
						and alt_event_id = ? 
				");

				foreach my $student_id (keys %student_apts) { 

					my $entry_id = $student_entry{$student_id};
					my $ualt_id = $student_data{$student_id}{"ualt"};
						
					my $coach_id = $entry_nsda{$entry_id}{"coach"};
					$coach_id = $student_data{$student_id}{"coach"} unless $coach_id;
					next unless $coach_id;

					my $wins         = 0;
					my $losses       = 0;
					my $nds          = 0;
					my $ranks        = 0;
					my $total_points = 0;

					foreach my $apt (
						sort {$a->round <=> $b->round} 
						@{$student_apts{$student_id}}
					) { 

						$wins++ if $apt->result eq "W";
						$losses++ if $apt->result eq "L";
						$nds++ if $apt->result eq "B";
						$nds++ if $apt->result eq "F";

						if ($apt->type eq "S") { 
							$ranks .= "," if $ranks;
							$ranks .= $apt->result;
						}

						$total_points += $apt->points;

					}

					next unless $total_points > 0;

					my $posted_point = Tab::NSDA::PostedPoints->create({
						student_id       => $ualt_id,
						coach_id         => $coach_id,
						event_cat_id     => $nsda_cat,
						event_sub_cat_id => $nsda_subcat,
						wins             => $wins,
						losses           => $losses,
						nodecisions      => $nds,
						ranks            => $ranks,
						event_info       => $tourn_info,
						startdate        => $tourn->start,
						enddate          => $tourn->end,
						event_details    => $event_name,
						description      => $event_name,
						points           => $total_points,
						isAutoPost       => 1
					});

					Tab::NSDA::Points->sql_update_apt->execute(
						$posted_point->point_id,
						$ualt_id, 
						$event->id
					);

				}
			}
		}
	}

    my $description = $person->first." ".$person->last." (".$person->email.") has posted your NSDA points";

    Tab::ChangeLog->create({ 
        type        => 'tabbing',
        tourn       => $tourn->id,
        person      => $person->id,
        description => $description
    }); 

	$tourn->setting("nsda_points_posted", 1);

	$m->redirect("autopoint.mhtml?msg=".$tourn->name." points posted");

</%init>
