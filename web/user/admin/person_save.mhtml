<%args>
	$edit_id
	$first
	$last
	$email
	$middle         => undef
	$phone          => undef
	$provider       => undef
	$street         => undef
	$city           => undef
	$state          => undef
	$country        => undef
	$no_email       => undef
	$zip            => undef
	$site_admin     => undef
	$nsda_admin     => 0
	$naudl_admin    => 0
	$scream_in_pain => 0
	$ualt_id        => undef
	$nsda           => undef
	$person
</%args>
<%init>

	use Email::Valid;
	use Tab::NSDA::Person;

	$phone  =~ s/\D//g;
	$email  =~ s/\s+//g;

	my $emailok = Email::Valid->address(
		-address => $email, 
		-mxcheck => 1
	) ? 'yes' : 'no';

	unless ($emailok eq "yes") { 
		my $err = "That email address is not valid.  Please enter a valid address. $emailok";
		$m->redirect("person_edit.mhtml?edit_id=$edit_id&err=$err");
	}

	my $edit = Tab::Person->retrieve($edit_id);

	unless ($email eq $edit->email) { 

		my @existing_emails = Tab::Person->search( 
			email => $email
		);

		if (@existing_emails) { 
			my $err = "Email address $email already has an account: ";
			$err .= $existing_emails[0]->first." ".$existing_emails[0]->last;

			$m->redirect("person_edit.mhtml?edit_id=$edit_id&err=$err");
		}

		my $taken = Tab::Login->search( 
			username => $email
		)->first;

		if ($taken && $taken->person->id != $edit->id) { 

			my $err = "Email address $email already in use as a login";
			$m->redirect("person_edit.mhtml?edit_id=$edit_id&err=$err");

		} elsif (not defined $taken) { 

			my $login = Tab::Login->search( 
				person   => $edit->id,
				username => $edit->email
			)->first;

			$login->username($email) if $login;
			$login->update() if $login;
		}
	}

	foreach my $login ($edit->logins) { 
		$login->username($ARGS{$login->id."_username"});
		$login->update();
	}

	$edit->first($first);
	$edit->middle($middle);
	$edit->last($last);
	$edit->street($street);
	$edit->city($city);
	$edit->email($email);
	$edit->state($state);
	$edit->country($country);
	$edit->no_email($no_email);
	$edit->zip($zip);
	$edit->site_admin($site_admin);
	$edit->phone($phone);
	$edit->provider($provider);

	$edit->update();

	$edit->setting("nsda_admin", $nsda_admin);
	$edit->setting("naudl_admin", $naudl_admin);
	$edit->setting("scream_in_pain", $scream_in_pain);

	$ualt_id =~ s/[\D_]//g;
	undef $ualt_id if $ualt_id < 1;

	$nsda =~ s/[\D_]//g;
	undef $nsda if $nsda < 1;

	my @u_other = Tab::Person->search( ualt_id => $ualt_id ) if $ualt_id;
	my @n_other = Tab::Person->search( nsda => $nsda ) if $nsda;

	foreach my $other (@u_other, @n_other) { 
		next if $other->id == $edit->id;
		my $err = "Changes saved, but another account (".$other->email.") already has NSDA merit $ualt_id or ID $nsda so it was not linked";
		$m->redirect("person_edit.mhtml?edit_id=$edit_id&&err=$err");
	}

	my $u_person = Tab::NSDA::Person->search(ualt_id => $ualt_id)->first if $ualt_id;
	my $n_person = Tab::NSDA::Person->search(user_id => $nsda)->first if $nsda;

	if ($u_person && $n_person && ($n_person->user_id != $u_person->user_id)) { 
		my $err = "Changes saved, but the merit ID $ualt_id and the NSDA ID $nsda do not belong to the same account so no link was made.";
		$m->redirect("person_edit.mhtml?edit_id=$edit_id&&err=$err");
	} 

	if ($ualt_id && (not defined $u_person)) { 
		my $err = "Changes saved, but the merit ID $ualt_id does not match an NSDA record so no link was made.";
		$m->redirect("person_edit.mhtml?edit_id=$edit_id&&err=$err");
	}

	if ($nsda && (not defined $n_person)) { 
		my $err = "Changes saved, but the NSDA ID $nsda does not match an account so no link was made.";
		$m->redirect("person_edit.mhtml?edit_id=$edit_id&&err=$err");
	}

	if ($n_person) { 

		$edit->ualt_id($n_person->ualt_id);
		$edit->nsda($n_person->user_id);
		$edit->update();

	} elsif ($u_person) { 
	
		$edit->ualt_id($u_person->ualt_id);
		$edit->nsda($u_person->user_id);
		$edit->update();

	} elsif ($edit->ualt_id || $edit->nsda) { 

		$edit->ualt_id(0);
		$edit->nsda(0);
		$edit->update();
	}

	my $msg = "Changes saved";
	$m->redirect("person_edit.mhtml?edit_id=$edit_id&msg=$msg");

</%init>
