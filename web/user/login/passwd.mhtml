<%args>
	$oldpass    => undef
	$username   => undef
	$newpass    => undef
	$repeatpass => undef
	$person
	$login_id   => undef
	$defaults
</%args>
<%init>

	unless ($username && $newpass && $repeatpass) {
		my $err = "You must supply a username to continue";
		$m->redirect("profile.mhtml?err=$err");
	}

	$m->abort unless $person;

	my $token = $defaults->{"token"};

	unless ($token) {

		my $err = "No authentication token sent. Please use only the profile form on Tabroom.";
		$m->redirect("/user/login/profile.mhtml?err=$err");

	} elsif ($token ne $ARGS{"token"}) {

		my $err = "Authentication token mismatch. Please use only the profile form on Tabroom.";
		$m->redirect("/user/login/profile.mhtml?err=$err");

	}

	my $login = Tab::Login->retrieve($login_id);

	my $err;
	my $msg;

	unless ($person->id == $login->person->id) {
		sleep 5;
		$m->print("<h4 class='redtext'>The login you are trying to change is not yours</h4>");
		$m->abort;
	}

	if ($username ne $login->username) {

		my $valid = Email::Valid->address(
			-address => $username,
			-mxcheck => 1
		);

		unless ($valid) {
			$err = "The username $username is not a valid email address.  Choose another!";
			$m->redirect("/user/login/profile.mhtml?err=$err");
        }

		my @others =  Tab::Login->search(
			username => $username
		);

		push @others, Tab::Person->search(
			email => $username
		);

		if (@others) {

			$err = "The username $username is already in use by another user.  Choose another.";
			$m->redirect("/user/login/profile.mhtml?err=$err");

		} else {

			my $person = $login->person;

			$person->email($username);
			$person->update();

			$login->username($username);
			$login->update();

			$msg = "Username changed to $username";
		}

	}

	if ($oldpass) {

		my $new_salt = $m->comp("/funclib/generate_randomstring.mas");

		$err = "The two passwords you listed did not match"
			unless $newpass eq $repeatpass;

		# This gets the salt from the MD5 combined password hash
		my $db_md5_hash = $login->password;

		# This gets the salt from the MD5 combined password hash
		my $db_sha2_hash = $login->sha512;

		if ($db_sha2_hash) {

			my $verify_password = crypt($oldpass,$db_sha2_hash);
			$err = "Old password was not correct"
				unless $db_sha2_hash eq $verify_password;

		} elsif ($db_md5_hash) {

			my $verify_password = crypt($oldpass,$db_md5_hash);
			$err = "Old password was not correct"
				unless $db_md5_hash eq $verify_password;

		}

		unless ($err) {

			my $now = DateTime->now;

			my $new_sha2_hash = crypt($newpass, '$6$' . $new_salt);
			$login->pass_timestamp($now);
			$login->pass_changekey("");
			$login->sha512($new_sha2_hash);
			$login->password("");
			$login->update;

			Tab::log(
				"PASSWORD CHANGE: Login ID ".$login->id." (".$login->username.") for "
				.$person->id." ".$person->first." ".$person->last.
				" password was changed from IP address ".$ENV{REMOTE_ADDR}
			);

			$m->comp("/funclib/ldap_person.mas",
				login       => $login,
				ad_password => $newpass
			);

			$msg .= "Your password has been changed";


		}

	}

	if ($err) {
		$m->redirect("/user/login/profile.mhtml?err=$err");
	}

	$m->redirect("/user/login/profile.mhtml?msg=$msg");

</%init>


