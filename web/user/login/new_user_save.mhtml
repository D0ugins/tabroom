<%args>
	$err        => undef
	$first      => undef
	$last       => undef
	$email      => undef
	$pass1      => undef
	$pass2      => undef
	$phone      => undef
	$domain     => undef
	$state      => undef
	$country    => undef
	$timezone   => undef
	$chapter_id => undef
	$circuit_id => undef
</%args>
<%init>

	unless ($first && $last && $email && $pass1 && $pass2) {
		$err = "A required field was missing.  Please make sure all the required fields, marked with a *, are filled in";
		$m->redirect("/user/login/new_user.mhtml?first=$first&last=$last&email=$email&phone=$phone&domain=$domain&err=$err");
	}

	use Email::Valid;

    my $salt = $m->comp("/funclib/generate_randomstring.mas");
	my $sha_crypt = crypt($pass1, '$6$' . $salt);
	my $now = DateTime->now;

	$timezone = "UTC" unless $timezone;

	$phone =~ s/[\D_]//g;

	$email =~tr/[A-Z]/[a-z]/;
	$email =~ s/\s*//g;
	$email = lc($email);

	my $existing_person = Tab::Person->search( email => $email )->first;

	if ($existing_person) {

		$err = "An account with that email address already exists on this system.  Please have the system email you your password if you've forgotten it.";
		$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");

	} else {

		unless ($pass1 eq $pass2) {
			$err = "The two passwords supplied did not match.";
			$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
		}

		my $emailok = eval {
			return Email::Valid->address(
				-address => $email,
				-mxcheck => 1
			) ? 'yes' : 'no';
		};

		if ($emailok ne 'yes') {
    	    $err = "That email address is not valid.  Please enter a valid address. $emailok";
			$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
		}

		my $person;

		my $person = Tab::Person->search( email => $email)->first;

		unless ($person) {

			$person = eval {
				return Tab::Person->create({
					first    => $first,
					last     => $last,
					email    => $email,
					state    => $state,
					country  => $country,
					tz       => $timezone,
					phone    => $phone,
					provider => $domain,
					password => $sha_crypt
				});
			};

			if ($person) {

				$m->comp("/funclib/claim_followers.mas",
					person => $person
				);

				Tab::log("NEW ACCOUNT: $email was created with id ".$person->id." from IP address ".$ENV{REMOTE_ADDR});
				$m->comp("/funclib/ldap_person.mas",
					person => $person
				);

				$m->comp("/funclib/email_confirm.mas",
					person => $person,
					send   => 1,
					return => 1
				);

				if ($chapter_id || $circuit_id) {

					#got info from _circuit_new_judge.mhtml
					my $chapter = Tab::Chapter->retrieve($chapter_id);

					my $chapter_judge = Tab::ChapterJudge->create({
						first           => $first,
						last            => $last,
						chapter         => $chapter->id,
						retired         => 0,
						person          => $person->id
					});

				}

				$m->redirect("/user/login/login_save.mhtml?username=$email&password=$pass1&first=yippee");

			} else {

				$err = "Account creation failed. This error can happen if you already have a Tabroom account, or if you hit submit twice on the account creation form. Please try logging in, or have the system email you your password if you've forgotten it.";
				$m->redirect("/user/login/new_user.mhtml?err=$err&first=$first&last=$last&email=$email&phone=$phone&domain=$domain");
			}
		}

	}

</%init>
