<%args>
	$person
	$session
	$defaults
	$first      => undef
	$middle     => undef
	$last       => undef
	$email      => undef
	$phone      => undef
	$provider   => undef
	$street     => undef
	$city       => undef
	$state      => undef
	$country    => undef
	$no_email   => 0
	$zip        => undef
	$postal     => undef
	$pronoun    => undef
	$timezone   => undef
	$please_stop_screaming => 0
</%args>
<%init>

	$m->abort unless $person;
	$m->abort unless $first;
	$m->abort unless $last;
	$m->abort unless $email;

	$email =~ s/\s+//g;
	$email = lc($email);

	my $token = $defaults->{"token"};

	unless ($token) {

		my $err = "No authentication token sent; please use only the profile form on Tabroom.";
		$m->redirect("/user/login/profile.mhtml?err=$err");

	} elsif ($token ne $ARGS{"token"}) {

		my $err = "Authentication token mismatch; please use only the profile form on Tabroom.";
		$m->redirect("/user/login/profile.mhtml?err=$err");

	}

	my $diff;

	if ($email ne lc($person->email)) {

		my $existing = Tab::Person->search(
			email => $email
		)->first;

		unless ($existing) {

			my $login = Tab::Login->search( username => $email )->first;

			if ($login && $login->person == $person->id) {

			} elsif ($login && $login->person > 0) {
				$existing = $login->person;
			} elsif ($login) {
				#Orphans alas must perish in this cruel world.
				$login->delete();
			}
		}

		if ($existing) {
			my $err = "Email address $email already has an account belonging to: ";
			$err   .= $existing->first." ".$existing->last;
			$m->redirect("/user/login/profile.mhtml?err=$err");
		}

		my @logins = $person->logins;
		my $primary;

		foreach my $login (@logins) {
			$primary = $login if lc($login->username) eq $email;
		}

		unless ($primary) {
			foreach my $login (@logins) {
				$primary = $login if lc($login->username) eq lc($person->email);
			}
		}

		unless ($primary) {
			foreach my $login (
				sort {
					$b->last_access <=> $a->last_access
					|| $b->accesses <=> $a->accesses
				} @logins
			) {
				$primary = $login;
				last;
			}
		}

		unless ($primary) {
			$primary = shift @logins;
		}

		if ($primary) {

			$primary->username($email);
			$primary->update();

			my $sparecount = scalar @logins;
			$sparecount--;

			Tab::log("EMAIL CHANGE: Account ID ".$person->id." changing to ($email) so modifying login $primary and eliminating $sparecount spares");

			foreach my $other (@logins) {
				next if $other == $primary;
				$other->delete();
			}

		} else {

			# I apparently have no logins?!
			Tab::Login->create({
				username => $email,
				person   => $person->id
			});
		}

		$diff++;

	}

	$phone =~ s/[\D_]//g;

	# Make sure the email is actually an email
	unless (Email::Valid->address( -address => $email, -mxcheck => 0 )) {
		my $err = "$email is not a validly formatted email";
		$m->redirect("/user/login/profile.mhtml?err=$err");
	}


	$person->first($first);
	$person->middle($middle);
	$person->last($last);
	$person->street($street);
	$person->city($city);
	$person->email($email);
	$person->state($state);
	$person->country($country);
	$person->no_email($no_email);
	$person->zip($zip);
	$person->postal($postal);
	$person->pronoun($pronoun);
	$person->phone($phone);
	$person->provider($provider);
	$person->tz($timezone);
	$person->update();

	my $ldap;

	# Refresh the LDAP server
	foreach my $login ($person->logins) {
		$ldap .= $m->comp("/funclib/ldap_person.mas", login => $login);
	}

	#lulz
	$person->setting("please_stop_screaming", $please_stop_screaming);

	delete $defaults->{"token"};
	$session->default($defaults);

	Tab::log("PROFILE CHANGE: Account ID ".$person->id." ($email) was modified from IP address ".$ENV{REMOTE_ADDR});
	Tab::log("LDAP Update yielded $ldap");

	my $msg = "Changes saved";

	if ($diff) {
		$m->comp("/funclib/email_confirm.mas",
			person => $person,
			send   => 1
		);
	}

	$m->redirect("/user/login/profile.mhtml?msg=$msg");

</%init>
