<%args> 
	$username => undef
	$password => undef
</%args>
<%init>

	use Tab::NSDA::Login;
	use Tab::NSDA::Person;
	use Tab::NSDA::PersonSchool;
	use Tab::NSDA::MemberSchool;

	use Digest::MD5 qw(md5_hex);
	use Email::Valid;

	my $now = DateTime->now;

	unless ($username && $password) { 
		my $err = "You need to, y'know, put in a username and password for this to work.";
		$m->redirect("new_user.mhtml?err=$err");
	}

	chomp $username;
	chomp $password; 

	$m->print("<div class='blankfull'>");

	# STEP ONE:  Find the user's login and person record

	my $nsda_login = 
		Tab::NSDA::Login->search( 
			username => $username 
		)->first;

	unless ($nsda_login) { 

		my @tmp_persons = Tab::NSDA::Person->search( 
			uemail => $username,
			utype => "PKDCoach"
		);

		push @tmp_persons, Tab::NSDA::Person->search(
			uemail => $username,
			utype => "Coach"
		);

		push @tmp_persons, Tab::NSDA::Person->search(
			uemail => $username,
			utype => "MIDCoach"
		);

		foreach my $tmp (@tmp_persons) { 
			$nsda_login = 
				Tab::NSDA::Login->search( 
					person_id => $tmp->user_id 
				)->first;
		}

	}

	my $nsda_person = 
		Tab::NSDA::Person->search( 
			user_id => $nsda_login->person_id 
		)->first 
	if $nsda_login;

	unless ($nsda_person) { 

		my $err .= " No NSDA or PKD coach records found with username $username .";
		$err .= " Be sure to use your email address or username on record with ";
		$err .= " the NSDA/PKD Points system";

		$m->redirect("/user/login/new_user.mhtml?err=$err");
	}

	# Check to be sure the authentication is correct before continuing

	my $success; 

	my $sha512 = $nsda_login->sha512;
	my $trial = crypt($password, $sha512) if $sha512;

	$success++ if $trial eq $sha512;

	unless ($success) { 

		my $md5 = md5_hex($password.$username.$Tab::points_salt);

		$success++ if $md5 eq $nsda_login->password; 

		undef $sha512;
	}

	unless ($success) { 
		my $err .= " Your NSDA or PKD login was not successful.  Make sure you're ";
		$err .= " using the correct password and try again. ";
		$m->redirect("/user/login/new_user.mhtml?err=$err");
	}

	unless ($sha512) { 

		my $salt = $m->comp("/funclib/generate_randomstring.mas");
		$sha512 = crypt($password, '$6$' . $salt);
		$nsda_login->sha512($sha512);
		$nsda_login->update;
	}

	# If the username is not an email address, use the email address instead:

	unless (Email::Valid->address( -address => $username, -mxcheck => 0 )) { 

		$m->print("<p>Note: Tabroom.com usernames must be email addresses.  ");
		$m->print(" There are various good reasons for that.  Your Tabroom.com ");
		$m->print(" username will therefore be your email address, ".$nsda_person->uemail);
		$m->print(", not your Points username $username</p>");

		$username = $nsda_person->uemail;
	}

	my ($person, $login, $msg) = find_login($username, $nsda_person, $nsda_login);

	unless ($login->sha512) { 
		$login->sha512($sha512);
		$login->update;
	}

	# Establish a login session for the new (ish?) user

	my $session = Tab::Session->create( {
		person  => $person->id,
		ip      => $ENV{REMOTE_ADDR}
	});

	my $salt = $m->comp("/funclib/generate_randomstring.mas");

	my $sha_user = crypt($session->id.$Tab::string, '$6$'.$salt);

	$session->userkey($sha_user);
	$session->update;

    my $tokencookie = Apache2::Cookie->new(
        $r,
        -name    => 'TabroomToken',
        -value   => $sha_user,
        -expires => '+96h',
        -path    => '/'
    );

    $tokencookie->bake($r);

	$m->print('<p>'.$msg.'</p>');

	$login->sha512($sha512);
	$login->update;

	Tab::NSDA::MemberSchool->set_sql( my_schools => "
		select distinct school.*
		from NEW_USERS_TO_SCHOOLS person_school, NEW_SCHOOLS school
		where person_school.ualt_id = ? 
		and person_school.hasaccess = 1
		and person_school.isadmin = 1
		and (
			person_school.enddate = '0000-00-00 00:00:00'
			or person_school.enddate > ?
		)
		and person_school.school_id = school.school_id
	");

	my @nsda_schools = 
		Tab::NSDA::MemberSchool->search_my_schools( 
			$nsda_person->ualt_id, 
			DateTime::Format::MySQL->format_datetime($now)
		); 

	unless (@nsda_schools) { 

		my $err .= " I found your NSDA or PKD account, but found no institutions you ";
		$err .= " have admin access to.  Please have the coach of record create your";
		$err .= " account. ";

		$m->redirect("/user/login/new_user.mhtml?err=$err");

	}

	# STEP TWO: CREATE SCHOOLS, ADMINS and STUDENTS unless they already exist

	my %used_school = ();

	my %not_found = ();

	SCHOOL:
	foreach my $nsda_school (@nsda_schools) { 

		next if $used_school{$nsda_school}++;

		# Create my login 

		$m->print("<h2>NSDA/PKD Team Found</h2>");

		$m->print("<p>".$nsda_school->school_id." ".$nsda_school->school_name."</p>");

		my @already_chapters; 

		push @already_chapters, 
			Tab::Chapter->search(
				nsda => $nsda_school->school_id 
			); 

		if (@already_chapters) { 

			foreach my $chapter (@already_chapters) { 

				$m->print("<h5>Oops! ".$nsda_school->school_name." already exists in Tabroom</h5>");
				$m->print("<p>Tabroom school name: ".$chapter->name."</p>");
				$m->print("<p>Coaches with access:</p>");

				foreach my $admin ($chapter->permissions) { 

					next if $admin->tag eq "prefs";
					my $coach = $admin->person;

					$m->print('<p class="marleft padleftmore">');
					$m->print($coach->first." ".$coach->last);
					$m->print(" &lt;".$coach->email."&gt;</p>");

				}

				$m->print("<p>This school already has a Tabroom account.</p>");
				$m->print("<p>If you need access, please contact one of them ");
				$m->print(" or help\@tabroom.com</p>");

				next SCHOOL;
			}

		}

		# Create the school 

		$m->print("<h6>Creating a Tabroom school for ");
		$m->print($nsda_school->school_name."</h6>");

		my $level = "highschool" 
			if $nsda_school->realm eq "NFL";

		$level = "university" 
			if $nsda_school->realm eq "PKD";

		$level = "middle" 	
			if $nsda_school->realm eq "MID";

		my $chapter =  Tab::Chapter->create({
			name   => $nsda_school->school_name,
			street => $nsda_school->school_addr,
			city   => $nsda_school->school_city,
			zip    => $nsda_school->school_zip,
			state  => $nsda_school->school_state,
			nsda   => $nsda_school->school_id,
			level  => $level
		});

		$chapter->setting('nsda_degrees', $nsda_school->school_total_deg);
		$chapter->setting('nsda_charter', $nsda_school->school_charter_status);
		$chapter->setting('nsda_paid', $nsda_school->school_paid_status);

		$m->print("<p>Created school successfully in Tabroom</p>");

		# Add to the appropriate circuits

		if ($level eq "university") { 

			Tab::ChapterCircuit->create({ 
				chapter     => $chapter->id,
				circuit     => 126,
				full_member => 1
			});

		} elsif ($level eq "highschool") { 

			Tab::ChapterCircuit->create({ 
				chapter     => $chapter->id,
				circuit     => 6,
				full_member => 1
			});

			Tab::ChapterCircuit->create({ 
				chapter     => $chapter->id,
				circuit     => 83,
				full_member => 1
			});

		} elsif ($level eq "middle") { 

			Tab::ChapterCircuit->create({ 
				chapter     => $chapter->id,
				circuit     => 25,
				full_member => 1
			});

		}

		# Create all the admins. 

		# First me

		Tab::Permission->create({
			tag     => "chapter",
			person  => $person->id,
			chapter => $chapter->id
		});

		$m->print("<p>Granted administrator access to ".$person->email."</p>");

		Tab::NSDA::Person->set_sql( my_admins => "
			select distinct person.* 
			from NEW_USERS_TO_SCHOOLS person_school, NEW_USERS person
			where person_school.school_id = ? 
			and person_school.hasaccess = 1
			and person_school.isadmin = 1
			and (
				person_school.enddate = '0000-00-00 00:00:00'
				or person_school.enddate > ?
			)
			and person_school.ualt_id = person.ualt_id
		");

		my @admins = Tab::NSDA::Person->search_my_admins( 
			$nsda_school->school_id, 
			DateTime::Format::MySQL->format_datetime($now)
		); 

		foreach my $admin (@admins) { 

			next if $admin->ualt_id == $login->ualt_id;

			my $admin_login = Tab::NSDA::Login->search( 
				person_id => $admin->user_id 
			)->first;

			my $admin_username = $admin->uemail;

			my ($other_person, $other_login, $msg) = 
				find_login($admin_username, $admin, $admin_login);

			if ($other_person && $other_login) { 

				Tab::Permission->create({
					tag     => "chapter",
					person  => $other_person->id,
					chapter => $chapter->id
				});
		
				$m->print("<p>Granted administrator access to ".$other_person->email."</p>");

			}
		}

		# Create all the students

		Tab::NSDA::Person->set_sql( my_students => "

			select distinct person.*, 
				middle_joined.dateacquired as middle_joined.
				high_joined.dateacquired as high_joined,

			from (NEW_USERS_TO_SCHOOLS person_school, NEW_USERS person)

			left join NEW_USERS_TO_DEGREES middle_joined 
				on middle_joined.degree_id = 21
				and middle_joined.ualt_id = person.ualt_id 

			left join NEW_USERS_TO_DEGREES high_joined 
				on high_joined.degree_id = 51
				and high_joined.ualt_id = person.ualt_id 

			where person_school.school_id = ? 

			and (
				person_school.enddate = '0000-00-00 00:00:00'
				or person_school.enddate > ?
			)

			and person_school.ualt_id = person.ualt_id
			and person.utype like '%Student'
		");

		my @students = Tab::NSDA::Person->search_my_students( 
			$nsda_school->school_id, 
			DateTime::Format::MySQL->format_datetime($now)
		); 

		my $counter;

		foreach my $student (@students) { 

			my $graduated = 0;

			$graduated++ if $student->graduated;

			my $chapter_student = Tab::Student->create({
				first     => $student->ufname,
				middle    => $student->umname,
				last      => $student->ulname,
				grad_year => $student->grad_yr,
				novice    => 0,
				retired   => $graduated,
				ualt_id   => $student->ualt_id,
				chapter   => $chapter->id

			});

			$student->setting('nsda_points', $student->total_pts);
			$student->setting('nsda_paid', $student->paid_status);

			$student->setting('nsda_joined', $student->high_joined) 
				if $level eq "highschool";

			$student->setting('nsda_joined', $student->middle_joined) 
				if $level eq "middle";

			$counter++ if $chapter_student;

			my $student_login = Tab::Login->search( 
				ualt_id => $student->ualt_id 
			)->first;

			if ($student_login) { 
				$chapter_student->person($student_login->person->id);
				$chapter_student->update;

			}

		}

		$m->print("<p>Imported ".$counter." students off your roster");
		$m->print("</p>");

	}

	$m->print("<h2>Process complete!</h2>");
	$m->print('<a href="/user/home.mhtml" class="button dkblue">Access Tabroom Home Screen</a>');

	$m->print("</div>");

	sub find_login { 

		my ($username, $nsda_person, $nsda_login) = @_;

		# Check if a login already exists with that username:

		my $existing_login = 
			Tab::Login->search(
				username => $username
			)->first;

		my $existing_person;

		my $msg;

		if ($existing_login) { 

			$msg = "A Tabroom.com account already exists for ".$username.".  Using it.";
			$existing_person = $existing_login->person;

		} else { 

			$existing_person = Tab::Person->search( email => $username)->first;

			if ($existing_person) { 
				$msg = "A Tabroom.com account already exists for ".$username.".  Using it";
			}

		}

		# Check if there is an existing login out there with the same ualt_id

		# For the curious, this is the point in the process I started really
		# swearing loudly about how totally insane the points database is. 

		unless ($existing_login && $existing_login->ualt_id == $nsda_person->ualt_id) { 

			my $ualt_id_login = Tab::Login->search( ualt_id => $nsda_person->ualt_id )->first;

			if ($ualt_id_login) { 

				$msg = " A Tabroom account is already linked with ".$nsda_person->uemail."'s NSDA ID.  ";
				$msg .= " I'm connecting that account, ".$ualt_id_login->person->email." to your school ";
				$msg .= " instead of creating a new one.";

				$existing_login = $ualt_id_login;
				$existing_person = $existing_login->person;
			}

		}

		$existing_person = 
			Tab::Person->search( 
				email => $username 
			)->first 
		unless $existing_person;

		unless ($existing_person) { 

			$msg = " No user found for $username.  Creating: ";

			$existing_person = Tab::Person->create({
				first   => $nsda_person->ufname,
				middle  => $nsda_person->umname,
				last    => $nsda_person->ulname,
				email   => $username,
				phone   => $nsda_person->cell,
				ualt_id => $nsda_person->ualt_id
			});

		}

		unless ($existing_login) { 
			
			$msg .= " No account found for $username.  Creating with your NSDA Password: ";

			$existing_login = Tab::Login->create({ 
				username      => $username,
				person        => $existing_person->id,
				accesses      => 1,
				source        => "points",
				ualt_id       => $nsda_person->ualt_id,
			});

			if ($nsda_login) { 
				$existing_login->nsda_login_id($nsda_login->login_id);
				$existing_login->update;
			}

		}

		return ($existing_person, $existing_login, $msg); 

	}


</%init>
