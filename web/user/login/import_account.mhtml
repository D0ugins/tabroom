<%args>
	$username => undef
	$password => undef
</%args>
<%init>

	use Digest::MD5 qw(md5_hex);
	use Email::Valid;

	my $now = DateTime->now;

	unless ($username && $password) {
		my $err = "I need your NSDA username and password for this import to work.";
		$m->redirect("new_user.mhtml?err=$err");
	}

	chomp $username;
	chomp $password;

	my $person = $m->comp("/funclib/nsda/user_import.mas",
		username => $username,
		password => $password
	);

	unless ($person && $person->id) {
		$m->comp("/funclib/abort.mas", message => $person);
	}

	# Establish a login session for the new (ish?) user

	my $session = Tab::Session->create( {
		person  => $person->id,
		ip      => $ENV{REMOTE_ADDR}
	});

	my $salt = $m->comp("/funclib/generate_randomstring.mas");

	my $sha_user = crypt($session->id.$Tab::string, '$6$'.$salt);

	$session->userkey($sha_user);
	$session->update;

    my $tokencookie = Apache2::Cookie->new(
        $r,
        -name    => 'TabroomToken',
        -value   => $sha_user,
		-domain  =>  '.tabroom.com',
        -expires => '+96h',
        -path    => '/'
    );

    $tokencookie->bake($r);

	$m->print('<p>'.$msg.'</p>');

	if ($login) {
		$login->sha512($sha512);
		$login->update;
	}


	#SCHOOLS

	unless (@nsda_schools) {
		my $err .= " I found your NSDA account, but found no institutions you ";
		$err .= " have admin access to.  Please have the coach of record create your";
		$err .= " account.  NSDA ID ".$person->nsda;

		$m->redirect("/user/login/new_user.mhtml?err=$err");
	}

	# STEP TWO: CREATE SCHOOLS, ADMINS and STUDENTS unless they already exist

	my %used_school = ();

	my %not_found = ();

	SCHOOL:
	foreach my $nsda_school (@nsda_schools) {

		next if $used_school{$nsda_school}++;

		# Create my login

		$m->print("<h2>NSDA Team Found</h2>");

		$m->print("<p>".$nsda_school->school_id." ".$nsda_school->school_name."</p>");

		my @already_chapters;

		push @already_chapters,
			Tab::Chapter->search(
				nsda => $nsda_school->school_id
			);

		if (@already_chapters) {

			foreach my $chapter (@already_chapters) {

				$m->print("<h5>Oops! ".$nsda_school->school_name." already exists in Tabroom</h5>");
				$m->print("<p>Tabroom school name: ".$chapter->name."</p>");
				$m->print("<p>Coaches with access:</p>");

				foreach my $admin ($chapter->permissions) {

					next if $admin->tag eq "prefs";
					my $coach = $admin->person;

					$m->print('<p class="marleft padleftmore">');
					$m->print($coach->first." ".$coach->last);
					$m->print(" &lt;".$coach->email."&gt;</p>");

				}

				$m->print("<p>This school already has a Tabroom account.</p>");
				$m->print("<p>If you need access, please contact one of them ");
				$m->print(" or help\@tabroom.com</p>");

				next SCHOOL;
			}

		}

		# Create the school

		$m->print("<h6>Creating a Tabroom school for ");
		$m->print($nsda_school->school_name."</h6>");

		my $chapter = $m->comp("/funclib/chapter_import.mas",
			nsda_school => $nsda_school,
			person => $person
		);

		$m->print("<h6>Chapter created and student roster imported for ");
		$m->print($nsda_school->school_name."</h6>");

	}

	$m->print("<h2>Process complete!</h2>");
	$m->print("<div class='full centeralign'>");
	$m->print('<a href="/user/home.mhtml" class="buttonwhite bluetext"> Return to Tabroom Home Screen</a>');

	$m->print("</div>");

	sub find_login {

		my ($username, $nsda_person, $nsda_login) = @_;

		# Check if a login already exists with that username:

		my $existing_login = Tab::Login->search( username => $username)->first;
		my $existing_person;

		my $msg;

		if ($existing_login) {

			$msg = "A Tabroom.com account already exists for ".$username.".  Using it.";
			$existing_person = $existing_login->person;

		} else {

			$existing_person = Tab::Person->search( email => $username)->first;

			if ($existing_person) {
				$msg = "A Tabroom.com account already exists for ".$username.".  Using it";
			}

		}

		# Check if there is an existing login out there with the same nsda user_id
		# For the curious, this is the point in the process I started really
		# swearing loudly about how totally insane the points database is.

		unless ($existing_person && $existing_person->nsda == $nsda_person->user_id) {

			my $clashing_person = Tab::Person->search( nsda => $nsda_person->user_id )->first;

			if ($clashing_person) {

				$msg = " A Tabroom account is already linked with ".$nsda_person->uemail."'s NSDA ID.  ";
				$msg .= " I'm connecting that account, ".$clashing_person->email." to your school ";
				$msg .= " instead of creating a new one.";

				$existing_person = $clashing_person;
			}
		}

		$existing_person = Tab::Person->search(
			email => $username
		)->first unless $existing_person;

		unless ($existing_person) {

			$msg = " No user found for $username.  Creating: ";

			$existing_person = Tab::Person->create({
				first   => $nsda_person->ufname,
				middle  => $nsda_person->umname,
				last    => $nsda_person->ulname,
				email   => $username,
				phone   => $nsda_person->cell,
				nsda    => $nsda_person->user_id
			});

			$m->comp("/funclib/claim_followers.mas",
				person => $existing_person
			);
		}

		unless ($existing_login) {

			$msg .= " No account found for $username.  Creating with your NSDA Password: ";

			$existing_login = Tab::Login->create({
				username      => $username,
				person        => $existing_person->id,
				accesses      => 1,
				source        => "points"
			});

		}

		return ($existing_person, $existing_login, $msg);

	}


</%init>
