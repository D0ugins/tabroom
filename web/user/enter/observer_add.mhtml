<%args>
	$person
	$target_id
	$property_value => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	unless ($property_value) {
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($target_id);

	unless ($entry) {
		$m->print('{ "error": true, "message": "No entry found for ID '.$target_id.'"}');
		$m->abort();
	}

	my $observer = Tab::Person->retrieve($property_value);

	unless ($observer) {
		$m->print('{ "error": true, "message": "No Tabroom account found for ID '.$property_value.'"}');
		$m->abort();
	}

	my $school = $entry->school();
	my $event = $entry->event();

    my %observers;
    my $obshash = $school->setting("campus_observers");

    if ($obshash) {
        %observers = %{$obshash};
    }

	my $message;
	my $count = scalar (keys %{$observers{$target_id}});

	my $type = $event->type;

	if ($type eq "speech") {

		if ($count >= 1) {
			$message = "IE events are limited to 1 observer.  Remove the existing observer before adding another";

			my %response = (
				error   => 1,
				message => $message
			);

			$m->print(JSON::encode_json(\%response));
			$m->abort();
		}

	} elsif ($type eq "congress" || $type eq "attendee" ) {

		$message = "Observers are not supported in this event";

		my %response = (
			error   => 1,
			message => $message
		);

		$m->print(JSON::encode_json(\%response));
		$m->abort();

	} elsif ($type eq "debate" || $type eq "wsdc") {

		if ($count >= 2) {

			$message = "Debate events are limited to 2 observers. ";
			$message .= "Remove an existing observer before adding another.";

			my %response = (
				error   => 1,
				message => $message
			);

			$m->print(JSON::encode_json(\%response));
			$m->abort();
		}
	}

	unless ($message) {
		if ($observer) {
			$observers{$target_id}{$observer} = $observer->first." ".$observer->last." &lt;".$observer->email."&gt;";
			$message = "Observer ".$observer->email." added to ".$entry->code;
			$school->setting("campus_observers", "json", \%observers);
		}
	}

	my $content;

	foreach my $observer (sort keys %{$observers{$entry}}) {
		$content .= '<div id="'.$observer.'_'.$entry.'"';
		$content .= ' class="nospace smaller padleft yellowhover" ';
		$content .= ' > ';
		$content .= '   <span class="smaller fourfifths"> ';
		$content .= '   '.$observers{$entry}{$observer}.' </span> ';
		$content .= '   <span class="fifth smaller centeralign nospace"> ';
		$content .= '     <a  class = "fa fa-sm fa-trash buttonwhite redtext" ';
		$content .= '          target_id  = "'.$entry.'" ';
		$content .= '          related_thing = "'.$observer.'" ';
		$content .= '          onClick = "postSwitch(this, \'observer_rm.mhtml\');" ></a> ';
		$content .= '     </span> </div> ';
	}

	my $replace = {
		id      => "observers_".$entry->id,
		content => $content
	};

	my @replace;
	push @replace, $replace;

    my %response = (
        error    => 0,
        message  => $message,
		replace  => \@replace,
		clear_id => $target_id
    );

    $m->print(JSON::encode_json(\%response));
    $m->abort();

</%init>
