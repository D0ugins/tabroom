<%args>
	$school_id
	$person
	$person_settings
	$perms
</%args>
<%init>

	my $school = Tab::School->retrieve($school_id);
	my $chapter = $school->chapter;
	my $tourn  = $school->tourn;

	my %event_by_id = map {$_->id => $_} ($tourn->events);

	my %district_entry = $m->comp(
		"/funclib/district_entry.mas", 
		chapter => $chapter 
	);

	my %already_entries = ();
	my %already_students = ();

	foreach my $student_id (sort keys %{$district_entry{"entries"}}) { 

		next unless ($district_entry{'student_count'}{$student_id} > 1);

		my $student;

		$student = $already_students{$student_id};

		unless ($student) { 
			$student = Tab::Student->retrieve($student_id);
			$already_students{$student_id} = $student;
		}

		my @entries;

		foreach my $entry_id ( @{$district_entry{"entries"}{$student_id}} ) { 

			my $entry;

			$entry = $already_entries{$entry_id};

			unless ($entry) { 
				$entry = Tab::Entry->retrieve($entry_id);
				$already_entries{$entry_id} = $entry;
			}

			push @entries, $entry;
			my $partner_string;

			foreach my $partner_id (@{$district_entry{"entry_students"}{$entry_id}} ) { 

				next if $partner_id == $student_id;

				my $partner;

				$partner = $already_students{$partner_id};

				unless ($partner) {
					$partner = Tab::Student->retrieve($partner_id);
					$already_students{$partner_id} = $partner;
				}

				unless ($partner_string) { 
					$partner_string = "Partner w/";
				} else { 
					$partner_string .= " &amp; "
				}

				$partner_string .= $partner->first." ".$partner->last;
			}

			$district_entry{"partner_string"}{$entry_id}{$student_id} = $partner_string;

		}

		foreach my $slot (1 .. scalar @entries) { 

			my $slot_entry = $already_entries{$ARGS{$student_id."-".$slot}};

			if ($slot_entry) { 
				$slot_entry->setting("nsda_priority", $slot);
			}

		}

	}

	my $msg = "Double entry preferences saved";

	$m->redirect("nsda_single_entry.mhtml?school_id=".$school->id."&msg=$msg");


</%init>
