<%args>
	$entry_id
	$category_id
	$person
	$fill => undef
</%args>
<%init>

	my $now = DateTime->now();
	my $err;

	my $entry = Tab::Entry->retrieve($entry_id);
	$m->abort unless $entry;

	my $category = Tab::Category->retrieve($category_id);
	my $rounds_per = $category->setting("rounds_per");

	Tab::Entry->set_sql(wipe_prefs => "
		delete from rating 
		where entry = ? 
		and rating_tier = 0
	");

	Tab::Entry->sql_wipe_prefs->execute($entry->id);

	my %conflicts_by_id = ();

	foreach ( $m->comp( "/funclib/entry_conflicts.mas", entry => $entry, type  => "conflict") ) { 
		$conflicts_by_id{$_->judge->id} = $_; 
	}

	foreach ( $m->comp( "/funclib/school_conflicts.mas", school => $entry->school ) ) { 
		$conflicts_by_id{$_->judge->id} = $_; 
	}

	my %freebie = $m->comp("/funclib/free_strikes.mas", category => $category);

	my %neutrals = map {$_->judge->id => 1} 
		$m->comp(
			"/funclib/category_judge_settings.mas", 
				category => $category,
				tag      => "neutral"
		) 
	if $category->setting("neutrals");

	my $no_frees = $category->setting("free_strikes_no_pref");

    my @judges;
	my @all_judges = $m->comp("judges.mas", category => $category);


	my %rating_by_judge = ();
	my %ordinal_by_judge = ();
	my %judges_at_rating = ();

	my $total_rounds;
	my $ignore_conflicts++ if $category->setting("conflict_denominator");

	JUDGE:
    foreach my $judge (@all_judges) {

        next if ($judge->school->id == $entry->school->id) 
			&& (not defined $neutrals{$judge->id});

		next if $no_frees && $freebie{$judge->id};

		unless ($ignore_conflicts) { 
        	next JUDGE if $conflicts_by_id{$judge->id};
		}

		if ($rounds_per) { 
			$total_rounds += $judge->obligation;
			$total_rounds += $judge->hired;
		} else {
			$total_rounds++;
		}

		next JUDGE unless $ARGS{"rating_".$judge->id};

		my $rating = Tab::Rating->create({
			type    => "entry",
			tourn   => $category->tourn->id,
			judge   => $judge->id,
			entry   => $entry->id,
			ordinal => $ARGS{"rating_".$judge->id},
			entered => $now
		}) if $ARGS{"rating_".$judge->id};

		$rating_by_judge{$judge->id} = $rating;
		$ordinal_by_judge{$judge->id} = $ARGS{"rating_".$judge->id};
		push (@{$judges_at_rating{$ARGS{"rating_".$judge->id}}}, $judge );
	}	

	my $rounds_before = 1;
	$total_rounds = scalar @all_judges unless $total_rounds;

	my $count = 1;

	foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {

		next unless $ordinal > 0;
		my $rounds_add;
		my $judge_count;
	
		foreach my $judge (@{$judges_at_rating{$ordinal}}) { 
			$judge_count++;
			if ($rounds_per) { 
				$rounds_add += $judge->obligation;
				$rounds_add += $judge->hired;
			} else { 
				$rounds_add++;
			}
		}

		foreach my $judge (@{$judges_at_rating{$ordinal}}) { 

			my $percentile = 0;
			$percentile = ( ($rounds_before) / $total_rounds) * 100 if $rounds_before;

			my $rating = $rating_by_judge{$judge->id};
			$rating->ordinal($count++) if $fill && $rating->ordinal != 999;
			$rating->percentile($percentile);
			$rating->update();
		}

		$rounds_before += $rounds_add;
		$rounds_before += $judge_count if (not defined $rounds_add);

	}

	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
	$m->redirect("ordinals_prefs.mhtml?entry_id=".$entry_id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");

</%init>
