<%args>
	$person
	$perms
	$target_id      => undef
	$setting_name   => undef
	$property_name  => undef
	$property_value => undef
	$related_thing  => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No judge ID sent"}');
		$m->abort();
	}

	unless ($property_name) {
		$m->print('{ "error": true, "message": "No entry or school ID sent"}');
		$m->abort();
	}

	my $judge = Tab::Judge->retrieve($target_id);
	my $entry;
	my $school;

	my $now = DateTime->now();

	$entry = Tab::Entry->retrieve($property_name) if $setting_name eq "entry";
	$school = Tab::School->retrieve($property_name) if $setting_name eq "school";

	unless ($judge) {
		$m->print('{ "error": true, "message": "No judge found for ID '.$target_id.'"}');
		$m->abort();
	}

	unless ($entry || $school) {
		$m->print('{ "error": true, "message": "No school or entry found for ID '.$property_name.'"}');
		$m->abort();
	}

	unless ($school) {
		$school = $entry->school;
	}

	unless ($person->site_admin || $perms->{"chapter"}{$school->chapter->id}) {
		$m->print('{ "error": true, "message": "You do not have permission to change strikes for '.$school->short_name.'}');
		$m->abort();
	}

	my $bank;
	my $event;
	my $message;
	my @strikes;
	my $category;

	if ($related_thing) {
		$category = Tab::Category->retrieve($related_thing);
	} elsif ($entry) {
		$event = $entry->event;
		$category = $event->category;
	} else {
		$category = $judge->category;
	}

	my $adjust = $event->setting("adjust_strikes");

	if ($setting_name eq "school") {

    	@strikes = $m->comp(
			"/funclib/school_strikes.mas",
				school   => $school,
				category => $category
		);

		$bank = $category->setting("school_strikes");
		$bank += $adjust;

	} elsif ($setting_name eq "entry") {

		@strikes = $m->comp('/funclib/entry_strikes.mas', entry => $entry);
		$bank = $category->setting("entry_strikes");
		$bank += $adjust;
	}

	my %freebie = $m->comp("/funclib/free_strikes.mas", category => $category);

	my %strikes_by_id = ();
	my %already;

	foreach my $strike (@strikes) {

		next unless $strike->registrant;
		next if $strike->conflict;

		if ($already{$strike->judge->id}++) {
			$strike->delete();
		} else {
			$strikes_by_id{$strike->judge->id} = $strike;
			$bank-- unless $freebie{$strike->judge->id};
		}
	}

	if ($property_value == 1) {

		if ($freebie{$judge->id} || $bank > 0) {

			unless ($strikes_by_id{$judge->id}) {

				if ($entry) {

					my $strike = Tab::Strike->create({
						tourn      => $category->tourn->id,
						entry      => $entry,
						type       => "entry",
						entered_by => $person,
						created_at => $now,
						registrant => 1,
						judge      => $judge->id
					});

				} elsif ($school) {

					my $strike = Tab::Strike->create({
						tourn      => $category->tourn->id,
						school     => $school,
						type       => "school",
						entered_by => $person,
						created_at => $now,
						registrant => 1,
						judge      => $judge->id
					});
				}

				$message = "You have struck ".$judge->first." ".$judge->last." like a gong.";
			}
		} else {

			$message = "You already have reached your strike limit! ";
			$message .= "Unstrike another judge if you hate ".$judge->first." ".$judge->last;
			$message .= " sufficiently to strike them instead";
			$m->print('{ "error": true, "message": "'.$message.'"}');
			$m->abort();
		}

	} elsif ($strikes_by_id{$judge->id}) {
		$strikes_by_id{$judge->id}->delete();
		$message = "You have un-struck ".$judge->first." ".$judge->last;
	} else {
		$message = "No changes made";
	}

	$m->print('{ "error": false, "message": "'.$message.'"}');
	$m->abort();

</%init>
