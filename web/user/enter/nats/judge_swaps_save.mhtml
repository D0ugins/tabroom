<%args>
	$tourn
	$person
	$school
	$category_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my $category = Tab::Category->retrieve($category_id);

	my %tourn_settings = $tourn->all_settings();

	unless ($category->setting("nats_category")) {
		$m->comp("/funclib/abort.mas",
			warn => "You may only swap judge assignments in the MAIN category"
		);
	}

	my $dbh = Tab::DBI->db_Main();

    my $rounds_sth = $dbh->prepare("
        select
            jpool.id, jpool.name,
            min(CONVERT_TZ(timeslot.start, '+00:00', tourn.tz)),
            max(CONVERT_TZ(timeslot.end, '+00:00', tourn.tz)),
			no_swaps.value

        from (jpool, jpool_round jpr, round, timeslot, tourn)

			left join jpool_setting no_swaps
				on no_swaps.jpool = jpool.id
				and no_swaps.tag = 'no_swaps'

        where jpool.category = ?
            and jpool.id = jpr.jpool
            and jpr.round = round.id
            and round.timeslot = timeslot.id
            and timeslot.tourn = tourn.id
        group by jpool.id
    ");

    $rounds_sth->execute($category->id);

    my %jpools;

    while (
        my (
            $jpool_id, $jpool_name, $start, $end, $no_swaps
        ) = $rounds_sth->fetchrow_array()
    ) {

		$jpools{$jpool_id}{"name"} = $jpool_name;

		if ($no_swaps) {
			$jpools{$jpool_id}{"no_swaps"} = $no_swaps;
		}
        $jpools{$jpool_id}{"raw_start"} = $start;
        $jpools{$jpool_id}{"raw_end"} = $end;

        $jpools{$jpool_id}{"start"} = eval {
			my $dt = DateTime::Format::MySQL->parse_datetime($start);
			$dt->set_time_zone("UTC");
			$dt->set_time_zone($tz);
			return $dt;
        };

        $jpools{$jpool_id}{"end"} = eval {
            my $dt = DateTime::Format::MySQL->parse_datetime($end);
			$dt->set_time_zone("UTC");
			$dt->set_time_zone($tz);
			return $dt;
        };

		$jpools{$jpool_id}{"day"} = $jpools{$jpool_id}{"start"}->day;
		$jpools{$jpool_id}{"day_name"} = $jpools{$jpool_id}{"start"}->day_abbr;
        $jpools{$jpool_id}{"epoch_start"} = $jpools{$jpool_id}{"start"}->epoch;
        $jpools{$jpool_id}{"epoch_end"} = $jpools{$jpool_id}{"end"}->epoch;
    }

	my $sth = $dbh->prepare("
		select
			judge.id, judge.first, judge.last,
			jpj.id, jpool.id,
			registrant.value

		from judge
			left join jpool_judge jpj on jpj.judge = judge.id
			left join jpool on jpj.jpool = jpool.id

			left join jpool_setting registrant
				on registrant.jpool = jpool.id
				and registrant.tag = 'registrant'

		where judge.school = ?
		and judge.category = ?
		and judge.active = 1
	");

	$sth->execute($school->id, $category_id);

	my $open = $category->setting("open_switcheroo");
	my $close = $category->setting("close_switcheroo");

	unless ($open < $now && $close > $now) {
		$m->comp("/funclib/abort.mas",
			warn => "The judge swapper is no longer open for changes"
		);
	}

	my %judges;

	while (
		my (
			$judge_id, $first, $last, $jpj, $jpool_id, $reg
		) = $sth->fetchrow_array()
	) {

		next if $reg;
		$judges{$judge_id}{"name"} = $first." ".$last;

		if ($jpj) {
			$judges{$judge_id}{"count"}++;
			my $day = $jpools{$jpool_id}{"day"};
			$judges{$judge_id}{"day"}{$day} = $jpool_id;
			$judges{$judge_id}{"jpj_day"}{$day} = $jpj;
		}
	}

	my $err;
	my $msg;

	my $swap_sth = $dbh->prepare("
		update jpool_judge
			set jpool_judge.judge = ?
			where jpool_judge.judge = ?
			and jpool_judge.jpool = ?
	");

	my %did;

	foreach my $judge_id (sort keys %judges) {

		my @days = sort keys %{$judges{$judge_id}{"day"}};

		DAY:
		foreach my $day (sort @days) {

			my $jpool_id = $judges{$judge_id}{"day"}{$day};
			next unless $jpool_id;

			my $no_swaps = $jpools{$jpool_id}{"no_swaps"};
			next if $no_swaps;

			my $swap_code = $ARGS{$judge_id."_".$jpool_id};

			if ($swap_code) {

				if ($did{$judge_id."-".$jpool_id}) {
					$err .= "Cannot swap the same assignment twice in one turn for ".$judges{$judge_id}{"name"};
					next DAY;
				}

				my ($ojudge_id, $ojpool_id) = split(/\_/, $swap_code);

				next unless $judges{$ojudge_id};

				if ($ojpool_id eq "add") {

					if ($judges{$ojudge_id}{"count"} > 2) {
						$err .= "Cannot give assignment to ".$judges{$ojudge_id}{"name"}."; they're at the limit";
						next DAY;
					}

					$swap_sth->execute($ojudge_id, $judge_id, $jpool_id);
					$msg .= "Assignments on ".$jpools{$jpool_id}{"day_name"};
					$msg .= " transferred from ".$judges{$judge_id}{"name"}." to ".$judges{$ojudge_id}{"name"};

					$m->comp("/funclib/log.mas",
						tourn       => $school->tourn->id,
						school      => $school->id,
						category    => $category->id,
						type        => "registration",
						person      => $person,
						description => $msg
					);


				} else {

					unless ($jpools{$ojpool_id}) {
						$err .= "No swap pool found for judge ".$judges{$ojudge_id}{"name"}." that day";
						next DAY;
					}

					if ($jpools{$ojpool_id}{"no_swaps"}) {
						$err .= "Cannot give assignment to ".$judges{$ojudge_id}{"name"}."; not swappable";
						next DAY;
					}

					if ($did{$ojudge_id."-".$ojpool_id}) {
						$err .= "Cannot swap one assignment for ".$judges{$ojudge_id}{"name"}." twice in one go.";
						next DAY;
					}


					$swap_sth->execute($ojudge_id, $judge_id, $jpool_id);
					$swap_sth->execute($judge_id, $ojudge_id, $ojpool_id);
					$did{$ojudge_id."-".$ojpool_id}++;

					$msg .= "Assignments swapped between ".$judges{$ojudge_id}{"name"};
					$msg .= "and ".$judges{$judge_id}{"name"}." on ".$jpools{$jpool_id}{"day_name"};

					$m->comp("/funclib/log.mas",
						tourn       => $school->tourn->id,
						school      => $school->id,
						category    => $category->id,
						type        => "registration",
						person      => $person,
						description => $msg
					);
				}
			}
		}
	}

	$m->redirect("judge_swaps.mhtml?school_id=".$school->id."&category_id=".$category_id."&err=$err&msg=$msg");

</%init>
