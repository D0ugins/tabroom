<%args>
	$school
	$student_id => undef
</%args>
<%init>

	use Tab::NSDA::Person;

	my $now = DateTime->now();

	my $student = Tab::Student->retrieve($student_id) if $student_id;

	unless ($student) { 
		$m->comp('/funclib/abort.mas', 
			message => "No student record found for ID number $student_id"
		);
	}

	unless ($student->chapter->id == $school->chapter->id) {
		$m->comp('/funclib/abort.mas', 
			message => "Student ".$student->first." ".$student->last." does not belong to your school."
		);
	}

	my $tourn = $school->tourn();
	my %tourn_settings = $tourn->all_settings();
	my $drop_deadline = $tourn_settings{"drop_deadline"};
	$drop_deadline = $tourn->reg_end unless $drop_deadline;

	my $script_deadline = $tourn_settings{"script_deadline"};
	$script_deadline = $drop_deadline unless $script_deadline;

	my $release_deadline = $tourn_settings{"release_deadline"};
	$release_deadline = $drop_deadline unless $release_deadline;

	my %incomplete;

	#2 Entry Release Form

	my %release_forms = eval { 
		return %{JSON::decode_json($school->setting("release_forms"))};
	};

	my $req = Apache2::Request->new($r);

	unless ($now > $release_deadline) { 

		if ($req) { 

			my $upload = $req->upload("entry_release_".$student->id);

			if ($upload && $upload->filename) { 

				my $filename  = $upload->filename;

				$filename =~ s/.*[\/\\](.*)/$1/;
				$filename =~ s/\ //g;
				$filename =~ s/\)//g;
				$filename =~ s/\(//g;
				$filename =~ s/\'//g;  # '  stupid vim
						
				$filename = substr($filename, 0, 120);

				my $filetemp = $upload->tempname;

				system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$school->id."/releases/".$student->id."/$filename";

				$release_forms{$student->id} = $filename;

				$school->setting(
					"release_forms",
					"text", 
					JSON::encode_json(\%release_forms)
				);
			}
		}
	}

	$incomplete{"No release forms uploaded"}++ 
		unless $release_forms{$student->id};

	#3 Pronuncation Guide
	$student->phonetic($ARGS{"phonetic"});
	$student->update();

	unless ($now > $script_deadline) { 

		#4-6 Entry Details

		my %entries = $m->comp(
			"/funclib/nationals_entries.mas",
			student => $student,
			tourn   => $tourn
		);

		my @settings = ("coach_points", "coach_script",
			"author", "title", "publisher",
			"publish_isbn", "publish_url", "publish_date"
		);

		my @date_settings = ("publish_print_date");

		my %used_events; 

		foreach my $type ("main", "supp", "conn") { 

			next unless $entries{$type};

			foreach my $entry (@{$entries{$type}}) { 

				my $event = $entry->event;

				next if $event->setting("usa_wsdc");
				my $abbr = $event->abbr;

				if ($used_events{$event->id}++) { 
					$event->update();
				}

				my %local_incomplete;

				if ($ARGS{$entry->id."_coach_points"}) { 

					unless ($ARGS{$entry->id."_coach_script"}) {

						my $coach = Tab::NSDA::Person->search(
							ualt_id => $ARGS{$entry->id."_coach_points"}
						)->first;

						if ($coach) { 
							$ARGS{$entry->id."_coach_script"} = $coach->ufname." ".$coach->ulname;
						}
					}
				}

				foreach my $setting (@settings) { 
					$entry->setting($setting, $ARGS{$entry->id."_$setting"});
				}

				if ($event->setting('ask_for_bibliography')) { 

					my $text = $m->comp('/funclib/save_editor.mas', 
						text => $ARGS{$entry->id."_bibliography"}
					);

					$entry->setting("bibliography", "text", $text);
				}

				foreach  my $setting (@date_settings) { 

					my $date = eval {
						return Tab::dateme( $ARGS{$entry->id."_".$setting} );
					};

					if ($date) { 
						$entry->setting($setting, "date", $ARGS{$entry->id."_$setting"});
					} else { 
						undef $ARGS{$entry->id."_".$setting};
					}

				}

				if ($req) { 

					my $upload = $req->upload($entry->id."_script");

					if ($upload && $upload->filename) { 

						my $filename  = $upload->filename;

						$filename =~ s/.*[\/\\](.*)/$1/;
						$filename =~ s/\ //g;
						$filename =~ s/\)//g;
						$filename =~ s/\(//g;
						$filename =~ s/\'//g;  # '  stupid vim
						
						$filename = substr($filename, 0, 100);

						my $nowstring = $now->year."-".$now->month."-".$now->day."-".$now->hour."-".$now->strftime('%M');

						$filename .= "-".$nowstring;

						my $filetemp = $upload->tempname;

						system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/".$school->id."/scripts/".$entry->id."/".$filename;

						$entry->setting('script_file', $filename);
						$ARGS{$entry->id."_script_file"} = $filename;

					} else { 

						$ARGS{$entry->id."_script_file"} = $entry->setting('script_file');
					}

				} else { 
					$ARGS{$entry->id."_script_file"} = $entry->setting('script_file');
				}

				unless ($event->setting('usa_wsdc')) { 
					$local_incomplete{"No coach for points listed for ".$abbr}++ 
						unless $ARGS{$entry->id."_coach_points"};
				}

				if ($event->setting("ask_for_titles")) { 

					$local_incomplete{"Piece title missing for ".$abbr}++ 
						unless $ARGS{$entry->id."_title"};

					$local_incomplete{"Manuscript/cutting missing for ".$abbr}++ 
						unless $ARGS{$entry->id."_script_file"};
				}

				if ($event->setting('ask_for_bibliography')) { 

					$local_incomplete{"Manuscript/cutting missing for ".$abbr}++ 
						unless $ARGS{$entry->id."_script_file"};

					$local_incomplete{"Piece bibliography missing for ".$abbr}++ 
						unless $ARGS{$entry->id."_bibliography"};

				}

				if ($event->setting("ask_for_authors")) { 

					$local_incomplete{"Piece author missing for ".$abbr}++ 
						unless $ARGS{$entry->id."_author"};

					unless (
						( $ARGS{$entry->id."_publisher"} 
						  && $ARGS{$entry->id."_publish_date"} 
						  && $ARGS{$entry->id."_publish_isbn"} 
						) || ( 
						  $ARGS{$entry->id."_publish_url"} 
						  && $ARGS{$entry->id."_publish_print_date"} 
						)
					) { 
						$local_incomplete{"Publication date is incomplete for ".$abbr}++;
					}
				}

				if (keys %local_incomplete) { 

					$entry->setting("status", "incomplete");

					foreach my $key (keys %local_incomplete) { 
						$incomplete{$key}++;
					}

				} else { 
					$entry->setting("status", "complete");
				}
			}
		}
	}

	my $err;
	my $msg;

	if (keys %incomplete) { 
		foreach my $key (keys %incomplete) { 
			$err .= "<br />" if $err;
			$err .= $key;
		}
	} else { 
		$msg = "All entry information is complete!";
	}

	$m->redirect("details.mhtml?student_id=".$student->id."&school_id=".$school->id."&err=$err");
	$m->redirect("entries.mhtml?school_id=".$school->id."&msg=$msg");

</%init>
