<%args>
	$person
	$perms
	$target_id      => undef
	$property_name  => undef
	$setting_name   => undef
	$property_value => 0
	$flag           => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No entry ID sent"}');
		$m->abort();
	}

	unless ($property_name || $setting_name) {
		$m->print('{ "error": true, "message": "No property to change sent"}');
		$m->abort();
	}

	my $entry = Tab::Entry->retrieve($target_id);

	unless ($entry) {
		$m->print('{ "error": true, "message": "No entry found for ID '.$target_id.'"}');
		$m->abort();
	}

	my $message;
	my @replace;

	if ($setting_name) {

		if ($setting_name eq "reregistered") {

			#Check Extemp Debate

			if ($entry->event->setting("supp")) {

				if ($entry->event->type eq "debate") {

					Tab::Entry->set_sql( not_xdb => "
						select xdb.id, xdb_event.abbr
						from entry, entry_student, entry_setting, event,
							entry xdb, entry_student xdb_es,
							event xdb_event, event_setting

						where entry.id = ?
							and entry_student.entry = entry.id
							and entry_student.student = xdb_es.student
							and xdb_es.entry = xdb.id

							and xdb.event = xdb_event.id
							and xdb_event.type != 'debate'

							and xdb_event.id = event_setting.event
							and event_setting.tag = 'supp'

							and entry_setting.entry = xdb.id
							and entry_setting.tag = 'reregistered'

							and xdb_event.tourn = event.tourn
							and event.id = entry.event
					");

					if (Tab::Entry->search_not_xdb($entry->id)) {

						$message = "Cannot register in both Debate supps and Speech supps";

						my %response = (
							error   => 1,
							message => $message,
							replace => \@replace
						);

						$m->print(JSON::encode_json(\%response));
						$m->abort();
					}

				} else {

					Tab::Entry->set_sql( xdb => "
						select xdb.id, xdb_event.abbr
						from entry, entry_student, entry_setting, event,
							entry xdb, entry_student xdb_es,
							event xdb_event, event_setting

						where entry.id = ?
							and entry_student.entry = entry.id
							and entry_student.student = xdb_es.student
							and xdb_es.entry = xdb.id

							and xdb.event = xdb_event.id
							and xdb_event.type = 'debate'

							and xdb_event.id = event_setting.event
							and event_setting.tag = 'supp'

							and entry_setting.entry = xdb.id
							and entry_setting.tag = 'reregistered'

							and xdb_event.tourn = event.tourn
							and event.id = entry.event
					");

					if (Tab::Entry->search_xdb($entry->id)) {

						$message = "Cannot register in both Debate supps and Speech supps";

						my %response = (
							error   => 1,
							message => $message,
							replace => \@replace
						);

						$m->print(JSON::encode_json(\%response));
						$m->abort();
					}
				}
			}

			$message = " re-registered for ".$entry->event->abbr;

			my $replace;

			if ($property_value == 1) {
				$entry->dropped(0);
				$property_value = $person->id;
				$replace = {
					id      => $entry->id,
					content => "Confirmed by <br />".$person->email
				};

			} else {
				$message = "NOT " . $message;
				$entry->dropped(1);
				$replace = {
					id      => $entry->id,
					content => "Not Confirmed"
				};
			}

			push @replace, $replace;
			$entry->update();
		}

		$entry->setting($setting_name, $property_value);
	}

	my $msg = $entry->name.' marked as '.$message;

    my %response = (
		error   => 0,
		message => $msg,
		replace => \@replace
    );

    $m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>
