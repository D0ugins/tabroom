<%args>
	$person
	$school
	$category_id => undef
	$judge_id    => undef
	$return      => undef
</%args>
<%init>

	use Email::Valid;

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;

	my $category;

	if ($judge) {
		$category = $judge->category;
	} elsif ($category_id) {
		$category = Tab::Category->retrieve($category_id);
	}

	unless ($category) {
		$m->comp('/funclib/abort.mas',
			message => "No judge category found for $category_id"
		);
	}

	my $tourn = $category->tourn;
	my $chapter = $school->chapter;

	my $judge_person;
	my $person_ref;
	my $chapter_judge;

	my $max_rounds = $category->setting('max_rounds');
	$max_rounds = 8 unless $max_rounds;
	$max_rounds = 10 if $judge && $judge->setting('tab_room');

	my $msg;

	unless ($judge) {

		$chapter_judge =
			Tab::ChapterJudge->retrieve($ARGS{"chapter_judge_id"});

		my ($person_ref, $flubber) = $m->comp(
			"/funclib/nsda/api_client.mas",
			path => "/members/".$ARGS{"nsda"}
		) if $ARGS{"nsda"} > 0;

		foreach my $email ($ARGS{"tabroom_email"}, $ARGS{"email"}) {

			next unless $email;
			next if $judge_person;

			$judge_person = Tab::Person->search(
				email => $email
			)->first;

			unless ($judge_person) {
				my $login = Tab::Login->search(
					username => $email
				)->first;

				$judge_person = $login->person() if $login;
			}

			unless ($person_ref && $person_ref->{person_id}) {
				($person_ref, $flubber) = $m->comp(
					"/funclib/nsda/api_client.mas",
					path => "/members/by_email/$email"
				);
			}

		}

		unless ($judge_person) {
			$judge_person = $chapter_judge->person if $chapter_judge
				&& $chapter_judge->person > 0;
		}

		unless ($chapter_judge
			|| $person_ref
			|| $judge_person
			|| ($ARGS{"first"} && $ARGS{"last"})
		) {

			my $err = "Insufficient information provided to register a judge: must have at least one of a valid Tabroom judge, a NSDA coach record, a valid Tabroom account email or a first and last name";

			$m->redirect("judge_edit.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");

		}

		#Check for duplicates

		my @existing;

		if ($judge_person > 0) {
			push @existing, $m->comp(
				"/funclib/person_judges.mas",
				person => $judge_person,
				tourn  => $tourn
			);
		}

		if ($person_ref > 0 ) {
			push @existing, $m->comp(
				"/funclib/nsda_person_judges.mas",
				nsda_id => $person_ref->{person_id},
				tourn   => $tourn
			);
		}

		if ($chapter_judge > 0) {

			Tab::Judge->set_sql( tourn => "
				select judge.*
				from judge, category
					where category.tourn = ?
					and category.id = judge.category
					and judge.chapter_judge = ?
			");

			push @existing, Tab::Judge->search_tourn(
				$tourn->id,
				$chapter_judge->id
			);
		}

		if (@existing) {

			my $err = "That judge is already registered in the tournament: ";

			my %done;

			foreach my $other (@existing) {

				next if $done{$other->id}++;

				$err .= "<br />" if $err;
				$err .= $other->first." ".$other->last;
				$err .= " from ".$other->school->name." " if $other->school > 0;
				$err .= " in ".$other->category->abbr;
			}

			$m->redirect("judge_edit.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");

		} else {

			my $warning;

			unless ($person_ref) {

				my $nsda_id;
				my $email;

				$nsda_id = $judge_person->nsda
					if ($judge_person && $judge_person->nsda);

				$nsda_id = $chapter_judge->nsda
					if ($chapter_judge && $chapter_judge->nsda);

				$email = $chapter_judge->email
					if $chapter_judge
					&& $chapter_judge->email;

				$email = $judge_person->email
					if $judge_person;


				($person_ref, $flubber) = $m->comp(
					"/funclib/nsda/api_client.mas",
					path => "/members/".$nsda_id
				) if $nsda_id;

				unless ($person_ref && $person_ref->{person_id}) {
					($person_ref, $flubber) = $m->comp(
						"/funclib/nsda/api_client.mas",
						path => "/members/by_email/$email"
					);
				}
			}

			unless ($judge_person) {

				my $nsda_id;
				my $email;

				$nsda_id = $chapter_judge->nsda
					if ($chapter_judge && $chapter_judge->nsda);

				$nsda_id = $person_ref->{person_id}
					if ($person_ref && $person_ref->{person_id});

				$email = $chapter_judge->email
					if ($chapter_judge && $chapter_judge->email);

				$email = $person_ref->{email}
					if ($person_ref && $person_ref->{email});

				undef $email unless Email::Valid->address(
					-address => $email,
					-mxcheck => 0
				);

				$judge_person = Tab::Person->search(
					email => $email
				)->first if $email;

				unless ($judge_person) {
					$judge_person = Tab::Person->search(
						nsda => $nsda_id
					)->first if $nsda_id;
				}
			}

			if ($judge_person && $person_ref && $judge_person->nsda != $person_ref->{person_id}) {
				$judge_person->nsda($person_ref->{person_id});
				eval { $judge_person->update; };
			}

			if ($chapter_judge) {

				if ($judge_person) {
					$chapter_judge->person($judge_person->id);
				}

				if ($person_ref) {
					$chapter_judge->nsda($person_ref->{person_id});
				}

				$chapter_judge->update();

			} else {

				if ($judge_person) {
					$chapter_judge = $judge_person->chapter_judges(
						chapter => $chapter->id,
						last    => $judge_person->last
					)->first;
				}

				unless ($chapter_judge) {
					if ($person_ref) {
						$chapter_judge = $chapter->chapter_judges(
							nsda => $person_ref->{person_id}
						)->first;
					}
				}

				unless ($chapter_judge) {

					# There might be another one by name or something but I
					# could be here all friggin day checking iterations

					my $first = $ARGS{"first"};
					my $middle;
					my $last  = $ARGS{"last"};
					my $phone = $ARGS{"phone"};
					my $email = $ARGS{"email"};
					my $nsda;
					my $judge_person_id;

					if ($person_ref) {
						$first  = $person_ref->{first};
						$middle = $person_ref->{middle};
						$last   = $person_ref->{last};
						$phone  = $person_ref->{phone};
						$email  = $person_ref->{email};
						$nsda   = $person_ref->{person_id};
					}

					if ($judge_person) {
						$first     = $judge_person->first;
						$middle    = $judge_person->middle;
						$last      = $judge_person->last;
						$email     = $judge_person->email;
						$phone     = $judge_person->phone;
						$judge_person_id = $judge_person->id;
					}

					undef $email unless Email::Valid->address(
						  -address => $email,
						   -mxcheck => 0
					);

					unless ($first && $last) {

						my $err = "You must supply a name, or a Coach/Tabroom record, to register a judge";
						$m->redirect("judge_edit.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");
					} else {

						$chapter_judge = Tab::ChapterJudge->search(
							first   => $first,
							last    => $last,
							chapter => $school->chapter->id,
						)->first;

						if ($chapter_judge) {
							$chapter_judge->nsda($nsda) if $nsda;
							$chapter_judge->update();
						}
					}

					unless ($chapter_judge) {

						$chapter_judge = Tab::ChapterJudge->create({
							first   => $first,
							middle  => $middle,
							last    => $last,
							chapter => $school->chapter->id,
							phone   => $phone,
							email   => $email,
							nsda    => $nsda,
							person  => $judge_person_id
						});
					}
				}
			}

			if ($chapter_judge) {

				my $nsda = $person_ref->{person_id} if $person_ref;
				my $judge_person_id = $judge_person->id if $judge_person;
				$judge_person_id = 0 unless $judge_person_id;

				$judge = Tab::Judge->create({
					chapter_judge => $chapter_judge->id,
					first         => $chapter_judge->first,
					middle        => $chapter_judge->middle,
					last          => $chapter_judge->last,
					active        => 1,
					obligation    => $max_rounds,
					category      => $category->id,
					covers        => $category->id,
					school        => $school->id,
					person        => $judge_person_id
				});

				$judge->setting("nsda", $nsda) if $nsda;

				my $logmsg = "Judge ".$judge->first." ".$judge->last." registered";

				$m->comp("/funclib/log.mas",
					tourn       => $tourn->id,
					school      => $school->id,
					category    => $category->id,
					type        => "registration",
					person      => $person,
					description => $logmsg
				);
			}
		}
		$msg = "Judge ".$judge->first." ".$judge->last." created";
	}

	if ($judge) {

		$chapter_judge = $judge->chapter_judge;

		if ($ARGS{"nsda"} && $ARGS{"nsda"} != $chapter_judge->nsda) {
			$chapter_judge->nsda($ARGS{"nsda"});
			$chapter_judge->update();
		}

		if ($ARGS{"nsda"}) {
			$judge->setting('diamonds',
				$m->comp("/funclib/nsda/member_honors.mas",
					diamonds_only => 1,
					nsda_id       => $ARGS{"nsda"}
				));
		} else {
			$judge->setting('diamonds', 0);
		}

		if ($ARGS{"tabroom_email"}
			&& ( (not defined $judge_person)
				|| ($ARGS{"tabroom_email"} != $judge_person->email)
			)
		) {

			$judge_person = Tab::Person->search(
				email => $ARGS{"tabroom_email"}
			)->first;

			$judge->person($judge_person->id) if $judge_person;
			$chapter_judge->person($judge_person->id) if $judge_person;

			$chapter_judge->update();
			$judge->update();
		}

		foreach my $setting ("diverse", "prefers_congress", "parli") {
			if ($ARGS{$setting}) {
				$judge->setting($setting, 1);
			} else {
				$judge->setting($setting, 0);
			}
		}

		$judge->obligation($ARGS{"obligation"}) if $ARGS{"obligation"};
		$judge->update();

		my @jpools = $m->comp(
			"/funclib/category_jpools.mas",
			category => $category,
			limit    => "registrant"
		);

		foreach my $jpool (@jpools) {

			my $exists = Tab::JPoolJudge->search(
				judge => $judge->id,
				jpool => $jpool->id
			)->first;

			if ($ARGS{$jpool->id}) {
				unless ($exists) {
					$exists = Tab::JPoolJudge->create({
						judge => $judge->id,
						jpool => $jpool->id
					});
				}
			} elsif ($exists) {
				$exists->delete();
			}
		}

		my %nomination;

		if ($judge->setting("nomination")) {
			%nomination = eval{
				return %{JSON::decode_json($judge->setting("nomination"))};
			};
		}

		if ($ARGS{"self_nominated"}) {

			$nomination{'self_nominated'} = 1;

		} else {

			if ($nomination{'self_nominated'}) {

				my $msg = "Judge ".$judge->first." ".$judge->last." removed their semi/finals nomination";

				$m->comp("/funclib/log.mas",
					tourn       => $category->tourn,
					category    => $category,
					school      => $school,
					type        => "registration",
					person      => $person,
					description => $msg
				);

				delete $nomination{'self_nominated'};
			}
		}

		if ($ARGS{"two_years_out"}) {
			$nomination{'two_years_out'} = 1;
		} else {
			if ($nomination{'two_years_out'}) {
				delete $nomination{'two_years_out'};
			}
		}

		foreach my $key ("phonetic", "bio", "text", "role") {
			if ($ARGS{$key}) {
				$nomination{$key} = $m->comp(
					"/funclib/save_editor.mas",
					text => $ARGS{$key}
				);
			} else {
				delete $nomination{$key};
			}
		}

		my @types = (
			"Policy",
			"LD",
			"PF",
			"Congress",
			"Public Address",
			"Interp",
			"Big Questions",
			"Worlds Debate",
			"Supp IEs",
			"Supp Debate",
			"Middle School IE",
			"Middle School Debate"
		);

		my $typed;

		foreach my $type (@types) {
			if ($ARGS{$type}) {
				$nomination{"type"}{$type} = $ARGS{$type};
				$typed++;
			} else {
				delete $nomination{"type"}{$type};
			}
		}

		if ($typed) {
			$judge->setting("nomination", "text", JSON::encode_json(\%nomination));
		} else {
			$judge->setting("nomination", 0);
		}

	}

	if ($judge) {

		if ($judge->person > 0) {
			$judge->setting("email", $judge->person->email);
			$judge->setting("phone", $judge->person->phone);
		} else {

			$ARGS{"phone"} =~  s/[\D_]//g;
			$judge->setting("phone", $ARGS{'phone'});

			undef $ARGS{email} unless Email::Valid->address(
				  -address => $ARGS{email},
				   -mxcheck => 0
			);
			$judge->setting("email", $ARGS{'email'});

		}
	}

	$m->comp("judge_complete_check.mas", judge => $judge) if $judge;

	if ($return) {
		$m->redirect("/register/judge/edit.mhtml?judge_id=".$judge->id."&msg=$msg");
	} else {
		$m->redirect("judge_edit.mhtml?judge_id=".$judge->id."&school_id=".$school->id."&msg=$msg");
	}

</%init>
