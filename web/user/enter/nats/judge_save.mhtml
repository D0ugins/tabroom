<%args>
	$school
	$category_id => undef
	$judge_id    => undef
</%args>
<%init>

	use Tab::NSDA::Person;

	my $judge = Tab::Judge->retrieve($judge_id) if $judge_id;
	my $category;
	
	if ($judge) { 
		$category = $judge->category;
	} elsif ($category_id) {
		$category = Tab::Category->retrieve($category_id);
	}

	unless ($category) { 
		$m->comp('/funclib/abort.mas', 
			message => "No judge category found for $category_id"
		);
	}

	my $tourn = $category->tourn;
	my $chapter = $school->chapter;

	my $person;
	my $nsda_person;
	my $chapter_judge;

	my $max_rounds = $category->setting('max_rounds');
	$max_rounds = 8 unless $max_rounds;
	$max_rounds = 10 if $judge->setting('tab_room');

	my $msg;

	unless ($judge) { 

		$chapter_judge = 
			Tab::ChapterJudge->retrieve($ARGS{"chapter_judge_id"});

		$nsda_person = Tab::NSDA::Person->search(
			ualt_id => $ARGS{"nsda_ualt_id"}
		)->first if $ARGS{"nsda_ualt_id"} > 0;

		foreach my $email ($ARGS{"tabroom_email"}, $ARGS{"email"}) { 

			next unless $email;
			next if $person;

			$person = Tab::Person->search(
				email => $email
			)->first;

			unless ($person) { 
				my $login = Tab::Login->search(
					username => $email
				)->first;

				$person = $login->person();
			}

			unless ($nsda_person) { 
				$nsda_person = Tab::NSDA::Person->search(
					uemail => $email
				)->first;
			}
		}

		unless ($person) { 
			$person = $chapter_judge->person if $chapter_judge;
		}

		unless ($chapter_judge 
			|| $nsda_person 
			|| $person 
			|| ($ARGS{"first"} && $ARGS{"last"})
		) { 

			my $err = "Insufficient information provided to register a judge: must have at least one of a valid Tabroom judge, a NSDA coach record, a valid Tabroom account email or a first &amp; last name";

			$m->redirect("judge_edit.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");

		}

		#Check for duplicates

		my @existing;

		if ($person > 0) { 
			push @existing, $m->comp(
				"/funclib/person_judges.mas", 
				person => $person,
				tourn  => $tourn
			);
		}

		if ($nsda_person > 0 ) { 
			push @existing, $m->comp(
				"/funclib/nsda_person_judges.mas", 
				nsda_person => $nsda_person,
				tourn       => $tourn
			);
		}

		if ($chapter_judge > 0) { 
			
			Tab::Judge->set_sql( tourn => "
				select judge.*
				from judge, category
					where category.tourn = ? 
					and category.id = judge.category
					and judge.chapter_judge = ? 
			");

			push @existing, Tab::Judge->search_tourn(
				$tourn->id, 
				$chapter_judge->id
			);
		}

		if (@existing) { 

			my $err = "That judge is already registered in the tournament: ";

			my %done;

			foreach my $other (@existing) { 

				next if $done{$other->id}++;

				$err .= "<br />" if $err;
				$err .= $other->first." ".$other->last;
				$err .= " from ".$other->school->name." " if $other->school > 0;
				$err .= " in ".$other->category->abbr;
			}

			$m->redirect("judge_edit.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");

		} else { 

			my $warning; 

			unless ($nsda_person) { 

				my $ualt_id;
				my $email;

				$ualt_id = $person->ualt_id 
					if ($person && $person->ualt_id);

				$ualt_id = $chapter_judge->ualt_id 
					if ($chapter_judge && $chapter_judge->ualt_id);

				$email = $chapter_judge->email 
					if $chapter_judge 
					&& $chapter_judge->email;

				$email = $person->email 
					if $person;

				$nsda_person = Tab::NSDA::Person->search( 
					ualt_id => $ualt_id
				)->first if $ualt_id;

				unless ($nsda_person) { 
					$nsda_person = Tab::NSDA::Person->search( 
						uemail => $email
					)->first if $email;
				}
			}

			unless ($person) { 

				my $ualt_id;
				my $email;

				$ualt_id = $chapter_judge->ualt_id 
					if ($chapter_judge && $chapter_judge->ualt_id);

				$ualt_id = $nsda_person->ualt_id 
					if ($nsda_person && $nsda_person->ualt_id);

				$email = $chapter_judge->email 
					if ($chapter_judge && $chapter_judge->email);

				$email = $nsda_person->uemail 
					if ($nsda_person && $nsda_person->uemail);

				$person = Tab::Person->search( 
					email => $email
				)->first if $email;

				unless ($person) { 
					$person = Tab::Person->search( 
						ualt_id => $ualt_id
					)->first if $ualt_id;
				}
			}

			if ($person && $nsda_person) { 
				$person->ualt_id($nsda_person->ualt_id);
				$person->update;
			}

			if ($chapter_judge) { 

				if ($person) { 
					$chapter_judge->person($person->id);
				}

				if ($nsda_person) { 
					$chapter_judge->ualt_id($nsda_person->ualt_id);
				}

				$chapter_judge->update();

			} else { 

				if ($person) { 
					$chapter_judge = $person->chapter_judges(
						chapter => $chapter->id,
						last    => $person->last
					)->first;
				}

				unless ($chapter_judge) { 
					if ($nsda_person) { 
						$chapter_judge = $chapter->chapter_judges(
							ualt_id => $nsda_person->ualt_id
						)->first;
					}
				}

				unless ($chapter_judge) { 

					# There might be another one by name or something but I
					# could be here all friggin day checking iterations

					my $first = $ARGS{"first"};
					my $middle;
					my $last  = $ARGS{"last"};
					my $phone = $ARGS{"phone"};
					my $email = $ARGS{"email"};
					my $ualt_id; 
					my $person_id;

					if ($nsda_person) {
						$first   = $nsda_person->ufname;
						$middle  = $nsda_person->umname;
						$last    = $nsda_person->ulname;
						$phone   = $nsda_person->cell;
						$email   = $nsda_person->uemail;
						$ualt_id = $nsda_person->ualt_id;
					}

					if ($person) { 
						$first     = $person->first;
						$middle    = $person->middle;
						$last      = $person->last;
						$email     = $person->email;
						$phone     = $person->phone;
						$person_id = $person->id;
					}

					unless ($first && $last) { 

						my $err = "You must supply a name, or a Coach/Tabroom record, to register a judge";
						$m->redirect("judge_edit.mhtml?category_id=".$category->id."&school_id=".$school->id."&err=$err");
					} else {

						$chapter_judge = Tab::ChapterJudge->search(
							first   => $first,
							last    => $last,
							chapter => $school->chapter->id,
						)->first;

						$chapter_judge->ualt_id($ualt_id) if $ualt_id;
						$chapter_judge->update();
					}

					unless ($chapter_judge) { 

						$chapter_judge = Tab::ChapterJudge->create({
							first   => $first,
							middle  => $middle,
							last    => $last,
							chapter => $school->chapter->id,
							phone   => $phone,
							email   => $email,
							ualt_id => $ualt_id,
							person  => $person_id
						});

					}
				}
			}

			if ($chapter_judge) { 
				
				my $ualt_id = $nsda_person->ualt_id if $nsda_person;
				my $person_id = $person->id if $person;
				$person_id = 0 unless $person_id;

				$judge = Tab::Judge->create({
					chapter_judge => $chapter_judge->id,
					first         => $chapter_judge->first,
					middle        => $chapter_judge->middle,
					last          => $chapter_judge->last,
					active        => 1,
					obligation    => $max_rounds,
					category      => $category->id,
					covers        => $category->id,
					school        => $school->id,
					person        => $person_id
				});

				$judge->setting("ualt_id", $ualt_id) if $ualt_id;

			}
		}
		$msg = "Judge ".$judge->first." ".$judge->last." created";

	} 

	if ($judge) { 
	
		$chapter_judge = $judge->chapter_judge;

		if ($ARGS{"nsda_ualt_id"} && $ARGS{"nsda_ualt_id"} != $chapter_judge->ualt_id) { 
			$chapter_judge->ualt_id($ARGS{"nsda_ualt_id"});
			$chapter_judge->update();


		}

		if ($ARGS{"nsda_ualt_id"}) { 
			$judge->setting('diamonds', 
				$m->comp("/funclib/nationals_diamonds.mas", 
					ualt_id => $ARGS{"nsda_ualt_id"}
				));
		} else { 
			$judge->setting('diamonds', 0);
		}

		if ($ARGS{"tabroom_email"} 
			&& ( (not defined $person) 
				|| ($ARGS{"tabroom_email"} != $person->email)
			)
		) { 

			$person = Tab::Person->search(
				email => $ARGS{"tabroom_email"}
			)->first;
			
			$judge->person($person->id) if $person;
			$chapter_judge->person($person->id) if $person;

			$chapter_judge->update();
			$judge->update();
		}


		foreach my $setting ("diverse", "prefers_congress", "parli") { 
			if ($ARGS{$setting}) { 
				$judge->setting($setting, 1);
			} else { 
				$judge->setting($setting, 0);
			}
		}

		$judge->obligation($ARGS{"obligation"}) if $ARGS{"obligation"};
		$judge->update();

		my @jpools = $m->comp(
			"/funclib/category_jpools.mas",
			category => $category,
			limit    => "registrant"
		);

		foreach my $jpool (@jpools) { 

			my $exists = Tab::JPoolJudge->search(
				judge => $judge->id,
				jpool => $jpool->id
			)->first;

			if ($ARGS{$jpool->id}) { 
				unless ($exists) { 
					$exists = Tab::JPoolJudge->create({
						judge => $judge->id,
						jpool => $jpool->id
					});
				}
			} elsif ($exists) { 
				$exists->delete();
			}

		}

		my %nomination; 

		$nomination{'self_nominated'} = 1 if $ARGS{"self_nominated"};
		$nomination{'phonetic'} = $ARGS{"phonetic"};
		$nomination{'bio'} = $ARGS{"bio"};

		$nomination{"text"} = $m->comp(
			"/funclib/save_editor.mas", 
			text => $ARGS{"text"}
		);

		my @types = ( 
			"Policy",
			"LD",
			"PF",
			"Congress",
			"Address IEs",
			"Interp IEs",
			"Supps &amp; Cons",
			"Big Questions",
			"Worlds Debate"
		);

		foreach my $type (@types) { 
			$nomination{"type"}{$type} = $ARGS{$type}
				if $ARGS{$type};
		}

		$judge->setting("nomination", "text", JSON::encode_json(\%nomination));

	}

	$m->comp("judge_complete_check.mas", judge => $judge) if $judge;

	$m->redirect("judge_edit.mhtml?judge_id=".$judge->id."&school_id=".$school->id."&msg=$msg");

</%init>
