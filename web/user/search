./nsda/link.mhtml:	my @chapters = $person->chapters;
./nsda/link.mhtml:	my @logins = $person->logins( source => "nsda" );
./nsda/autopoint_post.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./nsda/autopoint_post.mhtml:	my $now = DateTime->now();
./nsda/autopoint_post.mhtml:	my $usa_wsdc++ if $tourn->setting("usa_wsdc");
./nsda/autopoint_post.mhtml:		my $err = $tourn->name."'s NSDA points have already been posted";
./nsda/autopoint_post.mhtml:	my $tz = $tourn->tz;
./nsda/autopoint_post.mhtml:	my $start = $tourn->start->set_time_zone($tz);
./nsda/autopoint_post.mhtml:	my $end = $tourn->end->set_time_zone($tz);
./nsda/autopoint_post.mhtml:	my $site = $tourn->sites->first;
./nsda/autopoint_post.mhtml:	my $location = $site->name if $site;
./nsda/autopoint_post.mhtml:    my $dbh = Tab::DBI->db_Main(); 
./nsda/autopoint_post.mhtml:    my $sth = $dbh->prepare('
./nsda/autopoint_post.mhtml:	my %entry_nsda = ();
./nsda/autopoint_post.mhtml:	my %student_nsda = ();
./nsda/autopoint_post.mhtml:	my %student_data = ();
./nsda/autopoint_post.mhtml:	my %alt_student = ();
./nsda/autopoint_post.mhtml:	my %school_by_chapter = ();
./nsda/autopoint_post.mhtml:	my %chapter_state = ();
./nsda/autopoint_post.mhtml:	my %chapter_name = ();
./nsda/autopoint_post.mhtml:	my @nsda_chapters; 
./nsda/autopoint_post.mhtml:	while( my ($entry_id, $student_id, $chapter_id, $student_ualt_id, $school_id, $first, $last, $state, $name) = $sth->fetchrow_array()) { 	
./nsda/autopoint_post.mhtml:				my @person_schools = Tab::NSDA::PersonSchool->search( ualt_id => $student_ualt_id);
./nsda/autopoint_post.mhtml:				my $person_school = shift @person_schools;  # gets the most recent up to date chapter connection
./nsda/autopoint_post.mhtml:			my @alts = Tab::NSDA::AltStudent->search( nfl_school_id => $chapter_id );
./nsda/autopoint_post.mhtml:			foreach my $alt (@alts) { 
./nsda/autopoint_post.mhtml:			my $student = Tab::Student->retrieve($student_id);
./nsda/autopoint_post.mhtml:	my %seen = (); 
./nsda/autopoint_post.mhtml:		my $instance = Tab::NSDA::Instance->create({
./nsda/autopoint_post.mhtml:		foreach my $chapter_id (@nsda_chapters) { 
./nsda/autopoint_post.mhtml:			my $state = $chapter_state{$chapter_id};
./nsda/autopoint_post.mhtml:			my $name = $chapter_name{$chapter_id};
./nsda/autopoint_post.mhtml:			my $school_id = $school_by_chapter{$chapter_id};
./nsda/autopoint_post.mhtml:			my $nsda_school = Tab::NSDA::School->create({
./nsda/autopoint_post.mhtml:		foreach my $event ($tourn->events) { 
./nsda/autopoint_post.mhtml:			my $nsda_event_category;
./nsda/autopoint_post.mhtml:			my $nsda_cat;
./nsda/autopoint_post.mhtml:			my $nsda_subcat;
./nsda/autopoint_post.mhtml:			my $size = $event->setting('max_entry');
./nsda/autopoint_post.mhtml:			foreach my $round ($event->rounds) { 
./nsda/autopoint_post.mhtml:				my %spoke_in_round = ();
./nsda/autopoint_post.mhtml:					my @spoke = Tab::Student->search_spoke_in_round($round->id);
./nsda/autopoint_post.mhtml:				my ($entries_ref, $tb_ref, $z, $f, $q, $p, $letter_ref, $c, $code, $meh) 
./nsda/autopoint_post.mhtml:				my ($bye_ref, $fft_ref) 
./nsda/autopoint_post.mhtml:				my %entry_order;
./nsda/autopoint_post.mhtml:				my %entry_result;
./nsda/autopoint_post.mhtml:				my %panel_entries;
./nsda/autopoint_post.mhtml:				my %entry_points;
./nsda/autopoint_post.mhtml:				my %panel_round;
./nsda/autopoint_post.mhtml:				foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
./nsda/autopoint_post.mhtml:					foreach my $entry_id (@{${$entries_ref}{$key}}) {
./nsda/autopoint_post.mhtml:					foreach my $panel ( keys %panel_entries ) { 
./nsda/autopoint_post.mhtml:						my $rank;
./nsda/autopoint_post.mhtml:						my $last_order;
./nsda/autopoint_post.mhtml:						my $base_points = 7 - $nsda_event_category->nat_category;
./nsda/autopoint_post.mhtml:						foreach my $entry (@{$panel_entries{$panel}}) { 
./nsda/autopoint_post.mhtml:					foreach my $panel ( keys %panel_entries ) { 
./nsda/autopoint_post.mhtml:						my $win_points = 6 - ($nsda_event_category->nat_category * 2);
./nsda/autopoint_post.mhtml:						my $win = 1;
./nsda/autopoint_post.mhtml:						foreach my $entry (@{$panel_entries{$panel}}) { 
./nsda/autopoint_post.mhtml:					foreach my $panel ( keys %panel_entries ) { 
./nsda/autopoint_post.mhtml:						my $win_points = 6 - ($nsda_event_category->nat_category * 2);
./nsda/autopoint_post.mhtml:						my $win = 1;
./nsda/autopoint_post.mhtml:						foreach my $entry (@{$panel_entries{$panel}}) { 
./nsda/autopoint_post.mhtml:				my $count;
./nsda/autopoint_post.mhtml:				foreach my $panel ( keys %panel_entries ) { 
./nsda/autopoint_post.mhtml:					foreach my $entry (@{$panel_entries{$panel}}) { 
./nsda/autopoint_post.mhtml:						my $school_id = $entry_nsda{$entry}{"school"};
./nsda/autopoint_post.mhtml:						my $nfl_school_id  = $entry_nsda{$entry}{"chapter"};
./nsda/autopoint_post.mhtml:						foreach my $student (@{$entry_nsda{$entry}{"students"}}) {
./nsda/autopoint_post.mhtml:							my $ualt = $student_data{$student}{"ualt"};
./nsda/autopoint_post.mhtml:							my $name = $student_data{$student}{"name"};
./nsda/chapter_link.mhtml:	my $is_admin++ if Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $chapter_id);
./nsda/chapter_link.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/chapter_link.mhtml:	my $nsda_chapter;
./nsda/chapter_link.mhtml:	foreach my $login ($person->logins) { 
./nsda/chapter_link.mhtml:		my @candidates = $m->comp("/funclib/nsda_school_by_person.mas", nsda_login => $login);
./nsda/chapter_link.mhtml:		foreach my $candidate (@candidates) { 
./nsda/chapter_link.mhtml:		my $err = "You do not have access to a target member school in the NSDA Points System, so you may not link students";
./nsda/import_nsda_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/import_nsda_roster.mhtml:	my $now = DateTime->now;
./nsda/import_nsda_roster.mhtml:	my $grad_year_limit = $now->year;
./nsda/import_nsda_roster.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./nsda/import_nsda_roster.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./nsda/import_nsda_roster.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./nsda/import_nsda_roster.mhtml:	my %student_name = map {$_->first." ".$_->last." ".$_->grad_year} @students;
./nsda/import_nsda_roster.mhtml:		my $count;
./nsda/import_nsda_roster.mhtml:		foreach my $nsda_student (@nsda_students) { 
./nsda/import_nsda_roster.mhtml:			my $name = $nsda_student->ufname." ".$nsda_student->umname." ".$nsda_student->ulname." ".$nsda_student->grad_yr;
./nsda/import_nsda_roster.mhtml:		my $msg = "$count entrants imported from the NSDA to your roster";
./nsda/import_nsda_roster.mhtml:%				foreach my $nsda_student (@nsda_students) { 
./nsda/student_link.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/student_link.mhtml:	my $now = DateTime->now;
./nsda/student_link.mhtml:	my $grad_year_limit = $now->year;
./nsda/student_link.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./nsda/student_link.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./nsda/student_link.mhtml:	my %student_by_ualt_id = map {$_->ualt_id => $_} @nsda_students;
./nsda/student_link.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./nsda/student_link.mhtml:	my $linked;
./nsda/student_link.mhtml:	my $unlinked;
./nsda/student_link.mhtml:	foreach my $student (@students) {
./nsda/student_link.mhtml:				my $nsda_student_id = $ARGS{"student_".$student->id};
./nsda/student_link.mhtml:				my $nsda_student = $student_by_ualt_id{$nsda_student_id};
./nsda/student_link.mhtml:	my $msg = "$linked students linked to NSDA autopointing!  YAY! " if $linked;
./nsda/student_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./nsda/student_roster.mhtml:	my $ok;
./nsda/student_roster.mhtml:	foreach my $admin ($chapter->admins) { 
./nsda/student_roster.mhtml:	my $now = DateTime->now;
./nsda/student_roster.mhtml:	my $grad_year_limit = $now->year;
./nsda/student_roster.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./nsda/student_roster.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./nsda/student_roster.mhtml:	my %student_mid = map {$_->ufname." ".$_->umname." ".$_->ulname => $_->ualt_id} @nsda_students;
./nsda/student_roster.mhtml:	my %student_name = map {$_->ufname." ".$_->ulname => $_->ualt_id} @nsda_students;
./nsda/student_roster.mhtml:	my %student_by_ualt_id = map {$_->ualt_id => $_} @nsda_students;
./nsda/student_roster.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./nsda/student_roster.mhtml:%				foreach my $student (@students) { 
./nsda/student_roster.mhtml:%								my $nsda_student = $student_by_ualt_id{$student->ualt_id};
./nsda/student_roster.mhtml:%									foreach my $nsda_student (@nsda_students) { 
./nsda/student_roster.mhtml:%										my $selected++ if $student_name{$student->first." ".$student->last} == $nsda_student->id;
./nsda/student_roster.mhtml:%								my $warn = "Doing this will disable auto-posting points for this competitor.  Are you sure?";
./nsda/index.mhtml:	my @logins = $person->logins;
./nsda/index.mhtml:	my %nsda_people;
./nsda/index.mhtml:	my @nsda_schools;
./nsda/index.mhtml:	my %nsda_by_id;
./nsda/index.mhtml:	foreach my $login (@logins) { 
./nsda/index.mhtml:		my @candidates = $m->comp("/funclib/nsda_school_by_person.mas", nsda_person => $nsda_people{$login->id});
./nsda/index.mhtml:		foreach my $candidate (@candidates) {
./nsda/index.mhtml:	my @nsda_chapters;
./nsda/index.mhtml:%		foreach my $login (@logins) { 
./nsda/index.mhtml:%				my $warn = "Unlinking may cut off access to your Tabroom.com account.  Are you sure?";
./nsda/index.mhtml:%		foreach my $chapter ($person->chapters) { 
./nsda/index.mhtml:%							foreach my $school (@nsda_schools) { 
./nsda/index.mhtml:%						my $warn = "Unlinking may cut off access to your Tabroom.com account.  Are you sure?";
./nsda/autopoint.mhtml:	my $now = DateTime->now();
./nsda/autopoint.mhtml:	my @categories = sort {$a->name cmp $b->name} Tab::NSDA::EventCategories->retrieve_all;
./nsda/autopoint.mhtml:	my $switch;
./nsda/autopoint.mhtml:	my %category_names = (
./nsda/autopoint.mhtml:%		my $tourn = Tab::Tourn->retrieve($tourn_id);
./nsda/autopoint.mhtml:%		my $tz = $tourn->tz;
./nsda/autopoint.mhtml:%		foreach my $event ($tourn->events) { 
./nsda/autopoint.mhtml:%			my $event_name = $event->name;
./nsda/autopoint.mhtml:%			my $nsda_category = $event->setting("nsda_event_category");
./nsda/autopoint.mhtml:%							foreach my $category (@categories) { 
./nsda/autopoint.mhtml:	my $start = $now->clone;
./nsda/autopoint.mhtml:	my @tourns = Tab::Tourn->search_recent_over( $now, $start);
./nsda/autopoint.mhtml:%			foreach my $tourn (@tourns) { 
./nsda/link_confirm.mhtml:	my $now = DateTime->now();
./nsda/link_confirm.mhtml:	my $err;
./nsda/link_confirm.mhtml:	my $nsda_login = Tab::NSDA::Login->search( username => $nsda_username )->first;
./nsda/link_confirm.mhtml:	my $encoded_password = md5_hex($nsda_password.$nsda_username.$Tab::points_salt);
./nsda/link_confirm.mhtml:	my $nsda_person = Tab::NSDA::Person->search( user_id => $nsda_login->person_id )->first;
./nsda/link_confirm.mhtml:	my $salt = $m->comp("/funclib/generate_randomstring.mas"); 
./nsda/link_confirm.mhtml:	my $new_hash = Crypt::PasswdMD5::unix_md5_crypt($nsda_password,$salt);
./nsda/link_confirm.mhtml:	my $msg;
./nsda/link_confirm.mhtml:		my @logins = $person->logins;
./nsda/link_confirm.mhtml:		my $winner;
./nsda/link_confirm.mhtml:		foreach my $login (@logins) { 
./nsda/menu.mas:	my $tz = $person->tz if $person;
./nsda/menu.mas:%			foreach my $chapter ($person->chapters) { 
./login/new_user_save.mhtml:    my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/new_user_save.mhtml:	my @existing_person = Tab::Person->search( email => $email );
./login/new_user_save.mhtml:	my @existing_login = Tab::Login->search( username => $email );
./login/new_user_save.mhtml:		my $emailok = Email::Valid->address( -address => $email, -mxcheck => 0 ) ? 'yes' : 'no';
./login/new_user_save.mhtml:		my $sha_crypt = crypt($pass1, '$6$' . $salt);
./login/new_user_save.mhtml:		my $now = DateTime->now;
./login/new_user_save.mhtml:		my $person = Tab::Person->create({ 
./login/new_user_save.mhtml:		my $login = Tab::Login->create({ 
./login/profile.mhtml:%			foreach my $login ($person->logins) { 
./login/forgot_send.mhtml:	my $err;
./login/forgot_send.mhtml:	my $login = Tab::Login->search( username => $username )->first;
./login/forgot_send.mhtml:	my $person = Tab::Person->search( email => $username )->first;
./login/forgot_send.mhtml:	my $id = $login->id;
./login/forgot_send.mhtml:	my $key =  $m->comp("/funclib/generate_randomstring.mas", length => 30);
./login/forgot_send.mhtml:	my $expires = DateTime->now;
./login/forgot_send.mhtml:	my $url = "$Tab::url_prefix/user/login/forgot_change.mhtml?id=$id&key=$key";
./login/forgot_send.mhtml:	my $message_text = "
./login/forgot_send.mhtml:	my $msg = MIME::Lite->new(
./login/person_required.mas:		my $err = "Your login session has expired, or someone else has logged in under your account.  Please log in again";
./login/passwd.mhtml:	my $login = Tab::Login->retrieve($login_id);
./login/passwd.mhtml:		my @others =  Tab::Login->search( username => $username);
./login/passwd.mhtml:			my $err = "The username $username is already in use by another user.  Choose another.";
./login/passwd.mhtml:	my $new_salt = $m->comp("/funclib/generate_randomstring.mas");
./login/passwd.mhtml:	my $err = "The two passwords you listed did not match" unless $newpass eq $repeatpass;
./login/passwd.mhtml:    my $db_md5_hash = $login->password;  #This gets the salt from the MD5 combined password hash
./login/passwd.mhtml:    my $db_sha2_hash = $login->sha512;  #This gets the salt from the MD5 combined password hash
./login/passwd.mhtml:		my $verify_password = crypt($oldpass,$db_sha2_hash);
./login/passwd.mhtml:		my $verify_password = crypt($oldpass,$db_md5_hash);
./login/passwd.mhtml:	my $now = DateTime->now;
./login/passwd.mhtml:	my $new_sha2_hash = crypt($newpass, '$6$' . $new_salt);
./login/passwd.mhtml:	my $msg = "Your password has been changed";
./login/logout.mhtml:	my $tokencookie = Apache2::Cookie->new($r,
./login/logout.mhtml:	my $passwordcookie = Apache2::Cookie->new($r,
./login/logout.mhtml:    my $msg = "You have been logged out from Tabroom.  Please come again!";
./login/forgot_save.mhtml:	my $now = DateTime->now();
./login/forgot_save.mhtml:	my $login = Tab::Login->retrieve($id);
./login/forgot_save.mhtml:	my $err;
./login/forgot_save.mhtml:	my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/forgot_save.mhtml:	my $new_sha2_hash = crypt($pass1, '$6$' . $salt);
./login/forgot_save.mhtml:	my $msg = "Your password has been changed.  You may now log in.";
./login/new_user.mhtml:%	my $switch;
./login/forgot_change.mhtml:	my $now = DateTime->now();
./login/forgot_change.mhtml:	my $login = Tab::Login->retrieve($id);
./login/forgot_change.mhtml:	my $person = $login->person;
./login/forgot_change.mhtml:	my $err;
./login/login_save.mhtml:	my $now = DateTime->now;
./login/login_save.mhtml:	my $session;
./login/login_save.mhtml:	my $login;
./login/login_save.mhtml:	my $person;
./login/login_save.mhtml:	my $sha_user;
./login/login_save.mhtml:	my $log = $now->mdy('/')." ".$now->hms;
./login/login_save.mhtml:			my $err = "You must enter an email address or username.  Please try again.";
./login/login_save.mhtml:			my $err = "You must enter a password.  Please try again.";
./login/login_save.mhtml:			my $err = "Your login and/or password was not correct.  Please try again, ";
./login/login_save.mhtml:		my $db_sha_crypt = $login->sha512;
./login/login_save.mhtml:		my $sha_crypt = crypt($password, $db_sha_crypt) if $db_sha_crypt;
./login/login_save.mhtml:		my $login_ok;
./login/login_save.mhtml:			my $db_md5_crypt = $login->password;
./login/login_save.mhtml:			my $md5_crypt = crypt($password, $db_md5_crypt);
./login/login_save.mhtml:				my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/login_save.mhtml:				my $sha_crypt = crypt($password, '$6$' . $salt);
./login/login_save.mhtml:					my $nsda_login = Tab::NSDA::Login->search( username => $username )->first;
./login/login_save.mhtml:					my $nsda_db_password = $nsda_login->password;
./login/login_save.mhtml:					my $nsda_hash = md5_hex($password.$username.$Tab::points_salt);
./login/login_save.mhtml:						my $salt = $m->comp("/funclib/generate_randomstring.mas");
./login/login_save.mhtml:						my $sha_crypt = crypt($password, '$6$' . $salt);
./login/login_save.mhtml:			my $salt = $m->comp("/funclib/generate_randomstring.mas", length => 16);
./login/login_save.mhtml:			my $err = "Your login and/or password was not correct.  Please try
./login/login_save.mhtml:	my $allowed_sessions = 3;
./login/login_save.mhtml:	foreach my $sess ( sort {$b->id <=> $a->id} $person->sessions) {
./login/login_save.mhtml:	my $tokencookie = Apache2::Cookie->new(
./login/profile_save.mhtml:		my @existing_emails = Tab::Person->search( email => $email);
./login/profile_save.mhtml:			my $err = "Email address $email already has an person: ".$existing_emails[0]->first." ".$existing_emails[0]->last;
./login/profile_save.mhtml:	foreach my $login ($person->logins) { 
./login/profile_save.mhtml:	my $msg = "Changes saved";
./login/authenticate.mas:	my %cookies = Apache2::Cookie->fetch;
./login/authenticate.mas:		my $user_key = $cookies{'Tab-AuthToken'}->value;
./login/authenticate.mas:		my $session = Tab::Session->search( userkey => $user_key )->first;
./login/authenticate.mas:			my $person = $session->person;
./login/authenticate.mas:				my $msg = "You do not have a current active session.  Please login";
./admin/ldap_renew.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./admin/ldap_renew.mhtml:	foreach my $login ($edit->logins) { 
./admin/ldap_renew.mhtml:	my $msg = "LDAP Accounts Renewed";
./admin/chapter_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./admin/chapter_save.mhtml:	my $err;
./admin/chapter_save.mhtml:	my $naudl_err;
./admin/chapter_save.mhtml:				my $region = Tab::Region->retrieve($naudl_league);
./admin/chapter_save.mhtml:				my $circuit = $region->circuit if $region;
./admin/chapter_save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $circuit->id, chapter => $chapter_id)->first;
./admin/chapter_save.mhtml:				foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./admin/chapter_save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./admin/chapter_save.mhtml:			foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./admin/chapter_save.mhtml:				my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./admin/chapter_roster_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_roster_save.mhtml:	foreach my $student ($chapter->students) { 
./admin/chapter_roster_save.mhtml:	my $msg = "Chapter details saved";
./admin/circuit_edit.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./admin/circuit_edit.mhtml:	my $switch;
./admin/circuit_edit.mhtml:% 			foreach my $admin (sort {$a->last cmp $b->last} $circuit->admins) { 
./admin/circuit_edit.mhtml:% 			} # end of foreach my admin
./admin/admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./admin/admin_add.mhtml:	my $person = Tab::Person->search( email => $email)->first;
./admin/admin_add.mhtml:		my $err = "No accounts with the email address $email were found";
./admin/admin_add.mhtml:	my @existing = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id );
./admin/admin_add.mhtml:	my $circuit_admin = Tab::Permission->create({
./admin/admin_add.mhtml:	my $msg = $person->first." ".$person->last." is now an admin for ".$circuit->abbr;
./admin/chapter_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_roster.mhtml:	my @circuits = $chapter->circuits;
./admin/chapter_roster.mhtml:	my @candidate_chapters;
./admin/chapter_roster.mhtml:	my %used; 
./admin/chapter_roster.mhtml:	foreach my $circuit (@circuits) { 
./admin/chapter_roster.mhtml:	my %seen = (); 
./admin/chapter_roster.mhtml:%				foreach my $candidate (@candidate_chapters) {
./admin/chapter_roster.mhtml:%			foreach my $student ($chapter->students) { 
./admin/chapter_roster.mhtml:%							foreach my $candidate (@candidate_chapters) { 
./admin/calendar_admin.mhtml:	my $now = DateTime->now();
./admin/calendar_admin.mhtml:	my @items = Tab::Calendar->search_future($now->year."-".$now->strftime("%m")."-".$now->day);
./admin/calendar_admin.mhtml:	my $switch;
./admin/calendar_admin.mhtml:%			foreach my $item (@items) { 
./admin/persons.mhtml:	my %search_terms;
./admin/persons.mhtml:	my @persons;
./admin/persons.mhtml:%					foreach my $acct (@persons) { 
./admin/chapter_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_edit.mhtml:	my @regions = $m->comp("/funclib/chapter_regions.mas", chapter => $chapter);
./admin/chapter_edit.mhtml:	my %region_yes = map {$_->id => 1} @regions;
./admin/chapter_edit.mhtml:%			my $onclick = "showMe('league', this)";
./admin/chapter_edit.mhtml:%						foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) { 
./admin/chapter_edit.mhtml:%							foreach my $region ($ns->circuit->regions) { 
./admin/chapter_edit.mhtml:%		foreach my $permission ($chapter->permissions) { 
./admin/chapter_edit.mhtml:%			my $coach = $permission->person;
./admin/admin_rm.mhtml:	my @admins = Tab::Permission->search ( tag => "circuit", person => $admin_id, circuit => $circuit_id);
./admin/admin_rm.mhtml:	my $msg;
./admin/admin_rm.mhtml:	foreach my $admin (@admins) { 
./admin/su_return.mhtml:	my $become = $session->su;
./admin/su_return.mhtml:	my $log = $person->email." (".$person->last.") has returned to ".$become->email." (".$become->last.")";
./admin/su_return.mhtml:		my $err = "Something has gone horribly wrong and I was not able to restore you.  Log in again";
./admin/su_return.mhtml:	my $msg = "Presto!  Identity crisis resolved.  You are back to your original self.  Or....are you?")
./admin/naudl/students.mhtml:	my $start;
./admin/naudl/students.mhtml:	my $end;
./admin/naudl/students.mhtml:	my $now = DateTime->now;
./admin/naudl/students.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./admin/naudl/students.mhtml:    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";
./admin/naudl/students.mhtml:	my %tourn_circuit;
./admin/naudl/students.mhtml:	foreach my $school (@schools) { 
./admin/naudl/students.mhtml:		my @students = $m->comp("/funclib/school_students.mas", school => $school, by_result => 1);
./admin/naudl/students.mhtml:		my $tourn = $school->tourn;
./admin/naudl/students.mhtml:		my $circuit_name = $tourn_circuit{$tourn->id};
./admin/naudl/students.mhtml:			foreach my $circuit ($tourn->circuits) { 
./admin/naudl/students.mhtml:		foreach my $student (@students) { 
./admin/naudl/students.mhtml:			my $birthday_dt = $student->birthdate; 
./admin/naudl/students.mhtml:			my $birthstring = $birthday_dt.".00Z" if $birthday_dt;
./admin/naudl/students.mhtml:			my $race;
./admin/naudl/students.mhtml:			my $gender = $student->gender if $internal;
./admin/naudl/students.mhtml:			my $bps_id = $student->school_sid if $internal;
./admin/naudl/sta.mhtml:	my $start;
./admin/naudl/sta.mhtml:	my $end;
./admin/naudl/sta.mhtml:	my $now = DateTime->now;
./admin/naudl/sta.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./admin/naudl/sta.mhtml:    my $filename = "NAUDL-STA-$start-$end.csv";
./admin/naudl/sta.mhtml:	my @tourns;
./admin/naudl/sta.mhtml:	my %tourn_events = ();
./admin/naudl/sta.mhtml:	my %event_entries = ();
./admin/naudl/sta.mhtml:	my %is_naudl = map {$_->id => 1} @schools;
./admin/naudl/sta.mhtml:	my %used;
./admin/naudl/sta.mhtml:	foreach my $school (@schools) {
./admin/naudl/sta.mhtml:		foreach my $entry ($school->entries( waitlist => 0 )) { 
./admin/naudl/sta.mhtml:	my %seen = (); 
./admin/naudl/sta.mhtml:	foreach my $tourn (@tourns) { 
./admin/naudl/sta.mhtml:		my $start = $tourn->start;
./admin/naudl/sta.mhtml:		my $start_string = $start->year."-".$start->month."-".$start->day;
./admin/naudl/sta.mhtml:		my %done;
./admin/naudl/sta.mhtml:		foreach my $event (@{$tourn_events{$tourn->id}}) { 
./admin/naudl/sta.mhtml:			my $event_name = ucfirst($event->type)."-".$event->name;
./admin/naudl/sta.mhtml:			my $division_name = ucfirst($event->setting("level"))."-".$event->name;
./admin/naudl/sta.mhtml:			my @rounds = sort {$b->name <=> $a->name} $event->rounds;
./admin/naudl/sta.mhtml:			my @elims;
./admin/naudl/sta.mhtml:			my $final = $rounds[0];
./admin/naudl/sta.mhtml:			my $last_prelim;
./admin/naudl/sta.mhtml:			foreach my $round (@rounds) { 
./admin/naudl/sta.mhtml:			my ($final_entries_ref, @crap) = $m->comp("/tabbing/results/order_entries.mas", round => $final) if $final && $final->tiebreak_set;
./admin/naudl/sta.mhtml:			my ($prelim_entries_ref, $prelim_tbs_ref, $prelim_desc_ref, $prelim_forfeit_ref, $prelim_meh, $prelim_panrank_ref, $prelim_panletter_ref, $prelim_long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $last_prelim) if $last_prelim && $last_prelim->tiebreak_set;
./admin/naudl/sta.mhtml:			my ($speakers_students_ref, $speakers_tbs_ref, $speakers_desc_ref, $speakers_forfeit_ref, $speakers_meh, $speakers_long_desc_ref, $speakers_novice_ref, $speakers_name_ref, $speakers_code_ref, $speakers_school_ref) = $m->comp("/tabbing/results/order_speakers.mas", round => $last_prelim) if $event->setting("speaker_tbset");
./admin/naudl/sta.mhtml:			my %student_speaker_key;
./admin/naudl/sta.mhtml:			foreach my $key (sort {$a <=> $b} keys %{$speakers_students_ref}) {
./admin/naudl/sta.mhtml:				foreach my $student_id (@{${$speakers_students_ref}{$key}}) {
./admin/naudl/sta.mhtml:			my %entry_seed_key;
./admin/naudl/sta.mhtml:			foreach my $key (sort {$a <=> $b} keys %{$prelim_entries_ref}) {
./admin/naudl/sta.mhtml:				foreach my $entry_id (@{${$prelim_entries_ref}{$key}}) {
./admin/naudl/sta.mhtml:			my %entry_finish;
./admin/naudl/sta.mhtml:				my $finish = "Semifinal";
./admin/naudl/sta.mhtml:				foreach my $round (@elims) { 
./admin/naudl/sta.mhtml:					my @all_entries = $m->comp("/funclib/round_entries.mas", round => $round);
./admin/naudl/sta.mhtml:					my @entries;
./admin/naudl/sta.mhtml:					foreach my $ae (@all_entries) {
./admin/naudl/sta.mhtml:						foreach my $entry (@entries) { 
./admin/naudl/sta.mhtml:			my %used;
./admin/naudl/sta.mhtml:			foreach my $entry (@{$event_entries{$event->id}}) { 
./admin/naudl/sta.mhtml:				my @students = sort {$a->id <=> $b->id} $entry->students;
./admin/naudl/sta.mhtml:				my $first_team = $m->comp("/funclib/first_entry.mas", entry => $entry);
./admin/naudl/sta.mhtml:				foreach my $student ($entry->students) { 
./admin/naudl/sta_pairs.mhtml:	my $start;
./admin/naudl/sta_pairs.mhtml:	my $end;
./admin/naudl/sta_pairs.mhtml:	my $now = DateTime->now;
./admin/naudl/sta_pairs.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./admin/naudl/sta_pairs.mhtml:    my $filename = "NAUDL-STA-$start-$end.csv";
./admin/naudl/sta_pairs.mhtml:	my @entries;
./admin/naudl/sta_pairs.mhtml:	foreach my $school (@schools) {
./admin/naudl/sta_pairs.mhtml:		foreach my $entry ($school->entries) { 
./admin/naudl/sta_pairs.mhtml:	my %seen = (); 
./admin/naudl/sta_pairs.mhtml:	foreach my $entry (@entries) { 
./admin/naudl/sta_pairs.mhtml:		my $first_team = $m->comp("/funclib/first_entry.mas", entry => $entry);
./admin/naudl/sta_pairs.mhtml:			foreach my $student ($entry->students) { 
./admin/naudl/sections.mhtml:	my $start;
./admin/naudl/sections.mhtml:	my $end;
./admin/naudl/sections.mhtml:	my $now = DateTime->now;
./admin/naudl/sections.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./admin/naudl/sections.mhtml:	my @schools = Tab::School->search_naudl_competed( $circuit->id, DateTime::Format::MySQL->format_datetime($start), DateTime::Format::MySQL->format_datetime($end));
./admin/naudl/sections.mhtml:    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";
./admin/naudl/sections.mhtml:	my %tourn_circuit;
./admin/naudl/sections.mhtml:	foreach my $school (@schools) { 
./admin/naudl/sections.mhtml:		my $tourn = $school->tourn;
./admin/naudl/sections.mhtml:		my $dbh = Tab::DBI->db_Main();
./admin/naudl/sections.mhtml:		my $sth = $dbh->prepare("
./admin/naudl/sections.mhtml:		my %entry_round;
./admin/naudl/sections.mhtml:		my %entry_round_decision;
./admin/naudl/sections.mhtml:		my %entry_round_side;
./admin/naudl/sections.mhtml:		my %entry_round_section;
./admin/naudl/sections.mhtml:		my %entry_round_ballot;
./admin/naudl/sections.mhtml:		my %entry_round_section_letter;
./admin/naudl/sections.mhtml:		my %student_round_points;
./admin/naudl/sections.mhtml:		my %student_round_ranks;
./admin/naudl/sections.mhtml:		my %student_round_ballot;
./admin/naudl/sections.mhtml:		my %entry_round_judges;
./admin/naudl/sections.mhtml:		my %entry_ballots;
./admin/naudl/sections.mhtml:		my $notfirst;
./admin/naudl/sections.mhtml:		while (my ($id, $tag, $value, $studentid, $entryid, $judge, $pbye, $bye, $forfeit, $chair, $roundname, $side, $panel, $letter, $ballot) 
./admin/naudl/sections.mhtml:		my $tourn_id = "TR".$tourn->id;
./admin/naudl/sections.mhtml:		my $tourn_name = $tourn->name;
./admin/naudl/sections.mhtml:		my $tourn_start = $tourn->start->set_time_zone($tourn->tz);
./admin/naudl/sections.mhtml:		my $start_string = $tourn_start->year."-".$tourn_start->month."-".$tourn_start->day."T00:00:00.00Z";
./admin/naudl/sections.mhtml:		my $tourn_place = $tourn->state;
./admin/naudl/sections.mhtml:		foreach my $event ($tourn->events) { 
./admin/naudl/sections.mhtml:			my @all_rounds = sort {$a->name <=> $b->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");
./admin/naudl/sections.mhtml:			my @rounds;
./admin/naudl/sections.mhtml:			foreach my $round (@all_rounds) { 
./admin/naudl/sections.mhtml:			my @judges = $m->comp("/funclib/event_judges.mas", event => $event);
./admin/naudl/sections.mhtml:			my %judge_name_by_id = map { $_->id => $_->first." ".$_->last } @judges;
./admin/naudl/sections.mhtml:			my $event_name = $event->type."-".$event->name;
./admin/naudl/sections.mhtml:			my $event_level = $event->setting("level");
./admin/naudl/sections.mhtml:			my $level = $event->name;
./admin/naudl/sections.mhtml:			foreach my $student ($m->comp("/funclib/event_students.mas", event => $event, by_results => 1)) { 
./admin/naudl/sections.mhtml:				my $entry_id = $student->entry;
./admin/naudl/sections.mhtml:				my $studentid = $student->id;
./admin/naudl/sections.mhtml:				foreach my $round (@rounds) { 
./admin/naudl/sections.mhtml:					my $roundname = $round->name;
./admin/naudl/sections.mhtml:					foreach my $judge (@{$entry_round_judges{$entry_id."-".$roundname}}) { 
./admin/naudl/sections.mhtml:						my $side = substr($entry_round_side{$entry_id."-".$roundname."-".$judge},0,1);
./admin/naudl/sections.mhtml:						my $rank = $student_round_ranks{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $points = $student_round_points{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $result = $entry_round_decision{$entry_id."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $section = $entry_round_section{$entry_id."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $letter = $entry_round_section_letter{$entry_id."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:						my $ballot = $student_round_ballot{$studentid."-".$roundname."-".$judge};
./admin/naudl/sections.mhtml:			my @elims;
./admin/naudl/sections.mhtml:			foreach my $round (@rounds) { 
./admin/naudl/sections.mhtml:			my @labels = ("F", "S", "Q", "O", "D", "T");
./admin/naudl/sections.mhtml:			foreach my $round (@elims) { 
./admin/naudl/sections.mhtml:				my $letter = shift @labels;
./admin/naudl/sections.mhtml:				my $roundname = substr($round->label,0,1);
./admin/naudl/sections.mhtml:				foreach my $panel ($round->panels) { 
./admin/naudl/sections.mhtml:					my $letter = $panel->letter;
./admin/naudl/sections.mhtml:					my $section = $panel->id;
./admin/naudl/sections.mhtml:					my ($winner, $winningside) = $m->comp("/funclib/panel_winner.mas", panel => $panel, noob => 1);
./admin/naudl/sections.mhtml:					foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
./admin/naudl/sections.mhtml:						my $result = "L";
./admin/naudl/sections.mhtml:						my $side = "A";
./admin/naudl/sections.mhtml:						my $ballot = $entry->ballot;
./admin/naudl/sections.mhtml:						my $counter;
./admin/naudl/sections.mhtml:						foreach my $student ($entry->students) { 
./admin/naudl/sections.mhtml:							my $studentid = $student->id;
./admin/naudl/tournaments.mhtml:	my $start;
./admin/naudl/tournaments.mhtml:	my $end;
./admin/naudl/tournaments.mhtml:	my $now = DateTime->now;
./admin/naudl/tournaments.mhtml:	my @tourns = Tab::Tourn->search_naudl_competed( 
./admin/naudl/tournaments.mhtml:    my $filename = "NAUDL-Tournaments-$start-$end.csv";
./admin/naudl/tournaments.mhtml:	my %used;
./admin/naudl/tournaments.mhtml:	foreach my $tourn (@tourns) { 
./admin/naudl/tournaments.mhtml:		my @sites = $tourn->sites;
./admin/naudl/tournaments.mhtml:		my $site = shift @sites if @sites;
./admin/naudl/tournaments.mhtml:		my $site_name = $site->name if $site;
./admin/naudl/tournaments.mhtml:		my $start = $tourn->start;
./admin/tourns.mhtml:	my @tourns;
./admin/tourns.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./admin/tourns.mhtml:	my $switch;
./admin/tourns.mhtml:	my @tourns_now;
./admin/tourns.mhtml:	my $now = DateTime->now;
./admin/tourns.mhtml:	my $start = $now->clone;
./admin/tourns.mhtml:	my $end = $now->clone;
./admin/tourns.mhtml:	my %search_hash = ( hidden => {'!=', 1 });
./admin/tourns.mhtml:	my %search_attrs = ( order_by => "start" );
./admin/tourns.mhtml:	my $switch_now;
./admin/tourns.mhtml:%					foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->retrieve_all) {
./admin/tourns.mhtml:%					foreach my $tourn (@tourns) { 
./admin/tourns.mhtml:%								foreach my $admin ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => 1)) { 
./admin/tourns.mhtml:%           				my $warn = "This will delete the tournament ".$tourn->name." utterly.  There is no going back.  Be sure";
./admin/tourns.mhtml:%				foreach my $tourn_now (@tourns_now) {
./admin/tourns.mhtml:%							foreach my $admin_now ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn_now, contact => 1)) {
./admin/circuits.mhtml:	my @circuits;
./admin/circuits.mhtml:	my $switch;
./admin/circuits.mhtml:%					foreach my $circuit (@circuits) { 
./admin/tourn_delete.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./admin/tourn_delete.mhtml:	my $msg = "Tournament ".$tourn->name." has been completely and utterly wiped from the face of the earth.  I hope you meant to do that because if you did not, it\'s your funeral.";
./admin/chapter_circuit_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./admin/chapter_circuit_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./admin/chapter_circuit_add.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./admin/chapter_circuit_add.mhtml:		my $cl = Tab::ChapterCircuit->create({
./admin/chapter_circuit_add.mhtml:	my $msg = $chapter->name." has been joined to ".$circuit->abbr;
./admin/circuit_save.mhtml:	my $msg;
./admin/circuit_save.mhtml:	my $circuit;
./admin/chapter_merge.mhtml:	my $target = Tab::Chapter->retrieve($target_id) if $target_id;
./admin/chapter_merge.mhtml:	my @candidates;
./admin/chapter_merge.mhtml:%		my %done;
./admin/chapter_merge.mhtml:%		foreach my $candidate (@candidates) { 
./admin/chapter_merge.mhtml:%			my @circuits = $candidate->circuits;
./admin/chapter_merge.mhtml:%							foreach my $circuit ($candidate->circuits) {  
./admin/chapter_merge.mhtml:%							foreach my $contact ($candidate->admins) { 
./admin/chapter_merge.mhtml:%							foreach my $tourn (Tab::Tourn->search_last_five($candidate->id)) { 
./admin/chapter_admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./admin/chapter_admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./admin/chapter_admin_rm.mhtml:	my $msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./admin/autohandler:		my $msg = "I have no patience for your shenanigans.";
./admin/person_edit.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./admin/person_edit.mhtml:	my $switch;
./admin/person_edit.mhtml:%			my $counter;
./admin/person_edit.mhtml:%			foreach my $login ($edit->logins) { 
./admin/person_save.mhtml:	my $emailok = Email::Valid->address( -address => $email, -mxcheck => 0 ) ? 'yes' : 'no';
./admin/person_save.mhtml:		my $err = "That email address is not valid.  Please enter a valid address. $emailok";
./admin/person_save.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./admin/person_save.mhtml:		my @existing_emails = Tab::Person->search( email => $email);
./admin/person_save.mhtml:			my $err = "Email address $email already has an account: ".$existing_emails[0]->first." ".$existing_emails[0]->last;
./admin/person_save.mhtml:		my $taken = Tab::Login->search( username => $email)->first;
./admin/person_save.mhtml:			my $err = "Email address $email already in use as a login";
./admin/person_save.mhtml:		my $login = Tab::Login->search( person => $edit->id, username => $edit->email )->first;
./admin/person_save.mhtml:	foreach my $login ($edit->logins) { 
./admin/person_save.mhtml:	my $msg = "Changes saved";
./admin/su.mhtml:	my $become = Tab::Person->retrieve($su_id);
./admin/su.mhtml:	my $log = $person->first." ".$person->last." has become ".$become->first." ".$become->last;
./admin/su.mhtml:	my $msg = "Presto!  You are become ".$become->first." ".$become->last.".  Use the Return to Self link above to undo it";
./admin/about_save.mhtml:	my $webpage = Tab::Webpage->search( sitewide => 1 )->first;
./admin/about_save.mhtml:	my $now = DateTime->now;
./admin/about_save.mhtml:	my $msg = "About page changes saved";
./admin/chapter_circuit_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_circuit_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id); 
./admin/chapter_circuit_rm.mhtml:	my @cc = Tab::ChapterCircuit->search( circuit => $circuit_id, chapter => $chapter->id);
./admin/chapter_circuit_rm.mhtml:	my $msg = $chapter->name." was removed from the circuit ".$circuit->name;
./admin/chapter_merge_save.mhtml:	my @candidates = Tab::Chapter->search_where( name => { "like", "%".$name."%"} );
./admin/chapter_merge_save.mhtml:	my $prefer;
./admin/chapter_merge_save.mhtml:	my @merge_me;
./admin/chapter_merge_save.mhtml:	my %merge_ids;
./admin/chapter_merge_save.mhtml:	foreach my $candidate (@candidates) { 
./admin/chapter_merge_save.mhtml:	my %seen = (); 
./admin/chapter_merge_save.mhtml:	my %admins = map {$_->id => $_} $prefer->admins;
./admin/chapter_merge_save.mhtml:	my %circuits = map {$_->id => $_} $prefer->circuits;
./admin/chapter_merge_save.mhtml:	my %tourns = map {$_->tourn->id => $_} $prefer->schools;
./admin/chapter_merge_save.mhtml:		foreach my $ca ($prefer->permissions) { 
./admin/chapter_merge_save.mhtml:	my $merge_string;
./admin/chapter_merge_save.mhtml:	foreach my $merge_me (@merge_me) { 
./admin/chapter_merge_save.mhtml:		my $exclude = $ARGS{"exclude_".$merge_me->id};
./admin/chapter_merge_save.mhtml:			foreach my $ca ($merge_me->permissions) { 
./admin/chapter_merge_save.mhtml:			foreach my $ca ($merge_me->permissions) { 
./admin/chapter_merge_save.mhtml:		foreach my $cc ($merge_me->chapter_circuits) { 
./admin/chapter_merge_save.mhtml:		my @others = $merge_me->schools;
./admin/chapter_merge_save.mhtml:		foreach my $school ($merge_me->schools) { 
./admin/chapter_merge_save.mhtml:				my $school_dest = $tourns{$school->tourn->id};
./admin/chapter_merge_save.mhtml:		foreach my $student ($merge_me->students) { 
./admin/chapter_merge_save.mhtml:		foreach my $chapter_judge ($merge_me->chapter_judges) { 
./admin/chapter_merge_save.mhtml:	my %students_by_name;
./admin/chapter_merge_save.mhtml:	foreach my $student ($prefer->students) { 
./admin/chapter_merge_save.mhtml:	foreach my $key (keys %students_by_name) { 
./admin/chapter_merge_save.mhtml:		my $destination = shift @{$students_by_name{$key}};
./admin/chapter_merge_save.mhtml:		foreach my $mergee (@{$students_by_name{$key}}) { 
./admin/chapter_merge_save.mhtml:	my %judges_by_name;
./admin/chapter_merge_save.mhtml:	foreach my $judge ($prefer->chapter_judges) { 
./admin/chapter_merge_save.mhtml:	foreach my $key (keys %judges_by_name) { 
./admin/chapter_merge_save.mhtml:		my $destination = shift @{$judges_by_name{$key}};
./admin/chapter_merge_save.mhtml:		foreach my $mergee (@{$judges_by_name{$key}}) { 
./admin/chapter_merge_save.mhtml:	my $msg .= "School ".$prefer->name." has merged $merge_string into $prefer ".$prefer->name;
./admin/chapter_admins.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./admin/chapter_admins.mhtml:	my $msg;
./admin/chapter_admins.mhtml:	my $err;
./admin/chapter_admins.mhtml:	foreach my $permission ($chapter->permissions) { 
./admin/chapter_admins.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./admin/chapter_admins.mhtml:			my $err = "The email $email has no account on this system.  ";
./admin/chapter_admins.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $person, tag => "chapter" });
./admin/chapter_admins.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $person, tag => "prefs" });
./admin/chapter_admins.mhtml:			my $already;
./admin/chapter_admins.mhtml:				foreach my $ap (@already_prefs) { 
./admin/chapter_admins.mhtml:				foreach my $ac (@already_chapters) { 
./admin/chapter_admins.mhtml:				foreach my $ac (@already_chapters) { 
./admin/chapter_admins.mhtml:				foreach my $ap (@already_prefs) { 
./admin/about.mhtml:	my $webpage = Tab::Webpage->search( sitewide => 1)->first;
./admin/chapters.mhtml:	my @chapters;
./admin/chapters.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./admin/chapters.mhtml:	my $switch;
./admin/chapters.mhtml:%						foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->retrieve_all) {
./admin/chapters.mhtml:%					foreach my $chapter (@chapters) { 
./admin/chapters.mhtml:%								foreach my $circuit ($chapter->circuits) { 
./admin/chapters.mhtml:%								foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, contact => 1)) { 
./admin/judge_merge.mas:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./admin/calendar_switch.mhtml:	my $calendar = Tab::Calendar->retrieve($calendar_id);
./circuit/cooke_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/cooke_save.mhtml:	foreach my $diocese ($circuit->regions) {
./circuit/cooke_save.mhtml:	my $msg = "Cooke points saved";
./circuit/result_fix_launch.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/result_fix_launch.mhtml:	my @weight = Tab::TournSetting->search( tourn => $tourn_id, tag => 'weight');
./circuit/result_fix_launch.mhtml:	my $tournweight=0;
./circuit/result_fix_launch.mhtml:	foreach my $dummy (@weight) {
./circuit/result_fix_launch.mhtml:	$tournweight = $dummy->value;
./circuit/result_fix_launch.mhtml:%			my @events = Tab::Event->search( tourn => $tourn_id);
./circuit/result_fix_launch.mhtml:%			foreach my $event (@events) {
./circuit/approve.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/approve.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/approve.mhtml:	my @admin_circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./circuit/approve.mhtml:	my %permissions = map {$_->id => 1} @admin_circuits;
./circuit/approve.mhtml:	foreach my $tc (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->id)) { 
./circuit/approve.mhtml:	my $msg = "Tournament ".$tourn->name." has been approved.";
./circuit/chapter_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./circuit/admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/admin_add.mhtml:	my $person = Tab::Person->search( email => $email)->first;
./circuit/admin_add.mhtml:		my $err = "No accounts with the email address $email were found";
./circuit/admin_add.mhtml:	my @existing = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id );
./circuit/admin_add.mhtml:	my $circuit_admin = Tab::Permission->create({
./circuit/admin_add.mhtml:	my $msg = $person->first." ".$person->last." is now an administrator for ".$circuit->abbr;
./circuit/codes.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/codes.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/codes.mhtml:	my %used = ();
./circuit/codes.mhtml:%				foreach my $chapter (@chapters) { 
./circuit/region_admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_admin_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./circuit/region_admin_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./circuit/region_admin_add.mhtml:	my $already = Tab::Permission->search( tag => "region", region => $region->id, person => $person->id ) if $person;
./circuit/region_admin_add.mhtml:	my $msg;
./circuit/region_admin_add.mhtml:			my $admin = Tab::Permission->create({
./circuit/chapter_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_edit.mhtml:	my $switch;
./circuit/chapter_edit.mhtml:%		foreach my $coach ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter)) {
./circuit/join.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/join.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/join.mhtml:	my $cl = Tab::ChapterCircuit->create({
./circuit/join.mhtml:	my $err = "Choose a region " if $tourn->setting("regions");
./circuit/access_rm.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/access_rm.mhtml:	my $admin = Tab::Person->retrieve($admin_id);
./circuit/access_rm.mhtml:	my @access = Tab::Permission->search( tourn => $tourn->id, person => $admin->id);
./circuit/access_rm.mhtml:	my @owners = Tab::Permission->search( tourn => $tourn->id, tag => "owner");
./circuit/access_rm.mhtml:	my @contacts = Tab::Permission->search( tourn => $tourn->id, tag => "contact");
./circuit/access_rm.mhtml:	my $revoked;
./circuit/access_rm.mhtml:	my $err;
./circuit/access_rm.mhtml:	my $msg;
./circuit/access_rm.mhtml:	foreach my $access (@access) { 
./circuit/admin_rm.mhtml:	my @admins = Tab::Permission->search ( tag => 'circuit', person => $admin_id, circuit => $circuit_id);
./circuit/admin_rm.mhtml:	my $msg;
./circuit/admin_rm.mhtml:	foreach my $admin (@admins) { 
./circuit/regions.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/regions.mhtml:	my $switch = 1;
./circuit/regions.mhtml:	my $naudl++ if $circuit->setting("naudl");
./circuit/regions.mhtml:%			foreach my $region (sort {$a->name cmp $b->name} $circuit->regions) {
./circuit/regions.mhtml:%						foreach my $admin ($region->admins) { 
./circuit/email_view.mhtml:	my $email = Tab::Email->retrieve($email_id);
./circuit/email_view.mhtml:	my $year = $email->sent_at->year;
./circuit/email_view.mhtml:%			my $tz = $email->tourn->tz if $email->tourn;
./circuit/email_view.mhtml:%			my $sent = $email->sent_at;
./circuit/contacts.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/contacts.mhtml:	my $name = $circuit->name;
./circuit/contacts.mhtml:	my $filename = $name."-contacts-".$session->id.".csv";
./circuit/contacts.mhtml:	my $filepath = $Tab::file_root."tmp/".$filename;
./circuit/contacts.mhtml:	my $garbage = `rm -f $filepath`;
./circuit/contacts.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/contacts.mhtml:	foreach my $chapter (@chapters) { 
./circuit/contacts.mhtml:		my $member = "N";
./circuit/contacts.mhtml:		foreach my $admin ($chapter->admins) { 
./circuit/approvals.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/approvals.mhtml:	my @approvals = $m->comp("/funclib/circuit_tourns.mas", approval => 1, circuit => $circuit);
./circuit/approvals.mhtml:	my $school_year = Tab->school_year;
./circuit/approvals.mhtml:%			foreach my $tourn (sort {$a->start->epoch <=> $b->start->epoch} @approvals ) { 
./circuit/approvals.mhtml:%				my $tz = $tourn->tz;
./circuit/approvals.mhtml:%						my %already;
./circuit/approvals.mhtml:%						foreach my $director ($tourn->admins) { 
./circuit/approvals.mhtml:%						my $warn = "This will remove the tournament from your circuit. Are you sure you want to so banish ".$tourn->name."?";
./circuit/deny.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/deny.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/deny.mhtml:	my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./circuit/deny.mhtml:	foreach my $tc (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->id)) { 
./circuit/deny.mhtml:	my $msg = "Tournament ".$tourn->name." has been removed from your circuit's calendar.";
./circuit/access.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/access.mhtml:	my %tourn_circuits = map {$_->id => 1} $tourn->circuits;
./circuit/access.mhtml:	my %seen;
./circuit/access.mhtml:	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;
./circuit/access.mhtml:	my %admin_perms = ();
./circuit/access.mhtml:	foreach my $admin (@admins) { 
./circuit/access.mhtml:		my @perms = Tab::Permission->search( tourn => $tourn->id, person => $admin );
./circuit/access.mhtml:		foreach my $perm (@perms) { 
./circuit/access.mhtml:% 				foreach my $admin (@admins) { 
./circuit/access.mhtml:%										foreach my $category ($tourn->categories) { 
./circuit/tourns.mhtml:	my $err;
./circuit/tourns.mhtml:	my $tz = $person->tz;
./circuit/tourns.mhtml:	my $now = DateTime->now(time_zone => $tz);
./circuit/tourns.mhtml:	my $foo++ unless $year;
./circuit/tourns.mhtml:	my $begin = DateTime->new( 
./circuit/tourns.mhtml:	my $stop = DateTime->new(
./circuit/tourns.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./circuit/tourns.mhtml:	my @tourns;
./circuit/tourns.mhtml:	foreach my $at (@all_tourns) { 
./circuit/tourns.mhtml:%	 		my $switch;
./circuit/tourns.mhtml:%			foreach my $tourn (@tourns) { 
./circuit/tourns.mhtml:% 					my $start = $tourn->start;
./circuit/tourns.mhtml:% 					my $end = $tourn->end;
./circuit/tourns.mhtml:%						my $notfirst;
./circuit/tourns.mhtml:% 						foreach my $contact ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => "yep" )) { 
./circuit/diocese_admin_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/diocese_admin_rm.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./circuit/diocese_admin_rm.mhtml:	my @already = Tab::Permission->search( tag => 'region', region => $diocese->id, person => $admin_id );
./circuit/diocese_admin_rm.mhtml:	foreach my $alr (@already) { 
./circuit/diocese_admin_rm.mhtml:	my $msg = "Access removed";
./circuit/region_admin.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_admin.mhtml:	my $region = Tab::Region->retrieve($region_id);
./circuit/region_admin.mhtml:	my $switch;
./circuit/region_admin.mhtml:%		foreach my $admin ($region->admins) { 
./circuit/judge_training.mhtml:	my $person = Tab::Person->search( email => $person_email)->first if $person_email;
./circuit/judge_training.mhtml:%			my $key = "judge_training_".$circuit->id;
./circuit/chapter_admin_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_admin_save.mhtml:	my $msg;
./circuit/chapter_admin_save.mhtml:	my $err;
./circuit/chapter_admin_save.mhtml:	my $chapter_count++ if $email && $access_level eq "chapter";
./circuit/chapter_admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./circuit/chapter_admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./circuit/chapter_admin_save.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./circuit/chapter_admin_save.mhtml:			my $err = "The email $email has no account on this system.  ";
./circuit/chapter_admin_save.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "chapter" });
./circuit/chapter_admin_save.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "prefs" });
./circuit/chapter_admin_save.mhtml:			my $already;
./circuit/chapter_admin_save.mhtml:				foreach my $ap (@already_prefs) { 
./circuit/chapter_admin_save.mhtml:				foreach my $ac (@already_chapters) { 
./circuit/chapter_admin_save.mhtml:				foreach my $ac (@already_chapters) { 
./circuit/chapter_admin_save.mhtml:				foreach my $ap (@already_prefs) { 
./circuit/results_massager_save.mas:	#my $entry_student = Tab::EntryStudent->retrieve($student_out);
./circuit/results_massager_save.mas:        my @entry_students = Tab::EntryStudent->search( entry => $entry_id, student => $student_out);
./circuit/results_massager_save.mas:        foreach my $entry_student (@entry_students) {
./circuit/results_massager_save.mas:        my @ballots = Tab::Ballot->search( entry => $entry_id);
./circuit/results_massager_save.mas:        foreach my $ballot (@ballots) {
./circuit/results_massager_save.mas:            my @scores = Tab::Score->search( ballot => $ballot, student => $student_out);
./circuit/results_massager_save.mas:            foreach my $score (@scores) {
./circuit/results_massager.mhtml:    my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/email_compose.mhtml:	my $email = Tab::Email->retrieve($email_id) if $email_id;
./circuit/email_compose.mhtml:	my $now = DateTime->now;
./circuit/email_compose.mhtml:	my @tourns = $m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, approved => "yes");
./circuit/email_compose.mhtml:	my $year = $now->year;
./circuit/email_compose.mhtml:	my $limit_date = $year."-07-01";
./circuit/email_compose.mhtml:	my $limit = DateTime::Format::MySQL->parse_date($limit_date);
./circuit/email_compose.mhtml:%		my $tick;
./circuit/email_compose.mhtml:%		foreach my $tourn (sort {$b->start <=> $a->start} @tourns) { 
./circuit/email_compose.mhtml:% 			my $tourn_key = "tourn_".$tourn->id;
./circuit/diocese_admin.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/diocese_admin.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./circuit/diocese_admin.mhtml:	my $switch;
./circuit/diocese_admin.mhtml:%		foreach my $admin ($diocese->admins) { 
./circuit/region_admin_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_admin_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./circuit/region_admin_rm.mhtml:	my @already = Tab::Permission->search( tag => "region", region => $region->id, person => $admin_id );
./circuit/region_admin_rm.mhtml:	foreach my $alr (@already) { 
./circuit/region_admin_rm.mhtml:	my $msg = "Access removed";
./circuit/dioceses.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/dioceses.mhtml:	my $switch = 1;
./circuit/dioceses.mhtml:%				foreach my $diocese (sort {$a->name cmp $b->name} $circuit->regions) {
./circuit/dioceses.mhtml:%							foreach my $admin ($diocese->admins) { 
./circuit/chapter_circuit_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/chapter_circuit_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./circuit/chapter_circuit_add.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./circuit/chapter_circuit_add.mhtml:		my $cl = Tab::ChapterCircuit->create({
./circuit/chapter_circuit_add.mhtml:	my $msg = $chapter->name." has been joined to ".$circuit->abbr;
./circuit/circuit_save.mhtml:	my $msg;
./circuit/circuit_save.mhtml:	my $circuit;
./circuit/judge_training_save.mhtml:	my $now = DateTime->now;
./circuit/judge_training_save.mhtml:	my $judge_person = Tab::Person->retrieve($person_id);
./circuit/judge_training_save.mhtml:	my $key = "judge_training_".$circuit->id;
./circuit/judge_training_save.mhtml:	my $meta_key = "judge_tr_meta_".$circuit->id;
./circuit/judge_training_save.mhtml:	my $meta = "Entered by ".$person->first." ".$person->last." at ".Tab::nicedt($now)." UTC";
./circuit/judge_training_save.mhtml:	my $msg = "Judge training notes have been saved";
./circuit/email_send.mhtml:	my $now = DateTime->now;
./circuit/email_send.mhtml:	my @sendto_persons;
./circuit/email_send.mhtml:	my $email = Tab::Email->create({ 	
./circuit/email_send.mhtml:	my $email_id = $email->id;
./circuit/email_send.mhtml:	my $sent_to;
./circuit/email_send.mhtml:   		foreach my $chapter ($m->comp('/funclib/circuit_chapters.mas', circuit => $circuit, full => 1)) {
./circuit/email_send.mhtml:		my $nowkey = DateTime::Format::MySQL->format_date($now);
./circuit/email_send.mhtml:		my @tourns = $circuit->tourns;
./circuit/email_send.mhtml:		my %send_keys = ();
./circuit/email_send.mhtml:		foreach my $tourn (@tourns) { 
./circuit/email_send.mhtml:			my $tourn_key = "tourn_".$tourn->id;
./circuit/email_send.mhtml:			foreach my $school ($tourn->schools) { 
./circuit/email_send.mhtml:	my %seen = (); 
./circuit/email_send.mhtml:	my $send_string;
./circuit/email_send.mhtml:	foreach my $sendto_person (@sendto_persons) { 
./circuit/email_send.mhtml:	my $msg = "Email has been sent to ".scalar @sendto_persons." people";
./circuit/chapter_admin_rm.mhtml:	my $msg;
./circuit/chapter_admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./circuit/chapter_admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./circuit/dues_invoice.mhtml:	my $cl = Tab::ChapterCircuit->retrieve($cl_id);
./circuit/dues_invoice.mhtml:	my $chapter = $cl->chapter;
./circuit/dues_invoice.mhtml:	my $circuit = $cl->circuit;
./circuit/dues_invoice.mhtml:	my $filename = "dues-invoice-".$chapter->id."-".$session->id;
./circuit/dues_invoice.mhtml:	my $filepath = "files/".$circuit->id."/invoices";
./circuit/dues_invoice.mhtml:	my $garbage = `mkdir -p $Tab::file_root/$filepath`;
./circuit/diocese_admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/diocese_admin_add.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./circuit/diocese_admin_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./circuit/diocese_admin_add.mhtml:	my $already = Tab::Permission->search( tag => "region", region => $diocese->id, person => $person->id ) if $person;
./circuit/diocese_admin_add.mhtml:	my $msg;
./circuit/diocese_admin_add.mhtml:			my $admin = Tab::Permission->create({
./circuit/chapter_by_tourn.mhtml:	my $tournvar = Tab::Tourn->retrieve($tourn_id);
./circuit/chapter_by_tourn.mhtml:	my @school = Tab::School->search( tourn => $tourn_id);
./circuit/chapter_by_tourn.mhtml:#        my @clear = Tab::Entry->search( event => $event->id,  dropped => 0, waitlist => 0 );
./circuit/chapter_by_tourn.mhtml:#        my $total = (scalar @clear) + (scalar @dropped) + (scalar @waitlisted);
./circuit/chapter_by_tourn.mhtml:%			foreach my $school (@school)
./circuit/autohandler:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/autohandler:		my @ca = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id);
./circuit/codes_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/codes_save.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./circuit/codes_save.mhtml:	foreach my $chapter (@chapters) { 
./circuit/codes_save.mhtml:		my $code = $ARGS{$chapter->id};
./circuit/codes_save.mhtml:	my $msg = "Codes saved";
./circuit/emails.mhtml:	my $tz = $person->tz;
./circuit/emails.mhtml:	my @is_admin = Tab::Permission->search( tag => "circuit",  circuit => $circuit->id, person => $person->id );
./circuit/emails.mhtml:	my $now = DateTime->now;
./circuit/emails.mhtml:	my $start_range = DateTime->new({
./circuit/emails.mhtml:	my $end_range = DateTime->new({
./circuit/emails.mhtml:	my @emails = Tab::Email->search_where(
./circuit/emails.mhtml:% 				foreach my $email (@emails) { 
./circuit/emails.mhtml:%					my $sent_at = $email->sent_at->set_time_zone($tz);
./circuit/tourn_results.mhtml:	my $err;
./circuit/tourn_results.mhtml:	my $tz = $person->tz;
./circuit/tourn_results.mhtml:	my $now = DateTime->now(time_zone => $tz);
./circuit/tourn_results.mhtml:	my $foo++ unless $year;
./circuit/tourn_results.mhtml:	my $begin = DateTime->new( 
./circuit/tourn_results.mhtml:	my $stop = DateTime->new(
./circuit/tourn_results.mhtml:	my $circuit=Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/tourn_results.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./circuit/tourn_results.mhtml:	my @tourns;
./circuit/tourn_results.mhtml:	foreach my $at (@all_tourns) { 
./circuit/tourn_results.mhtml:%			foreach my $tourn (@tourns) { 
./circuit/tourn_results.mhtml:%				my @events = Tab::Event->search( tourn=> $tourn->id);
./circuit/tourn_results.mhtml:%				foreach my $event (@events) {
./circuit/tourn_results.mhtml:% 					my $start = $tourn->start;
./circuit/tourn_results.mhtml:% 					my $end = $tourn->end;
./circuit/tourn_results.mhtml:%						my @result_set=Tab::ResultSet->search( tourn => $tourn->id, event => $event->id, label => 'Final Places' );
./circuit/tourn_results.mhtml:%						my @entries=Tab::Entry->search( event => $event->id, dropped => 0, waitlist => 0,  );
./circuit/tourn_results.mhtml:%						my @results; if ( scalar(@result_set) > 0) { @results = Tab::Result->search( result_set=> $result_set[0]->id); }
./circuit/dioceses_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/dioceses_save.mhtml:	my $msg;
./circuit/dioceses_save.mhtml:	foreach my $diocese (sort {$a->name cmp $b->name} $circuit->regions) {
./circuit/access_save.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/access_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/access_save.mhtml:	my %seen;
./circuit/access_save.mhtml:	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;
./circuit/access_save.mhtml:	my @perms = Tab::Permission->search( tourn => $tourn->id );
./circuit/access_save.mhtml:	my $num_owners;
./circuit/access_save.mhtml:	my $num_contacts;
./circuit/access_save.mhtml:	my %admin_perms;
./circuit/access_save.mhtml:	my $err;
./circuit/access_save.mhtml:	foreach my $perm (@perms) { 
./circuit/access_save.mhtml:	my $owner_count; # Do not allow the tournament to delete the last owner
./circuit/access_save.mhtml:	foreach my $admin (@admins) { 
./circuit/access_save.mhtml:	foreach my $admin (@admins) { 
./circuit/access_save.mhtml:			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
./circuit/access_save.mhtml:	my $contact_count; # Do not allow the tournament to delete the last contact
./circuit/access_save.mhtml:	foreach my $admin (@admins) { 
./circuit/access_save.mhtml:	foreach my $admin (@admins) { 
./circuit/access_save.mhtml:	foreach my $admin (@admins) { 
./circuit/access_save.mhtml:			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
./circuit/access_save.mhtml:				my $category = Tab::Category->retrieve($ARGS{$admin->id."_category"});
./circuit/access_save.mhtml:	my $msg = "Permissions saved";
./circuit/bdl_student_export.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/bdl_student_export.mhtml:	my $tz = $circuit->tz;
./circuit/bdl_student_export.mhtml:    my $now = DateTime->now(time_zone => $tz);    
./circuit/bdl_student_export.mhtml:	my $nowstring = $now->year."-".$now->month."-".$now->day."-".$now->hour."-".$now->strftime('%M');
./circuit/bdl_student_export.mhtml:	my $name = $circuit->name;
./circuit/bdl_student_export.mhtml:    my $filename = "BDL-AllStudentsReport-INTERNAL-$name-$nowstring";
./circuit/bdl_student_export.mhtml:    my $filepath = $Tab::file_root."tmp/".$filename;
./circuit/bdl_student_export.mhtml:	foreach my $tourn ($circuit->tourns) { 
./circuit/bdl_student_export.mhtml:		my %event_by_id = map { $_->id => $_ } $tourn->events;
./circuit/bdl_student_export.mhtml:		my %event_level = ();
./circuit/bdl_student_export.mhtml:		foreach my $key (keys %event_by_id) { 
./circuit/bdl_student_export.mhtml:		my @students = $m->comp("/funclib/tourn_students.mas", tourn => $tourn, by_result => 1);
./circuit/bdl_student_export.mhtml:		my $start_dt = $tourn->start;
./circuit/bdl_student_export.mhtml:		my $start_string = $start_dt.".00Z" if $start_dt;
./circuit/bdl_student_export.mhtml:		foreach my $student (@students) { 
./circuit/bdl_student_export.mhtml:			my $event = $event_by_id{$student->entry};
./circuit/bdl_student_export.mhtml:				my $race;
./circuit/bdl_student_export.mhtml:				my $gender = $student->gender;
./circuit/bdl_student_export.mhtml:				my $bps_id = $student->school_sid;
./circuit/bdl_student_export.mhtml:				my $birthday_dt = $student->birthdate; 
./circuit/bdl_student_export.mhtml:				my $birthstring = $birthday_dt.".00Z" if $birthday_dt;
./circuit/index.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/index.mhtml:	my $switch;
./circuit/index.mhtml:	my $tz = $circuit->tz if $circuit;
./circuit/index.mhtml:% 			foreach my $admin (sort {$a->last cmp $b->last} $circuit->admins) { 
./circuit/index.mhtml:% 			} # end of foreach my admin
./circuit/chapter_circuit_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./circuit/chapter_circuit_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id); 
./circuit/chapter_circuit_rm.mhtml:	my @cc = Tab::ChapterCircuit->search( circuit => $circuit_id, chapter => $chapter->id);
./circuit/chapter_circuit_rm.mhtml:	my $msg = $chapter->name." was removed from the circuit ".$circuit->name;
./circuit/ndtceda_pt_manager.mhtml:	my $err;
./circuit/ndtceda_pt_manager.mhtml:	my $tz = $person->tz;
./circuit/ndtceda_pt_manager.mhtml:	my $now = DateTime->now(time_zone => $tz);
./circuit/ndtceda_pt_manager.mhtml:	my $foo++ unless $year;
./circuit/ndtceda_pt_manager.mhtml:	my $begin = DateTime->new( 
./circuit/ndtceda_pt_manager.mhtml:	my $stop = DateTime->new(
./circuit/ndtceda_pt_manager.mhtml:	my $circuit=Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./circuit/ndtceda_pt_manager.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./circuit/ndtceda_pt_manager.mhtml:	my @tourns;
./circuit/ndtceda_pt_manager.mhtml:	foreach my $at (@all_tourns) { 
./circuit/ndtceda_pt_manager.mhtml:%	 		my $switch;
./circuit/ndtceda_pt_manager.mhtml:%			foreach my $tourn (@tourns) { 
./circuit/ndtceda_pt_manager.mhtml:%				my @events = Tab::Event->search( tourn=> $tourn->id);
./circuit/ndtceda_pt_manager.mhtml:%				foreach my $event (@events) {
./circuit/ndtceda_pt_manager.mhtml:% 					my $start = $tourn->start;
./circuit/ndtceda_pt_manager.mhtml:% 					my $end = $tourn->end;
./circuit/ndtceda_pt_manager.mhtml:%						my @entries=Tab::Entry->search( event => $event->id, dropped => 0 );
./circuit/ndtceda_pt_manager.mhtml:%						my @result_set=Tab::ResultSet->search( event => $event->id, label => "ceda_pts" );
./circuit/ndtceda_pt_manager.mhtml:%						my @results=Tab::Result->search( result_set => $result_set[0]->id );
./circuit/ndtceda_pt_manager.mhtml:%						my @ada_result_set=Tab::ResultSet->search( event => $event->id, label => "ada_pts" );
./circuit/ndtceda_pt_manager.mhtml:%						my @results=Tab::Result->search( result_set => $ada_result_set[0]->id ); 
./circuit/regions_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/regions_save.mhtml:	foreach my $region ($circuit->regions)  {
./circuit/regions_save.mhtml:	my $msg = "Circuit information saved";
./circuit/chapter_school_match.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./circuit/chapter_school_match.mhtml:	  my $object = Tab::Chapter->create( 
./circuit/chapter_school_match.mhtml:	  my $object2 = Tab::ChapterCircuit->create( 
./circuit/chapter_school_match.mhtml:	my @chapters;
./circuit/chapter_school_match.mhtml:	#my $dummy=substr($school->name, 0,3);
./circuit/chapter_school_match.mhtml: my ($dummy) = @_;
./circuit/chapter_school_match.mhtml: $dummy =~ s/^\s*(.*?)\s*$/$1/;
./circuit/chapter_school_match.mhtml: chomp $dummy;
./circuit/chapter_school_match.mhtml: return $dummy;
./circuit/chapter_school_match.mhtml: my ($schoolname, $chptname) = @_;
./circuit/chapter_school_match.mhtml:%	my $counter=0;	
./circuit/chapter_school_match.mhtml:%       foreach my $chapter (@chapters)
./circuit/region_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/region_add.mhtml:		my $region = Tab::Region->create({
./circuit/region_add.mhtml:		my $msg .= " Region ".$name." created";
./circuit/region_add.mhtml:			my $login = Tab::Login->search( username => $admin)->first;
./circuit/region_add.mhtml:		my $err = "You did not specify a name for that circuit.  Please try again";
./circuit/chapters.mhtml:	my @chapters;
./circuit/chapters.mhtml:	my $switch;
./circuit/chapters.mhtml:%					foreach my $chapter (@chapters) { 
./circuit/chapters.mhtml:%								foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, contact => 1)) { 
./circuit/menu.mas:	my $now = DateTime->now;
./circuit/menu.mas:	my $end = $now->clone;
./circuit/menu.mas:	my $start = $now->clone;
./circuit/menu.mas:	my $top_year = $now->year;
./circuit/menu.mas:			my $now = DateTime->now;
./circuit/menu.mas:			my $earliest_email = Tab::Email->search_where(
./circuit/menu.mas:			my $start_year = $earliest_email->sent_at->year if $earliest_email;
./circuit/menu.mas:%						foreach my $menu_year ( $start_year .. $now->year ) { 
./circuit/menu.mas:%						foreach my $an (2005 .. $top_year) { 
./circuit/permissions_switch.mhtml:	my $admin = Tab::Person->retrieve($admin_id);
./circuit/permissions_switch.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./circuit/permissions_switch.mhtml:	my $already = Tab::Permission->search(tourn => $tourn->id, person => $admin->id, tag => $tag);
./circuit/cooke_points.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./circuit/cooke_points.mhtml:	my $switch = 1;
./circuit/cooke_points.mhtml:%				foreach my $diocese (sort {$b->cooke_pts <=> $a->cooke_pts} $circuit->regions) {
./circuit/cooke_points.mhtml:%							my $admin = $diocese->admins->first if $diocese->admins;
./circuit/access_add.mhtml:	my $msg;
./circuit/access_add.mhtml:		my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./circuit/access_add.mhtml:		my $staff = Tab::Person->search( email => $email )->first;
./circuit/access_add.mhtml:			my $err = "That email address you tried to add doesn't have a corresponding account.  Please try again";
./circuit/access_add.mhtml:		my $already = Tab::Permission->search( tag => "tourn", person => $staff->id, tourn => $tourn_id )->first;
./circuit/access_add.mhtml:			my $access = Tab::Permission->create({
./tourn/location.mhtml:	my @sites;
./tourn/location.mhtml:	my @circuits;
./tourn/location.mhtml:	foreach my $circuit (Tab::Circuit->search( active => 1) ) { 
./tourn/location.mhtml:	foreach my $circuit_id (split(/-/, $circuit_string)) { 
./tourn/location.mhtml:		my $circuit = Tab::Circuit->retrieve($circuit_id);
./tourn/location.mhtml:    my %seen = (); 
./tourn/location.mhtml:  	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
./tourn/location.mhtml:    my $enddt = DateTime::Format::MySQL->parse_datetime($end);
./tourn/location.mhtml:    my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
./tourn/location.mhtml:    my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
./tourn/location.mhtml:    my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
./tourn/location.mhtml:    my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
./tourn/location.mhtml:    my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
./tourn/location.mhtml:    my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);
./tourn/location.mhtml:%					foreach my $site (sort {$a->name cmp $b->name} (@sites)) { 
./tourn/location.mhtml:%					my $notfirst;
./tourn/location.mhtml:%					foreach my $circuit (@circuits) { 
./tourn/upload_tourn.mhtml:	my $now = DateTime->now;
./tourn/upload_tourn.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/upload_tourn.mhtml:	my $req = Apache2::Request->new($r);
./tourn/upload_tourn.mhtml:	my @xml_handles = $r->upload;
./tourn/upload_tourn.mhtml:	my $xml_file = $req->upload($xml_handles[0]);
./tourn/upload_tourn.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/upload_tourn.mhtml:	my $epoch = $now->epoch;
./tourn/upload_tourn.mhtml:	my $xml = new XML::Simple ( SuppressEmpty => 1, ForceArray => [ qw(TIEBREAK_SET RESULT_BALLOT RESULT_SCORE EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]);
./tourn/upload_tourn.mhtml:	my $data = $xml->XMLin($Tab::file_root."tmp/$epoch/TourneyData.xml");
./tourn/upload_tourn.mhtml:	my $tourn;
./tourn/upload_tourn.mhtml:	my $category;
./tourn/upload_tourn.mhtml:    my %event_by_id = ();
./tourn/upload_tourn.mhtml:		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{STARTDATE});
./tourn/upload_tourn.mhtml:		my $reg_start = $start->clone;
./tourn/upload_tourn.mhtml:		my $reg_end = $end->clone;
./tourn/upload_tourn.mhtml:		my %tournament_settings = map {$_->{TAG}, $_->{VALUE}} @{$data->{TOURN_SETTING}};
./tourn/upload_tourn.mhtml:			my $contact = Tab::Permission->create({ person => $person->id, tourn => $tourn->id, tag => "contact" });
./tourn/upload_tourn.mhtml:			my $owner = Tab::Permission->create({ person => $person->id, tourn => $tourn->id, tag => "owner" });
./tourn/upload_tourn.mhtml:			my $sname = $tourn->name;
./tourn/upload_tourn.mhtml:			my $newsite;
./tourn/upload_tourn.mhtml:			my $site = Tab::Site->search( name => $sname )->first;
./tourn/upload_tourn.mhtml:			my $tsite = Tab::TournSite->create({
./tourn/upload_tourn.mhtml:   		my @events = @{$data->{EVENT}};
./tourn/upload_tourn.mhtml:		foreach my $xml_event (@events) { 
./tourn/upload_tourn.mhtml:			my $type = lc($xml_event->{TYPE});
./tourn/upload_tourn.mhtml:			my $event = Tab::Event->create({
./tourn/upload_tourn.mhtml:	my @tournament_settings = @{$data->{TOURN_SETTING}};
./tourn/upload_tourn.mhtml:	foreach my $setting (@tournament_settings) { 
./tourn/upload_tourn.mhtml:	my %tiebreak_set_by_id = ();
./tourn/upload_tourn.mhtml:	my %tiebreak_set_by_cat_id = ();
./tourn/upload_tourn.mhtml:	my $elim_tiebreak_set;
./tourn/upload_tourn.mhtml:	my $speaker_tiebreak_set;
./tourn/upload_tourn.mhtml:	foreach my $tiebreak_set ($tourn->tiebreak_sets) { 
./tourn/upload_tourn.mhtml:		foreach my $tb ($tiebreak_set->tiebreaks) { 
./tourn/upload_tourn.mhtml:	my @tiebreak_sets = @{$data->{TIEBREAK_SET}};
./tourn/upload_tourn.mhtml:	foreach my $xml_tiebreak_set (@tiebreak_sets) { 
./tourn/upload_tourn.mhtml:		my $id = $xml_tiebreak_set->{ID};
./tourn/upload_tourn.mhtml:		my $name = $xml_tiebreak_set->{TBSET_NAME};
./tourn/upload_tourn.mhtml:		my $type = $xml_tiebreak_set->{SCOREFOR};
./tourn/upload_tourn.mhtml:		my $elim = $xml_tiebreak_set->{ELIM};
./tourn/upload_tourn.mhtml:		my $tiebreak_set = Tab::TiebreakSet->search( name => $name, tourn => $tourn->id)->first;
./tourn/upload_tourn.mhtml:	my @tbs = @{$data->{TIEBREAK}};
./tourn/upload_tourn.mhtml:	foreach my $xml_tb (@tbs) {
./tourn/upload_tourn.mhtml:		my $name = $xml_tb->{LABEL};
./tourn/upload_tourn.mhtml:		my $priority = $xml_tb->{SortOrder};
./tourn/upload_tourn.mhtml:		my $tiebreak_set_id = $xml_tb->{TB_SET};
./tourn/upload_tourn.mhtml:		my $tiebreak_set = $tiebreak_set_by_id{$tiebreak_set_id};
./tourn/upload_tourn.mhtml:		my $realname;
./tourn/upload_tourn.mhtml:		my $highlow = 0;
./tourn/upload_tourn.mhtml:		my $highlow_count = 0;
./tourn/upload_tourn.mhtml:		my $tb = Tab::Tiebreak->create({
./tourn/upload_tourn.mhtml:		my @tiebreaks = $elim_tiebreak_set->tiebreaks if $elim_tiebreak_set;;
./tourn/upload_tourn.mhtml:			my $tiebreak = Tab::Tiebreak->create({
./tourn/upload_tourn.mhtml:	my %timeslot_by_id = ();
./tourn/upload_tourn.mhtml:	foreach my $timeslot ($tourn->timeslots) { 
./tourn/upload_tourn.mhtml:	my %used_timeslots;
./tourn/upload_tourn.mhtml:	my $stepper = $tourn->start;
./tourn/upload_tourn.mhtml:	foreach my $xml_timeslot (@{$data->{TIMESLOT}}) { 
./tourn/upload_tourn.mhtml:		my $timeslot = $timeslot_by_id{$xml_timeslot->{ID}};
./tourn/upload_tourn.mhtml:			my $tz = $tourn->tz;
./tourn/upload_tourn.mhtml:			my $start;
./tourn/upload_tourn.mhtml:			my $end;
./tourn/upload_tourn.mhtml:			my $tz = $tourn->tz;
./tourn/upload_tourn.mhtml:			my $start = Tab::xmldtme($xml_timeslot->{START}, $tz);
./tourn/upload_tourn.mhtml:			my $end = Tab::xmldtme($xml_timeslot->{END}, $tz);
./tourn/upload_tourn.mhtml:	my %school_by_id = ();
./tourn/upload_tourn.mhtml:	foreach my $school ($tourn->schools) { 
./tourn/upload_tourn.mhtml:	foreach my $xml_school (@{$data->{SCHOOL}}) { 
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{$xml_school->{ID}};
./tourn/upload_tourn.mhtml:			my $chapter = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} )->first;
./tourn/upload_tourn.mhtml:			my $school = Tab::School->search( name => $xml_school->{SCHOOLNAME}, tourn => $tourn->id )->first;
./tourn/upload_tourn.mhtml:	my %student_by_id = ();
./tourn/upload_tourn.mhtml:	my %student_by_cat_id = ();
./tourn/upload_tourn.mhtml:	my %students_by_entry = ();
./tourn/upload_tourn.mhtml:	foreach my $student ($m->comp("/funclib/tourn_students.mas", tourn => $tourn)) { 
./tourn/upload_tourn.mhtml:	foreach my $xml_student (@{$data->{ENTRY_STUDENT}}) { 
./tourn/upload_tourn.mhtml:		my $student = $student_by_id{$xml_student->{ID}};
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_student->{SCHOOL}}[0]};
./tourn/upload_tourn.mhtml:				my $first = $xml_student->{FIRST};
./tourn/upload_tourn.mhtml:				my $last = $xml_student->{LAST};
./tourn/upload_tourn.mhtml:	foreach my $event ($tourn->events) { 
./tourn/upload_tourn.mhtml:	my @rounds;
./tourn/upload_tourn.mhtml:	my %round_by_name = ();
./tourn/upload_tourn.mhtml:	my @used_events;
./tourn/upload_tourn.mhtml:	foreach my $xml_event (@{$data->{EVENT}}) { 
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{$xml_event->{ID}};
./tourn/upload_tourn.mhtml:			my $type = lc($xml_event->{TYPE});
./tourn/upload_tourn.mhtml:		my @event_settings = @{$data->{EVENT_SETTING}};
./tourn/upload_tourn.mhtml:		foreach my $setting (@event_settings) { 
./tourn/upload_tourn.mhtml:	my %entry_by_id = ();
./tourn/upload_tourn.mhtml:	my %used_entries = ();
./tourn/upload_tourn.mhtml:	my %entry_students = ();
./tourn/upload_tourn.mhtml:	foreach my $event (@used_events) { 
./tourn/upload_tourn.mhtml:		foreach my $entry ($event->entries( waitlist => 0,  dropped => 0)) {
./tourn/upload_tourn.mhtml:	foreach my $xml_entry (@{$data->{ENTRY}}) { 
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_entry->{ID}};
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{@{$xml_entry->{EVENT}}[0]};
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_entry->{SCHOOL}}[0]};
./tourn/upload_tourn.mhtml:			my $dropped = 0;
./tourn/upload_tourn.mhtml:			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
./tourn/upload_tourn.mhtml:			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
./tourn/upload_tourn.mhtml:			my $dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";
./tourn/upload_tourn.mhtml:		my %es_yup = ();
./tourn/upload_tourn.mhtml:		my @students = @{$students_by_entry{$xml_entry->{ID}}} if $students_by_entry{$xml_entry->{ID}};
./tourn/upload_tourn.mhtml:		foreach my $entry_student ($entry->entry_students) { 
./tourn/upload_tourn.mhtml:			my $ok;
./tourn/upload_tourn.mhtml:			foreach my $student (@students) { 
./tourn/upload_tourn.mhtml:		my $first;
./tourn/upload_tourn.mhtml:		my $last;
./tourn/upload_tourn.mhtml:		foreach my $student (@students) { 
./tourn/upload_tourn.mhtml:			my $ok;
./tourn/upload_tourn.mhtml:			foreach my $entry_student ($entry->entry_students) { 
./tourn/upload_tourn.mhtml:	foreach my $id (keys %event_by_id) { 
./tourn/upload_tourn.mhtml:	foreach my $entry_id (keys %entry_by_id) { 
./tourn/upload_tourn.mhtml:	my %judge_by_id = ();
./tourn/upload_tourn.mhtml:	foreach my $judge ($category->judges) { 
./tourn/upload_tourn.mhtml:	my %used_judge = ();
./tourn/upload_tourn.mhtml:	my $rating_type = "tiered";
./tourn/upload_tourn.mhtml:    my %judge_id_translator = (); 
./tourn/upload_tourn.mhtml:    foreach my $setting (Tab::JudgeSetting->search_upload_id( $category->id )) { 
./tourn/upload_tourn.mhtml:	foreach my $xml_judge (@{$data->{JUDGE}}) { 
./tourn/upload_tourn.mhtml:		my $judge = $judge_by_id{$xml_judge->{ID}};
./tourn/upload_tourn.mhtml:			my $judge_me_maybe = Tab::Judge->retrieve($xml_judge->{ID});
./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_judge->{SCHOOL}}[0]};
./tourn/upload_tourn.mhtml:		my $active = 1;
./tourn/upload_tourn.mhtml:		my $first = $xml_judge->{FIRST};
./tourn/upload_tourn.mhtml:		my $last = $xml_judge->{LAST};
./tourn/upload_tourn.mhtml:	    my @time_strikes =  $tourn->strikes( judge => $judge->id, type => "time"); 
./tourn/upload_tourn.mhtml:		my %used_strikes;
./tourn/upload_tourn.mhtml:		foreach my $id (keys %timeslot_by_id) { 
./tourn/upload_tourn.mhtml:			my $timeslot = $timeslot_by_id{$id};
./tourn/upload_tourn.mhtml:			my $key = "TIMESLOT".$timeslot->id;
./tourn/upload_tourn.mhtml:				my $already;
./tourn/upload_tourn.mhtml:				foreach my $ts (@time_strikes) {
./tourn/upload_tourn.mhtml:		foreach my $ts (@time_strikes) { 
./tourn/upload_tourn.mhtml:		my %event_strikes = ();
./tourn/upload_tourn.mhtml:		foreach my $es (Tab::Strike->search( judge => $judge->id, type => "event" )) { 
./tourn/upload_tourn.mhtml:		foreach my $event ($tourn->events) { 
./tourn/upload_tourn.mhtml:			my $key = "EVENT".$event->id;
./tourn/upload_tourn.mhtml:			my $already = $event_strikes{$event->id};
./tourn/upload_tourn.mhtml:	foreach my $judge_id (keys %judge_by_id) { 
./tourn/upload_tourn.mhtml:	my %rating_by_id = ();
./tourn/upload_tourn.mhtml:	my %used_rating = ();
./tourn/upload_tourn.mhtml:	foreach my $event (@used_events) { 
./tourn/upload_tourn.mhtml:		foreach my $rating ($m->comp("/funclib/event_ratings.mas", event => $event)) { 
./tourn/upload_tourn.mhtml:	my %tier_by_name = ();
./tourn/upload_tourn.mhtml:	foreach my $tier ($m->comp("/funclib/tourn_rating_tiers.mas", tourn => $tourn)) { 
./tourn/upload_tourn.mhtml:		foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 
./tourn/upload_tourn.mhtml:			my $tier = Tab::RatingTier->create({
./tourn/upload_tourn.mhtml:	foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 
./tourn/upload_tourn.mhtml:		my $rating = $rating_by_id{$xml_rating->{ID}};
./tourn/upload_tourn.mhtml:			my $conflict++ if $xml_rating->{RATING} == 999;
./tourn/upload_tourn.mhtml:			my $ordinal = 0;
./tourn/upload_tourn.mhtml:			my $tier = $tier_by_name{$xml_rating->{RATING}} if $rating_type eq "tiered";
./tourn/upload_tourn.mhtml:			my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
./tourn/upload_tourn.mhtml:			my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};
./tourn/upload_tourn.mhtml:				my $ordinal = $xml_rating->{RATING} if $rating_type eq "ordinals";
./tourn/upload_tourn.mhtml:				my $percentile = $xml_rating->{ORDPCT} if $rating_type eq "ordinals";
./tourn/upload_tourn.mhtml:				my $tier = $tier_by_name{$xml_rating->{RATING}}->id if ($rating_type eq "tiered");
./tourn/upload_tourn.mhtml:				my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
./tourn/upload_tourn.mhtml:				my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};
./tourn/upload_tourn.mhtml:	foreach my $rating_id (keys %rating_by_id) { 
./tourn/upload_tourn.mhtml:	my %ok_sites = ();
./tourn/upload_tourn.mhtml:	my $default_site_id;
./tourn/upload_tourn.mhtml:	my @rooms;
./tourn/upload_tourn.mhtml:	foreach my $site ($tourn->sites) { 
./tourn/upload_tourn.mhtml:	my %room_by_id = ();
./tourn/upload_tourn.mhtml:	my %rooms_by_name = ();
./tourn/upload_tourn.mhtml:	foreach my $room (@rooms) { 
./tourn/upload_tourn.mhtml:	foreach my $xml_room (@{$data->{ROOM}}) { 
./tourn/upload_tourn.mhtml:		my $room = $room_by_id{$xml_room->{ID}};
./tourn/upload_tourn.mhtml:			my $inactive = 0;
./tourn/upload_tourn.mhtml:			my $inactive = 1 if $xml_room->{INACTIVE} eq "true";
./tourn/upload_tourn.mhtml:	my @all_rounds;
./tourn/upload_tourn.mhtml:	my %used_rounds = ();
./tourn/upload_tourn.mhtml:	my %round_by_id = ();
./tourn/upload_tourn.mhtml:	my %round_by_cat_id = ();
./tourn/upload_tourn.mhtml:	foreach my $round (@rounds) { 
./tourn/upload_tourn.mhtml:	foreach my $xml_round (@{$data->{ROUND}}) { 
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_round->{ID}};
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{${$xml_round->{EVENT}}[0]};
./tourn/upload_tourn.mhtml:		my $timeslot = $timeslot_by_id{$xml_round->{TIMESLOT}};
./tourn/upload_tourn.mhtml:		my $type = lc($xml_round->{PAIRINGSCHEME});
./tourn/upload_tourn.mhtml:		my $tiebreak_set = $tiebreak_set_by_id{$xml_round->{TB_SET}};
./tourn/upload_tourn.mhtml:			my $e_name = $event->name." ";
./tourn/upload_tourn.mhtml:			my $label = $xml_round->{LABEL};
./tourn/upload_tourn.mhtml:			my $label = $xml_round->{LABEL};
./tourn/upload_tourn.mhtml:	foreach my $round_id (keys %round_by_id) { 
./tourn/upload_tourn.mhtml:	my %panel_by_cat_id = ();
./tourn/upload_tourn.mhtml:	foreach my $event (@used_events) { 
./tourn/upload_tourn.mhtml:		foreach my $panel ($m->comp('/funclib/event_panels.mas', event => $event)) { 
./tourn/upload_tourn.mhtml:	my %used_panels = ();
./tourn/upload_tourn.mhtml:	foreach my $xml_panel (@{$data->{PANEL}}) { 
./tourn/upload_tourn.mhtml:		my $id = $xml_panel->{ID};
./tourn/upload_tourn.mhtml:		my $panel = $panel_by_cat_id{$id};
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_panel->{ROUND}};
./tourn/upload_tourn.mhtml:		my $room = $room_by_id{$xml_panel->{ROOM}};
./tourn/upload_tourn.mhtml:			my $letter = Tab::Round->sql_high_lett->select_val($round->id);
./tourn/upload_tourn.mhtml:	foreach my $panel_id (keys %panel_by_cat_id) { 
./tourn/upload_tourn.mhtml:	my %result_by_entry = ();
./tourn/upload_tourn.mhtml:	my %seed_set_by_event = ();
./tourn/upload_tourn.mhtml:	foreach my $event (@used_events) { 
./tourn/upload_tourn.mhtml:		foreach my $result_set ($event->result_sets) { 
./tourn/upload_tourn.mhtml:			my $notfirst;
./tourn/upload_tourn.mhtml:			foreach my $result ($result_set->results) { 
./tourn/upload_tourn.mhtml:	my %used_ballots = ();
./tourn/upload_tourn.mhtml:	my %entry_ballot = ();
./tourn/upload_tourn.mhtml:	foreach my $xml_result (@{$data->{ROUNDRESULT}}) { 
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_result->{RoundId}};	
./tourn/upload_tourn.mhtml:		my %panel_by_id = ();
./tourn/upload_tourn.mhtml:		foreach my $xml_panel (@{$xml_result->{RESULT_BALLOT}}) { 
./tourn/upload_tourn.mhtml:			my $id = $xml_panel->{Panel};
./tourn/upload_tourn.mhtml:			my $panel = $panel_by_id{$id};
./tourn/upload_tourn.mhtml:				my $room = 0;
./tourn/upload_tourn.mhtml:            my $judge_id = 0;
./tourn/upload_tourn.mhtml:			my @xml_results = @{$xml_panel->{RESULT_SCORE}};
./tourn/upload_tourn.mhtml:            my %ballot_by_entry = ();
./tourn/upload_tourn.mhtml:            my %ballot_by_student = ();
./tourn/upload_tourn.mhtml:			my $count;
./tourn/upload_tourn.mhtml:		    my $byes;
./tourn/upload_tourn.mhtml:			foreach my $xml_ballot (@xml_results) { 
./tourn/upload_tourn.mhtml:                my $entry = $entry_by_id{$xml_ballot->{Recipient}};
./tourn/upload_tourn.mhtml:                my $bye = 0;
./tourn/upload_tourn.mhtml:                my $forfeit = 0;
./tourn/upload_tourn.mhtml:                my $value = $xml_ballot->{content};
./tourn/upload_tourn.mhtml:                my $side = $xml_ballot->{Side};
./tourn/upload_tourn.mhtml:                my $ballot;
./tourn/upload_tourn.mhtml:                foreach my $student (@{$students_by_entry{$xml_ballot->{Recipient}}}) {
./tourn/upload_tourn.mhtml:            foreach my $xml_value (@xml_results) {
./tourn/upload_tourn.mhtml:                my $tag = lc($xml_value->{Score_Name});
./tourn/upload_tourn.mhtml:                my $value = $xml_value->{content};
./tourn/upload_tourn.mhtml:                my $ballot;
./tourn/upload_tourn.mhtml:                my $student;
./tourn/upload_tourn.mhtml:                my $score = Tab::Score->create({
./tourn/upload_tourn.mhtml:	my %used_results = ();
./tourn/upload_tourn.mhtml:	foreach my $xml_elimseed (@{$data->{ELIMSEED}}) { 
./tourn/upload_tourn.mhtml:		my $entry_id = $xml_elimseed->{ENTRY};
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$entry_id};
./tourn/upload_tourn.mhtml:		my $round_id = $xml_elimseed->{ROUND};
./tourn/upload_tourn.mhtml:		my $event_id = ${$xml_elimseed->{EVENT}}[0];
./tourn/upload_tourn.mhtml:		my $event = $event_by_id{$event_id};
./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$round_id};
./tourn/upload_tourn.mhtml:		my $result = $result_by_entry{$entry->id."-".$round->id};
./tourn/upload_tourn.mhtml:		my $set = $seed_set_by_event{$event->id};
./tourn/upload_tourn.mhtml:		my $seed_done;
./tourn/upload_tourn.mhtml:			foreach my $value ($result->values) { 
./tourn/upload_tourn.mhtml:		my $result_value;
./tourn/upload_tourn.mhtml:	my %ballot_by_id = ();
./tourn/upload_tourn.mhtml:	my %ballot_by_cat_id = ();
./tourn/upload_tourn.mhtml:	my %ballot_event_type = ();
./tourn/upload_tourn.mhtml:	foreach my $event (@used_events) { 
./tourn/upload_tourn.mhtml:		my $type = $event->type;
./tourn/upload_tourn.mhtml:		foreach my $ballot ($m->comp('/funclib/event_ballots.mas', event => $event)) { 
./tourn/upload_tourn.mhtml:	my %used_cat_ballots = ();
./tourn/upload_tourn.mhtml:	foreach my $xml_ballot (@{$data->{BALLOT}}) { 
./tourn/upload_tourn.mhtml:		my $ballot = $ballot_by_cat_id{$xml_ballot->{ID}};
./tourn/upload_tourn.mhtml:		my $panel = $panel_by_cat_id{$xml_ballot->{PANEL}};
./tourn/upload_tourn.mhtml:		my $bye = 0;
./tourn/upload_tourn.mhtml:		my $judge = 0;
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_ballot->{ENTRY}};
./tourn/upload_tourn.mhtml:		my $entry_id = $entry->id if $entry;
./tourn/upload_tourn.mhtml:	foreach my $ballot_id (keys %ballot_by_id, keys %ballot_by_cat_id) { 
./tourn/upload_tourn.mhtml:	my %score_type = ();
./tourn/upload_tourn.mhtml:	my %score_by_id = ();
./tourn/upload_tourn.mhtml:	my %score_by_cat_id = ();
./tourn/upload_tourn.mhtml:	foreach my $event (@used_events) { 
./tourn/upload_tourn.mhtml:		my $type = $event->type;
./tourn/upload_tourn.mhtml:		foreach my $value ($m->comp('/funclib/event_values.mas', event => $event)) { 
./tourn/upload_tourn.mhtml:	my %used_scores;
./tourn/upload_tourn.mhtml:	my %scored_ballot;
./tourn/upload_tourn.mhtml:	foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 
./tourn/upload_tourn.mhtml:		my $score = $score_by_cat_id{$xml_score->{ID}};
./tourn/upload_tourn.mhtml:		my $ballot = $ballot_by_cat_id{$xml_score->{BALLOT}};
./tourn/upload_tourn.mhtml:		my $type = $xml_score->{SCORE_ID};
./tourn/upload_tourn.mhtml:		my $event_type = $ballot_event_type{$xml_score->{BALLOT}};
./tourn/upload_tourn.mhtml:		my $tag = "ballot" if $type == 1;
./tourn/upload_tourn.mhtml:		my $student = $student_by_id{$xml_score->{RECIPIENT}} if ( $type == 2 || $type == 3 ) && $event_type ne "speech";
./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_score->{RECIPIENT}} if ($type == 1 || $type == 4 || $type == 5 ) || $event_type eq "speech";
./tourn/upload_tourn.mhtml:			my $sid = 0;
./tourn/upload_tourn.mhtml:	foreach my $score_id (keys %score_by_id) { 
./tourn/upload_tourn.mhtml:		my $score = $score_by_id{$score_id};
./tourn/upload_tourn.mhtml:	foreach my $round (@all_rounds) { 
./tourn/upload_tourn.mhtml:	my $msg = "Tournament imported into Tabroom";
./tourn/request.mhtml:	my $tz = $person->tz;
./tourn/request.mhtml:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./tourn/request.mhtml:	my $startdt;
./tourn/request.mhtml:	my $enddt;
./tourn/request.mhtml:%							foreach my $tourn (@tourns) { 
./tourn/deadlines.mhtml:	my $return;
./tourn/deadlines.mhtml:	my $now = DateTime->now;
./tourn/deadlines.mhtml:	my $year = $now->year;
./tourn/deadlines.mhtml:	my $startdt;
./tourn/deadlines.mhtml:	my $enddt;
./tourn/deadlines.mhtml:		my @webname_tourns = Tab::Tourn->search( webname => $webname );
./tourn/deadlines.mhtml:		my $ok;
./tourn/deadlines.mhtml:			foreach my $wt (@webname_tourns) { 
./tourn/deadlines.mhtml:				my @admins = Tab::Permission->search( person => $person->id, tourn => $wt->id, tag => "contact" );
./tourn/deadlines.mhtml:	my $base_year = $startdt->year;
./tourn/deadlines.mhtml:	my $deadlinedt = $startdt->clone;
./tourn/deadlines.mhtml:	my $switch;
./tourn/tournaman_teamoverview.mhtml:	my $now = DateTime->now;
./tourn/tournaman_teamoverview.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/tournaman_teamoverview.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/tournaman_teamoverview.mhtml:	my $req = Apache2::Request->new($r);
./tourn/tournaman_teamoverview.mhtml:	my $xml_file = $req->upload("teamtab");
./tourn/tournaman_teamoverview.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/tournaman_teamoverview.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./tourn/tournaman_teamoverview.mhtml:	my $webname=$xml_file->filename;
./tourn/tournaman_teamoverview.mhtml:	open my $fh, '<', $xml_filename or die "error loading";
./tourn/tournaman_teamoverview.mhtml:	my $data = do { local $/; <$fh> };
./tourn/tournaman_teamoverview.mhtml:	my $te = HTML::TableExtract->new( headers => ['Name', 'Institution', 'Speaker 1', 'Speaker 2'] );
./tourn/tournaman_teamoverview.mhtml:	my %school; my $x;
./tourn/tournaman_teamoverview.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_teamoverview.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_teamoverview.mhtml:#	   @$row[0] = $m->comp('/funclib/destupidify.mas', strDummy => @$row[0] );
./tourn/tournaman_teamoverview.mhtml:	my $category = Tab::Category->search( tourn => $tourn_id )->first;
./tourn/tournaman_teamoverview.mhtml:	my $event_id = CreateEvent($tourn_id, $category->id);
./tourn/tournaman_teamoverview.mhtml:	my $entry; 
./tourn/tournaman_teamoverview.mhtml:	my $first; 
./tourn/tournaman_teamoverview.mhtml:	my $last; 
./tourn/tournaman_teamoverview.mhtml:	my $student;
./tourn/tournaman_teamoverview.mhtml:	my $schooldummy;
./tourn/tournaman_teamoverview.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_teamoverview.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_teamoverview.mhtml:		$schooldummy = 0;
./tourn/tournaman_teamoverview.mhtml:		$schooldummy = $school{@$row[1]} if $school{@$row[1]};
./tourn/tournaman_teamoverview.mhtml:	  	$entry = SaveEntry( $tourn_id, $event_id, $schooldummy, @$row[0] );
./tourn/tournaman_teamoverview.mhtml:		$student = SaveStudent( $first, $last, $schooldummy );
./tourn/tournaman_teamoverview.mhtml:		$student = SaveStudent( $first, $last, $schooldummy );
./tourn/tournaman_teamoverview.mhtml:		my ($entry, $student) = @_;
./tourn/tournaman_teamoverview.mhtml:		my $last;
./tourn/tournaman_teamoverview.mhtml:		my $first;
./tourn/tournaman_teamoverview.mhtml:		my $dummy = shift;
./tourn/tournaman_teamoverview.mhtml:		my $x = index($dummy, " ");
./tourn/tournaman_teamoverview.mhtml:		my $L = length($dummy);
./tourn/tournaman_teamoverview.mhtml:		$first = substr($dummy, 0, $x);
./tourn/tournaman_teamoverview.mhtml:		$last = substr($dummy, $x+1, $L-$x-1);
./tourn/tournaman_teamoverview.mhtml:		my ($first, $last, $school) = @_;
./tourn/tournaman_teamoverview.mhtml:		my $sch = Tab::School->retrieve($school);
./tourn/tournaman_teamoverview.mhtml:		my $chapter=0;
./tourn/tournaman_teamoverview.mhtml:			my @student = Tab::Student->search( chapter => $sch->chapter, first => $first, last => $last );
./tourn/tournaman_teamoverview.mhtml:		my $entryobject = Tab::Student->create( {
./tourn/tournaman_teamoverview.mhtml:		my ($tourn_id, $event_id, $school_id, $entry_name) = @_;
./tourn/tournaman_teamoverview.mhtml:		my $entryobject = Tab::Entry->create( {
./tourn/tournaman_teamoverview.mhtml:		my ($tourn_id, $category_id) = @_;
./tourn/tournaman_teamoverview.mhtml:		my $eventobject = Tab::Event->create( {
./tourn/tournaman_teamoverview.mhtml:		my ($schoolname, $tourn_id) = @_;
./tourn/tournaman_teamoverview.mhtml:		my $newschool = Tab::School->create({
./tourn/tournaman_teamoverview.mhtml:		my ($schoolname) = @_;
./tourn/tournaman_teamoverview.mhtml:		my @chapters = Tab::Chapter->search( name => $schoolname);
./tourn/tournaman_teamoverview.mhtml:		my $chapter; $chapter=0;
./tourn/tournaman_teamoverview.mhtml:		foreach my $candidate (@chapters) {
./tourn/disclaimer.mhtml:	my $school = Tab::School->retrieve($school_id);
./tourn/disclaimer.mhtml:	my $tourn = $school->tournament;
./tourn/disclaimer.mhtml:	my $t2h = HTML::FromText->new({
./tourn/disclaimer.mhtml:	my $html = $t2h->parse($tourn->disclaimer);
./tourn/import_wudc_xml.mhtml:	my $now = DateTime->now;
./tourn/import_wudc_xml.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/import_wudc_xml.mhtml:	my $req = Apache2::Request->new($r);
./tourn/import_wudc_xml.mhtml:	my $xml_file = $req->upload("xml");
./tourn/import_wudc_xml.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/import_wudc_xml.mhtml:	my $webname=$xml_file->filename;
./tourn/import_wudc_xml.mhtml:	my $xml = new XML::Simple ( SuppressEmpty => 1,  ForceArray => [ qw(TOURN ENTRY SCHOOL) ]);
./tourn/import_wudc_xml.mhtml:	my $data = $xml->XMLin($xml_filename);
./tourn/import_wudc_xml.mhtml:	my $tournname; 
./tourn/import_wudc_xml.mhtml:	my $startdate; 
./tourn/import_wudc_xml.mhtml:	my $location; 
./tourn/import_wudc_xml.mhtml:	my $weight;
./tourn/import_wudc_xml.mhtml:	foreach my $xml_tourn (@{$data->{TOURN}}) {
./tourn/import_wudc_xml.mhtml:	my ($tourn_id, $category_id) = SaveTourney($tournname, $startdate, $location, $tz, $webname, $person, $weight);
./tourn/import_wudc_xml.mhtml:	my $event_id = CreateEvent($tourn_id, $category_id);
./tourn/import_wudc_xml.mhtml:	my @schoolrec; #=0 name, 1=XML ID, 2=new Tabroom ID
./tourn/import_wudc_xml.mhtml:	my $x; $x=0;
./tourn/import_wudc_xml.mhtml:	foreach my $xml_school (@{$data->{SCHOOL}}) {
./tourn/import_wudc_xml.mhtml:	my @entry; #=0 name, 0=XML ID, 2=xml school, 3=points, 4=rank, 5=Tabroom ID, 6=Tabroom School
./tourn/import_wudc_xml.mhtml:	foreach my $xml_entry (@{$data->{ENTRY}}) {
./tourn/import_wudc_xml.mhtml:		for (my $i = 0; $i <= $#schoolrec; $i++) {
./tourn/import_wudc_xml.mhtml:	my $result_set_final_places=CreateResultSet($tourn_id, $event_id, $tz, "Final Places");
./tourn/import_wudc_xml.mhtml:	my $result_set_wudc_points=CreateResultSet($tourn_id, $event_id, $tz, "WUDC Points");
./tourn/import_wudc_xml.mhtml:	my $result;
./tourn/import_wudc_xml.mhtml:		my ($result, $value, $priority, $sort_desc, $tag, $long_tag) = @_;
./tourn/import_wudc_xml.mhtml:		my $object = Tab::ResultValue->create( {
./tourn/import_wudc_xml.mhtml:		my ($entry_id, $entry_school, $result_set, $rank, $nentries) = @_;
./tourn/import_wudc_xml.mhtml:		my $pct = round((($nentries-$rank+1)/$nentries)*1000);
./tourn/import_wudc_xml.mhtml:		my $result = Tab::Result->create( {
./tourn/import_wudc_xml.mhtml:		my ($tourn_id, $event_id, $tz, $rsname) = @_;
./tourn/import_wudc_xml.mhtml:		my $now = DateTime->now( time_zone => $tz);
./tourn/import_wudc_xml.mhtml:		my $RSobject = Tab::ResultSet->create( {
./tourn/import_wudc_xml.mhtml:		my ($tourn_id, $event_id, $school_id, $entry_name) = @_;
./tourn/import_wudc_xml.mhtml:		my $entryobject = Tab::Entry->create( {
./tourn/import_wudc_xml.mhtml:		my ($tourn_id, $category_id) = @_;
./tourn/import_wudc_xml.mhtml:		my $eventobject = Tab::Event->create( {
./tourn/import_wudc_xml.mhtml:		my ($schoolname) = @_;
./tourn/import_wudc_xml.mhtml:		my @chapters = Tab::Chapter->search( name => $schoolname);
./tourn/import_wudc_xml.mhtml:		my $chapter; $chapter=0;
./tourn/import_wudc_xml.mhtml:		foreach my $candidate (@chapters) {
./tourn/import_wudc_xml.mhtml:		my ($schoolname, $tourn_id) = @_;
./tourn/import_wudc_xml.mhtml:		my $newschool = Tab::School->create({
./tourn/import_wudc_xml.mhtml:		my ($tournname, $startdate, $location, $tz, $webname, $person, $weight) = @_;
./tourn/import_wudc_xml.mhtml:		my $judge          = $startdate;
./tourn/import_wudc_xml.mhtml:		my $drops          = $startdate;
./tourn/import_wudc_xml.mhtml:		my $fines          = $startdate;
./tourn/import_wudc_xml.mhtml:		my $country        = "UK";
./tourn/import_wudc_xml.mhtml:		my $tourn = Tab::Tourn->create( {
./tourn/import_wudc_xml.mhtml:		my $category = Tab::Category->create( {
./tourn/show_past_prefs.mhtml:	my $chpt_str;
./tourn/show_past_prefs.mhtml:	my @admin = Tab::Permission->search( person=>$person->id );
./tourn/show_past_prefs.mhtml:	foreach my $admin (@admin) {
./tourn/show_past_prefs.mhtml:		my @judges = Tab::ChapterJudge->search( person=>$person->id );
./tourn/show_past_prefs.mhtml:		foreach my $judge (@judges) {
./tourn/show_past_prefs.mhtml:		my @students = Tab::Student->search( person=>$person->id );
./tourn/show_past_prefs.mhtml:		foreach my $student (@students) {
./tourn/show_past_prefs.mhtml:	my @ratings = Tab::Rating->search_pull_ratings;
./tourn/show_past_prefs.mhtml:	my @tiered_ratings = Tab::Rating->search_pull_tiered_ratings;
./tourn/show_past_prefs.mhtml:	my $judge_person = Tab::Person->retrieve($judge_person_id);
./tourn/show_past_prefs.mhtml:%			foreach my $rating (@ratings) {
./tourn/show_past_prefs.mhtml:%			foreach my $rating (@tiered_ratings) {
./tourn/circuit.mhtml:	my $return;
./tourn/circuit.mhtml:	my $startdt;
./tourn/circuit.mhtml:	my $enddt;
./tourn/circuit.mhtml:	my $reg_startdt;
./tourn/circuit.mhtml:	my $reg_enddt;
./tourn/circuit.mhtml:	my $dropsdt;
./tourn/circuit.mhtml:	my $judgedt;
./tourn/circuit.mhtml:	my $frozendt;
./tourn/circuit.mhtml:	my $finesdt;
./tourn/circuit.mhtml:		my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./tourn/circuit.mhtml:		my %seen = (); 
./tourn/circuit.mhtml:		my @all_circuits = Tab::Circuit->search(active => 1);
./tourn/circuit.mhtml:%		my %done_already;
./tourn/circuit.mhtml:%		my $switch = 1;
./tourn/circuit.mhtml:%			foreach my $circuit (sort {$a->name cmp $b->name} @circuits) { 
./tourn/circuit.mhtml:%			foreach my $circuit (sort {$a->name cmp $b->name} @all_circuits) { 
./tourn/tournaman_teamtab.mhtml:	my $now = DateTime->now;
./tourn/tournaman_teamtab.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/tournaman_teamtab.mhtml:	my $req = Apache2::Request->new($r);
./tourn/tournaman_teamtab.mhtml:	my $xml_file = $req->upload("teamtab");
./tourn/tournaman_teamtab.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/tournaman_teamtab.mhtml:	my $webname=$xml_file->filename;
./tourn/tournaman_teamtab.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./tourn/tournaman_teamtab.mhtml:	open my $fh, '<', $xml_filename or die "error loading";
./tourn/tournaman_teamtab.mhtml:	my $data = do { local $/; <$fh> };
./tourn/tournaman_teamtab.mhtml:	my $te = HTML::TableExtract->new( headers => ['Position', 'Name', 'Total Rank', 'Total Speaker'] );
./tourn/tournaman_teamtab.mhtml:	my @entry = Tab::Entry->search( tourn => $tourn_id);
./tourn/tournaman_teamtab.mhtml:	my %entry; 
./tourn/tournaman_teamtab.mhtml:	foreach my $row (@entry) {
./tourn/tournaman_teamtab.mhtml:#	foreach my $key (sort keys %entry) {
./tourn/tournaman_teamtab.mhtml:	my $RSobject = Tab::ResultSet->create( {
./tourn/tournaman_teamtab.mhtml:	my $nentries=scalar(keys %entry);
./tourn/tournaman_teamtab.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_teamtab.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_teamtab.mhtml:		my $pct = round((($nentries-@$row[0]+1)/$nentries)*1000);
./tourn/tournaman_teamtab.mhtml:		my $entryrecord = Tab::Entry->retrieve( $entry{ "@$row[1]" } );
./tourn/tournaman_teamtab.mhtml:		my $result = Tab::Result->create( {
./tourn/clone_tournament.mas:	my $old_tourn = Tab::Tourn->retrieve($clone);
./tourn/clone_tournament.mas:	my $ostart = $old_tourn->start;
./tourn/clone_tournament.mas:	my $diff = $start->delta_days($ostart);  
./tourn/clone_tournament.mas:	my $reg_start = $old_tourn->reg_start->clone;
./tourn/clone_tournament.mas:	my $reg_end = $old_tourn->end->clone;
./tourn/clone_tournament.mas:	my $already = Tab::Tourn->search( name => $name, start => $start, end => $end )->first;
./tourn/clone_tournament.mas:		my $tourn = Tab::Tourn->create({ 
./tourn/clone_tournament.mas:		my $owner = Tab::Permission->create({ 
./tourn/clone_tournament.mas:		my $contact = Tab::Permission->create({ 
./tourn/clone_tournament.mas:		foreach my $setting ($old_tourn->settings) {
./tourn/clone_tournament.mas:			my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:				my $new_date = $nsetting->value_date->clone;
./tourn/clone_tournament.mas:		foreach my $circuit ($old_tourn->tourn_circuits) { 
./tourn/clone_tournament.mas:			my $ncircuit = $circuit->copy({
./tourn/clone_tournament.mas:		foreach my $housing ($old_tourn->housing_slots) { 
./tourn/clone_tournament.mas:			my $nhousing = $housing->copy({
./tourn/clone_tournament.mas:			my $new_night = $housing->night;
./tourn/clone_tournament.mas:		my %pattern_translator = ();
./tourn/clone_tournament.mas:		foreach my $ed ($old_tourn->patterns) { 
./tourn/clone_tournament.mas:			my $ned = $ed->copy ({
./tourn/clone_tournament.mas:		foreach my $tournsite ($old_tourn->tourn_sites) {
./tourn/clone_tournament.mas:			my $ntournsite = $tournsite->copy ({
./tourn/clone_tournament.mas:			foreach my $webpage ($tourn->webpages) {
./tourn/clone_tournament.mas:				my $nwebpage = $webpage->copy ({
./tourn/clone_tournament.mas:		foreach my $concession ($old_tourn->concessions) {
./tourn/clone_tournament.mas:			my $nconcession = $concession->copy ({
./tourn/clone_tournament.mas:			my $new_deadline = $concession->deadline;
./tourn/clone_tournament.mas:		foreach my $tourn_fee ($old_tourn->tourn_fees) {
./tourn/clone_tournament.mas:			my $ntourn_fee = $tourn_fee->copy ({
./tourn/clone_tournament.mas:			my $new_start = $ntourn_fee->start;
./tourn/clone_tournament.mas:			my $new_end = $ntourn_fee->end;
./tourn/clone_tournament.mas:			foreach my $follower (Tab::Follower->search( tourn => $old_tourn->id, type => "tourn" )) { 
./tourn/clone_tournament.mas:				my $nfollow = $follower->copy ({
./tourn/clone_tournament.mas:		my %timeslot_translator = ();
./tourn/clone_tournament.mas:		foreach my $ts ($old_tourn->timeslots) { 
./tourn/clone_tournament.mas:			my $nts = $ts->copy({
./tourn/clone_tournament.mas:			my $ntstart = $nts->start;
./tourn/clone_tournament.mas:			my $ntend = $nts->end;
./tourn/clone_tournament.mas:		my %category_translator = ();
./tourn/clone_tournament.mas:		my %jpool_translator = ();
./tourn/clone_tournament.mas:		my %rating_subset_translator = ();
./tourn/clone_tournament.mas:		foreach my $jg ($old_tourn->categories) { 
./tourn/clone_tournament.mas:			my $njg = $jg->copy({
./tourn/clone_tournament.mas:			foreach my $setting ($jg->settings) {
./tourn/clone_tournament.mas:				my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:						my $new_date = $nsetting->value_date->clone;
./tourn/clone_tournament.mas:			foreach my $jpool ($jg->jpools) { 
./tourn/clone_tournament.mas:				my $npool = $jpool->copy({
./tourn/clone_tournament.mas:			foreach my $rs ($jg->rating_subsets) { 
./tourn/clone_tournament.mas:				my $nrs = $rs->copy({
./tourn/clone_tournament.mas:				foreach my $rating_tier ($rs->rating_tiers) {
./tourn/clone_tournament.mas:					my $nrating_tier = $rating_tier->copy({
./tourn/clone_tournament.mas:			foreach my $rt ($jg->rating_tiers) { 
./tourn/clone_tournament.mas:				my $nrt = $rt->copy({
./tourn/clone_tournament.mas:			foreach my $strike_timeslot ($jg->strike_timeslots) { 
./tourn/clone_tournament.mas:				my $nstrike_timeslot = $strike_timeslot->copy({
./tourn/clone_tournament.mas:				my $new_start = $strike_timeslot->start;
./tourn/clone_tournament.mas:				my $new_end = $strike_timeslot->end;
./tourn/clone_tournament.mas:		my %tiebreak_set_translator = ();
./tourn/clone_tournament.mas:		foreach my $tiebreak_set ($old_tourn->tiebreak_sets) {
./tourn/clone_tournament.mas:			my $ntiebreak_set = $tiebreak_set->copy({
./tourn/clone_tournament.mas:			foreach my $tb ($tiebreak_set->tiebreaks) { 
./tourn/clone_tournament.mas:				my $ntb = $tb->copy({
./tourn/clone_tournament.mas:		my %event_translator = ();
./tourn/clone_tournament.mas:		my %round_translator = ();
./tourn/clone_tournament.mas:		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) { 
./tourn/clone_tournament.mas:			my $nevent = $event->copy({
./tourn/clone_tournament.mas:			foreach my $setting ($event->settings) { 
./tourn/clone_tournament.mas:				my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:					my $new_date = $nsetting->value_date->clone;
./tourn/clone_tournament.mas:			foreach my $round ($event->rounds) { 
./tourn/clone_tournament.mas:				my $nround = $round->copy({
./tourn/clone_tournament.mas:				foreach my $setting ($round->settings) {
./tourn/clone_tournament.mas:					my $nsetting = $setting->copy({
./tourn/clone_tournament.mas:				my $new_bid = $round_translator{$nevent->setting("bid_round")};
./tourn/clone_tournament.mas:		foreach my $jpool ($old_tourn->jpools) { 
./tourn/clone_tournament.mas:			my $njpool = $jpool->copy({ tourn => $tourn->id });
./tourn/clone_tournament.mas:			foreach my $round ($jpool->rounds) { 
./tourn/clone_tournament.mas:		foreach my $rpool ($old_tourn->rpools) { 
./tourn/clone_tournament.mas:			my $nrpool = $rpool->copy({ tourn => $tourn->id });
./tourn/clone_tournament.mas:			foreach my $round ($rpool->rounds) { 
./tourn/clone_tournament.mas:		foreach my $room_strike ($old_tourn->room_strikes) { 
./tourn/clone_tournament.mas:			my $nroom_strike = $room_strike->copy({
./tourn/clone_tournament.mas:				my $new_start = $nroom_strike->start;
./tourn/clone_tournament.mas:				my $new_end = $nroom_strike->end;
./tourn/clone_tournament.mas:		my %sweep_set_translator = ();
./tourn/clone_tournament.mas:		foreach my $sweep_set ($old_tourn->sweep_sets) {
./tourn/clone_tournament.mas:			my $nsweep_set = $sweep_set->copy({
./tourn/clone_tournament.mas:			foreach my $sweep_event (Tab::SweepEvent->search( sweep_set => $sweep_set->id)) { 
./tourn/clone_tournament.mas:				my $nsweep_event = $sweep_event->copy({  
./tourn/clone_tournament.mas:			foreach my $sweep_rule (Tab::SweepRule->search( sweep_set => $sweep_set->id)) { 
./tourn/clone_tournament.mas:					my $nsweep_rule = $sweep_rule->copy({  
./tourn/clone_tournament.mas:					my $nsweep_rule = $sweep_rule->copy({  
./tourn/clone_tournament.mas:		foreach my $sweep_set ($old_tourn->sweep_sets) {
./tourn/clone_tournament.mas:			my @links = Tab::SweepInclude->search( parent => $sweep_set );
./tourn/clone_tournament.mas:			foreach my $link (@links) { 
./tourn/clone_tournament.mas:				my $nlink = $link->copy({ 
./tourn/results/entry_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./tourn/results/entry_print.mhtml:	my $tourn = $school->tourn;
./tourn/results/entry_print.mhtml:	my $filename = "registration-".$school_id."-".$session->id;
./tourn/results/entry_print.mhtml:	my $filepath = $Tab::file_root."tmp/".$filename;
./tourn/results/entry_print.mhtml:	my $now = DateTime->now;	
./tourn/results/autohandler:	my $school;
./tourn/results/autohandler:		my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./tourn/results/autohandler:		my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./tourn/results/autohandler:	my $tourn = $school->tourn;
./tourn/results/print_school_report.mhtml:	my %finalists_by_event;
./tourn/results/print_school_report.mhtml:	foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)( type => "speech")) { 
./tourn/results/print_school_report.mhtml:		my @finalists = $m->comp(
./tourn/results/print_school_report.mhtml:	my $basename = "/tmp/school-reports-school-".$school->id."-".$session->id;
./tourn/results/print_school_report.mhtml:    my $filename = $Tab::file_root."".$basename;
./tourn/results/print_school_report.mhtml:    my $garbage = `rm -f $filename.*`;
./tourn/results/print_school_report.mhtml:my $tabular_row = "\\begin{tabular}{p{.35in}p{.35in}p{1.5in}p{.35in}p{3.25in}p{.5in}}\n";
./tourn/results/print_school_report.mhtml:	my %entries_counted = $m->comp("/results/school_count.mas", school => $school, tourn => $tourn);
./tourn/results/print_school_report.mhtml:	my $school_points;
./tourn/results/print_school_report.mhtml:	foreach my $entry ($school->entries) {
./tourn/results/print_school_report.mhtml:	my $switch; 
./tourn/results/print_school_report.mhtml:	foreach my $entry (sort {$a->code <=> $b->code} $school->entries) {
./tourn/results/print_school_report.mhtml:		my @ballots = Tab::Ballot->search_ordered_by_round($entry->id); 
./tourn/results/print_school_report.mhtml:		my $c_name = $entry->name if $entry->event->team;
./tourn/results/print_school_report.mhtml:			foreach my $ballot (@ballots) { 
./tourn/results/print_school_report.mhtml:		my $entry_rank;
./tourn/results/print_school_report.mhtml:		my $rank;
./tourn/results/print_school_report.mhtml:		foreach my $finalist (@{$finalists_by_event{$entry->event->id}}) {
./tourn/results/invoice_print.mhtml:#	my $school = Tab::School->retrieve($school_id);
./tourn/results/invoice_print.mhtml:	my $filename = $Tab::file_root."/tmp/invoice-".$school->id."-".$session->id;
./tourn/results/invoice_print.mhtml:	my $garbage = `rm -f $filename.*`;
./tourn/confirm.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/confirm.mhtml:	my @sites = $tourn->sites;
./tourn/confirm.mhtml:	foreach my $tourn_circuit ($tourn->tourn_circuits) { 
./tourn/confirm.mhtml:		my $circuit = $tourn_circuit->circuit;
./tourn/confirm.mhtml:		foreach my $admin ($circuit->admins) { 
./tourn/confirm.mhtml:			my $subject =  $circuit->abbr." Tournament Requested";
./tourn/confirm.mhtml:			my $body = "\n";
./tourn/confirm.mhtml:			my $notfirst;
./tourn/confirm.mhtml:			foreach my $site (@sites) { 
./tourn/all.mhtml:	my @tourns = Tab::Tourn->search_by_director($person->id);
./tourn/all.mhtml:	my $now = DateTime->now;
./tourn/all.mhtml:%			my $switch;
./tourn/all.mhtml:%			foreach my $tourn (@tourns) { 
./tourn/all.mhtml:%			   my $open++ if ($tourn->reg_start && $tourn->reg_end && $tourn->reg_start->epoch < $now->epoch &&  
./tourn/all.mhtml:%					   foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) {
./tourn/tournaman_speakertab.mhtml:	my $now = DateTime->now;
./tourn/tournaman_speakertab.mhtml:	my $tz = $person->tz if $person->tz;
./tourn/tournaman_speakertab.mhtml:	my $req = Apache2::Request->new($r);
./tourn/tournaman_speakertab.mhtml:	my $xml_file = $req->upload("speakertab");
./tourn/tournaman_speakertab.mhtml:	my $xml_filename = $xml_file->tempname;
./tourn/tournaman_speakertab.mhtml:	my $webname=$xml_file->filename;
./tourn/tournaman_speakertab.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./tourn/tournaman_speakertab.mhtml:	open my $fh, '<', $xml_filename or die "error loading";
./tourn/tournaman_speakertab.mhtml:	my $data = do { local $/; <$fh> };
./tourn/tournaman_speakertab.mhtml:	my $te = HTML::TableExtract->new( headers => ['Position', 'Name', 'Team', 'Total Points'] );
./tourn/tournaman_speakertab.mhtml:	my @event = Tab::Event->search( tourn => $tourn_id );
./tourn/tournaman_speakertab.mhtml:	my @entry_student = $m->comp('/funclib/entry_student_by_event.mas', event => $event[0]->id );
./tourn/tournaman_speakertab.mhtml:	my %entry_student; 
./tourn/tournaman_speakertab.mhtml:	my $dummy;
./tourn/tournaman_speakertab.mhtml:	foreach my $row (@entry_student) {
./tourn/tournaman_speakertab.mhtml:#		my $s = Tab::Student->retrieve($dummy);  WHY THE FUCK DOESN'T THIS WORK?
./tourn/tournaman_speakertab.mhtml:		my @student = Tab::Student->search( id => $row->student );
./tourn/tournaman_speakertab.mhtml:		$dummy = $student[0]->first." ".$student[0]->last;
./tourn/tournaman_speakertab.mhtml:#		print $dummy."<br>";
./tourn/tournaman_speakertab.mhtml:		$entry_student{$dummy} = $row->id;
./tourn/tournaman_speakertab.mhtml:	my $RSobject = Tab::ResultSet->create( {
./tourn/tournaman_speakertab.mhtml:	foreach my $ts ($te->tables) {
./tourn/tournaman_speakertab.mhtml:	  foreach my $row ($ts->rows) {
./tourn/tournaman_speakertab.mhtml:		my $entryrecord = Tab::EntryStudent->retrieve( $entry_student{ @$row[1] } );
./tourn/tournaman_speakertab.mhtml:		my $result = Tab::Result->create( {
./tourn/tournaman_save_create.mhtml:		my $judge = $start;
./tourn/tournaman_save_create.mhtml:		my $drops  = $start;
./tourn/tournaman_save_create.mhtml:		my $fines  = $start;
./tourn/tournaman_save_create.mhtml:		my $tourn = Tab::Tourn->create( {
./tourn/tournaman_save_create.mhtml:		my $category = Tab::Category->create( {
./tourn/save.mhtml:		my $return = "You must select an existing site, or give your site a name";
./tourn/save.mhtml:	my @circuits;
./tourn/save.mhtml:	foreach my $circuit_id (split(/-/, $circuit_string)) { 
./tourn/save.mhtml:	my $default_circuit = $circuits[0];
./tourn/save.mhtml:	my $default_circuit_id = $default_circuit->id if $default_circuit;
./tourn/save.mhtml:	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
./tourn/save.mhtml:	my $enddt = DateTime::Format::MySQL->parse_datetime($end) if $end;
./tourn/save.mhtml:	my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
./tourn/save.mhtml:	my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
./tourn/save.mhtml:	my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
./tourn/save.mhtml:	my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
./tourn/save.mhtml:	my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
./tourn/save.mhtml:	my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);
./tourn/save.mhtml:	my $site = Tab::Site->retrieve($site_id) if $site_id;
./tourn/save.mhtml:	my $tourn = Tab::Tourn->create( { 
./tourn/save.mhtml:	my $join = Tab::TournSite->create ({
./tourn/save.mhtml:	foreach my $circuit (@circuits) { 
./tourn/save.mhtml:		my $approved = 0;
./tourn/save.mhtml:		my $join = Tab::TournCircuit->create ({
./tourn/save.mhtml:	my $tiebreak_set = Tab::TiebreakSet->create({
./tourn/select.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./tourn/select.mhtml:	my @auth_tourns = Tab::Tourn->search_by_director($person->id);
./tourn/select.mhtml:	my @auth_circuits = Tab::Circuit->search_by_admin($person->id);
./tourn/select.mhtml:	my $ok;
./tourn/select.mhtml:		foreach my $circuit ($tourn->circuits) { 
./tourn/select.mhtml:			my @ta = Tab::Permission->search( tourn => $tourn->id, person => $person->id );
./tourn/select.mhtml:			my $no_reg;
./tourn/select.mhtml:			my $err = "You do not have administrative access to that tournament.  Please contact the tournament director ";
./tourn/tournaman_create_tourney.mhtml:	my $tz = $person->tz;
./tourn/tournaman_create_tourney.mhtml:	my $switch;
./tourn/tournaman_create_tourney.mhtml:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./tourn/tournaman_upload.mhtml:	my $tourney = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./tourn/tournaman_upload.mhtml:	my @entries = Tab::Entry->search( tourn => $tourn_id);
./tourn/tournaman_upload.mhtml:	my @resultset = Tab::ResultSet->search( tourn => $tourn_id);
./tourn/tournaman_upload.mhtml:	my $teamresults=0; my $speakerresults=0;
./tourn/tournaman_upload.mhtml:	foreach my $resultset (@resultset) {
./region/school_entry.mhtml:	my $school = Tab::School->retrieve($school_id);
./region/school_entry.mhtml:	my $tourn = $school->tournament;
./region/school_entry.mhtml:	my $region = $school->region;
./region/school_entry.mhtml:	my $switch;
./region/school_entry.mhtml:	my @entries = sort {$a->code <=> $b->code} $school->entries;
./region/school_entry.mhtml:%			foreach my $entry (@entries) { 
./region/school_entry.mhtml:%		foreach my $school ($tourn->schools(region => $region->id)) {
./region/admin_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./region/admin_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./region/admin_add.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./region/admin_add.mhtml:	my $login = Tab::Login->search( username => $email )->first;
./region/admin_add.mhtml:		my $err = "The email $email has no login on this system.  ";
./region/admin_add.mhtml:	my $admin_person = $login->person;
./region/admin_add.mhtml:	my $coach = Tab::Permission->search( chapter => $chapter_id, person => $admin_person->id )->first;
./region/admin_add.mhtml:	my $msg = $admin_person->first." ".$admin_person->last." has been given access to ". $chapter->name;	
./region/admin_rm.mhtml:	my $err;
./region/admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./region/admin_rm.mhtml:	my $admin = Tab::Person->retrieve($admin_id); 
./region/admin_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./region/admin_rm.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./region/admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $admin_id, chapter => $chapter->id);
./region/admin_rm.mhtml:	my $msg = $admin->first." ".$admin->last." has been removed from ". $chapter->name;	
./region/tournaments.mhtml:	my $region = Tab::Region->retrieve($region_id);
./region/tournaments.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./region/tournaments.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./region/tournaments.mhtml:	my $circuit = $region->circuit;
./region/tournaments.mhtml:	my $tz = $person->tz;
./region/tournaments.mhtml:	my $switch;
./region/tournaments.mhtml:	my $region_name = "Region";
./region/tournaments.mhtml:%			foreach my $school ($tourn->schools(region => $region_id)) { 
./region/tournaments.mhtml:%			foreach my $admin ($chapter->admins) { 
./region/tournaments.mhtml:%		my @schools = $m->comp("/funclib/chapter_schools.mas", chapter => $chapter);
./region/tournaments.mhtml:%				foreach my $school (@schools) { 
./region/tournaments.mhtml:%					my $tourn = $school->tourn;
./region/tournaments.mhtml:%					my $start = $tourn->start->set_time_zone($tz);
./region/tournaments.mhtml:%					my $end = $tourn->end->set_time_zone($tz);
./region/tournaments.mhtml:%							foreach my $circuit ($tourn->circuits) { 
./region/tournaments.mhtml:%				foreach my $chapter ($region->chapters) { 
./region/tournaments.mhtml:%				foreach my $tourn ($circuit->tourns) { 
./enter/entry.mhtml:	my $tourn = $school->tourn;
./enter/entry.mhtml:	my $tz = $tourn->tz;
./enter/entry.mhtml:    my $now = DateTime->now(time_zone => $tz);
./enter/entry.mhtml:	my $adult++ if ( $school->setting("contact_number") && $school->setting("contact_name") && $school->setting("contact_email"));
./enter/entry.mhtml:%						foreach my $region ($tourn->regions) { 
./enter/entry.mhtml:%			my $bodies = $m->comp("/funclib/school_bodies.mas", school => $school);
./enter/entry.mhtml:%						my $freeze_deadline = $tourn->setting("freeze_deadline");
./enter/entry.mhtml:%						my $drop_deadline = $tourn->setting("drop_deadline");
./enter/entry.mhtml:%						my $judge_deadline = $tourn->setting("judge_deadline");
./enter/entry.mhtml:%						my $fine_deadline = $tourn->setting("fine_deadline");
./enter/entry.mhtml:%				foreach my $category ($tourn->categories) {
./enter/entry.mhtml:%					my $strike_end = $category->setting("strike_end");
./enter/entry.mhtml:%				foreach my $concession ($tourn->concessions) {
./enter/entry.mhtml:%			my $warn = "This will drop your entire entry, including any spots on waitlists.  Be very sure!";
./enter/entry.mhtml:%			my @followers = Tab::Follower->search( school => $school->id, type => 'school' );
./enter/entry.mhtml:%			foreach my $follower (@followers) { 
./enter/judge_housing_plz.mhtml:	my $now = DateTime->now();
./enter/judge_housing_plz.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_housing_plz.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_housing_plz.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/judge_housing_plz.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./enter/judge_housing_plz.mhtml:		my $err = "You must fill in the judge's gender before you can request housing";
./enter/judge_housing_plz.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./enter/judge_housing_plz.mhtml:	my $num_slots = $slots[0]->slots;
./enter/judge_housing_plz.mhtml:	my @requests =  Tab::Housing->search( night => $night->ymd, tourn => $tourn->id );
./enter/judge_housing_plz.mhtml:	my $waitlist = 0;
./enter/judge_housing_plz.mhtml:	my $existing_request = $m->comp("/funclib/judge_housing.mas", judge => $judge, day => $night);
./enter/judge_housing_plz.mhtml:	my $housing_request = Tab::Housing->create({
./enter/judge_housing_plz.mhtml:		my $description = $person->first." ".$person->last." requested housing for judge ".$judge->first." ".$judge->last;
./enter/judge_housing_plz.mhtml:        my $change = Tab::ChangeLog->create({
./enter/judge_housing_plz.mhtml:	my $msg = "Housing for ".$judge->first." ".$judge->last." on ".$night->day_name." confirmed.";
./enter/judge_housing_plz.mhtml:	my $err = "The housing for this tournament is currently full on ".$night->day_name.".  ".$judge->first." ".$judge->last." has been placed on the waitlist on a first-come, first-served basis." if $waitlist;
./enter/hire_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/hire_save.mhtml:	my $now = DateTime->now();
./enter/hire_save.mhtml:	my $err;
./enter/hire_save.mhtml:	my $request;
./enter/hire_save.mhtml:	my $judge_per = $category->setting("judge_per");
./enter/hire_save.mhtml:		my $covers = $hired_number * $judge_per if $category->setting("hired_fee") && $judge_per;
./enter/hire_save.mhtml:		my $available_slots = $category->setting("hired_jpool") * $judge_per;
./enter/hire_save.mhtml:			foreach my $acc (Tab::JudgeHire->search( category => $category->id )) { 
./enter/hire_save.mhtml:		my $available_rounds = $category->setting("hired_rounds");
./enter/hire_save.mhtml:			foreach my $acc (Tab::JudgeHire->search( category => $category->id )) { 
./enter/housing_tba.mhtml:	my $now = DateTime->now();
./enter/housing_tba.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_tba.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/housing_tba.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./enter/housing_tba.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./enter/housing_tba.mhtml:	my $num_slots = $slots[0]->slots;
./enter/housing_tba.mhtml:			my $housing_request = Tab::Housing->create({
./enter/housing_tba.mhtml:       my $description = $person->first." ".$person->last." Requested $count housing for TBA entries";
./enter/housing_tba.mhtml:        my $change = Tab::ChangeLog->create({
./enter/housing_tba.mhtml:	my $msg = "$count Housing slots for TBAs on ".$night->day_name." requested.";
./enter/region_save.mhtml:	my $msg;
./enter/region_save.mhtml:		my $school = Tab::School->retrieve($school_id);
./enter/region_save.mhtml:		foreach my $region ($school->tourn->regions) {
./enter/hire_delete.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./enter/hire_delete.mhtml:	my $category = $hire->category;
./enter/hire_delete.mhtml:	my $msg;
./enter/details_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details_save.mhtml:	my $event = $entry->event;
./enter/details_save.mhtml:	my $tourn = $event->tourn;
./enter/details_save.mhtml:	my $school = $entry->school;
./enter/details_save.mhtml:	my $code_style = $event->setting("code_style");
./enter/details_save.mhtml:	my $max = $event->setting("max_entry");
./enter/details_save.mhtml:	my $min = $event->setting("min_entry");
./enter/details_save.mhtml:	my $err;
./enter/details_save.mhtml:	my @quals = $entry->qualifiers;
./enter/details_save.mhtml:	my %used_quals;
./enter/details_save.mhtml:	my $quals = $event->setting('ask_quals');
./enter/details_save.mhtml:	my $required = $quals;
./enter/details_save.mhtml:	foreach my $step (1 .. $quals) { 
./enter/details_save.mhtml:		my $name = $ARGS{"qual_".$step};
./enter/details_save.mhtml:		my $result = $ARGS{"qualpts_".$step};
./enter/details_save.mhtml:		my $foundit;
./enter/details_save.mhtml:		foreach my $qual (@quals) {
./enter/details_save.mhtml:	foreach my $qual (@quals) {
./enter/details_save.mhtml:	my $other = Tab::Entry->search_where({ name => $name, school => $school->id, event => $event->id, id => {'!=', $entry->id} })->first;
./enter/details_save.mhtml:	my %used_student = ();
./enter/details_save.mhtml:	my %students_by_id = ();
./enter/details_save.mhtml:	my @students = $entry->students;
./enter/details_save.mhtml:	foreach my $student (@students) {
./enter/details_save.mhtml:	my $first_name;
./enter/details_save.mhtml:	my $last_name;
./enter/details_save.mhtml:	my $notfirst;
./enter/details_save.mhtml:	foreach my $step (1 .. $max) { 
./enter/details_save.mhtml:		my $student_id = $ARGS{"student_".$step};
./enter/details_save.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/details_save.mhtml:	my $housed;
./enter/details_save.mhtml:	foreach my $student (@students) { 
./enter/details_save.mhtml:		my $es = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
./enter/details_save.mhtml:		my @housing = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./enter/details_save.mhtml:	my @count = $entry->students;
./enter/details_save.mhtml:		my $other = Tab::Entry->search_where({
./enter/details_save.mhtml:		my $msg = "One of the removed entries had housing.  Transfer or drop housing request?";
./enter/details_save.mhtml:	my $msg = "Entry ".$entry->name." details saved";
./enter/judge_sex_change.mhtml:		my $err = "You must specify a gender for the judge before you can request housing";
./enter/judge_sex_change.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/students.mhtml:	my $tourn = $school->tourn;
./enter/students.mhtml:	my $event = Tab::Event->retrieve($event_id) if $event_id;	
./enter/students.mhtml:	my @events = $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./enter/students.mhtml:	my $tz = $tourn->tz;
./enter/students.mhtml:	my $cap;
./enter/students.mhtml:	my $tourn_cap;
./enter/students.mhtml:	my $school_cap;
./enter/students.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./enter/students.mhtml:    my $now = DateTime->now;
./enter/students.mhtml:		my @already_entered = Tab::Entry->search( 
./enter/students.mhtml:		my @waitlist = Tab::Entry->search( 
./enter/students.mhtml:		my @hybrides = $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school);
./enter/students.mhtml:		my $hybrids++ if @hybrides;
./enter/students.mhtml:		my %seen = (); 
./enter/students.mhtml:		my $deadline = $event->setting("deadline");
./enter/students.mhtml:% 			my $count;
./enter/students.mhtml:% 				my $waitlist_done;
./enter/students.mhtml:%				my %used;
./enter/students.mhtml:% 				foreach my $already (@already_entered, @waitlist) { 
./enter/students.mhtml:%					my $other;
./enter/students.mhtml:%						foreach my $student ($already->students) { 
./enter/students.mhtml:%								my $warn = "This action adds the entry back to your registration.  Fees and judge burdens may change.  Continue?";
./enter/students.mhtml:%								my $warn = "Are you sure you want to drop that entry?";
./enter/students.mhtml:%					my @qualifiers = $already->qualifiers;
./enter/students.mhtml:%								my $tick = 1;
./enter/students.mhtml:%								foreach my $qualifier (@qualifiers) { 
./enter/students.mhtml:% 				} #end of foreach my already
./enter/students.mhtml:			my $event_deadline = $event->setting("deadline");
./enter/students.mhtml:			my $caphit = "At school cap. " if (
./enter/students.mhtml:%		    my @clean_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./enter/students.mhtml:%							foreach my $student (@clean_students) { 
./enter/students.mhtml:%								foreach my $student (@clean_students) { 
./enter/students.mhtml:%					my $waitlist++ if $caphit;
./enter/students.mhtml:%		foreach my $event (@events) { 
./enter/team_members_rm.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/team_members_rm.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/team_members_rm.mhtml:	my @team_members = Tab::EntryStudent->search( student => $student->id, entry => $entry_id );
./enter/team_members_rm.mhtml:	my $msg .= $student->first." ".$student->last." has been removed from ".$entry->name;
./enter/hire_reduce.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./enter/hire_reduce.mhtml:	my $category = $hire->category;
./enter/hire_reduce.mhtml:	my $school = $hire->school;
./enter/hire_reduce.mhtml:	my $reduction = $category->setting("judge_per") if $category->setting("hired_fee") && $category->setting("judge_per");
./enter/hire_reduce.mhtml:	my $msg = "Hired judging reduced by 1";
./enter/housing.mhtml:	my $tourn = $school->tourn;
./enter/housing.mhtml:	my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn, add_one => "aye");
./enter/housing.mhtml:	my $now = DateTime->now;
./enter/housing.mhtml:	my $reg_end = $tourn->reg_end;
./enter/housing.mhtml:			my $switch;
./enter/housing.mhtml:			my @students = $m->comp("/funclib/school_students.mas", school => $school);
./enter/housing.mhtml:			my @judges = $school->judges;
./enter/housing.mhtml:			my %students_sans_housing = ();
./enter/housing.mhtml:			my %judges_sans_housing = ();
./enter/housing.mhtml:			foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./enter/housing.mhtml:				foreach my $stu (@students) { 
./enter/housing.mhtml:					my $housing = $m->comp("/funclib/student_housing.mas", tourn => $tourn, student => $stu, day => $day);
./enter/housing.mhtml:				foreach my $jud (@judges) { 
./enter/housing.mhtml:					my $housing = $m->comp("/funclib/judge_housing.mas", judge => $jud, day => $day);
./enter/housing.mhtml:%			foreach my $student (sort {$a->last cmp $b->last} $school->students) {
./enter/housing.mhtml:%				my $event_names;
./enter/housing.mhtml:%				foreach my $event ($m->comp("/funclib/student_entries.mas", tourn => $tourn, student => $student, event => 1)) {
./enter/housing.mhtml:%					my $notfirst;
./enter/housing.mhtml:%					foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./enter/housing.mhtml:%						my $housing = $student->housing($tourn, $day); 
./enter/housing.mhtml:%		foreach my $judge ($school->judges) {
./enter/housing.mhtml:%				my $notfirst;
./enter/housing.mhtml:%				foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./enter/housing.mhtml:%					my $housing = $m->comp("/funclib/judge_housing.mas", tourn => $tourn, judge => $judge, day => $day);
./enter/housing.mhtml:%		my @tbas = Tab::Entry->search( tba => 1, school => $school->id );
./enter/housing.mhtml:%		my @tba_housing = Tab::Housing->search( tba => 1, school => $school->id );
./enter/housing.mhtml:%				foreach my $day (@days) { 
./enter/housing.mhtml:%					my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day );
./enter/housing.mhtml:%					my @tbas = Tab::Housing->search( tba => 1, school => $school->id, night => $day );
./enter/tba_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./enter/tba_save.mhtml:	my $tz = $school->tourn->tz;
./enter/tba_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./enter/tba_save.mhtml:	my @alreadys = $school->entries( event => $event_id,  );
./enter/tba_save.mhtml:	my @all_event = $event->entries( event => $event_id,  waitlist => 0);
./enter/tba_save.mhtml:	my @all = $m->comp("/funclib/tourn_entries.mas", tourn => $event->tourn); 
./enter/tba_save.mhtml:	my $cap = $event->setting("cap");
./enter/tba_save.mhtml:	my $school_cap = $event->setting("school_cap");
./enter/tba_save.mhtml:	my $tourn_cap = $event->tourn->setting("overall_cap");
./enter/tba_save.mhtml:	my $wl = $event->setting("waitlist");
./enter/tba_save.mhtml:	my $wl_all++ if $event->setting("waitlist_all");
./enter/tba_save.mhtml:		my $description = $person->first." ".$person->last." entered $slots TBA slots in ".$event->abbr;
./enter/tba_save.mhtml:		my $change = Tab::ChangeLog->create({
./enter/tba_save.mhtml:	foreach my $slot (1 .. $slots) {
./enter/tba_save.mhtml:		my $waitlist = 0;
./enter/tba_save.mhtml:		my $person_id = $person->id if $person;
./enter/tba_save.mhtml:		my $entry = Tab::Entry->create({
./enter/details_housing_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details_housing_save.mhtml:	my $event = $entry->event;
./enter/details_housing_save.mhtml:	my $tourn = $event->tourn;
./enter/details_housing_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/details_housing_save.mhtml:	my @student_ids = split(/-/, $housed);
./enter/details_housing_save.mhtml:	my $msg;
./enter/details_housing_save.mhtml:	foreach my $student_id (@student_ids) { 
./enter/details_housing_save.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/details_housing_save.mhtml:		my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./enter/details_housing_save.mhtml:		foreach my $housing (@housings) { 
./enter/details_housing_save.mhtml:			my $night = $housing->night;
./enter/details_housing_save.mhtml:			my $args = $ARGS{$housing->id};
./enter/details_housing_save.mhtml:			my ($type, $id) = split(/-/, $args);
./enter/details_housing_save.mhtml:				my $judge = Tab::Judge->retrieve($id);
./enter/details_housing_save.mhtml:				my @already_housed = $m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn, night => $night);
./enter/details_housing_save.mhtml:				foreach my $ah (@already_housed) { 
./enter/details_housing_save.mhtml:				my $student = Tab::Student->retrieve($id);
./enter/details_housing_save.mhtml:				my @already_housed = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn, night => $night);
./enter/details_housing_save.mhtml:				foreach my $ah (@already_housed) { 
./enter/housing_plz.mhtml:	my $now = DateTime->now();
./enter/housing_plz.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/housing_plz.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_plz.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/housing_plz.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./enter/housing_plz.mhtml:		my $err = "You must fill in the student's gender before you can request housing";
./enter/housing_plz.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./enter/housing_plz.mhtml:	my $num_slots = $slots[0]->slots;
./enter/housing_plz.mhtml:	my @requests =  Tab::Housing->search( night => $night->ymd, tourn => $tourn->id );
./enter/housing_plz.mhtml:	my $waitlist = 0;
./enter/housing_plz.mhtml:	my $only_waitlisted = 1;
./enter/housing_plz.mhtml:	foreach my $entry ($m->comp("/funclib/student_entries.mas", student => $student, tourn => $tourn)) { 
./enter/housing_plz.mhtml:	my $existing_request = $student->housing($tourn, $night);
./enter/housing_plz.mhtml:	my $housing_request = Tab::Housing->create({
./enter/housing_plz.mhtml:       my $description = $person->first." ".$person->last." Requested housing for ".$student->first." ".$student->last;
./enter/housing_plz.mhtml:       my $change = Tab::ChangeLog->create({
./enter/concessions_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/concessions_save.mhtml:	my $tourn = $school->tourn;
./enter/concessions_save.mhtml:	my $now = DateTime->now;
./enter/concessions_save.mhtml:	my $err;
./enter/concessions_save.mhtml:	foreach my $concession ($tourn->concessions) { 
./enter/concessions_save.mhtml:		my $total_order = $m->comp("/funclib/concession_stats.mas", total => 1, concession => $concession);
./enter/concessions_save.mhtml:		my $cap = $concession->cap;
./enter/concessions_save.mhtml:		my $quantity = $ARGS{$concession->id."_amount"};
./enter/concessions_save.mhtml:		my $purchase = Tab::ConcessionPurchase->search( concession => $concession->id, school => $school->id )->first;
./enter/concessions_save.mhtml:			my $remainder = $cap - $total_order;
./enter/concessions_save.mhtml:	my $msg = "Order updated";
./enter/hybrid_entry.mhtml:	my $event = Tab::Event->retrieve($event_id);
./enter/hybrid_entry.mhtml:	my $tourn = $event->tourn;
./enter/hybrid_entry.mhtml:	my $tz = $tourn->tz;
./enter/hybrid_entry.mhtml:	my $now = DateTime->now(time_zone => $tz);
./enter/hybrid_entry.mhtml:	my @candidates;
./enter/hybrid_entry.mhtml:	my $other_chapter;
./enter/hybrid_entry.mhtml:	my $other_school;
./enter/hybrid_entry.mhtml:	my @other_students;
./enter/hybrid_entry.mhtml:	my @students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./enter/hybrid_entry.mhtml:	my $switch;
./enter/hybrid_entry.mhtml:%						foreach my $other_school (sort {$a->name cmp $b->name} $tourn->schools) { 
./enter/hybrid_entry.mhtml:%				foreach my $cand (@candidates) { 
./enter/hybrid_entry.mhtml:%							foreach my $contact ($cand->admins) { 
./enter/hybrid_entry.mhtml:%							foreach my $circuit ($cand->circuits) { 
./enter/hybrid_entry.mhtml:%								foreach my $student (@students) { 
./enter/hybrid_entry.mhtml:%								foreach my $other (@other_students) { 
./enter/hybrid_entry.mhtml:%	        my $deadline = $event->setting("deadline");
./enter/hybrid_entry.mhtml:%		    my $cap = $event->setting("cap");
./enter/hybrid_entry.mhtml:%		    my $school_cap = $event->setting("school_cap");
./enter/hybrid_entry.mhtml:%		    my $tourn_cap = $tourn->setting("overall_cap");
./enter/hybrid_entry.mhtml:				my $caphit = "At school cap of ".$school_cap.". " if (
./enter/hybrid_entry.mhtml:%			    my @clean_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./enter/hybrid_entry.mhtml:%		foreach my $event ($tourn->events) { 
./enter/judge_striketime_flip.mhtml:	my $strike_timeslot = Tab::StrikeTimeslot->retrieve($strike_timeslot_id);
./enter/judge_striketime_flip.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_striketime_flip.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_striketime_flip.mhtml:	my $strike =  $strike_timeslot->strike($judge);
./enter/judge_striketime_flip.mhtml:		my $strike = Tab::Strike->create({
./enter/entry_drop.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/entry_drop.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/entry_drop.mhtml:	my $event = $entry->event;
./enter/entry_drop.mhtml:	my $tourn = $event->tourn;
./enter/entry_drop.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./enter/entry_drop.mhtml:	my $freeze_deadline = $tourn->setting("freeze_deadline");
./enter/entry_drop.mhtml:	my $now = DateTime->now;
./enter/entry_drop.mhtml:		my $err = "The online drop deadline for this tournament has passed.  Please contact the tournament directly";
./enter/entry_drop.mhtml:		my $description = $person->first." ".$person->last." dropped ".$entry->event->abbr." entry ".$entry->code." ".$entry->name; 
./enter/entry_drop.mhtml:		my $change = Tab::ChangeLog->create({
./enter/entry_drop.mhtml:	my $stu_count;
./enter/entry_drop.mhtml:	foreach my $student ($entry->students) { 
./enter/entry_drop.mhtml:		foreach my $other ($m->comp("/funclib/student_entries.mas", tourn => $tourn, student => $student)) { 
./enter/entry_drop.mhtml:		foreach my $housing ($student->housing($tourn)) { 
./enter/entry_drop.mhtml:	my $name = $entry->name;
./enter/entry_drop.mhtml:	my $msg = "Entry ".$name." dropped";
./enter/entry_drop.mhtml:		my $drop_reason = "Dropped ". $entry->code ." by ".$person->last; 
./enter/entry_drop.mhtml:				my $fine = Tab::SchoolFine->create({
./enter/entry_drop.mhtml:				my $fine = Tab::SchoolFine->search( school => $entry->school->id, reason => $drop_reason )->first;
./enter/ratings/clone_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/clone_strikes.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/clone_strikes.mhtml:	my $clone = Tab::Entry->retrieve($clone_id) if $clone_id;
./enter/ratings/clone_strikes.mhtml:	my $tourn = $school->tourn;
./enter/ratings/clone_strikes.mhtml:	my $now = DateTime->now;
./enter/ratings/clone_strikes.mhtml:	my $tz = $tourn->tz;
./enter/ratings/clone_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/clone_strikes.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/clone_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/clone_strikes.mhtml:	my @entry_strikes = $m->comp("/funclib/entry_strikes.mas", entry => $entry, category => $category) if $entry;
./enter/ratings/clone_strikes.mhtml:	foreach my $strike (@entry_strikes) { 
./enter/ratings/clone_strikes.mhtml:		my $new_strike = $strike->copy;
./enter/ratings/clone_strikes.mhtml:	my $msg = "Strikes copied to ".$clone->code;
./enter/ratings/tiered_prefs_save.mhtml:	my $now = DateTime->now();
./enter/ratings/tiered_prefs_save.mhtml:	my $err;
./enter/ratings/tiered_prefs_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/tiered_prefs_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/tiered_prefs_save.mhtml:	my $prefs_style = $category->setting("prefs");
./enter/ratings/tiered_prefs_save.mhtml:    my @rating_tiers = Tab::RatingTier->search(  category => $category->id, type => "mpj" );
./enter/ratings/tiered_prefs_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/tiered_prefs_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./enter/ratings/tiered_prefs_save.mhtml:	my %conflicts_by_id = ();
./enter/ratings/tiered_prefs_save.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/tiered_prefs_save.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/tiered_prefs_save.mhtml:    my @judges;
./enter/ratings/tiered_prefs_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/tiered_prefs_save.mhtml:	my %judges_at_tier = ();
./enter/ratings/tiered_prefs_save.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/tiered_prefs_save.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/tiered_prefs_save.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/tiered_prefs_save.mhtml:	my $rounds_per++ if $category->setting("prefs") eq "tiered_round";
./enter/ratings/tiered_prefs_save.mhtml:	my $num_judges;
./enter/ratings/tiered_prefs_save.mhtml:    foreach my $judge (@all_judges) {
./enter/ratings/tiered_prefs_save.mhtml:    my %tier_min = ();
./enter/ratings/tiered_prefs_save.mhtml:	my %tier_name = ();
./enter/ratings/tiered_prefs_save.mhtml:    my %tier_limit = ();
./enter/ratings/tiered_prefs_save.mhtml:	foreach my $tier (@rating_tiers) {
./enter/ratings/tiered_prefs_save.mhtml:    my $cumulate++ if $category->setting("cumulate_mjp");
./enter/ratings/tiered_prefs_save.mhtml:    my %spares_at_tier;
./enter/ratings/tiered_prefs_save.mhtml:		foreach my $tier (@rating_tiers) {
./enter/ratings/tiered_prefs_save.mhtml:	my $spares_available;
./enter/ratings/tiered_prefs_save.mhtml:	my %tier_count;
./enter/ratings/tiered_prefs_save.mhtml:	foreach my $tier (@rating_tiers) { 
./enter/ratings/tiered_prefs_save.mhtml:		my $tier_count;
./enter/ratings/tiered_prefs_save.mhtml:		foreach my $judge (@judges) { 
./enter/ratings/tiered_prefs_save.mhtml:			my $spared;
./enter/ratings/tiered_prefs_save.mhtml:						my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
./enter/ratings/tiered_prefs_save.mhtml:	my $min_spares_available;
./enter/ratings/tiered_prefs_save.mhtml:	foreach my $tier (@rating_tiers) { 
./enter/ratings/tiered_prefs_save.mhtml:		my $diff = $tier_min{$tier->id} - $tier_count{$tier->id};
./enter/ratings/tiered_prefs_save.mhtml:	my $msg = $entry->name."'s prefs saved in ".$category->abbr;
./enter/ratings/entry_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/entry_strikes.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/entry_strikes.mhtml:	my $tourn = $school->tourn;
./enter/ratings/entry_strikes.mhtml:	my $now = DateTime->now;
./enter/ratings/entry_strikes.mhtml:	my $tz = $tourn->tz;
./enter/ratings/entry_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/entry_strikes.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/entry_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/entry_strikes.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/entry_strikes.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/entry_strikes.mhtml:    my %rating_name = (); 
./enter/ratings/entry_strikes.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/entry_strikes.mhtml:    my %rating_by_judge = (); 
./enter/ratings/entry_strikes.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/entry_strikes.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/entry_strikes.mhtml:	my %conflicts_by_id = ();
./enter/ratings/entry_strikes.mhtml:	my @entry_conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry, category => $category, conflicts => 'only') if $entry;
./enter/ratings/entry_strikes.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school, category => $category, conflicts => 'only') if $entry;
./enter/ratings/entry_strikes.mhtml:	my $bank = $category->setting("entry_strikes");
./enter/ratings/entry_strikes.mhtml:	my %strikes_by_id = ();
./enter/ratings/entry_strikes.mhtml:	my @entry_strikes = $m->comp("/funclib/entry_strikes.mas", entry => $entry, category => $category) if $entry;
./enter/ratings/entry_strikes.mhtml:	my %dedupe;
./enter/ratings/entry_strikes.mhtml:	my $switch;
./enter/ratings/entry_strikes.mhtml:    my @school_strikes = $m->comp('/funclib/school_strikes.mas', school => $school, category => $category );
./enter/ratings/entry_strikes.mhtml:    my %school_strikes_by_id = ();
./enter/ratings/entry_strikes.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/entry_strikes.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/entry_strikes.mhtml:%				foreach my $judge (@judges) {
./enter/ratings/entry_strikes.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/entry_strikes.mhtml:%								foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/ratings/ordinals_prefs.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/ordinals_prefs.mhtml:	my $tourn = $school->tourn;
./enter/ratings/ordinals_prefs.mhtml:	my %ratings_by_judge = ();
./enter/ratings/ordinals_prefs.mhtml:	my %conflicts_by_id = ();
./enter/ratings/ordinals_prefs.mhtml:	my @judges;
./enter/ratings/ordinals_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/ordinals_prefs.mhtml:	my $rounds_per = $category->setting("rounds_per");
./enter/ratings/ordinals_prefs.mhtml:	my $no_others++;
./enter/ratings/ordinals_prefs.mhtml:		foreach my $admin ($school->chapter->admins) { 
./enter/ratings/ordinals_prefs.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/ordinals_prefs.mhtml:	my $now = DateTime->now;
./enter/ratings/ordinals_prefs.mhtml:	my $tz = $tourn->tz;
./enter/ratings/ordinals_prefs.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/ordinals_prefs.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/ordinals_prefs.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/ordinals_prefs.mhtml:	my $switch;
./enter/ratings/ordinals_prefs.mhtml:    my %rating_name = (); 
./enter/ratings/ordinals_prefs.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/ordinals_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./enter/ratings/ordinals_prefs.mhtml:    my %coach_rating_by_judge = (); 
./enter/ratings/ordinals_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/ordinals_prefs.mhtml:	my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category);
./enter/ratings/ordinals_prefs.mhtml:	my %freebie = %{$freebieref};
./enter/ratings/ordinals_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/ordinals_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/ordinals_prefs.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_prefs.mhtml:			my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./enter/ratings/ordinals_prefs.mhtml:			my %ordinal_by_judge = ();
./enter/ratings/ordinals_prefs.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", rating_tier => 0);
./enter/ratings/ordinals_prefs.mhtml:			foreach my $rating (@ratings) {
./enter/ratings/ordinals_prefs.mhtml:%				my $total;
./enter/ratings/ordinals_prefs.mhtml:%				foreach my $judge (@judges) { 
./enter/ratings/ordinals_prefs.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/ordinals_prefs.mhtml:%				my $warn = "You are about to WIPE any existing prefs and calculate them based on previous rankings.  OK continues and Cancel goes back";
./enter/ratings/ordinals_prefs.mhtml:%						my @chapters;
./enter/ratings/ordinals_prefs.mhtml:%						my %used;
./enter/ratings/ordinals_prefs.mhtml:%						my $school_year = Tab::school_year->year;
./enter/ratings/ordinals_prefs.mhtml:%						foreach my $student ($entry->students) { 
./enter/ratings/ordinals_prefs.mhtml:%						my %chapter;
./enter/ratings/ordinals_prefs.mhtml:%						foreach my $chapter (@chapters) { 
./enter/ratings/ordinals_prefs.mhtml:%							foreach my $student ($chapter->students(retired => 0)) { 
./enter/ratings/ordinals_prefs.mhtml:%							foreach my $other ($m->comp('/funclib/category_entries.mas', category => $category, school => $school)) { 
./enter/ratings/export_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/export_prefs.mhtml:	my $event = $entry->event;
./enter/ratings/export_prefs.mhtml:	my $category = $event->category;
./enter/ratings/export_prefs.mhtml:	my $tourn = $category->tourn;
./enter/ratings/export_prefs.mhtml:	my $rounds_per = $category->setting("rounds_per");
./enter/ratings/export_prefs.mhtml:	my %ratings_by_judge = ();
./enter/ratings/export_prefs.mhtml:	my %conflicts_by_id = ();
./enter/ratings/export_prefs.mhtml:	my $now = DateTime->now;
./enter/ratings/export_prefs.mhtml:	my $tz = $tourn->tz;
./enter/ratings/export_prefs.mhtml:    my %rating_name = map {$_->id => $_->name} $category->rating_tiers;
./enter/ratings/export_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./enter/ratings/export_prefs.mhtml:    my %coach_rating_by_judge = (); 
./enter/ratings/export_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/export_prefs.mhtml:    my %rating_by_judge = (); 
./enter/ratings/export_prefs.mhtml:	my %percentile_by_judge = ();
./enter/ratings/export_prefs.mhtml:		foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "entry", entry => $entry)) { 
./enter/ratings/export_prefs.mhtml:		my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./enter/ratings/export_prefs.mhtml:		foreach my $rating (@ratings) { 
./enter/ratings/export_prefs.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/export_prefs.mhtml:	my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./enter/ratings/export_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/export_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/export_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/export_prefs.mhtml:	my $filename = "Prefs-".$entry->name."-".Tab::csvdt($now);
./enter/ratings/export_prefs.mhtml:	my $filepath = $Tab::file_root."/tmp/$filename";
./enter/ratings/export_prefs.mhtml:	my $garbage = `rm -f $filepath.*`;
./enter/ratings/export_prefs.mhtml:	foreach my $judge (@judges) { 
./enter/ratings/entry_ratings_save.mhtml:	my $now = DateTime->now();
./enter/ratings/entry_ratings_save.mhtml:	my $err;
./enter/ratings/entry_ratings_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/entry_ratings_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/entry_ratings_save.mhtml:    my @rating_tiers = Tab::RatingTier->search(  category => $category->id, type => "mpj" );
./enter/ratings/entry_ratings_save.mhtml:	my @conflicts = $entry->conflicts; 
./enter/ratings/entry_ratings_save.mhtml:	my %conflicts_by_id = ();
./enter/ratings/entry_ratings_save.mhtml:    my @judges;
./enter/ratings/entry_ratings_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/entry_ratings_save.mhtml:    foreach my $judge (@all_judges) {
./enter/ratings/entry_ratings_save.mhtml:	my $num_judges = scalar @judges;
./enter/ratings/entry_ratings_save.mhtml:    my %rating_limit = ();
./enter/ratings/entry_ratings_save.mhtml:	foreach my $tier (@rating_tiers) {
./enter/ratings/entry_ratings_save.mhtml:	my %judges_at_tier = ();
./enter/ratings/entry_ratings_save.mhtml:	foreach my $judge (@judges) { 
./enter/ratings/entry_ratings_save.mhtml:	my $cumulate++ if $category->setting("cumulate_mjp");
./enter/ratings/entry_ratings_save.mhtml:	my $spares;
./enter/ratings/entry_ratings_save.mhtml:	foreach my $tier (sort {$b->name <=> $a->name} @rating_tiers) {
./enter/ratings/entry_ratings_save.mhtml:	foreach my $judge (@judges) { 
./enter/ratings/entry_ratings_save.mhtml:				my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
./enter/ratings/entry_ratings_save.mhtml:	my $msg = $entry->team_name."'s ratings saved in ".$category->abbr;
./enter/ratings/entry_ratings.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/entry_ratings.mhtml:	my $tourn = $school->tournament;
./enter/ratings/entry_ratings.mhtml:	my @judges;
./enter/ratings/entry_ratings.mhtml:	my %ratings_by_judge = ();
./enter/ratings/entry_ratings.mhtml:	my %conflicts_by_id = ();
./enter/ratings/entry_ratings.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/entry_ratings.mhtml:	my $now = DateTime->now;
./enter/ratings/entry_ratings.mhtml:	my $switch;
./enter/ratings/entry_ratings.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/entry_ratings.mhtml:	my %total_by_qual = ();
./enter/ratings/entry_ratings.mhtml:	my $has_max;
./enter/ratings/entry_ratings.mhtml:	my $has_min;
./enter/ratings/entry_ratings.mhtml:			my @quals = Tab::Qual->search( 	category => $category->id, type => "mpj" );
./enter/ratings/entry_ratings.mhtml:			my %qualname_by_id = ();
./enter/ratings/entry_ratings.mhtml:			my @conflicts = $entry->conflicts;
./enter/ratings/entry_ratings.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry");
./enter/ratings/entry_ratings.mhtml:			foreach my $rating (@ratings) {
./enter/ratings/entry_ratings.mhtml:%				my $total;
./enter/ratings/entry_ratings.mhtml:%				my $ratings;
./enter/ratings/entry_ratings.mhtml:%				foreach my $judge (@judges) { 
./enter/ratings/entry_ratings.mhtml:%							foreach my $qual (@quals) {
./enter/ratings/entry_ratings.mhtml:	        my @ratable_judges;
./enter/ratings/entry_ratings.mhtml:    	    foreach my $judge (@judges) {
./enter/ratings/entry_ratings.mhtml:%				foreach my $qual (sort {$a->name cmp $b->name} Tab::Qual->search( category => $category->id, type => "mpj")) {
./enter/ratings/entry_ratings.mhtml:%								foreach my $other ($entry->school->entries( event => $entry->event->id )) { 
./enter/ratings/entry_strike_switch.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/entry_strike_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/ratings/entry_strike_switch.mhtml:	my $category = $entry->event->category;
./enter/ratings/entry_strike_switch.mhtml:		my $err = "You cannot strike judges outside your judge category.  Quit messing around.";
./enter/ratings/entry_strike_switch.mhtml:    my @strikes = $m->comp('/funclib/entry_strikes.mas', entry => $entry );
./enter/ratings/entry_strike_switch.mhtml:    my %strikes_by_id = ();
./enter/ratings/entry_strike_switch.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/entry_strike_switch.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/entry_strike_switch.mhtml:	my $bank = $category->setting("entry_strikes");
./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You have un-struck ".$judge->first." ".$judge->last;
./enter/ratings/entry_strike_switch.mhtml:		my $strike = Tab::Strike->create({
./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You have struck ".$judge->first." ".$judge->last." like a gong.";
./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You already have reached your strike limit.  Unstrike a judge if you hate that judge sufficiently to strike them";
./enter/ratings/ordinals_auto_pref.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/ordinals_auto_pref.mhtml:	my $tourn = $school->tourn;
./enter/ratings/ordinals_auto_pref.mhtml:	my $tz = $tourn->tz;
./enter/ratings/ordinals_auto_pref.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./enter/ratings/ordinals_auto_pref.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/ordinals_auto_pref.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/ordinals_auto_pref.mhtml:		my $err = "Prefs deadline has passed";
./enter/ratings/ordinals_auto_pref.mhtml:	my %ratings_by_judge = ();
./enter/ratings/ordinals_auto_pref.mhtml:	my %conflicts_by_id = ();
./enter/ratings/ordinals_auto_pref.mhtml:	my @others;
./enter/ratings/ordinals_auto_pref.mhtml:	my @cj_others;
./enter/ratings/ordinals_auto_pref.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/ratings/ordinals_auto_pref.mhtml:		my $ok;
./enter/ratings/ordinals_auto_pref.mhtml:		foreach my $entry_student ($entry->students) { 
./enter/ratings/ordinals_auto_pref.mhtml:			my $err = "Don't try to snoop";
./enter/ratings/ordinals_auto_pref.mhtml:	my %others_by_person = ();
./enter/ratings/ordinals_auto_pref.mhtml:	my %others_by_cj = ();
./enter/ratings/ordinals_auto_pref.mhtml:	my %used;
./enter/ratings/ordinals_auto_pref.mhtml:	foreach my $other (@others) { 
./enter/ratings/ordinals_auto_pref.mhtml:	foreach my $other (@cj_others) { 
./enter/ratings/ordinals_auto_pref.mhtml:	my @judges = $category->judges;
./enter/ratings/ordinals_auto_pref.mhtml:	my $total_rounds;
./enter/ratings/ordinals_auto_pref.mhtml:	my %judge_avg = ();
./enter/ratings/ordinals_auto_pref.mhtml:	foreach my $judge (@judges) { 
./enter/ratings/ordinals_auto_pref.mhtml:		my $count;
./enter/ratings/ordinals_auto_pref.mhtml:		my $total;
./enter/ratings/ordinals_auto_pref.mhtml:			foreach my $other (@{$others_by_cj{$judge->chapter_judge->id}}) { 
./enter/ratings/ordinals_auto_pref.mhtml:			foreach my $other (@{$others_by_person{$judge->person->id}}) { 
./enter/ratings/ordinals_auto_pref.mhtml:		my $avg = $total / $count if $count;
./enter/ratings/ordinals_auto_pref.mhtml:	my $count;
./enter/ratings/ordinals_auto_pref.mhtml:	my $rounds_before;
./enter/ratings/ordinals_auto_pref.mhtml:	foreach my $judge (sort {$judge_avg{$a->id} <=> $judge_avg{$b->id}} @judges) { 
./enter/ratings/ordinals_auto_pref.mhtml:		my $percentile = 0;
./enter/ratings/ordinals_auto_pref.mhtml:	my $msg = "$count judges preffed from previous scores.  Remaining judges unrated.";
./enter/ratings/clone.mhtml:	my $now = DateTime->now;
./enter/ratings/clone.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/clone.mhtml:	my $clone = Tab::Entry->retrieve($clone_id);
./enter/ratings/clone.mhtml:	my @ratings = $clone->ratings;
./enter/ratings/clone.mhtml:	my $count;
./enter/ratings/clone.mhtml:	foreach my $rating (@ratings) {
./enter/ratings/clone.mhtml:		my $new_rating = $rating->copy({
./enter/ratings/clone.mhtml:	my $msg = "$style Cloned $count Ratings from ".$entry->name." to ".$clone->name;
./enter/ratings/clone.mhtml:	my $type = $entry->event->category->setting("prefs");
./enter/ratings/school_strike_switch.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/ratings/school_strike_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/ratings/school_strike_switch.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/school_strike_switch.mhtml:    my @strikes = $m->comp("/funclib/school_strikes.mas", school => $school, category => $category);
./enter/ratings/school_strike_switch.mhtml:    my %strikes_by_id = ();
./enter/ratings/school_strike_switch.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/school_strike_switch.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/school_strike_switch.mhtml:	my $bank = $category->setting("school_strikes");
./enter/ratings/school_strike_switch.mhtml:		my $msg = "You have un-struck ".$judge->first." ".$judge->last;
./enter/ratings/school_strike_switch.mhtml:		my $strike = Tab::Strike->create({
./enter/ratings/school_strike_switch.mhtml:		my $msg = "You have struck ".$judge->first." ".$judge->last;
./enter/ratings/school_strike_switch.mhtml:		my $msg = "You already have reached your strike limit.  Unstrike a judge if you hate that judge sufficiently to strike them";
./enter/ratings/index.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./enter/ratings/index.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/index.mhtml:	my $tourn = $school->tourn;
./enter/ratings/index.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/index.mhtml:	my $now = DateTime->now;
./enter/ratings/index.mhtml:	my $switch;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $tourn = $school->tourn;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my %ratings_by_judge = ();
./enter/ratings/ordinals_prefs_sortable.mhtml:	my %conflicts_by_id = ();
./enter/ratings/ordinals_prefs_sortable.mhtml:	my @judges;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $rounds_per = $category->setting("rounds_per");
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $no_others++;
./enter/ratings/ordinals_prefs_sortable.mhtml:		foreach my $admin ($school->chapter->admins) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $now = DateTime->now;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $tz = $tourn->tz;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $switch;
./enter/ratings/ordinals_prefs_sortable.mhtml:    my %rating_name = (); 
./enter/ratings/ordinals_prefs_sortable.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./enter/ratings/ordinals_prefs_sortable.mhtml:    my %coach_rating_by_judge = (); 
./enter/ratings/ordinals_prefs_sortable.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:		my $msg = "Prefs can no longer be edited; the deadline has passed";
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./enter/ratings/ordinals_prefs_sortable.mhtml:			my %ordinal_by_judge = ();
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry");
./enter/ratings/ordinals_prefs_sortable.mhtml:			foreach my $rating (@ratings) {
./enter/ratings/ordinals_prefs_sortable.mhtml:			my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/ordinals_prefs_sortable.mhtml:			my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/ordinals_prefs_sortable.mhtml:%					foreach my $judge (@judges) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:%				my $warn = "You are about to WIPE any existing prefs and calculate them based on previous rankings.  OK continues and Cancel goes back";
./enter/ratings/ordinals_prefs_sortable.mhtml:%							my @chapters;
./enter/ratings/ordinals_prefs_sortable.mhtml:%							my %used;
./enter/ratings/ordinals_prefs_sortable.mhtml:%							my $school_year = Tab::school_year->year;
./enter/ratings/ordinals_prefs_sortable.mhtml:%							foreach my $student ($entry->students) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:%							my %chapter;
./enter/ratings/ordinals_prefs_sortable.mhtml:%							foreach my $chapter (@chapters) { 
./enter/ratings/ordinals_prefs_sortable.mhtml:%								foreach my $student ($chapter->students(retired => 0)) { 
./enter/ratings/school_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/school_strikes.mhtml:	my $tourn = $school->tourn;
./enter/ratings/school_strikes.mhtml:	my $now = DateTime->now;
./enter/ratings/school_strikes.mhtml:	my $tz = $tourn->tz;
./enter/ratings/school_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/school_strikes.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/school_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/school_strikes.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/school_strikes.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/school_strikes.mhtml:    my %rating_name = (); 
./enter/ratings/school_strikes.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/school_strikes.mhtml:    my %rating_by_judge = (); 
./enter/ratings/school_strikes.mhtml:	    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/school_strikes.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/school_strikes.mhtml:	my %conflicts_by_id = ();
./enter/ratings/school_strikes.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school, category => $category);
./enter/ratings/school_strikes.mhtml:	my $bank = $category->setting("school_strikes");
./enter/ratings/school_strikes.mhtml:	my %strikes_by_id = ();
./enter/ratings/school_strikes.mhtml:	my @school_strikes = $m->comp("/funclib/school_strikes.mas", school => $school, category => $category);
./enter/ratings/school_strikes.mhtml:	my $switch;
./enter/ratings/school_strikes.mhtml:%				foreach my $judge (@judges) {
./enter/ratings/school_strikes.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/school_strikes.mhtml:%								foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/ratings/conflict_switch.mhtml:	my $msg;
./enter/ratings/conflict_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/ratings/conflict_switch.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/ratings/conflict_switch.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/conflict_switch.mhtml:		my $conflict = Tab::Strike->search( type => "conflict", judge => $judge->id,  entry => $entry->id, registrant => 1 )->first;
./enter/ratings/conflict_switch.mhtml:		my $conflict = Tab::Strike->search( type => "conflict", judge => $judge->id, school => $school->id, registrant => 1 )->first;
./enter/ratings/school_ratings.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/school_ratings.mhtml:	my $tourn = $school->tournament;
./enter/ratings/school_ratings.mhtml:	my $now = DateTime->now;
./enter/ratings/school_ratings.mhtml:	my $switch;
./enter/ratings/school_ratings.mhtml:	my %total_by_qual = ();
./enter/ratings/school_ratings.mhtml:	my $has_max;
./enter/ratings/school_ratings.mhtml:	my $has_min;
./enter/ratings/school_ratings.mhtml:		my @quals = Tab::Qual->search( 	category => $category->id, type => "mpj" );
./enter/ratings/school_ratings.mhtml:		my %qualname_by_id = ();
./enter/ratings/school_ratings.mhtml:		my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/school_ratings.mhtml:		my @conflicts = $school->conflicts;
./enter/ratings/school_ratings.mhtml:		my %conflicts_by_id = ();
./enter/ratings/school_ratings.mhtml:		my @ratings = Tab::Rating->search( school => $school->id, type => "school");
./enter/ratings/school_ratings.mhtml:		my %ratings_by_judge = ();
./enter/ratings/school_ratings.mhtml:		foreach my $rating (@ratings) {
./enter/ratings/school_ratings.mhtml:%			my $total;
./enter/ratings/school_ratings.mhtml:%			my $ratings;
./enter/ratings/school_ratings.mhtml:%			foreach my $judge (@judges) { 
./enter/ratings/school_ratings.mhtml:%							foreach my $qual (@quals) {
./enter/ratings/school_ratings.mhtml:		my @ratable_judges;
./enter/ratings/school_ratings.mhtml:		foreach my $judge (@judges) { 
./enter/ratings/school_ratings.mhtml:%			foreach my $qual (sort {$a->name cmp $b->name} Tab::Qual->search( category => $category->id, type => "mpj")) {
./enter/ratings/ordinals_sort_save.mhtml:	my @ordering = split (/&judge\[\]=/, $sortorder);
./enter/ratings/ordinals_sort_save.mhtml:	my %id_order = ();
./enter/ratings/ordinals_sort_save.mhtml:	my $ord = 1;
./enter/ratings/ordinals_sort_save.mhtml:	foreach my $order (@ordering) { 
./enter/ratings/ordinals_sort_save.mhtml:	my $now = DateTime->now();
./enter/ratings/ordinals_sort_save.mhtml:	my $err;
./enter/ratings/ordinals_sort_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/ordinals_sort_save.mhtml:	my $category = $entry->event->category;
./enter/ratings/ordinals_sort_save.mhtml:	my $tourn = $category->tourn;
./enter/ratings/ordinals_sort_save.mhtml:	my $ignore_conflicts++ if $category->setting("conflict_denominator");
./enter/ratings/ordinals_sort_save.mhtml:	my $round_burden++ if $category->setting("rounds_per");
./enter/ratings/ordinals_sort_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_sort_save.mhtml:	my %conflicts_by_id = ();
./enter/ratings/ordinals_sort_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", 
./enter/ratings/ordinals_sort_save.mhtml:	my %school_conflicts_by_id = ();
./enter/ratings/ordinals_sort_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/ordinals_sort_save.mhtml:	my %rating_by_judge = ();
./enter/ratings/ordinals_sort_save.mhtml:	my %ordinal_by_judge = ();
./enter/ratings/ordinals_sort_save.mhtml:	my %judges_at_rating = ();
./enter/ratings/ordinals_sort_save.mhtml:	my $total_rounds;
./enter/ratings/ordinals_sort_save.mhtml:	my $count = 1;
./enter/ratings/ordinals_sort_save.mhtml:    foreach my $judge (@all_judges) {
./enter/ratings/ordinals_sort_save.mhtml:		my $rating = Tab::Rating->create({
./enter/ratings/ordinals_sort_save.mhtml:	my $rounds_before;
./enter/ratings/ordinals_sort_save.mhtml:	foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {
./enter/ratings/ordinals_sort_save.mhtml:		foreach my $judge (@{$judges_at_rating{$ordinal}}) { 
./enter/ratings/ordinals_sort_save.mhtml:			my $percentile = ( ($rounds_before + 1) / $total_rounds) * 100;
./enter/ratings/ordinals_sort_save.mhtml:			my $rating = $rating_by_judge{$judge->id};
./enter/ratings/ordinals_sort_save.mhtml:	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
./enter/ratings/conflicts.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/conflicts.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/conflicts.mhtml:	my $tourn = $category->tourn;
./enter/ratings/conflicts.mhtml:	my $tz = $tourn->tz;
./enter/ratings/conflicts.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/conflicts.mhtml:	my $now = DateTime->now;
./enter/ratings/conflicts.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/conflicts.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/conflicts.mhtml:	my %conflicts_by_id = ();
./enter/ratings/conflicts.mhtml:	my %school_conflicts_by_id = ();
./enter/ratings/conflicts.mhtml:		my @conflicts = $entry->strikes( type => "conflict", registrant => 1);
./enter/ratings/conflicts.mhtml:		my @school_conflicts = Tab::Strike->search( school => $entry->school->id, type => "conflict", registrant => 1);
./enter/ratings/conflicts.mhtml:		my @school_conflicts = Tab::Strike->search( school => $school->id, type => "conflict", registrant => 1);
./enter/ratings/conflicts.mhtml:	my @judges = sort {$a->last cmp $b->last} $category->judges(active => 1);
./enter/ratings/conflicts.mhtml:	my $switch;
./enter/ratings/conflicts.mhtml:%		my $whoami = "conflicts";
./enter/ratings/conflicts.mhtml:%			foreach my $judge (@judges) {
./enter/ratings/ordinals_prefs_save.mhtml:	my $now = DateTime->now();
./enter/ratings/ordinals_prefs_save.mhtml:	my $err;
./enter/ratings/ordinals_prefs_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/ratings/ordinals_prefs_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/ordinals_prefs_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/ordinals_prefs_save.mhtml:	my %conflicts_by_id = ();
./enter/ratings/ordinals_prefs_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school, category => $category);
./enter/ratings/ordinals_prefs_save.mhtml:	my %school_conflicts_by_id = ();
./enter/ratings/ordinals_prefs_save.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/ordinals_prefs_save.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/ordinals_prefs_save.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/ordinals_prefs_save.mhtml:    my @judges;
./enter/ratings/ordinals_prefs_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./enter/ratings/ordinals_prefs_save.mhtml:	my %rating_by_judge = ();
./enter/ratings/ordinals_prefs_save.mhtml:	my %ordinal_by_judge = ();
./enter/ratings/ordinals_prefs_save.mhtml:	my %judges_at_rating = ();
./enter/ratings/ordinals_prefs_save.mhtml:	my $total_rounds;
./enter/ratings/ordinals_prefs_save.mhtml:	my $ignore_conflicts++ if $category->setting("conflict_denominator");
./enter/ratings/ordinals_prefs_save.mhtml:    foreach my $judge (@all_judges) {
./enter/ratings/ordinals_prefs_save.mhtml:		my $rating = Tab::Rating->create({
./enter/ratings/ordinals_prefs_save.mhtml:	my $rounds_before;
./enter/ratings/ordinals_prefs_save.mhtml:	my $count;
./enter/ratings/ordinals_prefs_save.mhtml:	foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {
./enter/ratings/ordinals_prefs_save.mhtml:		my $rounds_add;
./enter/ratings/ordinals_prefs_save.mhtml:		my $judge_count;
./enter/ratings/ordinals_prefs_save.mhtml:		foreach my $judge (@{$judges_at_rating{$ordinal}}) { 
./enter/ratings/ordinals_prefs_save.mhtml:			my $percentile = ( ($rounds_before + 1) / $total_rounds) * 100;
./enter/ratings/ordinals_prefs_save.mhtml:			my $rating = $rating_by_judge{$judge->id};
./enter/ratings/ordinals_prefs_save.mhtml:	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
./enter/ratings/tiered_prefs.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/ratings/tiered_prefs.mhtml:	my $tourn = $school->tourn;
./enter/ratings/tiered_prefs.mhtml:	my %ratings_by_judge = ();
./enter/ratings/tiered_prefs.mhtml:	my %conflicts_by_id = ();
./enter/ratings/tiered_prefs.mhtml:	my $pref_style = $category->setting("prefs");
./enter/ratings/tiered_prefs.mhtml:	my $tz = $tourn->tz;
./enter/ratings/tiered_prefs.mhtml:	my $strike_end = $category->setting("strike_end");
./enter/ratings/tiered_prefs.mhtml:	my $now = DateTime->now;
./enter/ratings/tiered_prefs.mhtml:	my $read_only++ if $strike_end < $now;
./enter/ratings/tiered_prefs.mhtml:	my $strike_start = $category->setting("strike_start");
./enter/ratings/tiered_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/tiered_prefs.mhtml:	my $switch;
./enter/ratings/tiered_prefs.mhtml:	my %total_by_tier = ();
./enter/ratings/tiered_prefs.mhtml:    my %rating_name = (); 
./enter/ratings/tiered_prefs.mhtml:    foreach my $tier ($category->rating_tiers) { 
./enter/ratings/tiered_prefs.mhtml:    my %coach_rating_by_judge = (); 
./enter/ratings/tiered_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./enter/ratings/tiered_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./enter/ratings/tiered_prefs.mhtml:	my $has_max;
./enter/ratings/tiered_prefs.mhtml:	my $has_min;
./enter/ratings/tiered_prefs.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./enter/ratings/tiered_prefs.mhtml:    my %freebie = %{$freebieref}; 
./enter/ratings/tiered_prefs.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./enter/ratings/tiered_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./enter/ratings/tiered_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./enter/ratings/tiered_prefs.mhtml:	my $rounds_per++ if $category->setting("prefs") eq "tiered_round";
./enter/ratings/tiered_prefs.mhtml:			my @tiers = Tab::RatingTier->search( 	category => $category->id, type => "mpj" );
./enter/ratings/tiered_prefs.mhtml:			my %tiername_by_id = ();
./enter/ratings/tiered_prefs.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./enter/ratings/tiered_prefs.mhtml:			my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./enter/ratings/tiered_prefs.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./enter/ratings/tiered_prefs.mhtml:			foreach my $rating (@ratings) {
./enter/ratings/tiered_prefs.mhtml:			my %ordinal_by_judge = ();
./enter/ratings/tiered_prefs.mhtml:            my @ordinals = Tab::Rating->search( entry => $entry->id, type => "entry", rating_tier => 0); 
./enter/ratings/tiered_prefs.mhtml:            foreach my $ordinal (@ordinals) {
./enter/ratings/tiered_prefs.mhtml:%				my $total;
./enter/ratings/tiered_prefs.mhtml:%				my $ratings;
./enter/ratings/tiered_prefs.mhtml:%				foreach my $judge (@judges) { 
./enter/ratings/tiered_prefs.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./enter/ratings/tiered_prefs.mhtml:%								my $last_name = $judge->last;
./enter/ratings/tiered_prefs.mhtml:%								my $first_name = $judge->first;
./enter/ratings/tiered_prefs.mhtml:%								my $last_name = $judge->last;
./enter/ratings/tiered_prefs.mhtml:%								my $first_name = $judge->first;
./enter/ratings/tiered_prefs.mhtml:%								foreach my $tier (@tiers) {
./enter/ratings/tiered_prefs.mhtml:%								foreach my $tier (@tiers) {
./enter/ratings/tiered_prefs.mhtml:%								my $tier_val = ceil(410 / (scalar @tiers + 1));
./enter/ratings/tiered_prefs.mhtml:%								foreach my $tier (@tiers) {
./enter/ratings/tiered_prefs.mhtml:	        my $ratable_judges;
./enter/ratings/tiered_prefs.mhtml:    	    foreach my $judge (@judges) {
./enter/ratings/tiered_prefs.mhtml:%				foreach my $tier (sort {$a->name cmp $b->name} Tab::RatingTier->search( category => $category->id, type => "mpj")) {
./enter/ratings/tiered_prefs.mhtml:%			my @others = $m->comp("/funclib/school_entry_by_category.mas", category => $entry->event->category, school => $school);
./enter/ratings/tiered_prefs.mhtml:%						foreach my $other (sort {$a->name cmp $b->name} @others) { 
./enter/ratings/tiered_prefs.mhtml:%		my $whoami = "entry_ratings";
./enter/ratings/school_ratings_save.mhtml:	my $now = DateTime->now();
./enter/ratings/school_ratings_save.mhtml:	my $err;
./enter/ratings/school_ratings_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/ratings/school_ratings_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/ratings/school_ratings_save.mhtml:	my @all_judges = Tab::Judge->search( category => $category_id, active => 1 );
./enter/ratings/school_ratings_save.mhtml:    my @quals = Tab::Qual->search(  category => $category->id, type => "mpj" );
./enter/ratings/school_ratings_save.mhtml:	my @conflicts = $school->conflicts;
./enter/ratings/school_ratings_save.mhtml:	my %conflicts_by_id = ();
./enter/ratings/school_ratings_save.mhtml:	my @judges;
./enter/ratings/school_ratings_save.mhtml:	foreach my $judge (@all_judges) { 
./enter/ratings/school_ratings_save.mhtml:	my $judge_jpool = scalar @judges;
./enter/ratings/school_ratings_save.mhtml:	my %qual_limit = ();
./enter/ratings/school_ratings_save.mhtml:	foreach my $qual (@quals) {
./enter/ratings/school_ratings_save.mhtml:	my %judges_at_qual = ();
./enter/ratings/school_ratings_save.mhtml:	foreach my $judge (@judges) { 
./enter/ratings/school_ratings_save.mhtml:			my $qual = Tab::Qual->retrieve($ARGS{$judge->id});
./enter/ratings/school_ratings_save.mhtml:	my $msg = "School ratings saved in ".$category->abbr;
./enter/ratings/menu.mas:	my $tourn = $school->tourn;
./enter/ratings/menu.mas:	my $tz = $tourn->tz;
./enter/ratings/menu.mas:	my $now = DateTime->now(time_zone => $tz);
./enter/ratings/menu.mas:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/ratings/menu.mas:	my $no_others;
./enter/ratings/menu.mas:	my $ok;
./enter/ratings/menu.mas:		foreach my $admin ($school->chapter->admins) { 
./enter/ratings/menu.mas:				foreach my $student ($entry->students) { 
./enter/ratings/menu.mas:		my $err = "You are not authorized to edit that pref sheet.";
./enter/ratings/menu.mas:	my @pref_categories;
./enter/ratings/menu.mas:	my %pref_style;
./enter/ratings/menu.mas:	my %conflicts;
./enter/ratings/menu.mas:	my %school_strikes;
./enter/ratings/menu.mas:	my %entry_strikes;
./enter/ratings/menu.mas:	my %category_entries;
./enter/ratings/menu.mas:	foreach my $other_category (sort {$a->name cmp $b->name} $school->tourn->categories) {
./enter/ratings/menu.mas:	my $category = $pref_categories[0] if @pref_categories;
./enter/ratings/menu.mas:%	foreach my $category (@pref_categories) { 
./enter/ratings/menu.mas:%			my ($uncovered, $overage) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category);
./enter/ratings/menu.mas:%  		 		foreach my $entr (@{$category_entries{$category}}) { 
./enter/ratings/menu.mas:%  			   	foreach my $entr (@{$category_entries{$category}}) { 
./enter/ratings/menu.mas:% 		 			   	foreach my $entr (@{$category_entries{$category}}) { 
./enter/ratings/menu.mas:%				my $pref_name = "Prefs";
./enter/ratings/menu.mas:% 	         		foreach my $entry (@{$category_entries{$category}}) {
./enter/ratings/menu.mas:%						my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./enter/ratings/menu.mas:% 	         		foreach my $entry (@{$category_entries{$category}}) {
./enter/ratings/menu.mas:% 	         		foreach my $entry (@{$category_entries{$category}}) {
./enter/ratings/menu.mas:%						my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./enter/ratings/menu.mas:%				foreach my $other_category (@pref_categories) { 
./enter/create.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./enter/create.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./enter/create.mhtml:	my ($existing_school) = $chapter->schools( tourn => $tourn->id);
./enter/create.mhtml:	my $now = DateTime->now();
./enter/create.mhtml:	my ($school_code, $school_region) = $m->comp("/funclib/chapter_code.mas", tourn => $tourn, chapter => $chapter);
./enter/create.mhtml:	my $school = Tab::School->create({
./enter/create.mhtml:		my $description = "School registered by ".$person->first." ".$person->last;
./enter/create.mhtml:		my $change = Tab::ChangeLog->create({
./enter/create.mhtml:	foreach my $fine ($tourn->tourn_fees) {
./enter/create.mhtml:		my $fee = Tab::SchoolFine->create({
./enter/onsite_confirm.mhtml:	my $tourn = $school->tourn;
./enter/onsite_confirm.mhtml:	my $tz = $tourn->tz;
./enter/onsite_confirm.mhtml:    my $now = DateTime->now(time_zone => $tz);
./enter/onsite_confirm.mhtml:	my $adult;
./enter/onsite_confirm.mhtml:	my $payup++ if $tourn->setting("onsite_only_paid");
./enter/onsite_confirm.mhtml:	my $deadbeat;  #hasn't paid.
./enter/onsite_confirm.mhtml:		my ($fee, $feline_ref, $total_ref) = $m->comp("/funclib/school_fees.mas", school_id => $school->id, all => 1);
./enter/onsite_confirm.mhtml:			my $symbol = $tourn->setting('currency');
./enter/onsite_confirm.mhtml:		my $err = "You may not register online without the name and contact info of a responsible adult listed";
./enter/onsite_confirm.mhtml:		my $err = "You may not register online due to your outstanding balance of $deadbeat";
./enter/onsite_confirm.mhtml:	my $msg = "You have confirmed your registration.  Thank you!  You're awesome!";
./enter/hire_exchange.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/hire_exchange.mhtml:	my @judges = $m->comp("/funclib/exchange_judges.mas", category => $category);
./enter/hire_exchange.mhtml:	my @hires = $school->hires;
./enter/hire_exchange.mhtml:%			foreach my $judge (@judges) { 
./enter/hire_exchange.mhtml:%				foreach my $hire (@hires) { 
./enter/entry_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/entry_print.mhtml:	my $tourn = $school->tourn;
./enter/entry_print.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./enter/entry_print.mhtml:	my $filename = "registration-".$school_id."-".$session->id;
./enter/entry_print.mhtml:	my $filepath = $Tab::file_root."tmp/".$filename;
./enter/entry_print.mhtml:	my $now = DateTime->now;	
./enter/housing_revoke.mhtml:	my $housing = Tab::Housing->retrieve($housing_id);
./enter/housing_revoke.mhtml:	my $err = "That request did not exist";
./enter/housing_revoke.mhtml:	my $tourn = $housing->tourn;
./enter/housing_revoke.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_revoke.mhtml:	my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $housing->night);
./enter/housing_revoke.mhtml:	my $num_slots = $slots[0]->slots;
./enter/housing_revoke.mhtml:	my @requests = Tab::Housing->search( tourn => $tourn->id, night => $housing->night);
./enter/housing_revoke.mhtml:			my $old = $housing->student if $housing->student && $housing->student->id;
./enter/housing_revoke.mhtml:			my $description = $person->first." ".$person->last." Cancelled housing request for ".$old->first." ".$old->last;
./enter/housing_revoke.mhtml:			my $change = Tab::ChangeLog->create({
./enter/housing_revoke.mhtml:		my $msg = "Housing deleted";
./enter/tba_assign.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/tba_assign.mhtml:	my $event = $entry->event;
./enter/tba_assign.mhtml:	my $tourn = $event->tourn;
./enter/tba_assign.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/tba_assign.mhtml:	my $max = $event->setting("max_entry");
./enter/tba_assign.mhtml:	my $min = $event->setting("min_entry");
./enter/tba_assign.mhtml:	my $code_style = $event->setting("code_style");
./enter/tba_assign.mhtml:	my $switch;
./enter/tba_assign.mhtml:%		foreach my $count (1 .. $max) { 
./enter/tba_assign.mhtml:%						foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $school )) {
./enter/team_members.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/team_members.mhtml:	my @clean_students = $m->comp("/funclib/students_evententer.mas", 
./enter/team_members.mhtml:%			my $switch;
./enter/team_members.mhtml:%			foreach my $member ($entry->members) { 
./enter/team_members.mhtml:%			foreach my $student (@clean_students) { 
./enter/school_unfollow.mhtml:	my $follower = Tab::Follower->retrieve($follower_id);
./enter/school_unfollow.mhtml:		my $school_id = $follower->school->id;
./enter/school_unfollow.mhtml:		my $msg = "Follower deleted";
./enter/school_follow.mhtml:	my $person = Tab::Person->search( email => $email )->first if $email;
./enter/school_follow.mhtml:	my $msg;
./enter/school_follow.mhtml:		my $already = Tab::Follower->search( type => "school", school => $school_id, follower => $person->id )->first;
./enter/rounds_save.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./enter/rounds_save.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./enter/rounds_save.mhtml:	my $err;
./enter/rounds_save.mhtml:	my $max_rounds = $category->setting("max_rounds");
./enter/rounds_save.mhtml:	foreach my $judge (Tab::Judge->search( category => $category->id, school => $school->id )) { 
./enter/rounds_save.mhtml:		my $rounds = $ARGS{$judge->id};
./enter/rounds_save.mhtml:	my $msg .= "Judge obligations saved";
./enter/export_csv.mhtml:	my $tz = $tourn->tz;
./enter/export_csv.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./enter/export_csv.mhtml:	my $filename = "Registration-".$tourn->name."-".Tab::csvdt($now);
./enter/export_csv.mhtml:	my $filepath = $Tab::file_root."/tmp/$filename";
./enter/export_csv.mhtml:	my $garbage = `rm -f $filepath.*`;
./enter/export_csv.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./enter/export_csv.mhtml:	my @entries = sort {$a->name cmp $b->name} $school->entries;
./enter/export_csv.mhtml:	foreach my $entry (@entries) { 
./enter/export_csv.mhtml:		my $registered_by = Tab::Person->retrieve($entry->setting("registered_by")) if $entry->setting('registered_by');
./enter/export_csv.mhtml:		foreach my $student ($entry->students) { 
./enter/export_csv.mhtml:	my @judges = sort {$a->last cmp $b->last} $school->judges;
./enter/export_csv.mhtml:	foreach my $judge (@judges) { 
./enter/export_csv.mhtml:		foreach my $jpool ($judge->jpools) { 
./enter/hire_confirm.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/hire_confirm.mhtml:	my $hire_offer = $judge->setting("hire_offer");
./enter/hire_confirm.mhtml:	my $max = $hire_offer - $judge->hired;
./enter/hire_confirm.mhtml:	my $err;
./enter/hire_confirm.mhtml:	my $hired = $judge->hired + $rounds;
./enter/hire_confirm.mhtml:	my $now = DateTime->now;
./enter/hire_confirm.mhtml:	my $recipient = $judge->person;
./enter/hire_confirm.mhtml:	my $subject = "Your judge hire offer was accepted";
./enter/hire_confirm.mhtml:	my $school_name = $school->name;
./enter/hire_confirm.mhtml:	my $tourn_name = $school->tourn->name;
./enter/hire_confirm.mhtml:	my $body = "
./enter/hire_cancel.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/hire_cancel.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./enter/hire_cancel.mhtml:	my $judge = $hire->judge;
./enter/hire_cancel.mhtml:	my $hired = $judge->hired - $hire->rounds;
./enter/hire_cancel.mhtml:	my $description = "Account ".$person->email." deleted a judge exchange hire arrangement with ".$judge->first." ".$judge->last;
./enter/hire_cancel.mhtml:	my $hire_school = $hire->school->id if $hire->school;
./enter/hire_cancel.mhtml:	my $subject = $person->first." ".$person->last." rescinded your hire";
./enter/hire_cancel.mhtml:	my $body = "
./enter/autohandler:	my $school = Tab::School->retrieve($school_id) if $school_id;
./enter/autohandler:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./enter/autohandler:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./enter/autohandler:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./enter/autohandler:	my @permissions = Tab::Permission->search(chapter => $school->chapter->id, person => $person->id );
./enter/autohandler:	my %perms = map {$_->tag => $_} @permissions;
./enter/autohandler:		my $yay;
./enter/autohandler:		foreach my $student ($entry->students) { 
./enter/tba_assign_save.mhtml:	my $now = DateTime->now;
./enter/tba_assign_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/tba_assign_save.mhtml:	my $school = $entry->school;
./enter/tba_assign_save.mhtml:	my $event = $entry->event;
./enter/tba_assign_save.mhtml:	my $tourn = $event->tourn;
./enter/tba_assign_save.mhtml:	my $min = $event->setting("min_entry");
./enter/tba_assign_save.mhtml:	my $max = $event->setting("max_entry");
./enter/tba_assign_save.mhtml:	my $codes = $event->setting("code_style");
./enter/tba_assign_save.mhtml:	my $err;
./enter/tba_assign_save.mhtml:	my %used_student = ();
./enter/tba_assign_save.mhtml:	my @students;
./enter/tba_assign_save.mhtml:	foreach my $step (1 .. $max) { 
./enter/tba_assign_save.mhtml:		my $student = Tab::Student->retrieve($ARGS{"student_".$step}) if $ARGS{"student_".$step};
./enter/tba_assign_save.mhtml:		my $already = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
./enter/tba_assign_save.mhtml:	my $name = $students[0]->first." ".$students[0]->last if scalar @students == 1;
./enter/tba_assign_save.mhtml:		foreach my $student (@students) { 
./enter/tba_assign_save.mhtml:	my $code = $m->comp("/funclib/entry_code.mas", entry => $entry);
./enter/tba_assign_save.mhtml:	my $msg = "Entry ".$entry->name." assigned to a TBA slot.  Code is $code";
./enter/sex_change.mhtml:		my $err = "You must specify a gender for the student before you can request housing";
./enter/sex_change.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/details.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details.mhtml:	my $event = $entry->event;
./enter/details.mhtml:	my $tourn = $event->tourn;
./enter/details.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/details.mhtml:	my $max = $event->setting("max_entry");
./enter/details.mhtml:	my $min = $event->setting("min_entry");
./enter/details.mhtml:	my $code_style = $event->setting("code_style");
./enter/details.mhtml:%			my @students = $entry->students;
./enter/details.mhtml:%			foreach my $count (1 .. $max) { 
./enter/details.mhtml:%				my $student = shift @students if @students;
./enter/details.mhtml:%				my $hybrid = Tab::School->search( chapter => $student->chapter->id, tourn => $tourn->id )->first
./enter/details.mhtml:%								foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $hybrid )) {
./enter/details.mhtml:%								foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $school )) {
./enter/details.mhtml:%		my $quals = $event->setting('ask_quals'); 
./enter/details.mhtml:%		my $required = $quals;
./enter/details.mhtml:%			my @qualifiers = $entry->qualifiers;
./enter/details.mhtml:%			foreach my $tick (1 .. $quals) { 
./enter/details.mhtml:%				my $qual = shift @qualifiers if @qualifiers;
./enter/onsite.mhtml:	my $tourn = $school->tourn;
./enter/onsite.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./enter/onsite.mhtml:	my $tz = $tourn->tz;
./enter/onsite.mhtml:    my $now = DateTime->now(time_zone => $tz);
./enter/onsite.mhtml:	my $switch;
./enter/onsite.mhtml:	my $adult;
./enter/onsite.mhtml:	my $payup++ if $tourn->setting("onsite_only_paid");
./enter/onsite.mhtml:	my $fee;
./enter/onsite.mhtml:	my $feline_ref;
./enter/onsite.mhtml:	my $total_ref;
./enter/onsite.mhtml:			my $symbol = $tourn->setting('currency');
./enter/onsite.mhtml:%					my $regged = Tab::Person->retrieve($school->setting("registered_by"));
./enter/onsite.mhtml:%				my $registered_on = $school->setting("registered_on");
./enter/onsite.mhtml:				my $drop_deadline = $tourn->setting("drop_deadline");
./enter/onsite.mhtml:				my $judge_deadline = $tourn->setting("judge_deadline");
./enter/onsite.mhtml:				my @already_entered = Tab::Entry->search( 
./enter/onsite.mhtml:				my @hybrides = $m->comp("/funclib/school_hybrids.mas", school => $school);
./enter/onsite.mhtml:				my $hybrids++ if @hybrides;
./enter/onsite.mhtml:				my %seen = (); 
./enter/onsite.mhtml:%						my $count;
./enter/onsite.mhtml:%		 				foreach my $already (@already_entered) { 
./enter/onsite.mhtml:%							my $other;
./enter/onsite.mhtml:%								foreach my $student ($already->students) { 
./enter/onsite.mhtml:%										my $warn = "Are you sure you want to drop that judge?";
./enter/onsite.mhtml:%		 				} #end of foreach my already
./enter/onsite.mhtml:%					foreach my $judge ($school->judges) { 
./enter/onsite.mhtml:%		 			          	foreach my $strike (sort {$a->type cmp $b->type} $judge->strikes) { 
./enter/onsite.mhtml:%									my $warn = "Are you sure you want to drop that entry?";
./enter/judge_details.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_details.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_details.mhtml:	my $category = $judge->category;
./enter/judge_details.mhtml:	my $tourn = $category->tourn;
./enter/judge_details.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./enter/judge_details.mhtml:%		my %strike_by_event = ();
./enter/judge_details.mhtml:%					foreach my $subset ($category->rating_subsets) { 
./enter/judge_details.mhtml:%						my $rating = $judge->ratings( rating_subset => $subset->id )->first;
./enter/judge_details.mhtml:%						my $tier = $rating->rating_tier if $rating;
./enter/judge_details.mhtml:%									my $notfirst;
./enter/judge_details.mhtml:%									foreach my $event ($subset->events) { 
./enter/judge_details.mhtml:%						foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "coach")) {
./enter/judge_details.mhtml:%					my $rating = $judge->ratings->first;
./enter/judge_details.mhtml:%					my $judge_tier = $rating->rating_tier if $rating;
./enter/judge_details.mhtml:%					foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "coach")) {
./enter/judge_details.mhtml:%						foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) { 
./enter/judge_details.mhtml:%		foreach my $strike (Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 )) { 
./enter/judge_details.mhtml:%		my @selfstrike = $m->comp("/funclib/event_selfstrike.mas", category => $category);
./enter/judge_details.mhtml:%			foreach my $event ($m->comp("/funclib/event_selfstrike.mas", category => $category)) { 
./enter/judges.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judges.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/judges.mhtml:	my $tourn = $school->tourn;
./enter/judges.mhtml:	my @categories = $tourn->categories;
./enter/judges.mhtml:	my @events = $category->events if $category;
./enter/judges.mhtml:	my $err;
./enter/judges.mhtml:	my $tz = $person->tz;
./enter/judges.mhtml:	my $now = DateTime->now( time_zone => $tz);
./enter/judges.mhtml:	my $judge_deadline = $tourn->setting("judge_deadline");
./enter/judges.mhtml:	my $judge_per = $category->setting("judge_per") if $category;
./enter/judges.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./enter/judges.mhtml:	my $frees_no = $category->setting("free_strikes_dont_count") if $category;
./enter/judges.mhtml:	my $total_rounds;
./enter/judges.mhtml:	my @requests = Tab::JudgeHire->search( school => $school->id, category => $category->id ) if $category_id;
./enter/judges.mhtml:	my $deadline;
./enter/judges.mhtml:	my %used_judge = ();
./enter/judges.mhtml:%			my $category_deadline = $category->setting("deadline");
./enter/judges.mhtml:%           my ($unc, $over) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category);
./enter/judges.mhtml:%				my $first_free = 1;
./enter/judges.mhtml:%				foreach my $judge ($m->comp("/funclib/judgemath/judges_by_category.mas", school => $school, category => $category)) {
./enter/judges.mhtml:%					my @strikes = Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 );
./enter/judges.mhtml:%									foreach my $strike (@strikes) { 
./enter/judges.mhtml:%							my $strike_timeslotend;
./enter/judges.mhtml:%									foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/judges.mhtml:%				foreach my $request (@requests) { 
./enter/judges.mhtml:%				my @judges = $m->comp("/funclib/exchange_judges.mas", category => $category);
./enter/judges.mhtml:%						foreach my $request (@requests) { 
./enter/judges.mhtml:%								my $warn = "This will reduce your judging request by 1.  Are you sure?";
./enter/judges.mhtml:%       			my $hires_requested;
./enter/judges.mhtml:%       			my $hires_accepted;
./enter/judges.mhtml:%					foreach my $request (@requests) { 
./enter/judges.mhtml:%					foreach my $request (@requests) { 
./enter/judges.mhtml:%							my $warn = "This will reduce your judging request by 1.  Are you sure?";
./enter/judges.mhtml:%					my @requests = Tab::JudgeHire->search( school => $school->id, category => $category->id );
./enter/judges.mhtml:%       			my $hires_requested;
./enter/judges.mhtml:%       			my $hires_accepted;
./enter/judges.mhtml:%					foreach my $request (@requests) { 
./enter/judges.mhtml:%					foreach my $request (@requests) { 
./enter/judges.mhtml:%							my $warn = "This will reduce your judging request by 1 round.  Are you sure?";
./enter/judges.mhtml:%				my $category_deadline = $category->setting("deadline");
./enter/judges.mhtml:%					my @chapter_judges = $m->comp("/funclib/chapter_judges_free.mas", school => $school);
./enter/judges.mhtml:%				    my $now = DateTime->now;
./enter/judges.mhtml:%								foreach my $chapter_judge (sort {$a->last cmp $b->last} @chapter_judges) { 
./enter/judges.mhtml:%			foreach my $category (sort {$a->name cmp $b->name} @categories) {
./enter/judges.mhtml:%				my $category_deadline = $category->setting("deadline");
./enter/judges.mhtml:%				my $no_free = $category->setting("free_strikes_dont_count");
./enter/judges.mhtml:%				my ($unc, $over) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category); 
./enter/judges.mhtml:%				my @category_judges = $m->comp("/funclib/judgemath/judges_by_category.mas", school => $school, category => $category);
./enter/judges.mhtml:%				my $obligation = $m->comp("/funclib/judgemath/judges_needed_by_category.mas", school => $school, category => $category);
./enter/judges.mhtml:%				my $rounds;
./enter/judges.mhtml:%					foreach my $judge (@category_judges) { 
./enter/judge_drop.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_drop.mhtml:		my $err = "That judge could not be found.  Did you already delete him/her?";
./enter/judge_drop.mhtml:	my $tourn = $judge->category->tourn;
./enter/judge_drop.mhtml:	my $chapter = $school->chapter;
./enter/judge_drop.mhtml:	my $category = $judge->category;
./enter/judge_drop.mhtml:	my $err = $person->first." ".$person->last." dropped judge ".$judge->first." ".$judge->last." in ".$category->name;
./enter/judge_drop.mhtml:    my @requests = Tab::Housing->search( tourn => $tourn->id, judge => $judge->id);
./enter/judge_drop.mhtml:	foreach my $request (@requests) { 
./enter/judge_drop.mhtml:		my $change = Tab::ChangeLog->create({
./enter/judge_drop.mhtml:	my $chapter_id = $chapter->id;
./enter/judge_drop.mhtml:	my $tourn_id = $tourn->id;
./enter/judge_person_link.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_person_link.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/judge_person_link.mhtml:	my $judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./enter/judge_person_link.mhtml:		my $login = Tab::Login->search( username => $email)->first;
./enter/judge_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./enter/judge_save.mhtml:		my $err = "You do not have an active school entry.  Please choose a chapter and then your tournament at left";
./enter/judge_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_save.mhtml:		my $err = "You did not select a judge from the list.  Please try again";
./enter/judge_save.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./enter/judge_save.mhtml:	my $tourn = $school->tourn;
./enter/judge_save.mhtml:	my $tz = $person->tz;
./enter/judge_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./enter/judge_save.mhtml:	my $person_id = $chapter_judge->person->id if $chapter_judge->person;
./enter/judge_save.mhtml:	my $code;
./enter/judge_save.mhtml:	my $obligation = 0;
./enter/judge_save.mhtml:	my $acct_id = 0;
./enter/judge_save.mhtml:	my $judge = Tab::Judge->create({
./enter/judge_save.mhtml:		my $description = $person->first." ".$person->last." entered ".$category->abbr." judge $judge->code (".$judge->first." ".$judge->last.")";
./enter/judge_save.mhtml:		my $change = Tab::ChangeLog->create({
./enter/team_members_save.mhtml:		my $err = "You must choose a student to save as part of that team";
./enter/team_members_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/team_members_save.mhtml:	my $student = Tab::Student->retrieve($student_id);
./enter/team_members_save.mhtml:	my $team_member = Tab::EntryStudent->create({ 
./enter/team_members_save.mhtml:	my $msg .= $student->first." ".$student->last." has been added to ".$entry->name.", ";
./enter/team_members_save.mhtml:	my $event_id = $entry->event->id;
./enter/housing_transfer.mhtml:	my $housing = Tab::Housing->retrieve($housing_id);
./enter/housing_transfer.mhtml:	my $tourn = $housing->tourn;
./enter/housing_transfer.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/housing_transfer.mhtml:	my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn, add_one => "aye");
./enter/housing_transfer.mhtml:	my $old = $housing->student if ($housing->student && $housing->student->id);
./enter/housing_transfer.mhtml:		my @tbas = Tab::Housing->search( tba => 1, school => $school_id, night => $housing->night );
./enter/housing_transfer.mhtml:		my $event = Tab::Event->retrieve($event_id);
./enter/housing_transfer.mhtml:		my $count = 0;
./enter/housing_transfer.mhtml:		foreach my $entry (Tab::Entry->search(event => $event->id, school => $school->id)) { 
./enter/housing_transfer.mhtml:			foreach my $student ($entry->students) { 
./enter/housing_transfer.mhtml:					my $ex = $student->housing($tourn, $housing->night);
./enter/housing_transfer.mhtml:					my $housing = shift @tbas;
./enter/housing_transfer.mhtml:						my $description = "TBA Housing slot transferred to ".$student->first." ".$student->last;
./enter/housing_transfer.mhtml:						my $change = Tab::ChangeLog->create({
./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to $count students in ".$event->abbr;
./enter/housing_transfer.mhtml:		my $student = Tab::Student->retrieve($student_id);
./enter/housing_transfer.mhtml:		my $ex = $student->housing($tourn, $housing->night);
./enter/housing_transfer.mhtml:			my $description = $person->first." ".$person->last." Transferred
./enter/housing_transfer.mhtml:			my $change = Tab::ChangeLog->create({
./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to ".$student->first." ".$student->last;
./enter/housing_transfer.mhtml:		my $judge = Tab::Judge->retrieve($judge_id);
./enter/housing_transfer.mhtml:		my $ex = $m->comp("/funclib/judge_housing.mas", judge => $judge, night => $housing->night);
./enter/housing_transfer.mhtml:			my $description = " Transferred housing from ".$old->first." ".$old->last." to ".$judge->first." ".$judge->last if $old;
./enter/housing_transfer.mhtml:			my $change = Tab::ChangeLog->create({
./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to ".$judge->first." ".$judge->last;
./enter/housing_transfer.mhtml:	my @students_without_housing;
./enter/housing_transfer.mhtml:	my @judges_without_housing;
./enter/housing_transfer.mhtml:	foreach my $student ($m->comp("/funclib/school_students.mas", school => $school, tourn => $tourn)) { 
./enter/housing_transfer.mhtml:		my $hs = $student->housing($tourn, $housing->night);
./enter/housing_transfer.mhtml:	foreach my $judge ($school->judges) {
./enter/housing_transfer.mhtml:		my $hs = $m->comp("/funclib/judge_housing.mas", judge => $judge, night => $housing->night);
./enter/housing_transfer.mhtml:	my $person = $housing->judge if $housing->type eq "judge";
./enter/housing_transfer.mhtml:%	my $switch;
./enter/housing_transfer.mhtml:%						foreach my $student (sort {$a->last cmp $b->last} @students_without_housing) {
./enter/housing_transfer.mhtml:%						foreach my $event (sort {$a->name cmp $b->name} $tourn->events) { 
./enter/housing_transfer.mhtml:%						foreach my $judge (sort {$a->last cmp $b->last} @judges_without_housing) {
./enter/housing_transfer.mhtml:%		my @tbas = Tab::Entry->search( tba => 1, school => $school->id );
./enter/housing_transfer.mhtml:%		my @tba_housing = Tab::Housing->search( tba => 1, school => $school->id );
./enter/housing_transfer.mhtml:%				foreach my $day (@days) { 
./enter/housing_transfer.mhtml:%					my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day );
./enter/housing_transfer.mhtml:%					my @tbas = Tab::Housing->search( tba => 1, school => $school->id, night => $day );
./enter/drop_school.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/drop_school.mhtml:		my $err = "School is not defined.  Perhaps you already deleted it?";
./enter/drop_school.mhtml:		my $err = "You are not an administrator for that school and cannot delete it";
./enter/drop_school.mhtml:	my $tourn = $school->tourn;
./enter/drop_school.mhtml:	foreach my $entry ($school->entries) { 
./enter/drop_school.mhtml:		foreach my $strike (Tab::Strike->search(entry => $entry->id)) { $strike->delete;}
./enter/drop_school.mhtml:		foreach my $student ($entry->students) { 
./enter/drop_school.mhtml:			foreach my $housing ($m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn)) {
./enter/drop_school.mhtml:	foreach my $judge ($school->judges) { 
./enter/drop_school.mhtml:		foreach my $strike ($judge->strikes) { 
./enter/drop_school.mhtml:		foreach my $housing ($m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn)) {
./enter/drop_school.mhtml:        my $description = $person->first." ".$person->last." dropped the entire entry for ".$school->name.".  Bummer.";
./enter/drop_school.mhtml:        my $change = Tab::ChangeLog->create({
./enter/drop_school.mhtml:	my $msg = "You have been dropped completely from ".$tourn->name.".  I warned you.";
./enter/student_save.mhtml:	my $now = DateTime->now;
./enter/student_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./enter/student_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/student_save.mhtml:	my $tourn = $event->tourn;
./enter/student_save.mhtml:	my $min = $event->setting("min_entry");
./enter/student_save.mhtml:	my $max = $event->setting("max_entry");
./enter/student_save.mhtml:	my @students;
./enter/student_save.mhtml:	my $msg;
./enter/student_save.mhtml:	my $err;
./enter/student_save.mhtml:	my $name;
./enter/student_save.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./enter/student_save.mhtml:	my $partner = Tab::Student->retrieve($partner_id) if $partner_id;
./enter/student_save.mhtml:		my ($school, $student, $event) = @_;
./enter/student_save.mhtml:		my $tourn = $event->tourn;
./enter/student_save.mhtml:		my @entries = $m->comp('/funclib/student_entries.mas', student => $student, tourn => $tourn);
./enter/student_save.mhtml:			my $err = $student->first." ".$student->last." is already entered";
./enter/student_save.mhtml:	my $entry = Tab::Entry->create({ 
./enter/student_save.mhtml:	foreach my $student (@students) { 
./enter/student_save.mhtml:		my $es = Tab::EntryStudent->create({
./enter/student_save.mhtml:	my $other_school;
./enter/student_save.mhtml:		my $description = $person->first." ".$person->last." entered ".$event->abbr." entry $code (".$name.")";
./enter/student_save.mhtml:		my $change = Tab::ChangeLog->create({
./enter/details_housing.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./enter/details_housing.mhtml:	my $event = $entry->event;
./enter/details_housing.mhtml:	my $tourn = $event->tourn;
./enter/details_housing.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/details_housing.mhtml:	my @student_ids = split(/-/, $housed);
./enter/details_housing.mhtml:	my %unhoused_students_by_day = ();
./enter/details_housing.mhtml:	my %unhoused_judges_by_day = ();
./enter/details_housing.mhtml:	foreach my $day ($m->comp("/funclib/tourn_days.mas", tourn => $tourn)) { 
./enter/details_housing.mhtml:	my $switch;
./enter/details_housing.mhtml:%			foreach my $student_id (@student_ids) { 
./enter/details_housing.mhtml:%				my $student = Tab::Student->retrieve($student_id);
./enter/details_housing.mhtml:%				my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./enter/details_housing.mhtml:%				foreach my $housing (@housings) { 
./enter/details_housing.mhtml:%					my @unhoused_students = @{$unhoused_students_by_day{$housing->night->ymd}} if $unhoused_students_by_day{$housing->night->ymd};
./enter/details_housing.mhtml:%					my @unhoused_judges = @{$unhoused_judges_by_day{$housing->night->ymd}} if $unhoused_judges_by_day{$housing->night->ymd};
./enter/details_housing.mhtml:%								foreach my $unhoused (@unhoused_students) { 
./enter/details_housing.mhtml:%								foreach my $unhoused (@unhoused_judges) { 
./enter/invoice_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/invoice_print.mhtml:	my $tourn = $school->tourn;
./enter/invoice_print.mhtml:	my $school_name = $school->name;
./enter/invoice_print.mhtml:	my $tourn_name = $tourn->name;
./enter/invoice_print.mhtml:	my $filename = "Invoice-".$school_name."-".$tourn_name."-".$session->id;
./enter/invoice_print.mhtml:	my $filepath = $Tab::file_root."/tmp/".$filename;
./enter/invoice_print.mhtml:	my $garbage = `rm -f $filepath.*`;
./enter/contact_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/contact_save.mhtml:	my $other = Tab::School->search( tourn => $school->tourn->id, code => $school_code)->first;
./enter/contact_save.mhtml:	my $err = "School code $school_code taken; please choose a unique code" if $other;
./enter/judge_striketime.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_striketime.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_striketime.mhtml:	my $category = $judge->category;
./enter/judge_striketime.mhtml:	my $tourn = $category->tourn;
./enter/judge_striketime.mhtml:	my $tz = $tourn->tz;
./enter/judge_striketime.mhtml:	my $switch;
./enter/judge_striketime.mhtml:%			foreach my $strike_timeslot ($category->strike_timeslots) { 
./enter/judge_striketime.mhtml:%				my $start = $strike_timeslot->start->set_time_zone($tz);
./enter/judge_striketime.mhtml:%				my $end = $strike_timeslot->end->set_time_zone($tz);
./enter/judge_details_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./enter/judge_details_save.mhtml:	my $category = $judge->category;
./enter/judge_details_save.mhtml:	my $tourn = $category->tourn;
./enter/judge_details_save.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./enter/judge_details_save.mhtml:	my $now = DateTime->now;
./enter/judge_details_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./enter/judge_details_save.mhtml:	my $missing_rating;
./enter/judge_details_save.mhtml:			my $rating_id = $ARGS{"rating_id"};
./enter/judge_details_save.mhtml:			my $rating = $judge->ratings->first;
./enter/judge_details_save.mhtml:			foreach my $subset ($category->rating_subsets) { 
./enter/judge_details_save.mhtml:				my $tier_id = $ARGS{$subset->id};
./enter/judge_details_save.mhtml:				my $rating = $judge->ratings(rating_subset => $subset)->first;
./enter/judge_details_save.mhtml:			my $err = "You must rate the judge in every category. ".$missing_rating;
./enter/judge_details_save.mhtml:	my $cj = $judge->chapter_judge;
./enter/judge_details_save.mhtml:	my %strike_by_event = ();
./enter/judge_details_save.mhtml:	foreach my $strike (Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 )) { 
./enter/judge_details_save.mhtml:	foreach my $event ($m->comp("/funclib/event_selfstrike.mas", category => $category)) { 
./enter/judge_details_save.mhtml:			my $strike = $strike_by_event{$event->id};
./enter/judge_details_save.mhtml:	my $msg = "Judge ".$judge->first." ".$judge->last." entered";
./enter/concessions.mhtml:	my $now = DateTime->now;
./enter/concessions.mhtml:	my $tourn = $school->tourn;
./enter/concessions.mhtml:	my $switch;
./enter/concessions.mhtml:%			foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) { 
./enter/concessions.mhtml:%						my $count =	$m->comp("/funclib/school_concessions.mas", school => $school, count => 1, concession => $concession);
./enter/concessions.mhtml:%						my $charge =	$m->comp("/funclib/school_concessions.mas", school => $school, charge => 1, concession => $concession);
./enter/concessions.mhtml:%						my $tz = $tourn->tz if $tourn;
./enter/concessions.mhtml:%						my $deadline = $concession->deadline->set_time_zone($tz);
./enter/concessions.mhtml:%			foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) { 
./enter/concessions.mhtml:%				my $total_order = $m->comp("/funclib/concession_stats.mas", total => 1, concession => $concession);
./enter/menu.mas:	my $tz = $school->tourn->tz;
./enter/menu.mas:	my $now = DateTime->now(time_zone => $tz);
./enter/menu.mas:	my $short;
./enter/menu.mas:	foreach my $category ($school->tourn->categories) { 
./enter/menu.mas:		my ($uncovered, $overage) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", category => $category, school => $school); 
./enter/menu.mas:	my $ratings;
./enter/menu.mas:	foreach my $category ($school->tourn->categories) { 
./enter/menu.mas:		my $strike_start = $category->setting("strike_start");
./enter/menu.mas:%	my $tourn = $school->tourn;
./enter/menu.mas:%			my $onsite_starts = $tourn->setting("onsite_starts");
./enter/menu.mas:%			my $onsite_ends = $tourn->setting("onsite_ends");
./enter/menu.mas:	my $red_ratings;
./enter/menu.mas:    foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) {
./enter/menu.mas:		my @entries= $m->comp("/funclib/category_entries.mas", category => $other_category, school => $school, preffable => 1);
./enter/menu.mas:        my $pref_style = $ocategory->setting("prefs");
./enter/menu.mas:		foreach my $entry (@entries) { 
./enter/menu.mas:			my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./student/entry.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./student/entry.mhtml:	my $tz = $entry->event->tourn->tz;
./student/entry.mhtml:	my $now = DateTime->now(time_zone => $tz);
./student/entry.mhtml:%			my $prefs = $entry->event->category->setting("prefs");
./student/entry.mhtml:%				my $prefs_start = $entry->event->category->setting("strike_start");
./student/entry.mhtml:%				my $elim_prefs_start = $entry->event->category->setting("elim_strike_start");
./student/entry.mhtml:%				my $prefs_start = $entry->event->category->setting("strike_start");
./student/history.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./student/history.mhtml:	my @panels;
./student/history.mhtml:	my $student;
./student/history.mhtml:	my @done_panels;
./student/history.mhtml:		my $ok;
./student/history.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/history.mhtml:			my $err = "You do not have access to that debater record.";
./student/history.mhtml:	my $now = DateTime->now;
./student/history.mhtml:%				my $switch;
./student/history.mhtml:				foreach my $panel (@panels) { 
./student/history.mhtml:					my $event = $panel->round->event;
./student/history.mhtml:					my $tz = $event->tourn->tz;
./student/history.mhtml:					my $tzname = Tab::tzname($tz);
./student/history.mhtml:					my $aff_string = $event->setting("aff_label");
./student/history.mhtml:					my $neg_string = $event->setting("neg_label");
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%				my $switch;
./student/history.mhtml:%				foreach my $panel (@done_panels) { 
./student/history.mhtml:					my $entry = Tab::Entry->retrieve($panel->entryid);
./student/history.mhtml:					my $event = $panel->round->event;
./student/history.mhtml:					my $aff_string = $event->setting("aff_label");
./student/history.mhtml:					my $neg_string = $event->setting("neg_label");
./student/history.mhtml:					my %student_by_id = ();
./student/history.mhtml:					foreach my $student ($entry->students) { 
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%								my @scores = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry_id => $panel->entryid);
./student/history.mhtml:%											foreach my $score (@scores) { 
./student/history.mhtml:%										foreach my $student ($entry->students) { 
./student/history.mhtml:%												foreach my $score (@scores) { 
./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/history.mhtml:%								my @values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, rfd => "rfd", entry => $entry);
./student/drop_entry_student.mhtml:	my $student = Tab::Student->retrieve($student_id);
./student/drop_entry_student.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./student/drop_entry_student.mhtml:	my @entry_student = Tab::EntryStudent->search(entry=>$entry_id, student=>$student_id);
./student/drop_entry_student.mhtml:	my $x;
./student/drop_entry_student.mhtml:	foreach my $dummy (@entry_student) { 
./student/drop_entry_student.mhtml:		my @ballot = Tab::Ballot->search(entry=>$entry_id);
./student/drop_entry_student.mhtml:		foreach my $ballot (@ballot){
./student/drop_entry_student.mhtml:			my @score = Tab::Score->search(ballot=>$ballot->id, student=>$student_id );
./student/drop_entry_student.mhtml:			foreach my $score (@score) {
./student/drop_entry_student.mhtml:		if ($killit eq "DEATH") {$dummy->delete;}
./student/index.mhtml:	my @students;
./student/index.mhtml:	my @panels;
./student/index.mhtml:	my @done_panels;
./student/index.mhtml:		my $student = Tab::Student->retrieve($student_id);
./student/index.mhtml:		my $ok;
./student/index.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/index.mhtml:			my $err = "You do not have access to that debater record.";
./student/index.mhtml:	my $now = DateTime->now;
./student/index.mhtml:%			my $student = $students[0];
./student/index.mhtml:%				my $switch;
./student/index.mhtml:%				foreach my $panel (@panels) { 
./student/index.mhtml:					my $event = $panel->round->event;
./student/index.mhtml:					my $tz = $panel->round->event->tourn->tz;
./student/index.mhtml:					my $tzname = Tab::tzname($tz);
./student/index.mhtml:					my $aff_string = $event->setting("aff_label");
./student/index.mhtml:					my $neg_string = $event->setting("neg_label");
./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/index.mhtml:%				my $switch;
./student/index.mhtml:%				foreach my $panel (@done_panels) { 
./student/index.mhtml:%					my $entry = Tab::Entry->retrieve($panel->entryid);
./student/index.mhtml:%					my %student_by_id = ();
./student/index.mhtml:%					foreach my $student ($entry->students) { 
./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./student/index.mhtml:%								my $rfd;
./student/index.mhtml:%								my $comments;
./student/index.mhtml:%								my @scores = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry_id => $panel->entryid);
./student/index.mhtml:%											foreach my $score (@scores) { 
./student/index.mhtml:%									my @values;
./student/index.mhtml:%										foreach my $student ($entry->students) { 
./student/index.mhtml:%												foreach my $score (@scores) { 
./student/index.mhtml:%													my $rfd = $score->content if $score->tag eq "rfd";
./student/index.mhtml:%													my $comments = $score->content if $score->tag eq "comments";
./student/index.mhtml:%		foreach my $student (sort {$b->id <=> $a->id} @students) { 
./student/index.mhtml:%			my $ndt;
./student/index.mhtml:%				foreach my $circuit ($student->chapter->circuits) {
./student/index.mhtml:%					foreach my $entry (sort {$b <=> $a} $student->entries) { 
./student/index.mhtml:%						my $tourn = $entry->event->tourn;
./student/index.mhtml:%						my $tz = $tourn->tz;
./student/index.mhtml:					my $ok++ if $student->person && $student->person->id == $person->id;
./student/index.mhtml:					foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/index.mhtml:						my $err = "You do not have access to add honors to that debater record.";
./student/index.mhtml:					my $tz = $person->tz;
./student/index.mhtml:					my $now = DateTime->now->set_time_zone($tz);
./student/index.mhtml:					my $year = $now->year;
./student/index.mhtml:					my $limit = $year."-07-01 00:00:00";
./student/index.mhtml:					my @partners = Tab::Student->search_partners( $student->id, $limit );
./student/index.mhtml:					my %partner_results = ();
./student/index.mhtml:					my @used_partners;
./student/index.mhtml:					foreach my $partner (@partners) { 
./student/index.mhtml:						my @p_results = Tab::Result->search_honors( $partner->id, $limit );
./student/index.mhtml:%					foreach my $other (@partners) { 
./student/conflict_rm.mhtml:		my $err = "No such conflict";
./student/conflict_rm.mhtml:	my $conflict = Tab::Conflict->retrieve($conflict_id);
./student/conflict_rm.mhtml:	my $msg;
./student/conflict_rm.mhtml:			my $err = "That conflict does not belong to your user account.  Stop messing around.";
./student/follow.mhtml:%		my @students = Tab::Student->search_like( first => $first."%", last => $last."%", person => 0 );
./student/follow.mhtml:%		my $switch;
./student/follow.mhtml:%		my $found;
./student/follow.mhtml:%			foreach my $student (@students) { 
./student/claim.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./student/claim.mhtml:		my @admins;
./student/claim.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./student/claim.mhtml:				my $msg = "You have claimed this student record as yours (as you are an admin of that team)";
./student/claim.mhtml:		my $subject = "[TabRoom] ". $person->email." requests access to student ".$student->first." ".$student->last;
./student/claim.mhtml:		my $body = "The holder of the Tabroom login ".$person->first." ".$person->last." (".$person->email.") \n";
./student/claim.mhtml:		foreach my $admin (@admins) { 
./student/claim.mhtml:		my $msg = "You have requested access to the judge ".$student->first." ".$student->last." from the team admins.";
./student/conflicts.mhtml:		my $other = Tab::Person->retrieve($other_id);
./student/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, conflicted => $other_id );
./student/conflicts.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./student/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, chapter => $chapter_id );
./student/conflicts.mhtml:	my @chapters;
./student/conflicts.mhtml:	my @persons;
./student/conflicts.mhtml:	my @existings = Tab::Conflict->search( person => $person->id );
./student/conflicts.mhtml:%				foreach my $other (@persons) { 
./student/conflicts.mhtml:%					my @chapters;
./student/conflicts.mhtml:%					my @students = Tab::Student->search( person => $other->id );
./student/conflicts.mhtml:%					my @chapter_judges = Tab::ChapterJudge->search( person => $other->id );
./student/conflicts.mhtml:%					foreach my $person (@chapter_judges, @students) { 
./student/conflicts.mhtml:%							foreach my $chapter (@chapters) { 
./student/conflicts.mhtml:%				foreach my $existing (@existings) { 
./student/search.mhtml:	my @students = Tab::Student->search_like( first => $first."%", last => $last."%", person => 0 );
./student/search.mhtml:	my $switch;
./student/search.mhtml:	my $found;
./student/search.mhtml:%			foreach my $student (@students) { 
./student/search.mhtml:%			foreach my $acc_student ($person->students) { 
./student/search.mhtml:%			my $count;
./student/search.mhtml:%			foreach my $entry ($m->comp("/funclib/person_entries.mas", person => $person, all => 1)) { 
./student/rfd_view.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./student/rfd_view.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./student/rfd_view.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./student/rfd_view.mhtml:	my @values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry => $entry);
./student/rfd_view.mhtml:%				foreach my $value (@values) { 
./student/rfd_view.mhtml:%				foreach my $student ($entry->students) { 
./student/rfd_view.mhtml:%					foreach my $value (@values) { 
./student/rfd_view.mhtml:%					foreach my $value (@values) { 
./student/rfd_view.mhtml:%		foreach my $value (@values) { 
./diocese/tourn_school_save.mhtml:	my $missing;
./diocese/tourn_school_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./diocese/tourn_school_save.mhtml:	my $hotel = Tab::Hotel->retrieve($hotel_id) if $hotel_id;
./diocese/tourn_school_save.mhtml:	my $invalid = Email::Valid->address( -address => $contact_email, -mxcheck => 1 ) ? 'yes' : 'no' if $contact_email;
./diocese/tourn_school_save.mhtml:	my $chapter = $school->chapter;
./diocese/tourn_school_save.mhtml:		my $err = "You were missing required fields.  Please try again.";
./diocese/tourn_school_save.mhtml:	my $msg = "School information saved for $name";
./diocese/invoice_school_print.mhtml:	my $tz = $tourn->tz;
./diocese/invoice_school_print.mhtml:    my $now = DateTime->now->set_time_zone($tz);
./diocese/invoice_school_print.mhtml:	my $filename = "Diocese-SchoolInvoices-".$region->name;
./diocese/invoice_school_print.mhtml:	my $filepath = $Tab::file_root."/tmp/";
./diocese/invoice_school_print.mhtml:	my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/invoice_school_print.mhtml:	foreach my $school (Tab::School->search( region => $region->id, tourn => $tourn->id)) { 
./diocese/invoice_school_print.mhtml:		my ($total, $payments, $feline_ref) = $m->comp("/funclib/ncfl/fees.mas", diocese => $region, tourn => $tourn, school => $school);
./diocese/invoice_school_print.mhtml:		my @felines = @{$feline_ref};
./diocese/invoice_school_print.mhtml:		my $owed = $total + $payments;
./diocese/invoice_school_print.mhtml:		my $name  = "Receipt";
./diocese/invoice_school_print.mhtml:		my $notfirst;
./diocese/invoice_school_print.mhtml:		foreach my $director ($region->admins) { 
./diocese/invoice_school_print.mhtml:		my $count;
./diocese/invoice_school_print.mhtml:		foreach my $line (@felines) {
./diocese/tourn_school_edit.mhtml:	my $tz = $person->tz;
./diocese/tourn_school_edit.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_school_edit.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./diocese/tourn_school_edit.mhtml:	my $school;
./diocese/tourn_school_edit.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./diocese/tourn_school_edit.mhtml:%					foreach my $hotel (sort {$a->name cmp $b->name} $tourn->hotels) { 
./diocese/tourn_school_edit.mhtml:%				my $warn = "This will drop all entries and judges from ".$school->short_name."  Please be sure before hitting OK.  OK?";
./diocese/tourn_school_create.mhtml:	my $tz = $person->tz;
./diocese/tourn_school_create.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_school_create.mhtml:		my $msg = "I cannot create a nameless school";
./diocese/tourn_school_create.mhtml:	my $chapter = Tab::Chapter->search_by_fucking_name( $name, $region->id )->first;
./diocese/tourn_school_create.mhtml:	my $circuit = $region->circuit;
./diocese/tourn_school_create.mhtml:		my $msg = "That school already exists.  Try again";
./diocese/tourn_school_create.mhtml:	my $chapter_circuit = Tab::ChapterCircuit->create({
./diocese/tourn_school_drop.mhtml:	my $school = Tab::School->retrieve($school_id);
./diocese/tourn_school_drop.mhtml:		my $err = "School is not defined.  Perhaps you already deleted it?";
./diocese/tourn_school_drop.mhtml:		my $err = "You are not an administrator for that school and cannot delete it";
./diocese/tourn_school_drop.mhtml:	foreach my $entry ($school->entries) { 
./diocese/tourn_school_drop.mhtml:		foreach my $strike (Tab::Strike->search(entry => $entry->id)) { $strike->delete;}
./diocese/tourn_school_drop.mhtml:		foreach my $student ($entry->students) { 
./diocese/tourn_school_drop.mhtml:			foreach my $housing ($m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn)) {
./diocese/tourn_school_drop.mhtml:	foreach my $judge ($school->judges) { 
./diocese/tourn_school_drop.mhtml:		foreach my $strike ($judge->strikes) { 
./diocese/tourn_school_drop.mhtml:		foreach my $housing ($m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn)) {
./diocese/tourn_school_drop.mhtml:        my $description = $person->first." ".$person->last." dropped the entire entry for ".$school->name.".  Bummer.";
./diocese/tourn_school_drop.mhtml:        my $change = Tab::ChangeLog->create({
./diocese/tourn_school_drop.mhtml:	my $msg = "You have been dropped completely from ".$tourn->name.".  I warned you.";
./diocese/tourn.mhtml:	my $tz = $person->tz;
./diocese/tourn.mhtml:	my $switch; 
./diocese/tourn.mhtml:%					my $drop_deadline = $tourn->setting("drop_deadline");
./diocese/tourn.mhtml:%					my $judge_deadline = $tourn->setting("judge_deadline");
./diocese/tourn.mhtml:%					my $fine_deadline = $tourn->setting("fine_deadline");
./diocese/access_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./diocese/access_rm.mhtml:	my @already = Tab::Permission->search( region => $region->id, tag => "region", person => $admin_id );
./diocese/access_rm.mhtml:	foreach my $alr (@already) { 
./diocese/access_rm.mhtml:	my $msg = "Access removed from diocese";
./diocese/tourn_tab_edit.mhtml:	my @tab_jobs = (
./diocese/tourn_tab_edit.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_tab_edit.mhtml:	my $category = Tab::Category->retrieve($category_id) unless $judge;
./diocese/tourn_tab_edit.mhtml:	my @schools = Tab::School->search( region => $region->id, tourn => $tourn->id );
./diocese/tourn_tab_edit.mhtml:%						foreach my $school (@schools) { 
./diocese/tourn_tab_edit.mhtml:%						foreach my $job (@tab_jobs) { 
./diocese/tourn_tab_edit.mhtml:%						foreach my $job (@tab_jobs) { 
./diocese/tourn_tab_edit.mhtml:%						foreach my $job (@tab_jobs) { 
./diocese/tourn_tab_edit.mhtml:%			my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./diocese/tourn_tab_edit.mhtml:%			my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_tab_edit.mhtml:%			my $remainder = $judge_burden - scalar @judges;
./diocese/access.mhtml:	my $switch;
./diocese/access.mhtml:%		my $admins = scalar $region->admins;
./diocese/access.mhtml:%		my $warn = "You cannot delete the last administrator for a diocese; please add the new contact before deleting" if $admins == 1;
./diocese/access.mhtml:%		foreach my $admin ($region->admins) { 
./diocese/tourn_judges.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_judges.mhtml:	my $now = DateTime->now(time_zone => $tz);
./diocese/tourn_judges.mhtml:	my $judge_deadline = $tourn->setting("judge_deadline");
./diocese/tourn_judges.mhtml:	my $hide_code = $tourn->setting("hide_codes");
./diocese/tourn_judges.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./diocese/tourn_judges.mhtml:		my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./diocese/tourn_judges.mhtml:		my $tab_room++ if $category->setting("tab_room");
./diocese/tourn_judges.mhtml:		my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./diocese/tourn_judges.mhtml:		my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_prelims");
./diocese/tourn_judges.mhtml:		my %judges_by_jpool = ();
./diocese/tourn_judges.mhtml:		my @jpoolless_judges;
./diocese/tourn_judges.mhtml:			foreach my $judge (@judges) { 
./diocese/tourn_judges.mhtml:		my $jpool_obligation;
./diocese/tourn_judges.mhtml:		my @chapters = sort {$a->name cmp $b->name} $region->chapters;
./diocese/tourn_judges.mhtml:		my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_judges.mhtml:		my @events = sort {$a->name cmp $b->name} $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./diocese/tourn_judges.mhtml:		my $switch;
./diocese/tourn_judges.mhtml:%					foreach my $jpool (sort {$a->id <=> $b->id} @prelim_jpools) { 
./diocese/tourn_judges.mhtml:%						my @pool_judges = @{$judges_by_jpool{$jpool->id}} if $judges_by_jpool{$jpool->id};
./diocese/tourn_judges.mhtml:%						my $jpool_burden = $m->comp("/funclib/ncfl/prelim_jpool_obligation.mas", diocese => $region, jpool => $jpool);
./diocese/tourn_judges.mhtml:%						my $needed = $jpool_burden - scalar @pool_judges;
./diocese/tourn_judges.mhtml:						foreach my $judge (@{$judges_by_jpool{$jpool->id}}) {
./diocese/tourn_judges.mhtml:						foreach my $judge (@jpoolless_judges) { 
./diocese/tourn_judges.mhtml:					foreach my $judge (@judges) {
./diocese/tourn_judges.mhtml:%						foreach my $jpool (@elim_jpools) { 
./diocese/tourn_judges.mhtml:%					foreach my $judge ($m->comp("/funclib/region_judges.mas", tourn => $tourn, region => $region, elim => $category)) { 
./diocese/tourn_judges.mhtml:%						my %jpool_yes = map {$_->id => 1} $judge->jpools;
./diocese/tourn_judges.mhtml:%							foreach my $jpool (@elim_jpools) { 
./diocese/tourn_judges.mhtml:					my ($total_owed, $style) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_judges.mhtml:%							foreach my $jpool (@elim_jpools) { 
./diocese/tourn_judges.mhtml:%								my $owed;
./diocese/tourn_judges.mhtml:%								my $ditch;
./diocese/tourn_judges.mhtml:%				foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) { 
./diocese/tourn_judges.mhtml:%					my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $other_category);
./diocese/tourn_judges.mhtml:%					my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $other_category);
./diocese/tourn_judges.mhtml:%					my $remainder = $judge_burden - scalar @judges;
./diocese/tourn_judges.mhtml:%					my ($total_owed, $style) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, category => $other_category);
./diocese/tourn_judges.mhtml:		my ($judge, $category, $switch, $hide_code) = @_;
./diocese/tourn_judges.mhtml:		my $rating = $judge->avg;
./diocese/tourn_judges.mhtml:		my $tourn = $category->tourn;
./diocese/tourn_judges.mhtml:		my $tz = $tourn->tz;
./diocese/tourn_judges.mhtml:		my $now = DateTime->now(time_zone => $tz);
./diocese/tourn_judges.mhtml:		my $judge_deadline = $tourn->setting("judge_deadline");
./diocese/tourn_judges.mhtml:		my $region = $judge->school->region;
./diocese/tourn_judges.mhtml:%						my $warn = "You are about to drop that judge entirely.  Are you sure?";
./diocese/tourn_judge_edit.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_judge_edit.mhtml:	my $category = Tab::Category->retrieve($category_id) unless $judge;
./diocese/tourn_judge_edit.mhtml:	my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;
./diocese/tourn_judge_edit.mhtml:	my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;
./diocese/tourn_judge_edit.mhtml:	my @alts = $m->comp("/funclib/region_judges.mas", region => $region, alt => "yes", category => $category);
./diocese/tourn_judge_edit.mhtml:	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_prelims");
./diocese/tourn_judge_edit.mhtml:	my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./diocese/tourn_judge_edit.mhtml:	my $prelim_jpool = $judge->setting("prelim_jpool") if $judge;
./diocese/tourn_judge_edit.mhtml:	my @schools = sort {$a->name cmp $b->name} Tab::School->search( region => $region->id, tourn => $tourn->id);
./diocese/tourn_judge_edit.mhtml:%			my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./diocese/tourn_judge_edit.mhtml:%			my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./diocese/tourn_judge_edit.mhtml:%			my $remainder = $judge_burden - scalar @judges;
./diocese/tourn_judge_edit.mhtml:%				foreach my $jpool (@prelim_jpools) { 
./diocese/tourn_judge_edit.mhtml:%					my @jpool_judges = $m->comp("/funclib/region_judges.mas", region => $region, jpool => $jpool);
./diocese/tourn_judge_edit.mhtml:%					my $jpool_burden = $m->comp("/funclib/ncfl/prelim_jpool_obligation.mas", diocese => $region, jpool => $jpool);
./diocese/tourn_judge_edit.mhtml:%					my $needed = $jpool_burden - scalar @jpool_judges;
./diocese/tourn_judge_edit.mhtml:%						foreach my $school (@schools) { 
./diocese/tourn_judge_edit.mhtml:%						my $notfirst;
./diocese/tourn_judge_edit.mhtml:%						foreach my $subset (@subsets) {
./diocese/tourn_judge_edit.mhtml:%							my $set_tier = Tab::Rating->search( rating_subset => $subset->id, judge => $judge->id )->first if $judge;
./diocese/tourn_judge_edit.mhtml:%										foreach my $rating_tier (sort {$a->name cmp $b->name} @tiers) {
./diocese/tourn_judge_edit.mhtml:%						my $set_tier = $judge->ratings->first if $judge;
./diocese/tourn_judge_edit.mhtml:%							foreach my $rating_tier (sort {$a->name cmp $b->name} @tiers) {
./diocese/tourn_judge_edit.mhtml:%       					foreach my $jpool (@prelim_jpools) { 
./diocese/tourn_judge_edit.mhtml:%							foreach my $alt_category ($tourn->categories) { 
./diocese/tourn_judge_drop.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./diocese/tourn_judge_drop.mhtml:	my $category = $judge->category;
./diocese/tourn_judge_drop.mhtml:	my $school = $judge->school;
./diocese/tourn_judge_drop.mhtml:	my $msg = "Judge ".$judge->first." ".$judge->last." has been dropped.";
./diocese/tourn_judge_drop.mhtml:	my @ratings = Tab::Rating->search(judge => $judge->id);
./diocese/tourn_judge_drop.mhtml:	foreach my $rating (@ratings) { 
./diocese/tourn_judge_drop.mhtml:	my $description = $person->first." ".$person->last." dropped judge ".$judge->code." ".$judge->first." ".$judge->last;
./diocese/tourn_judge_drop.mhtml:	my $change = Tab::ChangeLog->create({
./diocese/tourn_judge_drop.mhtml:	my $remaining = scalar $school->entries;
./diocese/tourn_judge_drop.mhtml:	my $judges = scalar $school->judges;
./diocese/schools_save.mhtml:	foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters)  { 
./diocese/schools_save.mhtml:		my $chapter = Tab::Chapter->create({
./diocese/schools_save.mhtml:	my $msg = "School names and coach credits saved";
./diocese/tourn_tab_save.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_tab_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_tab_save.mhtml:	my $msg;
./diocese/tourn_tab_save.mhtml:	my $missing;
./diocese/tourn_tab_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./diocese/tourn_tab_save.mhtml:	my $judge;
./diocese/tourn_tab_save.mhtml:		my $cj = $judge->chapter_judge;
./diocese/tourn_tab_save.mhtml:			my $school = Tab::School->retrieve($school_id);
./diocese/tourn_tab_save.mhtml:			my $cj = Tab::ChapterJudge->create({
./diocese/tourn_tab_save.mhtml:			my $err = "You did not fill in  a school.  Please try again";
./diocese/tourn_tab_save.mhtml:		my $err = "Please fill in all missing fields";
./diocese/schools.mhtml:%			foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters)  { 
./diocese/autohandler:	my $region = Tab::Region->retrieve($region_id) if $region_id;
./diocese/autohandler:	my $coach = Tab::Permission->search( region => $region->id, tag => "region", person => $person->id )->first;
./diocese/autohandler:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./diocese/tourn_print_event.mhtml:    my $filename = "Diocese-Registration-".$region->name;
./diocese/tourn_print_event.mhtml:    my $filepath = $Tab::file_root."/tmp/";
./diocese/tourn_print_event.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/tourn_print_event.mhtml:	my $now = DateTime->now;
./diocese/tourn_print_event.mhtml:	foreach my $category (sort {$a->name cmp $b->name} $tourn->categories) { 
./diocese/tourn_print_event.mhtml:		my $newpage++ unless $category->setting("tab_room");
./diocese/tourn_print_event.mhtml:		my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, category => $category);
./diocese/tourn_print_event.mhtml:		my @entries = $m->comp("/funclib/region_entries.mas", region => $region, tourn => $tourn, category => $category);
./diocese/tourn_judge_save.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_judge_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_judge_save.mhtml:	my $msg;
./diocese/tourn_judge_save.mhtml:	my $err;
./diocese/tourn_judge_save.mhtml:	my $missing;
./diocese/tourn_judge_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./diocese/tourn_judge_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./diocese/tourn_judge_save.mhtml:	my $judge;
./diocese/tourn_judge_save.mhtml:		my $cj = $judge->chapter_judge;
./diocese/tourn_judge_save.mhtml:			my $cj = Tab::ChapterJudge->create({
./diocese/tourn_judge_save.mhtml:	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", 
./diocese/tourn_judge_save.mhtml:			my $jpool = Tab::JPool->retrieve($jpool_id);
./diocese/tourn_judge_save.mhtml:				my @already = $m->comp("/funclib/judge_jpools.mas", 
./diocese/tourn_judge_save.mhtml:					my @jpool_memberships = Tab::JPoolJudge->search(
./diocese/tourn_judge_save.mhtml:					foreach my $jpm (@jpool_memberships) { 
./diocese/tourn_judge_save.mhtml:    my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;
./diocese/tourn_judge_save.mhtml:    my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;
./diocese/tourn_judge_save.mhtml:		foreach my $subset (@subsets) {
./diocese/tourn_judge_save.mhtml:			my $rating = Tab::Rating->search( judge => $judge->id, type => "coach", rating_subset => $subset->id )->first;
./diocese/tourn_judge_save.mhtml:			my @ratings = Tab::Rating->search( judge => $judge->id, type => "coach" );
./diocese/tourn_judge_save.mhtml:			my $rating = shift @ratings if @ratings;
./diocese/tourn_entries_save.mhtml:    my $tz = $person->tz;
./diocese/tourn_entries_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./diocese/tourn_entries_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./diocese/tourn_entries_save.mhtml:	my $quota = $region->quota;
./diocese/tourn_entries_save.mhtml:	my $max = $event->setting("max_entry") if $event;
./diocese/tourn_entries_save.mhtml:	my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $event);
./diocese/tourn_entries_save.mhtml:	foreach my $step (1 .. $quota) {
./diocese/tourn_entries_save.mhtml:		my $entry = 0;
./diocese/tourn_entries_save.mhtml:		my $first_name;
./diocese/tourn_entries_save.mhtml:		my $last_name;
./diocese/tourn_entries_save.mhtml:		my @students;
./diocese/tourn_entries_save.mhtml:			foreach my $stu (1 .. $max) {
./diocese/tourn_entries_save.mhtml:				my $student;
./diocese/tourn_entries_save.mhtml:	my $msg = "Entries saved in ".$event->name;
./diocese/invoice_print.mhtml:	my $tz = $tourn->tz;
./diocese/invoice_print.mhtml:    my $now = DateTime->now->set_time_zone($tz);
./diocese/invoice_print.mhtml:	my ($total, $payments, $feline_ref) = $m->comp("/funclib/ncfl/fees.mas", diocese => $region, tourn => $tourn);
./diocese/invoice_print.mhtml:	my @felines = @{$feline_ref};
./diocese/invoice_print.mhtml:	my $owed = $total + $payments;
./diocese/invoice_print.mhtml:	my $name  = "Receipt";
./diocese/invoice_print.mhtml:    my $filename = "Diocese-Invoice-".$region->name;
./diocese/invoice_print.mhtml:    my $filepath = $Tab::file_root."/tmp/";
./diocese/invoice_print.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/invoice_print.mhtml:	my $notfirst;
./diocese/invoice_print.mhtml:	foreach my $director ($region->admins) { 
./diocese/invoice_print.mhtml:	my $count;
./diocese/invoice_print.mhtml:	foreach my $line (@felines) {
./diocese/invoice_print.mhtml:    my $message = $tourn->setting("invoice_message");
./diocese/invoice_print.mhtml:    my $strip = HTML::Strip->new();
./diocese/invoice_print.mhtml:    my $newline = "\\newline\n";
./diocese/tourn_schools.mhtml:	my $tz = $person->tz;
./diocese/tourn_schools.mhtml:	my %used_schools = ();
./diocese/tourn_schools.mhtml:	my %hotels = map {$_->id => $_} $tourn->hotels;
./diocese/tourn_schools.mhtml:%			foreach my $school (sort {$a->name cmp $b->name} $tourn->schools( region => $region->id)) { 
./diocese/tourn_schools.mhtml:%			foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters) { 
./diocese/tourn_judge_elims_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./diocese/tourn_judge_elims_save.mhtml:	my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./diocese/tourn_judge_elims_save.mhtml:	my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, elim => $category);
./diocese/tourn_judge_elims_save.mhtml:	foreach my $judge (@judges) { 
./diocese/tourn_judge_elims_save.mhtml:		foreach my $jpool (@elim_jpools) { 
./diocese/tourn_judge_elims_save.mhtml:	my $msg = "Pool assignments have been saved";
./diocese/contact_save.mhtml:	my $msg = "Account information saved";
./diocese/tourn_print_school.mhtml:    my $filename = "Diocese-Registration-".$region->name;
./diocese/tourn_print_school.mhtml:    my $filepath = $Tab::file_root."/tmp/";
./diocese/tourn_print_school.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./diocese/tourn_print_school.mhtml:	my $now = DateTime->now;
./diocese/tourn_print_school.mhtml:	my @schools = sort {$a->name cmp $b->name} Tab::School->search( region => $region->id, tourn => $tourn->id );
./diocese/tourn_print_school.mhtml:	my $notfirst;
./diocese/tourn_print_school.mhtml:	foreach my $school (sort {$a->name cmp $b->name} @schools) { 
./diocese/tourn_print_school.mhtml:		my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, school => $school);
./diocese/tourn_print_school.mhtml:		my @entries = $m->comp("/funclib/region_entries.mas", region => $region, tourn => $tourn, school => $school);
./diocese/tourn_entries.mhtml:	my $switch; 
./diocese/tourn_entries.mhtml:	my $tz = $tourn->tz;
./diocese/tourn_entries.mhtml:	my $event = Tab::Event->retrieve($event_id) if $event_id;
./diocese/tourn_entries.mhtml:	my $quota = $region->quota;
./diocese/tourn_entries.mhtml:	my $max = $event->setting("max_entry") if $event;
./diocese/tourn_entries.mhtml:	my $hide_codes = $tourn->setting("hide_codes");
./diocese/tourn_entries.mhtml:	my $now = DateTime->now(time_zone => $tz);
./diocese/tourn_entries.mhtml:	my $entry_deadline = $tourn->reg_end->set_time_zone($tz);
./diocese/tourn_entries.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./diocese/tourn_entries.mhtml:%				my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $event);
./diocese/tourn_entries.mhtml:%				my @schools = Tab::School->search(  region => $region->id, tourn => $tourn->id );
./diocese/tourn_entries.mhtml:%				foreach my $step (1 .. $quota) { 
./diocese/tourn_entries.mhtml:%					my $entry = shift @entries if @entries;
./diocese/tourn_entries.mhtml:%					my @students = $entry->students if $entry;
./diocese/tourn_entries.mhtml:%									foreach my $school (@schools) { 
./diocese/tourn_entries.mhtml:%						my $notfirst;
./diocese/tourn_entries.mhtml:%						foreach my $stu (1 .. $max) { 
./diocese/tourn_entries.mhtml:%							my $student = shift @students if @students;
./diocese/tourn_entries.mhtml:				foreach my $oevent (sort {$a->name cmp $b->name} $tourn->events) { 
./diocese/tourn_entries.mhtml:					my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $oevent);
./diocese/tourn_entries.mhtml:					my $block;
./diocese/tournaments.mhtml:	my $tz = $person->tz;
./diocese/tournaments.mhtml:	my $switch; 
./diocese/tournaments.mhtml:	my @existing_tourns = Tab::Tourn->search_by_entered_tourn($region->id);
./diocese/tournaments.mhtml:	my @open_tourns = Tab::Tourn->search_by_open_tourn($region->id);
./diocese/tournaments.mhtml:%				foreach my $et (@existing_tourns) { 
./diocese/tournaments.mhtml:%				my $hidden;
./diocese/tournaments.mhtml:%				foreach my $ot (@open_tourns) { 
./diocese/access_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./diocese/access_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./diocese/access_add.mhtml:	my $login = Tab::Login->search( username => $email )->first;
./diocese/access_add.mhtml:	my $already = Tab::Permission->search( region => $region->id, tag => 'region', person => $person->id ) if $person;
./diocese/access_add.mhtml:	my $msg;
./diocese/access_add.mhtml:			my $admin = Tab::Permission->create({
./judge/ballot_comments.mhtml:		my $err = "I didn't get both a judge and a ballot record";
./judge/ballot_comments.mhtml:	my $ballot = Tab::Ballot->retrieve($ballot_id);
./judge/ballot_comments.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_comments.mhtml:		my $err = "No ballots found for that judge and that ballot.";
./judge/ballot_comments.mhtml:		my $err = "You are not authorized to enter ballots for that judge.";
./judge/ballot_comments.mhtml:		my $err = "That judge does not judge in that room.";
./judge/ballot_comments.mhtml:	my $already = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/hire.mhtml:	my @already = $m->comp("/funclib/person_judges.mas", person => $person);
./judge/hire.mhtml:	my %judge_by_tourn = ();
./judge/hire.mhtml:	foreach my $judge (@already) {
./judge/hire.mhtml:%			my %used = ();
./judge/hire.mhtml:%			foreach my $tourn ($m->comp("/funclib/tourn_exchange.mas")) { 
./judge/hire.mhtml:%				my $judge =  $judge_by_tourn{$tourn->id};
./judge/i_am_aff.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/i_am_aff.mhtml:	my $err = "Sides all now agree.  Please re-enter your ballot now. <br/> ";
./judge/i_am_aff.mhtml:	my %done;
./judge/i_am_aff.mhtml:	foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
./judge/i_am_aff.mhtml:		my @ballots = Tab::Ballot->search( entry => $entry->id, panel => $panel->id );
./judge/i_am_aff.mhtml:		foreach my $ballot (@ballots) { 
./judge/hire_save.mhtml:		my $judge = Tab::Judge->retrieve($already_id);
./judge/hire_save.mhtml:			my $msg = "That judge category does not accept self-hire requests";
./judge/hire_save.mhtml:		my $max = $judge->category->setting("max_rounds");
./judge/hire_save.mhtml:		my $actual = $rounds;
./judge/hire_save.mhtml:		my $err = "You signed for more than the maximum $max rounds.  Your offer was reduced to $actual" unless $actual == $rounds;
./judge/hire_save.mhtml:		my $msg = "Hire offer for $actual rounds saved pending tournament approval.";
./judge/hire_save.mhtml:		my $category = Tab::Category->retrieve($category_id);
./judge/hire_save.mhtml:			my $msg = "That judge category does not accept self-hire requests";
./judge/hire_save.mhtml:		my $max = $category->setting("max_rounds");
./judge/hire_save.mhtml:		my $actual = $rounds;
./judge/hire_save.mhtml:		my $err = "You signed for more than the maximum $max rounds.  Your offer was reduced to $actual" unless $actual == $rounds;
./judge/hire_save.mhtml:		my $code = $m->comp("/funclib/category_code.mas", category => $category ) unless $category->setting("no_codes");
./judge/hire_save.mhtml:		my $tz = $category->tourn->tz;
./judge/hire_save.mhtml:		my $now = DateTime->now(time_zone => $tz);
./judge/hire_save.mhtml:		my $judge = Tab::Judge->create({
./judge/hire_save.mhtml:		my $msg = "Hire offer for $actual rounds saved pending tournament approval.";
./judge/history.mhtml:%	my $switch;
./judge/history.mhtml:%			foreach  my $judge (sort {$b->id <=> $a->id} $person->judges) { 
./judge/history.mhtml:%				my $tourn = $judge->category->tourn;
./judge/ballot_confirm.mhtml:        my $err = "I didn't get both a judge and a ballot record";
./judge/ballot_confirm.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/ballot_confirm.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_confirm.mhtml:        my $err = "No ballots found for that judge and that panel.";
./judge/ballot_confirm.mhtml:        my $err = "You are not authorized to enter ballots for that judge.";
./judge/ballot_confirm.mhtml:    my @ballots = Tab::Ballot->search( panel => $panel->id, judge => $judge_id);
./judge/ballot_confirm.mhtml:        my $err = "That judge does not judge in that room.";
./judge/ballot_confirm.mhtml:	my $rfd;
./judge/ballot_confirm.mhtml:	foreach my $ballot (@ballots) { 
./judge/ballot_confirm.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/ballot_confirm.mhtml:	my $event = $panel->round->event;
./judge/ballot_confirm.mhtml:	my $type = $event->type;
./judge/ballot_confirm.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/ballot_confirm.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/ballot_confirm.mhtml:	my $undone;
./judge/ballot_confirm.mhtml:		foreach my $ballot ($panel->ballots) { 
./judge/ballot_confirm.mhtml:		foreach my $other (@judges) { 
./judge/ballot_confirm.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other);
./judge/ballot_confirm.mhtml:%			my $proceed++;
./judge/ballot_confirm.mhtml:%			my $aff_count = 0;
./judge/ballot_confirm.mhtml:%			my $neg_count = 0;
./judge/ballot_confirm.mhtml:%			my $switch;
./judge/ballot_confirm.mhtml:%			my $winner;
./judge/ballot_confirm.mhtml:%			my $side;
./judge/ballot_confirm.mhtml:%			foreach my $ojudge (@judges) { 
./judge/ballot_confirm.mhtml:%				my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $ojudge, noob => 1);
./judge/ballot_confirm.mhtml:%		my $now = DateTime->now;
./judge/ballot_confirm.mhtml:%		my $msg = "Thank you for entering your ballot.  If you come to believe you screwed up, please contact the tournament staff";
./judge/rfd_only.mhtml:		my $err = "I didn't get both a judge and a ballot record";
./judge/rfd_only.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/rfd_only.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/rfd_only.mhtml:	my $category = $judge->category;
./judge/rfd_only.mhtml:	my $round = $panel->round;
./judge/rfd_only.mhtml:	my $wudc++ if $round->event->type eq "wudc";
./judge/rfd_only.mhtml:		my $err = "No ballots found for that judge and that panel.";
./judge/rfd_only.mhtml:		my $err = "You are not authorized to enter ballots for that judge.";
./judge/rfd_only.mhtml:		my $err = "That tournament does not have tiebreakers set.  Please contact the tournament tab staff to let them know.";
./judge/rfd_only.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/rfd_only.mhtml:		my $err = "That judge does not judge in that room.";
./judge/rfd_only.mhtml:	my $tourn = $category->tourn;
./judge/rfd_only.mhtml:	my $event = $round->event;
./judge/rfd_only.mhtml:	my $type = $event->type;
./judge/rfd_only.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/rfd_only.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/rfd_only.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/rfd_only.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/rfd_only.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./judge/rfd_only.mhtml:%		my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./judge/rfd_only.mhtml:%		foreach my $ballot ($panel->ballots( judge => $judge_id)) { 
./judge/rfd_only.mhtml:			my $entry = $ballot->entry;
./judge/rfd_only.mhtml:			my $code = $entry->code;
./judge/rfd_only.mhtml:				foreach my $student ($entry->students) { 
./judge/rfd_only.mhtml:				my $title = Tab::Score->search( tag => "title", ballot => $ballot->id )->first;
./judge/rfd_only.mhtml:%			my $comments = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/rfd_only.mhtml:%			foreach my $ballot (@ballots) { 
./judge/rfd_only.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./judge/rfd_only.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./judge/profile.mhtml:	my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./judge/tourn.mhtml:%	my $tourn = Tab::Tourn->retrieve($tourn_id);
./judge/tourn.mhtml:%	my @judges = $m->comp("/funclib/person_judges.mas", person => $person, tourn => $tourn);
./judge/tourn.mhtml:%	my $now = DateTime->now;
./judge/tourn.mhtml:%	my $switch;
./judge/tourn.mhtml:%		foreach my $judge (@judges) { 
./judge/tourn.mhtml:%			my @upcoming =  $m->comp("/funclib/judge_panels.mas", judge => $judge, published => 1);
./judge/tourn.mhtml:%					foreach my $panel (@upcoming) {  
./judge/tourn.mhtml:						my $round = $panel->round;
./judge/tourn.mhtml:						my $event = $round->event;
./judge/tourn.mhtml:						my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/tourn.mhtml:						my @ballots = $panel->ballots; 
./judge/tourn.mhtml:						my $chair;
./judge/tourn.mhtml:						foreach my $ballot (@ballots) { 
./judge/tourn.mhtml:						my $aff_string = $event->setting("aff_label");
./judge/tourn.mhtml:						my $neg_string = $event->setting("neg_label");
./judge/tourn.mhtml:%								foreach my $entry (@entries) { 
./judge/tourn.mhtml:%			my @done =  $m->comp("/funclib/judge_panels.mas", judge => $judge, post_results => 1);
./judge/tourn.mhtml:%				my %used;
./judge/tourn.mhtml:%				foreach my $done (@done) { 
./judge/tourn.mhtml:%					my $event = $done->round->event;
./judge/tourn.mhtml:%					my @entries = $m->comp('/funclib/panel_entries.mas', panel => $done);
./judge/tourn.mhtml:%					my @scores = $m->comp('/funclib/panel_scores.mas', panel => $done, judge => $judge);
./judge/tourn.mhtml:%					my %scores_by_recipient =();
./judge/tourn.mhtml:%					foreach my $score (@scores) {  
./judge/tourn.mhtml:%							foreach my $entry (@entries) { 
./judge/tourn.mhtml:%							foreach my $entry (@entries) { 
./judge/tourn.mhtml:%									foreach my $score (@scores) { 
./judge/tourn.mhtml:%							foreach my $entry (@entries) { 
./judge/tourn.mhtml:%								foreach my $student ($entry->students) { 
./judge/tourn.mhtml:%									my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/tourn.mhtml:%											my $notfirst;
./judge/tourn.mhtml:%											foreach my $score (@scores) { 
./judge/tourn.mhtml:%											my ($winner, $side, $result) = $m->comp("/funclib/panel_winner.mas", panel => $done);
./judge/wsdc_ballot.mhtml:		my $err = "I didn't get both a judge and a ballot record";
./judge/wsdc_ballot.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/wsdc_ballot.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/wsdc_ballot.mhtml:		my $err = "No ballots found for that judge and that panel.";
./judge/wsdc_ballot.mhtml:	my $round = $panel->round;
./judge/wsdc_ballot.mhtml:	my $event = $round->event;
./judge/wsdc_ballot.mhtml:	my $category = $event->category;
./judge/wsdc_ballot.mhtml:	my $tourn = $category->tourn;
./judge/wsdc_ballot.mhtml:		my $err = "You are not authorized to enter ballots for that judge.";
./judge/wsdc_ballot.mhtml:		my $err = "That tournament does not have tiebreakers set.  Please contact the tournament tab staff to let them know.";
./judge/wsdc_ballot.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./judge/wsdc_ballot.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/wsdc_ballot.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/wsdc_ballot.mhtml:	my $ballot_rules = $event->setting("ballot_rules");
./judge/wsdc_ballot.mhtml:	my $type = $event->type;
./judge/wsdc_ballot.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/wsdc_ballot.mhtml:		my $err = "That judge does not have ballots in that debate";
./judge/wsdc_ballot.mhtml:		my $tz = $tourn->tz;
./judge/wsdc_ballot.mhtml:		my $now = DateTime->now(time_zone => $tz);
./judge/wsdc_ballot.mhtml:	my $wins;
./judge/wsdc_ballot.mhtml:	my $points;
./judge/wsdc_ballot.mhtml:	my $ranks;
./judge/wsdc_ballot.mhtml:	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
./judge/wsdc_ballot.mhtml:	my @panel_students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/wsdc_ballot.mhtml:	my $min_content_points = $event->setting("min_content_points");
./judge/wsdc_ballot.mhtml:	my $max_content_points = $event->setting("max_content_points");
./judge/wsdc_ballot.mhtml:	my $min_style_points = $event->setting("min_style_points");
./judge/wsdc_ballot.mhtml:	my $max_style_points = $event->setting("max_style_points");
./judge/wsdc_ballot.mhtml:	my $min_strategy_points = $event->setting("min_strategy_points");
./judge/wsdc_ballot.mhtml:	my $max_strategy_points = $event->setting("max_strategy_points");
./judge/wsdc_ballot.mhtml:	my $min_poi_points = $event->setting("min_poi_points");
./judge/wsdc_ballot.mhtml:	my $max_poi_points = $event->setting("max_poi_points");
./judge/wsdc_ballot.mhtml:	my $increments = $event->setting("point_increments");
./judge/wsdc_ballot.mhtml:	my $step = "1" if $increments eq "whole";
./judge/wsdc_ballot.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/wsdc_ballot.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/wsdc_ballot.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/wsdc_ballot.mhtml:%		my $index = 1;
./judge/wsdc_ballot.mhtml:%		foreach my $ballot (@ballots) { 
./judge/wsdc_ballot.mhtml:%			my $entry = $ballot->entry;
./judge/wsdc_ballot.mhtml:%			my @students = $entry->students;
./judge/wsdc_ballot.mhtml:%				foreach my $position (1 .. 4) { 
./judge/wsdc_ballot.mhtml:%					my $already = $ARGS{$position."_".$ballot->id."_student"};
./judge/wsdc_ballot.mhtml:%								foreach my $student (@students) { 
./judge/wsdc_ballot.mhtml:%							my $multiplier = 1;
./judge/wsdc_ballot.mhtml:%						foreach my $ballot (@ballots) { 
./judge/wsdc_ballot.mhtml:%			foreach my $ballot (@ballots) { 
./judge/wsdc_ballot.mhtml:%			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./judge/wsdc_ballot.mhtml:%		foreach my $ballot (@ballots) { 
./judge/wsdc_ballot.mhtml:%				my $entry = $ballot->entry;
./judge/wsdc_ballot.mhtml:%				my $code = $entry->code;
./judge/wsdc_ballot.mhtml:%				my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/wsdc_ballot.mhtml:%						foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/wsdc_ballot.mhtml:		my $point_scale = $event->setting("point_scale");
./judge/wsdc_ballot.mhtml:		my $speech_times = $event->setting("speech_times");
./judge/wsdc_ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./judge/wsdc_ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./judge/ballot_save.mhtml:        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
./judge/ballot_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/ballot_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_save.mhtml:        my $err = "No ballots found for that judge and that panel.";
./judge/ballot_save.mhtml:        my $err = "You are not authorized to enter ballots for that judge.";
./judge/ballot_save.mhtml:    my @ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id, audit => 0 );
./judge/ballot_save.mhtml:        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
./judge/ballot_save.mhtml:	my $unconfirmed;
./judge/ballot_save.mhtml:	foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:        my $err = "Those ballots were already confirmed.  Please contact tab if you believe there was an error";
./judge/ballot_save.mhtml:	my $round = $panel->round;
./judge/ballot_save.mhtml:	my $event = $round->event;
./judge/ballot_save.mhtml:	my $category = $event->category;
./judge/ballot_save.mhtml:    my $tourn = $category->tourn;
./judge/ballot_save.mhtml:    my $type = $event->type;
./judge/ballot_save.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/ballot_save.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/ballot_save.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./judge/ballot_save.mhtml:    my $tiebreaks = $round->tiebreak_set;
./judge/ballot_save.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/ballot_save.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/ballot_save.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/ballot_save.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/ballot_save.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./judge/ballot_save.mhtml:    my $wins;
./judge/ballot_save.mhtml:    my $team_points;
./judge/ballot_save.mhtml:    my $points;
./judge/ballot_save.mhtml:    my $ranks;
./judge/ballot_save.mhtml:    my $team_ranks;
./judge/ballot_save.mhtml:	my @entries;
./judge/ballot_save.mhtml:	my %entry_values = ();
./judge/ballot_save.mhtml:	my %entry_headcount = ();
./judge/ballot_save.mhtml:	my %entry_students = ();
./judge/ballot_save.mhtml:	my %student_entry = ();
./judge/ballot_save.mhtml:	my $max_headcount;
./judge/ballot_save.mhtml:	my %already;
./judge/ballot_save.mhtml:	my %drop_ballot;
./judge/ballot_save.mhtml:	my %comments_left;
./judge/ballot_save.mhtml:	my $rfd_left;
./judge/ballot_save.mhtml:	foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:		my $entry = $ballot->entry;
./judge/ballot_save.mhtml:			my @students = $entry->students;
./judge/ballot_save.mhtml:			foreach my $student (@students) {
./judge/ballot_save.mhtml:			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first;
./judge/ballot_save.mhtml:			my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/ballot_save.mhtml:			my $title = Tab::Score->search( tag => "title", ballot => $ballot->id )->first;
./judge/ballot_save.mhtml:		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";
./judge/ballot_save.mhtml:		foreach my $key (keys %ARGS) { 
./judge/ballot_save.mhtml:    foreach my $tb ($tiebreaks->tiebreaks) {
./judge/ballot_save.mhtml:	my $total_points;
./judge/ballot_save.mhtml:    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/ballot_save.mhtml:    my $tv++ if $type eq "speech" && $tiebreaks->setting("mfl_time_violation");
./judge/ballot_save.mhtml:    my $forfeit++ if $type eq "speech" && $tiebreaks->setting("forfeits_never_break");
./judge/ballot_save.mhtml:    my $max_points = $event->setting("max_points");
./judge/ballot_save.mhtml:    my $min_points = $event->setting("min_points");
./judge/ballot_save.mhtml:	my $max_ob_points = $event->setting("max_ob_points");
./judge/ballot_save.mhtml:	my $min_ob_points = $event->setting("min_ob_points");
./judge/ballot_save.mhtml:    my $point_increments = $event->setting("point_increments");
./judge/ballot_save.mhtml:    my $point_ties = $event->setting("point_ties");
./judge/ballot_save.mhtml:	my $errs;
./judge/ballot_save.mhtml:		foreach my $ballot (keys %comments_left) { 
./judge/ballot_save.mhtml:	my %student_values = ();
./judge/ballot_save.mhtml:	my $side_disagree;
./judge/ballot_save.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/ballot_save.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/ballot_save.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/ballot_save.mhtml:		my %taken = ();
./judge/ballot_save.mhtml:		my %sides = ();
./judge/ballot_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:			my $side = $ARGS{$ballot->id."_side"};
./judge/ballot_save.mhtml:		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/ballot_save.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
./judge/ballot_save.mhtml:    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
./judge/ballot_save.mhtml:				foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/ballot_save.mhtml:		my %rank_taken;
./judge/ballot_save.mhtml:		my %rank_points;
./judge/ballot_save.mhtml:		foreach my $student (@students) { 
./judge/ballot_save.mhtml:			my $rank = $ARGS{$student->id."_ranks"};
./judge/ballot_save.mhtml:		my $current;
./judge/ballot_save.mhtml:		foreach my $rk (reverse sort keys %rank_points) { 
./judge/ballot_save.mhtml:		my %rank_taken;
./judge/ballot_save.mhtml:		my %rank_points;
./judge/ballot_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:			my $rank = $ARGS{$ballot->id."_ranks"};
./judge/ballot_save.mhtml:		my $current;
./judge/ballot_save.mhtml:		my $not_ok;
./judge/ballot_save.mhtml:		my $ok;
./judge/ballot_save.mhtml:		foreach my $rk (sort keys %rank_points) {
./judge/ballot_save.mhtml:		my %points_taken = ();
./judge/ballot_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:			my $points = $ARGS{$ballot->id."_points"};
./judge/ballot_save.mhtml:		my %points_taken;
./judge/ballot_save.mhtml:		foreach my $student (@students) { 
./judge/ballot_save.mhtml:			my $points = $ARGS{$student->id."_points"};
./judge/ballot_save.mhtml:	my $winner;
./judge/ballot_save.mhtml:		my $winning_ballot = $ARGS{"winner"};
./judge/ballot_save.mhtml:			my $winner_points = $entry_values{$winner->entry->id."_points"};
./judge/ballot_save.mhtml:			foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:				my $bal_points = $entry_values{$ballot->entry->id."_points"};
./judge/ballot_save.mhtml:		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";
./judge/ballot_save.mhtml:		foreach my $key (keys %ARGS) { 
./judge/ballot_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/ballot_save.mhtml:				my $tigers_blood = 0;
./judge/ballot_save.mhtml:				my $winner = Tab::Score->search({ ballot => $ballot->id, tag => "ballot"})->first;
./judge/ballot_save.mhtml:					my $points = Tab::Score->search(ballot => $ballot->id, tag => "points")->first;
./judge/ballot_save.mhtml:					foreach my $student (@students) { 
./judge/ballot_save.mhtml:						my $points = Tab::Score->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;
./judge/ballot_save.mhtml:				foreach my $student (@students) { 
./judge/ballot_save.mhtml:					my $points = Tab::Score->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;
./judge/ballot_save.mhtml:				foreach my $student (@students) { 
./judge/ballot_save.mhtml:					my $value = 0;
./judge/ballot_save.mhtml:					my $ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./judge/ballot_save.mhtml:					my $ranks = Tab::Score->search(ballot => $ballot->id, tag => "rank")->first;
./judge/ballot_save.mhtml:					foreach my $student (@students) { 
./judge/ballot_save.mhtml:						my $ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./judge/ballot_save.mhtml:%			my $winside = $ARGS{"winner_side"};
./judge/ballot_save.mhtml:%			my $side = $aff_string if $winside == 1;
./judge/ballot_save.mhtml:%			my $switch;
./judge/ballot_save.mhtml:%				foreach my $entry (@entries) { 
./judge/ballot_save.mhtml:%								foreach my $student (@{$entry_students{$entry->id}}) { 
./judge/ballot_save.mhtml:%			foreach my $entry (@entries) { 
./judge/ballot_save.mhtml:%					my $switch;
./judge/ballot_save.mhtml:%					foreach my $student (@{$entry_students{$entry->id}}) { 
./judge/ballot_save.mhtml:%				foreach my $entry (@entries) { 
./judge/conflict_school.mhtml:	my @already = Tab::Strike->search( judge => $judge_id, school => $school_id, registrant => 1, conflictee => 1 );
./judge/conflict_school.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/conflict_school.mhtml:	my $tourn = $judge->category->tourn;
./judge/conflict_school.mhtml:	my $msg = "Conflict already existed.";
./judge/wsdc_save.mhtml:        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
./judge/wsdc_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/wsdc_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/wsdc_save.mhtml:        my $err = "No ballots found for that judge and that panel.";
./judge/wsdc_save.mhtml:        my $err = "You are not authorized to enter ballots for that judge.";
./judge/wsdc_save.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id, audit => 0 );
./judge/wsdc_save.mhtml:	my %ballot_by_id = map {$_->id => $_} @ballots;
./judge/wsdc_save.mhtml:        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
./judge/wsdc_save.mhtml:	my $unconfirmed;
./judge/wsdc_save.mhtml:	foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:        my $err = "Those ballots were already confirmed.  Please contact tab if you believe there was an error";
./judge/wsdc_save.mhtml:	my $round = $panel->round;
./judge/wsdc_save.mhtml:	my $event = $round->event;
./judge/wsdc_save.mhtml:	my $category = $event->category;
./judge/wsdc_save.mhtml:    my $tourn = $category->tourn;
./judge/wsdc_save.mhtml:    my $type = $event->type;
./judge/wsdc_save.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/wsdc_save.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/wsdc_save.mhtml:	my $no_lpw;
./judge/wsdc_save.mhtml:    my $tiebreaks = $round->tiebreak_set;
./judge/wsdc_save.mhtml:    my $wins;
./judge/wsdc_save.mhtml:    my $points;
./judge/wsdc_save.mhtml:	my $total_points;
./judge/wsdc_save.mhtml:    my $ranks;
./judge/wsdc_save.mhtml:	my @entries;
./judge/wsdc_save.mhtml:	my %ballot_points = ();
./judge/wsdc_save.mhtml:	my %already;
./judge/wsdc_save.mhtml:	foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:		my $entry = $ballot->entry;
./judge/wsdc_save.mhtml:			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first;
./judge/wsdc_save.mhtml:			my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/wsdc_save.mhtml:	my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";
./judge/wsdc_save.mhtml:	foreach my $key (keys %ARGS) { 
./judge/wsdc_save.mhtml:    foreach my $tb ($tiebreaks->tiebreaks) {
./judge/wsdc_save.mhtml:    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/wsdc_save.mhtml:	my %student_by_id = map {$_->id => $_} @students;
./judge/wsdc_save.mhtml:    my $min_content_points = $event->setting("min_content_points");
./judge/wsdc_save.mhtml:    my $max_content_points = $event->setting("max_content_points");
./judge/wsdc_save.mhtml:    my $min_style_points = $event->setting("min_style_points");
./judge/wsdc_save.mhtml:    my $max_style_points = $event->setting("max_style_points");
./judge/wsdc_save.mhtml:    my $min_strategy_points = $event->setting("min_strategy_points");
./judge/wsdc_save.mhtml:    my $max_strategy_points = $event->setting("max_strategy_points");
./judge/wsdc_save.mhtml:    my $min_poi_points = $event->setting("min_poi_points");
./judge/wsdc_save.mhtml:    my $max_poi_points = $event->setting("max_poi_points");
./judge/wsdc_save.mhtml:    my $point_increments = $event->setting("point_increments");
./judge/wsdc_save.mhtml:    my $point_ties = $event->setting("point_ties");
./judge/wsdc_save.mhtml:	my $errs;
./judge/wsdc_save.mhtml:	my %student_values = ();
./judge/wsdc_save.mhtml:	my $side_disagree;
./judge/wsdc_save.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/wsdc_save.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/wsdc_save.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/wsdc_save.mhtml:		my %taken = ();
./judge/wsdc_save.mhtml:		my %sides = ();
./judge/wsdc_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:			my $side = $ARGS{$ballot->id."_side"};
./judge/wsdc_save.mhtml:		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/wsdc_save.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
./judge/wsdc_save.mhtml:    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
./judge/wsdc_save.mhtml:				foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/wsdc_save.mhtml:	my %student_by_position = ();
./judge/wsdc_save.mhtml:	foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:		foreach my $position (1 .. 4) { 
./judge/wsdc_save.mhtml:			my $key = $position."_".$ballot->id."_student";
./judge/wsdc_save.mhtml:			my $student_id = $ARGS{$key};
./judge/wsdc_save.mhtml:		my %rank_taken;
./judge/wsdc_save.mhtml:		my %rank_points;
./judge/wsdc_save.mhtml:		foreach my $student (@students) { 
./judge/wsdc_save.mhtml:			my $rank = $ARGS{$student->id."_ranks"};
./judge/wsdc_save.mhtml:		my $current;
./judge/wsdc_save.mhtml:		foreach my $rk (reverse sort keys %rank_points) { 
./judge/wsdc_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:			foreach my $position (1 .. 4) { 
./judge/wsdc_save.mhtml:				my $student = $student_by_position{$ballot->id}{$position};
./judge/wsdc_save.mhtml:				my $multiplier = 1;
./judge/wsdc_save.mhtml:				foreach my $category ("content", "style", "strategy", "poi") { 
./judge/wsdc_save.mhtml:					my $speech_string = ucfirst($category)." points for ".$student->first." ".$student->last;
./judge/wsdc_save.mhtml:					my $tag = $category;
./judge/wsdc_save.mhtml:					my $ballot_points = $student_values{$student->id}{$tag};
./judge/wsdc_save.mhtml:			my %points_taken = ();
./judge/wsdc_save.mhtml:			foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:	my $winner;
./judge/wsdc_save.mhtml:			my $winner_points = $ballot_points{$winner->id};
./judge/wsdc_save.mhtml:			foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:				my $bal_points = $ballot_points{$ballot->id};
./judge/wsdc_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:				my $tigers_blood = 0;
./judge/wsdc_save.mhtml:				my $winner = Tab::Score->search({ ballot => $ballot->id, tag => "ballot"})->first;
./judge/wsdc_save.mhtml:			foreach my $position (1 .. 4) { 
./judge/wsdc_save.mhtml:				my $student = $student_by_position{$ballot->id}{$position};
./judge/wsdc_save.mhtml:					my $tag = "points";
./judge/wsdc_save.mhtml:					my $tiebreak = 3;
./judge/wsdc_save.mhtml:					my $existing_points = Tab::Score->search({ 
./judge/wsdc_save.mhtml:					my $value = 0;
./judge/wsdc_save.mhtml:					my $existing_ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./judge/wsdc_save.mhtml:%				foreach my $entry (@entries) { 
./judge/wsdc_save.mhtml:%				my $winside = $ARGS{"winner_side"};
./judge/wsdc_save.mhtml:%				my $side = $aff_string if $winside == 1;
./judge/wsdc_save.mhtml:%				foreach my $ballot (@ballots) { 
./judge/wsdc_save.mhtml:%					my $entry = $ballot->entry;
./judge/wsdc_save.mhtml:%						foreach my $position (1 .. 4) { 
./judge/wsdc_save.mhtml:%							my $student = $student_by_position{$ballot->id}{$position};
./judge/hire_edit.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./judge/hire_edit.mhtml:	my $already = $m->comp("/funclib/person_judges.mas", person => $person, tourn => $tourn)->first;
./judge/hire_edit.mhtml:	my $switch;
./judge/hire_edit.mhtml:%			my $max_rounds = $already->category->setting("max_rounds");
./judge/hire_edit.mhtml:%			my $max_hires = $max_rounds - $already->obligation;
./judge/hire_edit.mhtml:%			foreach my $hire ($already->hires) { 
./judge/hire_edit.mhtml:%					my $warn = "This will cancel your judge hiring, and notify the hiring school coaches.  Are you sure you want to cancel this hire?";
./judge/hire_edit.mhtml:%			foreach my $category ($m->comp("/funclib/category_exchange.mas", tourn => $tourn)) {
./judge/hire_edit.mhtml:% 				my $max_rounds = $category->setting("max_rounds");
./judge/rfd_only_save.mhtml:		my $err = "I didn't get both a judge and a ballot record";
./judge/rfd_only_save.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/rfd_only_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/rfd_only_save.mhtml:	my $round = $panel->round;
./judge/rfd_only_save.mhtml:	my $wudc++ if $round->event->type eq "wudc";
./judge/rfd_only_save.mhtml:		my $err = "No ballots found for that judge and that panel.";
./judge/rfd_only_save.mhtml:		my $err = "You are not authorized to enter ballots for that judge.";
./judge/rfd_only_save.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/rfd_only_save.mhtml:		my $err = "That judge does not judge in that room.";
./judge/rfd_only_save.mhtml:	my $tourn = $judge->category->tourn;
./judge/rfd_only_save.mhtml:	my $type = $round->event->type;
./judge/rfd_only_save.mhtml:	foreach my $ballot ($panel->ballots( judge => $judge_id)) { 
./judge/rfd_only_save.mhtml:		my $comments = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/rfd_only_save.mhtml:		my $new_comments = $ARGS{"comments_".$ballot->id};
./judge/rfd_only_save.mhtml:		my $rfd = Tab::Score->search( ballot => $ballot->id, tag => "rfd")->first;
./judge/rfd_only_save.mhtml:		my $new_rfd = $ARGS{"rfd"};
./judge/hire_cancel.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./judge/hire_cancel.mhtml:	my $judge = $hire->judge;
./judge/hire_cancel.mhtml:	my $hired = $judge->hired - $hire->rounds;
./judge/hire_cancel.mhtml:	my $description = "Account ".$person->email." deleted a judge exchange hire arrangement with ".$hire->school->name;
./judge/hire_cancel.mhtml:	my $subject = "Judge ".$judge->first." ".$judge->last." rescinded your hire";
./judge/hire_cancel.mhtml:	my $body = "
./judge/hire_cancel.mhtml:	foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $hire->school->chapter)) { 
./judge/conflict_tourn_rm.mhtml:		my $err = "No such conflict";
./judge/conflict_tourn_rm.mhtml:	my $conflict = Tab::Strike->retrieve($conflict_id);
./judge/conflict_tourn_rm.mhtml:	my $judge = $conflict->judge;
./judge/conflict_tourn_rm.mhtml:		my $err = "That conflict does not belong to your user account.  Stop messing around.";
./judge/conflict_tourn_rm.mhtml:	my $msg = "Conflict against ".$conflict->entry->name." removed" if $conflict->type eq "conflict" && $conflict->entry;
./judge/wudc_save.mhtml:	my %entry_win = ();
./judge/wudc_save.mhtml:	my %entry_rank = ();
./judge/wudc_save.mhtml:	my %entry_points = ();
./judge/wudc_save.mhtml:	my %entry_speakerorder = ();
./judge/wudc_save.mhtml:	my %student_values = ();
./judge/wudc_save.mhtml:        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
./judge/wudc_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/wudc_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/wudc_save.mhtml:	my $round = $panel->round;
./judge/wudc_save.mhtml:	my $tz = $round->event->tourn->tz;
./judge/wudc_save.mhtml:	my $now = DateTime->now( time_zone => $tz );
./judge/wudc_save.mhtml:        my $err = "No ballots found for that judge and that panel.";
./judge/wudc_save.mhtml:        my $err = "You are not authorized to enter ballots for that judge.";
./judge/wudc_save.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/wudc_save.mhtml:        my $err = "That judge does not judge in that room.";
./judge/wudc_save.mhtml:    my $type = $panel->round->event->type;
./judge/wudc_save.mhtml:    my $tiebreaks = $panel->round->tiebreak_set;
./judge/wudc_save.mhtml:    my $wins;
./judge/wudc_save.mhtml:    my $points;
./judge/wudc_save.mhtml:    my $ranks;
./judge/wudc_save.mhtml:    my $team_ranks;
./judge/wudc_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./judge/wudc_save.mhtml:	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/wudc_save.mhtml:	foreach my $ballot (@ballots) { 
./judge/wudc_save.mhtml:		my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";
./judge/wudc_save.mhtml:		foreach my $key (keys %ARGS) { 
./judge/wudc_save.mhtml:	my $champ;
./judge/wudc_save.mhtml:		my $win_count;
./judge/wudc_save.mhtml:		my %positions_taken;
./judge/wudc_save.mhtml:		my $errs;
./judge/wudc_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/wudc_save.mhtml:		foreach my $ballot (@ballots) { 
./judge/wudc_save.mhtml:			my $win = 0;
./judge/wudc_save.mhtml:			my $value = Tab::Score->search( ballot => $ballot->id, tag => "ballot" )->first;
./judge/wudc_save.mhtml:		my $result_set = Tab::ResultSet->search( event => $round->event->id, bracket => 1)->first;
./judge/wudc_save.mhtml:		my $result = Tab::Result->search( entry => $champ, round => $round->id, result_set => $result_set->id)->first;
./judge/wudc_save.mhtml:		my $tourn = $judge->category->tourn;
./judge/wudc_save.mhtml:		my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/wudc_save.mhtml:		my $max_points = $panel->round->event->setting("max_points");
./judge/wudc_save.mhtml:		my $min_points = $panel->round->event->setting("min_points");
./judge/wudc_save.mhtml:		my $point_increments = $panel->round->event->setting("point_increments");
./judge/wudc_save.mhtml:		my $point_ties = $panel->round->event->setting("point_ties");
./judge/wudc_save.mhtml:		my $errs;
./judge/wudc_save.mhtml:		my %entry_values = ();
./judge/wudc_save.mhtml:		my %points_taken;
./judge/wudc_save.mhtml:		foreach my $student (@students) { 
./judge/wudc_save.mhtml:			my $points = $ARGS{$student->id."_points"};
./judge/wudc_save.mhtml:				my $rounded_points = $points + .5;
./judge/wudc_save.mhtml:		my %used_points = ();
./judge/wudc_save.mhtml:		foreach my $entry (@entries) { 
./judge/wudc_save.mhtml:			my $url_args = "?panel_id=$panel_id&judge_id=$judge_id";
./judge/wudc_save.mhtml:			foreach my $key (keys %ARGS) { 
./judge/wudc_save.mhtml:			my @entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;
./judge/wudc_save.mhtml:			my $rank = 1;
./judge/wudc_save.mhtml:			foreach my $entry (@entries) { 
./judge/wudc_save.mhtml:			foreach my $ballot (@ballots) { 
./judge/wudc_save.mhtml:				foreach my $student (@students) { 
./judge/wudc_save.mhtml:%			my $switch;
./judge/wudc_save.mhtml:%			foreach my $entry (@entries) { 
./judge/wudc_save.mhtml:%				my $switch;
./judge/wudc_save.mhtml:%				foreach my $entry (@entries) { 
./judge/wudc_save.mhtml:%						foreach my $student ($entry->students) { 
./judge/conflict_entry.mhtml:	my @already = Tab::Strike->search( judge => $judge_id, entry => $entry_id, registrant => 1, conflictee => 1);
./judge/conflict_entry.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/conflict_entry.mhtml:	my $tourn = $judge->category->tourn;
./judge/conflict_entry.mhtml:	my $msg = "Conflict already existed.";
./judge/index.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/index.mhtml:		my $name = $person->last;
./judge/index.mhtml:	my @judges = $person->judges unless $judge;
./judge/index.mhtml:	my $now = DateTime->now;
./judge/index.mhtml:%		foreach my $judge (@judges) { 
./judge/index.mhtml:%			my $category = $judge->category;
./judge/index.mhtml:%			my $tourn = $category->tourn;
./judge/index.mhtml:%			my $tz = $tourn->tz;  
./judge/index.mhtml:%			my $start = $tourn->start->set_time_zone($tz);
./judge/index.mhtml:%			my $end = $tourn->end->set_time_zone($tz);
./judge/conflict_rm.mhtml:		my $err = "No such conflict";
./judge/conflict_rm.mhtml:	my $conflict = Tab::Conflict->retrieve($conflict_id);
./judge/conflict_rm.mhtml:		my $err = "That conflict does not belong to your user account.  Stop messing around.";
./judge/conflict_rm.mhtml:	my $msg = "Conflict against ".$conflict->conflicted->last." removed" if $conflict->conflicted;
./judge/claim.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./judge/claim.mhtml:		my @admins;
./judge/claim.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $cj->chapter)) { 
./judge/claim.mhtml:				my $msg = "You have claimed this judge record as yours (as you are an admin of that team)";
./judge/claim.mhtml:		my $subject = "[TabRoom] ". $person->email." requests access to judge ".$cj->first." ".$cj->last;
./judge/claim.mhtml:		my $body = "The Tabroom user \n\n".$person->first." ".$person->last." (".$person->email.") \n";
./judge/claim.mhtml:		foreach my $admin (@admins) { 
./judge/claim.mhtml:		my $msg = "You have requested access to the judge ".$cj->first." ".$cj->last." from the team coaches.";
./judge/claim.mhtml:		my $judge = Tab::Judge->retrieve($judge_id);
./judge/claim.mhtml:		foreach my $admin ($m->comp("/funclib/tourn_admins.mas", admin => 1, tourn => $judge->category->tourn)) { 
./judge/claim.mhtml:				my $msg = "You have claimed this judge record as yours (as you are an admin of that tournament)";
./judge/claim.mhtml:		my $msg = "You have requested access to the judge ".$judge->first." ".$judge->last." from the tournament administrators.";
./judge/paradigm_save.mhtml:	my $tz = $person->tz;
./judge/paradigm_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./judge/paradigm_save.mhtml:		my $scrubber = HTML::Scrubber->new( style => 1, allow => [ qw[ p b i u hr br ol ul li strong] ] );
./judge/paradigm_save.mhtml:		my $text = $scrubber->scrub($paradigm);
./judge/paradigm_save.mhtml:	my $msg = "Paradigm saved";
./judge/ballot_comments_save.mhtml:		my $err = "I didn't get both a judge and a ballot record";
./judge/ballot_comments_save.mhtml:	my $ballot = Tab::Ballot->retrieve($ballot_id);
./judge/ballot_comments_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot_comments_save.mhtml:		my $err = "No ballots found for that judge and that ballot.";
./judge/ballot_comments_save.mhtml:		my $err = "You are not authorized to enter ballots for that judge.";
./judge/ballot_comments_save.mhtml:		my $err = "That judge does not judge in that room.";
./judge/ballot_comments_save.mhtml:	my $already = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./judge/diverse_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot.mhtml:		my $err = "I didn't get both a judge and a ballot record";
./judge/ballot.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./judge/ballot.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./judge/ballot.mhtml:	my $round = $panel->round;
./judge/ballot.mhtml:	my $event = $round->event;
./judge/ballot.mhtml:	my $category = $event->category;
./judge/ballot.mhtml:	my $tourn = $category->tourn;
./judge/ballot.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./judge/ballot.mhtml:	my $allow_lowpoints++ if $event->setting("allow_lowpoints");
./judge/ballot.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/ballot.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/ballot.mhtml:	my $ballot_rules = $event->setting("ballot_rules");
./judge/ballot.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/ballot.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/ballot.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/ballot.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/ballot.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./judge/ballot.mhtml:	my $type = $event->type;
./judge/ballot.mhtml:	my $wudc++ if $type eq "wudc";
./judge/ballot.mhtml:		my $err = "No ballots found for that judge and that panel.";
./judge/ballot.mhtml:		my $err = "You are not authorized to enter ballots for that judge.";
./judge/ballot.mhtml:		my $err = "That tournament does not have tiebreakers set.  Please contact the tournament tab staff to let them know.";
./judge/ballot.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/ballot.mhtml:		my $err = "That judge does not judge in that room.";
./judge/ballot.mhtml:		my $tz = $tourn->tz;
./judge/ballot.mhtml:		my $now = DateTime->now(time_zone => $tz);
./judge/ballot.mhtml:	my $wins;
./judge/ballot.mhtml:	my $points;
./judge/ballot.mhtml:	my $ranks;
./judge/ballot.mhtml:	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
./judge/ballot.mhtml:	my $team_points++ if $event->setting("team_points");
./judge/ballot.mhtml:	my @panel_students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./judge/ballot.mhtml:	my $tv++ if $type eq "speech" && $round->tiebreak_set->setting("mfl_time_violation");
./judge/ballot.mhtml:	my $forfeit++ if $type eq "speech" && $round->tiebreak_set->setting("forfeits_never_break");
./judge/ballot.mhtml:	my $max_points = $event->setting("max_points");
./judge/ballot.mhtml:	my $min_points = $event->setting("min_points");
./judge/ballot.mhtml:	my $max_ob_points = $event->setting("max_ob_points");
./judge/ballot.mhtml:	my $min_ob_points = $event->setting("min_ob_points");
./judge/ballot.mhtml:	my $increments = $event->setting("point_increments");
./judge/ballot.mhtml:	my $step = "1" if $increments eq "whole";
./judge/ballot.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./judge/ballot.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/ballot.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/ballot.mhtml:%			my $index = 1;
./judge/ballot.mhtml:%			my $switch;
./judge/ballot.mhtml:%			my $i_can_haz_doubled;
./judge/ballot.mhtml:%			foreach my $ballot (@ballots) { 
./judge/ballot.mhtml:%				my $entry = $ballot->entry;
./judge/ballot.mhtml:%				my @students = $entry->students;
./judge/ballot.mhtml:%				my @doubled = $m->comp("/funclib/entry_double.mas", entry => $entry, round => $round);
./judge/ballot.mhtml:%							foreach my $student ($entry->students) { 
./judge/ballot.mhtml:%						my $ballot_title = Tab::Score->search( tag => "title", ballot => $ballot->id)->first;
./judge/ballot.mhtml:%						my $title = $ballot_title->content if $ballot_title;
./judge/ballot.mhtml:%						my $notfirst;
./judge/ballot.mhtml:%							foreach my $student (@students) { 
./judge/ballot.mhtml:%							foreach my $ballot (@ballots) { 
./judge/ballot.mhtml:%			foreach my $ballot (@ballots) { 
./judge/ballot.mhtml:%			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./judge/ballot.mhtml:%		foreach my $ballot (@ballots) { 
./judge/ballot.mhtml:				my $entry = $ballot->entry;
./judge/ballot.mhtml:				my $code = $entry->code;
./judge/ballot.mhtml:					foreach my $student ($entry->students) { 
./judge/ballot.mhtml:%				my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./judge/ballot.mhtml:%					foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./judge/ballot.mhtml:		my $point_scale = $event->setting("point_scale");
./judge/ballot.mhtml:		my $speech_times = $event->setting("speech_times");
./judge/ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./judge/ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./judge/conflicts.mhtml:		my $other = Tab::Person->retrieve($other_id);
./judge/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, conflicted => $other_id );
./judge/conflicts.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./judge/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, chapter => $chapter_id );
./judge/conflicts.mhtml:	my @chapters;
./judge/conflicts.mhtml:	my @persons;
./judge/conflicts.mhtml:	my @existings = Tab::Conflict->search( person => $person->id );
./judge/conflicts.mhtml:%			my @nowjudges = $m->comp("/funclib/person_judges.mas", person => $person, future => 1, conflictable => 1);
./judge/conflicts.mhtml:%							foreach my $judge (@nowjudges) { 
./judge/conflicts.mhtml:%				foreach my $other (@persons) { 
./judge/conflicts.mhtml:%					my @chapters;
./judge/conflicts.mhtml:%					my @students = Tab::Student->search( person => $other->id );
./judge/conflicts.mhtml:%					my @chapter_judges = Tab::ChapterJudge->search( person => $other->id );
./judge/conflicts.mhtml:%					foreach my $person (@chapter_judges, @students) { 
./judge/conflicts.mhtml:%							foreach my $chapter (@chapters) { 
./judge/conflicts.mhtml:%				foreach my $chapter (@chapters) { 
./judge/conflicts.mhtml:%				foreach my $existing (@existings) { 
./judge/conflicts.mhtml:%					my @cjs = $existing->conflicted->chapter_judges;
./judge/conflicts.mhtml:%							foreach my $judge (@cjs) { 
./judge/conflicts.mhtml:%					my @students = $existing->conflicted->students;
./judge/conflicts.mhtml:%						foreach my $student (@students) { 
./judge/conflicts.mhtml:%				my $judge = Tab::Judge->retrieve($judge_id);
./judge/conflicts.mhtml:%					foreach my $conflict (Tab::Strike->search( judge => $judge_id, registrant => 1, conflictee => 1 )) { 
./judge/conflicts.mhtml:%					foreach my $event ($judge->category->events) { 
./judge/conflicts.mhtml:%									foreach my $entry (sort {$a->code cmp $b->code} $event->entries) {
./judge/conflicts.mhtml:%										my $schname = substr($entry->school->short_name,0,8);
./judge/conflicts.mhtml:%								foreach my $school (sort {$a->name cmp $b->name} $judge->category->tourn->schools) { 
./judge/search.mhtml:	my @cjs = Tab::ChapterJudge->search_like( first => $first."%", last => $last."%", person => 0 );
./judge/search.mhtml:	my @judges = Tab::Judge->search_person_judges($first."%", $last."%");
./judge/search.mhtml:	my %cjs_by_id = ();
./judge/search.mhtml:	foreach my $cjs (@cjs) { 
./judge/search.mhtml:	my $found;
./judge/search.mhtml:%			foreach my $cjs (@cjs) { 
./judge/search.mhtml:%			foreach my $judge (@judges) { 
./judge/panels.mhtml:%	my @ballot_panels = $m->comp("/funclib/person_panels.mas", person => $person);
./judge/panels.mhtml:%	my @list_panels = $m->comp("/funclib/person_panels.mas", person => $person, listonly => 1);
./judge/panels.mhtml:%	my @done_panels = $m->comp("/funclib/person_panels.mas", person => $person, done => 1);
./judge/panels.mhtml:%	my %panels_done = ();
./judge/panels.mhtml:%		foreach my $panel (@ballot_panels) { 
./judge/panels.mhtml:			my $round = $panel->round;
./judge/panels.mhtml:	   		my $no_side_constraints++ if $round->event->setting('no_side_constraints');
./judge/panels.mhtml:			my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./judge/panels.mhtml:			my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./judge/panels.mhtml:			my $tz = $round->event->tourn->tz;
./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($panel->judge);
./judge/panels.mhtml:			my $tourn = $judge->category->tourn;
./judge/panels.mhtml:			my $event = $round->event;
./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./judge/panels.mhtml:			my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/panels.mhtml:			my @scores = $m->comp('/funclib/panel_scores.mas', panel => $panel, judge => $judge);
./judge/panels.mhtml:			my @ballots = $panel->ballots; 
./judge/panels.mhtml:			my $chair;
./judge/panels.mhtml:			foreach my $ballot (@ballots) { 
./judge/panels.mhtml:			my $scored;
./judge/panels.mhtml:			foreach my $score (@scores) {  
./judge/panels.mhtml:%					my $start = $round->start_time;
./judge/panels.mhtml:%						foreach my $entry (sort {$a->speaks <=> $b->speaks} @entries) { 
./judge/panels.mhtml:%						foreach my $entry (@entries) { 
./judge/panels.mhtml:%		my $last_round;
./judge/panels.mhtml:%		foreach my $panel (@list_panels) { 
./judge/panels.mhtml:			my $round = $panel->round;
./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($panel->judge);
./judge/panels.mhtml:			my $tourn = $judge->category->tourn;
./judge/panels.mhtml:			my $event = $round->event;
./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./judge/panels.mhtml:			my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/panels.mhtml:			my $key = $round->id."-".$panel->flight;
./judge/panels.mhtml:%					foreach my $entry (@entries) { 
./judge/panels.mhtml:%		foreach my $done (@done_panels) { 
./judge/panels.mhtml:			my $round = $done->round;
./judge/panels.mhtml:			my $event = $round->event;
./judge/panels.mhtml:			my $category = $event->category;
./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($done->judge) if $done->judge;
./judge/panels.mhtml:			my @entries = $m->comp('/funclib/panel_entries.mas', panel => $done);
./judge/panels.mhtml:			my @scores = $m->comp('/funclib/panel_scores.mas', panel => $done, judge => $judge);
./judge/panels.mhtml:			my %scores_by_recipient =();
./judge/panels.mhtml:			foreach my $score (@scores) {  
./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./judge/panels.mhtml:			my $ballot_entry_name = $category->setting("ballot_entry_names");
./judge/panels.mhtml:			my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./judge/panels.mhtml:			my $ballot_entry_title = $category->setting("ballot_entry_titles");
./judge/panels.mhtml:			my $ballot_school_code = $category->setting("ballot_school_codes");
./judge/panels.mhtml:			my $ballot_school_name = $category->setting("ballot_school_names");
./judge/panels.mhtml:%			foreach my $entry (@entries) { 
./judge/panels.mhtml:%								foreach my $student ($entry->students) { 
./judge/panels.mhtml:%							my $title = Tab::Score->search( ballot => $entry->ballot, tag => "title")->first;
./judge/panels.mhtml:%						my $notfirst;
./judge/panels.mhtml:%						foreach my $score (@scores) { 
./judge/panels.mhtml:%							foreach my $student ($entry->students) { 
./judge/panels.mhtml:%								my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/panels.mhtml:%										my $notfirst;
./judge/panels.mhtml:%										foreach my $score (@scores) { 
./judge/panels.mhtml:%									foreach my $student ($entry->students) { 
./judge/panels.mhtml:%										my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/panels.mhtml:%										foreach my $score (@scores) { 
./judge/menu.mas:%			foreach my $cj ($person->chapter_judges) { 
./judge/menu.mas:%			my $count;
./judge/menu.mas:%			foreach my $judge (sort {$b->id <=> $a->id} $person->judges) { 
./judge/re_confirm.mhtml:        my $err = "I didn't get both a judge and a ballot record.  Hit back and refresh and try again.";
./judge/re_confirm.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./judge/re_confirm.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./judge/re_confirm.mhtml:        my $err = "No ballots found for that judge and that panel.";
./judge/re_confirm.mhtml:        my $err = "You are not authorized to enter ballots for that judge.";
./judge/re_confirm.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./judge/re_confirm.mhtml:        my $err = "That judge does not judge in that room.";
./judge/re_confirm.mhtml:	my $switch;
./judge/re_confirm.mhtml:	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);
./judge/re_confirm.mhtml:	my @scores = $m->comp('/funclib/panel_scores.mas', panel => $panel, judge => $judge);
./judge/re_confirm.mhtml:	my %scores_by_recipient =();
./judge/re_confirm.mhtml:	foreach my $score (@scores) {  
./judge/re_confirm.mhtml:	my $round = $panel->round;
./judge/re_confirm.mhtml:	my $event = $round->event;
./judge/re_confirm.mhtml:	my $aff_string = $event->setting("aff_label");
./judge/re_confirm.mhtml:	my $neg_string = $event->setting("neg_label");
./judge/re_confirm.mhtml:%		foreach my $entry (@entries) { 
./judge/re_confirm.mhtml:%					foreach my $score (@scores) { 
./judge/re_confirm.mhtml:%					foreach my $student ($entry->students) { 
./judge/re_confirm.mhtml:%						my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./judge/re_confirm.mhtml:%							my $notfirst;
./judge/re_confirm.mhtml:%							foreach my $score (@scores) { 
./chapter/judge_retire.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_retire.mhtml:	my $chapter = $chapter_judge->chapter;
./chapter/judge_retire.mhtml:	my $msg;
./chapter/ndt_bid_honors.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/ndt_bid_honors.mhtml:	my ($start_dt, $end_dt) = $m->comp("/funclib/seasonal_date_range.mas");			
./chapter/ndt_bid_honors.mhtml:	my @tourneys = Tab::Tourn->search_tourn;
./chapter/ndt_bid_honors.mhtml:	my @honors = Tab::Result->search_honors;
./chapter/ndt_bid_honors.mhtml:%			foreach my $honor (@honors) {
./chapter/ndt_bid_honors.mhtml:%					foreach my $tourn (@tourneys) { 
./chapter/chapter_welcome.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/students.mhtml:	my $chapter;
./chapter/students.mhtml:		my @chapters = $person->chapters;
./chapter/students.mhtml:			my $err = "You have not chosen a chapter.  Please choose at right";
./chapter/students.mhtml:	my @students;
./chapter/students.mhtml:    my @student_requests = Tab::Student->search_where({ 
./chapter/students.mhtml:	my $message;
./chapter/students.mhtml:%				foreach my $request (@student_requests) { 
./chapter/students.mhtml:% 			foreach my $student (@students) { 
./chapter/ndt_honors_save.mas:	my @result_sets = Tab::ResultSet->search( tourn => $tourn_id, label => 'ndt_honors' );
./chapter/ndt_honors_save.mas:		my %hash = (tourn => $tourn_id, published => 1, label => 'ndt_honors');
./chapter/ndt_honors_save.mas:		my $obj = Tab::ResultSet->insert(\%hash);
./chapter/ndt_honors_save.mas:	my %hash2 = ( student => $student_id, result_set => $result_sets[0]->id, honor => $honor );
./chapter/ndt_honors_save.mas:	my $obj2 = Tab::Result->insert(\%hash2);
./chapter/import_csv_students.mhtml:	my $chapter =  Tab::Chapter->retrieve($chapter_id);
./chapter/import_csv_students.mhtml:	my $tz = $person->tz;
./chapter/import_csv_students.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/import_csv_students.mhtml:	my $req = Apache2::Request->new($r);
./chapter/import_csv_students.mhtml:	my @csv_handles = $r->upload; 
./chapter/import_csv_students.mhtml:	my $csv_file = $req->upload($csv_handles[0]);
./chapter/import_csv_students.mhtml:		my $err = "No students imported.  You must upload a CSV file, not an Excel or other file.  <br /> <br /> Save the file in Excel as Comma-Separated Values and try again.  File type: ".$csv_file->type;
./chapter/import_csv_students.mhtml:	my $io = $csv_file->io;
./chapter/import_csv_students.mhtml:	my @lines = <$io>;
./chapter/import_csv_students.mhtml:	my $has_codes;
./chapter/import_csv_students.mhtml:	my @students;
./chapter/import_csv_students.mhtml:	foreach my $student (@students) { 
./chapter/import_csv_students.mhtml:		my ($first_name, $last_name, $gender, $grad_year, $novice, $phonetic, $diet) = split(/,/, $student);
./chapter/import_csv_students.mhtml:	my $msg = scalar @students ." students imported into ". $chapter->name;
./chapter/admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./chapter/admin_rm.mhtml:    my @acc = Tab::Permission->search( person => $person->id, chapter => $chapter_id);
./chapter/admin_rm.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./chapter/admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./chapter/admin_rm.mhtml:	my $msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./chapter/settings.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/settings.mhtml:	my @regions = $m->comp("/funclib/chapter_regions.mas", chapter => $chapter);
./chapter/settings.mhtml:	my %region_yes = map {$_->id => 1} @regions;
./chapter/settings.mhtml:%			my $onclick = "showMe('league', this)";
./chapter/settings.mhtml:%						foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) { 
./chapter/settings.mhtml:%							foreach my $region ($ns->circuit->regions) { 
./chapter/settings.mhtml:%		foreach my $permission ($chapter->permissions) { 
./chapter/settings.mhtml:%			my $coach = $permission->person;
./chapter/student_search.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/student_search.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_search.mhtml:	my ($stud_acc) = Tab::Person->search( email => $email );
./chapter/student_search.mhtml:		my $err = "No Tabroom account with the email address <br /><br />".$email." <br /><br />was found.  Try again, or create a new student record";
./chapter/student_search.mhtml:	my ($exists) = Tab::Student->search( chapter => $chapter->id, person => $stud_acc->id);
./chapter/student_search.mhtml:		my $err = $email ." is already on your roster as ".$exists->first." ".$exists->last."\n";
./chapter/student_search.mhtml:		my $now = DateTime->now;
./chapter/student_search.mhtml:		my $grad_year = $now->year + 4;
./chapter/student_search.mhtml:	my $body = $person->first." ".$person->last." (".$person->email.") has added you on the Tabroom.com system to the team roster for ".$chapter->name."\n";
./chapter/student_search.mhtml:	my $subject = "[TabRoom] Added to the ".$chapter->name." team roster";
./chapter/student_search.mhtml:	my $msg = "Student ".$student->first." ".$student->last." added to your roster.  The student has been notified by email.";
./chapter/prefs.mhtml:	my $access = Tab::Permission->search( person => $person, chapter => $chapter_id)->first;
./chapter/prefs.mhtml:	my $tz = $person->tz;
./chapter/prefs.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/prefs.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/prefs.mhtml:	my $now_string = DateTime::Format::MySQL->format_datetime($now);
./chapter/prefs.mhtml:	my @entered_tourns = Tab::Tourn->search_by_entered_tourn($chapter->id, $now_string);
./chapter/prefs.mhtml:	my %tourn_ratings = ();
./chapter/prefs.mhtml:	my %tourn_start = ();
./chapter/prefs.mhtml:	foreach my $tourn (@entered_tourns) { 
./chapter/prefs.mhtml:		my $ratings;
./chapter/prefs.mhtml:		foreach my $category ($tourn->categories) { 
./chapter/prefs.mhtml:			my $strike_start = $category->setting("strike_start");
./chapter/prefs.mhtml:			my $strike_end = $category->setting("strike_end");
./chapter/prefs.mhtml:%					foreach my $et (@entered_tourns) { 
./chapter/prefs.mhtml:%						my $school = Tab::School->search( chapter => $chapter->id, tourn => $et->id)->first;
./chapter/deny.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/deny.mhtml:		my $msg = $cj->person_request->email." has been denied access to the judge ".$cj->first." ".$cj->last;
./chapter/deny.mhtml:		my $student = Tab::Student->retrieve($student_id);
./chapter/deny.mhtml:		my $msg = $student->person_request->email." has been denied access to the student ".$student->first." ".$student->last;
./chapter/import_csv.mhtml:    my $chapter;
./chapter/import_csv.mhtml:        my @chapters = $person->chapters;
./chapter/import_csv.mhtml:            my $err = "You have not chosen a team/school.  Please choose at right";
./chapter/dedupe.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe.mhtml:	my %students_by_name = ();
./chapter/dedupe.mhtml:	foreach my $student ($chapter->students) { 
./chapter/dedupe.mhtml:%			foreach my $key (keys %students_by_name) { 
./chapter/dedupe.mhtml:%				my $namekey = $key;
./chapter/dedupe.mhtml:%						foreach my $student (@{$students_by_name{$key}}) { 
./chapter/ndt_honors_delete.mas:	my $obj = Tab::Result->retrieve($record_id);
./chapter/create.mhtml:	my @chapters;
./chapter/create.mhtml:		my $search_name = $name;
./chapter/create.mhtml:    	$search_name =~ s/Academy$//g;
./chapter/create.mhtml:%				foreach my $chapter (@chapters) { 
./chapter/student_unlink.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_unlink.mhtml:	my $chapter = $student->chapter;
./chapter/student_unlink.mhtml:	my $msg = "Student ".$student->first." ".$student->last." was unlinked from the account ".$student->person->email;
./chapter/circuits.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/circuits.mhtml:	my %circuit_member = ();
./chapter/circuits.mhtml:	my @ljs = sort {$a->circuit->name cmp $b->circuit->name} $chapter->chapter_circuits;
./chapter/circuits.mhtml:%				foreach my $lj (@ljs) { 
./chapter/circuits.mhtml:%					my $circuit = $lj->circuit;
./chapter/circuits.mhtml:%					foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->search( active => 1 )) {  
./chapter/tourn_register.mhtml:		my $err = "That tournament does not exist.  Please try again";
./chapter/tourn_register.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./chapter/tourn_register.mhtml:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./chapter/tourn_register.mhtml:		my $err = "You do not have access to any schools to register.  Please create one to register for this tournament";
./chapter/tourn_register.mhtml:		my $school = Tab::School->search( chapter => $chapters[0]->id, tourn => $tourn->id )->first;
./chapter/tourn_register.mhtml:%		foreach my $chapter (@chapters) { 
./chapter/student_novice.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_novice.mhtml:	my $chapter = $student->chapter;
./chapter/student_novice.mhtml:	my $msg = "Student ".$student->first." ".$student->last." novice status changed ";
./chapter/no_interest.mhtml:	my $nope = Tab::TournIgnore->create({
./chapter/no_interest.mhtml:	my $msg = "Too bad you can't make it! I am sure that is a perfectly lovely tournament, but you will not see it on your list unless you hit Show Ignored Tournaments at the bottom of your page.  Have a lovely day!";
./chapter/judge_edit.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id) if $chapter_judge_id;
./chapter/judge_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./chapter/judge_edit.mhtml:		my $msg = "You have no defined school or chapter.  Please select one at right before continuing";
./chapter/judge_edit.mhtml:%				my @recents = Tab::Judge->search_where(
./chapter/judge_edit.mhtml:%				foreach my $judge (@recents) {
./chapter/circuit_join.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./chapter/circuit_join.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./chapter/circuit_join.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./chapter/circuit_join.mhtml:	my @memberships = $circuit->circuit_memberships;
./chapter/circuit_join.mhtml:	my @regions = $circuit->regions if $circuit->setting("region_based");
./chapter/circuit_join.mhtml:		my $err = "You are already a member of that circuit";
./chapter/circuit_join.mhtml:			my $err = "That circuit does not allow registrations from nonmembers.  You must join as a full member to register.";
./chapter/circuit_join.mhtml:		my $cl = Tab::ChapterCircuit->create({
./chapter/circuit_join.mhtml:		my $msg = "You can now register for tournaments in ".$circuit->name;
./chapter/circuit_join.mhtml:		my $missing;
./chapter/circuit_join.mhtml:			my $err = "That circuit does not have full members";
./chapter/circuit_join.mhtml:			my $cl = Tab::ChapterCircuit->create({
./chapter/circuit_join.mhtml:			my $msg = "You are now a member of ".$circuit->name;
./chapter/circuit_join.mhtml:%					foreach my $mem (@memberships) { 
./chapter/circuit_join.mhtml:%					foreach my $region ($circuit->regions) { 
./chapter/judge_unlink.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_unlink.mhtml:	my $chapter = $chapter_judge->chapter;
./chapter/judge_unlink.mhtml:	my $msg = "Judge ".$chapter_judge->first." ".$chapter_judge->last." was unlinked from the account ".$chapter_judge->person->email;
./chapter/dedupe_judges.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe_judges.mhtml:	my %judges_by_name = ();
./chapter/dedupe_judges.mhtml:	foreach my $judge ($chapter->chapter_judges) { 
./chapter/dedupe_judges.mhtml:%			foreach my $key (keys %judges_by_name) { 
./chapter/dedupe_judges.mhtml:%				my $namekey = $key;
./chapter/dedupe_judges.mhtml:%						foreach my $judge (@{$judges_by_name{$key}}) { 
./chapter/judges.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/judges.mhtml:	my @chapter_judges;
./chapter/judges.mhtml:	my $message;
./chapter/judges.mhtml:	my @judge_requests = Tab::ChapterJudge->search_where({ 
./chapter/judges.mhtml:%				foreach my $request (@judge_requests) { 
./chapter/judges.mhtml:%			my $last_judge;
./chapter/judges.mhtml:% 			foreach my $chapter_judge (@chapter_judges) { 
./chapter/admin_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/admin_save.mhtml:	my $msg;
./chapter/admin_save.mhtml:	my $err;
./chapter/admin_save.mhtml:	my $chapter_count++ if $email && $access_level eq "chapter";
./chapter/admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./chapter/admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./chapter/admin_save.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./chapter/admin_save.mhtml:			my $err = "The email $email has no account on this system.  ";
./chapter/admin_save.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "chapter" });
./chapter/admin_save.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "prefs" });
./chapter/admin_save.mhtml:			my $already;
./chapter/admin_save.mhtml:				foreach my $ap (@already_prefs) { 
./chapter/admin_save.mhtml:				foreach my $ac (@already_chapters) { 
./chapter/admin_save.mhtml:				foreach my $ac (@already_chapters) { 
./chapter/admin_save.mhtml:				foreach my $ap (@already_prefs) { 
./chapter/student_retire.mhtml:	my $student = Tab::Student->retrieve($student_id);
./chapter/student_retire.mhtml:	my $chapter = $student->chapter;
./chapter/student_retire.mhtml:	my $retired = $student->retired;
./chapter/student_retire.mhtml:	my $msg = $student->first." ".$student->last." ";
./chapter/diet_save.mhtml:		my $err = "You haven't chosen a chapter.  Please choose at right";
./chapter/diet_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/diet_save.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students( retired => 0 );
./chapter/diet_save.mhtml:	my @judges = sort {$a->last cmp $b->last} $chapter->chapter_judges( retired => 0 );
./chapter/diet_save.mhtml:	foreach my $student (@students) { 
./chapter/diet_save.mhtml:	foreach my $judge (@judges) { 
./chapter/diet_save.mhtml:	my $msg = "Dietary restrictions saved";
./chapter/judge_save.mhtml:		my $msg = "You have no defined school or chapter.  Please select one at right before continuing";
./chapter/judge_save.mhtml:	my $msg;
./chapter/judge_save.mhtml:	my $err;
./chapter/judge_save.mhtml:	my $chapter_judge;
./chapter/judge_save.mhtml:	my $now = DateTime->now;
./chapter/judge_save.mhtml:		$err = "Ouch.  All capitals make my ears hurt!  Please try again";
./chapter/judge_save.mhtml:		my $chapter_judge_school = $chapter_judge->chapter;
./chapter/judge_save.mhtml:		my $chapter_judge_school_id = $chapter_judge_school->id;
./chapter/judge_save.mhtml:		my @acc = Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $chapter_judge_school_id );
./chapter/tabbar.mas:	my @student_requests = Tab::Student->search_where( {chapter => $chapter->id, person_request => {'>', 0}});
./chapter/tabbar.mas:	my @judge_requests = Tab::ChapterJudge->search_where( {chapter => $chapter->id, person_request => {'>', 0}});
./chapter/index.mhtml:	my $chapter;
./chapter/index.mhtml:		my @chapters = $m->comp('/funclib/person_chapters.mas', person => $person);
./chapter/auth.mas:	my @access = Tab::Permission->search( tag => "chapter", chapter => $chapter->id, person => $person->id );
./chapter/auth.mas:	my $err = "You are not authorized to make changes to ".$chapter->name;
./chapter/save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./chapter/save.mhtml:	my $err;
./chapter/save.mhtml:	my $naudl_err;
./chapter/save.mhtml:				my $region = Tab::Region->retrieve($naudl_league);
./chapter/save.mhtml:				my $circuit = $region->circuit if $region;
./chapter/save.mhtml:						my $membership = Tab::ChapterCircuit->search( circuit => $circuit->id, chapter => $chapter_id)->first;
./chapter/save.mhtml:				foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./chapter/save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./chapter/save.mhtml:			foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./chapter/save.mhtml:				my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./chapter/save.mhtml:		my $search_name = $name;
./chapter/save.mhtml:    	$search_name =~ s/Academy$//g;
./chapter/save.mhtml:			my @chapters = Tab::Chapter->search_where( name => { "like", $name."%"}, country => $country, state => $state );
./chapter/save.mhtml:		my $chapter_access = Tab::Permission->create({
./chapter/student_save.mhtml:	my $err;
./chapter/student_save.mhtml:	my $msg;
./chapter/student_save.mhtml:	my $student;
./chapter/student_save.mhtml:	my $now = DateTime->now;
./chapter/student_save.mhtml:		my $now_year = $now->year;
./chapter/student_save.mhtml:		my $now_year = $now->year;
./chapter/student_save.mhtml:	my $birth_dt;
./chapter/student_save.mhtml:		my $student_school = $student->chapter;
./chapter/student_save.mhtml:		my $student_school_id = $student_school->id if $student_school;
./chapter/student_save.mhtml:		my @acc = Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $student_school_id );
./chapter/dues_receipt.mhtml:	my $payment = Tab::Dues->retrieve($payment_id);
./chapter/dues_receipt.mhtml:	my $chapter = $payment->chapter;
./chapter/dues_receipt.mhtml:	my $circuit = $payment->circuit;
./chapter/dues_receipt.mhtml:	my $filename = "dues-receipt-".$payment_id."-".$session->id;
./chapter/dues_receipt.mhtml:	my $filepath = "files/".$circuit->id."/invoices";
./chapter/dues_receipt.mhtml:	my $garbage = `mkdir -p $Tab::file_root/$filepath`;
./chapter/dues_receipt.mhtml:    my $now = DateTime->now;
./chapter/dues_receipt.mhtml:	my $count = 1;
./chapter/dues_receipt.mhtml:	my $message = $circuit->invoice_message;
./chapter/judge_search.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/judge_search.mhtml:	my $judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/judge_search.mhtml:	my ($judge_acc) = Tab::Person->search( email => $email );
./chapter/judge_search.mhtml:		my $err = "No Tabroom account with the email address <br /><br />".$email." <br /><br />was found.";
./chapter/judge_search.mhtml:	my ($exists) = Tab::ChapterJudge->search( chapter => $chapter->id, person => $judge_acc->id);
./chapter/judge_search.mhtml:		my $err = $email ." is already on your roster as ".$exists->first." ".$exists->last."\n";
./chapter/judge_search.mhtml:	my $msg;
./chapter/judge_search.mhtml:		my $now = DateTime->now;
./chapter/judge_search.mhtml:	my $body = $person->first." ".$person->last." (".$person->email.") has added you on the Tabroom system to the team roster for ".$chapter->name."\n";
./chapter/judge_search.mhtml:	my $subject = "[TabRoom] Added to the ".$chapter->name." team roster";
./chapter/dedupe_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe_save.mhtml:	my %students_by_name = ();
./chapter/dedupe_save.mhtml:	foreach my $student ($chapter->students) { 
./chapter/dedupe_save.mhtml:	my $count;
./chapter/dedupe_save.mhtml:	foreach my $key (keys %students_by_name) { 
./chapter/dedupe_save.mhtml:		my $dest = shift @{$students_by_name{$key}};
./chapter/dedupe_save.mhtml:		foreach my $student (@{$students_by_name{$key}}) { 
./chapter/dedupe_save.mhtml:		my $msg = "$count students de-duplicated.";
./chapter/circuit_leave.mhtml:	my $lj = Tab::ChapterCircuit->retrieve($lj_id); 
./chapter/circuit_leave.mhtml:		my $msg = "You have already left the circuit";
./chapter/circuit_leave.mhtml:	my $chapter = $lj->chapter;
./chapter/circuit_leave.mhtml:	my $circuit = $lj->circuit;
./chapter/circuit_leave.mhtml:	my $msg = "You have left the circuit ".$circuit->name;
./chapter/import_csv_judges.mhtml:	my $chapter =  Tab::Chapter->retrieve($chapter_id);
./chapter/import_csv_judges.mhtml:	my $tz = $person->tz;
./chapter/import_csv_judges.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/import_csv_judges.mhtml:	my $req = Apache2::Request->new($r);
./chapter/import_csv_judges.mhtml:	my @csv_handles = $r->upload; 
./chapter/import_csv_judges.mhtml:	my $csv_file = $req->upload($csv_handles[0]);
./chapter/import_csv_judges.mhtml:		my $err = "No students imported.  You must upload a CSV file, not an Excel or other file.  <br /> <br /> Save the file in Excel as Comma-Separated Values and try again";
./chapter/import_csv_judges.mhtml:	my $io = $csv_file->io;
./chapter/import_csv_judges.mhtml:	my @lines = <$io>;
./chapter/import_csv_judges.mhtml:	my $has_codes;
./chapter/import_csv_judges.mhtml:	my @judges;
./chapter/import_csv_judges.mhtml:	foreach my $judge (@judges) { 
./chapter/import_csv_judges.mhtml:		my ($first_name, $last_name, $gender, $phone, $diet) = split(/,/, $judge);
./chapter/import_csv_judges.mhtml:	my $msg = scalar @judges ." judges imported into ". $chapter->name;
./chapter/permit.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./chapter/permit.mhtml:		my @judges = $cj->judges;
./chapter/permit.mhtml:		foreach my $judge (@judges)  {
./chapter/permit.mhtml:		my $msg = $cj->person->email." now has access to the judge ".$cj->first." ".$cj->last;
./chapter/permit.mhtml:		my $student = Tab::Student->retrieve($student_id);
./chapter/permit.mhtml:		my $msg = $student->person->email." now has access to the student ".$student->first." ".$student->last;
./chapter/diets.mhtml:		my $err = "You haven't chosen a chapter.  Please choose at right";
./chapter/diets.mhtml:	my $now = DateTime->now();
./chapter/diets.mhtml:	my $year = $now->year;
./chapter/diets.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/diets.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students;
./chapter/diets.mhtml:	my @judges = sort {$a->last cmp $b->last} $chapter->chapter_judges;
./chapter/diets.mhtml:% 			foreach my $student (@students) { 
./chapter/diets.mhtml:%			foreach my $judge (@judges) { 
./chapter/dedupe_judges_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/dedupe_judges_save.mhtml:	$m->print($person->email." is my email");
./chapter/dedupe_judges_save.mhtml:	my %judges_by_name = ();
./chapter/dedupe_judges_save.mhtml:	foreach my $judge ($chapter->chapter_judges) { 
./chapter/dedupe_judges_save.mhtml:	my $count;
./chapter/dedupe_judges_save.mhtml:	foreach my $key (keys %judges_by_name) { 
./chapter/dedupe_judges_save.mhtml:		my $dest = shift @{$judges_by_name{$key}};
./chapter/dedupe_judges_save.mhtml:		my $person_id = $dest->person->id if $dest->person;
./chapter/dedupe_judges_save.mhtml:		my $retired = $dest->retired;
./chapter/dedupe_judges_save.mhtml:		foreach my $judge (@{$judges_by_name{$key}}) { 
./chapter/dedupe_judges_save.mhtml:	my $msg = "$count judges de-duplicated.";
./chapter/student_edit.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./chapter/student_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./chapter/student_edit.mhtml:		my $err = "You haven't chosen a chapter.  Please choose at right";
./chapter/student_edit.mhtml:		my $err = "You haven't chosen a chapter.  Please choose at right";
./chapter/student_edit.mhtml:	my $ndt;
./chapter/student_edit.mhtml:	my @circuits = $chapter->circuits;
./chapter/student_edit.mhtml:	foreach my $circuit (@circuits) { 
./chapter/student_edit.mhtml:	my $demo;
./chapter/student_edit.mhtml:	foreach my $circuit ($chapter->circuits) { 
./chapter/student_edit.mhtml:	my $tz = $person->tz if $person;
./chapter/student_edit.mhtml:	my $now = DateTime->now(time_zone => $tz);
./chapter/student_edit.mhtml:	my $then = $now->clone;
./chapter/student_edit.mhtml:	my @students = Tab::Student->search_where({
./chapter/student_edit.mhtml:%					my $race = $student->race if $student;
./chapter/student_edit.mhtml:%			foreach my $student (@students) { 
./chapter/students_csv.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/students_csv.mhtml:	my $authorized;
./chapter/students_csv.mhtml:	foreach my $admin ($chapter->admins) { 
./chapter/students_csv.mhtml:    my $filename = $chapter->name."-StudentRoster";
./chapter/students_csv.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students;
./chapter/students_csv.mhtml:	foreach my $student (sort {$b->grad_year <=> $a->grad_year} @students) { 
./chapter/tournaments.mhtml:	my $access = Tab::Permission->search( person => $person, chapter => $chapter_id)->first;
./chapter/tournaments.mhtml:	my $tz = $person->tz;
./chapter/tournaments.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./chapter/tournaments.mhtml:	my $now = DateTime->now;
./chapter/tournaments.mhtml:	my $search_start = $now->clone;
./chapter/tournaments.mhtml:	my $search_start_string = DateTime::Format::MySQL->format_datetime($search_start);
./chapter/tournaments.mhtml:	my $now_string = DateTime::Format::MySQL->format_datetime($now);
./chapter/tournaments.mhtml:	my @existing_tourns = Tab::Tourn->search_by_entered_tourn($chapter->id, $search_start_string);
./chapter/tournaments.mhtml:	my @open_tourns = Tab::Tourn->search_by_open_tourn($chapter->id, $now_string, $now_string);
./chapter/tournaments.mhtml:%					foreach my $et (@existing_tourns) { 
./chapter/tournaments.mhtml:%							my $sch = Tab::School->search(tourn => $et->id, chapter => $chapter_id)->first;
./chapter/tournaments.mhtml:%								my $onsited;
./chapter/tournaments.mhtml:%									my $onsite_starts = $et->setting("onsite_starts");
./chapter/tournaments.mhtml:%									my $onsite_ends = $et->setting("onsite_ends");
./chapter/tournaments.mhtml:%					my $hidden;
./chapter/tournaments.mhtml:%					foreach my $ot (@open_tourns) { 
./chapter/tournaments.mhtml:%					foreach my $circuit ($m->comp('/funclib/chapter_circuits.mas', chapter => $chapter)) { 
./chapter/tournaments.mhtml:%						my $now = DateTime->now(time_zone => $tz);
./chapter/tournaments.mhtml:%						my @tourns = $m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, future => 1);
./chapter/tournaments.mhtml:%						my $next_tourn = $tourns[0] if @tourns;
./results/online_ballots_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./results/online_ballots_print.mhtml:	my $tourn = $school->tourn;
./results/online_ballots_print.mhtml:	my @ballots = Tab::Ballot->search_school_ballots($school_id);
./results/online_ballots_print.mhtml:    my $now = DateTime->now;    
./results/online_ballots_print.mhtml:    my $name = $tourn->name."-".$school->short_name;
./results/online_ballots_print.mhtml:    my $filename = "Ballots-$name-".$session->id;
./results/online_ballots_print.mhtml:    my $filepath = $Tab::file_root."tmp/".$filename;
./results/online_ballots_print.mhtml:	my $current_entry;
./results/online_ballots_print.mhtml:	foreach my $ballot (@ballots) {
./results/online_ballots_print.mhtml:		my $panel = $ballot->panel;
./results/online_ballots_print.mhtml:		my $judge = $ballot->judge;
./results/online_ballots_print.mhtml:		my @values = sort {$a->tag cmp $b->tag} $ballot->scores;
./results/online_ballots_print.mhtml:		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
./results/online_ballots_print.mhtml:		my $aff_string = $panel->round->event->setting("aff_string");
./results/online_ballots_print.mhtml:		my $neg_string = $panel->round->event->setting("neg_string");
./results/online_ballots_print.mhtml:		my $rfd;
./results/online_ballots_print.mhtml:		my $comments;
./results/online_ballots_print.mhtml:		my $results;
./results/online_ballots_print.mhtml:		foreach my $value (sort {$a->student <=> $b->student} @values) { 
./results/online_ballots_print.mhtml:		foreach my $opponent (@entries) { 
./results/online_ballots_print.mhtml:		my $newline = "\\newline\n";
./results/online_ballots_print.mhtml:		my $strip = HTML::Strip->new();
./results/report.mhtml:	my $tourn = $school->tourn;
./results/report.mhtml:	my @results = $m->comp('/funclib/school_results.mas', school => $school);
./results/report.mhtml:	my @result_values = $m->comp('/funclib/school_result_values.mas', school => $school);
./results/report.mhtml:	my %values_by_result = ();
./results/report.mhtml:	foreach my $value (@result_values) { 
./results/report.mhtml:%		my $current_result;
./results/report.mhtml:%		my $ballot_spacer;
./results/report.mhtml:%		foreach my $result (@results) { 
./results/report.mhtml:%			my @values = @{$values_by_result{$result->id}} if $values_by_result{$result->id};
./results/report.mhtml:%				my $result_set = $result->result_set;
./results/report.mhtml:%			my $seed;
./results/report.mhtml:%			foreach my $value (@values) {
./results/report.mhtml:%					foreach my $value (@values) { 
./results/report.mhtml:%						my $tag = $value->tag;
./results/report.mhtml:%					foreach my $value (@values) { 
./results/report.mhtml:%						my $ballots = $value->value;
./results/tourn.mhtml:	my $tourn = $school->tourn;
./results/tourn.mhtml:	my @entries = $m->comp("/funclib/tourn_entries.mas", tourn => $tourn);
./results/tourn.mhtml:	my @judges = $m->comp("/funclib/tourn_judges.mas", tourn => $tourn);
./results/tourn.mhtml:	my @schools = $tourn->schools;
./results/tourn.mhtml:	my $switch;
./results/export_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./results/export_prefs.mhtml:	my $event = $entry->event;
./results/export_prefs.mhtml:	my $category = $event->category;
./results/export_prefs.mhtml:	my $tourn = $category->tourn;
./results/export_prefs.mhtml:	my $style = $category->setting("prefs");
./results/export_prefs.mhtml:	my %ratings_by_judge = ();
./results/export_prefs.mhtml:	my %conflicts_by_id = ();
./results/export_prefs.mhtml:	my $now = DateTime->now;
./results/export_prefs.mhtml:	my $tz = $tourn->tz;
./results/export_prefs.mhtml:    my %rating_name = map {$_->id => $_->name} $category->rating_tiers;
./results/export_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./results/export_prefs.mhtml:    my %coach_rating_by_judge = (); 
./results/export_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./results/export_prefs.mhtml:    my %rating_by_judge = (); 
./results/export_prefs.mhtml:	my %percentile_by_judge = ();
./results/export_prefs.mhtml:		foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "entry", entry => $entry)) { 
./results/export_prefs.mhtml:		my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./results/export_prefs.mhtml:		foreach my $rating (@ratings) { 
./results/export_prefs.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./results/export_prefs.mhtml:	my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./results/export_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./results/export_prefs.mhtml:	my $filename = "Prefs-".$entry->name."-".Tab::csvdt($now);
./results/export_prefs.mhtml:	my $filepath = $Tab::file_root."/tmp/$filename";
./results/export_prefs.mhtml:	my $garbage = `rm -f $filepath.*`;
./results/export_prefs.mhtml:	foreach my $judge (@judges) { 
./results/roster.mhtml:	my $tourn = $school->tourn;
./results/roster.mhtml:	my $tz = $tourn->tz;
./results/roster.mhtml:%		foreach my $event ($m->comp("/funclib/school_events.mas", school => $school)) { 
./results/roster.mhtml:% 			my @entries = Tab::Entry->search( event => $event->id, school => $school->id );
./results/roster.mhtml:%			my @hybrids = $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school);
./results/roster.mhtml:% 			foreach my $entry (@entries) { 
./results/roster.mhtml:%						my $dropped_at = $entry->setting("dropped_at");
./results/roster.mhtml:%						foreach my $student ($entry->students) { 
./results/roster.mhtml:%			foreach my $entry (@hybrids) { 
./results/roster.mhtml:%						my $dropped_at = $entry->setting("dropped_at");
./results/roster.mhtml:%						foreach my $student ($entry->students) { 
./results/roster.mhtml:%		foreach my $judge ($school->judges) { 
./results/roster.mhtml:%			my $category = $judge->category;
./results/roster.mhtml:%					my @panels = $m->comp("/funclib/judge_panels.mas", judge => $judge);
./results/report_print.mhtml:	my $tourn = $school->tourn;
./results/report_print.mhtml:	my @results = $m->comp('/funclib/school_results.mas', school => $school);
./results/report_print.mhtml:	my @result_values = $m->comp('/funclib/school_result_values.mas', school => $school);
./results/report_print.mhtml:	my %values_by_result = ();
./results/report_print.mhtml:	foreach my $value (@result_values) { 
./results/report_print.mhtml:    my $now = DateTime->now;    
./results/report_print.mhtml:    my $name = $tourn->name."-".$school->short_name;
./results/report_print.mhtml:    my $filename = "Results-$name-".$session->id;
./results/report_print.mhtml:    my $filepath = $Tab::file_root."tmp/".$filename;
./results/report_print.mhtml:	my $tabular = "\\begin{tabular}{p{.45in}p{.25in}p{1.25in}p{.15in}p{2.45in}p{1.9in}}\n";
./results/report_print.mhtml:	my $switch;
./results/report_print.mhtml:	my %event_box;
./results/report_print.mhtml:	foreach my $result (sort {$a->result_set <=> $b->result_set} @results) { 
./results/report_print.mhtml:		my @values = @{$values_by_result{$result->id}};
./results/report_print.mhtml:		my $seed;
./results/report_print.mhtml:		my $label = $result->result_set->label;
./results/report_print.mhtml:		foreach my $value (@values) {
./results/report_print.mhtml:		foreach my $value (@values) { 
./results/report_print.mhtml:		foreach my $value (@values) { 
./results/report_print.mhtml:			my $ballots = $value->value;
./results/report_print.mhtml:			my @ballot_rounds = split(/42BREAKHERE/, $ballots);
./results/report_print.mhtml:			my $box_length = .24;
./results/report_print.mhtml:			foreach my $br (@ballot_rounds) { 
./results/report_print.mhtml:				my $length = length($br);
./results/report_print.mhtml:			foreach my $br (@ballot_rounds) { 
./results/autohandler:	my $school = Tab::School->retrieve($school_id) if $school_id;
./results/autohandler:	my $chapter = $school->chapter if $school;
./results/autohandler:	my $coach = Tab::Permission->search( tag => "chapter", chapter => $chapter->id, person => $person->id )->first;
./results/competed_against.mhtml:	my @others = Tab::Chapter->search_competed_against( $chapter_id );
./results/competed_against.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./results/competed_against.mhtml:%				foreach my $other (@others) { 
./results/index.mhtml:	my $now = DateTime->now;
./results/index.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./results/index.mhtml:	my @published;
./results/index.mhtml:	my $switch;
./results/index.mhtml:%			foreach my $tourn (sort {$b->start->epoch <=> $a->start->epoch} @published) { 
./results/index.mhtml:%					my $school = Tab::School->search( chapter => $chapter->id, tourn => $tourn->id)->first;
./results/index.mhtml:%						foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) { 
./results/invoice_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./results/invoice_print.mhtml:	my $school_name = $school->name;
./results/invoice_print.mhtml:	my $tourn_name = $tourn->name;
./results/invoice_print.mhtml:	my $filename = "Invoice-".$school_name."-".$tourn_name."-".$session->id;
./results/invoice_print.mhtml:	my $filepath = $Tab::file_root."/tmp/".$filename;
./results/invoice_print.mhtml:	my $garbage = `rm -f $filepath.*`;
./results/menu.mas:	my $tourn =  $school->tourn;
./results/menu.mas:	my $tz = $tourn->tz;
./results/menu.mas:	my @rounds = $m->comp('/funclib/tourn_round_results.mas', tourn => $tourn);
./results/menu.mas:	my @results = $m->comp('/funclib/tourn_result_sets.mas', tourn => $tourn);
./results/menu.mas:	my %seen = ();
./results/menu.mas:	my %event_rounds;
./results/menu.mas:	my %event_results;
./results/menu.mas:	foreach my $round (@rounds) { 
./results/menu.mas:	foreach my $result (@results) { 
./results/menu.mas:	my @events = sort {$a->name cmp $b->name} $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./results/menu.mas:	my @prefs;
./results/menu.mas:	foreach my $category ($tourn->categories) { 
./results/menu.mas:%					foreach my $pref (@prefs) { 
./results/online_ballots.mhtml:	my $school = Tab::School->retrieve($school_id);
./results/online_ballots.mhtml:	my @rfds = Tab::Score->search_school_rfds($school_id);
./results/online_ballots.mhtml:%		my $current_entry;
./results/online_ballots.mhtml:%		foreach my $rfd (@rfds) {
./results/online_ballots.mhtml:%			my @other_values = sort {$a->tag cmp $b->tag} $rfd->ballot->scores;
./results/online_ballots.mhtml:%			my @entries = $m->comp("/funclib/panel_entries.mas", panel => $rfd->ballot->panel);
./results/online_ballots.mhtml:%			my $aff_string = $current_entry->event->setting('aff_string');
./results/online_ballots.mhtml:%			my $neg_string = $current_entry->event->setting('neg_string');
./results/online_ballots.mhtml:%					foreach my $other (sort {$a->student <=> $b->student} @other_values) { 
./results/online_ballots.mhtml:%					foreach my $entry (@entries) { 
./home.mhtml:	my $dbh = Tab::DBI->db_Main();
./home.mhtml:	my $sth = $dbh->prepare("
./home.mhtml:	my $missing = $sth->fetchrow_array();
./home.mhtml:		my $err = "You are scheduled in debates that require a Google+ Account, and have not yet linked your Gmail/Google+ account";
./home.mhtml:	my @entries = $m->comp("/funclib/person_entries.mas", person => $person);
./home.mhtml:	my @entry_panels = $m->comp("/funclib/person_entry_panels.mas", person => $person) if @entries;
./home.mhtml:	my @judges = $m->comp("/funclib/person_judges.mas", person => $person);
./home.mhtml:	my @panels = $m->comp("/funclib/person_panels.mas", person => $person) if @judges;
./home.mhtml:	my @students = Tab::Student->search( person => $person->id );
./home.mhtml:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./select:./nsda/link.mhtml:	my @chapters = $person->chapters;
./select:./nsda/link.mhtml:	my @logins = $person->logins( source => "nsda" );
./select:./nsda/autopoint_post.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./nsda/autopoint_post.mhtml:	my $now = DateTime->now();
./select:./nsda/autopoint_post.mhtml:	my $usa_wsdc++ if $tourn->setting("usa_wsdc");
./select:./nsda/autopoint_post.mhtml:		my $err = $tourn->name."'s NSDA points have already been posted";
./select:./nsda/autopoint_post.mhtml:	my $tz = $tourn->tz;
./select:./nsda/autopoint_post.mhtml:	my $start = $tourn->start->set_time_zone($tz);
./select:./nsda/autopoint_post.mhtml:	my $end = $tourn->end->set_time_zone($tz);
./select:./nsda/autopoint_post.mhtml:	my $site = $tourn->sites->first;
./select:./nsda/autopoint_post.mhtml:	my $location = $site->name if $site;
./select:./nsda/autopoint_post.mhtml:    my $dbh = Tab::DBI->db_Main(); 
./select:./nsda/autopoint_post.mhtml:    my $sth = $dbh->prepare('
./select:./nsda/autopoint_post.mhtml:	while( my ($entry_id, $student_id, $chapter_id, $student_ualt_id, $school_id, $first, $last, $state, $name) = $sth->fetchrow_array()) { 	
./select:./nsda/autopoint_post.mhtml:				my @person_schools = Tab::NSDA::PersonSchool->search( ualt_id => $student_ualt_id);
./select:./nsda/autopoint_post.mhtml:			my @alts = Tab::NSDA::AltStudent->search( nfl_school_id => $chapter_id );
./select:./nsda/autopoint_post.mhtml:			my $student = Tab::Student->retrieve($student_id);
./select:./nsda/autopoint_post.mhtml:		my $instance = Tab::NSDA::Instance->create({
./select:./nsda/autopoint_post.mhtml:			my $nsda_school = Tab::NSDA::School->create({
./select:./nsda/autopoint_post.mhtml:		foreach my $event ($tourn->events) { 
./select:./nsda/autopoint_post.mhtml:			my $size = $event->setting('max_entry');
./select:./nsda/autopoint_post.mhtml:			foreach my $round ($event->rounds) { 
./select:./nsda/autopoint_post.mhtml:					my @spoke = Tab::Student->search_spoke_in_round($round->id);
./select:./nsda/autopoint_post.mhtml:						my $base_points = 7 - $nsda_event_category->nat_category;
./select:./nsda/autopoint_post.mhtml:						my $win_points = 6 - ($nsda_event_category->nat_category * 2);
./select:./nsda/autopoint_post.mhtml:						my $win_points = 6 - ($nsda_event_category->nat_category * 2);
./select:./nsda/chapter_link.mhtml:	my $is_admin++ if Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $chapter_id);
./select:./nsda/chapter_link.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./nsda/chapter_link.mhtml:	foreach my $login ($person->logins) { 
./select:./nsda/chapter_link.mhtml:		my @candidates = $m->comp("/funclib/nsda_school_by_person.mas", nsda_login => $login);
./select:./nsda/import_nsda_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./nsda/import_nsda_roster.mhtml:	my $now = DateTime->now;
./select:./nsda/import_nsda_roster.mhtml:	my $grad_year_limit = $now->year;
./select:./nsda/import_nsda_roster.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./select:./nsda/import_nsda_roster.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./select:./nsda/import_nsda_roster.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./select:./nsda/import_nsda_roster.mhtml:	my %student_name = map {$_->first." ".$_->last." ".$_->grad_year} @students;
./select:./nsda/import_nsda_roster.mhtml:			my $name = $nsda_student->ufname." ".$nsda_student->umname." ".$nsda_student->ulname." ".$nsda_student->grad_yr;
./select:./nsda/student_link.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./nsda/student_link.mhtml:	my $now = DateTime->now;
./select:./nsda/student_link.mhtml:	my $grad_year_limit = $now->year;
./select:./nsda/student_link.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./select:./nsda/student_link.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./select:./nsda/student_link.mhtml:	my %student_by_ualt_id = map {$_->ualt_id => $_} @nsda_students;
./select:./nsda/student_link.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./select:./nsda/student_link.mhtml:				my $nsda_student_id = $ARGS{"student_".$student->id};
./select:./nsda/student_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./nsda/student_roster.mhtml:	foreach my $admin ($chapter->admins) { 
./select:./nsda/student_roster.mhtml:	my $now = DateTime->now;
./select:./nsda/student_roster.mhtml:	my $grad_year_limit = $now->year;
./select:./nsda/student_roster.mhtml:    my @students = Tab::Student->search_where( chapter => $chapter->id, retired => 0, grad_year => { ">=", $grad_year_limit} );
./select:./nsda/student_roster.mhtml:	my @nsda_students = Tab::NSDA::Person->search_students( $chapter->nsda, $grad_year_limit );
./select:./nsda/student_roster.mhtml:	my %student_mid = map {$_->ufname." ".$_->umname." ".$_->ulname => $_->ualt_id} @nsda_students;
./select:./nsda/student_roster.mhtml:	my %student_name = map {$_->ufname." ".$_->ulname => $_->ualt_id} @nsda_students;
./select:./nsda/student_roster.mhtml:	my %student_by_ualt_id = map {$_->ualt_id => $_} @nsda_students;
./select:./nsda/student_roster.mhtml:	my %used_students = map {$_->ualt_id => 1} @students;
./select:./nsda/student_roster.mhtml:%								my $nsda_student = $student_by_ualt_id{$student->ualt_id};
./select:./nsda/student_roster.mhtml:%										my $selected++ if $student_name{$student->first." ".$student->last} == $nsda_student->id;
./select:./nsda/student_roster.mhtml:%								my $warn = "Doing this will disable auto-posting points for this competitor.  Are you sure?";
./select:./nsda/index.mhtml:	my @logins = $person->logins;
./select:./nsda/index.mhtml:		my @candidates = $m->comp("/funclib/nsda_school_by_person.mas", nsda_person => $nsda_people{$login->id});
./select:./nsda/index.mhtml:%		foreach my $chapter ($person->chapters) { 
./select:./nsda/autopoint.mhtml:	my $now = DateTime->now();
./select:./nsda/autopoint.mhtml:	my @categories = sort {$a->name cmp $b->name} Tab::NSDA::EventCategories->retrieve_all;
./select:./nsda/autopoint.mhtml:%		my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./nsda/autopoint.mhtml:%		my $tz = $tourn->tz;
./select:./nsda/autopoint.mhtml:%		foreach my $event ($tourn->events) { 
./select:./nsda/autopoint.mhtml:%			my $event_name = $event->name;
./select:./nsda/autopoint.mhtml:%			my $nsda_category = $event->setting("nsda_event_category");
./select:./nsda/autopoint.mhtml:	my $start = $now->clone;
./select:./nsda/autopoint.mhtml:	my @tourns = Tab::Tourn->search_recent_over( $now, $start);
./select:./nsda/link_confirm.mhtml:	my $now = DateTime->now();
./select:./nsda/link_confirm.mhtml:	my $nsda_login = Tab::NSDA::Login->search( username => $nsda_username )->first;
./select:./nsda/link_confirm.mhtml:	my $nsda_person = Tab::NSDA::Person->search( user_id => $nsda_login->person_id )->first;
./select:./nsda/link_confirm.mhtml:	my $salt = $m->comp("/funclib/generate_randomstring.mas"); 
./select:./nsda/link_confirm.mhtml:		my @logins = $person->logins;
./select:./nsda/menu.mas:	my $tz = $person->tz if $person;
./select:./nsda/menu.mas:%			foreach my $chapter ($person->chapters) { 
./select:./login/new_user_save.mhtml:    my $salt = $m->comp("/funclib/generate_randomstring.mas");
./select:./login/new_user_save.mhtml:	my @existing_person = Tab::Person->search( email => $email );
./select:./login/new_user_save.mhtml:	my @existing_login = Tab::Login->search( username => $email );
./select:./login/new_user_save.mhtml:		my $emailok = Email::Valid->address( -address => $email, -mxcheck => 0 ) ? 'yes' : 'no';
./select:./login/new_user_save.mhtml:		my $now = DateTime->now;
./select:./login/new_user_save.mhtml:		my $person = Tab::Person->create({ 
./select:./login/new_user_save.mhtml:		my $login = Tab::Login->create({ 
./select:./login/profile.mhtml:%			foreach my $login ($person->logins) { 
./select:./login/forgot_send.mhtml:	my $login = Tab::Login->search( username => $username )->first;
./select:./login/forgot_send.mhtml:	my $person = Tab::Person->search( email => $username )->first;
./select:./login/forgot_send.mhtml:	my $id = $login->id;
./select:./login/forgot_send.mhtml:	my $key =  $m->comp("/funclib/generate_randomstring.mas", length => 30);
./select:./login/forgot_send.mhtml:	my $expires = DateTime->now;
./select:./login/forgot_send.mhtml:	my $msg = MIME::Lite->new(
./select:./login/passwd.mhtml:	my $login = Tab::Login->retrieve($login_id);
./select:./login/passwd.mhtml:		my @others =  Tab::Login->search( username => $username);
./select:./login/passwd.mhtml:	my $new_salt = $m->comp("/funclib/generate_randomstring.mas");
./select:./login/passwd.mhtml:    my $db_md5_hash = $login->password;  #This gets the salt from the MD5 combined password hash
./select:./login/passwd.mhtml:    my $db_sha2_hash = $login->sha512;  #This gets the salt from the MD5 combined password hash
./select:./login/passwd.mhtml:	my $now = DateTime->now;
./select:./login/logout.mhtml:	my $tokencookie = Apache2::Cookie->new($r,
./select:./login/logout.mhtml:	my $passwordcookie = Apache2::Cookie->new($r,
./select:./login/forgot_save.mhtml:	my $now = DateTime->now();
./select:./login/forgot_save.mhtml:	my $login = Tab::Login->retrieve($id);
./select:./login/forgot_save.mhtml:	my $salt = $m->comp("/funclib/generate_randomstring.mas");
./select:./login/forgot_change.mhtml:	my $now = DateTime->now();
./select:./login/forgot_change.mhtml:	my $login = Tab::Login->retrieve($id);
./select:./login/forgot_change.mhtml:	my $person = $login->person;
./select:./login/login_save.mhtml:	my $now = DateTime->now;
./select:./login/login_save.mhtml:	my $log = $now->mdy('/')." ".$now->hms;
./select:./login/login_save.mhtml:		my $db_sha_crypt = $login->sha512;
./select:./login/login_save.mhtml:			my $db_md5_crypt = $login->password;
./select:./login/login_save.mhtml:				my $salt = $m->comp("/funclib/generate_randomstring.mas");
./select:./login/login_save.mhtml:					my $nsda_login = Tab::NSDA::Login->search( username => $username )->first;
./select:./login/login_save.mhtml:					my $nsda_db_password = $nsda_login->password;
./select:./login/login_save.mhtml:						my $salt = $m->comp("/funclib/generate_randomstring.mas");
./select:./login/login_save.mhtml:			my $salt = $m->comp("/funclib/generate_randomstring.mas", length => 16);
./select:./login/login_save.mhtml:	foreach my $sess ( sort {$b->id <=> $a->id} $person->sessions) {
./select:./login/login_save.mhtml:	my $tokencookie = Apache2::Cookie->new(
./select:./login/profile_save.mhtml:		my @existing_emails = Tab::Person->search( email => $email);
./select:./login/profile_save.mhtml:			my $err = "Email address $email already has an person: ".$existing_emails[0]->first." ".$existing_emails[0]->last;
./select:./login/profile_save.mhtml:	foreach my $login ($person->logins) { 
./select:./login/authenticate.mas:	my %cookies = Apache2::Cookie->fetch;
./select:./login/authenticate.mas:		my $user_key = $cookies{'Tab-AuthToken'}->value;
./select:./login/authenticate.mas:		my $session = Tab::Session->search( userkey => $user_key )->first;
./select:./login/authenticate.mas:			my $person = $session->person;
./select:./admin/ldap_renew.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./select:./admin/ldap_renew.mhtml:	foreach my $login ($edit->logins) { 
./select:./admin/chapter_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./admin/chapter_save.mhtml:				my $region = Tab::Region->retrieve($naudl_league);
./select:./admin/chapter_save.mhtml:				my $circuit = $region->circuit if $region;
./select:./admin/chapter_save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $circuit->id, chapter => $chapter_id)->first;
./select:./admin/chapter_save.mhtml:				foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./select:./admin/chapter_save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./select:./admin/chapter_save.mhtml:			foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./select:./admin/chapter_save.mhtml:				my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./select:./admin/chapter_roster_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./admin/chapter_roster_save.mhtml:	foreach my $student ($chapter->students) { 
./select:./admin/circuit_edit.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./admin/circuit_edit.mhtml:% 			foreach my $admin (sort {$a->last cmp $b->last} $circuit->admins) { 
./select:./admin/admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./admin/admin_add.mhtml:	my $person = Tab::Person->search( email => $email)->first;
./select:./admin/admin_add.mhtml:	my @existing = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id );
./select:./admin/admin_add.mhtml:	my $circuit_admin = Tab::Permission->create({
./select:./admin/admin_add.mhtml:	my $msg = $person->first." ".$person->last." is now an admin for ".$circuit->abbr;
./select:./admin/chapter_roster.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./admin/chapter_roster.mhtml:	my @circuits = $chapter->circuits;
./select:./admin/chapter_roster.mhtml:%			foreach my $student ($chapter->students) { 
./select:./admin/calendar_admin.mhtml:	my $now = DateTime->now();
./select:./admin/calendar_admin.mhtml:	my @items = Tab::Calendar->search_future($now->year."-".$now->strftime("%m")."-".$now->day);
./select:./admin/chapter_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./admin/chapter_edit.mhtml:	my @regions = $m->comp("/funclib/chapter_regions.mas", chapter => $chapter);
./select:./admin/chapter_edit.mhtml:	my %region_yes = map {$_->id => 1} @regions;
./select:./admin/chapter_edit.mhtml:%						foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) { 
./select:./admin/chapter_edit.mhtml:%							foreach my $region ($ns->circuit->regions) { 
./select:./admin/chapter_edit.mhtml:%		foreach my $permission ($chapter->permissions) { 
./select:./admin/chapter_edit.mhtml:%			my $coach = $permission->person;
./select:./admin/admin_rm.mhtml:	my @admins = Tab::Permission->search ( tag => "circuit", person => $admin_id, circuit => $circuit_id);
./select:./admin/su_return.mhtml:	my $become = $session->su;
./select:./admin/su_return.mhtml:	my $log = $person->email." (".$person->last.") has returned to ".$become->email." (".$become->last.")";
./select:./admin/naudl/students.mhtml:	my $now = DateTime->now;
./select:./admin/naudl/students.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./select:./admin/naudl/students.mhtml:    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";
./select:./admin/naudl/students.mhtml:		my @students = $m->comp("/funclib/school_students.mas", school => $school, by_result => 1);
./select:./admin/naudl/students.mhtml:		my $tourn = $school->tourn;
./select:./admin/naudl/students.mhtml:		my $circuit_name = $tourn_circuit{$tourn->id};
./select:./admin/naudl/students.mhtml:			foreach my $circuit ($tourn->circuits) { 
./select:./admin/naudl/students.mhtml:			my $birthday_dt = $student->birthdate; 
./select:./admin/naudl/students.mhtml:			my $gender = $student->gender if $internal;
./select:./admin/naudl/students.mhtml:			my $bps_id = $student->school_sid if $internal;
./select:./admin/naudl/sta.mhtml:	my $now = DateTime->now;
./select:./admin/naudl/sta.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./select:./admin/naudl/sta.mhtml:    my $filename = "NAUDL-STA-$start-$end.csv";
./select:./admin/naudl/sta.mhtml:	my %is_naudl = map {$_->id => 1} @schools;
./select:./admin/naudl/sta.mhtml:		foreach my $entry ($school->entries( waitlist => 0 )) { 
./select:./admin/naudl/sta.mhtml:		my $start = $tourn->start;
./select:./admin/naudl/sta.mhtml:		my $start_string = $start->year."-".$start->month."-".$start->day;
./select:./admin/naudl/sta.mhtml:		foreach my $event (@{$tourn_events{$tourn->id}}) { 
./select:./admin/naudl/sta.mhtml:			my $event_name = ucfirst($event->type)."-".$event->name;
./select:./admin/naudl/sta.mhtml:			my $division_name = ucfirst($event->setting("level"))."-".$event->name;
./select:./admin/naudl/sta.mhtml:			my @rounds = sort {$b->name <=> $a->name} $event->rounds;
./select:./admin/naudl/sta.mhtml:			my ($final_entries_ref, @crap) = $m->comp("/tabbing/results/order_entries.mas", round => $final) if $final && $final->tiebreak_set;
./select:./admin/naudl/sta.mhtml:			my ($prelim_entries_ref, $prelim_tbs_ref, $prelim_desc_ref, $prelim_forfeit_ref, $prelim_meh, $prelim_panrank_ref, $prelim_panletter_ref, $prelim_long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $last_prelim) if $last_prelim && $last_prelim->tiebreak_set;
./select:./admin/naudl/sta.mhtml:			my ($speakers_students_ref, $speakers_tbs_ref, $speakers_desc_ref, $speakers_forfeit_ref, $speakers_meh, $speakers_long_desc_ref, $speakers_novice_ref, $speakers_name_ref, $speakers_code_ref, $speakers_school_ref) = $m->comp("/tabbing/results/order_speakers.mas", round => $last_prelim) if $event->setting("speaker_tbset");
./select:./admin/naudl/sta.mhtml:					my @all_entries = $m->comp("/funclib/round_entries.mas", round => $round);
./select:./admin/naudl/sta.mhtml:			foreach my $entry (@{$event_entries{$event->id}}) { 
./select:./admin/naudl/sta.mhtml:				my @students = sort {$a->id <=> $b->id} $entry->students;
./select:./admin/naudl/sta.mhtml:				my $first_team = $m->comp("/funclib/first_entry.mas", entry => $entry);
./select:./admin/naudl/sta.mhtml:				foreach my $student ($entry->students) { 
./select:./admin/naudl/sta_pairs.mhtml:	my $now = DateTime->now;
./select:./admin/naudl/sta_pairs.mhtml:	my @schools = Tab::School->search_naudl_competed( 
./select:./admin/naudl/sta_pairs.mhtml:    my $filename = "NAUDL-STA-$start-$end.csv";
./select:./admin/naudl/sta_pairs.mhtml:		foreach my $entry ($school->entries) { 
./select:./admin/naudl/sta_pairs.mhtml:		my $first_team = $m->comp("/funclib/first_entry.mas", entry => $entry);
./select:./admin/naudl/sta_pairs.mhtml:			foreach my $student ($entry->students) { 
./select:./admin/naudl/sections.mhtml:	my $now = DateTime->now;
./select:./admin/naudl/sections.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./admin/naudl/sections.mhtml:	my @schools = Tab::School->search_naudl_competed( $circuit->id, DateTime::Format::MySQL->format_datetime($start), DateTime::Format::MySQL->format_datetime($end));
./select:./admin/naudl/sections.mhtml:    my $filename = "NAUDL-StudentAttendance-$start-$end.csv";
./select:./admin/naudl/sections.mhtml:		my $tourn = $school->tourn;
./select:./admin/naudl/sections.mhtml:		my $dbh = Tab::DBI->db_Main();
./select:./admin/naudl/sections.mhtml:		my $sth = $dbh->prepare("
./select:./admin/naudl/sections.mhtml:		my $tourn_id = "TR".$tourn->id;
./select:./admin/naudl/sections.mhtml:		my $tourn_name = $tourn->name;
./select:./admin/naudl/sections.mhtml:		my $tourn_start = $tourn->start->set_time_zone($tourn->tz);
./select:./admin/naudl/sections.mhtml:		my $start_string = $tourn_start->year."-".$tourn_start->month."-".$tourn_start->day."T00:00:00.00Z";
./select:./admin/naudl/sections.mhtml:		my $tourn_place = $tourn->state;
./select:./admin/naudl/sections.mhtml:		foreach my $event ($tourn->events) { 
./select:./admin/naudl/sections.mhtml:			my @all_rounds = sort {$a->name <=> $b->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");
./select:./admin/naudl/sections.mhtml:			my @judges = $m->comp("/funclib/event_judges.mas", event => $event);
./select:./admin/naudl/sections.mhtml:			my %judge_name_by_id = map { $_->id => $_->first." ".$_->last } @judges;
./select:./admin/naudl/sections.mhtml:			my $event_name = $event->type."-".$event->name;
./select:./admin/naudl/sections.mhtml:			my $event_level = $event->setting("level");
./select:./admin/naudl/sections.mhtml:			my $level = $event->name;
./select:./admin/naudl/sections.mhtml:			foreach my $student ($m->comp("/funclib/event_students.mas", event => $event, by_results => 1)) { 
./select:./admin/naudl/sections.mhtml:				my $entry_id = $student->entry;
./select:./admin/naudl/sections.mhtml:				my $studentid = $student->id;
./select:./admin/naudl/sections.mhtml:					my $roundname = $round->name;
./select:./admin/naudl/sections.mhtml:					foreach my $judge (@{$entry_round_judges{$entry_id."-".$roundname}}) { 
./select:./admin/naudl/sections.mhtml:						my $side = substr($entry_round_side{$entry_id."-".$roundname."-".$judge},0,1);
./select:./admin/naudl/sections.mhtml:						my $rank = $student_round_ranks{$studentid."-".$roundname."-".$judge};
./select:./admin/naudl/sections.mhtml:						my $points = $student_round_points{$studentid."-".$roundname."-".$judge};
./select:./admin/naudl/sections.mhtml:						my $result = $entry_round_decision{$entry_id."-".$roundname."-".$judge};
./select:./admin/naudl/sections.mhtml:						my $section = $entry_round_section{$entry_id."-".$roundname."-".$judge};
./select:./admin/naudl/sections.mhtml:						my $letter = $entry_round_section_letter{$entry_id."-".$roundname."-".$judge};
./select:./admin/naudl/sections.mhtml:						my $ballot = $student_round_ballot{$studentid."-".$roundname."-".$judge};
./select:./admin/naudl/sections.mhtml:				my $roundname = substr($round->label,0,1);
./select:./admin/naudl/sections.mhtml:				foreach my $panel ($round->panels) { 
./select:./admin/naudl/sections.mhtml:					my $letter = $panel->letter;
./select:./admin/naudl/sections.mhtml:					my $section = $panel->id;
./select:./admin/naudl/sections.mhtml:					my ($winner, $winningside) = $m->comp("/funclib/panel_winner.mas", panel => $panel, noob => 1);
./select:./admin/naudl/sections.mhtml:					foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
./select:./admin/naudl/sections.mhtml:						my $ballot = $entry->ballot;
./select:./admin/naudl/sections.mhtml:						foreach my $student ($entry->students) { 
./select:./admin/naudl/sections.mhtml:							my $studentid = $student->id;
./select:./admin/naudl/tournaments.mhtml:	my $now = DateTime->now;
./select:./admin/naudl/tournaments.mhtml:	my @tourns = Tab::Tourn->search_naudl_competed( 
./select:./admin/naudl/tournaments.mhtml:    my $filename = "NAUDL-Tournaments-$start-$end.csv";
./select:./admin/naudl/tournaments.mhtml:		my @sites = $tourn->sites;
./select:./admin/naudl/tournaments.mhtml:		my $site_name = $site->name if $site;
./select:./admin/naudl/tournaments.mhtml:		my $start = $tourn->start;
./select:./admin/tourns.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./admin/tourns.mhtml:	my $now = DateTime->now;
./select:./admin/tourns.mhtml:	my $start = $now->clone;
./select:./admin/tourns.mhtml:	my $end = $now->clone;
./select:./admin/tourns.mhtml:%					foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->retrieve_all) {
./select:./admin/tourns.mhtml:%								foreach my $admin ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => 1)) { 
./select:./admin/tourns.mhtml:%           				my $warn = "This will delete the tournament ".$tourn->name." utterly.  There is no going back.  Be sure";
./select:./admin/tourns.mhtml:%							foreach my $admin_now ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn_now, contact => 1)) {
./select:./admin/tourn_delete.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./admin/tourn_delete.mhtml:	my $msg = "Tournament ".$tourn->name." has been completely and utterly wiped from the face of the earth.  I hope you meant to do that because if you did not, it\'s your funeral.";
./select:./admin/chapter_circuit_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./admin/chapter_circuit_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./select:./admin/chapter_circuit_add.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./select:./admin/chapter_circuit_add.mhtml:		my $cl = Tab::ChapterCircuit->create({
./select:./admin/chapter_circuit_add.mhtml:	my $msg = $chapter->name." has been joined to ".$circuit->abbr;
./select:./admin/chapter_merge.mhtml:	my $target = Tab::Chapter->retrieve($target_id) if $target_id;
./select:./admin/chapter_merge.mhtml:%			my @circuits = $candidate->circuits;
./select:./admin/chapter_merge.mhtml:%							foreach my $circuit ($candidate->circuits) {  
./select:./admin/chapter_merge.mhtml:%							foreach my $contact ($candidate->admins) { 
./select:./admin/chapter_merge.mhtml:%							foreach my $tourn (Tab::Tourn->search_last_five($candidate->id)) { 
./select:./admin/chapter_admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./admin/chapter_admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./select:./admin/chapter_admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./select:./admin/chapter_admin_rm.mhtml:	my $msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./select:./admin/person_edit.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./select:./admin/person_edit.mhtml:%			foreach my $login ($edit->logins) { 
./select:./admin/person_save.mhtml:	my $emailok = Email::Valid->address( -address => $email, -mxcheck => 0 ) ? 'yes' : 'no';
./select:./admin/person_save.mhtml:	my $edit = Tab::Person->retrieve($edit_id);
./select:./admin/person_save.mhtml:		my @existing_emails = Tab::Person->search( email => $email);
./select:./admin/person_save.mhtml:			my $err = "Email address $email already has an account: ".$existing_emails[0]->first." ".$existing_emails[0]->last;
./select:./admin/person_save.mhtml:		my $taken = Tab::Login->search( username => $email)->first;
./select:./admin/person_save.mhtml:		my $login = Tab::Login->search( person => $edit->id, username => $edit->email )->first;
./select:./admin/person_save.mhtml:	foreach my $login ($edit->logins) { 
./select:./admin/su.mhtml:	my $become = Tab::Person->retrieve($su_id);
./select:./admin/su.mhtml:	my $log = $person->first." ".$person->last." has become ".$become->first." ".$become->last;
./select:./admin/su.mhtml:	my $msg = "Presto!  You are become ".$become->first." ".$become->last.".  Use the Return to Self link above to undo it";
./select:./admin/about_save.mhtml:	my $webpage = Tab::Webpage->search( sitewide => 1 )->first;
./select:./admin/about_save.mhtml:	my $now = DateTime->now;
./select:./admin/chapter_circuit_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./admin/chapter_circuit_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id); 
./select:./admin/chapter_circuit_rm.mhtml:	my @cc = Tab::ChapterCircuit->search( circuit => $circuit_id, chapter => $chapter->id);
./select:./admin/chapter_circuit_rm.mhtml:	my $msg = $chapter->name." was removed from the circuit ".$circuit->name;
./select:./admin/chapter_merge_save.mhtml:	my @candidates = Tab::Chapter->search_where( name => { "like", "%".$name."%"} );
./select:./admin/chapter_merge_save.mhtml:	my %admins = map {$_->id => $_} $prefer->admins;
./select:./admin/chapter_merge_save.mhtml:	my %circuits = map {$_->id => $_} $prefer->circuits;
./select:./admin/chapter_merge_save.mhtml:	my %tourns = map {$_->tourn->id => $_} $prefer->schools;
./select:./admin/chapter_merge_save.mhtml:		foreach my $ca ($prefer->permissions) { 
./select:./admin/chapter_merge_save.mhtml:		my $exclude = $ARGS{"exclude_".$merge_me->id};
./select:./admin/chapter_merge_save.mhtml:			foreach my $ca ($merge_me->permissions) { 
./select:./admin/chapter_merge_save.mhtml:			foreach my $ca ($merge_me->permissions) { 
./select:./admin/chapter_merge_save.mhtml:		foreach my $cc ($merge_me->chapter_circuits) { 
./select:./admin/chapter_merge_save.mhtml:		my @others = $merge_me->schools;
./select:./admin/chapter_merge_save.mhtml:		foreach my $school ($merge_me->schools) { 
./select:./admin/chapter_merge_save.mhtml:				my $school_dest = $tourns{$school->tourn->id};
./select:./admin/chapter_merge_save.mhtml:		foreach my $student ($merge_me->students) { 
./select:./admin/chapter_merge_save.mhtml:		foreach my $chapter_judge ($merge_me->chapter_judges) { 
./select:./admin/chapter_merge_save.mhtml:	foreach my $student ($prefer->students) { 
./select:./admin/chapter_merge_save.mhtml:	foreach my $judge ($prefer->chapter_judges) { 
./select:./admin/chapter_merge_save.mhtml:	my $msg .= "School ".$prefer->name." has merged $merge_string into $prefer ".$prefer->name;
./select:./admin/chapter_admins.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./admin/chapter_admins.mhtml:	foreach my $permission ($chapter->permissions) { 
./select:./admin/chapter_admins.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./select:./admin/chapter_admins.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $person, tag => "chapter" });
./select:./admin/chapter_admins.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $person, tag => "prefs" });
./select:./admin/about.mhtml:	my $webpage = Tab::Webpage->search( sitewide => 1)->first;
./select:./admin/chapters.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./admin/chapters.mhtml:%						foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->retrieve_all) {
./select:./admin/chapters.mhtml:%								foreach my $circuit ($chapter->circuits) { 
./select:./admin/chapters.mhtml:%								foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, contact => 1)) { 
./select:./admin/judge_merge.mas:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./admin/calendar_switch.mhtml:	my $calendar = Tab::Calendar->retrieve($calendar_id);
./select:./circuit/cooke_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/cooke_save.mhtml:	foreach my $diocese ($circuit->regions) {
./select:./circuit/result_fix_launch.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./circuit/result_fix_launch.mhtml:	my @weight = Tab::TournSetting->search( tourn => $tourn_id, tag => 'weight');
./select:./circuit/result_fix_launch.mhtml:	$tournweight = $dummy->value;
./select:./circuit/result_fix_launch.mhtml:%			my @events = Tab::Event->search( tourn => $tourn_id);
./select:./circuit/approve.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./circuit/approve.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/approve.mhtml:	my @admin_circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./select:./circuit/approve.mhtml:	my %permissions = map {$_->id => 1} @admin_circuits;
./select:./circuit/approve.mhtml:	foreach my $tc (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->id)) { 
./select:./circuit/approve.mhtml:	my $msg = "Tournament ".$tourn->name." has been approved.";
./select:./circuit/chapter_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./circuit/admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/admin_add.mhtml:	my $person = Tab::Person->search( email => $email)->first;
./select:./circuit/admin_add.mhtml:	my @existing = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id );
./select:./circuit/admin_add.mhtml:	my $circuit_admin = Tab::Permission->create({
./select:./circuit/admin_add.mhtml:	my $msg = $person->first." ".$person->last." is now an administrator for ".$circuit->abbr;
./select:./circuit/codes.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/codes.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./select:./circuit/region_admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/region_admin_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./circuit/region_admin_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./select:./circuit/region_admin_add.mhtml:	my $already = Tab::Permission->search( tag => "region", region => $region->id, person => $person->id ) if $person;
./select:./circuit/region_admin_add.mhtml:			my $admin = Tab::Permission->create({
./select:./circuit/chapter_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./circuit/chapter_edit.mhtml:%		foreach my $coach ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter)) {
./select:./circuit/join.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./circuit/join.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/join.mhtml:	my $cl = Tab::ChapterCircuit->create({
./select:./circuit/join.mhtml:	my $err = "Choose a region " if $tourn->setting("regions");
./select:./circuit/access_rm.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./circuit/access_rm.mhtml:	my $admin = Tab::Person->retrieve($admin_id);
./select:./circuit/access_rm.mhtml:	my @access = Tab::Permission->search( tourn => $tourn->id, person => $admin->id);
./select:./circuit/access_rm.mhtml:	my @owners = Tab::Permission->search( tourn => $tourn->id, tag => "owner");
./select:./circuit/access_rm.mhtml:	my @contacts = Tab::Permission->search( tourn => $tourn->id, tag => "contact");
./select:./circuit/admin_rm.mhtml:	my @admins = Tab::Permission->search ( tag => 'circuit', person => $admin_id, circuit => $circuit_id);
./select:./circuit/regions.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/regions.mhtml:	my $naudl++ if $circuit->setting("naudl");
./select:./circuit/regions.mhtml:%			foreach my $region (sort {$a->name cmp $b->name} $circuit->regions) {
./select:./circuit/regions.mhtml:%						foreach my $admin ($region->admins) { 
./select:./circuit/email_view.mhtml:	my $email = Tab::Email->retrieve($email_id);
./select:./circuit/email_view.mhtml:	my $year = $email->sent_at->year;
./select:./circuit/email_view.mhtml:%			my $tz = $email->tourn->tz if $email->tourn;
./select:./circuit/email_view.mhtml:%			my $sent = $email->sent_at;
./select:./circuit/contacts.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/contacts.mhtml:	my $name = $circuit->name;
./select:./circuit/contacts.mhtml:	my $filename = $name."-contacts-".$session->id.".csv";
./select:./circuit/contacts.mhtml:	my $garbage = `rm -f $filepath`;
./select:./circuit/contacts.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./select:./circuit/contacts.mhtml:		foreach my $admin ($chapter->admins) { 
./select:./circuit/approvals.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/approvals.mhtml:	my @approvals = $m->comp("/funclib/circuit_tourns.mas", approval => 1, circuit => $circuit);
./select:./circuit/approvals.mhtml:	my $school_year = Tab->school_year;
./select:./circuit/approvals.mhtml:%			foreach my $tourn (sort {$a->start->epoch <=> $b->start->epoch} @approvals ) { 
./select:./circuit/approvals.mhtml:%				my $tz = $tourn->tz;
./select:./circuit/approvals.mhtml:%						foreach my $director ($tourn->admins) { 
./select:./circuit/approvals.mhtml:%						my $warn = "This will remove the tournament from your circuit. Are you sure you want to so banish ".$tourn->name."?";
./select:./circuit/deny.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./circuit/deny.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/deny.mhtml:	my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./select:./circuit/deny.mhtml:	foreach my $tc (Tab::TournCircuit->search( tourn => $tourn->id, circuit => $circuit->id)) { 
./select:./circuit/deny.mhtml:	my $msg = "Tournament ".$tourn->name." has been removed from your circuit's calendar.";
./select:./circuit/access.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./circuit/access.mhtml:	my %tourn_circuits = map {$_->id => 1} $tourn->circuits;
./select:./circuit/access.mhtml:	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;
./select:./circuit/access.mhtml:		my @perms = Tab::Permission->search( tourn => $tourn->id, person => $admin );
./select:./circuit/access.mhtml:%										foreach my $category ($tourn->categories) { 
./select:./circuit/tourns.mhtml:	my $tz = $person->tz;
./select:./circuit/tourns.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./circuit/tourns.mhtml:	my $begin = DateTime->new( 
./select:./circuit/tourns.mhtml:	my $stop = DateTime->new(
./select:./circuit/tourns.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./select:./circuit/tourns.mhtml:% 					my $start = $tourn->start;
./select:./circuit/tourns.mhtml:% 					my $end = $tourn->end;
./select:./circuit/tourns.mhtml:% 						foreach my $contact ($m->comp("/funclib/tourn_admins.mas", tourn => $tourn, contact => "yep" )) { 
./select:./circuit/diocese_admin_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/diocese_admin_rm.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./select:./circuit/diocese_admin_rm.mhtml:	my @already = Tab::Permission->search( tag => 'region', region => $diocese->id, person => $admin_id );
./select:./circuit/region_admin.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/region_admin.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./circuit/region_admin.mhtml:%		foreach my $admin ($region->admins) { 
./select:./circuit/judge_training.mhtml:	my $person = Tab::Person->search( email => $person_email)->first if $person_email;
./select:./circuit/judge_training.mhtml:%			my $key = "judge_training_".$circuit->id;
./select:./circuit/chapter_admin_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./circuit/chapter_admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./select:./circuit/chapter_admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./select:./circuit/chapter_admin_save.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./select:./circuit/chapter_admin_save.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "chapter" });
./select:./circuit/chapter_admin_save.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "prefs" });
./select:./circuit/results_massager_save.mas:	#my $entry_student = Tab::EntryStudent->retrieve($student_out);
./select:./circuit/results_massager_save.mas:        my @entry_students = Tab::EntryStudent->search( entry => $entry_id, student => $student_out);
./select:./circuit/results_massager_save.mas:        my @ballots = Tab::Ballot->search( entry => $entry_id);
./select:./circuit/results_massager_save.mas:            my @scores = Tab::Score->search( ballot => $ballot, student => $student_out);
./select:./circuit/results_massager.mhtml:    my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/email_compose.mhtml:	my $email = Tab::Email->retrieve($email_id) if $email_id;
./select:./circuit/email_compose.mhtml:	my $now = DateTime->now;
./select:./circuit/email_compose.mhtml:	my @tourns = $m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, approved => "yes");
./select:./circuit/email_compose.mhtml:	my $year = $now->year;
./select:./circuit/email_compose.mhtml:	my $limit_date = $year."-07-01";
./select:./circuit/email_compose.mhtml:	my $limit = DateTime::Format::MySQL->parse_date($limit_date);
./select:./circuit/email_compose.mhtml:%		foreach my $tourn (sort {$b->start <=> $a->start} @tourns) { 
./select:./circuit/email_compose.mhtml:% 			my $tourn_key = "tourn_".$tourn->id;
./select:./circuit/diocese_admin.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/diocese_admin.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./select:./circuit/diocese_admin.mhtml:%		foreach my $admin ($diocese->admins) { 
./select:./circuit/region_admin_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/region_admin_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./circuit/region_admin_rm.mhtml:	my @already = Tab::Permission->search( tag => "region", region => $region->id, person => $admin_id );
./select:./circuit/dioceses.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/dioceses.mhtml:%				foreach my $diocese (sort {$a->name cmp $b->name} $circuit->regions) {
./select:./circuit/dioceses.mhtml:%							foreach my $admin ($diocese->admins) { 
./select:./circuit/chapter_circuit_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/chapter_circuit_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./select:./circuit/chapter_circuit_add.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./select:./circuit/chapter_circuit_add.mhtml:		my $cl = Tab::ChapterCircuit->create({
./select:./circuit/chapter_circuit_add.mhtml:	my $msg = $chapter->name." has been joined to ".$circuit->abbr;
./select:./circuit/judge_training_save.mhtml:	my $now = DateTime->now;
./select:./circuit/judge_training_save.mhtml:	my $judge_person = Tab::Person->retrieve($person_id);
./select:./circuit/judge_training_save.mhtml:	my $key = "judge_training_".$circuit->id;
./select:./circuit/judge_training_save.mhtml:	my $meta_key = "judge_tr_meta_".$circuit->id;
./select:./circuit/judge_training_save.mhtml:	my $meta = "Entered by ".$person->first." ".$person->last." at ".Tab::nicedt($now)." UTC";
./select:./circuit/email_send.mhtml:	my $now = DateTime->now;
./select:./circuit/email_send.mhtml:	my $email = Tab::Email->create({ 	
./select:./circuit/email_send.mhtml:	my $email_id = $email->id;
./select:./circuit/email_send.mhtml:   		foreach my $chapter ($m->comp('/funclib/circuit_chapters.mas', circuit => $circuit, full => 1)) {
./select:./circuit/email_send.mhtml:		my $nowkey = DateTime::Format::MySQL->format_date($now);
./select:./circuit/email_send.mhtml:		my @tourns = $circuit->tourns;
./select:./circuit/email_send.mhtml:			my $tourn_key = "tourn_".$tourn->id;
./select:./circuit/email_send.mhtml:			foreach my $school ($tourn->schools) { 
./select:./circuit/chapter_admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./circuit/chapter_admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./select:./circuit/chapter_admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./select:./circuit/dues_invoice.mhtml:	my $cl = Tab::ChapterCircuit->retrieve($cl_id);
./select:./circuit/dues_invoice.mhtml:	my $chapter = $cl->chapter;
./select:./circuit/dues_invoice.mhtml:	my $circuit = $cl->circuit;
./select:./circuit/dues_invoice.mhtml:	my $filename = "dues-invoice-".$chapter->id."-".$session->id;
./select:./circuit/dues_invoice.mhtml:	my $filepath = "files/".$circuit->id."/invoices";
./select:./circuit/dues_invoice.mhtml:	my $garbage = `mkdir -p $Tab::file_root/$filepath`;
./select:./circuit/diocese_admin_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/diocese_admin_add.mhtml:	my $diocese = Tab::Region->retrieve($diocese_id);
./select:./circuit/diocese_admin_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./select:./circuit/diocese_admin_add.mhtml:	my $already = Tab::Permission->search( tag => "region", region => $diocese->id, person => $person->id ) if $person;
./select:./circuit/diocese_admin_add.mhtml:			my $admin = Tab::Permission->create({
./select:./circuit/chapter_by_tourn.mhtml:	my $tournvar = Tab::Tourn->retrieve($tourn_id);
./select:./circuit/chapter_by_tourn.mhtml:	my @school = Tab::School->search( tourn => $tourn_id);
./select:./circuit/chapter_by_tourn.mhtml:#        my @clear = Tab::Entry->search( event => $event->id,  dropped => 0, waitlist => 0 );
./select:./circuit/autohandler:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./circuit/autohandler:		my @ca = Tab::Permission->search( tag => "circuit", person => $person->id, circuit => $circuit_id);
./select:./circuit/codes_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/codes_save.mhtml:	my @chapters = $m->comp("/funclib/circuit_chapters.mas", circuit => $circuit);
./select:./circuit/codes_save.mhtml:		my $code = $ARGS{$chapter->id};
./select:./circuit/emails.mhtml:	my $tz = $person->tz;
./select:./circuit/emails.mhtml:	my @is_admin = Tab::Permission->search( tag => "circuit",  circuit => $circuit->id, person => $person->id );
./select:./circuit/emails.mhtml:	my $now = DateTime->now;
./select:./circuit/emails.mhtml:	my $start_range = DateTime->new({
./select:./circuit/emails.mhtml:	my $end_range = DateTime->new({
./select:./circuit/emails.mhtml:	my @emails = Tab::Email->search_where(
./select:./circuit/emails.mhtml:%					my $sent_at = $email->sent_at->set_time_zone($tz);
./select:./circuit/tourn_results.mhtml:	my $tz = $person->tz;
./select:./circuit/tourn_results.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./circuit/tourn_results.mhtml:	my $begin = DateTime->new( 
./select:./circuit/tourn_results.mhtml:	my $stop = DateTime->new(
./select:./circuit/tourn_results.mhtml:	my $circuit=Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./circuit/tourn_results.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./select:./circuit/tourn_results.mhtml:%				my @events = Tab::Event->search( tourn=> $tourn->id);
./select:./circuit/tourn_results.mhtml:% 					my $start = $tourn->start;
./select:./circuit/tourn_results.mhtml:% 					my $end = $tourn->end;
./select:./circuit/tourn_results.mhtml:%						my @result_set=Tab::ResultSet->search( tourn => $tourn->id, event => $event->id, label => 'Final Places' );
./select:./circuit/tourn_results.mhtml:%						my @entries=Tab::Entry->search( event => $event->id, dropped => 0, waitlist => 0,  );
./select:./circuit/tourn_results.mhtml:%						my @results; if ( scalar(@result_set) > 0) { @results = Tab::Result->search( result_set=> $result_set[0]->id); }
./select:./circuit/dioceses_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/dioceses_save.mhtml:	foreach my $diocese (sort {$a->name cmp $b->name} $circuit->regions) {
./select:./circuit/access_save.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./circuit/access_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./circuit/access_save.mhtml:	my @admins =  grep { ! $seen{$_->id} ++ } $tourn->admins;
./select:./circuit/access_save.mhtml:	my @perms = Tab::Permission->search( tourn => $tourn->id );
./select:./circuit/access_save.mhtml:			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
./select:./circuit/access_save.mhtml:			foreach my $key (sort keys %{ $admin_perms{$admin->id} } ) { 
./select:./circuit/access_save.mhtml:				my $category = Tab::Category->retrieve($ARGS{$admin->id."_category"});
./select:./circuit/bdl_student_export.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/bdl_student_export.mhtml:	my $tz = $circuit->tz;
./select:./circuit/bdl_student_export.mhtml:    my $now = DateTime->now(time_zone => $tz);    
./select:./circuit/bdl_student_export.mhtml:	my $nowstring = $now->year."-".$now->month."-".$now->day."-".$now->hour."-".$now->strftime('%M');
./select:./circuit/bdl_student_export.mhtml:	my $name = $circuit->name;
./select:./circuit/bdl_student_export.mhtml:    my $filename = "BDL-AllStudentsReport-INTERNAL-$name-$nowstring";
./select:./circuit/bdl_student_export.mhtml:	foreach my $tourn ($circuit->tourns) { 
./select:./circuit/bdl_student_export.mhtml:		my %event_by_id = map { $_->id => $_ } $tourn->events;
./select:./circuit/bdl_student_export.mhtml:		my @students = $m->comp("/funclib/tourn_students.mas", tourn => $tourn, by_result => 1);
./select:./circuit/bdl_student_export.mhtml:		my $start_dt = $tourn->start;
./select:./circuit/bdl_student_export.mhtml:			my $event = $event_by_id{$student->entry};
./select:./circuit/bdl_student_export.mhtml:				my $gender = $student->gender;
./select:./circuit/bdl_student_export.mhtml:				my $bps_id = $student->school_sid;
./select:./circuit/bdl_student_export.mhtml:				my $birthday_dt = $student->birthdate; 
./select:./circuit/index.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./circuit/index.mhtml:	my $tz = $circuit->tz if $circuit;
./select:./circuit/index.mhtml:% 			foreach my $admin (sort {$a->last cmp $b->last} $circuit->admins) { 
./select:./circuit/chapter_circuit_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./circuit/chapter_circuit_rm.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id); 
./select:./circuit/chapter_circuit_rm.mhtml:	my @cc = Tab::ChapterCircuit->search( circuit => $circuit_id, chapter => $chapter->id);
./select:./circuit/chapter_circuit_rm.mhtml:	my $msg = $chapter->name." was removed from the circuit ".$circuit->name;
./select:./circuit/ndtceda_pt_manager.mhtml:	my $tz = $person->tz;
./select:./circuit/ndtceda_pt_manager.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./circuit/ndtceda_pt_manager.mhtml:	my $begin = DateTime->new( 
./select:./circuit/ndtceda_pt_manager.mhtml:	my $stop = DateTime->new(
./select:./circuit/ndtceda_pt_manager.mhtml:	my $circuit=Tab::Circuit->retrieve($circuit_id) if $circuit_id;
./select:./circuit/ndtceda_pt_manager.mhtml:	my @all_tourns = $circuit->tourns if $circuit;
./select:./circuit/ndtceda_pt_manager.mhtml:%				my @events = Tab::Event->search( tourn=> $tourn->id);
./select:./circuit/ndtceda_pt_manager.mhtml:% 					my $start = $tourn->start;
./select:./circuit/ndtceda_pt_manager.mhtml:% 					my $end = $tourn->end;
./select:./circuit/ndtceda_pt_manager.mhtml:%						my @entries=Tab::Entry->search( event => $event->id, dropped => 0 );
./select:./circuit/ndtceda_pt_manager.mhtml:%						my @result_set=Tab::ResultSet->search( event => $event->id, label => "ceda_pts" );
./select:./circuit/ndtceda_pt_manager.mhtml:%						my @results=Tab::Result->search( result_set => $result_set[0]->id );
./select:./circuit/ndtceda_pt_manager.mhtml:%						my @ada_result_set=Tab::ResultSet->search( event => $event->id, label => "ada_pts" );
./select:./circuit/ndtceda_pt_manager.mhtml:%						my @results=Tab::Result->search( result_set => $ada_result_set[0]->id ); 
./select:./circuit/regions_save.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/regions_save.mhtml:	foreach my $region ($circuit->regions)  {
./select:./circuit/chapter_school_match.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./select:./circuit/chapter_school_match.mhtml:	  my $object = Tab::Chapter->create( 
./select:./circuit/chapter_school_match.mhtml:	  my $object2 = Tab::ChapterCircuit->create( 
./select:./circuit/chapter_school_match.mhtml:	#my $dummy=substr($school->name, 0,3);
./select:./circuit/region_add.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/region_add.mhtml:		my $region = Tab::Region->create({
./select:./circuit/region_add.mhtml:			my $login = Tab::Login->search( username => $admin)->first;
./select:./circuit/chapters.mhtml:%								foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $chapter, contact => 1)) { 
./select:./circuit/menu.mas:	my $now = DateTime->now;
./select:./circuit/menu.mas:	my $end = $now->clone;
./select:./circuit/menu.mas:	my $start = $now->clone;
./select:./circuit/menu.mas:	my $top_year = $now->year;
./select:./circuit/menu.mas:			my $now = DateTime->now;
./select:./circuit/menu.mas:			my $earliest_email = Tab::Email->search_where(
./select:./circuit/menu.mas:			my $start_year = $earliest_email->sent_at->year if $earliest_email;
./select:./circuit/menu.mas:%						foreach my $menu_year ( $start_year .. $now->year ) { 
./select:./circuit/permissions_switch.mhtml:	my $admin = Tab::Person->retrieve($admin_id);
./select:./circuit/permissions_switch.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./circuit/permissions_switch.mhtml:	my $already = Tab::Permission->search(tourn => $tourn->id, person => $admin->id, tag => $tag);
./select:./circuit/cooke_points.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./circuit/cooke_points.mhtml:%				foreach my $diocese (sort {$b->cooke_pts <=> $a->cooke_pts} $circuit->regions) {
./select:./circuit/cooke_points.mhtml:%							my $admin = $diocese->admins->first if $diocese->admins;
./select:./circuit/access_add.mhtml:		my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./circuit/access_add.mhtml:		my $staff = Tab::Person->search( email => $email )->first;
./select:./circuit/access_add.mhtml:		my $already = Tab::Permission->search( tag => "tourn", person => $staff->id, tourn => $tourn_id )->first;
./select:./circuit/access_add.mhtml:			my $access = Tab::Permission->create({
./select:./tourn/location.mhtml:	foreach my $circuit (Tab::Circuit->search( active => 1) ) { 
./select:./tourn/location.mhtml:	foreach my $circuit_id (split(/-/, $circuit_string)) { 
./select:./tourn/location.mhtml:		my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./tourn/location.mhtml:  	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
./select:./tourn/location.mhtml:    my $enddt = DateTime::Format::MySQL->parse_datetime($end);
./select:./tourn/location.mhtml:    my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
./select:./tourn/location.mhtml:    my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
./select:./tourn/location.mhtml:    my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
./select:./tourn/location.mhtml:    my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
./select:./tourn/location.mhtml:    my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
./select:./tourn/location.mhtml:    my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);
./select:./tourn/location.mhtml:%					foreach my $site (sort {$a->name cmp $b->name} (@sites)) { 
./select:./tourn/upload_tourn.mhtml:	my $now = DateTime->now;
./select:./tourn/upload_tourn.mhtml:	my $tz = $person->tz if $person->tz;
./select:./tourn/upload_tourn.mhtml:	my $req = Apache2::Request->new($r);
./select:./tourn/upload_tourn.mhtml:	my @xml_handles = $r->upload;
./select:./tourn/upload_tourn.mhtml:	my $xml_file = $req->upload($xml_handles[0]);
./select:./tourn/upload_tourn.mhtml:	my $xml_filename = $xml_file->tempname;
./select:./tourn/upload_tourn.mhtml:	my $epoch = $now->epoch;
./select:./tourn/upload_tourn.mhtml:	my $data = $xml->XMLin($Tab::file_root."tmp/$epoch/TourneyData.xml");
./select:./tourn/upload_tourn.mhtml:		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{STARTDATE});
./select:./tourn/upload_tourn.mhtml:		my $reg_start = $start->clone;
./select:./tourn/upload_tourn.mhtml:		my $reg_end = $end->clone;
./select:./tourn/upload_tourn.mhtml:		my %tournament_settings = map {$_->{TAG}, $_->{VALUE}} @{$data->{TOURN_SETTING}};
./select:./tourn/upload_tourn.mhtml:			my $contact = Tab::Permission->create({ person => $person->id, tourn => $tourn->id, tag => "contact" });
./select:./tourn/upload_tourn.mhtml:			my $owner = Tab::Permission->create({ person => $person->id, tourn => $tourn->id, tag => "owner" });
./select:./tourn/upload_tourn.mhtml:			my $sname = $tourn->name;
./select:./tourn/upload_tourn.mhtml:			my $site = Tab::Site->search( name => $sname )->first;
./select:./tourn/upload_tourn.mhtml:			my $tsite = Tab::TournSite->create({
./select:./tourn/upload_tourn.mhtml:   		my @events = @{$data->{EVENT}};
./select:./tourn/upload_tourn.mhtml:			my $type = lc($xml_event->{TYPE});
./select:./tourn/upload_tourn.mhtml:			my $event = Tab::Event->create({
./select:./tourn/upload_tourn.mhtml:	my @tournament_settings = @{$data->{TOURN_SETTING}};
./select:./tourn/upload_tourn.mhtml:	foreach my $tiebreak_set ($tourn->tiebreak_sets) { 
./select:./tourn/upload_tourn.mhtml:		foreach my $tb ($tiebreak_set->tiebreaks) { 
./select:./tourn/upload_tourn.mhtml:	my @tiebreak_sets = @{$data->{TIEBREAK_SET}};
./select:./tourn/upload_tourn.mhtml:		my $id = $xml_tiebreak_set->{ID};
./select:./tourn/upload_tourn.mhtml:		my $name = $xml_tiebreak_set->{TBSET_NAME};
./select:./tourn/upload_tourn.mhtml:		my $type = $xml_tiebreak_set->{SCOREFOR};
./select:./tourn/upload_tourn.mhtml:		my $elim = $xml_tiebreak_set->{ELIM};
./select:./tourn/upload_tourn.mhtml:		my $tiebreak_set = Tab::TiebreakSet->search( name => $name, tourn => $tourn->id)->first;
./select:./tourn/upload_tourn.mhtml:	my @tbs = @{$data->{TIEBREAK}};
./select:./tourn/upload_tourn.mhtml:		my $name = $xml_tb->{LABEL};
./select:./tourn/upload_tourn.mhtml:		my $priority = $xml_tb->{SortOrder};
./select:./tourn/upload_tourn.mhtml:		my $tiebreak_set_id = $xml_tb->{TB_SET};
./select:./tourn/upload_tourn.mhtml:		my $tb = Tab::Tiebreak->create({
./select:./tourn/upload_tourn.mhtml:		my @tiebreaks = $elim_tiebreak_set->tiebreaks if $elim_tiebreak_set;;
./select:./tourn/upload_tourn.mhtml:			my $tiebreak = Tab::Tiebreak->create({
./select:./tourn/upload_tourn.mhtml:	foreach my $timeslot ($tourn->timeslots) { 
./select:./tourn/upload_tourn.mhtml:	my $stepper = $tourn->start;
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_timeslot (@{$data->{TIMESLOT}}) { 
./select:./tourn/upload_tourn.mhtml:		my $timeslot = $timeslot_by_id{$xml_timeslot->{ID}};
./select:./tourn/upload_tourn.mhtml:			my $tz = $tourn->tz;
./select:./tourn/upload_tourn.mhtml:			my $tz = $tourn->tz;
./select:./tourn/upload_tourn.mhtml:			my $start = Tab::xmldtme($xml_timeslot->{START}, $tz);
./select:./tourn/upload_tourn.mhtml:			my $end = Tab::xmldtme($xml_timeslot->{END}, $tz);
./select:./tourn/upload_tourn.mhtml:	foreach my $school ($tourn->schools) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_school (@{$data->{SCHOOL}}) { 
./select:./tourn/upload_tourn.mhtml:		my $school = $school_by_id{$xml_school->{ID}};
./select:./tourn/upload_tourn.mhtml:			my $chapter = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} )->first;
./select:./tourn/upload_tourn.mhtml:			my $school = Tab::School->search( name => $xml_school->{SCHOOLNAME}, tourn => $tourn->id )->first;
./select:./tourn/upload_tourn.mhtml:	foreach my $student ($m->comp("/funclib/tourn_students.mas", tourn => $tourn)) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_student (@{$data->{ENTRY_STUDENT}}) { 
./select:./tourn/upload_tourn.mhtml:		my $student = $student_by_id{$xml_student->{ID}};
./select:./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_student->{SCHOOL}}[0]};
./select:./tourn/upload_tourn.mhtml:				my $first = $xml_student->{FIRST};
./select:./tourn/upload_tourn.mhtml:				my $last = $xml_student->{LAST};
./select:./tourn/upload_tourn.mhtml:	foreach my $event ($tourn->events) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_event (@{$data->{EVENT}}) { 
./select:./tourn/upload_tourn.mhtml:		my $event = $event_by_id{$xml_event->{ID}};
./select:./tourn/upload_tourn.mhtml:			my $type = lc($xml_event->{TYPE});
./select:./tourn/upload_tourn.mhtml:		my @event_settings = @{$data->{EVENT_SETTING}};
./select:./tourn/upload_tourn.mhtml:		foreach my $entry ($event->entries( waitlist => 0,  dropped => 0)) {
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_entry (@{$data->{ENTRY}}) { 
./select:./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_entry->{ID}};
./select:./tourn/upload_tourn.mhtml:		my $event = $event_by_id{@{$xml_entry->{EVENT}}[0]};
./select:./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_entry->{SCHOOL}}[0]};
./select:./tourn/upload_tourn.mhtml:			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
./select:./tourn/upload_tourn.mhtml:			my $ada = 1 if lc($xml_entry->{ADA}) eq "true";
./select:./tourn/upload_tourn.mhtml:			my $dropped = 1 if lc($xml_entry->{DROPPED}) eq "true";
./select:./tourn/upload_tourn.mhtml:		my @students = @{$students_by_entry{$xml_entry->{ID}}} if $students_by_entry{$xml_entry->{ID}};
./select:./tourn/upload_tourn.mhtml:		foreach my $entry_student ($entry->entry_students) { 
./select:./tourn/upload_tourn.mhtml:			foreach my $entry_student ($entry->entry_students) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $judge ($category->judges) { 
./select:./tourn/upload_tourn.mhtml:    foreach my $setting (Tab::JudgeSetting->search_upload_id( $category->id )) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_judge (@{$data->{JUDGE}}) { 
./select:./tourn/upload_tourn.mhtml:		my $judge = $judge_by_id{$xml_judge->{ID}};
./select:./tourn/upload_tourn.mhtml:			my $judge_me_maybe = Tab::Judge->retrieve($xml_judge->{ID});
./select:./tourn/upload_tourn.mhtml:		my $school = $school_by_id{@{$xml_judge->{SCHOOL}}[0]};
./select:./tourn/upload_tourn.mhtml:		my $first = $xml_judge->{FIRST};
./select:./tourn/upload_tourn.mhtml:		my $last = $xml_judge->{LAST};
./select:./tourn/upload_tourn.mhtml:	    my @time_strikes =  $tourn->strikes( judge => $judge->id, type => "time"); 
./select:./tourn/upload_tourn.mhtml:			my $key = "TIMESLOT".$timeslot->id;
./select:./tourn/upload_tourn.mhtml:		foreach my $es (Tab::Strike->search( judge => $judge->id, type => "event" )) { 
./select:./tourn/upload_tourn.mhtml:		foreach my $event ($tourn->events) { 
./select:./tourn/upload_tourn.mhtml:			my $key = "EVENT".$event->id;
./select:./tourn/upload_tourn.mhtml:			my $already = $event_strikes{$event->id};
./select:./tourn/upload_tourn.mhtml:		foreach my $rating ($m->comp("/funclib/event_ratings.mas", event => $event)) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $tier ($m->comp("/funclib/tourn_rating_tiers.mas", tourn => $tourn)) { 
./select:./tourn/upload_tourn.mhtml:		foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 
./select:./tourn/upload_tourn.mhtml:			my $tier = Tab::RatingTier->create({
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_rating (@{$data->{JUDGEPREF}}) { 
./select:./tourn/upload_tourn.mhtml:		my $rating = $rating_by_id{$xml_rating->{ID}};
./select:./tourn/upload_tourn.mhtml:			my $conflict++ if $xml_rating->{RATING} == 999;
./select:./tourn/upload_tourn.mhtml:			my $tier = $tier_by_name{$xml_rating->{RATING}} if $rating_type eq "tiered";
./select:./tourn/upload_tourn.mhtml:			my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
./select:./tourn/upload_tourn.mhtml:			my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};
./select:./tourn/upload_tourn.mhtml:				my $ordinal = $xml_rating->{RATING} if $rating_type eq "ordinals";
./select:./tourn/upload_tourn.mhtml:				my $percentile = $xml_rating->{ORDPCT} if $rating_type eq "ordinals";
./select:./tourn/upload_tourn.mhtml:				my $tier = $tier_by_name{$xml_rating->{RATING}}->id if ($rating_type eq "tiered");
./select:./tourn/upload_tourn.mhtml:				my $entry = $entry_by_id{$xml_rating->{TEAM}}->id if $entry_by_id{$xml_rating->{TEAM}};
./select:./tourn/upload_tourn.mhtml:				my $judge = $judge_by_id{$xml_rating->{JUDGE}}->id if $judge_by_id{$xml_rating->{JUDGE}};
./select:./tourn/upload_tourn.mhtml:	foreach my $site ($tourn->sites) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_room (@{$data->{ROOM}}) { 
./select:./tourn/upload_tourn.mhtml:		my $room = $room_by_id{$xml_room->{ID}};
./select:./tourn/upload_tourn.mhtml:			my $inactive = 1 if $xml_room->{INACTIVE} eq "true";
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_round (@{$data->{ROUND}}) { 
./select:./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_round->{ID}};
./select:./tourn/upload_tourn.mhtml:		my $event = $event_by_id{${$xml_round->{EVENT}}[0]};
./select:./tourn/upload_tourn.mhtml:		my $timeslot = $timeslot_by_id{$xml_round->{TIMESLOT}};
./select:./tourn/upload_tourn.mhtml:		my $type = lc($xml_round->{PAIRINGSCHEME});
./select:./tourn/upload_tourn.mhtml:		my $tiebreak_set = $tiebreak_set_by_id{$xml_round->{TB_SET}};
./select:./tourn/upload_tourn.mhtml:			my $e_name = $event->name." ";
./select:./tourn/upload_tourn.mhtml:			my $label = $xml_round->{LABEL};
./select:./tourn/upload_tourn.mhtml:			my $label = $xml_round->{LABEL};
./select:./tourn/upload_tourn.mhtml:		foreach my $panel ($m->comp('/funclib/event_panels.mas', event => $event)) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_panel (@{$data->{PANEL}}) { 
./select:./tourn/upload_tourn.mhtml:		my $id = $xml_panel->{ID};
./select:./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_panel->{ROUND}};
./select:./tourn/upload_tourn.mhtml:		my $room = $room_by_id{$xml_panel->{ROOM}};
./select:./tourn/upload_tourn.mhtml:			my $letter = Tab::Round->sql_high_lett->select_val($round->id);
./select:./tourn/upload_tourn.mhtml:		foreach my $result_set ($event->result_sets) { 
./select:./tourn/upload_tourn.mhtml:			foreach my $result ($result_set->results) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_result (@{$data->{ROUNDRESULT}}) { 
./select:./tourn/upload_tourn.mhtml:		my $round = $round_by_id{$xml_result->{RoundId}};	
./select:./tourn/upload_tourn.mhtml:		foreach my $xml_panel (@{$xml_result->{RESULT_BALLOT}}) { 
./select:./tourn/upload_tourn.mhtml:			my $id = $xml_panel->{Panel};
./select:./tourn/upload_tourn.mhtml:			my @xml_results = @{$xml_panel->{RESULT_SCORE}};
./select:./tourn/upload_tourn.mhtml:                my $entry = $entry_by_id{$xml_ballot->{Recipient}};
./select:./tourn/upload_tourn.mhtml:                my $value = $xml_ballot->{content};
./select:./tourn/upload_tourn.mhtml:                my $side = $xml_ballot->{Side};
./select:./tourn/upload_tourn.mhtml:                foreach my $student (@{$students_by_entry{$xml_ballot->{Recipient}}}) {
./select:./tourn/upload_tourn.mhtml:                my $tag = lc($xml_value->{Score_Name});
./select:./tourn/upload_tourn.mhtml:                my $value = $xml_value->{content};
./select:./tourn/upload_tourn.mhtml:                my $score = Tab::Score->create({
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_elimseed (@{$data->{ELIMSEED}}) { 
./select:./tourn/upload_tourn.mhtml:		my $entry_id = $xml_elimseed->{ENTRY};
./select:./tourn/upload_tourn.mhtml:		my $round_id = $xml_elimseed->{ROUND};
./select:./tourn/upload_tourn.mhtml:		my $event_id = ${$xml_elimseed->{EVENT}}[0];
./select:./tourn/upload_tourn.mhtml:		my $result = $result_by_entry{$entry->id."-".$round->id};
./select:./tourn/upload_tourn.mhtml:		my $set = $seed_set_by_event{$event->id};
./select:./tourn/upload_tourn.mhtml:			foreach my $value ($result->values) { 
./select:./tourn/upload_tourn.mhtml:		my $type = $event->type;
./select:./tourn/upload_tourn.mhtml:		foreach my $ballot ($m->comp('/funclib/event_ballots.mas', event => $event)) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_ballot (@{$data->{BALLOT}}) { 
./select:./tourn/upload_tourn.mhtml:		my $ballot = $ballot_by_cat_id{$xml_ballot->{ID}};
./select:./tourn/upload_tourn.mhtml:		my $panel = $panel_by_cat_id{$xml_ballot->{PANEL}};
./select:./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_ballot->{ENTRY}};
./select:./tourn/upload_tourn.mhtml:		my $entry_id = $entry->id if $entry;
./select:./tourn/upload_tourn.mhtml:		my $type = $event->type;
./select:./tourn/upload_tourn.mhtml:		foreach my $value ($m->comp('/funclib/event_values.mas', event => $event)) { 
./select:./tourn/upload_tourn.mhtml:	foreach my $xml_score (@{$data->{BALLOT_SCORE}}) { 
./select:./tourn/upload_tourn.mhtml:		my $score = $score_by_cat_id{$xml_score->{ID}};
./select:./tourn/upload_tourn.mhtml:		my $ballot = $ballot_by_cat_id{$xml_score->{BALLOT}};
./select:./tourn/upload_tourn.mhtml:		my $type = $xml_score->{SCORE_ID};
./select:./tourn/upload_tourn.mhtml:		my $event_type = $ballot_event_type{$xml_score->{BALLOT}};
./select:./tourn/upload_tourn.mhtml:		my $student = $student_by_id{$xml_score->{RECIPIENT}} if ( $type == 2 || $type == 3 ) && $event_type ne "speech";
./select:./tourn/upload_tourn.mhtml:		my $entry = $entry_by_id{$xml_score->{RECIPIENT}} if ($type == 1 || $type == 4 || $type == 5 ) || $event_type eq "speech";
./select:./tourn/request.mhtml:	my $tz = $person->tz;
./select:./tourn/request.mhtml:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./select:./tourn/deadlines.mhtml:	my $now = DateTime->now;
./select:./tourn/deadlines.mhtml:	my $year = $now->year;
./select:./tourn/deadlines.mhtml:		my @webname_tourns = Tab::Tourn->search( webname => $webname );
./select:./tourn/deadlines.mhtml:				my @admins = Tab::Permission->search( person => $person->id, tourn => $wt->id, tag => "contact" );
./select:./tourn/deadlines.mhtml:	my $base_year = $startdt->year;
./select:./tourn/deadlines.mhtml:	my $deadlinedt = $startdt->clone;
./select:./tourn/tournaman_teamoverview.mhtml:	my $now = DateTime->now;
./select:./tourn/tournaman_teamoverview.mhtml:	my $tz = $person->tz if $person->tz;
./select:./tourn/tournaman_teamoverview.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./tourn/tournaman_teamoverview.mhtml:	my $req = Apache2::Request->new($r);
./select:./tourn/tournaman_teamoverview.mhtml:	my $xml_file = $req->upload("teamtab");
./select:./tourn/tournaman_teamoverview.mhtml:	my $xml_filename = $xml_file->tempname;
./select:./tourn/tournaman_teamoverview.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./select:./tourn/tournaman_teamoverview.mhtml:	my $webname=$xml_file->filename;
./select:./tourn/tournaman_teamoverview.mhtml:	my $te = HTML::TableExtract->new( headers => ['Name', 'Institution', 'Speaker 1', 'Speaker 2'] );
./select:./tourn/tournaman_teamoverview.mhtml:	foreach my $ts ($te->tables) {
./select:./tourn/tournaman_teamoverview.mhtml:	  foreach my $row ($ts->rows) {
./select:./tourn/tournaman_teamoverview.mhtml:#	   @$row[0] = $m->comp('/funclib/destupidify.mas', strDummy => @$row[0] );
./select:./tourn/tournaman_teamoverview.mhtml:	my $category = Tab::Category->search( tourn => $tourn_id )->first;
./select:./tourn/tournaman_teamoverview.mhtml:	my $event_id = CreateEvent($tourn_id, $category->id);
./select:./tourn/tournaman_teamoverview.mhtml:	foreach my $ts ($te->tables) {
./select:./tourn/tournaman_teamoverview.mhtml:	  foreach my $row ($ts->rows) {
./select:./tourn/tournaman_teamoverview.mhtml:		$last = substr($dummy, $x+1, $L-$x-1);
./select:./tourn/tournaman_teamoverview.mhtml:		my $sch = Tab::School->retrieve($school);
./select:./tourn/tournaman_teamoverview.mhtml:			my @student = Tab::Student->search( chapter => $sch->chapter, first => $first, last => $last );
./select:./tourn/tournaman_teamoverview.mhtml:		my $entryobject = Tab::Student->create( {
./select:./tourn/tournaman_teamoverview.mhtml:		my $entryobject = Tab::Entry->create( {
./select:./tourn/tournaman_teamoverview.mhtml:		my $eventobject = Tab::Event->create( {
./select:./tourn/tournaman_teamoverview.mhtml:		my $newschool = Tab::School->create({
./select:./tourn/tournaman_teamoverview.mhtml:		my @chapters = Tab::Chapter->search( name => $schoolname);
./select:./tourn/disclaimer.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./tourn/disclaimer.mhtml:	my $tourn = $school->tournament;
./select:./tourn/disclaimer.mhtml:	my $t2h = HTML::FromText->new({
./select:./tourn/disclaimer.mhtml:	my $html = $t2h->parse($tourn->disclaimer);
./select:./tourn/import_wudc_xml.mhtml:	my $now = DateTime->now;
./select:./tourn/import_wudc_xml.mhtml:	my $tz = $person->tz if $person->tz;
./select:./tourn/import_wudc_xml.mhtml:	my $req = Apache2::Request->new($r);
./select:./tourn/import_wudc_xml.mhtml:	my $xml_file = $req->upload("xml");
./select:./tourn/import_wudc_xml.mhtml:	my $xml_filename = $xml_file->tempname;
./select:./tourn/import_wudc_xml.mhtml:	my $webname=$xml_file->filename;
./select:./tourn/import_wudc_xml.mhtml:	my $data = $xml->XMLin($xml_filename);
./select:./tourn/import_wudc_xml.mhtml:	foreach my $xml_tourn (@{$data->{TOURN}}) {
./select:./tourn/import_wudc_xml.mhtml:	foreach my $xml_school (@{$data->{SCHOOL}}) {
./select:./tourn/import_wudc_xml.mhtml:	foreach my $xml_entry (@{$data->{ENTRY}}) {
./select:./tourn/import_wudc_xml.mhtml:		my $object = Tab::ResultValue->create( {
./select:./tourn/import_wudc_xml.mhtml:		my $pct = round((($nentries-$rank+1)/$nentries)*1000);
./select:./tourn/import_wudc_xml.mhtml:		my $result = Tab::Result->create( {
./select:./tourn/import_wudc_xml.mhtml:		my $now = DateTime->now( time_zone => $tz);
./select:./tourn/import_wudc_xml.mhtml:		my $RSobject = Tab::ResultSet->create( {
./select:./tourn/import_wudc_xml.mhtml:		my $entryobject = Tab::Entry->create( {
./select:./tourn/import_wudc_xml.mhtml:		my $eventobject = Tab::Event->create( {
./select:./tourn/import_wudc_xml.mhtml:		my @chapters = Tab::Chapter->search( name => $schoolname);
./select:./tourn/import_wudc_xml.mhtml:		my $newschool = Tab::School->create({
./select:./tourn/import_wudc_xml.mhtml:		my $tourn = Tab::Tourn->create( {
./select:./tourn/import_wudc_xml.mhtml:		my $category = Tab::Category->create( {
./select:./tourn/show_past_prefs.mhtml:	my @admin = Tab::Permission->search( person=>$person->id );
./select:./tourn/show_past_prefs.mhtml:		my @judges = Tab::ChapterJudge->search( person=>$person->id );
./select:./tourn/show_past_prefs.mhtml:		my @students = Tab::Student->search( person=>$person->id );
./select:./tourn/show_past_prefs.mhtml:	my @ratings = Tab::Rating->search_pull_ratings;
./select:./tourn/show_past_prefs.mhtml:	my @tiered_ratings = Tab::Rating->search_pull_tiered_ratings;
./select:./tourn/show_past_prefs.mhtml:	my $judge_person = Tab::Person->retrieve($judge_person_id);
./select:./tourn/circuit.mhtml:		my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./select:./tourn/circuit.mhtml:		my @all_circuits = Tab::Circuit->search(active => 1);
./select:./tourn/circuit.mhtml:%			foreach my $circuit (sort {$a->name cmp $b->name} @circuits) { 
./select:./tourn/circuit.mhtml:%			foreach my $circuit (sort {$a->name cmp $b->name} @all_circuits) { 
./select:./tourn/tournaman_teamtab.mhtml:	my $now = DateTime->now;
./select:./tourn/tournaman_teamtab.mhtml:	my $tz = $person->tz if $person->tz;
./select:./tourn/tournaman_teamtab.mhtml:	my $req = Apache2::Request->new($r);
./select:./tourn/tournaman_teamtab.mhtml:	my $xml_file = $req->upload("teamtab");
./select:./tourn/tournaman_teamtab.mhtml:	my $xml_filename = $xml_file->tempname;
./select:./tourn/tournaman_teamtab.mhtml:	my $webname=$xml_file->filename;
./select:./tourn/tournaman_teamtab.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./select:./tourn/tournaman_teamtab.mhtml:	my $te = HTML::TableExtract->new( headers => ['Position', 'Name', 'Total Rank', 'Total Speaker'] );
./select:./tourn/tournaman_teamtab.mhtml:	my @entry = Tab::Entry->search( tourn => $tourn_id);
./select:./tourn/tournaman_teamtab.mhtml:	my $RSobject = Tab::ResultSet->create( {
./select:./tourn/tournaman_teamtab.mhtml:	foreach my $ts ($te->tables) {
./select:./tourn/tournaman_teamtab.mhtml:	  foreach my $row ($ts->rows) {
./select:./tourn/tournaman_teamtab.mhtml:		my $pct = round((($nentries-@$row[0]+1)/$nentries)*1000);
./select:./tourn/tournaman_teamtab.mhtml:		my $entryrecord = Tab::Entry->retrieve( $entry{ "@$row[1]" } );
./select:./tourn/tournaman_teamtab.mhtml:		my $result = Tab::Result->create( {
./select:./tourn/clone_tournament.mas:	my $old_tourn = Tab::Tourn->retrieve($clone);
./select:./tourn/clone_tournament.mas:	my $ostart = $old_tourn->start;
./select:./tourn/clone_tournament.mas:	my $diff = $start->delta_days($ostart);  
./select:./tourn/clone_tournament.mas:	my $reg_start = $old_tourn->reg_start->clone;
./select:./tourn/clone_tournament.mas:	my $reg_end = $old_tourn->end->clone;
./select:./tourn/clone_tournament.mas:	my $already = Tab::Tourn->search( name => $name, start => $start, end => $end )->first;
./select:./tourn/clone_tournament.mas:		my $tourn = Tab::Tourn->create({ 
./select:./tourn/clone_tournament.mas:		my $owner = Tab::Permission->create({ 
./select:./tourn/clone_tournament.mas:		my $contact = Tab::Permission->create({ 
./select:./tourn/clone_tournament.mas:		foreach my $setting ($old_tourn->settings) {
./select:./tourn/clone_tournament.mas:			my $nsetting = $setting->copy({
./select:./tourn/clone_tournament.mas:				my $new_date = $nsetting->value_date->clone;
./select:./tourn/clone_tournament.mas:		foreach my $circuit ($old_tourn->tourn_circuits) { 
./select:./tourn/clone_tournament.mas:			my $ncircuit = $circuit->copy({
./select:./tourn/clone_tournament.mas:		foreach my $housing ($old_tourn->housing_slots) { 
./select:./tourn/clone_tournament.mas:			my $nhousing = $housing->copy({
./select:./tourn/clone_tournament.mas:			my $new_night = $housing->night;
./select:./tourn/clone_tournament.mas:		foreach my $ed ($old_tourn->patterns) { 
./select:./tourn/clone_tournament.mas:			my $ned = $ed->copy ({
./select:./tourn/clone_tournament.mas:		foreach my $tournsite ($old_tourn->tourn_sites) {
./select:./tourn/clone_tournament.mas:			my $ntournsite = $tournsite->copy ({
./select:./tourn/clone_tournament.mas:			foreach my $webpage ($tourn->webpages) {
./select:./tourn/clone_tournament.mas:				my $nwebpage = $webpage->copy ({
./select:./tourn/clone_tournament.mas:		foreach my $concession ($old_tourn->concessions) {
./select:./tourn/clone_tournament.mas:			my $nconcession = $concession->copy ({
./select:./tourn/clone_tournament.mas:			my $new_deadline = $concession->deadline;
./select:./tourn/clone_tournament.mas:		foreach my $tourn_fee ($old_tourn->tourn_fees) {
./select:./tourn/clone_tournament.mas:			my $ntourn_fee = $tourn_fee->copy ({
./select:./tourn/clone_tournament.mas:			my $new_start = $ntourn_fee->start;
./select:./tourn/clone_tournament.mas:			my $new_end = $ntourn_fee->end;
./select:./tourn/clone_tournament.mas:			foreach my $follower (Tab::Follower->search( tourn => $old_tourn->id, type => "tourn" )) { 
./select:./tourn/clone_tournament.mas:				my $nfollow = $follower->copy ({
./select:./tourn/clone_tournament.mas:		foreach my $ts ($old_tourn->timeslots) { 
./select:./tourn/clone_tournament.mas:			my $nts = $ts->copy({
./select:./tourn/clone_tournament.mas:			my $ntstart = $nts->start;
./select:./tourn/clone_tournament.mas:			my $ntend = $nts->end;
./select:./tourn/clone_tournament.mas:		foreach my $jg ($old_tourn->categories) { 
./select:./tourn/clone_tournament.mas:			my $njg = $jg->copy({
./select:./tourn/clone_tournament.mas:			foreach my $setting ($jg->settings) {
./select:./tourn/clone_tournament.mas:				my $nsetting = $setting->copy({
./select:./tourn/clone_tournament.mas:						my $new_date = $nsetting->value_date->clone;
./select:./tourn/clone_tournament.mas:			foreach my $jpool ($jg->jpools) { 
./select:./tourn/clone_tournament.mas:				my $npool = $jpool->copy({
./select:./tourn/clone_tournament.mas:			foreach my $rs ($jg->rating_subsets) { 
./select:./tourn/clone_tournament.mas:				my $nrs = $rs->copy({
./select:./tourn/clone_tournament.mas:				foreach my $rating_tier ($rs->rating_tiers) {
./select:./tourn/clone_tournament.mas:					my $nrating_tier = $rating_tier->copy({
./select:./tourn/clone_tournament.mas:			foreach my $rt ($jg->rating_tiers) { 
./select:./tourn/clone_tournament.mas:				my $nrt = $rt->copy({
./select:./tourn/clone_tournament.mas:			foreach my $strike_timeslot ($jg->strike_timeslots) { 
./select:./tourn/clone_tournament.mas:				my $nstrike_timeslot = $strike_timeslot->copy({
./select:./tourn/clone_tournament.mas:				my $new_start = $strike_timeslot->start;
./select:./tourn/clone_tournament.mas:				my $new_end = $strike_timeslot->end;
./select:./tourn/clone_tournament.mas:		foreach my $tiebreak_set ($old_tourn->tiebreak_sets) {
./select:./tourn/clone_tournament.mas:			my $ntiebreak_set = $tiebreak_set->copy({
./select:./tourn/clone_tournament.mas:			foreach my $tb ($tiebreak_set->tiebreaks) { 
./select:./tourn/clone_tournament.mas:				my $ntb = $tb->copy({
./select:./tourn/clone_tournament.mas:		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $old_tourn)) { 
./select:./tourn/clone_tournament.mas:			my $nevent = $event->copy({
./select:./tourn/clone_tournament.mas:			foreach my $setting ($event->settings) { 
./select:./tourn/clone_tournament.mas:				my $nsetting = $setting->copy({
./select:./tourn/clone_tournament.mas:					my $new_date = $nsetting->value_date->clone;
./select:./tourn/clone_tournament.mas:			foreach my $round ($event->rounds) { 
./select:./tourn/clone_tournament.mas:				my $nround = $round->copy({
./select:./tourn/clone_tournament.mas:				foreach my $setting ($round->settings) {
./select:./tourn/clone_tournament.mas:					my $nsetting = $setting->copy({
./select:./tourn/clone_tournament.mas:				my $new_bid = $round_translator{$nevent->setting("bid_round")};
./select:./tourn/clone_tournament.mas:		foreach my $jpool ($old_tourn->jpools) { 
./select:./tourn/clone_tournament.mas:			my $njpool = $jpool->copy({ tourn => $tourn->id });
./select:./tourn/clone_tournament.mas:			foreach my $round ($jpool->rounds) { 
./select:./tourn/clone_tournament.mas:		foreach my $rpool ($old_tourn->rpools) { 
./select:./tourn/clone_tournament.mas:			my $nrpool = $rpool->copy({ tourn => $tourn->id });
./select:./tourn/clone_tournament.mas:			foreach my $round ($rpool->rounds) { 
./select:./tourn/clone_tournament.mas:		foreach my $room_strike ($old_tourn->room_strikes) { 
./select:./tourn/clone_tournament.mas:			my $nroom_strike = $room_strike->copy({
./select:./tourn/clone_tournament.mas:				my $new_start = $nroom_strike->start;
./select:./tourn/clone_tournament.mas:				my $new_end = $nroom_strike->end;
./select:./tourn/clone_tournament.mas:		foreach my $sweep_set ($old_tourn->sweep_sets) {
./select:./tourn/clone_tournament.mas:			my $nsweep_set = $sweep_set->copy({
./select:./tourn/clone_tournament.mas:			foreach my $sweep_event (Tab::SweepEvent->search( sweep_set => $sweep_set->id)) { 
./select:./tourn/clone_tournament.mas:				my $nsweep_event = $sweep_event->copy({  
./select:./tourn/clone_tournament.mas:			foreach my $sweep_rule (Tab::SweepRule->search( sweep_set => $sweep_set->id)) { 
./select:./tourn/clone_tournament.mas:					my $nsweep_rule = $sweep_rule->copy({  
./select:./tourn/clone_tournament.mas:					my $nsweep_rule = $sweep_rule->copy({  
./select:./tourn/clone_tournament.mas:		foreach my $sweep_set ($old_tourn->sweep_sets) {
./select:./tourn/clone_tournament.mas:			my @links = Tab::SweepInclude->search( parent => $sweep_set );
./select:./tourn/clone_tournament.mas:				my $nlink = $link->copy({ 
./select:./tourn/results/entry_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./tourn/results/entry_print.mhtml:	my $tourn = $school->tourn;
./select:./tourn/results/entry_print.mhtml:	my $filename = "registration-".$school_id."-".$session->id;
./select:./tourn/results/entry_print.mhtml:	my $now = DateTime->now;	
./select:./tourn/results/autohandler:		my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./tourn/results/autohandler:		my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./tourn/results/autohandler:	my $tourn = $school->tourn;
./select:./tourn/results/print_school_report.mhtml:	foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)( type => "speech")) { 
./select:./tourn/results/print_school_report.mhtml:		my @finalists = $m->comp(
./select:./tourn/results/print_school_report.mhtml:	my $basename = "/tmp/school-reports-school-".$school->id."-".$session->id;
./select:./tourn/results/print_school_report.mhtml:    my $garbage = `rm -f $filename.*`;
./select:./tourn/results/print_school_report.mhtml:	my %entries_counted = $m->comp("/results/school_count.mas", school => $school, tourn => $tourn);
./select:./tourn/results/print_school_report.mhtml:	foreach my $entry ($school->entries) {
./select:./tourn/results/print_school_report.mhtml:	foreach my $entry (sort {$a->code <=> $b->code} $school->entries) {
./select:./tourn/results/print_school_report.mhtml:		my @ballots = Tab::Ballot->search_ordered_by_round($entry->id); 
./select:./tourn/results/print_school_report.mhtml:		my $c_name = $entry->name if $entry->event->team;
./select:./tourn/results/print_school_report.mhtml:		foreach my $finalist (@{$finalists_by_event{$entry->event->id}}) {
./select:./tourn/results/invoice_print.mhtml:#	my $school = Tab::School->retrieve($school_id);
./select:./tourn/results/invoice_print.mhtml:	my $filename = $Tab::file_root."/tmp/invoice-".$school->id."-".$session->id;
./select:./tourn/results/invoice_print.mhtml:	my $garbage = `rm -f $filename.*`;
./select:./tourn/confirm.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./tourn/confirm.mhtml:	my @sites = $tourn->sites;
./select:./tourn/confirm.mhtml:	foreach my $tourn_circuit ($tourn->tourn_circuits) { 
./select:./tourn/confirm.mhtml:		my $circuit = $tourn_circuit->circuit;
./select:./tourn/confirm.mhtml:		foreach my $admin ($circuit->admins) { 
./select:./tourn/confirm.mhtml:			my $subject =  $circuit->abbr." Tournament Requested";
./select:./tourn/all.mhtml:	my @tourns = Tab::Tourn->search_by_director($person->id);
./select:./tourn/all.mhtml:	my $now = DateTime->now;
./select:./tourn/all.mhtml:%			   my $open++ if ($tourn->reg_start && $tourn->reg_end && $tourn->reg_start->epoch < $now->epoch &&  
./select:./tourn/all.mhtml:%					   foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) {
./select:./tourn/tournaman_speakertab.mhtml:	my $now = DateTime->now;
./select:./tourn/tournaman_speakertab.mhtml:	my $tz = $person->tz if $person->tz;
./select:./tourn/tournaman_speakertab.mhtml:	my $req = Apache2::Request->new($r);
./select:./tourn/tournaman_speakertab.mhtml:	my $xml_file = $req->upload("speakertab");
./select:./tourn/tournaman_speakertab.mhtml:	my $xml_filename = $xml_file->tempname;
./select:./tourn/tournaman_speakertab.mhtml:	my $webname=$xml_file->filename;
./select:./tourn/tournaman_speakertab.mhtml:	my $msg="That's the wrong file -- select the correct file name and try again.";
./select:./tourn/tournaman_speakertab.mhtml:	my $te = HTML::TableExtract->new( headers => ['Position', 'Name', 'Team', 'Total Points'] );
./select:./tourn/tournaman_speakertab.mhtml:	my @event = Tab::Event->search( tourn => $tourn_id );
./select:./tourn/tournaman_speakertab.mhtml:	my @entry_student = $m->comp('/funclib/entry_student_by_event.mas', event => $event[0]->id );
./select:./tourn/tournaman_speakertab.mhtml:#		my $s = Tab::Student->retrieve($dummy);  WHY THE FUCK DOESN'T THIS WORK?
./select:./tourn/tournaman_speakertab.mhtml:		my @student = Tab::Student->search( id => $row->student );
./select:./tourn/tournaman_speakertab.mhtml:		$dummy = $student[0]->first." ".$student[0]->last;
./select:./tourn/tournaman_speakertab.mhtml:		$entry_student{$dummy} = $row->id;
./select:./tourn/tournaman_speakertab.mhtml:	my $RSobject = Tab::ResultSet->create( {
./select:./tourn/tournaman_speakertab.mhtml:	foreach my $ts ($te->tables) {
./select:./tourn/tournaman_speakertab.mhtml:	  foreach my $row ($ts->rows) {
./select:./tourn/tournaman_speakertab.mhtml:		my $entryrecord = Tab::EntryStudent->retrieve( $entry_student{ @$row[1] } );
./select:./tourn/tournaman_speakertab.mhtml:		my $result = Tab::Result->create( {
./select:./tourn/tournaman_save_create.mhtml:		my $tourn = Tab::Tourn->create( {
./select:./tourn/tournaman_save_create.mhtml:		my $category = Tab::Category->create( {
./select:./tourn/save.mhtml:	foreach my $circuit_id (split(/-/, $circuit_string)) { 
./select:./tourn/save.mhtml:	my $default_circuit_id = $default_circuit->id if $default_circuit;
./select:./tourn/save.mhtml:	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
./select:./tourn/save.mhtml:	my $enddt = DateTime::Format::MySQL->parse_datetime($end) if $end;
./select:./tourn/save.mhtml:	my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
./select:./tourn/save.mhtml:	my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
./select:./tourn/save.mhtml:	my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
./select:./tourn/save.mhtml:	my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
./select:./tourn/save.mhtml:	my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
./select:./tourn/save.mhtml:	my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);
./select:./tourn/save.mhtml:	my $site = Tab::Site->retrieve($site_id) if $site_id;
./select:./tourn/save.mhtml:	my $tourn = Tab::Tourn->create( { 
./select:./tourn/save.mhtml:	my $join = Tab::TournSite->create ({
./select:./tourn/save.mhtml:		my $join = Tab::TournCircuit->create ({
./select:./tourn/save.mhtml:	my $tiebreak_set = Tab::TiebreakSet->create({
./select:./tourn/select.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./tourn/select.mhtml:	my @auth_tourns = Tab::Tourn->search_by_director($person->id);
./select:./tourn/select.mhtml:	my @auth_circuits = Tab::Circuit->search_by_admin($person->id);
./select:./tourn/select.mhtml:		foreach my $circuit ($tourn->circuits) { 
./select:./tourn/select.mhtml:			my @ta = Tab::Permission->search( tourn => $tourn->id, person => $person->id );
./select:./tourn/tournaman_create_tourney.mhtml:	my $tz = $person->tz;
./select:./tourn/tournaman_create_tourney.mhtml:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./select:./tourn/tournaman_upload.mhtml:	my $tourney = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./tourn/tournaman_upload.mhtml:	my @entries = Tab::Entry->search( tourn => $tourn_id);
./select:./tourn/tournaman_upload.mhtml:	my @resultset = Tab::ResultSet->search( tourn => $tourn_id);
./select:./region/school_entry.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./region/school_entry.mhtml:	my $tourn = $school->tournament;
./select:./region/school_entry.mhtml:	my $region = $school->region;
./select:./region/school_entry.mhtml:	my @entries = sort {$a->code <=> $b->code} $school->entries;
./select:./region/school_entry.mhtml:%		foreach my $school ($tourn->schools(region => $region->id)) {
./select:./region/admin_add.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./region/admin_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./region/admin_add.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./select:./region/admin_add.mhtml:	my $login = Tab::Login->search( username => $email )->first;
./select:./region/admin_add.mhtml:	my $admin_person = $login->person;
./select:./region/admin_add.mhtml:	my $coach = Tab::Permission->search( chapter => $chapter_id, person => $admin_person->id )->first;
./select:./region/admin_add.mhtml:	my $msg = $admin_person->first." ".$admin_person->last." has been given access to ". $chapter->name;	
./select:./region/admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./region/admin_rm.mhtml:	my $admin = Tab::Person->retrieve($admin_id); 
./select:./region/admin_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./region/admin_rm.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./select:./region/admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $admin_id, chapter => $chapter->id);
./select:./region/admin_rm.mhtml:	my $msg = $admin->first." ".$admin->last." has been removed from ". $chapter->name;	
./select:./region/tournaments.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./region/tournaments.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./region/tournaments.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./region/tournaments.mhtml:	my $circuit = $region->circuit;
./select:./region/tournaments.mhtml:	my $tz = $person->tz;
./select:./region/tournaments.mhtml:%			foreach my $school ($tourn->schools(region => $region_id)) { 
./select:./region/tournaments.mhtml:%			foreach my $admin ($chapter->admins) { 
./select:./region/tournaments.mhtml:%		my @schools = $m->comp("/funclib/chapter_schools.mas", chapter => $chapter);
./select:./region/tournaments.mhtml:%					my $tourn = $school->tourn;
./select:./region/tournaments.mhtml:%					my $start = $tourn->start->set_time_zone($tz);
./select:./region/tournaments.mhtml:%					my $end = $tourn->end->set_time_zone($tz);
./select:./region/tournaments.mhtml:%							foreach my $circuit ($tourn->circuits) { 
./select:./region/tournaments.mhtml:%				foreach my $chapter ($region->chapters) { 
./select:./region/tournaments.mhtml:%				foreach my $tourn ($circuit->tourns) { 
./select:./enter/entry.mhtml:	my $tourn = $school->tourn;
./select:./enter/entry.mhtml:	my $tz = $tourn->tz;
./select:./enter/entry.mhtml:    my $now = DateTime->now(time_zone => $tz);
./select:./enter/entry.mhtml:	my $adult++ if ( $school->setting("contact_number") && $school->setting("contact_name") && $school->setting("contact_email"));
./select:./enter/entry.mhtml:%						foreach my $region ($tourn->regions) { 
./select:./enter/entry.mhtml:%			my $bodies = $m->comp("/funclib/school_bodies.mas", school => $school);
./select:./enter/entry.mhtml:%						my $freeze_deadline = $tourn->setting("freeze_deadline");
./select:./enter/entry.mhtml:%						my $drop_deadline = $tourn->setting("drop_deadline");
./select:./enter/entry.mhtml:%						my $judge_deadline = $tourn->setting("judge_deadline");
./select:./enter/entry.mhtml:%						my $fine_deadline = $tourn->setting("fine_deadline");
./select:./enter/entry.mhtml:%				foreach my $category ($tourn->categories) {
./select:./enter/entry.mhtml:%					my $strike_end = $category->setting("strike_end");
./select:./enter/entry.mhtml:%				foreach my $concession ($tourn->concessions) {
./select:./enter/entry.mhtml:%			my @followers = Tab::Follower->search( school => $school->id, type => 'school' );
./select:./enter/judge_housing_plz.mhtml:	my $now = DateTime->now();
./select:./enter/judge_housing_plz.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/judge_housing_plz.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_housing_plz.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./enter/judge_housing_plz.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./select:./enter/judge_housing_plz.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./select:./enter/judge_housing_plz.mhtml:	my $num_slots = $slots[0]->slots;
./select:./enter/judge_housing_plz.mhtml:	my @requests =  Tab::Housing->search( night => $night->ymd, tourn => $tourn->id );
./select:./enter/judge_housing_plz.mhtml:	my $existing_request = $m->comp("/funclib/judge_housing.mas", judge => $judge, day => $night);
./select:./enter/judge_housing_plz.mhtml:	my $housing_request = Tab::Housing->create({
./select:./enter/judge_housing_plz.mhtml:		my $description = $person->first." ".$person->last." requested housing for judge ".$judge->first." ".$judge->last;
./select:./enter/judge_housing_plz.mhtml:        my $change = Tab::ChangeLog->create({
./select:./enter/judge_housing_plz.mhtml:	my $msg = "Housing for ".$judge->first." ".$judge->last." on ".$night->day_name." confirmed.";
./select:./enter/judge_housing_plz.mhtml:	my $err = "The housing for this tournament is currently full on ".$night->day_name.".  ".$judge->first." ".$judge->last." has been placed on the waitlist on a first-come, first-served basis." if $waitlist;
./select:./enter/hire_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/hire_save.mhtml:	my $now = DateTime->now();
./select:./enter/hire_save.mhtml:	my $judge_per = $category->setting("judge_per");
./select:./enter/hire_save.mhtml:		my $covers = $hired_number * $judge_per if $category->setting("hired_fee") && $judge_per;
./select:./enter/hire_save.mhtml:		my $available_slots = $category->setting("hired_jpool") * $judge_per;
./select:./enter/hire_save.mhtml:			foreach my $acc (Tab::JudgeHire->search( category => $category->id )) { 
./select:./enter/hire_save.mhtml:		my $available_rounds = $category->setting("hired_rounds");
./select:./enter/hire_save.mhtml:			foreach my $acc (Tab::JudgeHire->search( category => $category->id )) { 
./select:./enter/housing_tba.mhtml:	my $now = DateTime->now();
./select:./enter/housing_tba.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/housing_tba.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./enter/housing_tba.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./select:./enter/housing_tba.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./select:./enter/housing_tba.mhtml:	my $num_slots = $slots[0]->slots;
./select:./enter/housing_tba.mhtml:			my $housing_request = Tab::Housing->create({
./select:./enter/housing_tba.mhtml:       my $description = $person->first." ".$person->last." Requested $count housing for TBA entries";
./select:./enter/housing_tba.mhtml:        my $change = Tab::ChangeLog->create({
./select:./enter/housing_tba.mhtml:	my $msg = "$count Housing slots for TBAs on ".$night->day_name." requested.";
./select:./enter/region_save.mhtml:		my $school = Tab::School->retrieve($school_id);
./select:./enter/region_save.mhtml:		foreach my $region ($school->tourn->regions) {
./select:./enter/hire_delete.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./select:./enter/hire_delete.mhtml:	my $category = $hire->category;
./select:./enter/details_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/details_save.mhtml:	my $event = $entry->event;
./select:./enter/details_save.mhtml:	my $tourn = $event->tourn;
./select:./enter/details_save.mhtml:	my $school = $entry->school;
./select:./enter/details_save.mhtml:	my $code_style = $event->setting("code_style");
./select:./enter/details_save.mhtml:	my $max = $event->setting("max_entry");
./select:./enter/details_save.mhtml:	my $min = $event->setting("min_entry");
./select:./enter/details_save.mhtml:	my @quals = $entry->qualifiers;
./select:./enter/details_save.mhtml:	my $quals = $event->setting('ask_quals');
./select:./enter/details_save.mhtml:	my $other = Tab::Entry->search_where({ name => $name, school => $school->id, event => $event->id, id => {'!=', $entry->id} })->first;
./select:./enter/details_save.mhtml:	my @students = $entry->students;
./select:./enter/details_save.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./enter/details_save.mhtml:		my $es = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
./select:./enter/details_save.mhtml:		my @housing = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./select:./enter/details_save.mhtml:	my @count = $entry->students;
./select:./enter/details_save.mhtml:		my $other = Tab::Entry->search_where({
./select:./enter/details_save.mhtml:	my $msg = "Entry ".$entry->name." details saved";
./select:./enter/judge_sex_change.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/students.mhtml:	my $tourn = $school->tourn;
./select:./enter/students.mhtml:	my $event = Tab::Event->retrieve($event_id) if $event_id;	
./select:./enter/students.mhtml:	my @events = $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./select:./enter/students.mhtml:	my $tz = $tourn->tz;
./select:./enter/students.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./select:./enter/students.mhtml:    my $now = DateTime->now;
./select:./enter/students.mhtml:		my @already_entered = Tab::Entry->search( 
./select:./enter/students.mhtml:		my @waitlist = Tab::Entry->search( 
./select:./enter/students.mhtml:		my @hybrides = $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school);
./select:./enter/students.mhtml:		my $deadline = $event->setting("deadline");
./select:./enter/students.mhtml:%						foreach my $student ($already->students) { 
./select:./enter/students.mhtml:%					my @qualifiers = $already->qualifiers;
./select:./enter/students.mhtml:			my $event_deadline = $event->setting("deadline");
./select:./enter/students.mhtml:%		    my @clean_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./select:./enter/team_members_rm.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/team_members_rm.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./enter/team_members_rm.mhtml:	my @team_members = Tab::EntryStudent->search( student => $student->id, entry => $entry_id );
./select:./enter/team_members_rm.mhtml:	my $msg .= $student->first." ".$student->last." has been removed from ".$entry->name;
./select:./enter/hire_reduce.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./select:./enter/hire_reduce.mhtml:	my $category = $hire->category;
./select:./enter/hire_reduce.mhtml:	my $school = $hire->school;
./select:./enter/hire_reduce.mhtml:	my $reduction = $category->setting("judge_per") if $category->setting("hired_fee") && $category->setting("judge_per");
./select:./enter/housing.mhtml:	my $tourn = $school->tourn;
./select:./enter/housing.mhtml:	my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn, add_one => "aye");
./select:./enter/housing.mhtml:	my $now = DateTime->now;
./select:./enter/housing.mhtml:	my $reg_end = $tourn->reg_end;
./select:./enter/housing.mhtml:			my @students = $m->comp("/funclib/school_students.mas", school => $school);
./select:./enter/housing.mhtml:			my @judges = $school->judges;
./select:./enter/housing.mhtml:			foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./select:./enter/housing.mhtml:					my $housing = $m->comp("/funclib/student_housing.mas", tourn => $tourn, student => $stu, day => $day);
./select:./enter/housing.mhtml:					my $housing = $m->comp("/funclib/judge_housing.mas", judge => $jud, day => $day);
./select:./enter/housing.mhtml:%			foreach my $student (sort {$a->last cmp $b->last} $school->students) {
./select:./enter/housing.mhtml:%				foreach my $event ($m->comp("/funclib/student_entries.mas", tourn => $tourn, student => $student, event => 1)) {
./select:./enter/housing.mhtml:%					foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./select:./enter/housing.mhtml:%						my $housing = $student->housing($tourn, $day); 
./select:./enter/housing.mhtml:%		foreach my $judge ($school->judges) {
./select:./enter/housing.mhtml:%				foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
./select:./enter/housing.mhtml:%					my $housing = $m->comp("/funclib/judge_housing.mas", tourn => $tourn, judge => $judge, day => $day);
./select:./enter/housing.mhtml:%		my @tbas = Tab::Entry->search( tba => 1, school => $school->id );
./select:./enter/housing.mhtml:%		my @tba_housing = Tab::Housing->search( tba => 1, school => $school->id );
./select:./enter/housing.mhtml:%					my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day );
./select:./enter/housing.mhtml:%					my @tbas = Tab::Housing->search( tba => 1, school => $school->id, night => $day );
./select:./enter/tba_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./select:./enter/tba_save.mhtml:	my $tz = $school->tourn->tz;
./select:./enter/tba_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./enter/tba_save.mhtml:	my @alreadys = $school->entries( event => $event_id,  );
./select:./enter/tba_save.mhtml:	my @all_event = $event->entries( event => $event_id,  waitlist => 0);
./select:./enter/tba_save.mhtml:	my @all = $m->comp("/funclib/tourn_entries.mas", tourn => $event->tourn); 
./select:./enter/tba_save.mhtml:	my $cap = $event->setting("cap");
./select:./enter/tba_save.mhtml:	my $school_cap = $event->setting("school_cap");
./select:./enter/tba_save.mhtml:	my $tourn_cap = $event->tourn->setting("overall_cap");
./select:./enter/tba_save.mhtml:	my $wl = $event->setting("waitlist");
./select:./enter/tba_save.mhtml:	my $wl_all++ if $event->setting("waitlist_all");
./select:./enter/tba_save.mhtml:		my $description = $person->first." ".$person->last." entered $slots TBA slots in ".$event->abbr;
./select:./enter/tba_save.mhtml:		my $change = Tab::ChangeLog->create({
./select:./enter/tba_save.mhtml:		my $person_id = $person->id if $person;
./select:./enter/tba_save.mhtml:		my $entry = Tab::Entry->create({
./select:./enter/details_housing_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/details_housing_save.mhtml:	my $event = $entry->event;
./select:./enter/details_housing_save.mhtml:	my $tourn = $event->tourn;
./select:./enter/details_housing_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/details_housing_save.mhtml:	my @student_ids = split(/-/, $housed);
./select:./enter/details_housing_save.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./enter/details_housing_save.mhtml:		my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./select:./enter/details_housing_save.mhtml:			my $night = $housing->night;
./select:./enter/details_housing_save.mhtml:			my $args = $ARGS{$housing->id};
./select:./enter/details_housing_save.mhtml:			my ($type, $id) = split(/-/, $args);
./select:./enter/details_housing_save.mhtml:				my $judge = Tab::Judge->retrieve($id);
./select:./enter/details_housing_save.mhtml:				my @already_housed = $m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn, night => $night);
./select:./enter/details_housing_save.mhtml:				my $student = Tab::Student->retrieve($id);
./select:./enter/details_housing_save.mhtml:				my @already_housed = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn, night => $night);
./select:./enter/housing_plz.mhtml:	my $now = DateTime->now();
./select:./enter/housing_plz.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./enter/housing_plz.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/housing_plz.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./enter/housing_plz.mhtml:	my $night = DateTime::Format::MySQL->parse_date($day);
./select:./enter/housing_plz.mhtml:	my @slots = Tab::HousingSlots->search( night => $night->ymd, tourn => $tourn->id );
./select:./enter/housing_plz.mhtml:	my $num_slots = $slots[0]->slots;
./select:./enter/housing_plz.mhtml:	my @requests =  Tab::Housing->search( night => $night->ymd, tourn => $tourn->id );
./select:./enter/housing_plz.mhtml:	foreach my $entry ($m->comp("/funclib/student_entries.mas", student => $student, tourn => $tourn)) { 
./select:./enter/housing_plz.mhtml:	my $existing_request = $student->housing($tourn, $night);
./select:./enter/housing_plz.mhtml:	my $housing_request = Tab::Housing->create({
./select:./enter/housing_plz.mhtml:       my $description = $person->first." ".$person->last." Requested housing for ".$student->first." ".$student->last;
./select:./enter/housing_plz.mhtml:       my $change = Tab::ChangeLog->create({
./select:./enter/concessions_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/concessions_save.mhtml:	my $tourn = $school->tourn;
./select:./enter/concessions_save.mhtml:	my $now = DateTime->now;
./select:./enter/concessions_save.mhtml:	foreach my $concession ($tourn->concessions) { 
./select:./enter/concessions_save.mhtml:		my $total_order = $m->comp("/funclib/concession_stats.mas", total => 1, concession => $concession);
./select:./enter/concessions_save.mhtml:		my $cap = $concession->cap;
./select:./enter/concessions_save.mhtml:		my $quantity = $ARGS{$concession->id."_amount"};
./select:./enter/concessions_save.mhtml:		my $purchase = Tab::ConcessionPurchase->search( concession => $concession->id, school => $school->id )->first;
./select:./enter/concessions_save.mhtml:			my $remainder = $cap - $total_order;
./select:./enter/hybrid_entry.mhtml:	my $event = Tab::Event->retrieve($event_id);
./select:./enter/hybrid_entry.mhtml:	my $tourn = $event->tourn;
./select:./enter/hybrid_entry.mhtml:	my $tz = $tourn->tz;
./select:./enter/hybrid_entry.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./enter/hybrid_entry.mhtml:	my @students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./select:./enter/hybrid_entry.mhtml:%						foreach my $other_school (sort {$a->name cmp $b->name} $tourn->schools) { 
./select:./enter/hybrid_entry.mhtml:%							foreach my $contact ($cand->admins) { 
./select:./enter/hybrid_entry.mhtml:%							foreach my $circuit ($cand->circuits) { 
./select:./enter/hybrid_entry.mhtml:%	        my $deadline = $event->setting("deadline");
./select:./enter/hybrid_entry.mhtml:%		    my $cap = $event->setting("cap");
./select:./enter/hybrid_entry.mhtml:%		    my $school_cap = $event->setting("school_cap");
./select:./enter/hybrid_entry.mhtml:%		    my $tourn_cap = $tourn->setting("overall_cap");
./select:./enter/hybrid_entry.mhtml:%			    my @clean_students = $m->comp("/funclib/students_evententer.mas", event => $event, school => $school);
./select:./enter/hybrid_entry.mhtml:%		foreach my $event ($tourn->events) { 
./select:./enter/judge_striketime_flip.mhtml:	my $strike_timeslot = Tab::StrikeTimeslot->retrieve($strike_timeslot_id);
./select:./enter/judge_striketime_flip.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_striketime_flip.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/judge_striketime_flip.mhtml:	my $strike =  $strike_timeslot->strike($judge);
./select:./enter/judge_striketime_flip.mhtml:		my $strike = Tab::Strike->create({
./select:./enter/entry_drop.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/entry_drop.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/entry_drop.mhtml:	my $event = $entry->event;
./select:./enter/entry_drop.mhtml:	my $tourn = $event->tourn;
./select:./enter/entry_drop.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./select:./enter/entry_drop.mhtml:	my $freeze_deadline = $tourn->setting("freeze_deadline");
./select:./enter/entry_drop.mhtml:	my $now = DateTime->now;
./select:./enter/entry_drop.mhtml:		my $description = $person->first." ".$person->last." dropped ".$entry->event->abbr." entry ".$entry->code." ".$entry->name; 
./select:./enter/entry_drop.mhtml:		my $change = Tab::ChangeLog->create({
./select:./enter/entry_drop.mhtml:	foreach my $student ($entry->students) { 
./select:./enter/entry_drop.mhtml:		foreach my $other ($m->comp("/funclib/student_entries.mas", tourn => $tourn, student => $student)) { 
./select:./enter/entry_drop.mhtml:		foreach my $housing ($student->housing($tourn)) { 
./select:./enter/entry_drop.mhtml:	my $name = $entry->name;
./select:./enter/entry_drop.mhtml:		my $drop_reason = "Dropped ". $entry->code ." by ".$person->last; 
./select:./enter/entry_drop.mhtml:				my $fine = Tab::SchoolFine->create({
./select:./enter/entry_drop.mhtml:				my $fine = Tab::SchoolFine->search( school => $entry->school->id, reason => $drop_reason )->first;
./select:./enter/ratings/clone_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/clone_strikes.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/clone_strikes.mhtml:	my $clone = Tab::Entry->retrieve($clone_id) if $clone_id;
./select:./enter/ratings/clone_strikes.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/clone_strikes.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/clone_strikes.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/clone_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/clone_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/clone_strikes.mhtml:	my @entry_strikes = $m->comp("/funclib/entry_strikes.mas", entry => $entry, category => $category) if $entry;
./select:./enter/ratings/clone_strikes.mhtml:		my $new_strike = $strike->copy;
./select:./enter/ratings/clone_strikes.mhtml:	my $msg = "Strikes copied to ".$clone->code;
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $now = DateTime->now();
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $prefs_style = $category->setting("prefs");
./select:./enter/ratings/tiered_prefs_save.mhtml:    my @rating_tiers = Tab::RatingTier->search(  category => $category->id, type => "mpj" );
./select:./enter/ratings/tiered_prefs_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/tiered_prefs_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./select:./enter/ratings/tiered_prefs_save.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./select:./enter/ratings/tiered_prefs_save.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./select:./enter/ratings/tiered_prefs_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./select:./enter/ratings/tiered_prefs_save.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $rounds_per++ if $category->setting("prefs") eq "tiered_round";
./select:./enter/ratings/tiered_prefs_save.mhtml:    my $cumulate++ if $category->setting("cumulate_mjp");
./select:./enter/ratings/tiered_prefs_save.mhtml:						my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
./select:./enter/ratings/tiered_prefs_save.mhtml:		my $diff = $tier_min{$tier->id} - $tier_count{$tier->id};
./select:./enter/ratings/tiered_prefs_save.mhtml:	my $msg = $entry->name."'s prefs saved in ".$category->abbr;
./select:./enter/ratings/entry_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/entry_strikes.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/entry_strikes.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/entry_strikes.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/entry_strikes.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/entry_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/entry_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/entry_strikes.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/entry_strikes.mhtml:    foreach my $tier ($category->rating_tiers) { 
./select:./enter/ratings/entry_strikes.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./enter/ratings/entry_strikes.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./select:./enter/ratings/entry_strikes.mhtml:	my @entry_conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry, category => $category, conflicts => 'only') if $entry;
./select:./enter/ratings/entry_strikes.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school, category => $category, conflicts => 'only') if $entry;
./select:./enter/ratings/entry_strikes.mhtml:	my $bank = $category->setting("entry_strikes");
./select:./enter/ratings/entry_strikes.mhtml:	my @entry_strikes = $m->comp("/funclib/entry_strikes.mas", entry => $entry, category => $category) if $entry;
./select:./enter/ratings/entry_strikes.mhtml:    my @school_strikes = $m->comp('/funclib/school_strikes.mas', school => $school, category => $category );
./select:./enter/ratings/entry_strikes.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./select:./enter/ratings/entry_strikes.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./select:./enter/ratings/entry_strikes.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./select:./enter/ratings/entry_strikes.mhtml:%								foreach my $strike_timeslot ($category->strike_timeslots) { 
./select:./enter/ratings/ordinals_prefs.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/ordinals_prefs.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/ordinals_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/ordinals_prefs.mhtml:	my $rounds_per = $category->setting("rounds_per");
./select:./enter/ratings/ordinals_prefs.mhtml:		foreach my $admin ($school->chapter->admins) { 
./select:./enter/ratings/ordinals_prefs.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./select:./enter/ratings/ordinals_prefs.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/ordinals_prefs.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/ordinals_prefs.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/ordinals_prefs.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/ordinals_prefs.mhtml:    foreach my $tier ($category->rating_tiers) { 
./select:./enter/ratings/ordinals_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./select:./enter/ratings/ordinals_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./enter/ratings/ordinals_prefs.mhtml:	my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category);
./select:./enter/ratings/ordinals_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./select:./enter/ratings/ordinals_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./select:./enter/ratings/ordinals_prefs.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/ordinals_prefs.mhtml:			my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./select:./enter/ratings/ordinals_prefs.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", rating_tier => 0);
./select:./enter/ratings/ordinals_prefs.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./select:./enter/ratings/ordinals_prefs.mhtml:%						my $school_year = Tab::school_year->year;
./select:./enter/ratings/ordinals_prefs.mhtml:%						foreach my $student ($entry->students) { 
./select:./enter/ratings/ordinals_prefs.mhtml:%							foreach my $student ($chapter->students(retired => 0)) { 
./select:./enter/ratings/ordinals_prefs.mhtml:%							foreach my $other ($m->comp('/funclib/category_entries.mas', category => $category, school => $school)) { 
./select:./enter/ratings/export_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/export_prefs.mhtml:	my $event = $entry->event;
./select:./enter/ratings/export_prefs.mhtml:	my $category = $event->category;
./select:./enter/ratings/export_prefs.mhtml:	my $tourn = $category->tourn;
./select:./enter/ratings/export_prefs.mhtml:	my $rounds_per = $category->setting("rounds_per");
./select:./enter/ratings/export_prefs.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/export_prefs.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/export_prefs.mhtml:    my %rating_name = map {$_->id => $_->name} $category->rating_tiers;
./select:./enter/ratings/export_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./select:./enter/ratings/export_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./enter/ratings/export_prefs.mhtml:		foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "entry", entry => $entry)) { 
./select:./enter/ratings/export_prefs.mhtml:		my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./select:./enter/ratings/export_prefs.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/export_prefs.mhtml:	my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./select:./enter/ratings/export_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./select:./enter/ratings/export_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./select:./enter/ratings/export_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./select:./enter/ratings/export_prefs.mhtml:	my $filename = "Prefs-".$entry->name."-".Tab::csvdt($now);
./select:./enter/ratings/export_prefs.mhtml:	my $garbage = `rm -f $filepath.*`;
./select:./enter/ratings/entry_ratings_save.mhtml:	my $now = DateTime->now();
./select:./enter/ratings/entry_ratings_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/entry_ratings_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/ratings/entry_ratings_save.mhtml:    my @rating_tiers = Tab::RatingTier->search(  category => $category->id, type => "mpj" );
./select:./enter/ratings/entry_ratings_save.mhtml:	my @conflicts = $entry->conflicts; 
./select:./enter/ratings/entry_ratings_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./select:./enter/ratings/entry_ratings_save.mhtml:	my $cumulate++ if $category->setting("cumulate_mjp");
./select:./enter/ratings/entry_ratings_save.mhtml:	foreach my $tier (sort {$b->name <=> $a->name} @rating_tiers) {
./select:./enter/ratings/entry_ratings_save.mhtml:				my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
./select:./enter/ratings/entry_ratings_save.mhtml:	my $msg = $entry->team_name."'s ratings saved in ".$category->abbr;
./select:./enter/ratings/entry_ratings.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/entry_ratings.mhtml:	my $tourn = $school->tournament;
./select:./enter/ratings/entry_ratings.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/entry_ratings.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/entry_ratings.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./select:./enter/ratings/entry_ratings.mhtml:			my @quals = Tab::Qual->search( 	category => $category->id, type => "mpj" );
./select:./enter/ratings/entry_ratings.mhtml:			my @conflicts = $entry->conflicts;
./select:./enter/ratings/entry_ratings.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry");
./select:./enter/ratings/entry_ratings.mhtml:%				foreach my $qual (sort {$a->name cmp $b->name} Tab::Qual->search( category => $category->id, type => "mpj")) {
./select:./enter/ratings/entry_ratings.mhtml:%								foreach my $other ($entry->school->entries( event => $entry->event->id )) { 
./select:./enter/ratings/entry_strike_switch.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/entry_strike_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/ratings/entry_strike_switch.mhtml:	my $category = $entry->event->category;
./select:./enter/ratings/entry_strike_switch.mhtml:    my @strikes = $m->comp('/funclib/entry_strikes.mas', entry => $entry );
./select:./enter/ratings/entry_strike_switch.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/entry_strike_switch.mhtml:	my $bank = $category->setting("entry_strikes");
./select:./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You have un-struck ".$judge->first." ".$judge->last;
./select:./enter/ratings/entry_strike_switch.mhtml:		my $strike = Tab::Strike->create({
./select:./enter/ratings/entry_strike_switch.mhtml:		my $msg = "You have struck ".$judge->first." ".$judge->last." like a gong.";
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/ordinals_auto_pref.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./enter/ratings/ordinals_auto_pref.mhtml:		foreach my $entry_student ($entry->students) { 
./select:./enter/ratings/ordinals_auto_pref.mhtml:	my @judges = $category->judges;
./select:./enter/ratings/ordinals_auto_pref.mhtml:			foreach my $other (@{$others_by_cj{$judge->chapter_judge->id}}) { 
./select:./enter/ratings/ordinals_auto_pref.mhtml:			foreach my $other (@{$others_by_person{$judge->person->id}}) { 
./select:./enter/ratings/ordinals_auto_pref.mhtml:	foreach my $judge (sort {$judge_avg{$a->id} <=> $judge_avg{$b->id}} @judges) { 
./select:./enter/ratings/clone.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/clone.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/clone.mhtml:	my $clone = Tab::Entry->retrieve($clone_id);
./select:./enter/ratings/clone.mhtml:	my @ratings = $clone->ratings;
./select:./enter/ratings/clone.mhtml:		my $new_rating = $rating->copy({
./select:./enter/ratings/clone.mhtml:	my $msg = "$style Cloned $count Ratings from ".$entry->name." to ".$clone->name;
./select:./enter/ratings/clone.mhtml:	my $type = $entry->event->category->setting("prefs");
./select:./enter/ratings/school_strike_switch.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/ratings/school_strike_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/ratings/school_strike_switch.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/ratings/school_strike_switch.mhtml:    my @strikes = $m->comp("/funclib/school_strikes.mas", school => $school, category => $category);
./select:./enter/ratings/school_strike_switch.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/school_strike_switch.mhtml:	my $bank = $category->setting("school_strikes");
./select:./enter/ratings/school_strike_switch.mhtml:		my $msg = "You have un-struck ".$judge->first." ".$judge->last;
./select:./enter/ratings/school_strike_switch.mhtml:		my $strike = Tab::Strike->create({
./select:./enter/ratings/school_strike_switch.mhtml:		my $msg = "You have struck ".$judge->first." ".$judge->last;
./select:./enter/ratings/index.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./select:./enter/ratings/index.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/index.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/index.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/index.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $rounds_per = $category->setting("rounds_per");
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:		foreach my $admin ($school->chapter->admins) { 
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:    foreach my $tier ($category->rating_tiers) { 
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:			my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry");
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:			my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:			my %event_struck = map {$_->id => 1} @event_struck_judges;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:%							my $school_year = Tab::school_year->year;
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:%							foreach my $student ($entry->students) { 
./select:./enter/ratings/ordinals_prefs_sortable.mhtml:%								foreach my $student ($chapter->students(retired => 0)) { 
./select:./enter/ratings/school_strikes.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/school_strikes.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/school_strikes.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/school_strikes.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/school_strikes.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/school_strikes.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/school_strikes.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/school_strikes.mhtml:    foreach my $tier ($category->rating_tiers) { 
./select:./enter/ratings/school_strikes.mhtml:	    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./enter/ratings/school_strikes.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./select:./enter/ratings/school_strikes.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school, category => $category);
./select:./enter/ratings/school_strikes.mhtml:	my $bank = $category->setting("school_strikes");
./select:./enter/ratings/school_strikes.mhtml:	my @school_strikes = $m->comp("/funclib/school_strikes.mas", school => $school, category => $category);
./select:./enter/ratings/school_strikes.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./select:./enter/ratings/school_strikes.mhtml:%								foreach my $strike_timeslot ($category->strike_timeslots) { 
./select:./enter/ratings/conflict_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/ratings/conflict_switch.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/ratings/conflict_switch.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/conflict_switch.mhtml:		my $conflict = Tab::Strike->search( type => "conflict", judge => $judge->id,  entry => $entry->id, registrant => 1 )->first;
./select:./enter/ratings/conflict_switch.mhtml:		my $conflict = Tab::Strike->search( type => "conflict", judge => $judge->id, school => $school->id, registrant => 1 )->first;
./select:./enter/ratings/school_ratings.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/school_ratings.mhtml:	my $tourn = $school->tournament;
./select:./enter/ratings/school_ratings.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/school_ratings.mhtml:		my @quals = Tab::Qual->search( 	category => $category->id, type => "mpj" );
./select:./enter/ratings/school_ratings.mhtml:		my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./select:./enter/ratings/school_ratings.mhtml:		my @conflicts = $school->conflicts;
./select:./enter/ratings/school_ratings.mhtml:		my @ratings = Tab::Rating->search( school => $school->id, type => "school");
./select:./enter/ratings/school_ratings.mhtml:%			foreach my $qual (sort {$a->name cmp $b->name} Tab::Qual->search( category => $category->id, type => "mpj")) {
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $now = DateTime->now();
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $category = $entry->event->category;
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $tourn = $category->tourn;
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $ignore_conflicts++ if $category->setting("conflict_denominator");
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $round_burden++ if $category->setting("rounds_per");
./select:./enter/ratings/ordinals_sort_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/ordinals_sort_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", 
./select:./enter/ratings/ordinals_sort_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./select:./enter/ratings/ordinals_sort_save.mhtml:		my $rating = Tab::Rating->create({
./select:./enter/ratings/ordinals_sort_save.mhtml:			my $rating = $rating_by_judge{$judge->id};
./select:./enter/ratings/ordinals_sort_save.mhtml:	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
./select:./enter/ratings/conflicts.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/ratings/conflicts.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/conflicts.mhtml:	my $tourn = $category->tourn;
./select:./enter/ratings/conflicts.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/conflicts.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/conflicts.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/conflicts.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/conflicts.mhtml:		my @conflicts = $entry->strikes( type => "conflict", registrant => 1);
./select:./enter/ratings/conflicts.mhtml:		my @school_conflicts = Tab::Strike->search( school => $entry->school->id, type => "conflict", registrant => 1);
./select:./enter/ratings/conflicts.mhtml:		my @school_conflicts = Tab::Strike->search( school => $school->id, type => "conflict", registrant => 1);
./select:./enter/ratings/conflicts.mhtml:	my @judges = sort {$a->last cmp $b->last} $category->judges(active => 1);
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my $now = DateTime->now();
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school, category => $category);
./select:./enter/ratings/ordinals_prefs_save.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my @all_judges = Tab::Judge->search_where({ active => 1, category => $category->id });
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my $ignore_conflicts++ if $category->setting("conflict_denominator");
./select:./enter/ratings/ordinals_prefs_save.mhtml:		my $rating = Tab::Rating->create({
./select:./enter/ratings/ordinals_prefs_save.mhtml:			my $rating = $rating_by_judge{$judge->id};
./select:./enter/ratings/ordinals_prefs_save.mhtml:	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
./select:./enter/ratings/tiered_prefs.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/ratings/tiered_prefs.mhtml:	my $tourn = $school->tourn;
./select:./enter/ratings/tiered_prefs.mhtml:	my $pref_style = $category->setting("prefs");
./select:./enter/ratings/tiered_prefs.mhtml:	my $tz = $tourn->tz;
./select:./enter/ratings/tiered_prefs.mhtml:	my $strike_end = $category->setting("strike_end");
./select:./enter/ratings/tiered_prefs.mhtml:	my $now = DateTime->now;
./select:./enter/ratings/tiered_prefs.mhtml:	my $strike_start = $category->setting("strike_start");
./select:./enter/ratings/tiered_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/tiered_prefs.mhtml:    foreach my $tier ($category->rating_tiers) { 
./select:./enter/ratings/tiered_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./enter/ratings/tiered_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./select:./enter/ratings/tiered_prefs.mhtml:    my $freebieref = $m->comp("/funclib/free_strikes.mas", category => $category); 
./select:./enter/ratings/tiered_prefs.mhtml:	my $no_frees = $category->setting("free_strikes_no_pref");
./select:./enter/ratings/tiered_prefs.mhtml:	my @event_struck_judges = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event) if $entry;
./select:./enter/ratings/tiered_prefs.mhtml:	my %event_struck = map {$_->id => 1} @event_struck_judges;
./select:./enter/ratings/tiered_prefs.mhtml:	my $rounds_per++ if $category->setting("prefs") eq "tiered_round";
./select:./enter/ratings/tiered_prefs.mhtml:			my @tiers = Tab::RatingTier->search( 	category => $category->id, type => "mpj" );
./select:./enter/ratings/tiered_prefs.mhtml:			my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./enter/ratings/tiered_prefs.mhtml:			my @school_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $school);
./select:./enter/ratings/tiered_prefs.mhtml:			my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./select:./enter/ratings/tiered_prefs.mhtml:            my @ordinals = Tab::Rating->search( entry => $entry->id, type => "entry", rating_tier => 0); 
./select:./enter/ratings/tiered_prefs.mhtml:%					my $paradigm = $judge->person->setting("paradigm") if $judge->person;
./select:./enter/ratings/tiered_prefs.mhtml:%								my $last_name = $judge->last;
./select:./enter/ratings/tiered_prefs.mhtml:%								my $first_name = $judge->first;
./select:./enter/ratings/tiered_prefs.mhtml:%								my $last_name = $judge->last;
./select:./enter/ratings/tiered_prefs.mhtml:%								my $first_name = $judge->first;
./select:./enter/ratings/tiered_prefs.mhtml:%				foreach my $tier (sort {$a->name cmp $b->name} Tab::RatingTier->search( category => $category->id, type => "mpj")) {
./select:./enter/ratings/tiered_prefs.mhtml:%			my @others = $m->comp("/funclib/school_entry_by_category.mas", category => $entry->event->category, school => $school);
./select:./enter/ratings/tiered_prefs.mhtml:%						foreach my $other (sort {$a->name cmp $b->name} @others) { 
./select:./enter/ratings/school_ratings_save.mhtml:	my $now = DateTime->now();
./select:./enter/ratings/school_ratings_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/ratings/school_ratings_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/ratings/school_ratings_save.mhtml:	my @all_judges = Tab::Judge->search( category => $category_id, active => 1 );
./select:./enter/ratings/school_ratings_save.mhtml:    my @quals = Tab::Qual->search(  category => $category->id, type => "mpj" );
./select:./enter/ratings/school_ratings_save.mhtml:	my @conflicts = $school->conflicts;
./select:./enter/ratings/school_ratings_save.mhtml:			my $qual = Tab::Qual->retrieve($ARGS{$judge->id});
./select:./enter/ratings/school_ratings_save.mhtml:	my $msg = "School ratings saved in ".$category->abbr;
./select:./enter/ratings/menu.mas:	my $tourn = $school->tourn;
./select:./enter/ratings/menu.mas:	my $tz = $tourn->tz;
./select:./enter/ratings/menu.mas:	my $now = DateTime->now(time_zone => $tz);
./select:./enter/ratings/menu.mas:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/ratings/menu.mas:		foreach my $admin ($school->chapter->admins) { 
./select:./enter/ratings/menu.mas:				foreach my $student ($entry->students) { 
./select:./enter/ratings/menu.mas:	foreach my $other_category (sort {$a->name cmp $b->name} $school->tourn->categories) {
./select:./enter/ratings/menu.mas:%			my ($uncovered, $overage) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category);
./select:./enter/ratings/menu.mas:%						my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./select:./enter/ratings/menu.mas:%						my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./select:./enter/create.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./enter/create.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./enter/create.mhtml:	my ($existing_school) = $chapter->schools( tourn => $tourn->id);
./select:./enter/create.mhtml:	my $now = DateTime->now();
./select:./enter/create.mhtml:	my ($school_code, $school_region) = $m->comp("/funclib/chapter_code.mas", tourn => $tourn, chapter => $chapter);
./select:./enter/create.mhtml:	my $school = Tab::School->create({
./select:./enter/create.mhtml:		my $description = "School registered by ".$person->first." ".$person->last;
./select:./enter/create.mhtml:		my $change = Tab::ChangeLog->create({
./select:./enter/create.mhtml:	foreach my $fine ($tourn->tourn_fees) {
./select:./enter/create.mhtml:		my $fee = Tab::SchoolFine->create({
./select:./enter/onsite_confirm.mhtml:	my $tourn = $school->tourn;
./select:./enter/onsite_confirm.mhtml:	my $tz = $tourn->tz;
./select:./enter/onsite_confirm.mhtml:    my $now = DateTime->now(time_zone => $tz);
./select:./enter/onsite_confirm.mhtml:	my $payup++ if $tourn->setting("onsite_only_paid");
./select:./enter/onsite_confirm.mhtml:		my ($fee, $feline_ref, $total_ref) = $m->comp("/funclib/school_fees.mas", school_id => $school->id, all => 1);
./select:./enter/onsite_confirm.mhtml:			my $symbol = $tourn->setting('currency');
./select:./enter/hire_exchange.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/hire_exchange.mhtml:	my @judges = $m->comp("/funclib/exchange_judges.mas", category => $category);
./select:./enter/hire_exchange.mhtml:	my @hires = $school->hires;
./select:./enter/entry_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/entry_print.mhtml:	my $tourn = $school->tourn;
./select:./enter/entry_print.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./select:./enter/entry_print.mhtml:	my $filename = "registration-".$school_id."-".$session->id;
./select:./enter/entry_print.mhtml:	my $now = DateTime->now;	
./select:./enter/housing_revoke.mhtml:	my $housing = Tab::Housing->retrieve($housing_id);
./select:./enter/housing_revoke.mhtml:	my $tourn = $housing->tourn;
./select:./enter/housing_revoke.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/housing_revoke.mhtml:	my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $housing->night);
./select:./enter/housing_revoke.mhtml:	my $num_slots = $slots[0]->slots;
./select:./enter/housing_revoke.mhtml:	my @requests = Tab::Housing->search( tourn => $tourn->id, night => $housing->night);
./select:./enter/housing_revoke.mhtml:			my $old = $housing->student if $housing->student && $housing->student->id;
./select:./enter/housing_revoke.mhtml:			my $description = $person->first." ".$person->last." Cancelled housing request for ".$old->first." ".$old->last;
./select:./enter/housing_revoke.mhtml:			my $change = Tab::ChangeLog->create({
./select:./enter/tba_assign.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/tba_assign.mhtml:	my $event = $entry->event;
./select:./enter/tba_assign.mhtml:	my $tourn = $event->tourn;
./select:./enter/tba_assign.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/tba_assign.mhtml:	my $max = $event->setting("max_entry");
./select:./enter/tba_assign.mhtml:	my $min = $event->setting("min_entry");
./select:./enter/tba_assign.mhtml:	my $code_style = $event->setting("code_style");
./select:./enter/tba_assign.mhtml:%						foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $school )) {
./select:./enter/team_members.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/team_members.mhtml:	my @clean_students = $m->comp("/funclib/students_evententer.mas", 
./select:./enter/team_members.mhtml:%			foreach my $member ($entry->members) { 
./select:./enter/school_unfollow.mhtml:	my $follower = Tab::Follower->retrieve($follower_id);
./select:./enter/school_unfollow.mhtml:		my $school_id = $follower->school->id;
./select:./enter/school_follow.mhtml:	my $person = Tab::Person->search( email => $email )->first if $email;
./select:./enter/school_follow.mhtml:		my $already = Tab::Follower->search( type => "school", school => $school_id, follower => $person->id )->first;
./select:./enter/rounds_save.mhtml:	my $school = Tab::School->retrieve($school_id) if $school_id;
./select:./enter/rounds_save.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./enter/rounds_save.mhtml:	my $max_rounds = $category->setting("max_rounds");
./select:./enter/rounds_save.mhtml:	foreach my $judge (Tab::Judge->search( category => $category->id, school => $school->id )) { 
./select:./enter/rounds_save.mhtml:		my $rounds = $ARGS{$judge->id};
./select:./enter/export_csv.mhtml:	my $tz = $tourn->tz;
./select:./enter/export_csv.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./enter/export_csv.mhtml:	my $filename = "Registration-".$tourn->name."-".Tab::csvdt($now);
./select:./enter/export_csv.mhtml:	my $garbage = `rm -f $filepath.*`;
./select:./enter/export_csv.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./select:./enter/export_csv.mhtml:	my @entries = sort {$a->name cmp $b->name} $school->entries;
./select:./enter/export_csv.mhtml:		my $registered_by = Tab::Person->retrieve($entry->setting("registered_by")) if $entry->setting('registered_by');
./select:./enter/export_csv.mhtml:		foreach my $student ($entry->students) { 
./select:./enter/export_csv.mhtml:	my @judges = sort {$a->last cmp $b->last} $school->judges;
./select:./enter/export_csv.mhtml:		foreach my $jpool ($judge->jpools) { 
./select:./enter/hire_confirm.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/hire_confirm.mhtml:	my $hire_offer = $judge->setting("hire_offer");
./select:./enter/hire_confirm.mhtml:	my $max = $hire_offer - $judge->hired;
./select:./enter/hire_confirm.mhtml:	my $hired = $judge->hired + $rounds;
./select:./enter/hire_confirm.mhtml:	my $now = DateTime->now;
./select:./enter/hire_confirm.mhtml:	my $recipient = $judge->person;
./select:./enter/hire_confirm.mhtml:	my $school_name = $school->name;
./select:./enter/hire_confirm.mhtml:	my $tourn_name = $school->tourn->name;
./select:./enter/hire_cancel.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/hire_cancel.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./select:./enter/hire_cancel.mhtml:	my $judge = $hire->judge;
./select:./enter/hire_cancel.mhtml:	my $hired = $judge->hired - $hire->rounds;
./select:./enter/hire_cancel.mhtml:	my $description = "Account ".$person->email." deleted a judge exchange hire arrangement with ".$judge->first." ".$judge->last;
./select:./enter/hire_cancel.mhtml:	my $hire_school = $hire->school->id if $hire->school;
./select:./enter/hire_cancel.mhtml:	my $subject = $person->first." ".$person->last." rescinded your hire";
./select:./enter/autohandler:	my $school = Tab::School->retrieve($school_id) if $school_id;
./select:./enter/autohandler:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./enter/autohandler:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./enter/autohandler:	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
./select:./enter/autohandler:	my @permissions = Tab::Permission->search(chapter => $school->chapter->id, person => $person->id );
./select:./enter/autohandler:	my %perms = map {$_->tag => $_} @permissions;
./select:./enter/autohandler:		foreach my $student ($entry->students) { 
./select:./enter/tba_assign_save.mhtml:	my $now = DateTime->now;
./select:./enter/tba_assign_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/tba_assign_save.mhtml:	my $school = $entry->school;
./select:./enter/tba_assign_save.mhtml:	my $event = $entry->event;
./select:./enter/tba_assign_save.mhtml:	my $tourn = $event->tourn;
./select:./enter/tba_assign_save.mhtml:	my $min = $event->setting("min_entry");
./select:./enter/tba_assign_save.mhtml:	my $max = $event->setting("max_entry");
./select:./enter/tba_assign_save.mhtml:	my $codes = $event->setting("code_style");
./select:./enter/tba_assign_save.mhtml:		my $student = Tab::Student->retrieve($ARGS{"student_".$step}) if $ARGS{"student_".$step};
./select:./enter/tba_assign_save.mhtml:		my $already = Tab::EntryStudent->search( entry => $entry->id, student => $student->id )->first;
./select:./enter/tba_assign_save.mhtml:	my $name = $students[0]->first." ".$students[0]->last if scalar @students == 1;
./select:./enter/tba_assign_save.mhtml:	my $code = $m->comp("/funclib/entry_code.mas", entry => $entry);
./select:./enter/tba_assign_save.mhtml:	my $msg = "Entry ".$entry->name." assigned to a TBA slot.  Code is $code";
./select:./enter/sex_change.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./enter/details.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/details.mhtml:	my $event = $entry->event;
./select:./enter/details.mhtml:	my $tourn = $event->tourn;
./select:./enter/details.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/details.mhtml:	my $max = $event->setting("max_entry");
./select:./enter/details.mhtml:	my $min = $event->setting("min_entry");
./select:./enter/details.mhtml:	my $code_style = $event->setting("code_style");
./select:./enter/details.mhtml:%			my @students = $entry->students;
./select:./enter/details.mhtml:%				my $hybrid = Tab::School->search( chapter => $student->chapter->id, tourn => $tourn->id )->first
./select:./enter/details.mhtml:%								foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $hybrid )) {
./select:./enter/details.mhtml:%								foreach my $student ($m->comp("/funclib/students_evententer.mas", event => $event, school => $school )) {
./select:./enter/details.mhtml:%		my $quals = $event->setting('ask_quals'); 
./select:./enter/details.mhtml:%			my @qualifiers = $entry->qualifiers;
./select:./enter/onsite.mhtml:	my $tourn = $school->tourn;
./select:./enter/onsite.mhtml:	my $hide_codes++ if $tourn->setting("hide_codes");
./select:./enter/onsite.mhtml:	my $tz = $tourn->tz;
./select:./enter/onsite.mhtml:    my $now = DateTime->now(time_zone => $tz);
./select:./enter/onsite.mhtml:	my $payup++ if $tourn->setting("onsite_only_paid");
./select:./enter/onsite.mhtml:			my $symbol = $tourn->setting('currency');
./select:./enter/onsite.mhtml:%					my $regged = Tab::Person->retrieve($school->setting("registered_by"));
./select:./enter/onsite.mhtml:%				my $registered_on = $school->setting("registered_on");
./select:./enter/onsite.mhtml:				my $drop_deadline = $tourn->setting("drop_deadline");
./select:./enter/onsite.mhtml:				my $judge_deadline = $tourn->setting("judge_deadline");
./select:./enter/onsite.mhtml:				my @already_entered = Tab::Entry->search( 
./select:./enter/onsite.mhtml:				my @hybrides = $m->comp("/funclib/school_hybrids.mas", school => $school);
./select:./enter/onsite.mhtml:%								foreach my $student ($already->students) { 
./select:./enter/onsite.mhtml:%					foreach my $judge ($school->judges) { 
./select:./enter/onsite.mhtml:%		 			          	foreach my $strike (sort {$a->type cmp $b->type} $judge->strikes) { 
./select:./enter/judge_details.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/judge_details.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_details.mhtml:	my $category = $judge->category;
./select:./enter/judge_details.mhtml:	my $tourn = $category->tourn;
./select:./enter/judge_details.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./select:./enter/judge_details.mhtml:%					foreach my $subset ($category->rating_subsets) { 
./select:./enter/judge_details.mhtml:%						my $rating = $judge->ratings( rating_subset => $subset->id )->first;
./select:./enter/judge_details.mhtml:%						my $tier = $rating->rating_tier if $rating;
./select:./enter/judge_details.mhtml:%									foreach my $event ($subset->events) { 
./select:./enter/judge_details.mhtml:%						foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "coach")) {
./select:./enter/judge_details.mhtml:%					my $rating = $judge->ratings->first;
./select:./enter/judge_details.mhtml:%					my $judge_tier = $rating->rating_tier if $rating;
./select:./enter/judge_details.mhtml:%					foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "coach")) {
./select:./enter/judge_details.mhtml:%						foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) { 
./select:./enter/judge_details.mhtml:%		foreach my $strike (Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 )) { 
./select:./enter/judge_details.mhtml:%		my @selfstrike = $m->comp("/funclib/event_selfstrike.mas", category => $category);
./select:./enter/judge_details.mhtml:%			foreach my $event ($m->comp("/funclib/event_selfstrike.mas", category => $category)) { 
./select:./enter/judges.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judges.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/judges.mhtml:	my $tourn = $school->tourn;
./select:./enter/judges.mhtml:	my @categories = $tourn->categories;
./select:./enter/judges.mhtml:	my @events = $category->events if $category;
./select:./enter/judges.mhtml:	my $tz = $person->tz;
./select:./enter/judges.mhtml:	my $now = DateTime->now( time_zone => $tz);
./select:./enter/judges.mhtml:	my $judge_deadline = $tourn->setting("judge_deadline");
./select:./enter/judges.mhtml:	my $judge_per = $category->setting("judge_per") if $category;
./select:./enter/judges.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./select:./enter/judges.mhtml:	my $frees_no = $category->setting("free_strikes_dont_count") if $category;
./select:./enter/judges.mhtml:	my @requests = Tab::JudgeHire->search( school => $school->id, category => $category->id ) if $category_id;
./select:./enter/judges.mhtml:%			my $category_deadline = $category->setting("deadline");
./select:./enter/judges.mhtml:%           my ($unc, $over) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category);
./select:./enter/judges.mhtml:%				foreach my $judge ($m->comp("/funclib/judgemath/judges_by_category.mas", school => $school, category => $category)) {
./select:./enter/judges.mhtml:%					my @strikes = Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 );
./select:./enter/judges.mhtml:%									foreach my $strike_timeslot ($category->strike_timeslots) { 
./select:./enter/judges.mhtml:%				my @judges = $m->comp("/funclib/exchange_judges.mas", category => $category);
./select:./enter/judges.mhtml:%					my @requests = Tab::JudgeHire->search( school => $school->id, category => $category->id );
./select:./enter/judges.mhtml:%				my $category_deadline = $category->setting("deadline");
./select:./enter/judges.mhtml:%					my @chapter_judges = $m->comp("/funclib/chapter_judges_free.mas", school => $school);
./select:./enter/judges.mhtml:%				    my $now = DateTime->now;
./select:./enter/judges.mhtml:%								foreach my $chapter_judge (sort {$a->last cmp $b->last} @chapter_judges) { 
./select:./enter/judges.mhtml:%			foreach my $category (sort {$a->name cmp $b->name} @categories) {
./select:./enter/judges.mhtml:%				my $category_deadline = $category->setting("deadline");
./select:./enter/judges.mhtml:%				my $no_free = $category->setting("free_strikes_dont_count");
./select:./enter/judges.mhtml:%				my ($unc, $over) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", school => $school, category => $category); 
./select:./enter/judges.mhtml:%				my @category_judges = $m->comp("/funclib/judgemath/judges_by_category.mas", school => $school, category => $category);
./select:./enter/judges.mhtml:%				my $obligation = $m->comp("/funclib/judgemath/judges_needed_by_category.mas", school => $school, category => $category);
./select:./enter/judge_drop.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/judge_drop.mhtml:	my $tourn = $judge->category->tourn;
./select:./enter/judge_drop.mhtml:	my $chapter = $school->chapter;
./select:./enter/judge_drop.mhtml:	my $category = $judge->category;
./select:./enter/judge_drop.mhtml:	my $err = $person->first." ".$person->last." dropped judge ".$judge->first." ".$judge->last." in ".$category->name;
./select:./enter/judge_drop.mhtml:    my @requests = Tab::Housing->search( tourn => $tourn->id, judge => $judge->id);
./select:./enter/judge_drop.mhtml:		my $change = Tab::ChangeLog->create({
./select:./enter/judge_drop.mhtml:	my $chapter_id = $chapter->id;
./select:./enter/judge_drop.mhtml:	my $tourn_id = $tourn->id;
./select:./enter/judge_person_link.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_person_link.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/judge_person_link.mhtml:	my $judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./enter/judge_person_link.mhtml:		my $login = Tab::Login->search( username => $email)->first;
./select:./enter/judge_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./enter/judge_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_save.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./enter/judge_save.mhtml:	my $tourn = $school->tourn;
./select:./enter/judge_save.mhtml:	my $tz = $person->tz;
./select:./enter/judge_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./enter/judge_save.mhtml:	my $person_id = $chapter_judge->person->id if $chapter_judge->person;
./select:./enter/judge_save.mhtml:	my $judge = Tab::Judge->create({
./select:./enter/judge_save.mhtml:		my $description = $person->first." ".$person->last." entered ".$category->abbr." judge $judge->code (".$judge->first." ".$judge->last.")";
./select:./enter/judge_save.mhtml:		my $change = Tab::ChangeLog->create({
./select:./enter/team_members_save.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/team_members_save.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./enter/team_members_save.mhtml:	my $team_member = Tab::EntryStudent->create({ 
./select:./enter/team_members_save.mhtml:	my $msg .= $student->first." ".$student->last." has been added to ".$entry->name.", ";
./select:./enter/team_members_save.mhtml:	my $event_id = $entry->event->id;
./select:./enter/housing_transfer.mhtml:	my $housing = Tab::Housing->retrieve($housing_id);
./select:./enter/housing_transfer.mhtml:	my $tourn = $housing->tourn;
./select:./enter/housing_transfer.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/housing_transfer.mhtml:	my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn, add_one => "aye");
./select:./enter/housing_transfer.mhtml:	my $old = $housing->student if ($housing->student && $housing->student->id);
./select:./enter/housing_transfer.mhtml:		my @tbas = Tab::Housing->search( tba => 1, school => $school_id, night => $housing->night );
./select:./enter/housing_transfer.mhtml:		my $event = Tab::Event->retrieve($event_id);
./select:./enter/housing_transfer.mhtml:		foreach my $entry (Tab::Entry->search(event => $event->id, school => $school->id)) { 
./select:./enter/housing_transfer.mhtml:			foreach my $student ($entry->students) { 
./select:./enter/housing_transfer.mhtml:					my $ex = $student->housing($tourn, $housing->night);
./select:./enter/housing_transfer.mhtml:						my $description = "TBA Housing slot transferred to ".$student->first." ".$student->last;
./select:./enter/housing_transfer.mhtml:						my $change = Tab::ChangeLog->create({
./select:./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to $count students in ".$event->abbr;
./select:./enter/housing_transfer.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./enter/housing_transfer.mhtml:		my $ex = $student->housing($tourn, $housing->night);
./select:./enter/housing_transfer.mhtml:			my $description = $person->first." ".$person->last." Transferred
./select:./enter/housing_transfer.mhtml:			my $change = Tab::ChangeLog->create({
./select:./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to ".$student->first." ".$student->last;
./select:./enter/housing_transfer.mhtml:		my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/housing_transfer.mhtml:		my $ex = $m->comp("/funclib/judge_housing.mas", judge => $judge, night => $housing->night);
./select:./enter/housing_transfer.mhtml:			my $description = " Transferred housing from ".$old->first." ".$old->last." to ".$judge->first." ".$judge->last if $old;
./select:./enter/housing_transfer.mhtml:			my $change = Tab::ChangeLog->create({
./select:./enter/housing_transfer.mhtml:		my $msg = "Housing request transferred to ".$judge->first." ".$judge->last;
./select:./enter/housing_transfer.mhtml:	foreach my $student ($m->comp("/funclib/school_students.mas", school => $school, tourn => $tourn)) { 
./select:./enter/housing_transfer.mhtml:		my $hs = $student->housing($tourn, $housing->night);
./select:./enter/housing_transfer.mhtml:	foreach my $judge ($school->judges) {
./select:./enter/housing_transfer.mhtml:		my $hs = $m->comp("/funclib/judge_housing.mas", judge => $judge, night => $housing->night);
./select:./enter/housing_transfer.mhtml:	my $person = $housing->judge if $housing->type eq "judge";
./select:./enter/housing_transfer.mhtml:%						foreach my $student (sort {$a->last cmp $b->last} @students_without_housing) {
./select:./enter/housing_transfer.mhtml:%						foreach my $event (sort {$a->name cmp $b->name} $tourn->events) { 
./select:./enter/housing_transfer.mhtml:%						foreach my $judge (sort {$a->last cmp $b->last} @judges_without_housing) {
./select:./enter/housing_transfer.mhtml:%		my @tbas = Tab::Entry->search( tba => 1, school => $school->id );
./select:./enter/housing_transfer.mhtml:%		my @tba_housing = Tab::Housing->search( tba => 1, school => $school->id );
./select:./enter/housing_transfer.mhtml:%					my @slots = Tab::HousingSlots->search( tourn => $tourn->id, night => $day );
./select:./enter/housing_transfer.mhtml:%					my @tbas = Tab::Housing->search( tba => 1, school => $school->id, night => $day );
./select:./enter/drop_school.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/drop_school.mhtml:	my $tourn = $school->tourn;
./select:./enter/drop_school.mhtml:	foreach my $entry ($school->entries) { 
./select:./enter/drop_school.mhtml:		foreach my $strike (Tab::Strike->search(entry => $entry->id)) { $strike->delete;}
./select:./enter/drop_school.mhtml:		foreach my $student ($entry->students) { 
./select:./enter/drop_school.mhtml:			foreach my $housing ($m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn)) {
./select:./enter/drop_school.mhtml:	foreach my $judge ($school->judges) { 
./select:./enter/drop_school.mhtml:		foreach my $strike ($judge->strikes) { 
./select:./enter/drop_school.mhtml:		foreach my $housing ($m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn)) {
./select:./enter/drop_school.mhtml:        my $description = $person->first." ".$person->last." dropped the entire entry for ".$school->name.".  Bummer.";
./select:./enter/drop_school.mhtml:        my $change = Tab::ChangeLog->create({
./select:./enter/drop_school.mhtml:	my $msg = "You have been dropped completely from ".$tourn->name.".  I warned you.";
./select:./enter/student_save.mhtml:	my $now = DateTime->now;
./select:./enter/student_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./select:./enter/student_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/student_save.mhtml:	my $tourn = $event->tourn;
./select:./enter/student_save.mhtml:	my $min = $event->setting("min_entry");
./select:./enter/student_save.mhtml:	my $max = $event->setting("max_entry");
./select:./enter/student_save.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./select:./enter/student_save.mhtml:	my $partner = Tab::Student->retrieve($partner_id) if $partner_id;
./select:./enter/student_save.mhtml:		my $tourn = $event->tourn;
./select:./enter/student_save.mhtml:		my @entries = $m->comp('/funclib/student_entries.mas', student => $student, tourn => $tourn);
./select:./enter/student_save.mhtml:			my $err = $student->first." ".$student->last." is already entered";
./select:./enter/student_save.mhtml:	my $entry = Tab::Entry->create({ 
./select:./enter/student_save.mhtml:		my $es = Tab::EntryStudent->create({
./select:./enter/student_save.mhtml:		my $description = $person->first." ".$person->last." entered ".$event->abbr." entry $code (".$name.")";
./select:./enter/student_save.mhtml:		my $change = Tab::ChangeLog->create({
./select:./enter/details_housing.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./enter/details_housing.mhtml:	my $event = $entry->event;
./select:./enter/details_housing.mhtml:	my $tourn = $event->tourn;
./select:./enter/details_housing.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/details_housing.mhtml:	my @student_ids = split(/-/, $housed);
./select:./enter/details_housing.mhtml:	foreach my $day ($m->comp("/funclib/tourn_days.mas", tourn => $tourn)) { 
./select:./enter/details_housing.mhtml:%				my $student = Tab::Student->retrieve($student_id);
./select:./enter/details_housing.mhtml:%				my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);
./select:./enter/details_housing.mhtml:%					my @unhoused_students = @{$unhoused_students_by_day{$housing->night->ymd}} if $unhoused_students_by_day{$housing->night->ymd};
./select:./enter/details_housing.mhtml:%					my @unhoused_judges = @{$unhoused_judges_by_day{$housing->night->ymd}} if $unhoused_judges_by_day{$housing->night->ymd};
./select:./enter/invoice_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/invoice_print.mhtml:	my $tourn = $school->tourn;
./select:./enter/invoice_print.mhtml:	my $school_name = $school->name;
./select:./enter/invoice_print.mhtml:	my $tourn_name = $tourn->name;
./select:./enter/invoice_print.mhtml:	my $filename = "Invoice-".$school_name."-".$tourn_name."-".$session->id;
./select:./enter/invoice_print.mhtml:	my $garbage = `rm -f $filepath.*`;
./select:./enter/contact_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/contact_save.mhtml:	my $other = Tab::School->search( tourn => $school->tourn->id, code => $school_code)->first;
./select:./enter/judge_striketime.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/judge_striketime.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_striketime.mhtml:	my $category = $judge->category;
./select:./enter/judge_striketime.mhtml:	my $tourn = $category->tourn;
./select:./enter/judge_striketime.mhtml:	my $tz = $tourn->tz;
./select:./enter/judge_striketime.mhtml:%			foreach my $strike_timeslot ($category->strike_timeslots) { 
./select:./enter/judge_striketime.mhtml:%				my $start = $strike_timeslot->start->set_time_zone($tz);
./select:./enter/judge_striketime.mhtml:%				my $end = $strike_timeslot->end->set_time_zone($tz);
./select:./enter/judge_details_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./enter/judge_details_save.mhtml:	my $category = $judge->category;
./select:./enter/judge_details_save.mhtml:	my $tourn = $category->tourn;
./select:./enter/judge_details_save.mhtml:	my $rounds_per = $category->setting("rounds_per") if $category;
./select:./enter/judge_details_save.mhtml:	my $now = DateTime->now;
./select:./enter/judge_details_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./enter/judge_details_save.mhtml:			my $rating = $judge->ratings->first;
./select:./enter/judge_details_save.mhtml:			foreach my $subset ($category->rating_subsets) { 
./select:./enter/judge_details_save.mhtml:				my $tier_id = $ARGS{$subset->id};
./select:./enter/judge_details_save.mhtml:				my $rating = $judge->ratings(rating_subset => $subset)->first;
./select:./enter/judge_details_save.mhtml:	my $cj = $judge->chapter_judge;
./select:./enter/judge_details_save.mhtml:	foreach my $strike (Tab::Strike->search( type => "event", judge => $judge->id, registrant => 1 )) { 
./select:./enter/judge_details_save.mhtml:	foreach my $event ($m->comp("/funclib/event_selfstrike.mas", category => $category)) { 
./select:./enter/judge_details_save.mhtml:			my $strike = $strike_by_event{$event->id};
./select:./enter/judge_details_save.mhtml:	my $msg = "Judge ".$judge->first." ".$judge->last." entered";
./select:./enter/concessions.mhtml:	my $now = DateTime->now;
./select:./enter/concessions.mhtml:	my $tourn = $school->tourn;
./select:./enter/concessions.mhtml:%			foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) { 
./select:./enter/concessions.mhtml:%						my $count =	$m->comp("/funclib/school_concessions.mas", school => $school, count => 1, concession => $concession);
./select:./enter/concessions.mhtml:%						my $charge =	$m->comp("/funclib/school_concessions.mas", school => $school, charge => 1, concession => $concession);
./select:./enter/concessions.mhtml:%						my $tz = $tourn->tz if $tourn;
./select:./enter/concessions.mhtml:%						my $deadline = $concession->deadline->set_time_zone($tz);
./select:./enter/concessions.mhtml:%			foreach my $concession (sort {$a->name cmp $b->name} $tourn->concessions) { 
./select:./enter/concessions.mhtml:%				my $total_order = $m->comp("/funclib/concession_stats.mas", total => 1, concession => $concession);
./select:./enter/menu.mas:	my $tz = $school->tourn->tz;
./select:./enter/menu.mas:	my $now = DateTime->now(time_zone => $tz);
./select:./enter/menu.mas:	foreach my $category ($school->tourn->categories) { 
./select:./enter/menu.mas:		my ($uncovered, $overage) = $m->comp("/funclib/judgemath/uncovered_burden_by_category.mas", category => $category, school => $school); 
./select:./enter/menu.mas:	foreach my $category ($school->tourn->categories) { 
./select:./enter/menu.mas:		my $strike_start = $category->setting("strike_start");
./select:./enter/menu.mas:%	my $tourn = $school->tourn;
./select:./enter/menu.mas:%			my $onsite_starts = $tourn->setting("onsite_starts");
./select:./enter/menu.mas:%			my $onsite_ends = $tourn->setting("onsite_ends");
./select:./enter/menu.mas:    foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) {
./select:./enter/menu.mas:		my @entries= $m->comp("/funclib/category_entries.mas", category => $other_category, school => $school, preffable => 1);
./select:./enter/menu.mas:        my $pref_style = $ocategory->setting("prefs");
./select:./enter/menu.mas:			my @unrated = $m->comp("/funclib/entry_unrated.mas", entry => $entry);
./select:./student/entry.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./student/entry.mhtml:	my $tz = $entry->event->tourn->tz;
./select:./student/entry.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./student/entry.mhtml:%			my $prefs = $entry->event->category->setting("prefs");
./select:./student/entry.mhtml:%				my $prefs_start = $entry->event->category->setting("strike_start");
./select:./student/entry.mhtml:%				my $elim_prefs_start = $entry->event->category->setting("elim_strike_start");
./select:./student/entry.mhtml:%				my $prefs_start = $entry->event->category->setting("strike_start");
./select:./student/history.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./student/history.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./select:./student/history.mhtml:	my $now = DateTime->now;
./select:./student/history.mhtml:					my $event = $panel->round->event;
./select:./student/history.mhtml:					my $tz = $event->tourn->tz;
./select:./student/history.mhtml:					my $aff_string = $event->setting("aff_label");
./select:./student/history.mhtml:					my $neg_string = $event->setting("neg_label");
./select:./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/history.mhtml:					my $entry = Tab::Entry->retrieve($panel->entryid);
./select:./student/history.mhtml:					my $event = $panel->round->event;
./select:./student/history.mhtml:					my $aff_string = $event->setting("aff_label");
./select:./student/history.mhtml:					my $neg_string = $event->setting("neg_label");
./select:./student/history.mhtml:					foreach my $student ($entry->students) { 
./select:./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/history.mhtml:%								my @scores = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry_id => $panel->entryid);
./select:./student/history.mhtml:%										foreach my $student ($entry->students) { 
./select:./student/history.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/history.mhtml:%								my @values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, rfd => "rfd", entry => $entry);
./select:./student/drop_entry_student.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./student/drop_entry_student.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./student/drop_entry_student.mhtml:	my @entry_student = Tab::EntryStudent->search(entry=>$entry_id, student=>$student_id);
./select:./student/drop_entry_student.mhtml:		my @ballot = Tab::Ballot->search(entry=>$entry_id);
./select:./student/drop_entry_student.mhtml:			my @score = Tab::Score->search(ballot=>$ballot->id, student=>$student_id );
./select:./student/drop_entry_student.mhtml:		if ($killit eq "DEATH") {$dummy->delete;}
./select:./student/index.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./student/index.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./select:./student/index.mhtml:	my $now = DateTime->now;
./select:./student/index.mhtml:					my $event = $panel->round->event;
./select:./student/index.mhtml:					my $tz = $panel->round->event->tourn->tz;
./select:./student/index.mhtml:					my $aff_string = $event->setting("aff_label");
./select:./student/index.mhtml:					my $neg_string = $event->setting("neg_label");
./select:./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/index.mhtml:%					my $entry = Tab::Entry->retrieve($panel->entryid);
./select:./student/index.mhtml:%					foreach my $student ($entry->students) { 
./select:./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/index.mhtml:%							foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./student/index.mhtml:%								my @scores = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry_id => $panel->entryid);
./select:./student/index.mhtml:%										foreach my $student ($entry->students) { 
./select:./student/index.mhtml:%													my $rfd = $score->content if $score->tag eq "rfd";
./select:./student/index.mhtml:%													my $comments = $score->content if $score->tag eq "comments";
./select:./student/index.mhtml:%		foreach my $student (sort {$b->id <=> $a->id} @students) { 
./select:./student/index.mhtml:%				foreach my $circuit ($student->chapter->circuits) {
./select:./student/index.mhtml:%					foreach my $entry (sort {$b <=> $a} $student->entries) { 
./select:./student/index.mhtml:%						my $tourn = $entry->event->tourn;
./select:./student/index.mhtml:%						my $tz = $tourn->tz;
./select:./student/index.mhtml:					my $ok++ if $student->person && $student->person->id == $person->id;
./select:./student/index.mhtml:					foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./select:./student/index.mhtml:					my $tz = $person->tz;
./select:./student/index.mhtml:					my $now = DateTime->now->set_time_zone($tz);
./select:./student/index.mhtml:					my $year = $now->year;
./select:./student/index.mhtml:					my $limit = $year."-07-01 00:00:00";
./select:./student/index.mhtml:					my @partners = Tab::Student->search_partners( $student->id, $limit );
./select:./student/index.mhtml:						my @p_results = Tab::Result->search_honors( $partner->id, $limit );
./select:./student/conflict_rm.mhtml:	my $conflict = Tab::Conflict->retrieve($conflict_id);
./select:./student/follow.mhtml:%		my @students = Tab::Student->search_like( first => $first."%", last => $last."%", person => 0 );
./select:./student/claim.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./select:./student/claim.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $student->chapter)) { 
./select:./student/claim.mhtml:		my $subject = "[TabRoom] ". $person->email." requests access to student ".$student->first." ".$student->last;
./select:./student/claim.mhtml:		my $body = "The holder of the Tabroom login ".$person->first." ".$person->last." (".$person->email.") \n";
./select:./student/claim.mhtml:		my $msg = "You have requested access to the judge ".$student->first." ".$student->last." from the team admins.";
./select:./student/conflicts.mhtml:		my $other = Tab::Person->retrieve($other_id);
./select:./student/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, conflicted => $other_id );
./select:./student/conflicts.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./student/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, chapter => $chapter_id );
./select:./student/conflicts.mhtml:	my @existings = Tab::Conflict->search( person => $person->id );
./select:./student/conflicts.mhtml:%					my @students = Tab::Student->search( person => $other->id );
./select:./student/conflicts.mhtml:%					my @chapter_judges = Tab::ChapterJudge->search( person => $other->id );
./select:./student/search.mhtml:	my @students = Tab::Student->search_like( first => $first."%", last => $last."%", person => 0 );
./select:./student/search.mhtml:%			foreach my $acc_student ($person->students) { 
./select:./student/search.mhtml:%			foreach my $entry ($m->comp("/funclib/person_entries.mas", person => $person, all => 1)) { 
./select:./student/rfd_view.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./select:./student/rfd_view.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./student/rfd_view.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./student/rfd_view.mhtml:	my @values = $m->comp("/funclib/panel_scores.mas", panel => $panel, judge => $judge, entry => $entry);
./select:./student/rfd_view.mhtml:%				foreach my $student ($entry->students) { 
./select:./diocese/tourn_school_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./diocese/tourn_school_save.mhtml:	my $hotel = Tab::Hotel->retrieve($hotel_id) if $hotel_id;
./select:./diocese/tourn_school_save.mhtml:	my $invalid = Email::Valid->address( -address => $contact_email, -mxcheck => 1 ) ? 'yes' : 'no' if $contact_email;
./select:./diocese/tourn_school_save.mhtml:	my $chapter = $school->chapter;
./select:./diocese/invoice_school_print.mhtml:	my $tz = $tourn->tz;
./select:./diocese/invoice_school_print.mhtml:    my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/invoice_school_print.mhtml:	my $filename = "Diocese-SchoolInvoices-".$region->name;
./select:./diocese/invoice_school_print.mhtml:	my $garbage = `rm -f $filepath"."$filename.*`;
./select:./diocese/invoice_school_print.mhtml:	foreach my $school (Tab::School->search( region => $region->id, tourn => $tourn->id)) { 
./select:./diocese/invoice_school_print.mhtml:		my ($total, $payments, $feline_ref) = $m->comp("/funclib/ncfl/fees.mas", diocese => $region, tourn => $tourn, school => $school);
./select:./diocese/invoice_school_print.mhtml:		foreach my $director ($region->admins) { 
./select:./diocese/tourn_school_edit.mhtml:	my $tz = $person->tz;
./select:./diocese/tourn_school_edit.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/tourn_school_edit.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./select:./diocese/tourn_school_edit.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./diocese/tourn_school_edit.mhtml:%					foreach my $hotel (sort {$a->name cmp $b->name} $tourn->hotels) { 
./select:./diocese/tourn_school_edit.mhtml:%				my $warn = "This will drop all entries and judges from ".$school->short_name."  Please be sure before hitting OK.  OK?";
./select:./diocese/tourn_school_create.mhtml:	my $tz = $person->tz;
./select:./diocese/tourn_school_create.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/tourn_school_create.mhtml:	my $chapter = Tab::Chapter->search_by_fucking_name( $name, $region->id )->first;
./select:./diocese/tourn_school_create.mhtml:	my $circuit = $region->circuit;
./select:./diocese/tourn_school_create.mhtml:	my $chapter_circuit = Tab::ChapterCircuit->create({
./select:./diocese/tourn_school_drop.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./diocese/tourn_school_drop.mhtml:	foreach my $entry ($school->entries) { 
./select:./diocese/tourn_school_drop.mhtml:		foreach my $strike (Tab::Strike->search(entry => $entry->id)) { $strike->delete;}
./select:./diocese/tourn_school_drop.mhtml:		foreach my $student ($entry->students) { 
./select:./diocese/tourn_school_drop.mhtml:			foreach my $housing ($m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn)) {
./select:./diocese/tourn_school_drop.mhtml:	foreach my $judge ($school->judges) { 
./select:./diocese/tourn_school_drop.mhtml:		foreach my $strike ($judge->strikes) { 
./select:./diocese/tourn_school_drop.mhtml:		foreach my $housing ($m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn)) {
./select:./diocese/tourn_school_drop.mhtml:        my $description = $person->first." ".$person->last." dropped the entire entry for ".$school->name.".  Bummer.";
./select:./diocese/tourn_school_drop.mhtml:        my $change = Tab::ChangeLog->create({
./select:./diocese/tourn_school_drop.mhtml:	my $msg = "You have been dropped completely from ".$tourn->name.".  I warned you.";
./select:./diocese/tourn.mhtml:	my $tz = $person->tz;
./select:./diocese/tourn.mhtml:%					my $drop_deadline = $tourn->setting("drop_deadline");
./select:./diocese/tourn.mhtml:%					my $judge_deadline = $tourn->setting("judge_deadline");
./select:./diocese/tourn.mhtml:%					my $fine_deadline = $tourn->setting("fine_deadline");
./select:./diocese/access_rm.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./diocese/access_rm.mhtml:	my @already = Tab::Permission->search( region => $region->id, tag => "region", person => $admin_id );
./select:./diocese/tourn_tab_edit.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./diocese/tourn_tab_edit.mhtml:	my $category = Tab::Category->retrieve($category_id) unless $judge;
./select:./diocese/tourn_tab_edit.mhtml:	my @schools = Tab::School->search( region => $region->id, tourn => $tourn->id );
./select:./diocese/tourn_tab_edit.mhtml:%			my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./select:./diocese/tourn_tab_edit.mhtml:%			my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./select:./diocese/tourn_tab_edit.mhtml:%			my $remainder = $judge_burden - scalar @judges;
./select:./diocese/access.mhtml:%		my $admins = scalar $region->admins;
./select:./diocese/access.mhtml:%		foreach my $admin ($region->admins) { 
./select:./diocese/tourn_judges.mhtml:	my $tz = $tourn->tz;
./select:./diocese/tourn_judges.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./diocese/tourn_judges.mhtml:	my $judge_deadline = $tourn->setting("judge_deadline");
./select:./diocese/tourn_judges.mhtml:	my $hide_code = $tourn->setting("hide_codes");
./select:./diocese/tourn_judges.mhtml:	my $category = Tab::Category->retrieve($category_id) if $category_id;
./select:./diocese/tourn_judges.mhtml:		my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./select:./diocese/tourn_judges.mhtml:		my $tab_room++ if $category->setting("tab_room");
./select:./diocese/tourn_judges.mhtml:		my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./select:./diocese/tourn_judges.mhtml:		my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_prelims");
./select:./diocese/tourn_judges.mhtml:		my @chapters = sort {$a->name cmp $b->name} $region->chapters;
./select:./diocese/tourn_judges.mhtml:		my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./select:./diocese/tourn_judges.mhtml:		my @events = sort {$a->name cmp $b->name} $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./select:./diocese/tourn_judges.mhtml:%					foreach my $jpool (sort {$a->id <=> $b->id} @prelim_jpools) { 
./select:./diocese/tourn_judges.mhtml:%						my @pool_judges = @{$judges_by_jpool{$jpool->id}} if $judges_by_jpool{$jpool->id};
./select:./diocese/tourn_judges.mhtml:%						my $jpool_burden = $m->comp("/funclib/ncfl/prelim_jpool_obligation.mas", diocese => $region, jpool => $jpool);
./select:./diocese/tourn_judges.mhtml:%						my $needed = $jpool_burden - scalar @pool_judges;
./select:./diocese/tourn_judges.mhtml:						foreach my $judge (@{$judges_by_jpool{$jpool->id}}) {
./select:./diocese/tourn_judges.mhtml:%					foreach my $judge ($m->comp("/funclib/region_judges.mas", tourn => $tourn, region => $region, elim => $category)) { 
./select:./diocese/tourn_judges.mhtml:%						my %jpool_yes = map {$_->id => 1} $judge->jpools;
./select:./diocese/tourn_judges.mhtml:					my ($total_owed, $style) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, category => $category);
./select:./diocese/tourn_judges.mhtml:%				foreach my $other_category (sort {$a->name cmp $b->name} $tourn->categories) { 
./select:./diocese/tourn_judges.mhtml:%					my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $other_category);
./select:./diocese/tourn_judges.mhtml:%					my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $other_category);
./select:./diocese/tourn_judges.mhtml:%					my $remainder = $judge_burden - scalar @judges;
./select:./diocese/tourn_judges.mhtml:%					my ($total_owed, $style) = $m->comp("/funclib/ncfl/jpool_obligation.mas", diocese => $region, category => $other_category);
./select:./diocese/tourn_judges.mhtml:		my $rating = $judge->avg;
./select:./diocese/tourn_judges.mhtml:		my $tourn = $category->tourn;
./select:./diocese/tourn_judges.mhtml:		my $tz = $tourn->tz;
./select:./diocese/tourn_judges.mhtml:		my $now = DateTime->now(time_zone => $tz);
./select:./diocese/tourn_judges.mhtml:		my $judge_deadline = $tourn->setting("judge_deadline");
./select:./diocese/tourn_judges.mhtml:		my $region = $judge->school->region;
./select:./diocese/tourn_judge_edit.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./diocese/tourn_judge_edit.mhtml:	my $category = Tab::Category->retrieve($category_id) unless $judge;
./select:./diocese/tourn_judge_edit.mhtml:	my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;
./select:./diocese/tourn_judge_edit.mhtml:	my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;
./select:./diocese/tourn_judge_edit.mhtml:	my @alts = $m->comp("/funclib/region_judges.mas", region => $region, alt => "yes", category => $category);
./select:./diocese/tourn_judge_edit.mhtml:	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_prelims");
./select:./diocese/tourn_judge_edit.mhtml:	my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./select:./diocese/tourn_judge_edit.mhtml:	my $prelim_jpool = $judge->setting("prelim_jpool") if $judge;
./select:./diocese/tourn_judge_edit.mhtml:	my @schools = sort {$a->name cmp $b->name} Tab::School->search( region => $region->id, tourn => $tourn->id);
./select:./diocese/tourn_judge_edit.mhtml:%			my @judges = $m->comp("/funclib/ncfl/covering_judges.mas", diocese => $region, category => $category);
./select:./diocese/tourn_judge_edit.mhtml:%			my $judge_burden = $m->comp("/funclib/ncfl/judge_obligation.mas", diocese => $region, category => $category);
./select:./diocese/tourn_judge_edit.mhtml:%			my $remainder = $judge_burden - scalar @judges;
./select:./diocese/tourn_judge_edit.mhtml:%					my @jpool_judges = $m->comp("/funclib/region_judges.mas", region => $region, jpool => $jpool);
./select:./diocese/tourn_judge_edit.mhtml:%					my $jpool_burden = $m->comp("/funclib/ncfl/prelim_jpool_obligation.mas", diocese => $region, jpool => $jpool);
./select:./diocese/tourn_judge_edit.mhtml:%					my $needed = $jpool_burden - scalar @jpool_judges;
./select:./diocese/tourn_judge_edit.mhtml:%							my $set_tier = Tab::Rating->search( rating_subset => $subset->id, judge => $judge->id )->first if $judge;
./select:./diocese/tourn_judge_edit.mhtml:%										foreach my $rating_tier (sort {$a->name cmp $b->name} @tiers) {
./select:./diocese/tourn_judge_edit.mhtml:%						my $set_tier = $judge->ratings->first if $judge;
./select:./diocese/tourn_judge_edit.mhtml:%							foreach my $rating_tier (sort {$a->name cmp $b->name} @tiers) {
./select:./diocese/tourn_judge_edit.mhtml:%							foreach my $alt_category ($tourn->categories) { 
./select:./diocese/tourn_judge_drop.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./diocese/tourn_judge_drop.mhtml:	my $category = $judge->category;
./select:./diocese/tourn_judge_drop.mhtml:	my $school = $judge->school;
./select:./diocese/tourn_judge_drop.mhtml:	my $msg = "Judge ".$judge->first." ".$judge->last." has been dropped.";
./select:./diocese/tourn_judge_drop.mhtml:	my @ratings = Tab::Rating->search(judge => $judge->id);
./select:./diocese/tourn_judge_drop.mhtml:	my $description = $person->first." ".$person->last." dropped judge ".$judge->code." ".$judge->first." ".$judge->last;
./select:./diocese/tourn_judge_drop.mhtml:	my $change = Tab::ChangeLog->create({
./select:./diocese/tourn_judge_drop.mhtml:	my $remaining = scalar $school->entries;
./select:./diocese/tourn_judge_drop.mhtml:	my $judges = scalar $school->judges;
./select:./diocese/schools_save.mhtml:	foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters)  { 
./select:./diocese/schools_save.mhtml:		my $chapter = Tab::Chapter->create({
./select:./diocese/tourn_tab_save.mhtml:	my $tz = $tourn->tz;
./select:./diocese/tourn_tab_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/tourn_tab_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./diocese/tourn_tab_save.mhtml:		my $cj = $judge->chapter_judge;
./select:./diocese/tourn_tab_save.mhtml:			my $school = Tab::School->retrieve($school_id);
./select:./diocese/tourn_tab_save.mhtml:			my $cj = Tab::ChapterJudge->create({
./select:./diocese/schools.mhtml:%			foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters)  { 
./select:./diocese/autohandler:	my $region = Tab::Region->retrieve($region_id) if $region_id;
./select:./diocese/autohandler:	my $coach = Tab::Permission->search( region => $region->id, tag => "region", person => $person->id )->first;
./select:./diocese/autohandler:	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;
./select:./diocese/tourn_print_event.mhtml:    my $filename = "Diocese-Registration-".$region->name;
./select:./diocese/tourn_print_event.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./select:./diocese/tourn_print_event.mhtml:	my $now = DateTime->now;
./select:./diocese/tourn_print_event.mhtml:	foreach my $category (sort {$a->name cmp $b->name} $tourn->categories) { 
./select:./diocese/tourn_print_event.mhtml:		my $newpage++ unless $category->setting("tab_room");
./select:./diocese/tourn_print_event.mhtml:		my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, category => $category);
./select:./diocese/tourn_print_event.mhtml:		my @entries = $m->comp("/funclib/region_entries.mas", region => $region, tourn => $tourn, category => $category);
./select:./diocese/tourn_judge_save.mhtml:	my $tz = $tourn->tz;
./select:./diocese/tourn_judge_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/tourn_judge_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./diocese/tourn_judge_save.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./diocese/tourn_judge_save.mhtml:		my $cj = $judge->chapter_judge;
./select:./diocese/tourn_judge_save.mhtml:			my $cj = Tab::ChapterJudge->create({
./select:./diocese/tourn_judge_save.mhtml:	my @prelim_jpools = $m->comp("/funclib/category_jpools.mas", 
./select:./diocese/tourn_judge_save.mhtml:			my $jpool = Tab::JPool->retrieve($jpool_id);
./select:./diocese/tourn_judge_save.mhtml:				my @already = $m->comp("/funclib/judge_jpools.mas", 
./select:./diocese/tourn_judge_save.mhtml:					my @jpool_memberships = Tab::JPoolJudge->search(
./select:./diocese/tourn_judge_save.mhtml:    my @subsets = sort {$a->name cmp $b->name} $category->rating_subsets;
./select:./diocese/tourn_judge_save.mhtml:    my @tiers = sort {$a->name cmp $b->name} $category->rating_tiers;
./select:./diocese/tourn_judge_save.mhtml:			my $rating = Tab::Rating->search( judge => $judge->id, type => "coach", rating_subset => $subset->id )->first;
./select:./diocese/tourn_judge_save.mhtml:			my @ratings = Tab::Rating->search( judge => $judge->id, type => "coach" );
./select:./diocese/tourn_entries_save.mhtml:    my $tz = $person->tz;
./select:./diocese/tourn_entries_save.mhtml:	my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/tourn_entries_save.mhtml:	my $event = Tab::Event->retrieve($event_id);
./select:./diocese/tourn_entries_save.mhtml:	my $quota = $region->quota;
./select:./diocese/tourn_entries_save.mhtml:	my $max = $event->setting("max_entry") if $event;
./select:./diocese/tourn_entries_save.mhtml:	my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $event);
./select:./diocese/tourn_entries_save.mhtml:	my $msg = "Entries saved in ".$event->name;
./select:./diocese/invoice_print.mhtml:	my $tz = $tourn->tz;
./select:./diocese/invoice_print.mhtml:    my $now = DateTime->now->set_time_zone($tz);
./select:./diocese/invoice_print.mhtml:	my ($total, $payments, $feline_ref) = $m->comp("/funclib/ncfl/fees.mas", diocese => $region, tourn => $tourn);
./select:./diocese/invoice_print.mhtml:    my $filename = "Diocese-Invoice-".$region->name;
./select:./diocese/invoice_print.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./select:./diocese/invoice_print.mhtml:	foreach my $director ($region->admins) { 
./select:./diocese/invoice_print.mhtml:    my $message = $tourn->setting("invoice_message");
./select:./diocese/invoice_print.mhtml:    my $strip = HTML::Strip->new();
./select:./diocese/tourn_schools.mhtml:	my $tz = $person->tz;
./select:./diocese/tourn_schools.mhtml:	my %hotels = map {$_->id => $_} $tourn->hotels;
./select:./diocese/tourn_schools.mhtml:%			foreach my $school (sort {$a->name cmp $b->name} $tourn->schools( region => $region->id)) { 
./select:./diocese/tourn_schools.mhtml:%			foreach my $chapter (sort {$a->name cmp $b->name} $region->chapters) { 
./select:./diocese/tourn_judge_elims_save.mhtml:	my $category = Tab::Category->retrieve($category_id);
./select:./diocese/tourn_judge_elims_save.mhtml:	my @elim_jpools = $m->comp("/funclib/category_jpools.mas", category => $category, limit => "ncfl_elims");
./select:./diocese/tourn_judge_elims_save.mhtml:	my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, elim => $category);
./select:./diocese/tourn_print_school.mhtml:    my $filename = "Diocese-Registration-".$region->name;
./select:./diocese/tourn_print_school.mhtml:    my $garbage = `rm -f $filepath"."$filename.*`;
./select:./diocese/tourn_print_school.mhtml:	my $now = DateTime->now;
./select:./diocese/tourn_print_school.mhtml:	my @schools = sort {$a->name cmp $b->name} Tab::School->search( region => $region->id, tourn => $tourn->id );
./select:./diocese/tourn_print_school.mhtml:	foreach my $school (sort {$a->name cmp $b->name} @schools) { 
./select:./diocese/tourn_print_school.mhtml:		my @judges = $m->comp("/funclib/region_judges.mas", region => $region, tourn => $tourn, school => $school);
./select:./diocese/tourn_print_school.mhtml:		my @entries = $m->comp("/funclib/region_entries.mas", region => $region, tourn => $tourn, school => $school);
./select:./diocese/tourn_entries.mhtml:	my $tz = $tourn->tz;
./select:./diocese/tourn_entries.mhtml:	my $event = Tab::Event->retrieve($event_id) if $event_id;
./select:./diocese/tourn_entries.mhtml:	my $quota = $region->quota;
./select:./diocese/tourn_entries.mhtml:	my $max = $event->setting("max_entry") if $event;
./select:./diocese/tourn_entries.mhtml:	my $hide_codes = $tourn->setting("hide_codes");
./select:./diocese/tourn_entries.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./diocese/tourn_entries.mhtml:	my $entry_deadline = $tourn->reg_end->set_time_zone($tz);
./select:./diocese/tourn_entries.mhtml:	my $drop_deadline = $tourn->setting("drop_deadline");
./select:./diocese/tourn_entries.mhtml:%				my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $event);
./select:./diocese/tourn_entries.mhtml:%				my @schools = Tab::School->search(  region => $region->id, tourn => $tourn->id );
./select:./diocese/tourn_entries.mhtml:%					my @students = $entry->students if $entry;
./select:./diocese/tourn_entries.mhtml:				foreach my $oevent (sort {$a->name cmp $b->name} $tourn->events) { 
./select:./diocese/tourn_entries.mhtml:					my @entries = $m->comp("/funclib/region_entries.mas", region => $region, event => $oevent);
./select:./diocese/tournaments.mhtml:	my $tz = $person->tz;
./select:./diocese/tournaments.mhtml:	my @existing_tourns = Tab::Tourn->search_by_entered_tourn($region->id);
./select:./diocese/tournaments.mhtml:	my @open_tourns = Tab::Tourn->search_by_open_tourn($region->id);
./select:./diocese/access_add.mhtml:	my $region = Tab::Region->retrieve($region_id);
./select:./diocese/access_add.mhtml:	my $person = Tab::Person->search( email => $email )->first;
./select:./diocese/access_add.mhtml:	my $login = Tab::Login->search( username => $email )->first;
./select:./diocese/access_add.mhtml:	my $already = Tab::Permission->search( region => $region->id, tag => 'region', person => $person->id ) if $person;
./select:./diocese/access_add.mhtml:			my $admin = Tab::Permission->create({
./select:./judge/ballot_comments.mhtml:	my $ballot = Tab::Ballot->retrieve($ballot_id);
./select:./judge/ballot_comments.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/ballot_comments.mhtml:	my $already = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./select:./judge/hire.mhtml:	my @already = $m->comp("/funclib/person_judges.mas", person => $person);
./select:./judge/hire.mhtml:%			foreach my $tourn ($m->comp("/funclib/tourn_exchange.mas")) { 
./select:./judge/hire.mhtml:%				my $judge =  $judge_by_tourn{$tourn->id};
./select:./judge/i_am_aff.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/i_am_aff.mhtml:	my $err = "Sides all now agree.  Please re-enter your ballot now. <br/> ";
./select:./judge/i_am_aff.mhtml:	foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
./select:./judge/i_am_aff.mhtml:		my @ballots = Tab::Ballot->search( entry => $entry->id, panel => $panel->id );
./select:./judge/hire_save.mhtml:		my $judge = Tab::Judge->retrieve($already_id);
./select:./judge/hire_save.mhtml:			my $msg = "That judge category does not accept self-hire requests";
./select:./judge/hire_save.mhtml:		my $max = $judge->category->setting("max_rounds");
./select:./judge/hire_save.mhtml:		my $category = Tab::Category->retrieve($category_id);
./select:./judge/hire_save.mhtml:			my $msg = "That judge category does not accept self-hire requests";
./select:./judge/hire_save.mhtml:		my $max = $category->setting("max_rounds");
./select:./judge/hire_save.mhtml:		my $code = $m->comp("/funclib/category_code.mas", category => $category ) unless $category->setting("no_codes");
./select:./judge/hire_save.mhtml:		my $tz = $category->tourn->tz;
./select:./judge/hire_save.mhtml:		my $now = DateTime->now(time_zone => $tz);
./select:./judge/hire_save.mhtml:		my $judge = Tab::Judge->create({
./select:./judge/history.mhtml:%			foreach  my $judge (sort {$b->id <=> $a->id} $person->judges) { 
./select:./judge/history.mhtml:%				my $tourn = $judge->category->tourn;
./select:./judge/ballot_confirm.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/ballot_confirm.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/ballot_confirm.mhtml:    my @ballots = Tab::Ballot->search( panel => $panel->id, judge => $judge_id);
./select:./judge/ballot_confirm.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./select:./judge/ballot_confirm.mhtml:	my $event = $panel->round->event;
./select:./judge/ballot_confirm.mhtml:	my $type = $event->type;
./select:./judge/ballot_confirm.mhtml:	my $aff_string = $event->setting("aff_label");
./select:./judge/ballot_confirm.mhtml:	my $neg_string = $event->setting("neg_label");
./select:./judge/ballot_confirm.mhtml:		foreach my $ballot ($panel->ballots) { 
./select:./judge/ballot_confirm.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other);
./select:./judge/ballot_confirm.mhtml:%				my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $ojudge, noob => 1);
./select:./judge/ballot_confirm.mhtml:%		my $now = DateTime->now;
./select:./judge/rfd_only.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/rfd_only.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/rfd_only.mhtml:	my $category = $judge->category;
./select:./judge/rfd_only.mhtml:	my $round = $panel->round;
./select:./judge/rfd_only.mhtml:	my $wudc++ if $round->event->type eq "wudc";
./select:./judge/rfd_only.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./select:./judge/rfd_only.mhtml:	my $tourn = $category->tourn;
./select:./judge/rfd_only.mhtml:	my $event = $round->event;
./select:./judge/rfd_only.mhtml:	my $type = $event->type;
./select:./judge/rfd_only.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./select:./judge/rfd_only.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./select:./judge/rfd_only.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./select:./judge/rfd_only.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./select:./judge/rfd_only.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./select:./judge/rfd_only.mhtml:%		my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./select:./judge/rfd_only.mhtml:%		foreach my $ballot ($panel->ballots( judge => $judge_id)) { 
./select:./judge/rfd_only.mhtml:			my $entry = $ballot->entry;
./select:./judge/rfd_only.mhtml:			my $code = $entry->code;
./select:./judge/rfd_only.mhtml:				foreach my $student ($entry->students) { 
./select:./judge/rfd_only.mhtml:				my $title = Tab::Score->search( tag => "title", ballot => $ballot->id )->first;
./select:./judge/rfd_only.mhtml:%			my $comments = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./select:./judge/rfd_only.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./select:./judge/rfd_only.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./select:./judge/profile.mhtml:	my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./judge/tourn.mhtml:%	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./judge/tourn.mhtml:%	my @judges = $m->comp("/funclib/person_judges.mas", person => $person, tourn => $tourn);
./select:./judge/tourn.mhtml:%	my $now = DateTime->now;
./select:./judge/tourn.mhtml:%			my @upcoming =  $m->comp("/funclib/judge_panels.mas", judge => $judge, published => 1);
./select:./judge/tourn.mhtml:						my $round = $panel->round;
./select:./judge/tourn.mhtml:						my $event = $round->event;
./select:./judge/tourn.mhtml:						my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./select:./judge/tourn.mhtml:						my @ballots = $panel->ballots; 
./select:./judge/tourn.mhtml:						my $aff_string = $event->setting("aff_label");
./select:./judge/tourn.mhtml:						my $neg_string = $event->setting("neg_label");
./select:./judge/tourn.mhtml:%			my @done =  $m->comp("/funclib/judge_panels.mas", judge => $judge, post_results => 1);
./select:./judge/tourn.mhtml:%					my $event = $done->round->event;
./select:./judge/tourn.mhtml:%					my @entries = $m->comp('/funclib/panel_entries.mas', panel => $done);
./select:./judge/tourn.mhtml:%					my @scores = $m->comp('/funclib/panel_scores.mas', panel => $done, judge => $judge);
./select:./judge/tourn.mhtml:%								foreach my $student ($entry->students) { 
./select:./judge/tourn.mhtml:%									my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./select:./judge/tourn.mhtml:%											my ($winner, $side, $result) = $m->comp("/funclib/panel_winner.mas", panel => $done);
./select:./judge/wsdc_ballot.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/wsdc_ballot.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/wsdc_ballot.mhtml:	my $round = $panel->round;
./select:./judge/wsdc_ballot.mhtml:	my $event = $round->event;
./select:./judge/wsdc_ballot.mhtml:	my $category = $event->category;
./select:./judge/wsdc_ballot.mhtml:	my $tourn = $category->tourn;
./select:./judge/wsdc_ballot.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./select:./judge/wsdc_ballot.mhtml:	my $aff_string = $event->setting("aff_label");
./select:./judge/wsdc_ballot.mhtml:	my $neg_string = $event->setting("neg_label");
./select:./judge/wsdc_ballot.mhtml:	my $ballot_rules = $event->setting("ballot_rules");
./select:./judge/wsdc_ballot.mhtml:	my $type = $event->type;
./select:./judge/wsdc_ballot.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./select:./judge/wsdc_ballot.mhtml:		my $tz = $tourn->tz;
./select:./judge/wsdc_ballot.mhtml:		my $now = DateTime->now(time_zone => $tz);
./select:./judge/wsdc_ballot.mhtml:	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
./select:./judge/wsdc_ballot.mhtml:	my @panel_students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./select:./judge/wsdc_ballot.mhtml:	my $min_content_points = $event->setting("min_content_points");
./select:./judge/wsdc_ballot.mhtml:	my $max_content_points = $event->setting("max_content_points");
./select:./judge/wsdc_ballot.mhtml:	my $min_style_points = $event->setting("min_style_points");
./select:./judge/wsdc_ballot.mhtml:	my $max_style_points = $event->setting("max_style_points");
./select:./judge/wsdc_ballot.mhtml:	my $min_strategy_points = $event->setting("min_strategy_points");
./select:./judge/wsdc_ballot.mhtml:	my $max_strategy_points = $event->setting("max_strategy_points");
./select:./judge/wsdc_ballot.mhtml:	my $min_poi_points = $event->setting("min_poi_points");
./select:./judge/wsdc_ballot.mhtml:	my $max_poi_points = $event->setting("max_poi_points");
./select:./judge/wsdc_ballot.mhtml:	my $increments = $event->setting("point_increments");
./select:./judge/wsdc_ballot.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./select:./judge/wsdc_ballot.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./select:./judge/wsdc_ballot.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./select:./judge/wsdc_ballot.mhtml:%			my $entry = $ballot->entry;
./select:./judge/wsdc_ballot.mhtml:%			my @students = $entry->students;
./select:./judge/wsdc_ballot.mhtml:%					my $already = $ARGS{$position."_".$ballot->id."_student"};
./select:./judge/wsdc_ballot.mhtml:%			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./select:./judge/wsdc_ballot.mhtml:%				my $entry = $ballot->entry;
./select:./judge/wsdc_ballot.mhtml:%				my $code = $entry->code;
./select:./judge/wsdc_ballot.mhtml:%				my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./select:./judge/wsdc_ballot.mhtml:%						foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./judge/wsdc_ballot.mhtml:		my $point_scale = $event->setting("point_scale");
./select:./judge/wsdc_ballot.mhtml:		my $speech_times = $event->setting("speech_times");
./select:./judge/wsdc_ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./select:./judge/wsdc_ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./select:./judge/ballot_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/ballot_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/ballot_save.mhtml:    my @ballots = Tab::Ballot->search( judge => $judge->id, panel => $panel->id, audit => 0 );
./select:./judge/ballot_save.mhtml:        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
./select:./judge/ballot_save.mhtml:	my $round = $panel->round;
./select:./judge/ballot_save.mhtml:	my $event = $round->event;
./select:./judge/ballot_save.mhtml:	my $category = $event->category;
./select:./judge/ballot_save.mhtml:    my $tourn = $category->tourn;
./select:./judge/ballot_save.mhtml:    my $type = $event->type;
./select:./judge/ballot_save.mhtml:	my $aff_string = $event->setting("aff_label");
./select:./judge/ballot_save.mhtml:	my $neg_string = $event->setting("neg_label");
./select:./judge/ballot_save.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./select:./judge/ballot_save.mhtml:    my $tiebreaks = $round->tiebreak_set;
./select:./judge/ballot_save.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./select:./judge/ballot_save.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./select:./judge/ballot_save.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./select:./judge/ballot_save.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./select:./judge/ballot_save.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./select:./judge/ballot_save.mhtml:		my $entry = $ballot->entry;
./select:./judge/ballot_save.mhtml:			my @students = $entry->students;
./select:./judge/ballot_save.mhtml:			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first;
./select:./judge/ballot_save.mhtml:			my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./select:./judge/ballot_save.mhtml:			my $title = Tab::Score->search( tag => "title", ballot => $ballot->id )->first;
./select:./judge/ballot_save.mhtml:    foreach my $tb ($tiebreaks->tiebreaks) {
./select:./judge/ballot_save.mhtml:    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./select:./judge/ballot_save.mhtml:    my $tv++ if $type eq "speech" && $tiebreaks->setting("mfl_time_violation");
./select:./judge/ballot_save.mhtml:    my $forfeit++ if $type eq "speech" && $tiebreaks->setting("forfeits_never_break");
./select:./judge/ballot_save.mhtml:    my $max_points = $event->setting("max_points");
./select:./judge/ballot_save.mhtml:    my $min_points = $event->setting("min_points");
./select:./judge/ballot_save.mhtml:	my $max_ob_points = $event->setting("max_ob_points");
./select:./judge/ballot_save.mhtml:	my $min_ob_points = $event->setting("min_ob_points");
./select:./judge/ballot_save.mhtml:    my $point_increments = $event->setting("point_increments");
./select:./judge/ballot_save.mhtml:    my $point_ties = $event->setting("point_ties");
./select:./judge/ballot_save.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./select:./judge/ballot_save.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./select:./judge/ballot_save.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./select:./judge/ballot_save.mhtml:			my $side = $ARGS{$ballot->id."_side"};
./select:./judge/ballot_save.mhtml:		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./judge/ballot_save.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
./select:./judge/ballot_save.mhtml:    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
./select:./judge/ballot_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./select:./judge/ballot_save.mhtml:			my $rank = $ARGS{$student->id."_ranks"};
./select:./judge/ballot_save.mhtml:			my $rank = $ARGS{$ballot->id."_ranks"};
./select:./judge/ballot_save.mhtml:			my $points = $ARGS{$ballot->id."_points"};
./select:./judge/ballot_save.mhtml:			my $points = $ARGS{$student->id."_points"};
./select:./judge/ballot_save.mhtml:			my $winner_points = $entry_values{$winner->entry->id."_points"};
./select:./judge/ballot_save.mhtml:				my $bal_points = $entry_values{$ballot->entry->id."_points"};
./select:./judge/ballot_save.mhtml:				my $winner = Tab::Score->search({ ballot => $ballot->id, tag => "ballot"})->first;
./select:./judge/ballot_save.mhtml:					my $points = Tab::Score->search(ballot => $ballot->id, tag => "points")->first;
./select:./judge/ballot_save.mhtml:						my $points = Tab::Score->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;
./select:./judge/ballot_save.mhtml:					my $points = Tab::Score->search({ ballot => $ballot->id, tag => "points", student => $student->id})->first;
./select:./judge/ballot_save.mhtml:					my $ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./select:./judge/ballot_save.mhtml:					my $ranks = Tab::Score->search(ballot => $ballot->id, tag => "rank")->first;
./select:./judge/ballot_save.mhtml:						my $ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./select:./judge/ballot_save.mhtml:%								foreach my $student (@{$entry_students{$entry->id}}) { 
./select:./judge/ballot_save.mhtml:%					foreach my $student (@{$entry_students{$entry->id}}) { 
./select:./judge/conflict_school.mhtml:	my @already = Tab::Strike->search( judge => $judge_id, school => $school_id, registrant => 1, conflictee => 1 );
./select:./judge/conflict_school.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/conflict_school.mhtml:	my $tourn = $judge->category->tourn;
./select:./judge/wsdc_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/wsdc_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/wsdc_save.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id, audit => 0 );
./select:./judge/wsdc_save.mhtml:	my %ballot_by_id = map {$_->id => $_} @ballots;
./select:./judge/wsdc_save.mhtml:        my $err = "No unfinished ballots were found for that judge.  Either you were not judging in that room or you are trying to enter already-entered ballots.";
./select:./judge/wsdc_save.mhtml:	my $round = $panel->round;
./select:./judge/wsdc_save.mhtml:	my $event = $round->event;
./select:./judge/wsdc_save.mhtml:	my $category = $event->category;
./select:./judge/wsdc_save.mhtml:    my $tourn = $category->tourn;
./select:./judge/wsdc_save.mhtml:    my $type = $event->type;
./select:./judge/wsdc_save.mhtml:	my $aff_string = $event->setting("aff_label");
./select:./judge/wsdc_save.mhtml:	my $neg_string = $event->setting("neg_label");
./select:./judge/wsdc_save.mhtml:    my $tiebreaks = $round->tiebreak_set;
./select:./judge/wsdc_save.mhtml:		my $entry = $ballot->entry;
./select:./judge/wsdc_save.mhtml:			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballot->id )->first;
./select:./judge/wsdc_save.mhtml:			my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./select:./judge/wsdc_save.mhtml:    foreach my $tb ($tiebreaks->tiebreaks) {
./select:./judge/wsdc_save.mhtml:    my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./select:./judge/wsdc_save.mhtml:	my %student_by_id = map {$_->id => $_} @students;
./select:./judge/wsdc_save.mhtml:    my $min_content_points = $event->setting("min_content_points");
./select:./judge/wsdc_save.mhtml:    my $max_content_points = $event->setting("max_content_points");
./select:./judge/wsdc_save.mhtml:    my $min_style_points = $event->setting("min_style_points");
./select:./judge/wsdc_save.mhtml:    my $max_style_points = $event->setting("max_style_points");
./select:./judge/wsdc_save.mhtml:    my $min_strategy_points = $event->setting("min_strategy_points");
./select:./judge/wsdc_save.mhtml:    my $max_strategy_points = $event->setting("max_strategy_points");
./select:./judge/wsdc_save.mhtml:    my $min_poi_points = $event->setting("min_poi_points");
./select:./judge/wsdc_save.mhtml:    my $max_poi_points = $event->setting("max_poi_points");
./select:./judge/wsdc_save.mhtml:    my $point_increments = $event->setting("point_increments");
./select:./judge/wsdc_save.mhtml:    my $point_ties = $event->setting("point_ties");
./select:./judge/wsdc_save.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./select:./judge/wsdc_save.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./select:./judge/wsdc_save.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./select:./judge/wsdc_save.mhtml:			my $side = $ARGS{$ballot->id."_side"};
./select:./judge/wsdc_save.mhtml:		foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./judge/wsdc_save.mhtml:			my ($win, $winside) = $m->comp('/funclib/panel_winner.mas', panel => $panel, judge => $other_judge);
./select:./judge/wsdc_save.mhtml:    			my @ballots = Tab::Ballot->search(  judge => $other_judge->id, panel => $panel->id, audit => 0 );
./select:./judge/wsdc_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./select:./judge/wsdc_save.mhtml:			my $key = $position."_".$ballot->id."_student";
./select:./judge/wsdc_save.mhtml:			my $rank = $ARGS{$student->id."_ranks"};
./select:./judge/wsdc_save.mhtml:				my $student = $student_by_position{$ballot->id}{$position};
./select:./judge/wsdc_save.mhtml:					my $speech_string = ucfirst($category)." points for ".$student->first." ".$student->last;
./select:./judge/wsdc_save.mhtml:					my $ballot_points = $student_values{$student->id}{$tag};
./select:./judge/wsdc_save.mhtml:			my $winner_points = $ballot_points{$winner->id};
./select:./judge/wsdc_save.mhtml:				my $bal_points = $ballot_points{$ballot->id};
./select:./judge/wsdc_save.mhtml:				my $winner = Tab::Score->search({ ballot => $ballot->id, tag => "ballot"})->first;
./select:./judge/wsdc_save.mhtml:				my $student = $student_by_position{$ballot->id}{$position};
./select:./judge/wsdc_save.mhtml:					my $existing_points = Tab::Score->search({ 
./select:./judge/wsdc_save.mhtml:					my $existing_ranks = Tab::Score->search({ ballot => $ballot->id, tag => "rank", student => $student->id})->first;
./select:./judge/wsdc_save.mhtml:%					my $entry = $ballot->entry;
./select:./judge/wsdc_save.mhtml:%							my $student = $student_by_position{$ballot->id}{$position};
./select:./judge/hire_edit.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./judge/hire_edit.mhtml:	my $already = $m->comp("/funclib/person_judges.mas", person => $person, tourn => $tourn)->first;
./select:./judge/hire_edit.mhtml:%			my $max_rounds = $already->category->setting("max_rounds");
./select:./judge/hire_edit.mhtml:%			my $max_hires = $max_rounds - $already->obligation;
./select:./judge/hire_edit.mhtml:%			foreach my $hire ($already->hires) { 
./select:./judge/hire_edit.mhtml:%			foreach my $category ($m->comp("/funclib/category_exchange.mas", tourn => $tourn)) {
./select:./judge/hire_edit.mhtml:% 				my $max_rounds = $category->setting("max_rounds");
./select:./judge/rfd_only_save.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/rfd_only_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/rfd_only_save.mhtml:	my $round = $panel->round;
./select:./judge/rfd_only_save.mhtml:	my $wudc++ if $round->event->type eq "wudc";
./select:./judge/rfd_only_save.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./select:./judge/rfd_only_save.mhtml:	my $tourn = $judge->category->tourn;
./select:./judge/rfd_only_save.mhtml:	my $type = $round->event->type;
./select:./judge/rfd_only_save.mhtml:	foreach my $ballot ($panel->ballots( judge => $judge_id)) { 
./select:./judge/rfd_only_save.mhtml:		my $comments = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./select:./judge/rfd_only_save.mhtml:		my $new_comments = $ARGS{"comments_".$ballot->id};
./select:./judge/rfd_only_save.mhtml:		my $rfd = Tab::Score->search( ballot => $ballot->id, tag => "rfd")->first;
./select:./judge/hire_cancel.mhtml:	my $hire = Tab::JudgeHire->retrieve($hire_id);
./select:./judge/hire_cancel.mhtml:	my $judge = $hire->judge;
./select:./judge/hire_cancel.mhtml:	my $hired = $judge->hired - $hire->rounds;
./select:./judge/hire_cancel.mhtml:	my $description = "Account ".$person->email." deleted a judge exchange hire arrangement with ".$hire->school->name;
./select:./judge/hire_cancel.mhtml:	my $subject = "Judge ".$judge->first." ".$judge->last." rescinded your hire";
./select:./judge/hire_cancel.mhtml:	foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $hire->school->chapter)) { 
./select:./judge/conflict_tourn_rm.mhtml:	my $conflict = Tab::Strike->retrieve($conflict_id);
./select:./judge/conflict_tourn_rm.mhtml:	my $judge = $conflict->judge;
./select:./judge/conflict_tourn_rm.mhtml:	my $msg = "Conflict against ".$conflict->entry->name." removed" if $conflict->type eq "conflict" && $conflict->entry;
./select:./judge/wudc_save.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/wudc_save.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/wudc_save.mhtml:	my $round = $panel->round;
./select:./judge/wudc_save.mhtml:	my $tz = $round->event->tourn->tz;
./select:./judge/wudc_save.mhtml:	my $now = DateTime->now( time_zone => $tz );
./select:./judge/wudc_save.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./select:./judge/wudc_save.mhtml:    my $type = $panel->round->event->type;
./select:./judge/wudc_save.mhtml:    my $tiebreaks = $panel->round->tiebreak_set;
./select:./judge/wudc_save.mhtml:	my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
./select:./judge/wudc_save.mhtml:	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);
./select:./judge/wudc_save.mhtml:			my $value = Tab::Score->search( ballot => $ballot->id, tag => "ballot" )->first;
./select:./judge/wudc_save.mhtml:		my $result_set = Tab::ResultSet->search( event => $round->event->id, bracket => 1)->first;
./select:./judge/wudc_save.mhtml:		my $result = Tab::Result->search( entry => $champ, round => $round->id, result_set => $result_set->id)->first;
./select:./judge/wudc_save.mhtml:		my $tourn = $judge->category->tourn;
./select:./judge/wudc_save.mhtml:		my @students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./select:./judge/wudc_save.mhtml:		my $max_points = $panel->round->event->setting("max_points");
./select:./judge/wudc_save.mhtml:		my $min_points = $panel->round->event->setting("min_points");
./select:./judge/wudc_save.mhtml:		my $point_increments = $panel->round->event->setting("point_increments");
./select:./judge/wudc_save.mhtml:		my $point_ties = $panel->round->event->setting("point_ties");
./select:./judge/wudc_save.mhtml:			my $points = $ARGS{$student->id."_points"};
./select:./judge/wudc_save.mhtml:			my @entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;
./select:./judge/wudc_save.mhtml:%						foreach my $student ($entry->students) { 
./select:./judge/conflict_entry.mhtml:	my @already = Tab::Strike->search( judge => $judge_id, entry => $entry_id, registrant => 1, conflictee => 1);
./select:./judge/conflict_entry.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/conflict_entry.mhtml:	my $tourn = $judge->category->tourn;
./select:./judge/index.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/index.mhtml:		my $name = $person->last;
./select:./judge/index.mhtml:	my @judges = $person->judges unless $judge;
./select:./judge/index.mhtml:	my $now = DateTime->now;
./select:./judge/index.mhtml:%			my $category = $judge->category;
./select:./judge/index.mhtml:%			my $tourn = $category->tourn;
./select:./judge/index.mhtml:%			my $tz = $tourn->tz;  
./select:./judge/index.mhtml:%			my $start = $tourn->start->set_time_zone($tz);
./select:./judge/index.mhtml:%			my $end = $tourn->end->set_time_zone($tz);
./select:./judge/conflict_rm.mhtml:	my $conflict = Tab::Conflict->retrieve($conflict_id);
./select:./judge/conflict_rm.mhtml:	my $msg = "Conflict against ".$conflict->conflicted->last." removed" if $conflict->conflicted;
./select:./judge/claim.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./judge/claim.mhtml:		foreach my $admin ($m->comp("/funclib/chapter_admins.mas", chapter => $cj->chapter)) { 
./select:./judge/claim.mhtml:		my $subject = "[TabRoom] ". $person->email." requests access to judge ".$cj->first." ".$cj->last;
./select:./judge/claim.mhtml:		my $body = "The Tabroom user \n\n".$person->first." ".$person->last." (".$person->email.") \n";
./select:./judge/claim.mhtml:		my $msg = "You have requested access to the judge ".$cj->first." ".$cj->last." from the team coaches.";
./select:./judge/claim.mhtml:		my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/claim.mhtml:		foreach my $admin ($m->comp("/funclib/tourn_admins.mas", admin => 1, tourn => $judge->category->tourn)) { 
./select:./judge/claim.mhtml:		my $msg = "You have requested access to the judge ".$judge->first." ".$judge->last." from the tournament administrators.";
./select:./judge/paradigm_save.mhtml:	my $tz = $person->tz;
./select:./judge/paradigm_save.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./judge/paradigm_save.mhtml:		my $scrubber = HTML::Scrubber->new( style => 1, allow => [ qw[ p b i u hr br ol ul li strong] ] );
./select:./judge/paradigm_save.mhtml:		my $text = $scrubber->scrub($paradigm);
./select:./judge/ballot_comments_save.mhtml:	my $ballot = Tab::Ballot->retrieve($ballot_id);
./select:./judge/ballot_comments_save.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/ballot_comments_save.mhtml:	my $already = Tab::Score->search( ballot => $ballot->id, tag => "comments")->first;
./select:./judge/diverse_switch.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/ballot.mhtml:	my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/ballot.mhtml:	my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/ballot.mhtml:	my $round = $panel->round;
./select:./judge/ballot.mhtml:	my $event = $round->event;
./select:./judge/ballot.mhtml:	my $category = $event->category;
./select:./judge/ballot.mhtml:	my $tourn = $category->tourn;
./select:./judge/ballot.mhtml:	my $no_lpw++ if $event->setting("no_lpw");
./select:./judge/ballot.mhtml:	my $allow_lowpoints++ if $event->setting("allow_lowpoints");
./select:./judge/ballot.mhtml:	my $aff_string = $event->setting("aff_label");
./select:./judge/ballot.mhtml:	my $neg_string = $event->setting("neg_label");
./select:./judge/ballot.mhtml:	my $ballot_rules = $event->setting("ballot_rules");
./select:./judge/ballot.mhtml:	my $ballot_entry_name = $category->setting("ballot_entry_names");
./select:./judge/ballot.mhtml:	my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./select:./judge/ballot.mhtml:	my $ballot_entry_title = $category->setting("ballot_entry_titles");
./select:./judge/ballot.mhtml:	my $ballot_school_code = $category->setting("ballot_school_codes");
./select:./judge/ballot.mhtml:	my $ballot_school_name = $category->setting("ballot_school_names");
./select:./judge/ballot.mhtml:	my $type = $event->type;
./select:./judge/ballot.mhtml:	my @ballots = sort {$a->side <=> $b->side} Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./select:./judge/ballot.mhtml:		my $tz = $tourn->tz;
./select:./judge/ballot.mhtml:		my $now = DateTime->now(time_zone => $tz);
./select:./judge/ballot.mhtml:	foreach my $tb ($round->tiebreak_set->tiebreaks) { 
./select:./judge/ballot.mhtml:	my $team_points++ if $event->setting("team_points");
./select:./judge/ballot.mhtml:	my @panel_students = $m->comp('/funclib/panel_students.mas', panel => $panel);
./select:./judge/ballot.mhtml:	my $tv++ if $type eq "speech" && $round->tiebreak_set->setting("mfl_time_violation");
./select:./judge/ballot.mhtml:	my $forfeit++ if $type eq "speech" && $round->tiebreak_set->setting("forfeits_never_break");
./select:./judge/ballot.mhtml:	my $max_points = $event->setting("max_points");
./select:./judge/ballot.mhtml:	my $min_points = $event->setting("min_points");
./select:./judge/ballot.mhtml:	my $max_ob_points = $event->setting("max_ob_points");
./select:./judge/ballot.mhtml:	my $min_ob_points = $event->setting("min_ob_points");
./select:./judge/ballot.mhtml:	my $increments = $event->setting("point_increments");
./select:./judge/ballot.mhtml:	my $no_side_constraints++ if $event->setting('no_side_constraints');
./select:./judge/ballot.mhtml:    my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./select:./judge/ballot.mhtml:	my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./select:./judge/ballot.mhtml:%				my $entry = $ballot->entry;
./select:./judge/ballot.mhtml:%				my @students = $entry->students;
./select:./judge/ballot.mhtml:%				my @doubled = $m->comp("/funclib/entry_double.mas", entry => $entry, round => $round);
./select:./judge/ballot.mhtml:%							foreach my $student ($entry->students) { 
./select:./judge/ballot.mhtml:%						my $ballot_title = Tab::Score->search( tag => "title", ballot => $ballot->id)->first;
./select:./judge/ballot.mhtml:%						my $title = $ballot_title->content if $ballot_title;
./select:./judge/ballot.mhtml:%			my $rfd = Tab::Score->search( tag => "rfd", ballot => $ballots[0]->id )->first if @ballots;
./select:./judge/ballot.mhtml:				my $entry = $ballot->entry;
./select:./judge/ballot.mhtml:				my $code = $entry->code;
./select:./judge/ballot.mhtml:					foreach my $student ($entry->students) { 
./select:./judge/ballot.mhtml:%				my $comments = Tab::Score->search( tag => "comments", ballot => $ballot->id )->first;
./select:./judge/ballot.mhtml:%					foreach my $other_judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) { 
./select:./judge/ballot.mhtml:		my $point_scale = $event->setting("point_scale");
./select:./judge/ballot.mhtml:		my $speech_times = $event->setting("speech_times");
./select:./judge/ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person)) { 
./select:./judge/ballot.mhtml:%			foreach my $opanel ($m->comp("/funclib/person_panels.mas", person => $person, done => 1)) { 
./select:./judge/conflicts.mhtml:		my $other = Tab::Person->retrieve($other_id);
./select:./judge/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, conflicted => $other_id );
./select:./judge/conflicts.mhtml:		my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./judge/conflicts.mhtml:			my @already = Tab::Conflict->search( person => $person->id, chapter => $chapter_id );
./select:./judge/conflicts.mhtml:	my @existings = Tab::Conflict->search( person => $person->id );
./select:./judge/conflicts.mhtml:%			my @nowjudges = $m->comp("/funclib/person_judges.mas", person => $person, future => 1, conflictable => 1);
./select:./judge/conflicts.mhtml:%					my @students = Tab::Student->search( person => $other->id );
./select:./judge/conflicts.mhtml:%					my @chapter_judges = Tab::ChapterJudge->search( person => $other->id );
./select:./judge/conflicts.mhtml:%					my @cjs = $existing->conflicted->chapter_judges;
./select:./judge/conflicts.mhtml:%					my @students = $existing->conflicted->students;
./select:./judge/conflicts.mhtml:%				my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/conflicts.mhtml:%					foreach my $conflict (Tab::Strike->search( judge => $judge_id, registrant => 1, conflictee => 1 )) { 
./select:./judge/conflicts.mhtml:%					foreach my $event ($judge->category->events) { 
./select:./judge/conflicts.mhtml:%									foreach my $entry (sort {$a->code cmp $b->code} $event->entries) {
./select:./judge/conflicts.mhtml:%										my $schname = substr($entry->school->short_name,0,8);
./select:./judge/conflicts.mhtml:%								foreach my $school (sort {$a->name cmp $b->name} $judge->category->tourn->schools) { 
./select:./judge/search.mhtml:	my @cjs = Tab::ChapterJudge->search_like( first => $first."%", last => $last."%", person => 0 );
./select:./judge/search.mhtml:	my @judges = Tab::Judge->search_person_judges($first."%", $last."%");
./select:./judge/panels.mhtml:%	my @ballot_panels = $m->comp("/funclib/person_panels.mas", person => $person);
./select:./judge/panels.mhtml:%	my @list_panels = $m->comp("/funclib/person_panels.mas", person => $person, listonly => 1);
./select:./judge/panels.mhtml:%	my @done_panels = $m->comp("/funclib/person_panels.mas", person => $person, done => 1);
./select:./judge/panels.mhtml:			my $round = $panel->round;
./select:./judge/panels.mhtml:	   		my $no_side_constraints++ if $round->event->setting('no_side_constraints');
./select:./judge/panels.mhtml:			my $sidelocks++ if ($round->type eq "elim" || $round->type eq "final") && not defined $no_side_constraints;
./select:./judge/panels.mhtml:			my $locked =  $m->comp("/funclib/round_elim_dueaff.mas", panel => $panel) if $sidelocks;
./select:./judge/panels.mhtml:			my $tz = $round->event->tourn->tz;
./select:./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($panel->judge);
./select:./judge/panels.mhtml:			my $tourn = $judge->category->tourn;
./select:./judge/panels.mhtml:			my $event = $round->event;
./select:./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./select:./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./select:./judge/panels.mhtml:			my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./select:./judge/panels.mhtml:			my @scores = $m->comp('/funclib/panel_scores.mas', panel => $panel, judge => $judge);
./select:./judge/panels.mhtml:			my @ballots = $panel->ballots; 
./select:./judge/panels.mhtml:%					my $start = $round->start_time;
./select:./judge/panels.mhtml:%						foreach my $entry (sort {$a->speaks <=> $b->speaks} @entries) { 
./select:./judge/panels.mhtml:			my $round = $panel->round;
./select:./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($panel->judge);
./select:./judge/panels.mhtml:			my $tourn = $judge->category->tourn;
./select:./judge/panels.mhtml:			my $event = $round->event;
./select:./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./select:./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./select:./judge/panels.mhtml:			my @entries = sort {$a->side <=> $b->side} $m->comp('/funclib/panel_entries.mas', panel => $panel);
./select:./judge/panels.mhtml:			my $key = $round->id."-".$panel->flight;
./select:./judge/panels.mhtml:			my $round = $done->round;
./select:./judge/panels.mhtml:			my $event = $round->event;
./select:./judge/panels.mhtml:			my $category = $event->category;
./select:./judge/panels.mhtml:			my $judge = Tab::Judge->retrieve($done->judge) if $done->judge;
./select:./judge/panels.mhtml:			my @entries = $m->comp('/funclib/panel_entries.mas', panel => $done);
./select:./judge/panels.mhtml:			my @scores = $m->comp('/funclib/panel_scores.mas', panel => $done, judge => $judge);
./select:./judge/panels.mhtml:			my $aff_string = $event->setting("aff_label");
./select:./judge/panels.mhtml:			my $neg_string = $event->setting("neg_label");
./select:./judge/panels.mhtml:			my $ballot_entry_name = $category->setting("ballot_entry_names");
./select:./judge/panels.mhtml:			my $ballot_entry_first_name = $category->setting("ballot_entry_first_names");
./select:./judge/panels.mhtml:			my $ballot_entry_title = $category->setting("ballot_entry_titles");
./select:./judge/panels.mhtml:			my $ballot_school_code = $category->setting("ballot_school_codes");
./select:./judge/panels.mhtml:			my $ballot_school_name = $category->setting("ballot_school_names");
./select:./judge/panels.mhtml:%								foreach my $student ($entry->students) { 
./select:./judge/panels.mhtml:%							my $title = Tab::Score->search( ballot => $entry->ballot, tag => "title")->first;
./select:./judge/panels.mhtml:%							foreach my $student ($entry->students) { 
./select:./judge/panels.mhtml:%								my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./select:./judge/panels.mhtml:%									foreach my $student ($entry->students) { 
./select:./judge/panels.mhtml:%										my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./select:./judge/menu.mas:%			foreach my $cj ($person->chapter_judges) { 
./select:./judge/menu.mas:%			foreach my $judge (sort {$b->id <=> $a->id} $person->judges) { 
./select:./judge/re_confirm.mhtml:    my $panel = Tab::Panel->retrieve($panel_id);
./select:./judge/re_confirm.mhtml:    my $judge = Tab::Judge->retrieve($judge_id);
./select:./judge/re_confirm.mhtml:    my @ballots = Tab::Ballot->search(  judge => $judge->id, panel => $panel->id );
./select:./judge/re_confirm.mhtml:	my @entries = $m->comp('/funclib/panel_entries.mas', panel => $panel);
./select:./judge/re_confirm.mhtml:	my @scores = $m->comp('/funclib/panel_scores.mas', panel => $panel, judge => $judge);
./select:./judge/re_confirm.mhtml:	my $round = $panel->round;
./select:./judge/re_confirm.mhtml:	my $event = $round->event;
./select:./judge/re_confirm.mhtml:	my $aff_string = $event->setting("aff_label");
./select:./judge/re_confirm.mhtml:	my $neg_string = $event->setting("neg_label");
./select:./judge/re_confirm.mhtml:%					foreach my $student ($entry->students) { 
./select:./judge/re_confirm.mhtml:%						my @scores = @{$scores_by_recipient{$student->id}} if $student->id && $scores_by_recipient{$student->id};
./select:./chapter/judge_retire.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./chapter/judge_retire.mhtml:	my $chapter = $chapter_judge->chapter;
./select:./chapter/ndt_bid_honors.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./chapter/ndt_bid_honors.mhtml:	my ($start_dt, $end_dt) = $m->comp("/funclib/seasonal_date_range.mas");			
./select:./chapter/ndt_bid_honors.mhtml:	my @tourneys = Tab::Tourn->search_tourn;
./select:./chapter/ndt_bid_honors.mhtml:	my @honors = Tab::Result->search_honors;
./select:./chapter/chapter_welcome.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/students.mhtml:		my @chapters = $person->chapters;
./select:./chapter/students.mhtml:    my @student_requests = Tab::Student->search_where({ 
./select:./chapter/ndt_honors_save.mas:	my @result_sets = Tab::ResultSet->search( tourn => $tourn_id, label => 'ndt_honors' );
./select:./chapter/ndt_honors_save.mas:		my $obj = Tab::ResultSet->insert(\%hash);
./select:./chapter/ndt_honors_save.mas:	my %hash2 = ( student => $student_id, result_set => $result_sets[0]->id, honor => $honor );
./select:./chapter/ndt_honors_save.mas:	my $obj2 = Tab::Result->insert(\%hash2);
./select:./chapter/import_csv_students.mhtml:	my $chapter =  Tab::Chapter->retrieve($chapter_id);
./select:./chapter/import_csv_students.mhtml:	my $tz = $person->tz;
./select:./chapter/import_csv_students.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./chapter/import_csv_students.mhtml:	my $req = Apache2::Request->new($r);
./select:./chapter/import_csv_students.mhtml:	my @csv_handles = $r->upload; 
./select:./chapter/import_csv_students.mhtml:	my $csv_file = $req->upload($csv_handles[0]);
./select:./chapter/import_csv_students.mhtml:		my $err = "No students imported.  You must upload a CSV file, not an Excel or other file.  <br /> <br /> Save the file in Excel as Comma-Separated Values and try again.  File type: ".$csv_file->type;
./select:./chapter/import_csv_students.mhtml:	my $io = $csv_file->io;
./select:./chapter/import_csv_students.mhtml:	my $msg = scalar @students ." students imported into ". $chapter->name;
./select:./chapter/admin_rm.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/admin_rm.mhtml:	my $coach = Tab::Person->retrieve($coach_id); 
./select:./chapter/admin_rm.mhtml:    my @acc = Tab::Permission->search( person => $person->id, chapter => $chapter_id);
./select:./chapter/admin_rm.mhtml:        my $err = "You are not authorized to edit ". $chapter->name ;
./select:./chapter/admin_rm.mhtml:	my @ca = Tab::Permission->search( person => $coach_id, chapter => $chapter->id);
./select:./chapter/admin_rm.mhtml:	my $msg = $coach->first." ".$coach->last." has been removed from ". $chapter->name;	
./select:./chapter/settings.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/settings.mhtml:	my @regions = $m->comp("/funclib/chapter_regions.mas", chapter => $chapter);
./select:./chapter/settings.mhtml:	my %region_yes = map {$_->id => 1} @regions;
./select:./chapter/settings.mhtml:%						foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) { 
./select:./chapter/settings.mhtml:%							foreach my $region ($ns->circuit->regions) { 
./select:./chapter/settings.mhtml:%		foreach my $permission ($chapter->permissions) { 
./select:./chapter/settings.mhtml:%			my $coach = $permission->person;
./select:./chapter/student_search.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/student_search.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./chapter/student_search.mhtml:	my ($stud_acc) = Tab::Person->search( email => $email );
./select:./chapter/student_search.mhtml:	my ($exists) = Tab::Student->search( chapter => $chapter->id, person => $stud_acc->id);
./select:./chapter/student_search.mhtml:		my $err = $email ." is already on your roster as ".$exists->first." ".$exists->last."\n";
./select:./chapter/student_search.mhtml:		my $now = DateTime->now;
./select:./chapter/student_search.mhtml:		my $grad_year = $now->year + 4;
./select:./chapter/student_search.mhtml:	my $body = $person->first." ".$person->last." (".$person->email.") has added you on the Tabroom.com system to the team roster for ".$chapter->name."\n";
./select:./chapter/student_search.mhtml:	my $subject = "[TabRoom] Added to the ".$chapter->name." team roster";
./select:./chapter/student_search.mhtml:	my $msg = "Student ".$student->first." ".$student->last." added to your roster.  The student has been notified by email.";
./select:./chapter/prefs.mhtml:	my $access = Tab::Permission->search( person => $person, chapter => $chapter_id)->first;
./select:./chapter/prefs.mhtml:	my $tz = $person->tz;
./select:./chapter/prefs.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/prefs.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./chapter/prefs.mhtml:	my $now_string = DateTime::Format::MySQL->format_datetime($now);
./select:./chapter/prefs.mhtml:	my @entered_tourns = Tab::Tourn->search_by_entered_tourn($chapter->id, $now_string);
./select:./chapter/prefs.mhtml:		foreach my $category ($tourn->categories) { 
./select:./chapter/prefs.mhtml:			my $strike_start = $category->setting("strike_start");
./select:./chapter/prefs.mhtml:			my $strike_end = $category->setting("strike_end");
./select:./chapter/prefs.mhtml:%						my $school = Tab::School->search( chapter => $chapter->id, tourn => $et->id)->first;
./select:./chapter/deny.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./chapter/deny.mhtml:		my $msg = $cj->person_request->email." has been denied access to the judge ".$cj->first." ".$cj->last;
./select:./chapter/deny.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./chapter/deny.mhtml:		my $msg = $student->person_request->email." has been denied access to the student ".$student->first." ".$student->last;
./select:./chapter/import_csv.mhtml:        my @chapters = $person->chapters;
./select:./chapter/dedupe.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/dedupe.mhtml:	foreach my $student ($chapter->students) { 
./select:./chapter/ndt_honors_delete.mas:	my $obj = Tab::Result->retrieve($record_id);
./select:./chapter/student_unlink.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./chapter/student_unlink.mhtml:	my $chapter = $student->chapter;
./select:./chapter/student_unlink.mhtml:	my $msg = "Student ".$student->first." ".$student->last." was unlinked from the account ".$student->person->email;
./select:./chapter/circuits.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/circuits.mhtml:	my @ljs = sort {$a->circuit->name cmp $b->circuit->name} $chapter->chapter_circuits;
./select:./chapter/circuits.mhtml:%					my $circuit = $lj->circuit;
./select:./chapter/circuits.mhtml:%					foreach my $circuit (sort {$a->name cmp $b->name} Tab::Circuit->search( active => 1 )) {  
./select:./chapter/tourn_register.mhtml:	my $tourn = Tab::Tourn->retrieve($tourn_id);
./select:./chapter/tourn_register.mhtml:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./select:./chapter/tourn_register.mhtml:		my $school = Tab::School->search( chapter => $chapters[0]->id, tourn => $tourn->id )->first;
./select:./chapter/student_novice.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./chapter/student_novice.mhtml:	my $chapter = $student->chapter;
./select:./chapter/student_novice.mhtml:	my $msg = "Student ".$student->first." ".$student->last." novice status changed ";
./select:./chapter/no_interest.mhtml:	my $nope = Tab::TournIgnore->create({
./select:./chapter/judge_edit.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id) if $chapter_judge_id;
./select:./chapter/judge_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./chapter/judge_edit.mhtml:%				my @recents = Tab::Judge->search_where(
./select:./chapter/circuit_join.mhtml:	my $circuit = Tab::Circuit->retrieve($circuit_id);
./select:./chapter/circuit_join.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id); 
./select:./chapter/circuit_join.mhtml:	my @cls = Tab::ChapterCircuit->search( chapter => $chapter->id, circuit => $circuit->id );
./select:./chapter/circuit_join.mhtml:	my @memberships = $circuit->circuit_memberships;
./select:./chapter/circuit_join.mhtml:	my @regions = $circuit->regions if $circuit->setting("region_based");
./select:./chapter/circuit_join.mhtml:		my $cl = Tab::ChapterCircuit->create({
./select:./chapter/circuit_join.mhtml:		my $msg = "You can now register for tournaments in ".$circuit->name;
./select:./chapter/circuit_join.mhtml:			my $cl = Tab::ChapterCircuit->create({
./select:./chapter/circuit_join.mhtml:			my $msg = "You are now a member of ".$circuit->name;
./select:./chapter/circuit_join.mhtml:%					foreach my $region ($circuit->regions) { 
./select:./chapter/judge_unlink.mhtml:	my $chapter_judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./chapter/judge_unlink.mhtml:	my $chapter = $chapter_judge->chapter;
./select:./chapter/judge_unlink.mhtml:	my $msg = "Judge ".$chapter_judge->first." ".$chapter_judge->last." was unlinked from the account ".$chapter_judge->person->email;
./select:./chapter/dedupe_judges.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/dedupe_judges.mhtml:	foreach my $judge ($chapter->chapter_judges) { 
./select:./chapter/judges.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/judges.mhtml:	my @judge_requests = Tab::ChapterJudge->search_where({ 
./select:./chapter/admin_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./select:./chapter/admin_save.mhtml:	foreach my $permission ($chapter->permissions) { 
./select:./chapter/admin_save.mhtml:		my $admin = Tab::Person->search( email => $email)->first;
./select:./chapter/admin_save.mhtml:			my @already_chapters = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "chapter" });
./select:./chapter/admin_save.mhtml:			my @already_prefs = Tab::Permission->search({ chapter => $chapter, person => $admin, tag => "prefs" });
./select:./chapter/student_retire.mhtml:	my $student = Tab::Student->retrieve($student_id);
./select:./chapter/student_retire.mhtml:	my $chapter = $student->chapter;
./select:./chapter/student_retire.mhtml:	my $retired = $student->retired;
./select:./chapter/student_retire.mhtml:	my $msg = $student->first." ".$student->last." ";
./select:./chapter/diet_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/diet_save.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students( retired => 0 );
./select:./chapter/diet_save.mhtml:	my @judges = sort {$a->last cmp $b->last} $chapter->chapter_judges( retired => 0 );
./select:./chapter/judge_save.mhtml:	my $now = DateTime->now;
./select:./chapter/judge_save.mhtml:		my $chapter_judge_school = $chapter_judge->chapter;
./select:./chapter/judge_save.mhtml:		my $chapter_judge_school_id = $chapter_judge_school->id;
./select:./chapter/judge_save.mhtml:		my @acc = Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $chapter_judge_school_id );
./select:./chapter/tabbar.mas:	my @student_requests = Tab::Student->search_where( {chapter => $chapter->id, person_request => {'>', 0}});
./select:./chapter/tabbar.mas:	my @judge_requests = Tab::ChapterJudge->search_where( {chapter => $chapter->id, person_request => {'>', 0}});
./select:./chapter/index.mhtml:		my @chapters = $m->comp('/funclib/person_chapters.mas', person => $person);
./select:./chapter/auth.mas:	my @access = Tab::Permission->search( tag => "chapter", chapter => $chapter->id, person => $person->id );
./select:./chapter/auth.mas:	my $err = "You are not authorized to make changes to ".$chapter->name;
./select:./chapter/save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./chapter/save.mhtml:				my $region = Tab::Region->retrieve($naudl_league);
./select:./chapter/save.mhtml:				my $circuit = $region->circuit if $region;
./select:./chapter/save.mhtml:						my $membership = Tab::ChapterCircuit->search( circuit => $circuit->id, chapter => $chapter_id)->first;
./select:./chapter/save.mhtml:				foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./select:./chapter/save.mhtml:					my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./select:./chapter/save.mhtml:			foreach my $ns (Tab::CircuitSetting->search( tag => "naudl")) {
./select:./chapter/save.mhtml:				my $membership = Tab::ChapterCircuit->search( circuit => $ns->circuit->id, chapter => $chapter_id)->first;
./select:./chapter/save.mhtml:			my @chapters = Tab::Chapter->search_where( name => { "like", $name."%"}, country => $country, state => $state );
./select:./chapter/save.mhtml:		my $chapter_access = Tab::Permission->create({
./select:./chapter/student_save.mhtml:	my $now = DateTime->now;
./select:./chapter/student_save.mhtml:		my $now_year = $now->year;
./select:./chapter/student_save.mhtml:		my $now_year = $now->year;
./select:./chapter/student_save.mhtml:		my $student_school = $student->chapter;
./select:./chapter/student_save.mhtml:		my $student_school_id = $student_school->id if $student_school;
./select:./chapter/student_save.mhtml:		my @acc = Tab::Permission->search( tag => "chapter", person => $person->id, chapter => $student_school_id );
./select:./chapter/dues_receipt.mhtml:	my $payment = Tab::Dues->retrieve($payment_id);
./select:./chapter/dues_receipt.mhtml:	my $chapter = $payment->chapter;
./select:./chapter/dues_receipt.mhtml:	my $circuit = $payment->circuit;
./select:./chapter/dues_receipt.mhtml:	my $filename = "dues-receipt-".$payment_id."-".$session->id;
./select:./chapter/dues_receipt.mhtml:	my $filepath = "files/".$circuit->id."/invoices";
./select:./chapter/dues_receipt.mhtml:	my $garbage = `mkdir -p $Tab::file_root/$filepath`;
./select:./chapter/dues_receipt.mhtml:    my $now = DateTime->now;
./select:./chapter/dues_receipt.mhtml:	my $message = $circuit->invoice_message;
./select:./chapter/judge_search.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/judge_search.mhtml:	my $judge = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./chapter/judge_search.mhtml:	my ($judge_acc) = Tab::Person->search( email => $email );
./select:./chapter/judge_search.mhtml:	my ($exists) = Tab::ChapterJudge->search( chapter => $chapter->id, person => $judge_acc->id);
./select:./chapter/judge_search.mhtml:		my $err = $email ." is already on your roster as ".$exists->first." ".$exists->last."\n";
./select:./chapter/judge_search.mhtml:		my $now = DateTime->now;
./select:./chapter/judge_search.mhtml:	my $body = $person->first." ".$person->last." (".$person->email.") has added you on the Tabroom system to the team roster for ".$chapter->name."\n";
./select:./chapter/judge_search.mhtml:	my $subject = "[TabRoom] Added to the ".$chapter->name." team roster";
./select:./chapter/dedupe_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/dedupe_save.mhtml:	foreach my $student ($chapter->students) { 
./select:./chapter/dedupe_save.mhtml:		my $msg = "$count students de-duplicated.";
./select:./chapter/circuit_leave.mhtml:	my $lj = Tab::ChapterCircuit->retrieve($lj_id); 
./select:./chapter/circuit_leave.mhtml:	my $chapter = $lj->chapter;
./select:./chapter/circuit_leave.mhtml:	my $circuit = $lj->circuit;
./select:./chapter/circuit_leave.mhtml:	my $msg = "You have left the circuit ".$circuit->name;
./select:./chapter/import_csv_judges.mhtml:	my $chapter =  Tab::Chapter->retrieve($chapter_id);
./select:./chapter/import_csv_judges.mhtml:	my $tz = $person->tz;
./select:./chapter/import_csv_judges.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./chapter/import_csv_judges.mhtml:	my $req = Apache2::Request->new($r);
./select:./chapter/import_csv_judges.mhtml:	my @csv_handles = $r->upload; 
./select:./chapter/import_csv_judges.mhtml:	my $csv_file = $req->upload($csv_handles[0]);
./select:./chapter/import_csv_judges.mhtml:		my $err = "No students imported.  You must upload a CSV file, not an Excel or other file.  <br /> <br /> Save the file in Excel as Comma-Separated Values and try again";
./select:./chapter/import_csv_judges.mhtml:	my $io = $csv_file->io;
./select:./chapter/import_csv_judges.mhtml:	my $msg = scalar @judges ." judges imported into ". $chapter->name;
./select:./chapter/permit.mhtml:		my $cj = Tab::ChapterJudge->retrieve($chapter_judge_id);
./select:./chapter/permit.mhtml:		my @judges = $cj->judges;
./select:./chapter/permit.mhtml:		my $msg = $cj->person->email." now has access to the judge ".$cj->first." ".$cj->last;
./select:./chapter/permit.mhtml:		my $student = Tab::Student->retrieve($student_id);
./select:./chapter/permit.mhtml:		my $msg = $student->person->email." now has access to the student ".$student->first." ".$student->last;
./select:./chapter/diets.mhtml:	my $now = DateTime->now();
./select:./chapter/diets.mhtml:	my $year = $now->year;
./select:./chapter/diets.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/diets.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students;
./select:./chapter/diets.mhtml:	my @judges = sort {$a->last cmp $b->last} $chapter->chapter_judges;
./select:./chapter/dedupe_judges_save.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/dedupe_judges_save.mhtml:	$m->print($person->email." is my email");
./select:./chapter/dedupe_judges_save.mhtml:	foreach my $judge ($chapter->chapter_judges) { 
./select:./chapter/dedupe_judges_save.mhtml:		my $person_id = $dest->person->id if $dest->person;
./select:./chapter/dedupe_judges_save.mhtml:		my $retired = $dest->retired;
./select:./chapter/dedupe_judges_save.mhtml:	my $msg = "$count judges de-duplicated.";
./select:./chapter/student_edit.mhtml:	my $student = Tab::Student->retrieve($student_id) if $student_id;
./select:./chapter/student_edit.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;
./select:./chapter/student_edit.mhtml:	my @circuits = $chapter->circuits;
./select:./chapter/student_edit.mhtml:	foreach my $circuit ($chapter->circuits) { 
./select:./chapter/student_edit.mhtml:	my $tz = $person->tz if $person;
./select:./chapter/student_edit.mhtml:	my $now = DateTime->now(time_zone => $tz);
./select:./chapter/student_edit.mhtml:	my $then = $now->clone;
./select:./chapter/student_edit.mhtml:	my @students = Tab::Student->search_where({
./select:./chapter/student_edit.mhtml:%					my $race = $student->race if $student;
./select:./chapter/students_csv.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/students_csv.mhtml:	foreach my $admin ($chapter->admins) { 
./select:./chapter/students_csv.mhtml:    my $filename = $chapter->name."-StudentRoster";
./select:./chapter/students_csv.mhtml:	my @students = sort {$a->last cmp $b->last} $chapter->students;
./select:./chapter/students_csv.mhtml:	foreach my $student (sort {$b->grad_year <=> $a->grad_year} @students) { 
./select:./chapter/tournaments.mhtml:	my $access = Tab::Permission->search( person => $person, chapter => $chapter_id)->first;
./select:./chapter/tournaments.mhtml:	my $tz = $person->tz;
./select:./chapter/tournaments.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./chapter/tournaments.mhtml:	my $now = DateTime->now;
./select:./chapter/tournaments.mhtml:	my $search_start = $now->clone;
./select:./chapter/tournaments.mhtml:	my $search_start_string = DateTime::Format::MySQL->format_datetime($search_start);
./select:./chapter/tournaments.mhtml:	my $now_string = DateTime::Format::MySQL->format_datetime($now);
./select:./chapter/tournaments.mhtml:	my @existing_tourns = Tab::Tourn->search_by_entered_tourn($chapter->id, $search_start_string);
./select:./chapter/tournaments.mhtml:	my @open_tourns = Tab::Tourn->search_by_open_tourn($chapter->id, $now_string, $now_string);
./select:./chapter/tournaments.mhtml:%							my $sch = Tab::School->search(tourn => $et->id, chapter => $chapter_id)->first;
./select:./chapter/tournaments.mhtml:%									my $onsite_starts = $et->setting("onsite_starts");
./select:./chapter/tournaments.mhtml:%									my $onsite_ends = $et->setting("onsite_ends");
./select:./chapter/tournaments.mhtml:%					foreach my $circuit ($m->comp('/funclib/chapter_circuits.mas', chapter => $chapter)) { 
./select:./chapter/tournaments.mhtml:%						my $now = DateTime->now(time_zone => $tz);
./select:./chapter/tournaments.mhtml:%						my @tourns = $m->comp("/funclib/circuit_tourns.mas", circuit => $circuit, future => 1);
./select:./results/online_ballots_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./results/online_ballots_print.mhtml:	my $tourn = $school->tourn;
./select:./results/online_ballots_print.mhtml:	my @ballots = Tab::Ballot->search_school_ballots($school_id);
./select:./results/online_ballots_print.mhtml:    my $now = DateTime->now;    
./select:./results/online_ballots_print.mhtml:    my $name = $tourn->name."-".$school->short_name;
./select:./results/online_ballots_print.mhtml:    my $filename = "Ballots-$name-".$session->id;
./select:./results/online_ballots_print.mhtml:		my $panel = $ballot->panel;
./select:./results/online_ballots_print.mhtml:		my $judge = $ballot->judge;
./select:./results/online_ballots_print.mhtml:		my @values = sort {$a->tag cmp $b->tag} $ballot->scores;
./select:./results/online_ballots_print.mhtml:		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
./select:./results/online_ballots_print.mhtml:		my $aff_string = $panel->round->event->setting("aff_string");
./select:./results/online_ballots_print.mhtml:		my $neg_string = $panel->round->event->setting("neg_string");
./select:./results/online_ballots_print.mhtml:		foreach my $value (sort {$a->student <=> $b->student} @values) { 
./select:./results/online_ballots_print.mhtml:		my $strip = HTML::Strip->new();
./select:./results/report.mhtml:	my $tourn = $school->tourn;
./select:./results/report.mhtml:	my @results = $m->comp('/funclib/school_results.mas', school => $school);
./select:./results/report.mhtml:	my @result_values = $m->comp('/funclib/school_result_values.mas', school => $school);
./select:./results/report.mhtml:%			my @values = @{$values_by_result{$result->id}} if $values_by_result{$result->id};
./select:./results/report.mhtml:%				my $result_set = $result->result_set;
./select:./results/report.mhtml:%						my $tag = $value->tag;
./select:./results/report.mhtml:%						my $ballots = $value->value;
./select:./results/tourn.mhtml:	my $tourn = $school->tourn;
./select:./results/tourn.mhtml:	my @entries = $m->comp("/funclib/tourn_entries.mas", tourn => $tourn);
./select:./results/tourn.mhtml:	my @judges = $m->comp("/funclib/tourn_judges.mas", tourn => $tourn);
./select:./results/tourn.mhtml:	my @schools = $tourn->schools;
./select:./results/export_prefs.mhtml:	my $entry = Tab::Entry->retrieve($entry_id);
./select:./results/export_prefs.mhtml:	my $event = $entry->event;
./select:./results/export_prefs.mhtml:	my $category = $event->category;
./select:./results/export_prefs.mhtml:	my $tourn = $category->tourn;
./select:./results/export_prefs.mhtml:	my $style = $category->setting("prefs");
./select:./results/export_prefs.mhtml:	my $now = DateTime->now;
./select:./results/export_prefs.mhtml:	my $tz = $tourn->tz;
./select:./results/export_prefs.mhtml:    my %rating_name = map {$_->id => $_->name} $category->rating_tiers;
./select:./results/export_prefs.mhtml:	my $coach_ratings = $category->setting("coach_ratings");
./select:./results/export_prefs.mhtml:    foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "coach")) { 
./select:./results/export_prefs.mhtml:		foreach my $rating ($m->comp("/funclib/category_ratings.mas", category => $category, type => "entry", entry => $entry)) { 
./select:./results/export_prefs.mhtml:		my @ratings = Tab::Rating->search( entry => $entry->id, type => "entry", ordinal => 0);
./select:./results/export_prefs.mhtml:	my @conflicts = $m->comp("/funclib/entry_conflicts.mas", entry => $entry);
./select:./results/export_prefs.mhtml:	my @sch_conflicts = $m->comp("/funclib/school_conflicts.mas", school => $entry->school);
./select:./results/export_prefs.mhtml:	my @judges = Tab::Judge->search( category => $category->id, active => 1 );
./select:./results/export_prefs.mhtml:	my $filename = "Prefs-".$entry->name."-".Tab::csvdt($now);
./select:./results/export_prefs.mhtml:	my $garbage = `rm -f $filepath.*`;
./select:./results/roster.mhtml:	my $tourn = $school->tourn;
./select:./results/roster.mhtml:	my $tz = $tourn->tz;
./select:./results/roster.mhtml:%		foreach my $event ($m->comp("/funclib/school_events.mas", school => $school)) { 
./select:./results/roster.mhtml:% 			my @entries = Tab::Entry->search( event => $event->id, school => $school->id );
./select:./results/roster.mhtml:%			my @hybrids = $m->comp("/funclib/school_hybrids.mas", event => $event, school => $school);
./select:./results/roster.mhtml:%						my $dropped_at = $entry->setting("dropped_at");
./select:./results/roster.mhtml:%						foreach my $student ($entry->students) { 
./select:./results/roster.mhtml:%						my $dropped_at = $entry->setting("dropped_at");
./select:./results/roster.mhtml:%						foreach my $student ($entry->students) { 
./select:./results/roster.mhtml:%		foreach my $judge ($school->judges) { 
./select:./results/roster.mhtml:%			my $category = $judge->category;
./select:./results/roster.mhtml:%					my @panels = $m->comp("/funclib/judge_panels.mas", judge => $judge);
./select:./results/report_print.mhtml:	my $tourn = $school->tourn;
./select:./results/report_print.mhtml:	my @results = $m->comp('/funclib/school_results.mas', school => $school);
./select:./results/report_print.mhtml:	my @result_values = $m->comp('/funclib/school_result_values.mas', school => $school);
./select:./results/report_print.mhtml:    my $now = DateTime->now;    
./select:./results/report_print.mhtml:    my $name = $tourn->name."-".$school->short_name;
./select:./results/report_print.mhtml:    my $filename = "Results-$name-".$session->id;
./select:./results/report_print.mhtml:	foreach my $result (sort {$a->result_set <=> $b->result_set} @results) { 
./select:./results/report_print.mhtml:		my @values = @{$values_by_result{$result->id}};
./select:./results/report_print.mhtml:		my $label = $result->result_set->label;
./select:./results/report_print.mhtml:			my $ballots = $value->value;
./select:./results/autohandler:	my $school = Tab::School->retrieve($school_id) if $school_id;
./select:./results/autohandler:	my $chapter = $school->chapter if $school;
./select:./results/autohandler:	my $coach = Tab::Permission->search( tag => "chapter", chapter => $chapter->id, person => $person->id )->first;
./select:./results/competed_against.mhtml:	my @others = Tab::Chapter->search_competed_against( $chapter_id );
./select:./results/competed_against.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./results/index.mhtml:	my $now = DateTime->now;
./select:./results/index.mhtml:	my $chapter = Tab::Chapter->retrieve($chapter_id);
./select:./results/index.mhtml:%			foreach my $tourn (sort {$b->start->epoch <=> $a->start->epoch} @published) { 
./select:./results/index.mhtml:%					my $school = Tab::School->search( chapter => $chapter->id, tourn => $tourn->id)->first;
./select:./results/index.mhtml:%						foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) { 
./select:./results/invoice_print.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./results/invoice_print.mhtml:	my $school_name = $school->name;
./select:./results/invoice_print.mhtml:	my $tourn_name = $tourn->name;
./select:./results/invoice_print.mhtml:	my $filename = "Invoice-".$school_name."-".$tourn_name."-".$session->id;
./select:./results/invoice_print.mhtml:	my $garbage = `rm -f $filepath.*`;
./select:./results/menu.mas:	my $tourn =  $school->tourn;
./select:./results/menu.mas:	my $tz = $tourn->tz;
./select:./results/menu.mas:	my @rounds = $m->comp('/funclib/tourn_round_results.mas', tourn => $tourn);
./select:./results/menu.mas:	my @results = $m->comp('/funclib/tourn_result_sets.mas', tourn => $tourn);
./select:./results/menu.mas:	my @events = sort {$a->name cmp $b->name} $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
./select:./results/menu.mas:	foreach my $category ($tourn->categories) { 
./select:./results/online_ballots.mhtml:	my $school = Tab::School->retrieve($school_id);
./select:./results/online_ballots.mhtml:	my @rfds = Tab::Score->search_school_rfds($school_id);
./select:./results/online_ballots.mhtml:%			my @other_values = sort {$a->tag cmp $b->tag} $rfd->ballot->scores;
./select:./results/online_ballots.mhtml:%			my @entries = $m->comp("/funclib/panel_entries.mas", panel => $rfd->ballot->panel);
./select:./results/online_ballots.mhtml:%			my $aff_string = $current_entry->event->setting('aff_string');
./select:./results/online_ballots.mhtml:%			my $neg_string = $current_entry->event->setting('neg_string');
./select:./results/online_ballots.mhtml:%					foreach my $other (sort {$a->student <=> $b->student} @other_values) { 
./select:./home.mhtml:	my $dbh = Tab::DBI->db_Main();
./select:./home.mhtml:	my $sth = $dbh->prepare("
./select:./home.mhtml:	my $missing = $sth->fetchrow_array();
./select:./home.mhtml:	my @entries = $m->comp("/funclib/person_entries.mas", person => $person);
./select:./home.mhtml:	my @entry_panels = $m->comp("/funclib/person_entry_panels.mas", person => $person) if @entries;
./select:./home.mhtml:	my @judges = $m->comp("/funclib/person_judges.mas", person => $person);
./select:./home.mhtml:	my @panels = $m->comp("/funclib/person_panels.mas", person => $person) if @judges;
./select:./home.mhtml:	my @students = Tab::Student->search( person => $person->id );
./select:./home.mhtml:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./select:./menu.mas:	my $tz = $person->tz if $person;
./select:./menu.mas:	my @all_tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./select:./menu.mas:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person);
./select:./menu.mas:	my @entries = $m->comp("/funclib/person_entries.mas", person => $person);
./select:./menu.mas:	my @allentries = $m->comp("/funclib/person_entries.mas", person => $person, all => 1);
./select:./menu.mas:	my @pref_chapters = $m->comp("/funclib/person_chapters.mas", person => $person, prefs => "yes");
./select:./menu.mas:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./select:./menu.mas:	my @regions = $m->comp("/funclib/person_regions.mas", person => $person);
./select:./menu.mas:	my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./select:./menu.mas:	my @nowjudges = $m->comp("/funclib/person_judges.mas", person => $person, current => 1);
./select:./menu.mas:	my @alljudges = $m->comp("/funclib/person_judges.mas", person => $person, all => 1);
./select:./menu.mas:	my @all_chapter_judges = $person->chapter_judges;
./select:./menu.mas:	my $now = DateTime->now;
./select:./menu.mas:	my $year = $now->year;
./select:./menu.mas:	my $limit = $year."-07-01 00:00:00";
./select:./menu.mas:	my @partners = Tab::Student->search_by_ndt($person->id);
./select:./menu.mas:				my $tourn_start = $entry->event->tourn->start;
./select:./menu.mas:				my $tourn_end = $entry->event->tourn->end;
./select:./menu.mas:				my $prefs_due = $entry->event->category->setting("strike_end");
./select:./menu.mas:				my $prefs_start = $entry->event->category->setting("strike_start");
./select:./menu.mas:%			foreach my $student ($person->students) { 
./menu.mas:	my $tz = $person->tz if $person;
./menu.mas:	my @all_tourns = $m->comp("/funclib/person_tourns.mas", person => $person, all => 1);
./menu.mas:	my @tourns = $m->comp("/funclib/person_tourns.mas", person => $person);
./menu.mas:	my @entries = $m->comp("/funclib/person_entries.mas", person => $person);
./menu.mas:	my @allentries = $m->comp("/funclib/person_entries.mas", person => $person, all => 1);
./menu.mas:	my @pref_chapters = $m->comp("/funclib/person_chapters.mas", person => $person, prefs => "yes");
./menu.mas:	my @chapters = $m->comp("/funclib/person_chapters.mas", person => $person);
./menu.mas:	my @regions = $m->comp("/funclib/person_regions.mas", person => $person);
./menu.mas:	my @circuits = $m->comp("/funclib/person_circuits.mas", person => $person);
./menu.mas:	my @nowjudges = $m->comp("/funclib/person_judges.mas", person => $person, current => 1);
./menu.mas:	my @alljudges = $m->comp("/funclib/person_judges.mas", person => $person, all => 1);
./menu.mas:	my @all_chapter_judges = $person->chapter_judges;
./menu.mas:	my $now = DateTime->now;
./menu.mas:	my $year = $now->year;
./menu.mas:	my $limit = $year."-07-01 00:00:00";
./menu.mas:	my @partners = Tab::Student->search_by_ndt($person->id);
./menu.mas:%				foreach my $ochapter (@chapters) { 
./menu.mas:%				foreach my $ochapter (@pref_chapters) { 
./menu.mas:%				foreach my $oregion (@regions) { 
./menu.mas:%			foreach my $tourn (@tourns) { 
./menu.mas:%				foreach my $circuit (@circuits) { 
./menu.mas:%		foreach my $partner (@partners) { 
./menu.mas:%			foreach my $entry (@entries) { 
./menu.mas:				my $tourn_start = $entry->event->tourn->start;
./menu.mas:				my $tourn_end = $entry->event->tourn->end;
./menu.mas:				my $date_string .= Tab::niceshortdate($tourn_start);
./menu.mas:				my $prefs_due = $entry->event->category->setting("strike_end");
./menu.mas:				my $prefs_start = $entry->event->category->setting("strike_start");
./menu.mas:				my $pref_string;
./menu.mas:%			foreach my $student ($person->students) { 
