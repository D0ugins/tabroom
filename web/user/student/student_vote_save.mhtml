<%args>
	$person
	$voter_id => undef
	$panel_id => undef
</%args>
<%init>

	my $chamber = Tab::Panel->retrieve($panel_id) if $panel_id;
	my $voter = Tab::Entry->retrieve($voter_id) if $voter_id;

	$m->abort unless $chamber && $voter;

	my $truncate = $chamber->round->event->setting('student_truncate_fill');

	my @entries = $m->comp("/funclib/panel_entries.mas", panel => $chamber);
	$truncate = scalar @entries unless $truncate;

	my %taken;
	my $errs;

	my @all_votes = Tab::StudentVote->search(
		panel => $chamber->id,
		voter => $voter->id,
		tag   => "rank"
	);

	my $tourn = $chamber->round->event->tourn;

	my %votes = map {$_->entry->id => $_} @all_votes;
	my $now = DateTime->now(time_zone => $tourn->tz);
	my $max_rank = $truncate;

	foreach my $entry (@entries) {

		my $rank = $ARGS{$entry->id};

		if ($taken{$rank}) {

			$errs = "You have repeated the rank $rank. ";
			if ($votes{$entry->id}) {
				if ($truncate) {
					$votes{$entry->id}->value($truncate);
					$votes{$entry->id}->update();
				} else {
					$votes{$entry->id}->delete();
				}
			}

		} else {

			$rank = $truncate unless $rank;

			if ($votes{$entry->id}) {
				$votes{$entry->id}->value($rank);
				$votes{$entry->id}->entered_by($person->id);
				$votes{$entry->id}->entered_at($now);
				$votes{$entry->id}->update();
			} else {

				Tab::StudentVote->create({
					tag        => "rank",
					value      => $rank,
					panel      => $chamber->id,
					entry      => $entry->id,
					voter      => $voter->id,
					entered_by => $person->id,
					entered_at => $now
				});
			}

			$taken{$rank}++ unless $rank == $truncate;
			$max_rank = $rank if $rank > $max_rank;
		}
	}

	my $err;

	foreach my $step (1 .. $max_rank) {
		next if $step == $truncate;
		$errs .= "You did not rank anyone ".$step." <br />" unless $taken{$step};
	}

	my $msg = "Competitor ballot saved for ".$voter->code unless $errs;

	$m->redirect("student_vote.mhtml?panel_id=".$chamber->id."&entry_id=".$voter->id."&err=$errs&msg=$msg");

</%init>
