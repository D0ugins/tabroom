<%args>
	$tourn_id
	$student_id
	$person
	$session
	$perms
</%args>
<%init>

	my $student = Tab::Student->retrieve($student_id);
	my $tourn = Tab::Tourn->retrieve($tourn_id);

	my $chapter = $student->chapter;

	unless (
		$student->person->id == $person->id
		|| $perms->{"chapter"}{$chapter->id} eq "chapter"
		|| $person->site_admin 
	) { 

		$m->comp("/funclib/abort.mas", 
			warning => "You can only see your own records and ballots"
		);
	}

	my @entries = $m->comp("/funclib/student_entries.mas", 
		student => $student,
		tourn   => $tourn
	);

    my $scrubber = HTML::Scrubber->new( allow => [ qw[ p strong b i u hr br ol ul li] ] );

    my $now = DateTime->now;    
    $now->set_time_zone($tourn->tz);

    my $name = $tourn->name."-".$student->last;
    $name =~ s/[\W_]//g;

    my $filename = "Ballots-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;
    `rm -f $filepath.*`; 
    
    $m->comp("/funclib/printout.mas", 
		tourn    => $tourn,
		filename => $filename,
		head     => 1
	);

    open (TEXOUT, ">>$filepath.tex");
    
	my $current_entry;

	my $switch;

	print TEXOUT "\\noindent\n";
	print TEXOUT "\\LARGE ".$tourn->name."\n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\textsb{\\large Results report for ".$student->first." ".$student->middle." ".$student->last." }\n";
	print TEXOUT "\\raggedright\n";
	print TEXOUT "\\strut\n";

	print TEXOUT "\\normalsize\n";

	foreach my $entry (@entries) { 

		return unless $entry && $entry->id;

		my $event = $entry->event;

		my $no_side_constraints++ if $event->setting('no_side_constraints');

		my @panels = $m->comp("/funclib/entry_panels.mas", entry => $entry);

		my $tz = $tourn->tz;
		$tz = "UTC" unless $tz;
		my $tzname = Tab::tzname($tz);

		my $aff_string = $event->setting("aff_label");
		my $neg_string = $event->setting("neg_label");

		$aff_string = "Aff" unless $aff_string;
		$neg_string = "Neg" unless $neg_string;

		my $show_paradigms;

		$show_paradigms++ unless (
			$event->type eq "speech"
			|| $event->type eq "congress"
		);

		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\textsb{\\large ".Tab::texify($event->abbr).": ".Tab::texify($entry->code) ." }\n";
		print TEXOUT "\\newline\n";

		foreach my $panel (@panels) { 

			print TEXOUT "\\makebox[7in]{\\hrulefill}\n";
			print TEXOUT "\\nopagebreak\n";

			my $round = $panel->round;
			next unless $round->post_results > 0;

		    my $start = $round->start_time;

		    $start = $round->timeslot->start unless $start;

		    $start->set_time_zone($tz);

			my $sidelocks++ 
				if $round->type eq "elim" 
				&& (not defined $no_side_constraints);

			undef $sidelocks 
				if $tourn->setting("nsda_nats") 
				&& (not defined $event->setting("not_nats"));
						
			my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

			my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

			my %scores;
			my %students;

			foreach my $ballot ($m->comp(
				"/funclib/entry_ballots.mas", 
					entry => $entry,
					round => $round
				)
			) { 

				$scores{"bye"}++ if $ballot->bye;

				$scores{"forfeit"}++ if $ballot->forfeit;

				foreach my $score ($ballot->scores) { 

					if ($score->tag eq "ballot") { 

						$scores{"winloss"}{$ballot->judge->id} = "W" if $score->value == 1;
						$scores{"winloss"}{$ballot->judge->id} = "L" if $score->value != 1;

					} elsif ($score->student > 0) { 

						$students{$score->student->id}++;
						$scores{$score->tag}{$score->student->id}{$ballot->judge->id} = $score->value;

					} elsif ($score->tag eq "congress_speech") { 

						push @{$scores{$score->tag}{$ballot->judge->id}}, $score->value;

					} else { 

						$scores{$score->tag}{$ballot->judge->id} = $score->content;

					}

				}

			}

			print TEXOUT "\\parbox{1in}{ \\raggedright ";
			print TEXOUT "\\textsb{".Tab::texify($round->realname)."}\n";

			if ($event->type eq "speech") { 

				print TEXOUT "\\hspace{2mm}\n";
				print TEXOUT "Spoke ".Lingua::EN::Numbers::Ordinate::ordinate($panel->pos);

			} elsif ($event->type eq "wudc") { 

				print TEXOUT "\\hspace{2mm}\n";
				print TEXOUT "Position ";

				if ($panel->pos == 1 ){
					print TEXOUT Tab::texify("1st Gov");
				} elsif ($panel->pos == 2 ){
					print TEXOUT Tab::texify("1st Opp");
				} elsif ($panel->pos == 3 ){
					print TEXOUT Tab::texify("2nd Gov");
				} elsif ($panel->pos == 4 ){
					print TEXOUT Tab::texify("2nd Opp");
				}


			} elsif ($event->type eq "congress") { 

			} else { 

				print TEXOUT "\\hspace{2mm}\n";

				if ($panel->bye eq "Bye") { 
					print TEXOUT "Bye";
				} else { 

					if ($panel->side == 1) { 
						print TEXOUT Tab::texify($aff_string);
					} else {
						print TEXOUT Tab::texify($neg_string);
					}

				}

			}

			print TEXOUT " } \n";

			if ($event->type ne "speech" && $event->type ne "congress") { 

				print TEXOUT "\\hspace{2mm}\n";

				print TEXOUT "\\parbox[t]{2in}{\n";
				
				my $notfirst;
				foreach my $opp (@entries) { 
					next if $entry->id == $opp->id;
					print TEXOUT "\\newline\n" if $notfirst++;
					print TEXOUT "\\truncate{1.95in}{\\small ".Tab::texify($opp->code)."}\n";
				}

				print TEXOUT " } \n";

			}

			my $notfirst;

			foreach my $judge (@judges) { 

				if ($notfirst++) { 
					print TEXOUT "\\makebox[7in]{\\dotfill}\n\n";
					print TEXOUT "\\hspace{2.5in}\n";
				}
		
				print TEXOUT "\\parbox[t]{1.5in}{\n";
				print TEXOUT "\\truncate{1.45in}{\n";
				print TEXOUT Tab::texify($judge->first." ".$judge->last);
				print TEXOUT "} \n";
				print TEXOUT "{\\newline \\small \\truncate{1.45in}{".Tab::texify($judge->school->short_name)." } }" if $judge->school > 0;
				print TEXOUT "} \n";
				print TEXOUT "\\hspace{.05in}\n";
				print TEXOUT "\\nopagebreak\n";

				if ($scores{"bye"}) { 

					print TEXOUT "BYE ";
					print TEXOUT "\\hspace{.15in}\n";

				} elsif ($scores{"forfeit"}) { 

					print TEXOUT "FFT  ";
					print TEXOUT "\\hspace{.15in}\n";

				} else { 
				
					if ($scores{"winloss"}{$judge->id}) { 
						print TEXOUT $scores{"winloss"}{$judge->id}." \\hspace{.25in} ";
						print TEXOUT "\\hspace{.15in}\n";
					}

				}

				if ($round->post_results >= 2) {

					if ($scores{"rank"}{$judge->id}) { 
						print TEXOUT "Rank ".Tab::texify($scores{"rank"}{$judge->id});
						print TEXOUT "\\hspace{.15in}\n";
					}

					if ($scores{"congress_speech"}{$judge->id}) { 
						my $notfirst;
						print TEXOUT "Speeches ";
						foreach my $score (@{$scores{"congress_speech"}{$judge->id}}) { 
							print TEXOUT Tab::texify(", ") if $notfirst++;
							print TEXOUT Tab::texify($score);
						}
					}


					if ($scores{"points"}{$judge->id}) { 
						print TEXOUT Tab::texify($scores{"points"}{$judge->id});
					}

					my $num_students = scalar(keys %students);

					if ($num_students > 0) { 

						print TEXOUT "\\parbox[t]{1.5in}{\\footnotesize \n";

						my $notfirst;

						foreach my $student_id (sort keys %students) { 

							print TEXOUT "\\newline\n" if $notfirst++;
							my $student = Tab::Student->retrieve($student_id);

							if ($num_students > 1) { 
								print TEXOUT "\\parbox{.8in}{\n";
								print TEXOUT "\\truncate{.75in}{";
								print TEXOUT Tab::texify($student->last.", ".$student->first).":}} ";
							}

							if ($scores{"rank"}{$student_id}{$judge->id}) { 
								print TEXOUT "Rk: ".Tab::texify($scores{"rank"}{$student_id}{$judge->id});
								print TEXOUT "\\hspace{.1in}\n";
							}

							if ($scores{"points"}{$student_id}{$judge->id}) { 
								print TEXOUT "Pts: ".Tab::texify($scores{"points"}{$student_id}{$judge->id});
								print TEXOUT "\\hspace{.1in}\n";
							}

							if ($scores{"rebuttal_points"}{$student_id}{$judge->id}) { 
								print TEXOUT "Reply: ".Tab::texify($scores{"rebuttal_points"}{$student_id}{$judge->id});
								print TEXOUT "\\hspace{.1in}\n";
							}


						}

						print TEXOUT "}\n";
					}
				}

				print TEXOUT "\\medskip\n";
				print TEXOUT "\\newline\n";

				if ($scores{"rfd"}{$judge->id}) { 
					print TEXOUT "\\nopagebreak\n";
					print TEXOUT "\\parbox[t]{.75in}{\\textsb{\\footnotesize RFD: }}\n";
					print TEXOUT "\\parbox[t]{5.6in}{\\footnotesize \n";
					print TEXOUT "\\setlength{\\parskip}{.5em}\n";
					print TEXOUT "{\\setstretch{1.1}\n";
					print TEXOUT "\\raggedright\n";
					print TEXOUT $m->comp("/funclib/print_format.mas", message => $scores{"rfd"}{$judge->id});
					print TEXOUT "}} \\hfill \n";
					print TEXOUT "\\bigskip\n";
					print TEXOUT "\\newline\n";
				} 

				if ($scores{"comments"}{$judge->id}) { 
					print TEXOUT "\\nopagebreak\n";
					print TEXOUT "\\parbox[t]{.75in}{\\textsb{\\footnotesize Comments: }}\n";
					print TEXOUT "\\parbox[t]{5.6in}{\\footnotesize \n";
					print TEXOUT "\\setlength{\\parskip}{.5em}\n";
					print TEXOUT "{\\setstretch{1.1}\n";
					print TEXOUT "\\raggedright\n";
					print TEXOUT $m->comp("/funclib/print_format.mas", message => $scores{"comments"}{$judge->id});
					print TEXOUT "}} \\hfill \n";
					print TEXOUT "\\medskip\n";
					print TEXOUT "\\newline\n";
				} 

			}

			unless (@judges) { 
				print TEXOUT "\\smallskip\n";
				print TEXOUT "\\newline\n";
			}

		}
			
		print TEXOUT "\\makebox[7in]{\\hrulefill}\n\n";
	}

    $m->comp("/funclib/printout.mas", 
		tourn    => $tourn,
		filename => $filename,
		tail     => 1,
		debug    => 1
	);

</%init>

