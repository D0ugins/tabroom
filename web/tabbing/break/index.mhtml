<%args>
	$tourn
	$perms
	$tourn_settings
	$person
	$from_id       => undef
	$event_id      => undef
	$preset_id     => undef
	$only_category => undef
	$breakout      => undef
</%args>
<%init>

	my $event;
	my $round;

	$event = Tab::Event->retrieve($event_id) if $event_id;
	$round = Tab::Round->retrieve($from_id)  if $from_id;

	if ($event && (not defined $round)) {

		my @done_rounds = $m->comp(
			"/funclib/event_rounds.mas",
			event => $event,
			done  => "yes"
		);

		if ($breakout) { 
			my @clean;

			ROUND:
			foreach my $round (@done_rounds) { 
				Tab::debuglog("Round is ".$round->realname);
				if ($round->type eq "elim" || $round->type eq "final") { 
					my $round_breakout = $round->setting("use_for_breakout");
					next ROUND unless $round_breakout;
					next ROUND if $round_breakout && $round_breakout != $breakout;
				}
				push @clean, $round;
			}
			@done_rounds = @clean;
		}

		$round = $done_rounds[0]
			if @done_rounds
			&& (not defined $round);

	} elsif ($round && (not defined ($event))) {
		$event = $round->event();
	}

	my $preset;

	if ($preset_id && $preset_id ne "new") {

		$preset = Tab::Round->retrieve($preset_id);

	} elsif ($event && not defined $preset_id) {

		my @empties_rounds = $m->comp(
			"/funclib/event_rounds.mas",
			event   => $event,
			empties => "yes"
		);

		$preset = shift @empties_rounds if @empties_rounds;
	}

	$breakout = $preset->setting("use_for_breakout") if $preset && (not defined $breakout);

	undef $breakout if $breakout eq "nomas";

	my $breakout_label = $event->setting("breakout_".$breakout."_label") if $breakout;

	if ($event && (not defined $round)) {

		my @rounds = $m->comp(
			"/funclib/event_rounds.mas",
			event    => $event,
			done     => "yes",
			breakout => $breakout
		)  if $event;
		$round = shift @rounds if @rounds;
	}

	my %entry_ballots = $m->comp(
		"/funclib/round_ballot_strings.mas",
		round => $round
	) if $round;

	my @ineligibles = $m->comp(
		"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "no_elims"
		);

	my %ineligible = map {$_->entry->id => $_->value} @ineligibles;

	my $advance_target;
	my $target_count;

</%init>


	<div class="main">

		<& "/funclib/tablesorter.mas", table => "breaks" &>

%		if ($round) {

<%perl>

			Tab::debuglog("Breakout is $breakout");

			my @results = $m->comp(
				"/tabbing/results/order_entries.mas",
					round    => $round,
					breakout => $breakout
				);

			my $results_ref = pop @results if @results;

			my $equal_elims++
				if $round->tiebreak_set->setting('equal_elims')
				&& $round->type eq "elim";

			my $round_robin++
		   		if $event->setting('round_robin')
				&& $round->type ne "elim"
				&& $round->type ne "final"
				&& $round->type ne "runoff";
</%perl>

            <div>

                <span class="pagehalf">
					<h4>Break from <% $round->realname %> of <% $round->event->abbr %></h4>
                </span>

                <span class="third rightalign smallish">
					Hover mouse over codes to see scores
                </span>

                <span
					id    = "breaks_buttonarea"
					class = "sixth rightalign"
				>
                </span>

            </div>

%			if ($tourn_settings->{"nsda_district"} && $round && $round->type eq "prelim") {

%				$advance_target = Math::Round::nearest(1, (scalar($event->entries(active => 1))) * .25);

				<div class="full nospace semibold bluetext marbottom">
					<span class="half centeralign">
						<% scalar($event->entries(active => 1)) %> active entries
					</span>

					<span class="half centeralign">
						Target to advance: <% $advance_target %>
					</span>
				</div>
%			}

			<div class="noscroll">

			<table id="breaks">

				<thead>

					<tr class="yellowrow">

						<th class="smallish">
							#
						</th>

						<th class="smallish">
							Code
						</th>

%                       if ($equal_elims) {
                            <th class="smaller" title="Rank within room">
                                SectRk
                            </th>
                            <th class="smaller" title="Room/section">
                                Sect
                            </th>
%                       }  elsif ($round_robin) {
                            <th class="smaller" title="Rank within Pod">
                                PodRk
                            </th>
                            <th class="smaller" title="Pod">
                                Pod
                            </th>
%                       }

%						foreach my $key (sort {$a <=> $b} keys %{$results_ref->{"tier_description"}}) {
							<th
								class="smallish"
								title="<% ${$results_ref}{"tier_long_description"}{$key} %>"
							>
								<% ${$results_ref}{"tier_description"}{$key} %>
							</th>
%						}

						<th>
						</th>

					</tr>

				</thead>

				<tbody>

<%perl>
					my $count;

					foreach my $key (sort {$a <=> $b} keys %{$results_ref->{'by_place'}}) {

						my $tie++ if scalar @{${$results_ref}{"by_place"}{$key}} > 1;

						foreach my $entry_id (@{${$results_ref}{"by_place"}{$key}}) {
</%perl>

							<tr
								<% $ineligible{$entry_id}
									? 'title="Marked Ineligible To Clear"' : ""
								%>
								class="
									<% $tie ? "lirdrow" : "" %>
									<% $ineligible{$entry_id} ? "strike" : "" %>
									<% $tie == 1 ? "libordertop" : "" %>"
								>

%								$tie++ if $tie;

								<td class="centeralign smallish nowrap" style="width: 25px;">
									<% $key %><% $tie ? "-T" : "" %>
								</td>

								<td class="smallish nowrap" style="width: 50px;">
									<span title="<% $entry_ballots{$entry_id} %>">
										<% ${$results_ref}{"code"}{$entry_id} %>
									</span>
								</td>

%                               if ($equal_elims) {
									<td class="smallish">
										<% ${$results_ref}{"section_rank"}{$entry_id} %>
									</td>
									<td class="smallish">
										<% ${$results_ref}{"section_letter"}{$entry_id} %>
									</td>

%								} elsif ($round_robin) {
									<td class="smallish">
										<% ${$results_ref}{"pod_rank"}{$entry_id} %>
									</td>
									<td class="smallish">
										<% ${$results_ref}{"pod"}{$entry_id} %>
									</td>
%                               }

<%perl>
								foreach my $key (
									sort {$a <=> $b} keys %{$results_ref->{"tier_description"}}
								) {

									my $digits = '%.'.$results_ref->{"tb_digits"}{$key}.'f';
									my $value = ${$results_ref}{"tbs"}{$entry_id}{$key};
									$value =~ s/\.(?:|.*[^0]\K)0*\z//;
									$value = sprintf($digits, $value);
</%perl>

									<td class="smallish nowrap">
										<% $value %>
									</td>
%								}

								<td class="centeralign smallish nowrap" style="width: 25px;">
									<% ${$results_ref}{"forfeit"}{$entry_id} ? "NS" : $count++ %>
								</td>

							</tr>
<%perl>

						}

						if ($tourn_settings->{"nsda_district"} && $round && $round->type eq "prelim") {

							if ((not defined $target_count) && ($count >= $advance_target)) {
								$target_count = $count;
							}
						}
					}
</%perl>

				</tbody>
			</table>
			</div>
%		}

	</div>

	<& "menu.mas",
		tourn          => $tourn,
		perms          => $perms,
		tourn_settings => $tourn_settings,
		event          => $event,
		round          => $round,
		preset         => $preset,
		only_category  => $only_category,
		breakout       => $breakout,
		target_count   => $target_count
	&>
