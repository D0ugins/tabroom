<%args>
	$sweep_set
</%args>
<%init>

	return unless $sweep_set;

	my $tourn = $sweep_set->tourn;

	my @sweep_sets;

	push @sweep_sets, $sweep_set;

	my @children = $sweep_set->children;

	if (@children) {
		my %used;
		$used{$sweep_set->id}++;

		while (@children) {
			my $take = shift @children;
			next if $used{$take->id};
			push @children, $take->children;
			push @sweep_sets, $take;
			$used{$take->id}++;
		}
	}

	my %students = ();

	foreach my $set (@sweep_sets) {

		next unless $set->rules;

		my @results = $m->comp(
			"/tabbing/results/sweep_tourn.mas",
				tourn     => $tourn,
				sweep_set => $set
		);

		my $entries_ref = pop @results if @results;

		my $events        = $set->rule("events");
		my $entries_rule  = $set->rule("entries");
		my $wildcards     = $set->rule("wildcards");
		my $event_entries = $set->rule("event_entries");

		# These are reset on a per-rule basis
		foreach my $student_id (keys %students) {
			delete $students{$student_id}{"entries"};
			delete $students{$student_id}{"event_entries"};
			delete $students{$student_id}{"eventcount"};
			delete $students{$student_id}{"wildcard"};
		}

		foreach my $entry (sort { $entries_ref->{$b}{"points"} <=> $entries_ref->{$a}{"points"} } keys %{$entries_ref}) {

			my $ok;
			eval { $ok++
				if $entries_ref->{$entry}{"students"}
				&& keys %{$entries_ref->{$entry}{"students"}};
			};

			next unless $ok;

			foreach my $student_id (sort keys %{$entries_ref->{$entry}{"students"}}) {

				unless ($students{$student_id}{"first"}) {
					$students{$student_id}{"first"}      = $entries_ref->{$entry}{"students"}{$student_id}{"first"};
					$students{$student_id}{"middle"}     = $entries_ref->{$entry}{"students"}{$student_id}{"middle"};
					$students{$student_id}{"last"}       = $entries_ref->{$entry}{"students"}{$student_id}{"last"};
					$students{$student_id}{"full"}       = $entries_ref->{$entry}{"students"}{$student_id}{"full"};
					$students{$student_id}{"entrycode"}  = $entries_ref->{$entry}{"code"};
					$students{$student_id}{"schoolname"} = $entries_ref->{$entry}{"schoolname"};
					$students{$student_id}{"state"}      = $entries_ref->{$entry}{"state"};
				}

				my $event_id = $entries_ref->{$entry}{"event"};
				next unless $entries_ref->{$entry}{"points"};

				$students{$student_id}{"all_entry_count"}++;

				next if
					$entries_rule &&
					( $students{$student_id}{"entries"} >= $entries_rule ) &&
					( $wildcards < 1 || $students{$student_id}{"wildcards"} >= $wildcards );

				next if (
					( ($events && $students{$student_id}{"eventcount"} >= $events) ||
						($event_entries && $students{$student_id}{"event_entries"}{$event_id} >= $event_entries)
					) &&
						($wildcards < 1 || $students{$student_id}{"wildcards"} >= $wildcards )
				);

				if (
					($entries_rule && ($students{$student_id}{"entries"} >= $entries_rule))
					|| ($events && $students{$student_id}{"eventcount"} >= $events )
					|| ($event_entries && $students{$student_id}{"event_entries"}{$event_id} >= $event_entries)
				) {

					 $students{$student_id}{"wildcards"}++;

				} else {

					$students{$student_id}{"entries"}++;
					$students{$student_id}{"eventcount"}++ unless $students{$student_id}{"events"}{$event_id};
					$students{$student_id}{"event_entries"}{$event_id}++;
					$students{$student_id}{"events"}{$event_id}++;
				}

				$students{$student_id}{"counted_entry_count"}++;

				$students{$student_id}{"subtotals"}{$entry}{"code"}   = $entries_ref->{$entry}{"code"};
				$students{$student_id}{"subtotals"}{$entry}{"event"}  = $entries_ref->{$entry}{"eventabbr"};
				$students{$student_id}{"subtotals"}{$entry}{"points"} = $entries_ref->{$entry}{"points"};


				$students{$student_id}{"subtotal_string"} .= "\n" if $students{$student_id}{"subtotal_string"};
				$students{$student_id}{"subtotal_string"} .= $entries_ref->{$entry}{"eventabbr"}." - ";
				$students{$student_id}{"subtotal_string"} .= $entries_ref->{$entry}{"code"}.": ".$entries_ref->{$entry}{"points"};

				$students{$student_id}{"points"} += $entries_ref->{$entry}{"points"};

			}
		}
	}

	return %students;

</%init>

