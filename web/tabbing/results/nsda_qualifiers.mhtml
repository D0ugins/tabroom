<%args>
	$tourn
	$perms
	$tourn_settings
	$person
	$person_settings
	$session
	$event_id => undef
	$format   => undef
	$all      => undef
	$full     => undef
</%args>
<%init>

	my ($eventref, $catref) = $m->comp(
		"/funclib/allowed_events.mas", 
		tourn => $tourn,
		perms => $perms,
		type  => "admin"
	);

	my @events; 
	my @all_events; 
	my @categories = @{$catref};

	if ($tourn_settings->{"nsda_districts"}) {
		foreach my $ev (@{$eventref}) {
			push @all_events, $ev unless $ev->setting("weekend") eq "nope";
		}
	} else { 
		@all_events = @{$eventref};
	}

	my $one_event = Tab::Event->retrieve($event_id) if $event_id;

	if ($all) { 
		@events = @all_events;
	} elsif ($one_event) { 
		@events = ($one_event);
	} elsif (scalar @all_events == 1) { 
		$one_event = $all_events[0];
	}

	my $limit = 14 
		if $tourn_settings->{"nsda_nats"} 
		&& $full < 1;

	$limit = 16 if $one_event && $one_event->setting("usa_wsdc");

	my $year = &Tab::school_year();
	my $school_year = $year->year + 1;

	my $district = Tab::District->retrieve($tourn_settings->{"nsda_district"});

	my $nsda_districts++ if $district;
	my $qual_string = "Qualifier";
	$qual_string = "Placement" if $tourn_settings->{"nsda_nats"};

	my $now = DateTime->now();

	my %integer_tbs = $m->comp("/funclib/tiebreaks.mas");
	# Per request by Lisa V, the Weird Sorting Matrix:

	my %wsm = (
		PF  => 1,
		CX  => 2,
		DUO => 3,
		OO  => 4,
		USX => 5,
		IX  => 6,
		DI  => 7,
		HI  => 8,
		LD  => 9,
		POI => 10,
		INF => 11,
		HOU => 12,
		SEN => 13
	);

	@events = sort {$wsm{$a->abbr} <=> $wsm{$b->abbr}} @events;

	$m->print('<div class="blankfull">');

	my $name = $tourn->name;
	$name .= "-".$one_event->name if $one_event;
	$name =~ s/[\W_]//g;
	my $filename = "NSDA-".$qual_string."s-$name-".$session->id;

	$qual_string = "Top ".$limit." Place" if $limit;

	if ($format eq 'csv' || $format eq 'simplecsv') { 

		$filename = $filename.".csv"; 
		$m->clear_buffer;

		$r->content_type('application/csv');
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	} elsif ($format eq "pdf") { 

		$m->comp("/funclib/printout.mas", 
			tourn    => $tourn,
			filename => $filename,
			wide     => 1,
			head     => 1
		);
	}

	my $headers_print;
	EVENT:
	foreach my $event (@events) { 
				
		next unless $event;

		if ($event->setting('weekend') eq "nope") { 
			$m->print("<p class='redtext centeralign semibold'>");
			$m->print("That event is not set to be held by this district.  To change, go to Settings");
			$m->print(" &rarr; Tournament, then the Dates and Deadlines tab, to assign it to a weekend");
			$m->print("</p>");
			next;
		};
		my $hidden;

		unless ($tourn_settings->{"nsda_tabbing_software"} eq "jot") { 
			$hidden = "hidden" unless $event->setting("nsda_audited");
			undef $hidden if $person->site_admin;
			undef $hidden if $person_settings->{"nsda_admin"};
			next if $hidden && $format eq "post";
		}

		undef $hidden if $person->site_admin;
		undef $hidden if $person_settings->{"nsda_admin"};

		my @rounds = sort {$b->name <=> $a->name} 
			$m->comp(
				"/funclib/event_rounds.mas", 
				event      => $event,
				had_rounds => 1
			);

		my $final;
		my $semi;
		my $last_nonelim;
		my $first_nonelim;
		my @prelims;

		my $runoffs; 

		foreach my $round (@rounds) { 

			if ($round->type eq "runoff") { 
				$runoffs++;
				next;
			}

			if ($round->type eq "final"
				&& (not defined $final) 
			) {

				$final = $round;

			} elsif ($round->type eq "elim" 
				&& (not defined $semi)
			){

				$semi = $round;

			} else { 

				$last_nonelim = $round if (not defined $last_nonelim);
				$first_nonelim = $round;
				push @prelims, $round;
			}
		}

		if ($tourn_settings->{"nsda_pilot_".$event->type}) { 
			@prelims = ($last_nonelim);
		}

		my $separate_sections;

		if ($event->abbr eq "HOU" || $event->abbr eq "SEN") { 

			unless ($semi || $final) { 

				$final = $last_nonelim;
				undef @prelims;

				if ($event->abbr eq "HOU") { 

					# In the House if there are no elims, we must report each
					# prelim session as a separate qualifier

					$separate_sections++;
				}
			}
		}

		my $final_tiebreaks = $final->tiebreak_set if $final;

		if ($event->type eq "debate" 
			&! $tourn_settings->{"nsda_pilot_debate"}
			&& $final 
			&& $final->tiebreak_set->name ne "Debate Final"
			&& $final->tiebreak_set->name ne "NSDA Debate Final"
			&& $final->tiebreak_set->name ne "Supp Debate Final"
		) { 

			$final_tiebreaks = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "Debate Final"
			)->first;

			$final_tiebreaks = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "NSDA Debate Final"
			)->first unless $final_tiebreaks;

			$final->tiebreak_set($final_tiebreaks->id);
			$final->update();
		}


		if ($event->type eq "debate" 
			&! $tourn_settings->{"nsda_pilot_debate"}
		    && (not defined $tourn_settings->{"nsda_nats"}) 
		) { 
			$final_tiebreaks = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name  => "Debate Final"
			)->first;
		}

		my ($num_qualifiers, $num_alternates, $num_active) 
			= $m->comp(
				"/funclib/nsda_qualifier_count.mas", 
				event => $event
		);

		my $count_quals = $num_qualifiers;
		my $count_alts = $num_alternates;

		my $final_tbset;

		if ($tourn_settings->{"nsda_pilot_debate"}) { 
			$final_tbset = $tourn->tiebreak_sets(name => "Debate Elim")->first;
		}

		my @final_results = $m->comp(
			"/tabbing/results/order_entries.mas",
				round        => $final,
				all_entries  => 1,
				runoffs      => $runoffs,
				tiebreak_set => $final_tbset
			) if $final;

		my %entry_ballots = $m->comp(
			"/funclib/round_ballot_strings.mas",
			round => $final
	   ) if $final;

		my @schools = $m->comp(
			"/funclib/round_schools.mas",
			round => $first_nonelim
		) if $first_nonelim;

		my @vacate_slots = $m->comp(
			"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "nsda_vacate"
		);

		my %vacate_slot = map {$_->entry->id => $_->value } @vacate_slots;

		my %school_name = 
			map {$_->id => &Tab::short_name($_->name)} 
			@schools if @schools;

		my $final_entries_ref = pop @final_results 
			if @final_results;

		my %qualifiers = ();
		my %alternates = ();
		my %others = ();
		my %vacated = ();

		my %in_finals = ();
		my %in_elims = ();
		my %in_round = ();
		my %round_count = ();

		my %last_prelim = ();

		my $alt = 1;

		if (${$final_entries_ref}{"by_place"}) { 

			foreach my $key (sort {$a <=> $b} keys %{${$final_entries_ref}{"by_place"}}) { 
			
				my $tie++ if scalar @{${${$final_entries_ref}{"by_place"}}{$key}} > 1; 
			
				foreach my $entry_id (@{${${$final_entries_ref}{"by_place"}}{$key}}) { 

					next if $in_elims{$entry_id};

					$in_finals{$entry_id} = $key;
					$in_elims{$entry_id} = $key;

					next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
					next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};
					next if $others{$entry_id} && $others{$entry_id}{"place"};

					if ($vacate_slot{$entry_id}) { 

						$vacated{$entry_id}{"tie"}++ if $tie;
						$vacated{$entry_id}{"place"} = $key;
						$vacated{$entry_id}{"last_round"} = $final->name;

					} elsif ($count_quals > 0) { 

						$qualifiers{$entry_id}{"tie"}++ if $tie;
						$qualifiers{$entry_id}{"place"} = $key;

						$count_quals--;

					} elsif ($count_alts > 0) { 

						$alternates{$entry_id}{"tie"}++ if $tie;
						$alternates{$entry_id}{"place"} = $alt++;
						$count_alts--;

					} else {

						$others{$entry_id}{"tie"}++ if $tie;
						$others{$entry_id}{"place"} = $key;

					}
				}
			}
		}

		if ($final && $semi)  { 

			my @semi_results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round        => $semi,
				tiebreak_set => $final_tiebreaks,
				runoffs      => $runoffs,
				all_entries  => 1
			);

			my $semi_entries_ref = pop @semi_results 
				if @semi_results;

			if (${$semi_entries_ref}{"by_place"}) { 

				foreach my $key (sort {$a <=> $b} keys %{${$semi_entries_ref}{"by_place"}}) { 

					my $tie++ if scalar @{${${$semi_entries_ref}{"by_place"}}{$key}} > 1; 

					my $delayed_alt;
				
					foreach my $entry_id (@{${${$semi_entries_ref}{"by_place"}}{$key}}) { 
					
						next if $in_elims{$entry_id};
						$in_elims{$entry_id} = $key;

						next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
						next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};

						next if $others{$entry_id} && $others{$entry_id}{"place"};
						next if $vacated{$entry_id} && $others{$entry_id}{"place"};

						if ($vacate_slot{$entry_id}) { 

							$vacated{$entry_id}{"tie"}++ if $tie;
							$vacated{$entry_id}{"place"} = $key;

						} elsif ($count_quals > 0) { 

							$qualifiers{$entry_id}{"tie"}++ if $tie;
							$qualifiers{$entry_id}{"place"} = $key;
							$count_quals--;

						} elsif ($count_alts > 0) { 

							$alternates{$entry_id}{"tie"}++ if $tie;
							$alternates{$entry_id}{"place"} = $alt;

							$delayed_alt++;
							$count_alts--;

						} else { 

							$others{$entry_id}{"tie"}++ if $tie;
							$others{$entry_id}{"place"} = $key;

						}
					}

					$alt += $delayed_alt;
				}
			}
		}

		unless ($event->abbr eq "HOU" || $event->abbr eq "SEN") { 

			if ($final && @prelims) { 

				my $final_tbset;
	
				if ($event->type eq "debate" 
					&& $tourn_settings 
					&& $tourn_settings->{"nsda_pilot_debate"}
				) { 
					$final_tbset = $event->tourn->tiebreak_sets(name => "Debate")->first;
				} else { 
					$final_tbset = $final_tiebreaks;
				}

				foreach my $prelim (@prelims) { 

					my @previous_results = $m->comp(
						"/tabbing/results/order_entries.mas",
							round        => $prelim,
							runoffs      => $runoffs,
							tiebreak_set => $final_tbset
					);

					my $previous_entries_ref = 
						pop @previous_results 
						if @previous_results;

					if (${$previous_entries_ref}{"by_place"}) { 

						foreach my $key (
							sort {$a <=> $b} 
							(keys %{${$previous_entries_ref}{"by_place"}})
						) { 
						
							my $tie++ 
								if scalar @{${${$previous_entries_ref}{"by_place"}}{$key}} > 1; 

							my $delayed_alt;
						
							foreach my $entry_id (@{${${$previous_entries_ref}{"by_place"}}{$key}}) { 
						

								unless ($in_finals{$entry_id}) {

									unless ($in_elims{$entry_id}) { 

										unless ($in_round{$entry_id}) { 

											$in_round{$entry_id} = $prelim->name;
											$round_count{$prelim->name}++;
										}
									}
								}

								next if $qualifiers{$entry_id} && $qualifiers{$entry_id}{"place"};
								next if $alternates{$entry_id} && $alternates{$entry_id}{"place"};
								next if $others{$entry_id} && $others{$entry_id}{"place"};
								next if $vacated{$entry_id} && $others{$entry_id}{"place"};

								$last_prelim{$entry_id} = $prelim->name;

								if ($vacate_slot{$entry_id}) { 

									$vacated{$entry_id}{"tie"}++ if $tie;
									$vacated{$entry_id}{"place"} = $key;

								} elsif ($count_quals > 0) { 

									$qualifiers{$entry_id}{"tie"}++ if $tie;
									$qualifiers{$entry_id}{"place"} = $key;
									$count_quals--;

								} elsif ($count_alts > 0) { 

									$alternates{$entry_id}{"tie"}++ if $tie;
									$alternates{$entry_id}{"place"} = $alt;

									$delayed_alt++;
									$count_alts--;

								} else { 
									$others{$entry_id}{"tie"}++ if $tie;
									$others{$entry_id}{"place"} = $key;
								}
							}

							$alt += $delayed_alt;
						}
					}
				}
			}
		}

		if ($format eq "csv" || $format eq "simplecsv") {

			if ($tourn_settings->{"nsda_district"}) { 

				$m->print("\n");
				$m->print('"'.$district->name.'"');
				$m->print("\n");
				$m->print('"'.$event->name.'"');
				$m->print("\n");

			} else { 

				$m->print(",,,,");
				$m->print('"'.$event->name.'"');
				$m->print(",");
				$m->print('"'.$qual_string.'"');
				$m->print("\n");
			}

			my $simplecsv++ if $format eq "simplecsv";

			if ($simplecsv) { 

				Tab::Entry->set_sql(event_spoke => "
					select distinct entry.id
					from entry, ballot, score
					where entry.event = ? 
					and entry.id = ballot.entry
					and ballot.id = score.ballot
				");

				my @total_entries = Tab::Entry->search_event_spoke($event->id);
			
				$m->print('"Entries: '.scalar @total_entries.'"');
				$m->print("\n");

			}

			$m->flush_buffer();

			if ($separate_sections) { 

				foreach my $section ($final->panels) { 

					$m->comp("results_csv.mas", 
						round          => $final,
						nsda_districts => $nsda_districts,
						nsda_nats      => $tourn_settings->{"nsda_nats"},
						num_qualifiers => 2,
						vacated        => \%vacated,
						vacate_option  => $nsda_districts,
						filename       => $filename,
						section        => $section,
						nofinish       => "yes",
						simple         => $simplecsv,
						contact        => $ARGS{"contact"}
					);

				}

			} else { 

				$m->comp("results_csv.mas", 
					round          => $final,
					filename       => $filename,
					nsda_districts => $nsda_districts,
					nsda_nats      => $tourn_settings->{"nsda_nats"},
					qualifiers     => \%qualifiers,
					vacated        => \%vacated,
					alternates     => \%alternates,
					others         => \%others,
					nofinish       => "Yes",
					contact        => $ARGS{"contact"},
					limit          => $limit,
					simple         => $simplecsv
				);

				my $placement = scalar( keys %in_finals) + 1;

				my $limit_done = $limit - $placement;
				$limit_done = 1 unless $limit;

				$m->comp("results_csv.mas", 
					round           => $semi,
					filename        => $filename,
					tiebreak_set    => $final_tiebreaks,
					nsda_districts  => $nsda_districts,
					nsda_nats       => $tourn_settings->{"nsda_nats"},
					qualifiers      => \%qualifiers,
					vacated         => \%vacated,
					alternates      => \%alternates,
					others          => \%others,
					exclude         => \%in_finals,
					noheader        => "Yes",
					nofinish        => "Yes",
					limit           => $limit,
					contact         => $ARGS{"contact"},
					start_placement => $placement,
					simple          => $simplecsv
				) if $limit_done > 0;

				$placement = scalar( keys %in_elims) + 1;

				$limit_done = $limit - $placement;
				$limit_done = 1 unless $limit;

				foreach my $prelim (@prelims) { 

					$m->comp("results_csv.mas", 
						round           => $prelim,
						filename        => $filename,
						tiebreak_set    => $final_tiebreaks,
						nsda_districts  => $nsda_districts,
						nsda_nats       => $tourn_settings->{"nsda_nats"},
						qualifiers      => \%qualifiers,
						vacated         => \%vacated,
						alternates      => \%alternates,
						others          => \%others,
						exclude         => \%in_elims,
						none_above      => \%last_prelim,
						start_placement => $placement,
						noheader        => "Yes",
						nofinish        => "Yes",
						limit           => $limit,
						contact         => $ARGS{"contact"},
						simple          => $simplecsv
					) if $limit_done > 0;

				}

			}

			$m->print("\n\n");
				
		} elsif ($format eq "pdf") { 

			my $filepath = $Tab::file_root."tmp/".$filename;

			open (TEXOUT, ">>$filepath.tex");

			my $logo_file = $tourn_settings->{"logo"};

			if ($logo_file) {

				unless (-e "$Tab::file_root/tmp/".$logo_file) { 
					system("cd $Tab::file_root/tmp; 
					$Tab::latex_path_prefix/wget ".$Tab::s3_url."/".$tourn->id."/".$logo_file);
				}
			}

			if ($logo_file && -e "$Tab::file_root/tmp/".$logo_file) { 

				print TEXOUT "\\begin{minipage}[c]{3.65in}\n";
				print TEXOUT "\\includegraphics[height=1.2in,width=1.2in,keepaspectratio]{".$logo_file."}\n";
				print TEXOUT "\\end{minipage}\n";

			} else { 

				print TEXOUT "\\vspace{-4mm}\n";
				print TEXOUT "\\begin{minipage}[c]{4.2in}\n";
				print TEXOUT "{\\bf \\LARGE \\color{black!64} ".&Tab::texify($tourn->name)." }\n";
				print TEXOUT "\\end{minipage}\n";

			}

			print TEXOUT "\\begin{minipage}[c]{3.4in}\n";
			print TEXOUT "\\strut \\hfill {\\Large\\bf ".uc(&Tab::texify($event->name))." } \n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\noindent\n";
			print TEXOUT "\\strut \\hfill {\\large \\color{black!64} ".uc($qual_string)."S }\n";
			print TEXOUT "\\end{minipage}\n";
			print TEXOUT "\\vspace{5mm}\n";
			print TEXOUT "\\newline\n";
		
			close TEXOUT;

			if ($separate_sections && $final > 0) { 

				foreach my $section ($final->panels) { 

					$m->comp("/tabbing/report/results_table_print.mas", 
						round          => $final,
						nsda_districts => $nsda_districts,
						nsda_nats      => $tourn_settings->{"nsda_nats"},
						num_qualifiers => 2,
						vacated        => \%vacated,
						vacate_option  => $nsda_districts,
						filename       => $filename,
						ballots        => $ARGS{"ballots"},
						section        => $section
					);

				}

			} else { 

				$m->comp("/tabbing/report/results_table_print.mas", 
					round          => $final,
					filename       => $filename,
					nsda_districts => $nsda_districts,
					nsda_nats      => $tourn_settings->{"nsda_nats"},
					qualifiers     => \%qualifiers,
					vacated        => \%vacated,
					alternates     => \%alternates,
					limit          => $limit,
					ballots        => $ARGS{"ballots"},
					others         => \%others
				);

				my $placement = scalar( keys %in_finals) + 1;
				my $limit_done = $limit - $placement;
				$limit_done = 1 unless $limit;

				$m->comp("/tabbing/report/results_table_print.mas", 
					round           => $semi,
					filename        => $filename,
					tiebreak_set    => $final_tiebreaks,
					nsda_districts  => $nsda_districts,
					nsda_nats       => $tourn_settings->{"nsda_nats"},
					qualifiers      => \%qualifiers,
					vacated         => \%vacated,
					alternates      => \%alternates,
					others          => \%others,
					exclude         => \%in_finals,
					ballots         => $ARGS{"ballots"},
					limit           => $limit,
					start_placement => $placement,
					noheader        => $tourn_settings->{"nsda_nats"},
					nofinish        => "Yes"
				) if ($limit_done > 0);

				my $noheaders;
				$noheaders++ unless (scalar (keys %in_elims)) == scalar (keys (%in_finals));

				$placement = scalar( keys %in_elims) + 1;
				$limit_done = $limit - $placement;
				$limit_done = 1 unless $limit;

				foreach my $prelim (@prelims) { 

					next if $limit_done < 1;

					$m->comp("/tabbing/report/results_table_print.mas", 
						round           => $prelim,
						filename        => $filename,
						tiebreak_set    => $final_tiebreaks,
						nsda_districts  => $nsda_districts,
						nsda_nats       => $tourn_settings->{"nsda_nats"},
						qualifiers      => \%qualifiers,
						vacated         => \%vacated,
						limit           => $limit,
						ballots         => $ARGS{"ballots"},
						alternates      => \%alternates,
						others          => \%others,
						exclude         => \%in_elims,
						none_above      => \%last_prelim,
						start_placement => $placement,
						noheader        => $noheaders++,
						nofinish        => 1
					);

				}
				
			}

			open (TEXOUT, ">>$filepath.tex");
			print TEXOUT "\\newpage\n";
			close TEXOUT;

		} elsif ($format eq "post" && $final) { 

			if ($separate_sections) { 

				# The House is treated differently in all kinds of
				# horrifying ways. 

				foreach my $section ($final->panels) { 

					my $code = "H".$section->letter;

					my $result_set  = Tab::ResultSet->search(
						label => "District Qualifiers: $code",
						tourn => $tourn,
						event => $event
					)->first;

					unless ($result_set) { 

						$result_set  = Tab::ResultSet->create({
							label     => "District Qualifiers: $code",
							tourn     => $tourn,
							event     => $event,
							generated => $now
						});

					} else { 
						$result_set->generated($now);
						$result_set->update();
					}

					my (@results) = $m->comp(
						"order_entries.mas", 
							long_names   => 1,
							round        => $final,
							tiebreak_set => $final_tiebreaks,
							runoffs      => $runoffs,
							section      => $section
					);  

					my $entries_ref = pop @results if @results;
				
					my @tiebreak_keys =
						sort {$a <=> $b}
						keys %{$entries_ref->{"tier_description"}};


					Tab::ResultSet->set_sql(
						delete_results => "
							delete from result
								where result_set = ?
					");

					Tab::ResultSet->sql_delete_results->execute(
						$result_set->id
					);

					my $qualled;

					if (${$entries_ref}{"by_place"}) {

						foreach my $key (sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) { 

							foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

								next if $entries_ref->{"dq"}{$entry_id};
								
								my $entry = Tab::Entry->retrieve($entry_id);

								my $result = Tab::Result->create({
									rank       => $key,
									result_set => $result_set->id,
									entry      => $entry_id,
									school     => $entry->school->id
								});

								if ($vacated{$entry_id}{"place"}) { 
									Tab::ResultValue->create({
										result      => $result->id,
										tag         => "vacated",
										no_sort     => 1,
										priority    => 0,
										description => "Entry Slot Vacated or Dropped",
										value       => 1
									});
								}

								Tab::ResultValue->create({
									result      => $result->id,
									tag         => "chamber",
									no_sort     => 1,
									priority    => 0,
									description => "Qualifying Chamber",
									value       => $section->letter
								});
							

								foreach my $student ($entry->students) { 

									Tab::ResultValue->create({
										result      => $result->id,
										tag         => $student->id,
										no_sort     => 1,
										priority    => 0,
										description => $student->first." ".$student->last." merit number",
										value       => $student->ualt_id
									});

								}	

								Tab::ResultValue->create({ 
									tag         => "Place",
									description => "Final Placement",
									value       => $key,
									priority    => 1,
									sort_desc   => 0,
									result      => $result->id
								});


								foreach my $key (@tiebreak_keys) { 

									my $value = ${$entries_ref}{"tiebreak"}{$key}{$entry_id};

									my $sort_desc = 0;
									$sort_desc = 1 if $ARGS{"threshold_direction"};

									$value =~ s/\.(?:|.*[^0]\K)0*\z//;

									$value = sprintf("%.2f", $value) 
										unless $integer_tbs{${$entries_ref}{"tier_description"}{$key}};

									Tab::ResultValue->create({ 
										tag         => ${$entries_ref}{"tier_description"}{$key},
										description => ${$entries_ref}{"tier_long_description"}{$key},
										value       => $value,
										priority    => $key,
										sort_desc   => $sort_desc,
										result      => $result->id
									})
								}
							}
						}
					} #End of entries by place
				}

			} else { 

				my $result_set  = Tab::ResultSet->search(
					label => "District Qualifiers",
					tourn => $tourn,
					event => $event
				)->first;

				unless ($result_set) { 

					$result_set  = Tab::ResultSet->create({
						label     => "District Qualifiers",
						tourn     => $tourn,
						event     => $event,
						generated => $now
					});

				} else { 
					$result_set->generated($now);
					$result_set->update();
				}


				Tab::ResultSet->set_sql(
					delete_results => "
						delete from result
							where result_set = ?
				");

				Tab::ResultSet->sql_delete_results->execute(
					$result_set->id
				);

				@prelims = sort {$b->name <=> $a->name} @prelims;


				my %entry_done; 

				my $current_rank = 1;

				foreach my $round ($final, $semi, @prelims) { 

					Tab::debuglog("Printing round ".$round->realname);

					my $debate_all++ if $event->type eq "debate";

					my $section_rank++ 
						if $final_tiebreaks
						&& $final_tiebreaks->setting("equal_elims");

					my $final_tbset;

					if ($event->type eq "debate" 
						&& $round->type eq "final" 
						&& $tourn_settings->{"nsda_pilot_debate"}
					) { 
						$final_tbset = $tourn->tiebreak_sets(name => "Debate Elim")->first;
					} else { 
						$final_tbset = $final_tiebreaks;	
					}

					my (@results) = $m->comp(
						"order_entries.mas", 
							long_names   => 1,
							round        => $round,
							tiebreak_set => $final_tbset,
							all_entries  => $debate_all,
							runoffs      => $runoffs,
							section_rank => $section_rank
					);  

					my $entries_ref = pop @results if @results;

					my @tiebreak_keys =
						sort {$a <=> $b}
						keys %{$entries_ref->{"tier_description"}};

					if (${$entries_ref}{"by_place"}) {

						foreach my $key (sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) { 

							my $did;

							foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

								next if $entries_ref->{"dq"}{$entry_id};
								
								next if $entry_done{$entry_id}++;
								my $entry = Tab::Entry->retrieve($entry_id);
								$did++;

								my $result = Tab::Result->create({
									rank       => $current_rank,
									result_set => $result_set->id,
									entry      => $entry_id,
									school     => $entry->school->id
								});

								if ($vacated{$entry_id}{"place"}) { 
									Tab::ResultValue->create({
										result      => $result->id,
										tag         => "vacated",
										no_sort     => 1,
										priority    => 0,
										description => "Entry Slot Vacated or Dropped",
										value       => 1
									});
								}

								foreach my $student ($entry->students) { 

									Tab::ResultValue->create({
										result      => $result->id,
										tag         => $student->id,
										no_sort     => 1,
										priority    => 0,
										description => $student->first." ".$student->last." merit number",
										value       => $student->ualt_id
									});

								}	

								Tab::ResultValue->create({ 
									tag         => "Place",
									description => "Final Placement",
									value       => $current_rank,
									priority    => 1,
									sort_desc   => 0,
									result      => $result->id
								});

								Tab::ResultValue->create({ 
									tag         => "Rnd",
									description => "Last Round Competed",
									value       => $round->name,
									priority    => 2,
									sort_desc   => 0,
									result      => $result->id
								});

								foreach my $key (@tiebreak_keys) { 

									my $value = ${$entries_ref}{"tiebreak"}{$key}{$entry_id};

									my $sort_desc = 0;
									$sort_desc = 1 if $ARGS{"threshold_direction"};

									$value =~ s/\.(?:|.*[^0]\K)0*\z//;

									$value = sprintf("%.2f", $value) 
										unless $integer_tbs{${$entries_ref}{"tier_description"}{$key}};

									Tab::ResultValue->create({ 
										tag         => ${$entries_ref}{"tier_description"}{$key},
										description => ${$entries_ref}{"tier_long_description"}{$key},
										value       => $value,
										priority    => ($key + 2),
										sort_desc   => $sort_desc,
										result      => $result->id
									})

								}

							}

							$current_rank += $did;
						}
					}
				}
			}

		} else { 

</%init>

			<script>
				function confirmAudit(event_id) { 
					$("."+event_id).removeClass('hidden');
					$("#"+event_id).addClass('hidden');
					$('table').trigger('applyWidgets');
				}
			</script>


			<div
				class="full nospace borderbottom"
			>

				<span class="quarter nospace">
					<h4><% $qual_string %>s</h4>
				</span>

				<span class="quarter">

					<form 
						action = "nsda_qualifiers.mhtml"
						method = "post"
					>

					<input
						type  = "hidden"
						name  = "full"
						value = "<% $full %>"
					>

					<select
						name     = "event_id"
						class    = "fixedbig"
						onChange = "this.form.submit();"
					>
%						foreach my $oevent (@all_events) { 
							<option 
								value="<% $oevent->id %>"
								<% $oevent == $event ? 'selected="true"' : "" %>
							><% $oevent->name %></option>
%						}

					</select>

					</form>
				</span>

				<span class="half rightalign <% $hidden %> <% $event->id %>">

					<% $event->abbr %>:

%					if ($event->abbr eq "HOU" || $event->abbr eq "SEN") { 

						<a 
							title = "Congress Speech Scores"
							class = "buttonwhite fa fa-lg fa-sort-numeric-asc orangetext hover"
							href  = "/tabbing/report/congress_scores.mhtml?event_id=<% $event->id %>"
							target = "_blank"
						></a>
%					}

					<a 
						title = "PDF Printout Report"
						class = "buttonwhite fa fa-lg fa-file-pdf-o redtext hover"
						href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&format=pdf&full=<% $full %>"
						target = "_blank"

					></a>

					<a 
						title = "Full Excel Report"
						class = "buttonwhite fa fa-lg fa-file-excel-o greentext hover"
						href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&format=csv&full=<% $full %>"
					></a>
<%perl>
					if (
						$tourn_settings->{'nsda_district'} 
					) { 
</%perl>

						<a 
							title = "Finalize for Publication and Nationals Registration"
							class = "buttonwhite fa fa-lg fa-arrow-circle-up orangetext hover"
							href  = "nsda_qualifiers.mhtml?format=post&event_id=<% $event->id %>&full=<% $full %>"
						></a>

%					}

%					unless ($tourn_settings->{"nsda_nats"}) { 

						ALL:

						<a 
							title = "PDF Printout Report"
							class = "buttonwhite fa fa-lg fa-file-pdf-o redtext hover"
							href  = "nsda_qualifiers.mhtml?format=pdf&all=1"
							target = "_blank"

						></a>

						<a 
							title = "Full Excel Report"
							class = "buttonwhite fa fa-lg fa-file-excel-o greentext hover"
							href  = "nsda_qualifiers.mhtml?format=csv&all=1"
						></a>

						<a 
							title = "Excel Download for NSDA"
							class = "buttonwhite fa fa-lg fa-file-excel-o purpletext hover"
							href  = "nsda_qualifiers.mhtml?format=simplecsv&all=1"
						></a>

						<a 
							title = "Finalize for Publication and Nationals Registration"
							class = "buttonwhite fa fa-lg fa-arrow-circle-up orangetext hover"
							href  = "nsda_qualifiers.mhtml?format=post&all=1"
						></a>

<%perl>
					} elsif ($person_settings->{"nsda_admin"} 
						|| $person->site_admin
					) { 
</%perl>

						<a 
							title = "Full Report Excel Download"
							class = "buttonwhite fa fa-lg fa-file-excel-o purpletext hover"
							href  = "nsda_qualifiers.mhtml?format=csv&event_id=<% $event->id %>&contact=1"
						></a>

%						if ($full) { 

							<a 
								title = "View Only Top 14"
								class = "buttonwhite fa fa-lg fa-asterisk orangetext hover invert"
								href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>"
							></a>


%						} else { 

							<a 
								title = "View All Qualifiers"
								class = "buttonwhite fa fa-lg fa-asterisk orangetext hover"
								href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&full=1"
							></a>

%						} 

%					}

				</span>

			</div>

<%perl>

			my $confirmer;

			unless ($person->site_admin 
				|| $person_settings->{"nsda_admin"} 
				|| $event->setting("nsda_audited")
				|| $tourn_settings->{"nsda_nats"}
			) { 

</%perl>
				<div 
					id    = "<% $event->id %>"
					class = "cover centeralign padtopmore"
				>

					<div class="padmuchmore full padtopmore padbottommore marbottommore">
					</div>


					<h3 class="centeralign nospace">
						Confirm Audit &amp; Doublecheck
					</h3>

					<p class="strong bluetext padtopmore martopmore">
						To see qualifiers for <% $event->name %>, please first confirm the following:
					</p>

					<p>
						1.  All ballot entry has been double checked, and ballots
						have been made available to attending coaches for
						confirmation.
					</p>

					<p> 
						2.  You pledge to check the system's results and calculations
						before announcing or reporting qualifiers.
					</p>

					<div class="padmuchmore centeralign martopmore">

						<a 
							id             = "event_<% $event->id %>"
							class          = "buttonwhite redtext invert padmuchmore"
							target_id      = "<% $event->id %>"
							setting_name   = "nsda_audited"
							property_value = "<% $person->id %>"
							value          = "<% $person->id %>"
							onClick        = "
								postSwitch(this, 'event_switch.mhtml'); 
								confirmAudit(<% $event->id %>);
							"
						>
							Mark As Confirmed by <% $person->first." ".$person->last %>
						</a>

					</div>

				</div>

<%perl>

				$hidden = "hidden";

			} else { 

				$confirmer = Tab::Person->retrieve($event->setting("nsda_audited"))
					if $event->setting("nsda_audited");

				$hidden = "hidden" unless $confirmer;

			}

			undef $hidden if $person->site_admin;
			undef $hidden if $person_settings->{"nsda_admin"};
			undef $hidden if $tourn_settings->{'nsda_nats'};


</%perl>
			<div class = "mask <% $hidden %> <% $event->id %>" >

%			unless ($tourn_settings->{'nsda_nats'}) { 

				<div class="explain nospace martop centeralign">

					<span class="smallish explain nospace replybucket confirmed"> 
%						if ($confirmer) { 
							Audit confirmed by 
							<% $confirmer ? $confirmer->first." ".$confirmer->last : "" %>
%						} else { 
							Audit not yet confirmed
%						} 
					</span>


				</div>
<%perl>
			} 

			if ($separate_sections && $final)  { 

				foreach my $section ($final->panels) { 

					$m->comp("results_table.mas", 
						round          => $final,
						nsda_districts => $nsda_districts,
						nsda_nats      => $tourn_settings->{"nsda_nats"},
						num_qualifiers => 2,
						vacated        => \%vacated,
						vacate_option  => $nsda_districts,
						section        => $section,
						tourn_settings => $tourn_settings,
						limit          => $limit
					);

				}

			} else { 
</%perl>


				<span class="half">
					<h5 class="padno padleft marno">Finalists:</h5>
				</span>

%				if ($final) { 
					<span class="half rightalign">
						<a 
							class="buttonblue whitetext smallish padless"
							href="/panel/round/runoff.mhtml?round_id=<% $final->id %>&nsda=1&tiebreak_set_id=<% $final_tiebreaks->id %>"
						>Schedule Runoffs</a>

					</span>
%				}

				<& 
					"results_table.mas", 
						round          => $final,
						nsda_districts => $nsda_districts,
						nsda_nats      => $tourn_settings->{"nsda_nats"},
						qualifiers     => \%qualifiers,
						vacated        => \%vacated,
						alternates     => \%alternates,
						others         => \%others,
						limit          => $limit,
						tourn_settings => $tourn_settings,
						vacate_option  => $nsda_districts
				&>
<%perl>

			}

			my $placement = scalar( keys %in_finals) + 1;

			my $limit_done = $limit - $placement;
			$limit_done = 1 unless $limit;

			my $finals_left = ($num_alternates + $num_qualifiers) - (scalar (keys %in_finals));
			my $semis_left = ($num_alternates + $num_qualifiers) - (scalar (keys %in_elims));

			my $both = 1 if $semi && $last_nonelim;

			if ($final && ($semi || @prelims)) { 

				my $runoff = $semi if $semi;
				$runoff = $prelims[0] unless $runoff;
					
				undef $both unless $semis_left > 0;
			
</%perl>
%					if ($limit_done > 0) { 

						<span class="half">
							<h4 class="padno padleft marno">Others</h4>
						</span>

%						if ($runoff) { 
							<span class="half rightalign">
								<a 
									class="buttonblue whitetext smallish padless"
									href="/panel/round/runoff.mhtml?round_id=<% $runoff->id %>&nsda=1&tiebreak_set_id=<% $final_tiebreaks->id %>"
								>Schedule Runoffs</a>

							</span>
%						}

						<& 
							"results_table.mas", 
							round           => $semi,
							tiebreak_set    => $final_tiebreaks,
							nsda_districts  => $nsda_districts,
							nsda_nats       => $tourn_settings->{"nsda_nats"},
							qualifiers      => \%qualifiers,
							vacated         => \%vacated,
							alternates      => \%alternates,
							limit           => $limit,
							others          => \%others,
							exclude         => \%in_finals,
							start_placement => $placement,
							tourn_settings => $tourn_settings,
							vacate_option   => $nsda_districts,
							nofinish        => "Yes"
						&>
%					}

<%perl>

					$placement = scalar( keys %in_elims) + 1;

					$limit_done = $limit - $placement;
					$limit_done = 1 unless $limit;

					my $noheaders;

					$noheaders++ 
						unless (scalar (keys %in_elims)) == scalar (keys (%in_finals));

					foreach my $prelim (@prelims) { 

						next if $limit_done < 1;

						$noheaders++ if $tourn_settings->{"nsda_nats"};

						if ($separate_sections) { 

							foreach my $section ($prelim->panels) { 

								$m->comp("results_table.mas", 
									round           => $prelim,
									tiebreak_set    => $final_tiebreaks,
									nsda_districts  => $nsda_districts,
									nsda_nats       => $tourn_settings->{"nsda_nats"},
									limit           => $limit,
									qualifiers      => \%qualifiers,
									vacated         => \%vacated,
									alternates      => \%alternates,
									others          => \%others,
									exclude         => \%in_elims,
									start_placement => $placement,
									none_above      => \%last_prelim,
									noheader        => $noheaders++,
									vacate_option   => $nsda_districts,
									nofinish        => "Yes",
									tourn_settings => $tourn_settings,
									section         => $section
								);

							}

						} else { 

							$m->comp("results_table.mas", 
								round           => $prelim,
								tiebreak_set    => $final_tiebreaks,
								nsda_districts  => $nsda_districts,
								nsda_nats       => $tourn_settings->{"nsda_nats"},
								qualifiers      => \%qualifiers,
								vacated         => \%vacated,
								alternates      => \%alternates,
								others          => \%others,
								exclude         => \%in_elims,
								start_placement => $placement,
								noheader        => $noheaders++,
								vacate_option   => $nsda_districts,
								tourn_settings => $tourn_settings,
								limit           => $limit,
								nofinish        => "Yes"
							);

						}

						$placement += $round_count{$prelim->name};

					}

</%perl>

					</tbody>

				</table>

				</div>

<%perl>

			}

		}

	}

	if ($format eq "csv" || $format eq "simplecsv") { 

		$m->flush_buffer();
		$m->abort();

	} elsif ($format eq "pdf") { 

		$m->comp("/funclib/printout.mas", 
			tourn    => $tourn,
			filename => $filename,
			tail     => 1 
		);

	} elsif ($format eq "post") { 

		my $msg = scalar @events." events posted for publication or Nationals registration";

		if ($tourn_settings->{"nsda_tabbing_software"} eq "jot") { 
			$m->redirect("/tabbing/publish/joydistrict.mhtml?function=Generate Results Sheets&msg=$msg");
		} else { 
			$m->redirect("/tabbing/publish/index.mhtml?msg=$msg");
		}

	} else { 

		unless (@events) { 

</%perl>

			<span class="half rightalign semibold bluetext">
				Choose an event:
			</span>
			<span class="quarter">

				<form 
					action = "nsda_qualifiers.mhtml"
					method = "post"
				>

				<input
					type  = "hidden"
					name  = "full"
					value = "<% $full %>"
				>

				<select
					name     = "event_id"
					class    = "fixedbig"
					onChange = "this.form.submit();"
				>
%					foreach my $oevent (@all_events) { 
						<option 
							value="<% $oevent->id %>"
						><% $oevent->name %></option>
%					}

				</select>

				</form>
			</span>

<%perl>


		}


		$m->print("</div>");
		$m->print("</div>");

	}

</%perl>

