<%args>
	$tourn
	$tourn_settings
	$person
	$session
	$event_id => undef
	$format   => undef
	$all      => undef
</%args>
<%init>

	my @events; 
	my $one_event = Tab::Event->retrieve($event_id) if $event_id;

	if ($one_event) { 
		push @events, $one_event;
	} elsif ($all) { 
		@events = $tourn->events;
	}

	# Per request by Lisa V, the Weird Sorting Matrix:

	my %wsm = (
		PF  => 1,
		CX  => 2,
		DUO => 3,
		OO  => 4,
		USX => 5,
		IX  => 6,
		DI  => 7,
		HI  => 8,
		LD  => 9,
		POI => 10,
		INF => 11,
		HOU => 12,
		SEN => 13
	);

	@events = sort {$wsm{$a->abbr} <=> $wsm{$b->abbr}} @events;

	$m->print('<div class="blankfull">');

	my $name = $tourn->name;
	$name .= "-".$one_event->name if $one_event;
	$name =~ s/[\W_]//g;
	my $filename = "NSDA-Qualifiers-$name-".$session->id;

	if ($format eq 'csv') { 

		$filename = $filename.".csv"; 
		$m->clear_buffer;
		$r->content_type('application/csv');
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	} elsif ($format eq "pdf") { 

		$m->comp("/funclib/printout.mas", 
			tourn    => $tourn,
			filename => $filename,
			wide     => 1,
			head     => 1
		);
	}

	foreach my $event (@events) { 

		my @rounds = sort {$b->name <=> $a->name} $event->rounds;

		my $final;
		my $semi;
		my $last_nonelim;
		my $first_nonelim;
		my @prelims;

		foreach my $round (@rounds) { 

			if ($round->type eq "final"
				&& (not defined $final) 
			) {

				$final = $round;

			} elsif ($round->type eq "elim" 
				&& (not defined $semi)
			){

				$semi = $round;

			} else { 

				$last_nonelim = $round if (not defined $last_nonelim);
				$first_nonelim = $round;
				push @prelims, $round;
			}
		}

		my $final_tiebreaks = $final->tiebreak_set if $final;

		if ($event->type eq "debate") { 

			$final_tiebreaks = Tab::TiebreakSet->search(
				tourn => $tourn->id,
				name => "Debate Final"
			)->first;

		}

		my ($num_qualifiers, $num_alternates, $num_active) 
			= $m->comp(
				"/funclib/nsda_qualifier_count.mas", 
				event => $event
			);

		my $count_quals = $num_qualifiers;
		my $count_alts = $num_alternates;

		my @final_results = $m->comp(
			"/tabbing/results/order_entries.mas",
				round       => $final,
				all_entries => 1
			) if $final;

		my %entry_ballots = $m->comp(
			"/funclib/round_ballot_strings.mas",
			round => $final
	   ) if $final;

		my @schools = $m->comp(
			"/funclib/round_schools.mas",
			round => $first_nonelim
		) if $first_nonelim;

		my @vacate_slots = $m->comp(
			"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "nsda_vacate"
		);

		my %vacate_slot = map {$_->entry->id => $_->value } @vacate_slots;

		my %school_name = 
			map {$_->id => &Tab::short_name($_->name)} 
			@schools if @schools;

		my $final_entries_ref = pop @final_results if @final_results;

		my %qualifiers = ();
		my %alternates = ();
		my %others = ();
		my %vacated = ();

		my %in_finals = ();
		my %in_elims = ();
		my %last_prelim = ();

		my $alt = 1;

		if (${$final_entries_ref}{"by_place"}) { 

			foreach my $key (sort {$a <=> $b} keys %{${$final_entries_ref}{"by_place"}}) { 
			
				my $tie++ if scalar @{${${$final_entries_ref}{"by_place"}}{$key}} > 1; 
			
				foreach my $entry_id (@{${${$final_entries_ref}{"by_place"}}{$key}}) { 

					$in_finals{$entry_id}++;
					$in_elims{$entry_id}++;

					next if $qualifiers{$entry_id}{"place"};
					next if $alternates{$entry_id}{"place"};
					next if $others{$entry_id}{"place"};

					if ($vacate_slot{$entry_id}) { 

						$vacated{$entry_id}{"tie"}++ if $tie;
						$vacated{$entry_id}{"place"} = $key;
						$vacated{$entry_id}{"last_round"} = $final->name;

					} elsif ($count_quals > 0) { 

						$qualifiers{$entry_id}{"tie"}++ if $tie;
						$qualifiers{$entry_id}{"place"} = $key;

						$count_quals--;

					} elsif ($count_alts > 0) { 

						$alternates{$entry_id}{"tie"}++ if $tie;
						$alternates{$entry_id}{"place"} = $alt++;
						$count_alts--;

					} else {

						$others{$entry_id}{"tie"}++ if $tie;
						$others{$entry_id}{"place"} = $key;

					}
				}
			}
		}

		if ($final && $semi)  { 

			my @semi_results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round        => $semi,
				tiebreak_set => $final_tiebreaks,
				all_entries  => 1
			);

			my $semi_entries_ref = pop @semi_results if @semi_results;

			if (${$semi_entries_ref}{"by_place"}) { 

				foreach my $key (sort {$a <=> $b} keys %{${$semi_entries_ref}{"by_place"}}) { 

					my $tie++ if scalar @{${${$semi_entries_ref}{"by_place"}}{$key}} > 1; 

					my $delayed_alt;
				
					foreach my $entry_id (@{${${$semi_entries_ref}{"by_place"}}{$key}}) { 
					
						$in_elims{$entry_id}++;

						next if $qualifiers{$entry_id}{"place"};
						next if $alternates{$entry_id}{"place"};
						next if $others{$entry_id}{"place"};
						next if $vacated{$entry_id}{"place"};

						if ($vacate_slot{$entry_id}) { 

							$vacated{$entry_id}{"tie"}++ if $tie;
							$vacated{$entry_id}{"place"} = $key;

						} elsif ($count_quals > 0) { 

							$qualifiers{$entry_id}{"tie"}++ if $tie;
							$qualifiers{$entry_id}{"place"} = $key;
							$count_quals--;

						} elsif ($count_alts > 0) { 

							$alternates{$entry_id}{"tie"}++ if $tie;
							$alternates{$entry_id}{"place"} = $alt;
							$delayed_alt++;
							$count_alts--;

						} else { 
							$others{$entry_id}{"tie"}++ if $tie;
							$others{$entry_id}{"place"} = $key;

						}
					}

					$alt += $delayed_alt;
				}
			}
		}

		if ($final && @prelims) { 

			foreach my $prelim (@prelims) { 

				my @previous_results = $m->comp(
					"/tabbing/results/order_entries.mas",
					round        => $prelim,
					tiebreak_set => $final_tiebreaks,
					all_entries  => 1
				);

				my $previous_entries_ref = pop @previous_results if @previous_results;

				if (${$previous_entries_ref}{"by_place"}) { 

					foreach my $key (sort {$a <=> $b} keys %{${$previous_entries_ref}{"by_place"}}) { 
					
						my $tie++ if scalar @{${${$previous_entries_ref}{"by_place"}}{$key}} > 1; 
						my $delayed_alt;
					
						foreach my $entry_id (@{${${$previous_entries_ref}{"by_place"}}{$key}}) { 

							next if $qualifiers{$entry_id}{"place"};
							next if $alternates{$entry_id}{"place"};
							next if $others{$entry_id}{"place"};
							next if $vacated{$entry_id}{"place"};

							$last_prelim{$entry_id} = $prelim->name;

							if ($vacate_slot{$entry_id}) { 

								$vacated{$entry_id}{"tie"}++ if $tie;
								$vacated{$entry_id}{"place"} = $key;

							} elsif ($count_quals > 0) { 

								$qualifiers{$entry_id}{"tie"}++ if $tie;
								$qualifiers{$entry_id}{"place"} = $key;
								$count_quals--;

							} elsif ($count_alts > 0) { 

								$alternates{$entry_id}{"tie"}++ if $tie;
								$alternates{$entry_id}{"place"} = $alt;
								$delayed_alt++;
								$count_alts--;

							} else { 
								$others{$entry_id}{"tie"}++ if $tie;
								$others{$entry_id}{"place"} = $key;
							}
						}

						$alt += $delayed_alt;
					}
				}
			}
		}

		if ($format eq "csv") {

			$m->print("\n");
			$m->print('"'.$event->name.'"');
			$m->print("\n");
			$m->flush_buffer();

			$m->comp("results_csv.mas", 
				round          => $final,
				filename       => $filename,
				nsda_districts => 1,
				qualifiers     => \%qualifiers,
				vacated        => \%vacated,
				alternates     => \%alternates,
				others         => \%others,
				nofinish       => "Yes"
			);

			$m->comp("results_csv.mas", 
				round          => $semi,
				filename       => $filename,
				tiebreak_set   => $final_tiebreaks,
				nsda_districts => 1,
				qualifiers     => \%qualifiers,
				vacated        => \%vacated,
				alternates     => \%alternates,
				others         => \%others,
				exclude        => \%in_finals,
				noheader       => "Yes",
				nofinish       => "Yes"
			);

			my $placement = scalar( keys %in_elims) + 1;

			foreach my $prelim (@prelims) { 

				$m->comp("results_csv.mas", 
					round           => $prelim,
					filename        => $filename,
					tiebreak_set    => $final_tiebreaks,
					nsda_districts  => 1,
					qualifiers      => \%qualifiers,
					vacated         => \%vacated,
					alternates      => \%alternates,
					others          => \%others,
					exclude         => \%in_elims,
					none_above      => \%last_prelim,
					start_placement => $placement,
					noheader        => "Yes",
					nofinish        => "Yes"
				);

			}

			$m->print("\n\n");
				
		} elsif ($format eq "pdf") { 

			my $filepath = $Tab::file_root."tmp/".$filename;
			open (TEXOUT, ">>$filepath.tex");

			my $logo_file = $tourn_settings->{"logo"};

			if ($logo_file) {

				unless (-e "$Tab::file_root/tmp/".$logo_file) { 
					system("cd $Tab::file_root/tmp; 
					$Tab::latex_path_prefix/wget ".$Tab::s3_url."/".$tourn->id."/".$logo_file);
				}
			}

			if ($logo_file && -e "$Tab::file_root/tmp/".$logo_file) { 

				print TEXOUT "\\hspace{-8mm}\n";
				print TEXOUT "\\begin{minipage}[c]{4.0in}\n";
				print TEXOUT "\\includegraphics[width=1.6in]{".$logo_file."}\n";
				print TEXOUT "\\end{minipage}\n";

			} else { 

				print TEXOUT "\\hspace{-4mm}\n";
				print TEXOUT "\\vspace{-4mm}\n";
				print TEXOUT "\\begin{minipage}[c]{4.0in}\n";
				print TEXOUT "{\\bf \\LARGE \\color{black!64} ".&Tab::texify($tourn->name)." }\n";
				print TEXOUT "\\end{minipage}\n";

			}

			print TEXOUT "\\begin{minipage}[c]{3.25in}\n";
			print TEXOUT "\\strut \\hfill {\\LARGE\\bf ".uc(&Tab::texify($event->name))." } \n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\noindent\n";
			print TEXOUT "\\strut \\hfill {\\Large \\color{black!64} QUALIFIERS }";
			print TEXOUT "\\end{minipage}\n";
			print TEXOUT "\\vspace{5mm}\n";
			print TEXOUT "\\newline\n";
		
			close TEXOUT;

			$m->comp("/tabbing/report/results_table_print.mas", 
				round          => $final,
				filename       => $filename,
				nsda_districts => 1,
				qualifiers     => \%qualifiers,
				vacated        => \%vacated,
				alternates     => \%alternates,
				others         => \%others,
			);

			my $placement = scalar( keys %in_finals) + 1;

			$m->comp("/tabbing/report/results_table_print.mas", 
				round           => $semi,
				filename        => $filename,
				tiebreak_set    => $final_tiebreaks,
				nsda_districts  => 1,
				qualifiers      => \%qualifiers,
				vacated         => \%vacated,
				alternates      => \%alternates,
				others          => \%others,
				exclude         => \%in_finals,
				start_placement => $placement,
				nofinish        => "Yes"
			);

			my $noheaders;
			$noheaders++ unless (scalar (keys %in_elims)) == scalar (keys (%in_finals));

			$placement = scalar( keys %in_elims) + 1;

			foreach my $prelim (@prelims) { 

				$m->comp("/tabbing/report/results_table_print.mas", 
					round           => $prelim,
					filename        => $filename,
					tiebreak_set    => $final_tiebreaks,
					nsda_districts  => 1,
					qualifiers      => \%qualifiers,
					vacated         => \%vacated,
					alternates      => \%alternates,
					others          => \%others,
					exclude         => \%in_elims,
					none_above      => \%last_prelim,
					start_placement => $placement,
					noheader        => $noheaders++,
					nofinish        => 1
				);

			}
				
			open (TEXOUT, ">>$filepath.tex");
			print TEXOUT "\\newpage\n";
			close TEXOUT;

		} else {

</%init>


			<div class="full nospace borderbottom">

				<span class="half">
					<h3>Qualifiers in <% $event->name %></h3>
				</span>


				<span class="quarter">

					<form 
						action = "nsda_qualifiers.mhtml"
						method = "post"
					>

					<select
						name     = "event_id"
						class    = "fixedmed"
						onChange = "this.form.submit();"
					>
%						foreach my $oevent ($tourn->events) { 
							<option 
								value="<% $oevent->id %>"
								<% $oevent == $event ? 'selected="true"' : "" %>
							><% $oevent->name %></option>
%						}

					</select>

					</form>
				</span>

				<span class="quarter rightalign">

					<% $event->abbr %>:

					<a 
						title = "PDF Printout Report"
						class = "buttonwhite fa fa-lg fa-file-pdf-o redtext hover"
						href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&format=pdf"
						target = "_blank"

					></a>

					<a 
						title = "Excel/CSV Download"
						class = "buttonwhite fa fa-lg fa-file-excel-o greentext hover"
						href  = "nsda_qualifiers.mhtml?event_id=<% $event->id %>&format=csv"
					></a>

					ALL:

					<a 
						title = "PDF Printout Report"
						class = "buttonwhite fa fa-lg fa-file-pdf-o redtext hover"
						href  = "nsda_qualifiers.mhtml?format=pdf&all=1"
						target = "_blank"

					></a>

					<a 
						title = "Excel/CSV Download"
						class = "buttonwhite fa fa-lg fa-file-excel-o greentext hover"
						href  = "nsda_qualifiers.mhtml?format=csv&all=1"
					></a>

				</span>

			</div>

			<h4>Finalists:</h4>

			<& 
				"results_table.mas", 
					round          => $final,
					nsda_districts => 1,
					qualifiers     => \%qualifiers,
					vacated        => \%vacated,
					alternates     => \%alternates,
					others         => \%others,
			&>
		
	<%perl>

			my $placement = scalar( keys %in_finals) + 1;

			my $finals_left = ($num_alternates + $num_qualifiers) - (scalar (keys %in_finals));
			my $semis_left = ($num_alternates + $num_qualifiers) - (scalar (keys %in_elims));

			my $both = 1 if $semi && $last_nonelim;

			if ($final) { 

					undef $both unless $semis_left > 0;
			
	</%perl>
					<h4>Others</h4>

					<& 
						"results_table.mas", 
							round           => $semi,
							tiebreak_set    => $final_tiebreaks,
							nsda_districts  => 1,
							qualifiers      => \%qualifiers,
							vacated         => \%vacated,
							alternates      => \%alternates,
							others          => \%others,
							exclude         => \%in_finals,
							start_placement => $placement,
							nofinish        => "Yes"
					&>

<%perl>

					$placement = scalar( keys %in_elims) + 1;

					my $noheaders;

					$noheaders++ 
						unless (scalar (keys %in_elims)) == scalar (keys (%in_finals));

					foreach my $prelim (@prelims) { 

</%perl>


						<& 
							"results_table.mas", 
								round           => $prelim,
								tiebreak_set    => $final_tiebreaks,
								nsda_districts  => 1,
								qualifiers      => \%qualifiers,
								vacated         => \%vacated,
								alternates      => \%alternates,
								others          => \%others,
								exclude         => \%in_elims,
								start_placement => $placement,
								none_above      => \%last_prelim,
								noheader        => $noheaders++,
								nofinish        => "Yes"
						&>

%					}

					</tbody>

				</table>

%			}

%		}

%	}

<%perl>

	if ($format eq "csv") { 

		$m->flush_buffer();
		$m->abort();

	} elsif ($format eq "pdf") { 

		$m->comp("/funclib/printout.mas", 
			tourn    => $tourn,
			filename => $filename,
			tail     => 1 
		);

	} else { 

		$m->print("</div>");

	}

</%perl>

