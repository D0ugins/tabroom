<%args>
	$tourn
	$type     => undef
	$event_id => undef
	$round_id => undef
</%args>
<%init>

	use POSIX;

	my $event = Tab::Event->retrieve($event_id) if $event_id;

	my $round = Tab::Round->retrieve($round_id) if $round_id;

	undef $round if ($round 
		&& ($round->type eq "elim" || $round->type eq "final")
	);

	my @all_rounds = $m->comp(
		"/funclib/event_rounds.mas", 
			event => $event,
			done  => "yes"
		)  if $event;

	my @rounds;

	unless ($event) { 
		$event = $tourn->events->first;
	}

	my %event_settings = $m->comp(
		"/funclib/event_settings.mas", 
		tourn => $tourn
	);

	foreach my $round (@all_rounds) { 
		push @rounds, $round 
			if $round->type ne "elim" 
			&& $round->type ne "final";
	}

	if ($event && not defined $round) { 
		$round = shift @rounds;
		push @rounds, $round;
	} 

	if ($round && not defined $event) {
		$event = $round->event;
	}

	my %breakouts;
	my @breakout_keys;

	foreach my $key (1 .. $event_settings{$event}{"breakouts"}) { 

		next if $event_settings{$event}{"breakout_".$key."_delete"};

		push @breakout_keys, $key;

		my $label =  $event_settings{$event}{"breakout_".$key."_label"};

		$breakouts{$key}{"label"} = $label;

		my $flagged_students = JSON::decode_json(
				$event_settings{$event}{'breakout_'.$key.'_students'}
			)
			if $event_settings{$event}{'breakout_'.$key."_students"};

		$breakouts{$key}{"students"} = $flagged_students;

	}

	my $speaker_min_speeches = $event_settings{$event}{"speaker_min_speeches"};
	my $novice = $event_settings{$event}{"top_novice"} if $event;
	my %student_ballots = ();

	my $tiebreak_set_id = $event_settings{$event}{"speaker_tbset"};

	my $tiebreak_set = Tab::TiebreakSet->retrieve($tiebreak_set_id) 
		if $tiebreak_set_id;

    unless ($tiebreak_set) {   

		my $err = "Event ".$event->name." does not have a speaker awards tiebreaker set applied to it.  Please pick one and try again.  $tiebreak_set";

        $m->redirect("/setup/events/tabbing.mhtml?event_id=".$event->id."&err=$err");
    }   

	my $points;
	my $ranks;
	my $wins;

	my $first_has_wins;
	my $notfirst;

	foreach my $tb ($tiebreak_set->tiebreaks) { 

		unless ($notfirst++) {
			$first_has_wins++ 
				if $tb->name eq "winloss" 
				|| $tb->name eq "ballots";
		}

		$ranks++ if (
			$tb->name eq "ranks" 
			|| $tb->name eq "reciprocals");

		$wins++ if (
			$tb->name eq "opp_wins" 
			|| $tb->name eq "winloss" 
			|| $tb->name eq "losses" 
			|| $tb->name eq "ballots");

		$points++ if (
			$tb->name eq "points" 
			|| $tb->name eq "competition" 
			|| $tb->name eq "opp_points"
		);

	}

	my @students;

	if ($round) { 

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("

            select 
                entry.id, entry_student.student, round.name, ballot.judge,
                win.value, 
				points.value, points.student, 
				ranks.value, ranks.student, 
				rebuttal_points.value, rebuttal_points.student,
                panel.bye pbye, ballot.bye bbye, ballot.forfeit, ballot.chair

            from (ballot, entry, entry_student, round, panel)

            left join score win on win.ballot = ballot.id and win.tag = 'ballot'

            left join score points on points.ballot = ballot.id 
                and points.tag = 'points' 
                and points.student = entry_student.student

            left join score ranks on ranks.ballot = ballot.id 
                and ranks.tag = 'ranks' 
                and ranks.student = entry_student.student

            left join score rebuttal_points on rebuttal_points.ballot = ballot.id 
                and rebuttal_points.tag = 'rebuttal_points' 
                and rebuttal_points.student= entry_student.student

            where entry.event = ?

            and entry.id = entry_student.entry

            and round.event = entry.event
            and round.name <= ?
            and round.id = panel.round
            and panel.id = ballot.panel 

            and ballot.entry = entry_student.entry

            and not exists ( 
                select round_setting.id from round_setting where  
                round_setting.tag = 'ignore_results' 
                and round_setting.round = round.id
            )

            group by round.id, entry.id, entry_student.student, ballot.judge
            order by round.name, ballot.panel, 
				win.value DESC, ballot.entry, ballot.chair, ballot.judge

		");

		$sth->execute($event->id, $round->name);

		my %student_round;

		my $count;

		while (
			my ( $entry, $student, $roundname, $judge, 
				$win, $point, $point_student, $rank, $rank_student, $reply, $reply_student,
				$pbye, $bbye, $forfeit, $chair
			) = $sth->fetchrow_array() 
		) { 

			push @students, $student;


			$student_ballots{$student} .= "\n" if $student_ballots{$student};

			$student_ballots{$student} .= " Rd $roundname ";

			$student_ballots{$student} .= " BYE " if $bbye;
			$student_ballots{$student} .= " BYE " if $pbye; 
			$student_ballots{$student} .= " FFT " if $forfeit; 

			$student_ballots{$student} .= " W " if $wins && $win > 0;
			$student_ballots{$student} .= " L " if $wins && $win < 1;

			$student_ballots{$student} .= $rank." " 
				if $rank && $ranks && $rank_student == $student;

			$student_ballots{$student} .= $point." " 
				if $point && $points && $point_student == $student;

			foreach (length($point) .. 4) { 
				$student_ballots{$student} .= " ";
			}

			$student_ballots{$student} .= " R-".$reply." " 
				if $reply && $reply_student == $student;

			$student_ballots{$student} .= " No Speech " 
				unless $point 
				|| $rank 
				|| $bbye 
				|| $pbye 
				|| $forfeit;

		}

	}

	my %seen = (); 
	@students = grep { ! $seen{$_} ++ } @students;

	my %school_name;

	foreach my $school ($tourn->schools) { 
		$school_name{$school->id} = $school->short_name;
	}

	$m->abort unless $round_id || $round;
	$round_id = $round->id unless $round_id;

	my $codes = $event_settings{$event}{"code_style"} if $event;

	my $no_school++ if (
		$codes eq "school_number" 
		|| $codes eq "school_names" 
		|| $codes eq "initials" 
		|| $codes eq "school_name_only" 
		|| $codes eq "schoolname_code" 
		|| $codes eq "full_initials"
	);

	undef $no_school 
		if $event_settings{$event}{"hybrids"};

</%init>

	<div class="blankfull">

		<& "/funclib/tablesorter.mas",
			table     => "sortme",
			nobuttons => 1
		&>

			<div class="full nospace">

				<span class="fifth">
					<h4 class="padno marless"> <% $event->abbr %> </h4>
				</span>

				<span class="third marno centeralign">

					<h5 class="inline marright">
						Event:
					</h5>

					<form action="speakers.mhtml" method="post">

					<input 
						type  = "hidden"
						name  = "type"
						value = "Speakers"
					>

					<select 
						name     = "event_id"
						onchange = 'this.form.submit()'
						class    = "fixedmed"
					>

%						my @events = sort {$a->name cmp $b->name} $tourn->events;
%						foreach my $oevent (sort {$a->type cmp $b->type} @events) { 
%							next unless $event_settings{$oevent->id}{"speaker_tbset"};
							<option 
								value="<% $oevent->id %>" 
								<% $oevent->id == $event_id ? 'selected="selected"' : "" %>
							> <% $oevent->name %> </option>
%						}

					</select>
					</form>
				</span>

				<span class="third marno centeralign">

%					if (@rounds) { 

						<h5 class="inline marright">
							As of
						</h5>

						<form action="speakers.mhtml" method="post">
						<input type="hidden" name="event_id" value="<% $event->id %>">
						<input type="hidden" name="type" value="Speakers">

						<select 
							name     = "round_id"
							onchange = 'this.form.submit()'
							class    = "fixedmed"
						>

							<option value="" <% $type ne "Speakers" ? "selected" : "" %>></option>

<%perl>
							foreach my $oround (sort {$b->name <=> $a->name} @rounds) {
								next unless $oround && $oround->id;
								next if $oround->type eq "elim";
								next if $oround->type eq "final";

</%perl>
								<option value="<% $oround->id %>" 
									<% $round && $oround->id == $round_id ? "selected" : "" %>
								> <% $oround->realname %> </option>
%							}

						</select>
						</form>
%					}
				</span>

				<span class="tenth rightalign nospace">
%					if ($round) { 
						<a 
							class="fa fa-3x fa-file-excel-o buttonwhite greentext" 
							href="speakers_csv.mhtml?round_id=<% $round_id %>&event_id=<% $event->id %>" >
						</a>
%					}
				</span>

			</div>

%		if ($round) { 

<%perl> 
			my ($students_ref, $tbs_ref, $desc_ref, 
				$forfeit_ref, $meh, $long_desc_ref, 
				$novice_ref, $name_ref, $code_ref, 
				$school_ref, $entry_ref, $speeches_ref) 
				= $m->comp("order_speakers.mas", round => $round);

			my $i_can_haz_novice++ if scalar keys %{$novice_ref} > 0;

</%perl> 

			<div class="full">

				<span class="threequarters nospace marleftmore">

					<ul id="tabnav" class="marno padno">

						<li>
							<a 
								href="index.mhtml?event_id=<% $event->id %>&round_id=<% $round->id %>
							">Entries in Order</a>
						</li>

						<li class="selected">
							<a 
								href="speakers.mhtml?event_id=<% $event->id %>&round_id=<% $round->id %>"
							>Speakers in Order</a>
						</li>

					</ul>

				</span><span class="marno quarter semibold rightalign tabnavborder
					<% $first_has_wins ? "redtext" : "bluetext" %>"
				>
					Basis: <% $tiebreak_set->name %>
				</span>

			</div>

%			if ($first_has_wins) { 
				<div class="bigger full centeralign redtext semibold bordertopless borderbottom">

					<p>
						Warning: your tiebreaks for speaker awards, <% $tiebreak_set->name %>, 
						has wins or ballot count listed first.
					</p>

				</div>
%			}

			<table id="sortme">

				<thead>

					<tr class="yellowrow">

						<th class="smallish">
						</th>

						<th class="smallish centeralign">
							Name
						</th>

%						if ($i_can_haz_novice) { 
							<th class="smaller">
								Nov
							</th>
%						}

%						foreach my $key (@breakout_keys) { 
							<th class="smaller">
								<% $breakouts{$key}{"label"} %>
							</th>
%						}

						<th class="smallish centeralign">
							Code
						</th>

%						unless ($no_school) { 
							<th class="smallish centeralign">
								School
							</th>
%						}

%						if ($speaker_min_speeches) { 

							<th title="Number of Speeches Given" 
								class="smallish centeralign">
								#S
							</th>

							<th title="Missed Minimum Cutoff" 
								class="smallish centeralign">
								NoMin
							</th>

%						}

%						foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) { 
							<th class="smallish" title="<% ${$long_desc_ref}{$key} %>">
								<% ${$desc_ref}{$key} %>
							</th>
%						}

					</tr>

				</thead>

				<tbody>

%					my $count = 1;

%					if ($students_ref) { 

%						my $last_tied;

%						foreach my $key (sort {$a <=> $b} keys %{$students_ref}) { 

%							my $tie++ if scalar @{${$students_ref}{$key}} > 1;

%							foreach my $student_id (@{${$students_ref}{$key}}) { 

								<tr class="<% $tie ? "lirdrow " : "" %> 
									<% $tie && $last_tied ? "libordertop" : "" %>"
								>

%									undef $last_tied;

									<td class="centeralign smallish nowrap">
										<% $key %>
									</td>

									<td class="smallish nospace hover padleft" 
										title="<% $student_ballots{$student_id} %> <% ${$forfeit_ref}{$student_id} ? "\n(No Show)" : "" %>">
										<% ${$name_ref}{$student_id} %>
									</td>

									<td class="smallish nospace centeralign">
										<% ${$novice_ref}{$student_id} ? "Nov" : "" %>
									</td>

%									foreach my $key (@breakout_keys) { 
										<td class="smallish nospace centeralign">
											<% ${$breakouts{$key}{"students"}}{$student_id} 
												? $breakouts{$key}{"label"} 
												: "" %>
										</td>
%									}

									<td
										class="smallish" 
										title="<% $student_ballots{$student_id} %> <% ${$forfeit_ref}{$student_id} ? "\n(No Show)" : "" %>">
										<% ${$code_ref}{$student_id} %>
									</td>

%									unless ($no_school) { 

										<td class="smallish">
											<% $school_name{${$school_ref}{$student_id}} %>
										</td>

%									} 

%									if ($speaker_min_speeches) { 

										<td class="smallish nowrap rightalign">
											<% ${$speeches_ref}{$student_id}{"speeches"} %>
										</td>

										<td class="smallish nowrap rightalign">
											<% ${$speeches_ref}{$student_id}{"missed"} %>
										</td>

%									} 

%									foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) { 

%										my $value = ${$tbs_ref}{$student_id."-".$key};
%										$value = sprintf("%.2f", $value);
%										$value =~ s/\.(?:|.*[^0]\K)0*\z//;

										<td class="smallish nowrap rightalign">
											<% $value %>
										</td>
%									}

								</tr>

%							}

%							$last_tied++ if $tie;

%						} 

%					} 

				</tbody>

			</table>

%			if ($novice) { 
				<p class="explain">(N) designates novices</p>
%			} 

%		}
	
	</div>


