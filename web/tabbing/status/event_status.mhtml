<%args>
	$person
	$perms
	$tourn
	$tourn_settings
	$event_id => undef
	$session
	$defaults
</%args>
<%init>

	my %status;
	my %cache;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			event.id, event.name, event.abbr, event.category,
			round.id, round.name, round.label, round.flighted, round.type,
			CONVERT_TZ(round.start_time, '+00:00', tourn.tz),
			CONVERT_TZ(timeslot.start, '+00:00', tourn.tz),
			panel.id, panel.letter, panel.bye, panel.flight,
			ballot.id, ballot.judge, ballot.bye, ballot.forfeit, ballot.audit, ballot.judge_started,
			score.id, score.tag,
			flight_offset.value

		from (round, panel, ballot, event, tourn, timeslot, judge)

			left join score on score.ballot = ballot.id
				and score.tag in ('winloss', 'point', 'rank')

			left join event_setting flight_offset
				on flight_offset.event = event.id
				and flight_offset.tag = 'flight_offset'

		where event.tourn = ?
			and round.event = event.id
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.bye = 0
			and ballot.forfeit = 0
			and panel.bye = 0
			and round.event = event.id
			and event.tourn = tourn.id
			and round.timeslot = timeslot.id
			and ballot.judge = judge.id
		order by event.name, round.name
	");

	my $last_sth = $dbh->prepare("
		select
			event.id, event.name, event.abbr,
			round.id, round.name, round.label, round.type
		from round, panel
			where round.event = ?
			and round.panel = panel.id
		order by round.name desc
		limit 1
	");

	my $dashboard_events = $defaults->{dashboard_events};

	$sth->execute($tourn->id);

	while (
		my (
			$event_id, $event_name, $event_abbr, $event_category,
			$round_id, $round_name, $round_label, $flighted, $round_type,
			$round_start, $ts_start,
			$panel_id, $panel_letter, $panel_bye, $flight,
			$ballot_id, $judge, $bye, $forfeit, $audit, $judge_started,
			$score_id, $score_tag,
			$flight_offset
		) = $sth->fetchrow_array()
	) {

		if ($perms->{"owner"}
			|| $perms->{"full_admin"}
			|| $perms->{"tabbing"}
			|| ($perms->{"category_tab"} == $event_category)
			|| ($perms->{"details"} && $perms->{"details"}{$event_id})
		) {

		} else {
			next;
		}

		if ($dashboard_events) {
			next if $dashboard_events->{$event_id};
		}

		next if $cache{$event_id}{"rounds"}{$round_id}{"done_judges"}{$judge}{$flight}++;

		unless ($status{$event_id}{"name"}) {
			$status{$event_id}{"abbr"} = $event_abbr;
			$status{$event_id}{"name"} = $event_name;
		}

		unless ($status{$event_id}{"rounds"}{$round_id}{"name"}) {

			$status{$event_id}{"rounds"}{$round_id}{"number"}   = $round_name;
			$status{$event_id}{"rounds"}{$round_id}{"flighted"} = $flighted;
			$status{$event_id}{"rounds"}{$round_id}{"type"}     = $round_type;

			my $offset = $flight_offset * ($flight - 1);
			my $start_time;

			if ($round_start) {
				$start_time = $m->comp("/funclib/showtime.mas",
					string      => $round_start,
					add_minutes => $offset,
					return      => 1
				);
			} else {
				$start_time = $m->comp("/funclib/showtime.mas",
					string      => $ts_start,
					add_minutes => $offset,
					return      => 1
				);
			}

			$status{$event_id}{"rounds"}{$round_id}{$flight}{'start_time'} = $start_time;

			if ($round_label) {
				$status{$event_id}{"rounds"}{$round_id}{"label"} = $round_label;
			} else {
				$status{$event_id}{"rounds"}{$round_id}{"label"} = "Rnd ".$round_name;
			}
		}

		if ( $panel_bye
			|| $bye
			|| $forfeit
			|| $audit
		) {

			$status{$event_id}{"rounds"}{$round_id}{$flight}{"complete"}++;
			$cache{$event_id}{"finished"}++;

		} else {

			$status{$event_id}{"rounds"}{$round_id}{$flight}{"undone"} = JSON::true;

			if ($score_id) {

				$status{$event_id}{"rounds"}{$round_id}{$flight}{"scored"}++;
				$cache{$event_id}{"pending"}++;
				$status{$event_id}{"rounds"}{$round_id}{"in_progress"} = JSON::true;

			} elsif ($judge_started) {

				$status{$event_id}{"rounds"}{$round_id}{$flight}{"started"}++;
				$cache{$event_id}{"pending"}++;
				$status{$event_id}{"rounds"}{$round_id}{"in_progress"} = JSON::true;

			} else {

				$status{$event_id}{"rounds"}{$round_id}{$flight}{"unstarted"}++;
				$status{$event_id}{"rounds"}{$round_id}{"incomplete"} = JSON::true;
			}
		}
	}

	foreach my $event_id (keys %status) {

		foreach my $round_id (
			sort {
				$status{$event_id}{"rounds"}{$a}{"number"} <=> $status{$event_id}{"rounds"}{$b}{"number"}
			} keys %{$status{$event_id}{"rounds"}}
		) {

			if ($cache{$event_id}{"pending"}) {

				# This status means there are active ballots out, so delete any
				# rounds without active ballots

				unless ($status{$event_id}{"rounds"}{$round_id}{"in_progress"}) {
					delete $status{$event_id}{"rounds"}{$round_id};
				}

			} else {

				# If nothing is pending show the first unstarted round we can
				# find

				if ($status{$event_id}{"rounds"}{$round_id}{"unstarted"}) {

					unless ($cache{$event_id}{"first_unstarted"}) {
						$cache{$event_id}{"first_unstarted"} = $round_id;
					} else {
						delete $status{$event_id}{"rounds"}{$round_id};
					}

				} else {

					if ($cache{$event_id}{"first_unstarted"}) {

						delete $status{$event_id}{"rounds"}{$round_id};

					} else {

						my $last = $cache{$event_id}{"last_done"};

						if ($last) {
							delete $status{$event_id}{"rounds"}{$last};
						}

						$cache{$event_id}{"last_done"} = $round_id;
					}
				}
			}
		}
	}

	$m->clear_buffer();
	$r->content_type('application/json');

	my $json = JSON->new->allow_nonref->convert_blessed->utf8->pretty;
	$m->print($json->encode(\%status));

	$m->abort();

</%init>
