<%args>
	$tourn
	$tourn_settings
	$session
	$event_id => undef
	$by_round => undef
	$cutoff   => undef
	$names    => undef
</%args>
<%init>

	use Tab::NSDA::MemberSchool;

	my @events = sort {$a->name cmp $b->name} $tourn->events ;

	Tab::Entry->columns(TEMP => "tie");
	Tab::Entry->columns(TEMP => "key");

	my $tourn_name = $tourn->name;
	$tourn_name =~ s/[\W_]//g;

	my $filename = $tourn_name."-winner-contacts.csv"; 

	$m->clear_buffer(); 
	$r->content_type('application/csv'); 
	$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	our %school_dump;

	EVENT:
	foreach my $event (sort {$a->name cmp $b->name} $tourn->events) { 

		my $counter;

		my @rounds = sort {$b->name <=> $a->name} 
			$m->comp("/funclib/event_rounds.mas", 
				event => $event
			);

		my %student_phonetic = 
			map {$_->id => $_->phonetic} 
			$m->comp("/funclib/event_students.mas", 
				event => $event
		);

		my $final;
		my @elims;
		my $last_prelim;

		foreach my $round (@rounds) { 

			$final = $round if $round->type eq "final";

			push (@elims, $round) if $round->type eq "elim";

			$last_prelim = $round 
				if $round->type ne "elim" 
				&& $round->type ne "final" 
				&& not defined $last_prelim;
		}

		my %used;

		Tab::Panel->set_sql( empties => " 
			select distinct panel.id
			from ballot, panel, round, entry
			where round.event = ? 
			and panel.round = round.id
			and ballot.panel = panel.id
			and ballot.entry = entry.id
			and ballot.bye != 1
			and ballot.forfeit != 1
			and panel.bye != 1
			and entry.active = 1
			and entry.dq != 1
			and ballot.audit != 1
		");

		my @empties = Tab::Panel->search_empties($event->id);

		$m->print("\n\n");
		$m->print($event->name);
		$m->print("\n");
		$m->print("Top ".$cutoff);
		$m->print("\n\n");

		my $notfirst;
		my $did;
		my $last;

		my %id_entry = map {$_->id => $_} $event->entries;

		my @outs = ($final, @elims);
		my %round_entries = ();
		my %entry_round = ();
		my %done;

		foreach my $round (@outs) { 

			next unless $round;

			my @entries;

			my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref) 
				= $m->comp(
					"/tabbing/results/order_entries.mas",
					round => $round
				);

			unless ($did && $did == $last) { 
				@entries = $m->comp(
					"/funclib/round_entries.mas",
					round => $round
				);
			}


			if ($cutoff) { 

				my %entry_by_id = map {$_->id => $_} @entries;
				my @show;

				my @keys = sort {$a <=> $b} keys %{$entries_ref};

				foreach my $key (@keys) { 

					my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
		
					foreach my $entry_id (@{${$entries_ref}{$key}}) { 
						next if $done{$entry_id}++;
						$counter++;
						$counter-- if $tie;
						next if $counter > $cutoff;
						push @show, $entry_by_id{$entry_id};

					}

				}
		
				@entries = @show;
			}

			@entries = sort {$a->name cmp $b->name} @entries if $names;

			foreach my $entry (@entries) { 
				next if $entry_round{$entry->id};
				$entry_round{$entry->id} = $round->id;
				push @{$round_entries{$round->id}{"array"}}, $entry;
			}

			$round_entries{$round->id}{"ref"} = $entries_ref;

		}

		@outs = reverse @outs;

		foreach my $round (@outs) { 

			next unless $round;
			next unless $round_entries{$round->id}{"array"};

			my @entries = @{$round_entries{$round->id}{"array"}};

			my $entries_ref = $round_entries{$round->id}{"ref"};

			$last = $round->id;
			my $type = $round->type;
			my $label = $round->label;

			next unless @entries || keys %{$entries_ref};

			my @keys = sort {$a <=> $b} keys %{$entries_ref};
			@keys = reverse @keys;

			my @round_entries;
			my %entry_tie;
			my %entry_key;

			foreach my $key (@keys) { 

				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
	
				foreach my $entry_id (@{${$entries_ref}{$key}}) { 
					next unless $entry_round{$entry_id} == $round->id;
					$entry_tie{$entry_id} += $tie;
					$entry_key{$entry_id} = $key;
					push @round_entries, $entry_id;
				}
			}

			foreach my $entry_id (@round_entries) { 

				$did = $round->id;
				next if $used{$entry_id}++;
				my $entry = $id_entry{$entry_id};

				$entry->tie($entry_tie{$entry->id});
				$entry->key($entry_key{$entry->id});

				my $tag;
				$tag = $label if $round->type eq "elim";

				print_entry($entry, $round->type, $tag, $tourn_settings);

			}

			foreach my $entry (@entries) { 

				next if $used{$entry->id}++;

				$did = $round->id;

				$entry->tie($entry_tie{$entry->id});
				$entry->key($entry_key{$entry->id});
				print_entry($entry, $round->type, $label, $tourn_settings);

			}

		}

		unless ($final || @elims) { 

			my @rounds = sort {$b->name <=> $a->name} $event->rounds;
			my $round = shift @rounds;

			my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref) = 
				$m->comp("/tabbing/results/order_entries.mas", 
					round => $round
				);

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				
				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
	
				foreach my $entry_id (@{${$entries_ref}{$key}}) { 

					next if $used{$entry_id}++;
					my $entry = $id_entry{$entry_id};
					next unless $entry;

					$entry->tie($tie);
					print_entry($entry, '', '', $tourn_settings);

				}
			}

		}

	}

	undef %school_dump;

	$m->flush_buffer();
	$m->abort();

	sub print_entry {

		my ($entry, $type, $tag, $tourn_settings) = @_;

		my @students = $entry->students;

		$m->print('"');

		if ($tag && $type ne "elim") {
			
			$m->print("Top Novice") if $tag eq "TN";
			$m->print("Honorable Mention") if $tag eq "HM";

		} elsif ($type eq "final") { 

			my $place = Lingua::EN::Numbers::Ordinate::ordinate($entry->key);
			$m->print($place);

		} elsif ($type eq "elim") { 

			$m->print($tag);

		} else { 

			$m->print($type);
		}
		
		foreach my $student (@students) { 
			$m->print('","');
			$m->print($student->first.'","'.$student->last) ;
		}

		$m->print('","');

		my $nsda_school = $school_dump{$entry->school->id};

		unless ($nsda_school) { 
			$nsda_school = Tab::NSDA::MemberSchool->retrieve($entry->school->chapter->nsda);
			$school_dump{$entry->school->id} = $nsda_school;
		}

		if ($nsda_school) { 

			$m->print($nsda_school->school_name);
			$m->print('","');
			$m->print($nsda_school->school_addr);
			$m->print('","');
			$m->print($nsda_school->school_addr2);
			$m->print('","');
			$m->print($nsda_school->school_city);
			$m->print('","');
			$m->print($nsda_school->school_state);
			$m->print('","');
			$m->print($nsda_school->school_zip);
			$m->print('","');

			my $district = $entry->school->district;

			if ($district) { 
				$m->print($district->name);
				$m->print('","');
			}

			my @advisors = $m->comp(
				"/funclib/nsda_school_advisors.mas", 
				chapter => $entry->school->chapter
			);

			my %advisors_by_type = map {$_->advisor_type => $_} @advisors;

			$m->print($advisors_by_type{"Advisor"}->uemail) if $advisors_by_type{"Advisor"};
			$m->print('","');

			my $coach_name = $entry->setting("nsda_awards_coach_names");
			$coach_name = $entry->school->chapter->setting('coaches') unless $coach_name;

			$coach_name =~ s/ and /,/g;
			$coach_name =~ s/ & /,/g;

			my @coach_names = split(/\, /, $coach_name);

			foreach (1 .. 4) { 
				if (@coach_names) {
					my $coach = shift @coach_names;
					$m->print($coach);
					$m->print('","');
				}
			}

			my %principal = $m->comp(
				"/funclib/nsda_school_advisors.mas", 
				chapter   => $entry->school->chapter,
				principal => 1
			);


			$m->print($principal{"title"});
			$m->print('","');

			$m->print($principal{"first"});
			$m->print('","');

			$m->print($principal{"last"});
			$m->print('","');

			$m->print($principal{"email"});

		}

		$m->print('"');
		$m->print("\n");

	}


</%init>

