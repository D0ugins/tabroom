<%args>
	$tourn
	$session
	$event_id   => undef
	$round_name => undef
</%args>
<%init>

	use Math::Round;

	my $event = Tab::Event->retrieve($event_id);
	my $exclude_round = $event->rounds(
		name => $round_name
	)->first;

	my $exclude_number = $exclude_round->name if $exclude_round;
	my $label;

	unless ($exclude_number) { 
		$label          = "All Rounds";
		$exclude_number = 314159;
	} else { 
		$label = "Results up to round ".$exclude_number;
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare(" 
		select entry.id, 
			entry.code as entry_code,
			GROUP_CONCAT(
				distinct(CONCAT(student.first,' ',student.last))
				SEPARATOR ' & '
			) as entryname,
			school.name, school.state,
			round.name, 
			rank.tag, rank.value,
			winloss.tag, winloss.value
		from (entry, round, panel, ballot, school, entry_student, student)

			left join score rank on rank.tag = 'rank' 
				and rank.ballot = ballot.id

			left join score winloss on winloss.tag = 'ballot' 
				and winloss.ballot = ballot.id

		where entry.event = ?
		and entry.id      = ballot.entry
		and entry.active  = 1
		and ballot.panel  = panel.id
		and panel.round   = round.id
		and round.name < ?
	
		and entry.school = school.id
		and entry_student.entry = entry.id
		and entry_student.student = student.id

		and not exists ( 
			select advanced.id
			from ballot advanced, panel advpanel
			where advpanel.round = ? 
			and advpanel.id = advanced.panel
			and advanced.entry = entry.id
		)
		group by ballot.id
	");

	$sth->execute($event->id, $round_name, $exclude_number);

	my %results;
	my $max_round;

	while (
		my ($entry_id, 
			$entry_code,
			$entry_name,
			$school_name, $school_state,
			$round_name, 
			$rank_tag, $rank_value, 
			$winloss_tag, $winloss_value
		) = $sth->fetchrow_array()
	) { 

		$results{$entry_id}{"entry_code"} = $entry_code;
		$results{$entry_id}{"entry_name"} = $entry_name;
		$results{$entry_id}{"school_name"} = $school_name;
		$results{$entry_id}{"school_state"} = $school_state;

		$results{$entry_id}{$round_name} .= " " if $results{$entry_id}{$round_name};

		if ($winloss_tag) { 
			$results{$entry_id}{$round_name} .= "W" if $winloss_value == 1; 
			$results{$entry_id}{$round_name} .= "L" if $winloss_value == 0; 
		} elsif ($rank_tag) { 
			$results{$entry_id}{$round_name} .= $rank_value;
		}
		$max_round = $round_name if $max_round < $round_name;
	}

    my $name = $event->name;
    $name =~ s/[\W_]//g;

    my $filename = "FinalResults-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;
    `rm -f $filepath.*`;

    $m->comp("/funclib/printout.mas", 
        tourn       => $tourn,
        filename    => $filename,
        head        => 1,
		superwide   => 1,
		footer_text => $event->name." Results",
		no_footer   => 1,
        array       => "1.1",
		landscape   => 1
    );  

    open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\Large \\textsb{".$event->name."} \\hfill \\textsb{Results Report} \n";
    print TEXOUT "\\medskip\n";
    print TEXOUT "\\newline\n";

	my $tabular =  "\\begin{tabular}{p{.15in}p{1.25in}p{1.2in}p{.1in}";

	foreach my $prelim (1 .. 6) { 
		$tabular .= "p{.15in}";
	}

	foreach my $round (7 .. $max_round) { 
		next if $round > $max_round - 2;
		next if $round > $max_round - 3 && $event->type eq 'speech';
		$tabular .= "p{.2in}";
	}

	$tabular .= "p{.35in}";
	$tabular .= "p{.35in}";
	$tabular .= "p{.75in}";
	$tabular .= "}\n";

	print TEXOUT "\\tiny\n";
	my $switch;

	foreach my $entry (keys %results) { 

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2;
		print TEXOUT Tab::texify($results{$entry}{"entry_code"})." & ";
		print TEXOUT Tab::texify($results{$entry}{"entry_name"})." & ";
		print TEXOUT Tab::texify($results{$entry}{"school_name"})." & ";
		print TEXOUT Tab::texify($results{$entry}{"school_state"});

		foreach my $round_name (1 ..$max_round) { 
			print TEXOUT "& \\tt ".$results{$entry}{$round_name};
		}
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";
	}

    $m->comp("/funclib/printout.mas",
        tourn     => $tourn,
        filename  => $filename,
        landscape => 1,
        tail      => 1
    );

</%init>
