<%args>
	$tourn
	$session
	$tourn_settings
	$event_id => undef
	$sort_by => "audit"
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);

	$m->redirect("final_wins.mhtml?event_id=$event_id") if $event->type eq "debate";

	my $final = $event->rounds(
		type => "final"
	)->first;

	my @elims = 
		sort {$b->name <=> $a->name} 
		$event->rounds(type => "elim");

	my $last_elim = $elims[0] if @elims;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare(" 
		select entry.id, 
			entry.code, 
				GROUP_CONCAT(
					CONCAT(student.first,' ',student.last)
					SEPARATOR ' & '
				) as entryname,
			school.name, school.state,
			round.id, round.name, 
			rank.tag, rank.value,
			winloss.tag, winloss.value,
			ballot.judge, ballot.speakerorder
		from (entry, round, panel, ballot, school, entry_student, student)

		left join score rank on rank.tag = 'rank' 
			and rank.ballot = ballot.id

		left join score winloss on winloss.tag = 'ballot' 
			and winloss.ballot = ballot.id

		where entry.event = ? 
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = round.id
			and entry.school = school.id
			and (
				round.type = 'elim'
				or round.type = 'final'
			)

			and entry_student.entry = entry.id
			and entry_student.student = student.id

		group by ballot.id
		order by round.name, ballot.judge, ballot.speakerorder
	");

	$sth->execute($event->id);

	my %entries;
	my %results;
	my $max_round;

	while (
		my ($entry_id, $entry_code, $entry_name, $school_name, $school_state,
			$round_id, $round_name, 
			$rank_tag, $rank_value, 
			$winloss_tag, $winloss_value,
			$judge, $order
		) = $sth->fetchrow_array()
	) { 

		if ($results{$entry_id}{$round_name} && $round_name == 13) { 
			$results{$entry_id}{$round_name} .= " \\hspace{1mm} ";
		} else { 
			$results{$entry_id}{$round_name} .= " \\hspace{.1mm}";
		}

		if ($winloss_tag) { 
			$results{$entry_id}{$round_name} .= "W" if $winloss_value == 1; 
			$results{$entry_id}{$round_name} .= "L" if $winloss_value == 0; 
		}

		$results{$entry_id}{$round_name} .= $rank_value if $rank_tag;

		if ($last_elim 
			&& $round_id == $last_elim->id
			&& (not defined $results{$entry_id}{"semis"})
		) { 
			$results{$entry_id}{"semis"}++;
			push @{$results{"semis"}}, $entry_id;
		}

		if ($final 
			&& $round_id == $final->id
			&& (not defined $results{$entry_id}{"finals"})
		) { 
			push @{$results{"finals"}}, $entry_id;
			$results{$entry_id}{"finals"}++;
		}

		$max_round = $round_name if $max_round < $round_name;

		$entries{$entry_id}{"code"}      = $entry_code;
		$entries{$entry_id}{"sort_code"} = $order;

		$entries{$entry_id}{"name"}      = $entry_name;
		$entries{$entry_id}{"state"}     = $school_state;
		$entries{$entry_id}{"school"}    = $school_name;

	}

	my @semis_results = $m->comp(
		"/tabbing/results/order_entries.mas",
		round => $last_elim
	) if $last_elim;

	my $semis_ref = pop @semis_results if @semis_results;
	my @semis_tiebreak_keys = sort {$a <=> $b} keys %{$semis_ref->{"tier_description"}};

	if (${$semis_ref}{"by_place"}) {
		foreach my $key (sort {$a <=> $b} keys %{${$semis_ref}{"by_place"}}) {
			foreach my $entry_id (@{${${$semis_ref}{"by_place"}}{$key}}) {
				$entries{$entry_id}{"semis_place"} = $key;
			}
		}
	}

	my @finals_results = $m->comp(
		"/tabbing/results/order_entries.mas",
		round => $final
	) if $final;

	my $finals_ref = pop @finals_results if @finals_results;
	my @finals_tiebreak_keys = sort {$a <=> $b} keys %{$finals_ref->{"tier_description"}};

	if (${$finals_ref}{"by_place"}) {
		foreach my $key (sort {$a <=> $b} keys %{${$finals_ref}{"by_place"}}) {
			foreach my $entry_id (@{${${$finals_ref}{"by_place"}}{$key}}) {
				$entries{$entry_id}{"finals_place"} = $key;
			}
		}
	}

	my $name = $event->name;
	$name =~ s/[\W_]//g;

    my $filename = "FinalResults-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;
    `rm -f $filepath.*`;

    $m->comp("/funclib/printout.mas", 
        tourn     => $tourn,
        filename  => $filename,
        head      => 1,
        array     => "1.8",
        landscape => 1,
    );  

    open (TEXOUT, ">>$filepath.tex");

	print TEXOUT "\\strut \\hfill \\huge \\textsb{".$event->name."} \\hfill \\strut";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\strut \\hfill \\Large ".$event->setting("result_description")." \\hfill \\strut";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\scriptsize\n";
	print TEXOUT "\\begin{tabular}{p{.40in}p{2in}p{1.25in}p{.3in}p{.40in}p{.40in}p{.40in}p{.40in}p{.45in}p{.45in}p{.2in}p{.2in}p{.4in}}\n";

	print TEXOUT "\\rowcolor[rgb]{1,.96,.66}\[5.5pt\]\[5.5pt\]\n";
	foreach my $header ("Code", "Name", "School", "State") { 
		print TEXOUT "\\textsb{".$header."} & ";
	}

	foreach my $round (7 .. 12) { 
		print TEXOUT "\\textsb{Round ".$round."} & ";
	}

	print TEXOUT "\\textsb{7-12} & \\textsb{11-12} & \\textsb{Place} \\\\";

	my $switch;

	foreach my $entry_id (
		sort {$entries{$b}{"semis_place"} <=> $entries{$a}{"semis_place"}}
		@{$results{"semis"}}
	) { 

		print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2; 	

		print TEXOUT Tab::texify($entries{$entry_id}{"code"}); 
		print TEXOUT " & ";
		print TEXOUT Tab::texify($entries{$entry_id}{"name"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($entries{$entry_id}{"school"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($entries{$entry_id}{"state"});
		print TEXOUT " & ";

		foreach my $round (7 .. 12) { 
			print TEXOUT "\\footnotesize\n";
			print TEXOUT $results{$entry_id}{$round}." & ";
		}

		print TEXOUT "\\footnotesize\n";
		print TEXOUT ${$semis_ref}{"tiebreak"}{1}{$entry_id}." & ";
		print TEXOUT "\\footnotesize\n";
		print TEXOUT ${$semis_ref}{"tiebreak"}{2}{$entry_id}." & ";
		print TEXOUT "\\footnotesize\n";

		unless ($results{$entry_id}{"finals"}) { 
			print TEXOUT "\\hfill \\textsb{".Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"semis_place"}))."} \\hfill \\strut ";
		}
		print TEXOUT "\\\\ \n";
	}

	print TEXOUT "\\end{tabular}\n";

	print TEXOUT "\\bigskip\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\strut \\hfill \\Large Finalists \\hfill \\strut";
	print TEXOUT "\\medskip\n";
	print TEXOUT "\\newline\n";

	print TEXOUT "\\footnotesize\n";
	print TEXOUT "\\begin{tabular}{p{.40in}p{1.75in}p{1.25in}p{.30in}p{1.75in}p{.50in}p{.50in}p{.50in}p{.40in}p{.40in}}\n";

	print TEXOUT "\\rowcolor[rgb]{1,.96,.66}\[5.5pt\]\[5.5pt\]\n";

	foreach my $header ("Code", "Name", "School", "State") { 
		print TEXOUT "\\textsb{".$header."} & ";
	}

	print TEXOUT "\\textsb{ Finals } & ";

	print TEXOUT "\\textsb{All Finals} & \\textsb{Finals -1H\/L} & \\textsb{Elims} & \\textsb{Total} & \\textsb{Place} \\\\";

	my @results;

	if ($sort_by eq "audit") { 
		@results = sort {$entries{$a}{"sort_code"} <=> $entries{$b}{"sort_code"}} @{$results{"finals"}};
	} else { 
		@results = sort {$entries{$b}{"finals_place"} <=> $entries{$a}{"finals_place"}} @{$results{"finals"}};
	}

	foreach my $entry_id (@results) { 

		print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2; 	

		print TEXOUT Tab::texify($entries{$entry_id}{"code"}); 
		print TEXOUT " & ";
		print TEXOUT Tab::texify($entries{$entry_id}{"name"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($entries{$entry_id}{"school"});
		print TEXOUT " & ";
		print TEXOUT Tab::texify($entries{$entry_id}{"state"});
		print TEXOUT " & ";

		print TEXOUT "\\footnotesize\n";
		print TEXOUT $results{$entry_id}{13}." & ";

		print TEXOUT "\\footnotesize\n";
		print TEXOUT ${$finals_ref}{"tiebreak"}{7}{$entry_id}." & ";
		print TEXOUT "\\footnotesize\n";
		print TEXOUT ${$finals_ref}{"tiebreak"}{2}{$entry_id}." & ";
		print TEXOUT "\\footnotesize\n";
		print TEXOUT ${$semis_ref}{"tiebreak"}{1}{$entry_id}." & ";
		print TEXOUT "\\footnotesize\n";
		print TEXOUT ${$finals_ref}{"tiebreak"}{1}{$entry_id}." & ";
		print TEXOUT "\\footnotesize\n";

		unless ($results{$entry_id}{"finals"}) { 
			print TEXOUT "\\textsb{".Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"finals_place"}))."}";
		}
		print TEXOUT "\\\\ \n";
	}

	print TEXOUT "\\end{tabular}\n";

    $m->comp("/funclib/printout.mas",
        tourn     => $tourn,
        filename  => $filename,
        landscape => 1,
        tail      => 1
    );

</%init>
