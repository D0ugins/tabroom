<%args>
	$round
	$section         => undef
	$num_qualifiers  => undef
	$tiebreak_set    => undef
	$threshold       => undef
	$filename        => undef
	$ballots         => undef
	$qualifiers      => undef
	$vacated         => undef
	$alternates      => undef
	$nsda_districts  => undef
	$nsda_nats       => undef
	$none_above      => undef
	$start_placement => 1
	$exclude         => undef
	$nofinish        => undef
	$noheader        => undef
	$limit           => undef
</%args>
<%init>

	use Math::Round qw(nearest);

	return unless $round;

	$tiebreak_set = $round->tiebreak_set unless $tiebreak_set;

	return unless $tiebreak_set;

	my $equal_elims++ 
		if $tiebreak_set->setting("equal_elims") 
		&& $round->type eq "elim";

	my (@results) = $m->comp(
		"/tabbing/results/order_entries.mas", 
			long_names   => 1,
			round        => $round,
			section      => $section,
			tiebreak_set => $tiebreak_set,
			all_entries  => $nsda_districts
	);

	my $entries_ref = pop @results if @results;

	return unless $entries_ref;

	my $event = $round->event;
	my %event_settings = $event->all_settings;

	foreach my $key (keys %{$none_above}) {

		if ($none_above->{$key} > $round->name) { 
			$exclude->{$key}++;
			$start_placement++;
		} 

	}

	my $qual_string = "Qualifiers" if $nsda_districts;
	$qual_string = "Placers" if $nsda_nats;

	my $round_robin++ 
		if $event_settings{"round_robin"} 
		&& $round->type ne "elim" 
		&& $round->type ne "final";

    my $novice = $event_settings{"top_novice"};

	# How does this even happen anyway?
	undef $novice if $novice eq "none"; 

	if ($novice) { 
		my @novii = $m->comp("/funclib/event_novii.mas", event => $event);
		my %novices = map {$_->id => 1} @novii;
		${$entries_ref}{"novice"} = \%novices;
	}

    my %breakouts = ();

    if ($event_settings{"breakouts"}) {

        foreach my $breakout (1 .. $event_settings{"breakouts"}) {

            $breakouts{$breakout}{"name"} = $event_settings{"breakout_".$breakout."_label"};

            my @settings = $m->comp(
				"/funclib/event_entry_settings.mas",
                event => $event,
                tag   => "breakout_".$breakout
            );

            foreach my $setting (@settings) {
                $breakouts{$breakout}{$setting->entry->id}++;
            }

        }

    }

    my $codes = $event_settings{"code_style"} if $event;

    my $no_school++ if ($codes eq "school_number"
        || $codes eq "school_names"
        || $codes eq "initials"
        || $codes eq "school_name_only"
        || $codes eq "schoolname_code"
        || $codes eq "full_initials");

	my @schools = $m->comp(
		"/funclib/event_schools.mas", 
		event => $event
	);

	my %school_name = map {$_->id => &Tab::short_name($_->name)} @schools;

    my %entry_ballots = $m->comp(
		"/funclib/round_ballot_strings.mas", 
		round      => $round,
		simple     => "forrestgump"
	) if $ballots;

	my %cutoff;

	my @tiebreak_keys = 
		sort {$a <=> $b} 
		keys %{$entries_ref->{"tier_description"}};

	my $cutoff_key = $tiebreak_keys[0] 
		if @tiebreak_keys && $threshold; 
	
	my $mark_ties++ 
		if scalar @tiebreak_keys > 1;

	my $filepath = $Tab::file_root."tmp/".$filename;
	open (TEXOUT, ">>$filepath.tex");

	my $tabular = "\\begin{tabular}{";
	
	$tabular .= "p{.25in}" if $nsda_districts;
	
	$tabular .= "p{.25in}p{1.0in}";

	my $reserve = 4.5;
	$reserve = 4 if $nsda_districts;
	$reserve = 3.5 if $ballots;

	unless ($codes eq "names" 
		|| $codes eq "last_names" 
		|| $codes eq "code_name" 
		|| $codes eq "names_lastfirst") { 

		$tabular .= "p{5in}";
		$reserve -= 1;
	}

	$tabular .= "p{.25in}" if $novice;
	$reserve -= .25 if $novice;

	foreach my $break (keys %breakouts) { 
		$tabular .= "p{.25in}";
		$reserve -= .25;
	}


	unless ($no_school) { 
		$tabular .= "p{1in}";
		$reserve -= 1;
	}

	if ($equal_elims || $round_robin) { 
		$tabular .= "p{.25in}";
		$tabular .= "p{.25in}";
		$reserve -= .5;
	}

	if ($nsda_districts || $nsda_nats) { 
		$tabular .= "p{.25in}";
		$reserve -= .25;
	}

	my $key_count = scalar @tiebreak_keys;
	my $key_length = nearest(.01, ($reserve / $key_count)) if $key_count;

	foreach my $key (@tiebreak_keys) { 
		$tabular .= "p{".$key_length."in}";
	}

	if ($ballots) { 
		$tabular .= "p{1in}";
	}

	$tabular .= "}\n";

	unless ($noheader) { 

		unless ($nsda_nats) { 

			print TEXOUT "\\begin{minipage}[c]{6.75in}\n";
			print TEXOUT "\\strut\n";
			print TEXOUT "\\smallskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\noindent\n";

			if ($nsda_districts) { 

				if ($section) { 

					print TEXOUT "\\strut\n";
					print TEXOUT "\\hfill\n";

					print TEXOUT "{\\Large \\bf ";

						if ($event->type eq "congress") {
							print TEXOUT "Chamber";
						}

						if ($event->type eq "speech") {
							print TEXOUT "Section";
						}

						if ($event->type ne "speech" && $event->type ne "congress") {
							print TEXOUT "Debate";
						}

						print TEXOUT " ".Tab::texify($section->letter)." } \n";

					print TEXOUT "\\hfill\n";
					print TEXOUT "\\strut\n";
					print TEXOUT "\\medskip\n";
					print TEXOUT "\\newline\n";

				} else {

					print TEXOUT "{\\large \\bf In ".&Tab::texify($round->realname)." } \n";
					print TEXOUT "\\smallskip\n";
					print TEXOUT "\\newline\n";

				}

			} else { 

				print TEXOUT "\\strut\n";
				print TEXOUT "\\hfill\n";
				print TEXOUT "{\\bf \\Large ".&Tab::texify($event->name)." Prelim Seeds }\n";
				print TEXOUT "\\strut\n";
				print TEXOUT "\\hfill\n";

				print TEXOUT "\\smallskip\n";
				print TEXOUT "\\newline\n";

				print TEXOUT "\\strut\n";
				print TEXOUT "\\hfill\n";
				print TEXOUT "{\\large after ".&Tab::texify($round->realname)." } \n";
				print TEXOUT "\\strut\n";
				print TEXOUT "\\hfill\n";
				print TEXOUT "\\medskip\n";
				print TEXOUT "\\newline\n";

			}

			print TEXOUT "\\end{minipage}\n";
		}

		print TEXOUT "\\raggedright\n";
		print TEXOUT "\\scriptsize\n";


		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";

		print TEXOUT " & " if $nsda_districts;
		print TEXOUT " Place ";

		unless ($codes eq "names" 
			|| $codes eq "last_names" 
			|| $codes eq "code_name" 
			|| $codes eq "names_lastfirst"
		) { 
			print TEXOUT " & Code ";
		}

		print TEXOUT " & Name ";

		print TEXOUT " & Nov " if $novice;

		foreach my $break (keys %breakouts) { 
			print TEXOUT " & ". &Tab::texify($breakouts{$break}{"name"});
		}

		print TEXOUT " & School " unless $no_school;

		if ($equal_elims) { 
			print TEXOUT " & SctRk";
			print TEXOUT " & Sect";
		} elsif ($round_robin) { 
			print TEXOUT " & PodRk";
			print TEXOUT " & Pod";
		} elsif ($nsda_districts || $nsda_nats) { 
			print TEXOUT " & \\tiny LstRnd ";
		}

		foreach my $key (@tiebreak_keys) { 
			print TEXOUT " & \\truncate{".$key_length."in}{\\tiny ";
			print TEXOUT &Tab::texify(${$entries_ref}{"tier_description"}{$key})." } ";
		}

		print TEXOUT " & Raw Scores " if $ballots;

		print TEXOUT "\\\\ \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

	}

	my $count = $start_placement;
	$count = 1 unless $count;
	my $alts;

	if (${$entries_ref}{"by_place"}) { 

		my $last_tied;

		foreach my $key (sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) { 

			my $tie++ if scalar @{${${$entries_ref}{"by_place"}}{$key}} > 1;
			
			my $place = $start_placement if $start_placement;

			undef $tie 
				if $round->type eq "elim" 
				&& $event->type ne "speech" 
				&& $event->type ne "congress";

			my $did;

			foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) { 

				next if $exclude && $exclude->{$entry_id};
				next if $limit && $count > $limit;

				$did++;

				undef $last_tied;

				print TEXOUT $tabular;

				print TEXOUT "\\hline\n \\\\ \n" 
					if $tie 
					&& $last_tied 
					&& $mark_ties;

				$count++;

				print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $count % 2;

				if ($nsda_districts) { 

					if ($section && $num_qualifiers > 0) { 

						print TEXOUT "Q";
						$num_qualifiers--;

					} elsif ($section) { 
	
						$alts++;
						print TEXOUT "\\truncate[.]{.25in}{\\scriptsize ";
						print TEXOUT Tab::texify(
							Lingua::EN::Numbers::Ordinate::ordinate(
								$alts
							)
						)." Alt";
						print TEXOUT " }\n";

					} elsif ($qualifiers && $qualifiers->{$entry_id}{"place"}) { 

						print TEXOUT "Q";

					} elsif ($vacated && $vacated->{$entry_id}{"place"}) { 

						print TEXOUT "Vac";

					} elsif ($alternates && $alternates->{$entry_id}{"place"}) { 

						print TEXOUT "\\truncate[.]{.25in}{\\scriptsize ";
							print TEXOUT Tab::texify(
								Lingua::EN::Numbers::Ordinate::ordinate(
									$alternates->{$entry_id}{"place"}
								)
							)." Alt";
						print TEXOUT " }\n";

					}

					print TEXOUT " & ";

				}

				print TEXOUT " T-" if $tie;
				print TEXOUT " $place ";

				unless ($codes eq "names" 
					|| $codes eq "last_names" 
					|| $codes eq "code_name" 
					|| $codes eq "names_lastfirst"
				) { 
					print TEXOUT " & \\scriptsize ". &Tab::texify($entries_ref->{"code"}{$entry_id});
				}

				print TEXOUT " & \\truncate{1in}{ \\scriptsize ";
				print TEXOUT &Tab::texify(${$entries_ref}{"name"}{$entry_id});
				print TEXOUT "} ";
						
				if ($novice) { 
					print TEXOUT " & ";
					print TEXOUT " Nov " if ${$entries_ref}{"novice"}{$entry_id};
				}

				foreach my $break (keys %breakouts) { 
				
					print TEXOUT " & ". &Tab::texify($breakouts{$break}{"name"}) 
						if $breakouts{$break}{$entry_id};

				}

				unless ($no_school) { 
					print TEXOUT " & \\truncate{1in}{ \\scriptsize ". 
						&Tab::texify($school_name{${$entries_ref}{"school_id"}{$entry_id}})."}";
				}

				if ($equal_elims) { 
					print TEXOUT " & ".&Tab::texify(${$entries_ref}{"section_rank"}{$entry_id});
					print TEXOUT " & ".&Tab::texify(${$entries_ref}{"section"}{$entry_id});
				}
				
				if ($round_robin) { 
					print TEXOUT " & ".&Tab::texify(${$entries_ref}{"pod_rank"}{$entry_id});
					print TEXOUT " & ".&Tab::texify(${$entries_ref}{"pod"}{$entry_id});
				}
			
				if ($nsda_districts || $nsda_nats) { 
					print TEXOUT " & ".&Tab::texify($round->name);
				}

				foreach my $key (@tiebreak_keys) { 

					my $value = ${$entries_ref}{"tiebreak"}{$key}{$entry_id};

					if ($key == $cutoff_key) {
						$cutoff{$entry_id}++ if $value >= $threshold;
					}

					my $desc = ${$entries_ref}{"tier_description"}{$key};

					$value =~ s/\.(?:|.*[^0]\K)0*\z//;
					$value = sprintf("%.2f", $value) 
						unless substr($desc,0,2) eq "Rk" 
						|| substr($desc,0,3) eq "PRk" 
						|| substr($desc,0,3) eq "Win" 
						|| substr($desc,0,8) eq "Prev Win" 
						|| substr($desc,0,4) eq "Rnds" 
						|| substr($desc,0,4) eq "Loss" 
						|| substr($desc,0,3) eq "Dwn" 
						|| substr($desc,0,4) eq "CDwn" 
						|| substr($desc,0,3) eq "H2H" 
						|| substr($desc,0,2) eq "JP"
						|| substr($desc,0,3) eq "Bal"
						|| substr($desc,1,3) eq "Rk" 
						|| substr($desc,1,4) eq "PRk" 
						|| substr($desc,1,4) eq "Win" 
						|| substr($desc,1,9) eq "Prev Win" 
						|| substr($desc,1,5) eq "Rnds" 
						|| substr($desc,1,5) eq "Loss" 
						|| substr($desc,1,4) eq "Dwn" 
						|| substr($desc,1,5) eq "CDwn" 
						|| substr($desc,1,4) eq "H2H" 
						|| substr($desc,1,3) eq "JP"
						|| substr($desc,1,4) eq "Bal";

					print TEXOUT " & {";
					print TEXOUT "\\color{red} " if $cutoff{$entry_id};
					print TEXOUT &Tab::texify($value);
					print TEXOUT " } ";

				}

				if ($ballots) { 
					
					print TEXOUT " & \\tt \\tiny ".&Tab::texify($entry_ballots{$entry_id});

				}

				print TEXOUT "\\end{tabular}\n";
				print TEXOUT "\\newline\n";

			}

			$start_placement += $did;
			$last_tied++ if $tie;

		} 

	}

	return;

</%init>

