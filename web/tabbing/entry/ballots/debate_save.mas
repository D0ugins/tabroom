<%args>
	$person
	$panel_id => undef
	$judge_id => undef
</%args>
<%init>

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

	my $now = DateTime->now;

    unless ($panel && $judge) { 
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("../index.mhtml?err=$err");
    }   

	my $round = $panel->round;
	
    unless ($round && $round->tiebreak_set) { 
        my $err = "No round or tiebreakers found for that judge";
        $m->redirect("../index.mhtml?err=$err");
    }   

	my $event = $round->event;
	my %event_settings = $event->all_settings();

	my $no_lpw++ if $event_settings{"no_lpw"};

    my @students = $m->comp(
		'/funclib/panel_students.mas', 
		panel => $panel,
		drops => 1
	);

	my %student_entry = ();
	foreach my $student (@students) { 
		$student_entry{$student->id} = $student->entry;
	}

    my @ballots = Tab::Ballot->search( 
		judge => $judge->id, 
		panel => $panel->id
	);

	my @scores = $m->comp(
		"/funclib/panel_scores.mas", 
		panel => $panel, 
		judge => $judge
	);

	my %student_ballot = ();

	foreach my $student (@students) { 
		my $mine;
		foreach my $ballot (@ballots) {

			$mine = $ballot if $ballot 
				&& $ballot->entry 
				&& $student 
				&& $ballot->entry->id == $student_entry{$student->id};

			last if $mine;
		}
		$student_ballot{$student} = $mine->id if $mine;
	}

    my $type = $event->type;

	foreach my $ballot (@ballots) { 
		if ($ARGS{"rfd"}) { 
			Tab::Score->create({
				tag     => "rfd",
				ballot  => $ballot->id,
				content => $ARGS{"rfd"}
			});
		}
	}

	my %tb_types = $m->comp(
		"/funclib/tiebreak_types.mas", 
		round => $round
	);

	my $team_points++ if $tb_types{"points"} 
		&& $event_settings{"team_points"};

    my $tourn = $judge->category->tourn;

    my $min_points = $event_settings{"min_points"};
    my $max_points = $event_settings{"max_points"};

	$min_points = 0 unless $min_points;
	$max_points = 30 unless $max_points;

    my $point_increments = $event_settings{"point_increments"};
    my $point_ties = $event_settings{"point_ties"};

	my $errs;

	my %entry_values = ();
	my %student_values = ();

	my %ballot_bye;
	my %ballot_forfeit;
	
	foreach my $ballot (@ballots) { 
		$errs = "Error type: HYC+EI2.  (Have Your Cake And Eat It Too).  <br /> You assigned ".$ballot->entry->code." a bye and a forfeit.  One or the other, plz." if $ARGS{"bye_".$ballot->id} && $ARGS{"forfeit_".$ballot->id};
	}

	if ($tb_types{"ranks"}) { 

		my %rank_taken;
		my %rank_points;

		foreach my $student (@students) { 
			
			my $ballot = $student_ballot{$student};
			next if ($ARGS{"bye_".$ballot});
			next if ($ARGS{"forfeit_".$ballot});

			my $rank = $ARGS{$student->id."_rank"};
			$errs .= "<p>Rank missing</p>" unless $rank;
			next unless $rank;

			$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
			$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>" if $rank_taken{$rank};
			$errs .= "<p>Rank $rank is outside of range. Maximum is ".scalar @students."</p>" if $rank < 1 || $rank > scalar @students;

			$rank_taken{$rank}++;
			$student_values{$student->id."_rank"} = $rank;
			
			if ($tb_types{"points"}) { 
				$rank_points{$rank} = $ARGS{$student->id."_points"};
			}

		}

		my $current;

		if ($tb_types{"points"}) { 
			foreach my $rk (reverse sort keys %rank_points) { 
				$errs .= "<p>Student ranked $rk has worse speaks than a lower ranked student (".$rank_points{$rk}." vs ".$current.")</p>" if $rank_points{$rk} < $current;
				$current = $rank_points{$rk};
			}
		}

	}

	my %entry_points = ();

	if ($tb_types{"points"}) { 

		if ($team_points) { 

			foreach my $ballot (@ballots) { 

				my $tb_types{"points"} = $ARGS{$ballot->id."_points"};

				next if (($ARGS{"forfeit_".$ballot->id} && $ARGS{"bye_".$ballot->id}) && not defined $tb_types{"points"});

				$errs .= "<p>Points missing</p>" if not defined $tb_types{"points"};
				next if not defined $tb_types{"points"};

				if ($tb_types{"points"} > 0) { 

					$tb_types{"points"} = int($tb_types{"points"} + 0.5) if $point_increments eq "whole";

					if ($point_increments eq "tenths") { 
						$tb_types{"points"} = $tb_types{"points"} * 10;
						$tb_types{"points"} = int($tb_types{"points"} + 0.5);
						$tb_types{"points"} = $tb_types{"points"}/10;
					}

					if ($point_increments eq "half") { 
						$tb_types{"points"} = $tb_types{"points"} * 2;
						$tb_types{"points"} = int($tb_types{"points"} + 0.5);
						$tb_types{"points"} = $tb_types{"points"}/2;
					}
				}

				foreach my $student (@students) { 
					next unless $student_entry{$student->id} == $ballot->entry->id;
					$student_values{$student->id."_points"} = $tb_types{"points"};
				}

				$entry_points{$ballot->entry->id} += $tb_types{"points"};

				next if ($ARGS{"forfeit_".$ballot->id} || $ARGS{"bye_".$ballot->id});

				$errs .= "<p>$tb_types{"points"} Points must be a number</p>" unless ($tb_types{"points"} == 0 || $tb_types{"points"} eq $tb_types{"points"} + 0);

				$errs .= "<p>Points $tb_types{"points"} are outside of range ($min_points to $max_points)</p>" 
					if $tb_types{"points"} < $min_points 
					|| $tb_types{"points"} > $max_points;

			}

		} else { 

			foreach my $student (@students) { 

				my $tb_types{"points"} = $ARGS{$student->id."_points"};
				my $ballot = $student_ballot{$student};

				next if (($ARGS{"forfeit_".$ballot} && $ARGS{"bye_".$ballot}) && not defined $tb_types{"points"});

				$errs .= "<p>Points missing for ".$student->first." ".$student->last."</p>" if not defined $tb_types{"points"};
				next if not defined $tb_types{"points"};

				if ($tb_types{"points"} > 0) { 

					$tb_types{"points"} = int($tb_types{"points"} + 0.5) if $point_increments eq "whole";

					if ($point_increments eq "tenths") { 
						$tb_types{"points"} = $tb_types{"points"} * 10;
						$tb_types{"points"} = int($tb_types{"points"} + 0.5);
						$tb_types{"points"} = $tb_types{"points"}/10;
					}

					if ($point_increments eq "half") { 
						$tb_types{"points"} = $tb_types{"points"} * 2;
						$tb_types{"points"} = int($tb_types{"points"} + 0.5);
						$tb_types{"points"} = $tb_types{"points"}/2;
					}
				}

				$student_values{$student->id."_points"} = $tb_types{"points"};
				$entry_points{$student_entry{$student->id}} += $tb_types{"points"};

				next if ($ARGS{"forfeit_".$ballot} || $ARGS{"bye_".$ballot});

				$errs .= "<p>$tb_types{"points"} Points must be a number</p>" unless ($tb_types{"points"} == 0 || $tb_types{"points"} eq $tb_types{"points"} + 0);

				$errs .= "<p>Points $tb_types{"points"} are outside of range ($min_points - $max_points)</p>" 
					if $tb_types{"points"} < $min_points || $tb_types{"points"} > $max_points;

			}
		}
	}

	my $winner;

	if ($tb_types{"winloss"})  {

		my $winning_ballot = $ARGS{"winner"};
		$winner = Tab::Ballot->retrieve($winning_ballot);

		my $byes;
		foreach my $ballot (@ballots) { 
			$byes++ if ($ARGS{"forfeit_".$ballot->id} || $ARGS{"bye_".$ballot->id});
		}

		$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>" unless ($winner || $byes);

		if ($winner) { 
			my $winner_points = $entry_points{$winner->entry->id};
			foreach my $ballot (@ballots) { 

				next unless $ballot->entry;
				my $bal_points = $entry_points{$ballot->entry->id};

				$errs .= "<p>Low point wins are not allowed by this tournament</p>" 
					if $winner_points < $bal_points && $no_lpw;
			}
		}
	}

	my %points_taken;

	if ($tb_types{"points"}) {

		foreach my $ballot (@ballots) { 

			next unless $ballot->entry 
				&& $ballot->entry->id;

			next if $ARGS{"bye_".$ballot->id} 
				|| $ARGS{"forfeit_".$ballot->id};

			my $tb_types{"points"} = $entry_points{$ballot->entry->id};

			$errs .= "<p>Tied points forbidden: you have two entries with total points $tb_types{"points"} </p>"  
				if $tb_types{"points"}_taken{$tb_types{"points"}} 
					&& $point_ties < 1 
					&& $tb_types{"points"} > 0;

			$tb_types{"points"}_taken{$tb_types{"points"}}++;
		}
	}

	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);

	if ($errs) { 

		$m->redirect("../index.mhtml?timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&flight=".$panel->flight."&errs=$errs&err=Trouble in Paradise!");

	} else { 

		my $ballot_err;

		my $audit_method = $event->category->setting("audit_method");
		$audit_method = "twice" unless $audit_method;

		my $audit = 0;
		$audit = 1 if $audit_method eq "none";

		my $byes;
		foreach my $ballot (@ballots) { 
			$byes++ if $ballot->bye;
			$byes++ if $ballot->forfeit;
		}

		if (@scores && $audit_method eq "twice") { 

			my %student_rank;
			my %student_points;
			my $current_winner;
			my $current_loser;

			foreach my $bv (@scores) { 
				$student_rank{$bv->student->id} = $bv->value if $bv->tag eq "rank";
				$student_points{$bv->student->id} = $bv->value if $bv->tag eq "points";

				$current_loser = $bv->ballot->id if $bv->tag eq "ballot" && $bv->value == 0;
				$current_winner = $bv->ballot->id if $bv->tag eq "ballot" && $bv->value == 1;
			}

			foreach my $ballot (@ballots) { 

				$ballot_err .= "Forfeiting entry's different <br />" 
					if ($ballot->forfeit &! $ARGS{"forfeit_".$ballot->id});

				$ballot_err .= "Bye entry's different  <br />" 
					if ($ballot->bye &!  $ARGS{"bye_".$ballot->id});

			}

			if ($tb_types{"ranks"}) { 
				foreach my $student (@students) { 
					next if $student_rank{$student->id} == $student_values{$student->id."_rank"};
					$ballot_err .= "Ranks for ".$student->id." differed from first entry ".$student_values{$student->id."_rank"}." vs ". $student_rank{$student->id} ."<br />";
				}
			}

			if ($tb_types{"points"}) { 
				foreach my $student (@students) {   
					next if $student_points{$student->id} == $student_values{$student->id."_points"} && length($student_points{$student->id}) == length($student_values{$student->id."_points"});

					$ballot_err .= "Points for ".$student->last." differed from first entry (".$student_values{$student->id."_points"}." vs ".$student_points{$student->id}.") <br />";
				}
			}

			if ($tb_types{"winloss"}) { 
				$ballot_err .= "Winner differed from first entry." if $winner && $current_winner != $winner->id;
			}

			$audit = 2 unless ($ballot_err); 

		} elsif ($byes && $audit_method eq "twice") { 

			my $haz_byes;

			foreach my $ballot (@ballots) { 

				$ballot_err .= "Forfeiting entry was different ".$ARGS{"forfeit_".$ballot->id}." <br />" 
					if ($ballot->forfeit &! $ARGS{"forfeit_".$ballot->id});

				$ballot_err .= "Bye entry was different <br />".$ARGS{"bye_".$ballot->id}."  <br />"
					if ($ballot->bye &! $ARGS{"bye_".$ballot->id});

				$haz_byes++ if $ARGS{"bye_".$ballot->id};
				$haz_byes++ if $ARGS{"forfeit_".$ballot->id};
			}

			$audit = 2 unless $ballot_err; 

		}

		unless ($audit == 2) { 

			# Clear the old cruft
			Tab::Score->set_sql( clear_cruft => "
				delete score.*
				from score, ballot
				where ballot.panel = ?
				and ballot.judge = ? 
				and (score.tag = 'rank'
						or score.tag = 'points' 
						or score.tag = 'ballot') 
				and ballot.id = score.ballot");

			Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id);

		}

		foreach my $ballot (@ballots) { 

			$ballot->audit(0);
			$ballot->entered_by($person->id);

			if ($audit >= 1) { 
				$ballot->audit(1);
				$panel->started($now) unless $panel->started;
				$panel->confirmed($now) unless $panel->confirmed;
				$panel->update;
			}

			$ballot->bye($ARGS{"bye_".$ballot->id});
			$ballot->forfeit($ARGS{"forfeit_".$ballot->id});

			$ballot->update;
	
			unless ($audit == 2) { 

				if ($tb_types{"winloss"} && $ARGS{"bye_".$ballot->id} < 1 
						&& $ARGS{"forfeit_".$ballot->id} < 1) { 

					my $tigers_blood = 0;
					$tigers_blood++ if $winner && $winner->id == $ballot->id;

					$tigers_blood = 0 if $ballot->forfeit;
					$tigers_blood++ if $ballot->bye;

					next if Tab::Score->search(
						tag    => "ballot",
						ballot => $ballot->id
					);

					eval{ 
						Tab::Score->create({
							ballot   => $ballot->id,
							value    => $tigers_blood,
							tag      => "ballot",
							tiebreak => 2,
							student  => 0
						});
					};

				}

				if ($tb_types{"points"}) { 

					foreach my $student (@students) { 

						next unless $ballot && $ballot->entry;
						next unless $student > 0;
						next unless $student_entry{$student->id} == $ballot->entry->id;
						next unless length($student_values{$student->id."_points"}) > 0;

						next if Tab::Score->search(
							tag     => "points",
							ballot  => $ballot->id,
							student => $student->id
						);

						eval{ 
							my $bv = Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "points",
								tiebreak => 3,
								value    => $student_values{$student->id."_points"}
							});
						};

					}

				}

				if ($tb_types{"ranks"}) { 

					foreach my $student (@students) { 

						next unless $student_entry{$student->id} == $ballot->entry->id;
						next unless defined $student_values{$student->id."_rank"};

						next if Tab::Score->search(tag => "rank", ballot => $ballot->id, student => $student->id);

						eval{ 
							Tab::Score->create({
								ballot   => $ballot->id,
								student  => $student->id,
								tag      => "rank",
								tiebreak => 1,
								value    => $student_values{$student->id."_rank"}
							});
						};

					}
				}
			}
		}

		foreach my $ballot (@ballots) { 

			foreach my $value ($ballot->values(tag => "")) { 

				# This bug is driving me up the F#%)(*&#%(@*%&! wall.  for now
				# check for it and fix it on the fly.  NOTE:  This is an
				# incredibly ugly hack.

				$value->tag("rank") if $value->tiebreak == 1;
				$value->tag("ballot") if $value->tiebreak == 2;
				$value->tag("points") if $value->tiebreak == 3;
	
				eval { $value->update; };

			}
		}

		my $yellowmsg;
		my $greenmsg;
		my $err;

		$audit = 2 if $audit_method eq "none";

		if ($ballot_err) { 
			$err = "Trouble in paradise!";
		} else { 
			$yellowmsg = "Ballot first entry complete.  Pass to someone to enter for a doublecheck. $audit" if $audit < 2;
			$greenmsg = "Ballot entry complete." if $audit > 1;
		}

#		$m->comp("/funclib/round_done.mas", round => $round);

		$m->redirect("../index.mhtml?timeslot_id=".$round->timeslot->id."&greenmsg=$greenmsg&yellowmsg=$yellowmsg&err=$err&ballot_err=$ballot_err");

	}

</%init>
