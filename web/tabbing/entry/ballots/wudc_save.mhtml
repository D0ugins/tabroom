<%args>
	$tourn
	$person
	$judge_id
	$panel_id
	$all     => undef
	$display => undef
</%args>
<%init>

	my $msg;
	my $err;
	my $greenmsg;
	my $yellowmsg;

	my $ballot_err;
	my $rank_string;

	my $judge = Tab::Judge->retrieve($judge_id);
	my $panel = Tab::Panel->retrieve($panel_id);

	my $now = DateTime->now();


	my @ballots = Tab::Ballot->search(
		judge => $judge_id,
		panel => $panel_id
	);

	my @scores = $m->comp(
		'/funclib/panel_scores.mas',
		panel => $panel,
		judge => $judge
	);

	my $round = $panel->round;
	my $event = $round->event;

	my %values_by_ballot = ();
	foreach my $value (@scores) {
		push @{$values_by_ballot{$value->ballot->id}}, $value;
	}

	my $point_increments = $event->setting("point_increments") if $panel;
	my $min = $event->setting('min_points') if $panel;
	my $max = $event->setting('max_points') if $panel;

	my %team_rank;
	my %team_points;
	my %speaker_points;
	my %already;

	my $audit_method = $event->category->setting("audit_method");
	$audit_method = "twice" unless $audit_method;


	if ($round->type eq "elim") {

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		my %used;
		my @winners;
		my @winner_codes;
		my %positions;

		foreach my $entry (@entries) {

			my $position = $ARGS{"position_".$entry->id};

			if ($position < 1 || $position > 4) {

				$err = "You did not specify a position for ".$entry->code;

			} elsif ($used{$position}) {

				$err = "You assigned two entries to ";
				$err .= "1st Gov" if $position == 1;
				$err .= "1st Opp" if $position == 2;
				$err .= "2nd Gov" if $position == 3;
				$err .= "2nd Opp" if $position == 4;

			} else {

				$positions{$entry->id} = $position;
				$used{$position}++;

				if ($ARGS{"advances_".$entry->id}) {
					push @winners, $entry->id;
					push @winner_codes, $entry->code;
				}

			}
		}

		$err = "You have advanced ".scalar @winners." and not 2.  Try again." if scalar @winners != 2;

		unless ($err) {

			my %entry_winner = map {$_ => 1} @winners;

			foreach my $ballot (@ballots) {

				foreach my $value (@{$values_by_ballot{$ballot->id}}) {
					$value->delete;
				}

				my $entry = $ballot->entry->id;

				$ballot->speakerorder($positions{$entry});
				$ballot->audit("1");
				$ballot->update;

				if ($entry_winner{$entry}) {

					Tab::Score->create({
						ballot  => $ballot->id,
						tag     => "winloss",
						value   => 1,
						student => 0
					});

				} else {

					Tab::Score->create({
						ballot  => $ballot->id,
						tag     => "winloss",
						student => 0,
						value   => 0
					});

				}
			}

			$msg = "Entry finished.<br />";
			my $notfirst;

			foreach my $code (@winner_codes) {
				$msg .= " and " if $notfirst++;
				$msg .= $code;
			}

			$msg .= " advanced.";

		}

		$m->redirect("../index.mhtml?all=$all&timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&err=$err") if $err;
		$m->redirect("../index.mhtml?all=$all&timeslot_id=".$round->timeslot->id."&msg=$msg");

	} else {

		foreach my $ballot (@ballots) {

			foreach my $student ($ballot->entry->students) {
				$speaker_points{$student->id} += $ARGS{"points_".$student->id};
				$team_points{$ballot->entry->id} += $ARGS{"points_".$student->id};

				$ballot_err .= "Points ".$ARGS{"points_".$student->id}." are outside range"
					if $ARGS{"points_".$student->id} < $min
						|| $ARGS{"points_".$student->id} > $max;
			}

			$ballot_err .= " Duplicated team points of ".$team_points{$ballot->entry->id}
				if $already{$team_points{$ballot->entry->id}};

			$already{$team_points{$ballot->entry->id}}++;
		}

		$m->redirect("../index.mhtml?all=$all&timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&ballot_err=$ballot_err&err=$err") if $ballot_err;

		my %done_team;
		my %done_student;

		@ballots = sort {$team_points{$b->entry->id} <=> $team_points{$a->entry->id}} @ballots;

		my $rank;

		foreach my $ballot (@ballots) {

			$rank++;
			$team_rank{$ballot->entry->id} = $rank;

			foreach my $value (@{$values_by_ballot{$ballot->id}}) {

				if ($value->tag eq "point") {

					if ($value->value != $speaker_points{$value->student}) {
						$ballot_err = "Points disagreed.  Please enter again" if $audit_method eq "twice";
						$value->value($speaker_points{$value->student});
						$value->update;
					}

					$done_student{$value->student}++;
				}

				if ($value->tag eq "rank") {

					if ($value->value != $rank) {
						$ballot_err = "Ranks disagreed.  Please enter again" if $audit_method eq "twice";
						$value->value($rank);
						$value->update;
					}

					$done_team{$ballot->entry->id}++;
				}
			}
		}

		my $undone;

		foreach my $ballot (@ballots) {

			foreach my $student ($ballot->entry->students) {

				next if $done_student{$student->id};
				$undone++;

				Tab::Score->create({
					ballot  => $ballot->id,
					tag     => "point",
					student => $student->id,
					value   => $speaker_points{$student->id}
				});

			}

			next if $done_team{$ballot->entry->id};
			$undone++;

			Tab::Score->create({
				ballot => $ballot->id,
				tag    => "rank",
				value  => $team_rank{$ballot->entry->id}
			});

		}

		$m->redirect("../index.mhtml?all=$all&timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&ballot_err=$ballot_err&err=$err") if $ballot_err;

		my $done;

		if (
			($audit_method eq "twice" && not defined $undone)
			|| ($audit_method eq "none")
		) {

			$done++;

			foreach my $ballot ($panel->ballots) {
				$ballot->audit(1);
				$ballot->entered_by($person->id);
				$ballot->update;
			}

			$panel->started($now) unless $panel->started;
			$panel->confirmed($now) unless $panel->confirmed;
			$panel->update;

			$greenmsg = "Ballot complete.";

		} else {

			foreach my $ballot ($panel->ballots) {
				$ballot->entered_by($person->id);
				$ballot->audit(0);
				$ballot->update;
			}

			$yellowmsg = "First entry complete.  Re-enter ballot to confirm ".$audit_method;
		}

		$rank_string = "Ballot first entry done.  Confirmation pending" unless $done;
		$rank_string = "Ballot confirmed <br />" if $done;

		foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {

			$rank_string .= $team_rank{$ballot->entry->id}.' pts., ';
			$rank_string .= $ballot->entry->code.' '.$team_points{$ballot->entry->id}.' speaker points <br />';
		}

	}

	$m->comp("/funclib/round_done.mas", round => $round);

	$m->redirect("../index.mhtml?all=$all&timeslot_id=".$round->timeslot->id."&err=$err&rank_string=$rank_string&msg=$msg&greenmsg=$greenmsg&yellowmsg=$yellowmsg");

</%init>

