<%args>
	$round_id
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

	foreach my $existing ($m->comp("/funclib/round_scores.mas", round => $round)) {
		$existing->delete;
	}

	use List::Util 'shuffle';

	foreach my $panel ($round->panels) {

		my @ballots = shuffle($panel->ballots);

		my $rank;

		if ($round->type eq "elim" || $round->type eq "final") {

			my @winners;
			my @losers;

			foreach my $ballot (@ballots) {
				next unless $ballot->chair;
				if ( (scalar @winners == 1 && $round->type eq "final") || scalar @winners > 1) {
					push @losers, $ballot;
				} else {
					push @winners, $ballot;
				}
			}

			foreach my $winner (@winners) {

				Tab::Score->create({
					ballot => $winner->id,
					tag    => "winloss",
					value  => 1
				});

				$winner->audit(1);
				$winner->update;

			}

			foreach my $loser (@losers) {

				Tab::Score->create({
					ballot => $loser->id,
					tag    => "winloss",
					value  => 0
				});

				$loser->audit(1);
				$loser->update;
			}

		} elsif ($round->type eq "final") {

			my $winner;

			foreach my $ballot (@ballots) {
				next unless $ballot->chair;
				$winner = $ballot;
				last;
			}


		} else {

			foreach my $ballot (@ballots) {

				next unless $ballot->chair;

				$rank++;

				foreach my $student ($ballot->entry->students) {

					my $points = int(rand(20));
					$points+= 60;

					Tab::Score->create({
						ballot  => $ballot->id,
						tag     => "point",
						student => $student->id,
						value   => $points
					});

				}

				Tab::Score->create({
					ballot => $ballot->id,
					tag    => "rank",
					value  => $rank
				});

			}

			foreach my $ballot (@ballots) {
				$ballot->audit(1);
				$ballot->update;
			}

		}

	}

	my $msg = "Ranks faked for round";
	$m->redirect("index.mhtml?msg=$msg");

</%init>

