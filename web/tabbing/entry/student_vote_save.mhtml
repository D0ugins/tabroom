<%args>
	$tourn
	$tourn_settings
	$person
	$voter_id => undef
	$panel_id => undef
</%args>
<%init>

	my $chamber = Tab::Panel->retrieve($panel_id) if $panel_id;
	my $voter = Tab::Entry->retrieve($voter_id) if $voter_id;

	$m->abort unless $chamber && $voter;

	my $truncate = $chamber->round->event->setting('student_truncate_fill');

	my @entries = $m->comp("/funclib/panel_entries.mas", panel => $chamber);
	$truncate = scalar @entries unless $truncate;

	my %taken;
	my $errs;

	my @all_votes = Tab::StudentVote->search(panel => $chamber->id, voter => $voter->id);

	my %votes = map {$_->entry->id => $_} @all_votes;

	my $now = DateTime->now(time_zone => $tourn->tz);

	foreach my $entry (@entries) {

		next if $entry->id == $voter->id;

		my $rank = $ARGS{$entry->id};

		if ($taken{$rank}) {
			$errs = "You have repeated the rank $rank. ";
		} else {

			$rank = $truncate unless $rank;

			if ($votes{$entry->id}) {
				$votes{$entry->id}->rank($rank);
				$votes{$entry->id}->entered_by($person->id);
				$votes{$entry->id}->entered_at($now);
				$votes{$entry->id}->update();
			} else {

				Tab::StudentVote->create({
					rank       => $rank,
					panel      => $chamber->id,
					entry      => $entry->id,
					voter      => $voter->id,
					entered_by => $person->id,
					entered_at => $now
				});
			}

			$taken{$rank}++ unless $rank == $truncate;
		}

		Tab::debuglog("Here with entry $entry");
	}

	my $msg = "Student ballot saved for ".$voter->code unless $errs;

	$m->redirect("student_vote.mhtml?panel_id=".$chamber->id."&voter_id=".$voter->id."&err=$errs&msg=$msg");

</%init>
