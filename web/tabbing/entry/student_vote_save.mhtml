<%args>
	$tourn
	$tourn_settings
	$person
	$voter_id => undef
	$panel_id => undef
</%args>
<%init>

	my $chamber = Tab::Panel->retrieve($panel_id) if $panel_id;
	my $voter = Tab::Entry->retrieve($voter_id) if $voter_id;

	$m->abort unless $chamber && $voter;

	my $now = DateTime->now();

	my $round = $chamber->round;
	my $event = $round->event;

	my %tb_types = $m->comp(
		"/funclib/tiebreak_types.mas",
		round => $chamber->round
	);

	my $vote_event;
	my $vote_chamber;
	my $vote_session;

	if ($event->setting("po_contest")) {

		$vote_event = Tab::Event->retrieve($event->setting("po_contest"));

		if ($vote_event) {

			$vote_session = $vote_event->rounds(name => $round->name)->first;

			if ($vote_session) {
				$vote_chamber = $vote_session->panels(letter => $chamber->letter)->first;

				if ($vote_chamber) {
					%tb_types = $m->comp(
						"/funclib/tiebreak_types.mas",
						round => $vote_session
					);
				}
			}
		}
	}

	unless ($vote_chamber) {
		$vote_chamber = $chamber;
		$vote_event = $event;
	}

	my $truncate = $vote_event->setting('student_truncate_fill');

	my @entries = $m->comp("/funclib/panel_entries.mas", panel => $vote_chamber);

	if ($tb_types{"entry_winloss"}) {

		my $winner = $ARGS{"winner"};

		my $dbh = Tab::DBI->db_Main();
		my $wipe_sth = $dbh->prepare("
			delete vote.*
            from student_vote vote
            where vote.panel = ?
				and vote.voter = ?
		");

		$wipe_sth->execute($vote_chamber, $voter);

		Tab::StudentVote->create({
			tag        => "winloss",
			value      => 1,
			panel      => $vote_chamber->id,
			entry      => $ARGS{"winner"},
			voter      => $voter->id,
			entered_by => $person->id,
			entered_at => $now
		});
	}

	my $errs;

	if ($tb_types{"entry_rank"}) {

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $vote_chamber);
		$truncate = scalar @entries unless $truncate;

		my %taken;
		my $errs;

		my @all_votes = Tab::StudentVote->search(panel => $chamber->id, voter => $voter->id);

		my %votes = map {$_->entry->id => $_} @all_votes;


		foreach my $entry (@entries) {

#			this event is stupid
#			next if $entry->id == $voter->id;

			my $rank = $ARGS{$entry->id};

			if ($taken{$rank}) {
				$errs = "You have repeated the rank $rank. ";
			} else {

				$rank = $truncate unless $rank;

				if ($votes{$entry->id}) {
					$votes{$entry->id}->value($rank);
					$votes{$entry->id}->entered_by($person->id);
					$votes{$entry->id}->entered_at($now);
					$votes{$entry->id}->update();
				} else {

					Tab::StudentVote->create({
						value      => $rank,
						panel      => $chamber->id,
						entry      => $entry->id,
						voter      => $voter->id,
						entered_by => $person->id,
						entered_at => $now
					});
				}

				$taken{$rank}++ unless $rank == $truncate;
			}

		}
}

	my $msg = "Student ballot saved for ".$voter->code unless $errs;

	$m->redirect("student_vote.mhtml?panel_id=".$chamber->id."&voter_id=".$voter->id."&err=$errs&msg=$msg");

</%init>
